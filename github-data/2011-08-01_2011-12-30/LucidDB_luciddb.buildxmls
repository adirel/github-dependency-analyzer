<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<!DOCTYPE project [
<!ENTITY FarragoProps
"
-Dnet.sf.farrago.home=${farrago.dir}
-Dnet.sf.farrago.catalog=${project.catalog.dir}
-Djava.util.logging.config.file=${project.trace.propfile}
">

<!ENTITY FarragoSqlLineProps
"
&FarragoProps;
-Dsqlline.historyFile=${sqlline.hist.file}
">

]>

<project name="applib" basedir="." default="jar">
  <dirname property="applib.dir" file="${ant.file.applib}" />
  <property name="open.dir" location="${applib.dir}/../.." />
  <property name="classes.dir" value="${applib.dir}/classes" />
  <property name="applib.plugin.dir" location="${applib.dir}/plugin" />
  <property name="resource.src.dir" location="${applib.dir}/src/org/eigenbase/applib/resource" />

  <import file="${open.dir}/farrago/buildMacros.xml" />

  <path id="build.classpath">
    <pathelement path="${farrago.run.classpath}" />
    <pathelement path="${farrago.sqltest.classpath}"/>
  </path>
  <property name="build.classpath" refid="build.classpath"/>

  <fileset dir="${applib.dir}" id="fileset.taggable">
    <include name="src/**/*.java"/>
  </fileset>

  <path id="test.classpath">
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${classes.dir}"/>
    <pathelement path="${build.classpath}"/>
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="compile">
    <mkdir dir="${classes.dir}"/>
    <antcall target="generateResources"/>
    <javac
      debug="on"
      deprecation="off"
      srcdir="${applib.dir}/src"
      destdir="${classes.dir}"
      classpath="${build.classpath}">
      <include name="**/*.java" />
    </javac>
  </target>

  <target name="jar" depends="compile">
    <mkdir dir="${applib.plugin.dir}"/>
    <jar jarfile="${applib.plugin.dir}/eigenbase-applib.jar">
      <fileset dir="${applib.dir}/classes">
        <include name="**"/>
      </fileset>
      <fileset dir="${applib.dir}">
        <include name="COPYING"/>
      </fileset>
    </jar>
  </target>

  <target name="createEclipseProject">
    <create.eclipse.project project.dir="${applib.dir}" classpath="${build.classpath}"/>
  </target>

  <target name="generateResources"
    depends="checkResourceUptodate" unless="resource.uptodate">
    <farrago.javaCompile
      deprecation="off"
      srcdir="${applib.dir}/src"
      destdir="${classes.dir}"
      classpath="${build.classpath}">
      <include name="**/ApplibException.java"/>
    </farrago.javaCompile>
    <taskdef name="resgen" classname="org.eigenbase.resgen.ResourceGenTask"
      classpathref="test.classpath" />
    <resgen srcdir="${applib.dir}/src" destdir="${applib.dir}/src" 
      resdir="${classes.dir}"
      style="functor" locales="en_US">
      <include name="org/eigenbase/applib/resource/ApplibResource.xml" />
    </resgen>
  </target>

  <target name="checkResourceUptodate">
    <condition property="resource.uptodate">
      <uptodate srcfile="${resource.src.dir}/ApplibResource.xml"
        targetfile="${resource.src.dir}/ApplibResource.java" />
    </condition>
  </target>

  <target name="clean">
    <delete dir="${classes.dir}" quiet="true"/>
    <delete dir="${applib.plugin.dir}" quiet="true"/>
    <delete>
      <fileset dir="${resource.src.dir}">
        <include name="**/ApplibResource*.java"/>
      </fileset>
    </delete>
  </target>

  <target name="etags">
    <farrago.createEmacsTags filesetPropertyName="fileset.taggable"/>
  </target>

  <!-- Beautify source code.  This currently requires
       the commercial Triemax version of Jalopy, which needs to
       be installed manually under thirdparty/jalopy. -->
  <target name="jalopy">
    <taskdef name="jalopy"
      classname="com.triemax.JalopyTask">
      <classpath>
        <fileset dir="${jalopy.dir}/lib">
          <include name="*.jar"/>
        </fileset>
      </classpath>
    </taskdef>
    <jalopy backup="false" convention="${farrago.src.dir}/jalopy.xml" 
      threads="2" classpathref="test.classpath" history="NONE" 
      force="true">
      <fileset dir="${applib.dir}/src">
        <include name="**/*.java"/>
      </fileset>
    </jalopy>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<!DOCTYPE project [

<!ENTITY FarragoProps
"
-Dnet.sf.farrago.home=${farrago.dir}
-Dnet.sf.farrago.catalog=${project.catalog.dir}
-Djava.util.logging.config.file=${project.trace.propfile}
-Dsfdc.dir=${sfdc.dir}
">

<!ENTITY FarragoSqlLineProps
"
&FarragoProps;
-Dsqlline.historyFile=${sqlline.hist.file}
">

]>

<project name="sfdc" basedir="." default="compile">
  <dirname property="sfdc.dir" file="${ant.file.sfdc}" />
  <property name="open.dir" location="${sfdc.dir}/../../.." />

  <property file="config.properties" />
  <property file="build.properties" />

  <property name="sfdc.testlog.dir" location="${sfdc.dir}/testlog"/>
  <property name="classes.dir" value="${sfdc.dir}/classes" />
  <property name="sfdc.plugin.dir" location="${sfdc.dir}/plugin" />
  <property name="sfdc.util.dir" location="${sfdc.dir}/standalone-util" />
  <property name="resource.src.dir" location="${sfdc.dir}/src/net/sf/farrago/namespace/sfdc/resource" />

  <import file="${open.dir}/farrago/buildMacros.xml" />

  <!-- directories for unit test SQL scripts -->
  <property name="sfdcunitsql.dir" location="${sfdc.dir}/unitsql"/>
  <property name="sfdcgensql.dir" location="${sfdcunitsql.dir}/gen"/>

  <!-- ===================================================== -->
  <!-- Classpaths                                            -->
  <!-- ===================================================== -->

  <path id="build.classpath">
    <pathelement 
      path="${thirdparty.dir}/vjdbc/lib/commons-codec-1.3.jar"/>
    <pathelement 
      path="${thirdparty.dir}/vjdbc/lib/commons-httpclient-3.0.1.jar"/>
    <pathelement path="${thirdparty.dir}/javamail-1.3.1/activation.jar"/>
    <pathelement path="${thirdparty.dir}/javamail-1.3.1/mail.jar"/>
    <pathelement path="${thirdparty.dir}/axis/lib/axis.jar"/>
    <pathelement path="${thirdparty.dir}/axis/lib/axis-ant.jar"/>
    <pathelement path="${thirdparty.dir}/axis/lib/jaxrpc.jar"/>
    <pathelement path="${thirdparty.dir}/axis/lib/saaj.jar"/>
    <pathelement path="${thirdparty.dir}/axis/lib/commons-logging-1.0.4.jar"/>
    <pathelement path="${thirdparty.dir}/axis/lib/commons-discovery-0.2.jar"/>
    <pathelement path="${thirdparty.dir}/axis/lib/wsdl4j-1.5.1.jar"/>
    <pathelement path="${farrago.run.classpath}" />
    <pathelement path="${farrago.sqltest.classpath}"/>
  </path>
  <property name="build.classpath" refid="build.classpath"/>


  <path id="test.classpath">
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${sfdc.dir}/classes"/>
    <pathelement path="${build.classpath}"/>
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <path id="sfdcjavaext.dirs">
    <pathelement path="${java.home}/lib/ext"/>
    <pathelement path="${sqlline.dir}"/>
  </path>
  <property name="sfdcjavaext.dirs" refid="sfdcjavaext.dirs"/>

  <!-- ===================================================== -->
  <!-- ===================================================== -->

  <taskdef name="wsdl2java"
    classname="org.apache.axis.tools.ant.wsdl.Wsdl2javaAntTask"
    onerror="ignore">
    <classpath>
      <pathelement path="${build.classpath}"/>
    </classpath>
  </taskdef>

  <target name="axis">
    <exec executable="make" dir="${thirdparty.dir}">
      <arg line="axis"/>
    </exec>
  </target>

  <target name="wsdl2java">
    <wsdl2java all="true" debug="false" helpergen="true"
      output="${sfdc.dir}/src" verbose="false"
      url="${wsdl}">
      <classpath path="${build.classpath}"/>
    </wsdl2java>
  </target>

  <target name="gen-java">
    <antcall target="axis"/>
    <antcall target="wsdl2java"/>
  </target>

  <target name="compile" depends="gen-java">
    <mkdir dir="${classes.dir}"/>
    <antcall target="generateResources"/>
    <javac
      debug="on"
      deprecation="off"
      srcdir="${sfdc.dir}"
      destdir="${classes.dir}"
      classpath="${build.classpath}">
      <include name="**/*.java" />
      <exclude name="**/*Test.java" />
    </javac>
  </target>

  <target name="jarSfdcPlugin">
    <mkdir dir="${sfdc.plugin.dir}"/>
    <jar destfile="${sfdc.plugin.dir}/conn-sfdc.jar">
      <manifest>
        <attribute
          name="DataWrapperClassName"
          value="net.sf.farrago.namespace.sfdc.SfdcDataWrapper" />
        <section name="deploy.txt">
        <attribute
          name="SQLJDeploymentDescriptor"
          value="TRUE" />
	</section>
      </manifest>
      <fileset dir="${classes.dir}"
        includes="com/sforce/**,net/sf/farrago/namespace/sfdc/**"
        excludes="net/sf/farrago/namespace/sfdc/Export*"/>
      <fileset dir="${open.dir}/farrago/classes"
        includes="org/eigenbase/util/EigenbaseException.class"/>
      <fileset file="${sfdc.dir}/src/deploy.txt"/>
    </jar>
  </target>

  <target name="jarSfdcPluginWithDeps" depends="jarSfdcPlugin">
    <mkdir dir="${sfdc.plugin.dir}"/>
    <jar destfile="${sfdc.plugin.dir}/conn-sfdc-complete.jar">
      <manifest>
        <attribute
          name="DataWrapperClassName"
          value="net.sf.farrago.namespace.sfdc.SfdcDataWrapper" />
        <section name="deploy.txt">
        <attribute
          name="SQLJDeploymentDescriptor"
          value="TRUE" />
	</section>
      </manifest>
      <zipfileset src="${sfdc.plugin.dir}/conn-sfdc.jar"/>
      <zipfileset src="${thirdparty.dir}/axis/lib/axis.jar"/>
      <zipfileset src="${thirdparty.dir}/axis/lib/axis-ant.jar"/>
      <zipfileset src="${thirdparty.dir}/axis/lib/jaxrpc.jar"/>
      <zipfileset src="${thirdparty.dir}/axis/lib/saaj.jar"/>
      <zipfileset src="${thirdparty.dir}/axis/lib/commons-logging-1.0.4.jar"/>
      <zipfileset src="${thirdparty.dir}/axis/lib/commons-discovery-0.2.jar"/>
      <zipfileset src="${thirdparty.dir}/axis/lib/wsdl4j-1.5.1.jar"/>
    </jar>
  </target>

  <target name="installSfdcPlugin" depends="jarSfdcPluginWithDeps">
    <mkdir dir="${sfdc.testlog.dir}"/>
    <junit printsummary="yes" fork="yes" haltonerror="yes" haltonfailure="yes"
      clonevm="yes" tempdir="${sfdc.testlog.dir}" includeantruntime="no">
      <classpath>
         <pathelement path="${test.classpath}" />
         <pathelement path="${ant.classpath}" />
      </classpath>
      <jvmarg line="${assertions.jvmarg}"/>
      <jvmarg line="&FarragoSqlLineProps;"/>
      <sysproperty key="net.sf.farrago.fileset.unitsql"
        value="initsql/createForeignWrapper.sql" />
      <formatter type="plain"/>
      <formatter type="xml"/>
      <test todir="${sfdc.testlog.dir}" name="net.sf.farrago.test.FarragoSqlTest" />
    </junit>
  </target>

  <target name="dist" depends="installSfdcPlugin">
  </target>

  <target name="deploy" depends="dist">
  </target>



  <!-- ===================================================== -->
  <!-- Test targets                                          -->
  <!-- ===================================================== -->

  <target name="sanity" depends="gen-all-sql">
    <property name="testlog.dir" location="${sfdc.testlog.dir}"/>
    <farrago.runSqlTest file="${sfdcgensql.dir}/sanity.sql"
      sqltest.classpath="${test.classpath}"
      java.ext.dirs="${sfdcjavaext.dirs}" />
  </target>

  <target name="test-wsdl2java">
    <wsdl2java all="true" debug="false" helpergen="true"
      output="${sfdc.dir}/src" verbose="false"
      url="${enterprise.wsdl}">
      <classpath path="${build.classpath}"/>
    </wsdl2java>
  </target>

  <target name="test-compile" depends="test-wsdl2java">
    <mkdir dir="${classes.dir}"/>
    <javac
      debug="on"
      deprecation="off"
      srcdir="${sfdc.dir}"
      destdir="${classes.dir}"
      classpath="${build.classpath}">
      <include name="**/*.java" />
    </javac>
  </target>

  <target name="gen-all-sql">
    <copy todir="${sfdcgensql.dir}" overwrite="true" filtering="true">
      <fileset dir="${sfdcunitsql.dir}">
        <include name="**/*.tmpl"/>
      </fileset>
      <mapper type="glob" from="*.tmpl" to="*"/>
      <filterset>
        <filtersfile file="build.properties"/>
      </filterset>
    </copy>
  </target>

  <target name="test" depends="test-compile,gen-all-sql">
    <mkdir dir="${sfdc.testlog.dir}"/>
    <antcall target="test-delete"/>
    <antcall target="test-basic"/>
    <antcall target="test-views"/>
    <antcall target="test-pushdown"/>
    <antcall target="test-pushproj"/>
  </target>

  <target name="create-test">
    <junit printsummary="yes" fork="yes" haltonerror="yes" haltonfailure="yes"
      clonevm="yes" tempdir="${sfdc.testlog.dir}" includeantruntime="no">
      <classpath>
         <pathelement path="${test.classpath}" />
         <pathelement path="${ant.classpath}" />
      </classpath>
      <jvmarg line="${assertions.jvmarg}"/>
      <jvmarg line="&FarragoSqlLineProps;"/>
      <sysproperty key="tests" value="testCreateDelete,testCreateRows"/>
      <env key="SFDC_TEST_HOME" value="${sfdcgensql.dir}"/>
      <env key="username" value="${username_test}"/>
      <env key="password" value="${password_test}"/>
      <formatter type="plain"/>
      <formatter type="xml"/>
      <test todir="${sfdc.testlog.dir}" name="net.sf.farrago.namespace.sfdc.test.CreateAndDeleteTest" />
    </junit>
  </target>

  <target name="edit-sql" depends="create-test">
    <replace dir="${basedir}" replacefilterfile="${sfdcgensql.dir}/tmp.map"
      includes="**/deletes.sql,**/deletes.ref"/>
    <delete file="${sfdcgensql.dir}/tmp.map" quiet="true"/>
    <delete file="${sfdcgensql.dir}/exporttmp.map" quiet="true"/>
  </target>

  <target name="test-delete" depends="edit-sql">
    <property name="testlog.dir" location="${sfdc.testlog.dir}"/>
    <farrago.runSqlTest file="${sfdcgensql.dir}/deletes.sql"
      sqltest.classpath="${test.classpath}"
      java.ext.dirs="${sfdcjavaext.dirs}" />
  </target>

  <target name="test-basic">
    <property name="testlog.dir" location="${sfdc.testlog.dir}"/>
    <farrago.runSqlTest file="${sfdcgensql.dir}/basic.sql"
      sqltest.classpath="${test.classpath}"
      java.ext.dirs="${sfdcjavaext.dirs}" />
  </target>

  <target name="test-views">
    <property name="testlog.dir" location="${sfdc.testlog.dir}"/>
    <farrago.runSqlTest file="${sfdcgensql.dir}/views.sql"
      sqltest.classpath="${test.classpath}"
      java.ext.dirs="${sfdcjavaext.dirs}" />
  </target>

  <target name="test-pushdown">
    <property name="testlog.dir" location="${sfdc.testlog.dir}"/>
    <farrago.runSqlTest file="${sfdcgensql.dir}/pushdown.sql"
      sqltest.classpath="${test.classpath}"
      java.ext.dirs="${sfdcjavaext.dirs}" />
  </target>

  <target name="test-pushproj">
    <property name="testlog.dir" location="${sfdc.testlog.dir}"/>
    <farrago.runSqlTest file="${sfdcgensql.dir}/push-projection.sql"
      sqltest.classpath="${test.classpath}"
      java.ext.dirs="${sfdcjavaext.dirs}" />
  </target>



  <!-- ===================================================== -->
  <!-- ResGen targets                                        -->
  <!-- ===================================================== -->

  <target name="generateResources"
    depends="checkResourceUptodate" unless="resource.uptodate">
    <taskdef name="resgen" classname="org.eigenbase.resgen.ResourceGenTask">
      <classpath refid="farrago.run.classpath" />
    </taskdef>
    <resgen srcdir="${sfdc.dir}/src" destdir="${sfdc.dir}/src" resdir="${classes.dir}"
      style="functor" locales="en_US">
      <include name="net/sf/farrago/namespace/sfdc/resource/SfdcResource.xml" />
    </resgen>
  </target>

  <target name="checkResourceUptodate">
    <condition property="resource.uptodate">
      <uptodate srcfile="${resource.src.dir}/SfdcResource.xml"
        targetfile="${resource.src.dir}/SfdcResource.java" />
    </condition>
  </target>


  <!-- ===================================================== -->
  <!-- Standalone Export utility targets                     -->
  <!-- ===================================================== -->

  <target name="test-export" depends="compile">
    <antcall target="export-only"/>
  </target>

  <target name="export-only">
    <java classname="net.sf.farrago.namespace.sfdc.Export" fork="true">
      <classpath>
        <pathelement path="${test.classpath}"/>
      </classpath>
      <arg value="-user=${username}"/>
      <arg value="-pass=${password}"/>
      <arg value="-objects=${objects}"/>
      <arg value="-withbcp=${withbcp}"/>
      <arg value="-quoteall=${quoteall}"/>
      <arg value="--cdc=${cdc}"/>
      <arg value="-compress=${compress}"/>
      <arg value="-start=${startTime}"/>
      <arg value="-end=${endTime}"/>
      <!-- don't use for now by default. uncomment if you need to
      <arg value="-maxrows=${maxrows}"/>
      <arg value="-batchsize=${batchsize}"/>      -->
    </java>
    <replace dir="${basedir}" replacefilterfile="types.map">
      <include name="**/*.bcp"/>
    </replace>
  </target>

  <target name="jar-util" depends="compile">
    <mkdir dir="${sfdc.util.dir}/tmp"/>
    <unjar dest="${sfdc.util.dir}/tmp">
      <fileset dir="${thirdparty.dir}/axis/lib">
        <include name="**/*.jar"/>
      </fileset>
      <fileset dir="${thirdparty.dir}/javamail-1.3.1">
        <include name="**/*.jar"/>
      </fileset>
      <fileset dir="${thirdparty.dir}/commons-httpclient">
        <include name="**/*.jar"/>
      </fileset>
      <fileset dir="${thirdparty.dir}/commons-codec">
        <include name="**/*.jar"/>
      </fileset>
      <fileset dir="${thirdparty.dir}/resgen/lib">
        <include name="**/*.jar"/>
      </fileset>
    </unjar>
    <jar destfile="${sfdc.util.dir}/sfdc-export.jar">
      <manifest>
        <attribute name="Main-Class" value="net.sf.farrago.namespace.sfdc.Export"/>
      </manifest>
      <fileset dir="${classes.dir}"
        includes="com/sforce/**,net/sf/farrago/namespace/sfdc/**"
        excludes="net/sf/farrago/namespace/sfdc/Sfdc*"/>
      <fileset dir="${sfdc.util.dir}/tmp"
        includes="com/**,javax/**,org/**"/>
      <fileset dir="${open.dir}/farrago/classes"
        includes="org/eigenbase/util/EigenbaseException.class"/>
    </jar>
    <delete dir="${sfdc.util.dir}/tmp" quiet="true"/>
  </target>

  <target name="zip-util" depends="jar-util">
    <mkdir dir="${sfdc.util.dir}/tmp"/>
    <copy file="build-utility.xml" tofile="${sfdc.util.dir}/tmp/build.xml"/>
    <zip destfile="${sfdc.util.dir}/sfdc-export.zip">
      <fileset dir="${sfdc.util.dir}"
        includes="sfdc-export.jar"/>
      <fileset dir="${sfdc.dir}"
        includes="types.map,config.properties"/>
      <fileset dir="${sfdc.util.dir}/tmp"
        includes="build.xml"/>
    </zip>
    <delete dir="${sfdc.util.dir}/tmp" quiet="true"/>
  </target>

  <target name="createEclipseProject">
    <create.eclipse.project project.dir="${sfdc.dir}" classpath="${build.classpath}"/>
  </target>

  <!-- ===================================================== -->
  <!-- Clean target                                          -->
  <!-- ===================================================== -->

  <target name="clean">
    <antcall target="clean-test"/>
    <delete dir="${classes.dir}" quiet="true"/>
    <delete dir="${sfdc.dir}/conf" quiet="true"/>
    <delete dir="${sfdc.dir}/src/com" quiet="true"/>
    <delete dir="${sfdc.plugin.dir}" quiet="true"/>
    <delete dir="${sfdc.util.dir}" quiet="true"/>
    <delete dir="${sfdc.testlog.dir}" quiet="true"/>
    <delete>
      <fileset dir="${sfdc.dir}/src/net/sf/farrago/namespace/sfdc/resource">
        <include name="**/SfdcResource.java"/>
        <include name="**/SfdcResource_en_US.java"/>
      </fileset>
    </delete>
  </target>

  <target name="clean-test">
    <delete dir="${sfdcgensql.dir}"/>
  </target>

  <!--
  ****************************************************
       SETUP TARGET
  ****************************************************
  -->
  <target name="setup">
  </target>

  <target name="help">
    <echo>
Typical targets:

  all => clean build
  build => setup compile dist deploy
    </echo>
  </target>

  <!--
  ****************************************************
       MAIN TARGETS
  ****************************************************
  -->
  <target name="all" depends="clean,build"/>
  <target name="build" depends="setup,compile,dist,deploy"/>

</project>
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." default="build-project" name="luciddb-postgres-adapter">
	
	<property name="build.dir" value="${basedir}/build"/>
	<property name="luciddb.postgres.adapter.jar" value="${build.dir}/luciddb-postgres-adapter.jar"/>
	<property name="luciddb.postgres.pg_catalog.jar" value="${build.dir}/luciddb-postgres-adapter-catalog.jar"/>
	<property name="thirdparty.dir" value="${basedir}/../../../thirdparty"/>

    <path id="luciddb-postgres-adapter.classpath">
        <pathelement location="classes"/>
        <pathelement location="${thirdparty.dir}/hsqldb.jar"/>
        <pathelement location="lib/log4j.jar"/>
        <pathelement location="lib/LucidDbClient.jar"/>
    </path>
    <target name="init">
        <mkdir dir="classes"/>
        <mkdir dir="${build.dir}"/>
        <copy includeemptydirs="false" todir="classes">
            <fileset dir="src" excludes="**/*.launch, **/*.java"/>
        </copy>
    </target>
    <target name="clean">
        <delete dir="classes"/>
        <delete dir="${build.dir}"/>
    </target>
    <target depends="clean" name="cleanall"/>
	
    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" destdir="classes" >
            <src path="src"/>
            <classpath refid="luciddb-postgres-adapter.classpath"/>
        </javac>
    </target>
	
	<target name="package-service-jar" depends="build-project">
		<jar destfile="${luciddb.postgres.adapter.jar}">
			<fileset dir="classes" id="id">
    			<include name="**/*"/>
				<exclude name="org/luciddb/pg2luciddb/pg_catalog_plugin.class"/>
    		</fileset>
		</jar>
	</target>
	
	<target name="package-catalog-jar" depends="build-project">
		<jar destfile="${luciddb.postgres.pg_catalog.jar}">
			<fileset dir="classes" id="id">
    			<include name="org/luciddb/pg2luciddb/pg_catalog_plugin.class"/>
    		</fileset>
			<fileset dir="install">
				<include name="deployment.txt"/>
			</fileset>
			<manifest>
			        <section name="deployment.txt"> 
			          <attribute 
			             name="SQLJDeploymentDescriptor" 
			             value="TRUE" />
			        </section>
			      </manifest>

		</jar>
	</target>
	
	<target name="package" depends="package-catalog-jar, package-service-jar" />
	
</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<!-- Farrago ant script for developer builds -->

<!-- These XML ENTITY "macros" help avoid redundancy in property -->
<!-- settings. They can be used with <jvmarg> or <arg> as the line -->
<!-- attribute. -->
<!DOCTYPE project [

<!ENTITY FarragoProps
"
-Dnet.sf.farrago.home=${farrago.dir}
-Dnet.sf.farrago.catalog=${project.catalog.dir}
-Djava.util.logging.config.file=${FarragoTrace.properties}
-Djava.security.auth.login.config=jaas.config
${farrago.test.jvmargs}
">

<!ENTITY FarragoSqlLineProps
"
&FarragoProps;
-Dsqlline.historyFile=${sqlline.hist.file}
">

]>

<project name="farrago" basedir="." default="all">

  <!-- import settings defined by initBuild.sh with highest precedence -->
  <property file="initBuild.properties"/>

  <!-- Definitions for Farrago build properties and macros -->
  <import file="buildMacros.xml"/>

  <!-- Directories -->

  <!-- directory for Farrago compiled classes which go into plugin .jars -->
  <property name="plugin.classes.dir" location="${farrago.plugin.dir}/classes"/>

  <!-- directory for JUnit run output -->
  <property name="testlog.dir" location="${farrago.dir}/testlog"/>

  <!-- directory in which javadoc should be generated -->
  <property name="javadoc.dir" location="${farrago.dir}/doc/api"/>

  <!-- directory for unit test SQL scripts -->
  <property name="unitsql.dir" location="${farrago.dir}/unitsql"/>

  <!-- directory for regression test SQL scripts -->
  <property name="regressionsql.dir" location="${farrago.dir}/regressionsql"/>

  <!-- directory for unit test LURQL scripts -->
  <property name="unitlurql.dir" location="${farrago.dir}/testcases/lurql"/>

  <!-- directory containing definition of LURQL parser -->
  <property name="lurql.parser.dir"
    location="${farrago.src.dir}/org/eigenbase/lurql/parser"/>

  <!-- directory to build distribution files -->
  <property name="farrago.dist.dir" location="${farrago.dir}/dist"/>

  <!-- The version of ANT we require. -->
  <property name="required.ant.version" value="1.7.0"/>

  <!-- ant.version not set in subant targets in 1.7.0, see issues.apache.org 42263 -->
  <!-- using ant.version causes saffron cruisecontrol to fail, thus, a workaround -->
  
  <condition property="is.correct.ant.version">
    <or>
      <antversion exactly="1.7.0"/>
      <antversion exactly="1.7.1"/>
      <antversion exactly="1.8.0"/>
      <antversion atleast="1.8.2"/>
    </or>
  </condition>

  <!-- Files -->


  <!-- Template developer configuration file. -->
  <property name="FarragoConfTemplate.xmi"
    location="${farrago.xmi.dir}/FarragoConfTemplate.xmi"/>

  <!-- Developer configuration file generated from template. -->
  <property name="FarragoConf.xmi"
    location="${farrago.xmi.dir}/FarragoConf.xmi"/>

  <!-- file prefix for Netbeans/HSQLDB catalog storage -->
  <property name="catalog.mdrStorage"
    location="${farrago.catalog.dir}/FarragoCatalog"/>

  <property name="coverage.dir" value="${farrago.dir}/coverage"/>

  <!-- NOTE:  this has to use true/false (not 1/0) for MDR import -->
  <property name="fennel.disabled" value="false"/>
  <condition property="fennel.disabled.istrue">
    <istrue value="${fennel.disabled}"/>
  </condition>

  <!-- Set to a path to enable Fennel JNI handle tracing during tests. -->
  <property name="trace.fennel.handles" value=""/>

  <!-- a fileset of all files for which tags should be built -->
  <fileset dir="${farrago.dir}" id="fileset.taggable">
    <include name="catalog/java/**/*.java"/>
    <include name="src/**/*.jj"/>
    <include name="src/**/*.java"/>
    <include name="examples/**/*.java"/>
    <include name="examples/**/package.java"/>
    <include name="src/**/package.html"/>
    <exclude name="src/**/parser/impl/*"/>
    <exclude name="examples/**/parserimpl/*"/>
  </fileset>

  <!-- a fileset of all SQL unit tests -->
  <fileset dir="${unitsql.dir}" id="fileset.unitsql">
    <include name="**/*.sql"/>
    <exclude name="runner/**/*.sql"/>

    <exclude name="med/scott.sql" unless="oracle.test"/>
  </fileset>
  <pathconvert property="fileset.unitsql" refid="fileset.unitsql"
    pathsep="${line.separator}" dirsep="${file.separator}" />
  <property name="FarragoSqlTestWrapper.java"
    location=
    "${farrago.src.dir}/net/sf/farrago/test/FarragoSqlTestWrapper.java"/>

  <!-- a fileset of all SQL regression tests -->
  <fileset dir="${regressionsql.dir}" id="fileset.regressionsql">
    <include name="**/*.sql"/>
  </fileset>
  <pathconvert property="fileset.regressionsql"
    refid="fileset.regressionsql"
    pathsep="${line.separator}" dirsep="${file.separator}" />

  <!-- a fileset of all SQL concurrency tests -->
  <fileset dir="${unitsql.dir}" id="fileset.concurrentsql">
    <include name="**/*.mtsql"/>
  </fileset>
  <pathconvert property="fileset.concurrentsql" refid="fileset.concurrentsql"
    pathsep="${line.separator}" dirsep="${file.separator}" />

  <!-- a fileset of all LURQL unit tests -->
  <fileset dir="${unitlurql.dir}" id="fileset.unitlurql">
    <include name="**/*.lurql"/>
  </fileset>
  <pathconvert property="fileset.unitlurql" refid="fileset.unitlurql"
    pathsep="${line.separator}" dirsep="${file.separator}" />

  <!-- newline for use in constructing strings -->
  <property name="nl" value="${line.separator}"/>

  <!-- files containing release properties -->
  <property name="release.properties.src"
    location="${farrago.dist.dir}/FarragoRelease.properties"/>

  <property name="release.properties"
    location="${farrago.classes.dir}/FarragoRelease.properties"/>

  <!-- Classpaths -->

  <!-- thirdparty classpath for main build (after catalog codegen) -->
  <path id="farrago.build.3p.classpath">
    <pathelement path="${farrago.3p.classpath}"/>
    <pathelement location="${sqlline.lib.dir}/sqlline.jar"/>
    <pathelement location="${sqlline.lib.dir}/jline.jar"/>
    <pathelement location="${jgrapht.dir}/jgrapht-jdk1.5.jar"/>
    <pathelement location="${diffj.dir}/share/diffj/diffj.jar" />
  </path>
  <property name="farrago.build.3p.classpath"
    refid="farrago.build.3p.classpath"/>

  <!-- classpath for main build (after catalog codegen) -->
  <path id="farrago.build.classpath">
    <pathelement path="${farrago.build.3p.classpath}"/>
    <pathelement location="${farrago.catalog.src.dir}"/>
    <pathelement location="${farrago.catalog.transient.dir}"/>
  </path>
  <property name="farrago.build.classpath" refid="farrago.build.classpath"/>

  <!-- classpath for plugin build) -->
  <path id="plugin.build.classpath">
    <pathelement path="${farrago.build.classpath}"/>
    <pathelement location="${farrago.classes.dir}"/>
  </path>
  <property name="plugin.build.classpath" refid="plugin.build.classpath"/>

  <!-- sourcepath for debugging -->
  <path id="farrago.sourcepath">
    <pathelement location="${farrago.catalog.src.dir}"/>
    <pathelement location="${farrago.catalog.transient.dir}"/>
    <pathelement location="${farrago.src.dir}"/>
    <pathelement location="${sqlline.dir}/src"/>
    <pathelement location="${junit.dir}/src.jar"/>
    <pathelement location="${open.dir}/thirdparty/netbeans/mdr/src"/>
    <pathelement
      location="${open.dir}/thirdparty/netbeans/mdr/extras/jdbcstorage/src"/>
  </path>
  <property name="farrago.sourcepath" refid="farrago.sourcepath"/>

  <!-- 
    Detect whether Oracle is available. If the Oracle driver is found under
    ORACLE_HOME, we assume that there is an Oracle database at
    'jdbc:oracle:thin:@localhost:1521:xe', and that the scott/tiger schema is
    populated; so we enable certain SQL/MED test(s). 
  -->
  <!-- no test for undefined env var, so all this complexity -->
  <property name="oracle.home" value="${env.ORACLE_HOME}"/>
  <property name="oracle.jar" value="jdbc/lib/ojdbc14.jar"/>
  <condition property="oracle.available">
    <available
      classname="oracle.jdbc.driver.OracleDriver"
      classpath="${oracle.home}/${oracle.jar}" />
  </condition>

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
    <pathelement location="${diffj.dir}/share/diffj/diffj.jar" />
    <fileset dir="">
      <include name="${oracle.home}/${oracle.jar}" if="oracle.test"/>
    </fileset>
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <path id="emma.test.classpath">
    <pathelement location="${emma.farrago.classes.dir}"/>
    <pathelement path="${emma.classpath}"/>
    <pathelement path="${test.classpath}"/>
  </path>
  <property name="emma.test.classpath" refid="emma.test.classpath"/>

  <!-- classpath for reentrantly invoking ant from createUserRepository -->
  <path id="createUserRepository.classpath">
    <pathelement path="${farrago.run.classpath}"/>
    <pathelement path="${ant.classpath}"/>
  </path>
  <property name="createUserRepository.classpath"
    refid="createUserRepository.classpath"/>

  <!-- Fennel Defaults, can override in customBuild.properties -->
  <property name="fennel.databaseInitSize" value="1000"/>
  <property name="fennel.tempInitSize" value="1000"/>
  <property name="fennel.checkpointInterval" value="300"/>
  <property name="fennel.cachePageSize" value="4096"/>
  <property name="fennel.cachePagesMax" value="1000"/>
  <property name="fennel.cachePagesInit" value="1000"/>
  <property name="fennel.groupCommitInterval" value="30"/>

  <!-- Targets -->

  <!-- default target:  assumes catalog has already been created -->
  <target name="all" depends="compile, buildJdbcPlugin"/>

  <target name="compile"
    depends="generateResources,sqlParser,ddlParser,lurqlParser">
    <farrago.javaCompileClient
      srcdir="${farrago.src.dir}"
      destdir="${farrago.classes.dir}"
      classpathref="farrago.build.classpath">
      <include name="org/eigenbase/util14/**/*.java" />
      <include name="org/eigenbase/util/property/**/*.java" />
      <include name="net/sf/farrago/fennel/tuple/**/*.java" />
      <include name="net/sf/farrago/release/**/*.java" />
      <include name="net/sf/farrago/jdbc/*.java" />
      <include name="net/sf/farrago/jdbc/client/**/*.java" />
      <include name="net/sf/farrago/jdbc/param/**/*.java" />
    </farrago.javaCompileClient>
    <!-- have to fork and bump up the heap because Farrago's getting fat! -->
    <farrago.javaCompile
      fork="true"
      memoryMaximumSize="512m"
      deprecation="off"
      srcdir="${farrago.src.dir}"
      destdir="${farrago.classes.dir}"
      classpathref="farrago.build.classpath">
      <include name="**/*.java" />
      <exclude name="**/namespace/jdbc/**/*.java" />
      <exclude name="org/eigenbase/inventory/**/*.java" />
      <exclude name="**/Jdk15Test.java" if="farrago.javasrc.14" />
    </farrago.javaCompile>
  </target>

  <!-- compile only packages needed by Saffron -->
  <target name="compile.saffron.deps" 
    depends="mungeJdbc, generateResources,sqlParser,lurqlParser">
    <farrago.javaCompileClient
      srcdir="${farrago.src.dir}"
      destdir="${farrago.classes.dir}"
      classpathref="farrago.build.classpath">
      <include name="org/eigenbase/util14/**/*.java" />
      <include name="org/eigenbase/util/property/**/*.java" />
    </farrago.javaCompileClient>
    <farrago.javaCompile
      deprecation="off"
      srcdir="${farrago.src.dir}"
      destdir="${farrago.classes.dir}"
      classpathref="farrago.build.classpath">
      <include name="org/eigenbase/**/*.java" />
      <include name="com/disruptivetech/farrago/volcano/**/*.java" />
      <exclude name="org/eigenbase/inventory/**/*.java" />
    </farrago.javaCompile>
  </target>

  <!-- create classes directory -->
  <target name="makeClassesDir">
    <mkdir dir="${farrago.classes.dir}"/>
    <mkdir dir="${plugin.classes.dir}"/>
  </target>

  <!-- test only packages needed by Saffron -->
  <target name="test.saffron.deps" depends="compile.saffron.deps">
    <mkdir dir="${testlog.dir}"/>
    <junit printsummary="yes" fork="yes" failureproperty="junit.failure"
      tempdir="${testlog.dir}">
      <classpath refid="farrago.run.classpath"/>
      <jvmarg line="${assertions.jvmarg}"/>
      <jvmarg line="&FarragoProps;"/>
      <formatter type="plain"/>
      <batchtest todir="${testlog.dir}" unless="junit.class">
        <fileset dir="${farrago.classes.dir}">
          <include name="org/eigenbase/**/*Test.class"/>
          <include name="com/disruptivetech/farrago/volcano/**/*Test.class"/>
        </fileset>
      </batchtest>
      <test todir="${testlog.dir}" if="junit.class"
        name="${junit.class}" />
    </junit>
    <delete file="${FarragoTrace.log}.lck"/>
    <fail message="Test failure(s)" if="junit.failure"/>
  </target>

  <!-- create the FarragoMedJdbc plugin jar -->
  <target name="buildJdbcPlugin"
    depends="checkJdbcPluginUptodate" unless="plugin.jdbc.uptodate">
    <farrago.javaCompile
      srcdir="${farrago.src.dir}"
      destdir="${plugin.classes.dir}"
      classpathref="plugin.build.classpath">
      <include name="**/namespace/jdbc/**/*.java" />
    </farrago.javaCompile>
    <antcall target="buildJdbcPluginJar"/>
  </target>

  <target name="buildJdbcPluginJar">
    <jar jarfile="${farrago.plugin.dir}/FarragoMedJdbc.jar">
      <fileset dir="${plugin.classes.dir}">
        <include name="**/namespace/jdbc/**/*.class" />
      </fileset>
      <manifest>
        <attribute
          name="DataWrapperClassName"
          value="net.sf.farrago.namespace.jdbc.MedJdbcForeignDataWrapper" />
      </manifest>
    </jar>
  </target>

  <target name="checkJdbcPluginUptodate">
    <uptodate property="plugin.jdbc.uptodate"
      targetfile="${farrago.plugin.dir}/FarragoMedJdbc.jar">
      <srcfiles dir="${farrago.src.dir}"
        includes="**/namespace/jdbc/**/*.java"/>
    </uptodate>
  </target>

  <!-- cleans for non-catalog-generated code -->
  <target name="clean" depends="cleanTestLogs">
    <delete includeEmptyDirs="true" quiet="true">
      <fileset dir="${farrago.classes.dir}"
        includes="**/*.class,**/*.properties,**/*.xml"/>
      <fileset dir="${plugin.classes.dir}" includes="**/*.class"/>
      <fileset dir="${farrago.plugin.dir}" includes="**/*.jar"/>
      <fileset dir="${farrago.classes.dir}"
        includes="net/sf/farrago/dynamic/**"/>
      <fileset dir="${farrago.dir}" includes="junit*.properties"/>
      <fileset dir="${farrago.dir}" includes="hs_err_pid*.log"/>
      <fileset dir="${farrago.src.dir}/net/sf/farrago/resource">
        <include name="*.java"/>
      </fileset>
      <fileset dir="${farrago.src.dir}/org/eigenbase/resource">
        <include name="*.java"/>
      </fileset>
      <fileset dir="${farrago.parser.ddl.dir}/impl" includes="*.java,*.jj"/>
      <fileset dir="${farrago.parser.sql.dir}/impl" includes="*.java,*.jj"/>
      <fileset 
        dir="${farrago.src.dir}/examples/rng/src/net/sf/farrago/rng/parserimpl" 
        includes="*.java,*.jj"/>
      <fileset 
        dir="${farrago.src.dir}/examples/rng/src/net/sf/farrago/rng/resource" 
        includes="*.java"/>
      <fileset dir="${lurql.parser.dir}" includes="*.java"/>
    </delete>
  </target>

  <target name="cleanTestLogs">
    <delete includeEmptyDirs="true" quiet="true">
      <fileset dir="${testlog.dir}" includes="*.xml"/>
      <fileset dir="${testlog.dir}" includes="*.txt"/>
      <fileset dir="${testlog.dir}" includes="*.log"/>
      <fileset dir="${testlog.dir}" includes="*.bcp"/>
      <fileset dir="${testlog.dir}" includes="*.dif"/>
      <fileset dir="${testlog.dir}" includes="*.err"/>
      <fileset dir="${testlog.dir}" includes="*.history"/>
      <fileset dir="${unitsql.dir}" includes="**/*.log"/>
      <fileset dir="${unitsql.dir}/syslib/depts_files">
        <include name="*"/>
      </fileset>
      <fileset dir="${unitsql.dir}/syslib/dates_files">
        <include name="*"/>
      </fileset>
      <fileset dir="${unitsql.dir}/syslib/sales_files">
        <include name="*"/>
      </fileset>
      <fileset dir="${unitlurql.dir}" includes="**/*.log"/>
      <fileset dir="${regressionsql.dir}" includes="**/*.log"/>
      <fileset dir="${unitsql.dir}/med/flatfiles">
        <include name="example2.bcp"/>
        <include name="example.ctl"/>
        <include name="noheader.bcp"/>
        <include name="nulldata.bcp"/>
        <include name="withnulls.bcp"/>
        <include name="headerswithwhitespacenobcp.bcp"/>
        <include name="buggy.bcp"/>
      </fileset>
    </delete>
    <delete quiet="true" file="${FarragoTrace.log}"/>
  </target>

  <!-- Creates an unconfigured catalog.  This is useful for extension
       projects that make configuration changes and want to store their
       catalog in an out-of-process database (e.g., postgres). -->
  <target name="createUnconfiguredCatalog"
          depends="makeClassesDir,configureReposStorage">
    <antcall target="createClasspathFile"/>
    <antcall target="compileCatalog"/>
    <antcall target="createMdrTestData"/>
  </target>

  <!-- creates catalog and populates with initial metadata -->
  <target name="createCatalog" depends="makeClassesDir,configureReposStorage">
    <antcall target="createClasspathFile"/>
    <antcall target="compileCatalog"/>
    <antcall target="createMdrTestData"/>
    <antcall target="saveUnconfiguredCatalog"/>
    <antcall target="importConfig"/>
    <antcall target="backupCatalog"/>
    <antcall target="populateTestData"/>
    <!-- NOTE:  redundant backup is an intentional checkpoint; in case
    populateTestData fails, it can be debugged from restored empty catalog -->
    <antcall target="backupCatalog"/>
    <antcall target="createJaasConfig"/>
  </target>

  <!-- see http://pub.eigenbase.org/wiki/Jdbc4Transition -->
  <target name="mungeJdbc">
    <ac:if xmlns:ac="antlib:net.sf.antcontrib">
      <equals arg1="${ant.java.version}" arg2="1.5"/>
      <then>
        <copy todir="${farrago.jdbc4.gen.dir}">
          <fileset dir="${farrago.dir}/jdbc4" includes="*.java"
            excludes="Unwrappable*.java"/>
        </copy>
        <copy file="${farrago.dir}/jdbc4/Unwrappable14.java"
          tofile="${farrago.jdbc4.gen.dir}/Unwrappable.java"/>
      </then>
      <else>
        <copy file="${farrago.dir}/jdbc4/Unwrappable16.java"
          tofile="${farrago.jdbc4.gen.dir}/Unwrappable.java"/>
      </else>
    </ac:if>
  </target>

  <target name="createCatalogIfNotUptodate" depends="checkCatalogUptodate"
      unless="catalog.uptodate">
    <antcall target="createCatalog"/>
  </target>

  <!-- creates ReposStorage.properties from a default template unless
       it already exists -->
  <target name="configureReposStorage" unless="ReposStorage.configured">
    <!-- Does nothing if the file already exists.  See switchTo* targets. -->
    <copy file="${farrago.catalog.dir}/templates/HsqldbHibernateRepos.properties"
      tofile="${farrago.ReposStorage.propfile}">
      <filterchain>
        <tokenfilter>
          <replacestring from="{SCHEMA}" to="${farrago.catalog.schema}"/>
        </tokenfilter>
      </filterchain>
    </copy>
  </target>

  <!-- creates ReposStorage.properties from the default Postgres+Netbeans
       template -->
  <target name="switchToPsqlReposStorage">
    <copy file="${farrago.catalog.dir}/templates/PostgresRepos.properties"
      tofile="${farrago.ReposStorage.propfile}" overwrite="true">
      <filterchain>
        <tokenfilter>
          <replacestring
            from="jdbc:postgresql://localhost/test"
            to="jdbc:postgresql://localhost/${farrago.catalog.schema}"/>
        </tokenfilter>
      </filterchain>
    </copy>
  </target>

  <!-- creates ReposStorage.properties from the default Mysql+Hibernate
       template -->
  <target name="switchToMysqlHibernateReposStorage">
    <copy file="${farrago.catalog.dir}/templates/MysqlHibernateRepos.properties"
      tofile="${farrago.ReposStorage.propfile}" overwrite="true">
      <filterchain>
        <tokenfilter>
          <replacestring from="{SCHEMA}" to="${farrago.catalog.schema}"/>
        </tokenfilter>
      </filterchain>
    </copy>
  </target>

  <!-- creates ReposStorage.properties from the default HSQLDB+Hibernate
       template -->
  <target name="switchToHsqldbHibernateReposStorage">
    <copy file="${farrago.catalog.dir}/templates/HsqldbHibernateRepos.properties"
      tofile="${farrago.ReposStorage.propfile}" overwrite="true">
      <filterchain>
        <tokenfilter>
          <replacestring from="{SCHEMA}" to="${farrago.catalog.schema}"/>
        </tokenfilter>
      </filterchain>
    </copy>
  </target>

  <!-- creates ReposStorage.properties from the default
       template (which happens to be Hibernate+HSQLDB) -->
  <target name="switchToDefaultReposStorage">
    <antcall target="switchToHsqldbHibernateReposStorage"/>
  </target>

  <!-- creates ReposStorage.properties from the default HSQLDB+Netbeans
       template -->
  <target name="switchToHsqldbReposStorage">
    <copy file="${farrago.catalog.dir}/templates/HsqldbRepos.properties"
      tofile="${farrago.ReposStorage.propfile}" overwrite="true"/>
  </target>

  <!-- configures the Hibernate second level cache, if necessary -->
  <target name="configureCatalogCache">
    <farrago.setReposProvider/>

    <ac:if xmlns:ac="antlib:net.sf.antcontrib">
      <equals arg1="${farrago.enki.provider}" arg2="ENKI_HIBERNATE"/>
      <then>
        <copy 
            file="${farrago.catalog.dir}/templates/EnkiEhCache.xml"
            tofile="${farrago.classes.dir}/FarragoEhCache.xml"/>
      </then>
    </ac:if>
  </target>

  <target name="compileCatalog"
    depends="cleanCatalog,mungeJdbc,generateSqlTestWrapper,createRepository"/>

  <!-- creates the plugin/jaas.config file from template -->
  <target name="createJaasConfig">
    <copy file="${farrago.plugin.dir}/templates/jaas.config.tmpl"
      tofile="${farrago.plugin.dir}/jaas.config">
      <filterset>
        <filter token="FARRAGO_LOGIN_MODULE" value="net.sf.farrago.test.FarragoMockLoginModule"/>
      </filterset>
    </copy>
  </target>

  <!-- initialize catalog repository -->
  <target name="createRepository"
    depends="configureTrace, convertExtMetamodel, configureCatalogCache">
    <mkdir dir="${farrago.catalog.dir}"/>
    <mkdir dir="${farrago.catalog.src.dir}"/>
    <mkdir dir="${farrago.catalog.transient.dir}"/>
    <farrago.synthesizeMetamodel
      extMofBasename="ExtModel"
      extPresent=""
      xmiDir="${farrago.xmi.dir}"/>
    <farrago.mdrFork target="forked_generateMetamodelCode"/>
    <farrago.mdrFork target="forked_generateTransientRepository"/>
    <farrago.javaCompile
      fork="true"
      memoryMaximumSize="512m"
      srcdir="${farrago.catalog.src.dir}"
      destdir="${farrago.catalog.src.dir}"
      classpathref="farrago.3p.classpath">
      <include name="**/*.java"/>
    </farrago.javaCompile>
    <farrago.javaCompile
      fork="true"
      memoryMaximumSize="512m"
      srcdir="${farrago.catalog.transient.dir}"
      destdir="${farrago.catalog.transient.dir}"
      classpathref="farrago.model.classpath">
      <include name="**/*.java"/>
    </farrago.javaCompile>

    <ac:if xmlns:ac="antlib:net.sf.antcontrib">
      <equals arg1="${farrago.enki.provider}" arg2="ENKI_HIBERNATE"/>
      <then>
        <farrago.mdrFork target="forked_configureMetamodelSchema"/>
      </then>
    </ac:if>

    <farrago.mdrFork target="forked_importMetamodel"/>
    <farrago.mdrFork target="forked_createCatalogRepository"/>
    <antcall target="compile.saffron.deps"/>
    <antcall target="generateMetadataFactory"/>
    <antcall target="all"/>
  </target>

  <target name="forked_generateMetamodelCode" depends="farrago.mdr_taskdef">
    <farrago.setReposProvider/>

    <mdr logConfigFile="${FarragoMdrBuildTrace.properties}">
      <mapJava
        file="${FarragoMetamodel.xmi}"
        extent="FarragoMetamodel"
        dir="${farrago.catalog.src.dir}"
        generatorClass="${farrago.enki.generator}"/>
    </mdr>

    <delete quiet="true">
      <fileset dir="." includes="mdr.bt?"/>
    </delete>
  </target>

  <target name="forked_generateTransientRepository" 
          depends="farrago.mdr_taskdef">
    <farrago.setReposProvider/>
    <mdr logConfigFile="${FarragoMdrBuildTrace.properties}">
      <mapJava
        file="${FarragoMetamodel.xmi}"
        extent="FarragoMetamodel"
        dir="${farrago.catalog.transient.dir}"
        generatorClass="org.eigenbase.enki.trans.codegen.TransientGenerator"
        generatorOptions="jmiInterfaces=false" />
    </mdr>

    <delete quiet="true">
      <fileset dir="." includes="mdr.bt?"/>
    </delete>
  </target>

  <target name="forked_configureMetamodelSchema" depends="farrago.mdr_taskdef">
    <farrago.setReposProvider/>

    <mkdir dir="${farrago.catalog.sql.dir}"/>

    <mdr
        propertiesFile="${farrago.ReposStorage.propfile}"
        logConfigFile="${FarragoMdrBuildTrace.properties}">
      <propertyset>
        <propertyref name="FARRAGO_CATALOG_DIR"/>
      </propertyset>
      <exportSchema
        mode="model"
        dir="${farrago.catalog.src.dir}"
        extent="FarragoMetamodel"/>
      <applyTablePrefix output="${farrago.catalog.sql.dir}">
        <fileset dir="${farrago.catalog.src.dir}">
          <include name="**/*.sql"/>
        </fileset>
      </applyTablePrefix>
    </mdr>
    <property 
        file="${farrago.ReposStorage.propfile}"
        prefix="gensch"/>
    <echo>
      Configuring repository schema at:
      ${gensch.net.sf.farrago.dev.connection.schema.url}
    </echo>
    <sql
        driver="${gensch.net.sf.farrago.dev.connection.driver_class}"
        url="${gensch.net.sf.farrago.dev.connection.schema.url}"
        userid="${gensch.net.sf.farrago.dev.connection.username}"
        password="${gensch.net.sf.farrago.dev.connection.password}"
        classpathref="farrago.3p.classpath">
      <!-- Ant will alphabetize if these are in the same fileset. 
           Keep provider.sql first, since it logically belongs first. -->
      <fileset dir="${farrago.catalog.sql.dir}">
        <include name="**/provider.sql"/>
      </fileset>
      <fileset dir="${farrago.catalog.sql.dir}">
        <include name="**/create.sql"/>
      </fileset>
    </sql>
  </target>

  <target name="importMetamodel">
    <farrago.mdrFork target="forked_importMetamodel"/>
  </target>

  <target name="forked_importMetamodel" depends="farrago.mdr_taskdef">
    <farrago.setReposProvider/>

    <mdr
        propertiesFile="${farrago.ReposStorage.propfile}"
        logConfigFile="${FarragoMdrBuildTrace.properties}">
      <propertyset>
        <propertyref name="FARRAGO_CATALOG_DIR"/>
      </propertyset>
      <createExtent name="FarragoMetamodel"/>
      <importXmi
        file="${FarragoMetamodel.xmi}"
        extent="FarragoMetamodel"/>
    </mdr>
  </target>

  <target name="forked_createCatalogRepository" depends="farrago.mdr_taskdef">
    <mdr 
        propertiesFile="${farrago.ReposStorage.propfile}"
        logConfigFile="${FarragoMdrBuildTrace.properties}">
      <propertyset>
        <propertyref name="FARRAGO_CATALOG_DIR"/>
      </propertyset>
      <createExtent
        name="FarragoCatalog"
        extent="FarragoMetamodel"
        package="Farrago"/>
      <writeDTD
        file="${farrago.xmi.dir}/FarragoCatalog.dtd"
        extent="FarragoCatalog"/>
    </mdr>
  </target>

  <!-- generate developer configuration file and import it -->
  <target name="importConfig">
    <copy file="${FarragoConfTemplate.xmi}"
      tofile="${FarragoConf.xmi}" overwrite="true"/>

    <antcall target="copyFennelResources"/>

    <replace file="${FarragoConf.xmi}">
      <replacefilter token="@databaseInitSize@" value="${fennel.databaseInitSize}"/>
      <replacefilter token="@tempInitSize@" value="${fennel.tempInitSize}"/>
      <replacefilter token="@checkpointInterval@" value="${fennel.checkpointInterval}"/>
      <replacefilter token="@cachePageSize@" value="${fennel.cachePageSize}"/>
      <replacefilter token="@cachePagesMax@" value="${fennel.cachePagesMax}"/>
      <replacefilter token="@cachePagesInit@" value="${fennel.cachePagesInit}"/>
      <replacefilter token="@groupCommitInterval@" value="${fennel.groupCommitInterval}"/>
      <replacefilter token="@fennel.disabled@" value="${fennel.disabled}"/>
      <replacefilter token="@resourceDir@" value="$${FARRAGO_HOME}/catalog/fennel"/>
      <replacefilter token="@jniHandleTraceFile@" value="${trace.fennel.handles}"/>
      <replacefilter token="@calcVirtualMachine@" value="CALCVM_AUTO"/>
    </replace>
    <farrago.mdrFork target="forked_importConfig"/>
  </target>

  <!-- set up the default trace configuration file -->
  <target name="configureTrace">
    <mkdir dir="${farrago.trace.dir}"/>
    <farrago.configureTrace
      propFile="${FarragoTrace.properties}" logFile="${FarragoTrace.log}"/>
    <farrago.configureTrace
      propFile="${FarragoMdrBuildTrace.properties}" logFile="${FarragoMdrBuildTrace.log}"/>
  </target>

  <target name="forked_importConfig" depends="farrago.mdr_taskdef">
    <mdr
        propertiesFile="${farrago.ReposStorage.propfile}"
        logConfigFile="${FarragoMdrBuildTrace.properties}">
      <propertyset>
        <propertyref name="FARRAGO_CATALOG_DIR"/>
      </propertyset>
      <importXmi
        file="${FarragoConf.xmi}"
        extent="FarragoCatalog"/>
    </mdr>
  </target>

  <!-- write initial metadata to catalog -->
  <target name="populateCatalog">
    <farrago.javaExec classpathref="farrago.run.classpath"
      classname="net.sf.farrago.db.FarragoDatabase"/>
  </target>

  <!-- write sample schema to catalog -->
  <target name="populateTestData" depends="populateCatalog,populateTestSchema"/>

  <!-- determine list of all SQL scripts to run during catalog init -->
  <target name="determineInitSql" >
    <farrago.setReposProvider/>

    <ac:if xmlns:ac="antlib:net.sf.antcontrib">
      <equals arg1="${farrago.enki.provider}" arg2="ENKI_HIBERNATE"/>
      <then>
        <copy todir="${farrago.initsql.dir}" overwrite="true">
          <fileset dir="${farrago.initsql.dir}/templates">
            <include name="*.hibernate.tmpl"/>
          </fileset>
          <mapper type="glob" from="*.hibernate.tmpl" to="*"/>
        </copy>
      </then>
      <else>
        <copy todir="${farrago.initsql.dir}" overwrite="true">
          <fileset dir="${farrago.initsql.dir}/templates">
            <include name="*.default.tmpl"/>
          </fileset>
          <mapper type="glob" from="*.default.tmpl" to="*"/>
        </copy>
      </else>
    </ac:if>
          

    <filelist dir="${farrago.initsql.dir}" id="filelist.initsql"
      files="createStorageWrappers.sql,createReposStorageServers.sql,createSqljSchema.sql,createJdbcViews.sql,createSalesSchema.sql,createMgmtViews.sql"/>
    <pathconvert property="filelist.initsql" refid="filelist.initsql"
      pathsep="${line.separator}" dirsep="${file.separator}" />
  </target>

  <target name="populateTestSchema" depends="determineInitSql">
    <junit printsummary="yes" fork="yes" haltonerror="yes" haltonfailure="yes"
      tempdir="${testlog.dir}" includeantruntime="no">
      <classpath>
         <pathelement path="${farrago.sqlline.classpath}" />
         <pathelement path="${ant.classpath}" />
      </classpath>
      <jvmarg line="${assertions.jvmarg}"/>
      <jvmarg line="&FarragoSqlLineProps;"/>
      <sysproperty key="net.sf.farrago.fileset.unitsql"
        value="${filelist.initsql}"/>
      <formatter type="plain"/>
      <formatter type="xml"/> <!-- for integration builds -->
      <test todir="${testlog.dir}" name="net.sf.farrago.test.FarragoSqlTest" />
    </junit>
  </target>

  <!-- save the unconfigured catalog contents -->
  <target name="saveUnconfiguredCatalog">
    <farrago.backupCatalog
      backupDir="${farrago.catalog.unconfigured.dir}"
      catalogOnly="true"/>

    <antcall target="exportCatalog"/>
    <copy
      todir="${farrago.catalog.unconfigured.dir}" 
      file="${farrago.xmi.dir}/FarragoCatalogExport.xmi"/>
  </target>

  <!-- back up the current catalog contents -->
  <target name="backupCatalog">
    <farrago.backupCatalog/>
  </target>

  <!-- restore catalog from backup -->
  <target name="restoreCatalog" depends="cleanCatalogData">
    <farrago.restoreCatalog/>
  </target>

  <!-- delete the catalog and everything generated for it -->
  <target name="cleanCatalog" depends="clean,cleanCatalogData">
    <delete file="${FarragoExtMetamodel.xmi}"/>
    <delete file="${FarragoExtMetamodelSansDiagrams.xmi}"/>
    <delete file="${FarragoExtMetamodelTransformed.xmi}"/>
    <delete file="${FarragoMetamodel.xmi}"/>
    <delete file="${FarragoMetamodelUnresolved.xmi}"/>
    <delete file="${farrago.xmi.dir}/FarragoCatalog.dtd"/>
    <delete
      file="${farrago.src.dir}/net/sf/farrago/FarragoMetadataFactory.java"/>
    <delete
      file="${farrago.src.dir}/net/sf/farrago/FarragoMetadataFactoryImpl.java"/>
    <delete dir="${farrago.catalog.src.dir}"/>
    <delete dir="${farrago.catalog.transient.dir}"/>
    <delete file="${FarragoSqlTestWrapper.java}"/>
    <delete dir="${farrago.catalog.dir}/fennel"/>
    <delete file="${FarragoMdrBuildTrace.log}"/>
    <delete quiet="true">
      <fileset dir="${farrago.jdbc4.gen.dir}" includes="*.java"/>
    </delete>
  </target>

  <!-- delete catalog data only -->
  <target name="cleanCatalogData">
    <farrago.cleanCatalog dropStorage="true"/>
  </target>

  <target name="exportCatalog">
    <farrago.mdrFork target="forked_exportCatalog"/>
  </target>

  <target name="forked_exportCatalog" depends="farrago.mdr_taskdef">
    <mdr
        propertiesFile="${farrago.ReposStorage.propfile}"
        logConfigFile="${FarragoMdrBuildTrace.properties}">
      <propertyset>
        <propertyref name="FARRAGO_CATALOG_DIR"/>
      </propertyset>
      <exportXmi
        file="${farrago.xmi.dir}/FarragoCatalogExport.xmi"
        extent="FarragoCatalog"
        xmiVersion = "1.2"/>
    </mdr>
  </target>

  <target name="exportMetamodel">
    <farrago.mdrFork target="forked_exportMetamodel"/>
  </target>

  <target name="forked_exportMetamodel" depends="farrago.mdr_taskdef">
    <mdr
        propertiesFile="${farrago.ReposStorage.propfile}"
        logConfigFile="${FarragoMdrBuildTrace.properties}">
      <propertyset>
        <propertyref name="FARRAGO_CATALOG_DIR"/>
      </propertyset>
      <exportXmi
        file="${farrago.xmi.dir}/FarragoMetamodelExport.xmi"
        extent="FarragoMetamodel"
        xmiVersion = "1.2"/>
    </mdr>
  </target>

  <target name="convertExtMetamodel">
    <farrago.extractArgoModel
      umlFile="${FarragoExtMetamodel.uml}"
      umlBasename="FarragoExtMetamodel"
      mofBasename="FarragoExtMetamodel"
      xmiDir="${farrago.xmi.dir}"/>
    <xslt style="${farrago.xmi.dir}/transformFEM.xsl"
      in="${FarragoExtMetamodel.xmi}"
      out="${FarragoExtMetamodelTransformed.xmi}" />
    <replace file="${FarragoExtMetamodelTransformed.xmi}"
      token="org.omg.xmi.namespace.Model" value="omg.org/mof.Model/1.3" />
  </target>

  <target name="checkResourceUptodate">
    <!--
         Set jdbc.url.port.default in customBuild.properties to
         override JDBC listener port.
    -->
    <farrago.configureReleaseProperties
        file="${farrago.classes.dir}/FarragoRelease.properties"/>

    <!-- REVIEW: SWZ: 10/4/2005: We should also check the locale-specific
         properties files generated by resgen to see that they're up-to-date.
         However, there doesn't seem to be an Ant mapper that maps
         FooResource.xml to FooResource*.properties and I don't want to
         enumerate the locales here.  Checking just FooResource.properties
         should do for now. -->
    <condition property="resource.uptodate">
      <and>
        <uptodate
          srcfile="${farrago.resource.dir}/FarragoResource.xml"
          targetfile="${farrago.resource.dir}/FarragoResource.java"/>
        <uptodate
          srcfile="${farrago.resource.dir}/FarragoResource.xml"
          targetfile="${farrago.resource.properties.dir}/FarragoResource.properties"/>
        <uptodate
          srcfile="${farrago.resource.dir}/FarragoInternalQuery.xml"
          targetfile="${farrago.resource.dir}/FarragoInternalQuery.java"/>
        <uptodate
          srcfile="${farrago.resource.dir}/FarragoInternalQuery.xml"
          targetfile="${farrago.resource.properties.dir}/FarragoInternalQuery.properties"/>
        <uptodate
          srcfile="${eigenbase.resource.dir}/EigenbaseResource.xml"
          targetfile="${eigenbase.resource.dir}/EigenbaseResource.java"/>
        <uptodate
          srcfile="${eigenbase.resource.dir}/EigenbaseResource.xml"
          targetfile="${eigenbase.resource.properties.dir}/EigenbaseResource.properties"/>
      </and>
    </condition>
  </target>

  <target name="generateResources"
    depends="makeClassesDir,checkResourceUptodate,copyFennelResources"
    unless="resource.uptodate">
    <!-- Exception classes need to exist for reflection -->
    <farrago.javaCompile
      srcdir="${farrago.src.dir}"
      destdir="${farrago.classes.dir}"
      classpathref="farrago.3p.classpath">
      <include name="**/EigenbaseException.java" />
      <include name="**/EigenbaseContextException.java" />
      <include name="**/EigenbaseFeatureException.java" />
      <include name="**/SqlValidatorException.java" />
    </farrago.javaCompile>
    <taskdef name="resgen" classname="org.eigenbase.resgen.ResourceGenTask">
      <classpath refid="farrago.run.classpath"/>
    </taskdef>
    <resgen
      srcdir="${farrago.src.dir}"
      destdir="${farrago.src.dir}"
      resdir="${farrago.classes.dir}"
      style="functor"
      locales="en_US">
      <include name="net/sf/farrago/resource/FarragoResource.xml"/>
    </resgen>
    <resgen
      srcdir="${farrago.src.dir}"
      destdir="${farrago.src.dir}"
      resdir="${farrago.classes.dir}"
      style="functor"
      locales="en_US">
      <include name="net/sf/farrago/resource/FarragoInternalQuery.xml"/>
    </resgen>
    <resgen
      srcdir="${farrago.src.dir}"
      destdir="${farrago.src.dir}"
      resdir="${farrago.classes.dir}"
      style="functor"
      locales="en_US">
      <include name="org/eigenbase/resource/EigenbaseResource.xml"/>
    </resgen>
  </target>

  <target name="checkFennelResourceUptodate">
    <condition property="resource.fennel.uptodate">
      <uptodate>
        <srcfiles
          dir="${fennel.dir}/common"
          includes="*.properties"/>
        <regexpmapper
          from="(.*)\.properties"
          to="${farrago.catalog.dir}/fennel/\1.properties"/>
      </uptodate>
    </condition>
  </target>

  <target
    name="copyFennelResources"
    depends="checkFennelResourceUptodate"
    unless="resource.fennel.uptodate">

    <mkdir dir="${farrago.catalog.dir}/fennel"/>
    <copy todir="${farrago.catalog.dir}/fennel" preservelastmodified="true">
      <fileset dir="${fennel.dir}/common" includes="*.properties"/>
    </copy>
  </target>

  <target name="checkParserUptodate">
    <uptodate property="sqlParser.uptodate"
      targetfile="${farrago.parser.sql.dir}/impl/SqlParserImpl.java">
      <srcfiles dir="${farrago.parser.sql.dir}">
        <include name="Parser.jj"/>
        <include name="CommonParser.jj"/>
      </srcfiles>
    </uptodate>
    <uptodate property="parser.uptodate"
      targetfile="${farrago.parser.ddl.dir}/impl/FarragoParserImpl.java">
      <srcfiles refid="farrago.parser.ddl"/>
      <srcfiles refid="farrago.parser.common.ddl"/>
      <srcfiles refid="farrago.parser.common.sql"/>
    </uptodate>
    <uptodate property="lurqlParser.uptodate"
      targetfile="${lurql.parser.dir}/LurqlParser.java">
      <srcfiles dir="${lurql.parser.dir}">
        <include name="LurqlParser.jj"/>
      </srcfiles>
    </uptodate>
  </target>

  <target name="checkCatalogUptodate">
    <uptodate property="catalog.uptodate"
      targetfile="${farrago.dir}/catalog/java/net/sf/farrago/FarragoPackage.java">
      <srcfiles dir="${farrago.dir}/catalog/xmi">
        <include name="FarragoExtMetamodel.uml"/>
        <include name="*.xsl"/>
      </srcfiles>
    </uptodate>
  </target>

  <!-- Generate the DDL parser. Generated files are:
       TokenMgrError.java, ParseException.java,
       JavaCharStream.java, Token.java -->
  <target name="ddlParser" depends="checkParserUptodate"
    unless="parser.uptodate">
    <farrago.generateParser
      combined="${farrago.parser.ddl.dir}/impl/CombinedParser.jj">
      <components>
        <fileset refid="farrago.parser.ddl"/>
        <fileset refid="farrago.parser.common.ddl"/>
        <fileset refid="farrago.parser.common.sql"/>
      </components>
    </farrago.generateParser>
  </target>

  <target name="lurqlParser" depends="checkParserUptodate"
    unless="lurqlParser.uptodate">
    <javacc
      target="${lurql.parser.dir}/LurqlParser.jj"
      javacchome="${javacc.dir}"/>
  </target>

  <!-- Generate the SQL parser. Generated files are:
       TokenMgrError.java, ParseException.java,
       JavaCharStream.java, Token.java, ASCII_UCodeESC_CharStream.java -->
  <target name="sqlParser" depends="checkParserUptodate"
    unless="sqlParser.uptodate">
    <farrago.generateParser
      combined="${farrago.parser.sql.dir}/impl/CombinedParser.jj">
      <components>
        <filelist dir="${farrago.parser.sql.dir}" files="Parser.jj"/>
        <fileset refid="farrago.parser.common.sql"/>
      </components>
    </farrago.generateParser>
  </target>

  <target name="jjDoc" description="Converts parser to human-readable BNF form">
    <jjdoc
      target="${farrago.parser.sql.dir}/impl/CombinedParser.jj"
      outputfile="doc/combinedParserBnf.html"
      javacchome="${javacc.dir}"/>
    <jjdoc
      target="${farrago.parser.ddl.dir}/impl/CombinedParser.jj"
      outputfile="doc/combinedDdlParserBnf.html"
      javacchome="${javacc.dir}"/>
  </target>

  <!-- run all JUnit test cases (or a single test case chosen with -->
  <!-- property junit.class, normally from script junitSingle) -->
  <!-- MaxPermSize setting is required to prevent PermGen space OOM's -->
  <target name="junit" depends="cleanTestLogs">
    <farrago.antFork target="forked_junit" classpathref="test.classpath">
      <jvmargs>
        <jvmarg line="-Xmx768m"/>
        <jvmarg line="-Xss1536k"/>
        <jvmarg line="-XX:MaxPermSize=256m"/>
        <jvmarg line="${assertions.jvmarg}"/>
        <jvmarg line="&FarragoSqlLineProps;"/>
        <syspropertyset>
          <propertyref builtin="commandline"/>
        </syspropertyset>
      </jvmargs>
    </farrago.antFork>
    <delete file="${FarragoTrace.log}.lck"/>
  </target>

  <target name="forked_junit">
    <farrago.runTests>
      <testfileset>
        <fileset dir="${farrago.classes.dir}">
          <exclude name="**/test/regression/*Test.class"/>
          <exclude name="**/test/concurrent/*Test.class"/>
          <include name="**/*Test.class"/>

          <!-- this test is now an abstract base class -->
          <exclude name="net/sf/farrago/test/FarragoServerTest.class"/>
        </fileset>
      </testfileset>
      <junitargs>
        <sysproperty key="net.sf.farrago.fileset.unitsql"
          value="${fileset.unitsql}"/>
        <sysproperty key="org.eigenbase.fileset.unitlurql"
          value="${fileset.unitlurql}"/>
      </junitargs>
    </farrago.runTests>
  </target>

  <!-- ************** test ******************
  Split 'test' to 'test-only' and 'test-only-setup' so Emma can plugin a instr.
  -->

  <target name="test" depends="test-only-setup,test-only">
  </target>

  <target name="test-only-setup">
    <antcall target="checkTrace"/>
    <antcall target="checkOracle"/>
    <antcall target="cleanExamples"/>
    <antcall target="createCatalog"/>
    <antcall target="buildExamples"/>
    <antcall target="buildJdbcPlugin"/>
    <antcall target="gen-test-resources"/>
  </target>

  <target name="test-only">
    <antcall target="testRngPlugin"/>
    <antcall target="exportCatalog"/>
    <antcall target="testDmv"/>
    <antcall target="testMiniplanner"/>
    <antcall target="testMqlPlugin"/>
    <antcall target="junit"/>
    <antcall target="regressionWithoutBuild"/>
    <antcall target="testCleanup"/>
    <antcall target="compareCatalogExport"/>
    <antcall target="macker"/>
    <antcall target="checkSourceFilePreambles"/>
  </target>

  <target name="gen-test-resources"> 
    <property name="target.name" value="gen-test-resources"/>
    <property name="open.dir" location="${farrago.dir}/.."/>
  	<fail unless="open.dir" />
    <foreach param="target.file" target="call-subdir-target" inheritAll="true">
      <path>
        <fileset dir="${unitsql.dir}">
          <include name="**/build.xml"/>
        </fileset>
      </path>
    </foreach>
  </target>
	
  <target name="call-subdir-target">
    <echo>
      This is the target.file: ${target.file}
    </echo>
    <dirname property="target.dir" file="${target.file}" />
    <ant dir="${target.dir}" antfile="${target.file}" target="${target.name}" inheritAll="false">
        <property name="open.dir" location="${open.dir}"/>
    </ant>
  </target>

  <target name="checkTrace">
    <property file="${FarragoTrace.properties}" prefix="TRACE"/>
    <ac:if xmlns:ac="antlib:net.sf.antcontrib">
      <equals arg1="${TRACE.net.sf.farrago.dynamic.level}" arg2="FINE"/>
      <then>
        <fail>
Trace net.sf.farrago.dynamic.level=FINE
will cause ant test to fail or run very slowly;
please disable it and try again.
        </fail>
      </then>
    </ac:if>
  </target>

  <target name="checkOracle">
    <ac:if xmlns:ac="antlib:net.sf.antcontrib">
      <and>
        <isset property="oracle.test"/>
        <not>
          <isset property="oracle.available"/>
        </not>
      </and>
      <then>
        <fail>
Oracle tests were requested via oracle.test, but Oracle is not available.
        </fail>
      </then>
    </ac:if>
  </target>

  <!-- run all regression test cases -->
  <target name="regression" depends="cleanTestLogs">
    <antcall target="regressionWithoutBuild"/>
  </target>

  <!-- run all regression test cases; -->
  <!-- for use only as a subtarget to avoid destroying test logs from junit -->
  <target name="regressionWithoutBuild">
    <farrago.antFork target="forked_regressionWithoutBuild"
      classpathref="test.classpath">
      <jvmargs>
        <jvmarg line="-Xmx768m"/>
        <jvmarg line="-Xss1536k"/>
        <jvmarg line="-XX:MaxPermSize=256m"/>
        <jvmarg line="${assertions.jvmarg}"/>
        <jvmarg line="&FarragoSqlLineProps;"/>
        <syspropertyset>
          <propertyref builtin="commandline"/>
        </syspropertyset>
      </jvmargs>
    </farrago.antFork>
    <delete file="${FarragoTrace.log}.lck"/>
  </target>

  <target name="forked_regressionWithoutBuild">
    <farrago.runTests>
      <testfileset>
        <fileset dir="${farrago.classes.dir}">
          <include name="**/regression/*Test.class"/>
          <include name="**/concurrent/*Test.class"/>
        </fileset>
      </testfileset>
      <junitargs>
        <sysproperty key="net.sf.farrago.fileset.regressionsql"
          value="${fileset.regressionsql}"/>
        <sysproperty key="net.sf.farrago.fileset.concurrentsql"
          value="${fileset.concurrentsql}"/>
      </junitargs>
    </farrago.runTests>
  </target>

  <!-- NOTE:  these have to run forked in specific order -->
  <target name="testRngPlugin">
    <delete dir="${farrago.dir}/testgen/upgrade" quiet="true"/>
    <mkdir dir="${farrago.dir}/testgen/upgrade/backup"/>
    <farrago.runSqlTest
      file="${farrago.dir}/examples/rng/unitsql/createPreUpgrade.sql"/>
    <!-- backup pre-upgrade catalog -->
    <farrago.backupCatalog backupDir="${farrago.dir}/testgen/upgrade/backup"/>
    <farrago.runSqlTest
      file="${farrago.dir}/examples/rng/unitsql/installPlugin.sql"/>
    <farrago.runSqlTest
      file="${farrago.dir}/examples/rng/unitsql/testPlugin.sql"/>
    <!-- restore from pre-upgrade catalog -->
    <delete quiet="true">
      <fileset dir="${farrago.catalog.dir}"
        includes="*.dat,FarragoCatalogDump.xmi"/>
    </delete>
    <!-- Restore only the Fennel files and a catalog dump from before the
         plugin was installed. -->
    <copy todir="${farrago.catalog.dir}">
      <fileset dir="${farrago.dir}/testgen/upgrade/backup"
          includes="*.dat"/>
    </copy>
    <copy todir="${farrago.catalog.dir}">
      <fileset dir="${farrago.dir}/testgen/upgrade"
        includes="FarragoCatalogDump.xmi"/>
    </copy>
    <!-- this will import pre-upgrade catalog contents -->
    <farrago.runSqlTest
      file="${farrago.dir}/examples/rng/unitsql/verifyReplaceCatalog.sql"/>
  </target>
  <!-- For MQL, don't run the connected.sql test since it 
       requires an Internet connection -->
  <target name="testMqlPlugin">
    <farrago.runSqlTest
      file="${farrago.dir}/ext/mql/unitsql/disconnected.sql"/>
  </target>

  <!-- TODO:  verify actual .dot output -->
  <target name="testDmv">
    <farrago.runSqlTest
      file="${farrago.dir}/examples/dmv/test.sql"/>
  </target>

  <target name="testMiniplanner">
    <farrago.runSqlTest
      file="${farrago.dir}/examples/miniplan/unitsql/miniplan.sql"/>
  </target>

  <target name="testCleanup">
    <farrago.runSqlTest
      file="${farrago.dir}/initsql/testCleanup.sql"/>
  </target>

  <!-- if this task fails, it means some test has polluted the catalog -->
  <target name="compareCatalogExport">
    <farrago.compareCatalogExport
      log.dir="${testlog.dir}/CatalogLeak"
      export.file="${farrago.xmi.dir}/FarragoCatalogExport.xmi" />
  </target>

  <target name="generateTestSql" depends="compile">
    <farrago.javaExec classpathref="farrago.run.classpath"
      classname="org.eigenbase.test.SqlTestGen"/>
  </target>

  <!-- debug a JUnit test case; called from script junitDebug -->
  <target name="jswat.junit" depends="cleanTestLogs">
    <fail message="property junit.class not defined" unless="junit.class"/>
    <farrago.jswatDebug
      classpath="${farrago.sqlline.classpath}"
      sourcepath="${farrago.sourcepath}"
      classname="junit.textui.TestRunner">
      <jvmargs>
        <arg value="-Dnet.sf.farrago.fileset.unitsql=${fileset.unitsql}"/>
        <arg value="-Dorg.eigenbase.fileset.unitlurql=${fileset.unitlurql}"/>
        <arg line="&FarragoSqlLineProps;"/>
      </jvmargs>
      <programargs>
        <arg value="${junit.class}"/>
      </programargs>
    </farrago.jswatDebug>
  </target>

  <!-- Generate the Fennel C++ proxy classes for FEM -->
  <target name="generateFemCpp" depends="compile">
    <ant antfile="p4fem.xml"/>
    <javah
      classpathref="farrago.run.classpath"
      class="net.sf.farrago.fennel.FennelStorage"
      outputFile="${open.dir}/fennel/farrago/NativeMethods.h"/>
    <farrago.javaExec
      classname="net.sf.farrago.catalog.codegen.ProxyGen"
      classpathref="farrago.run.classpath">
      <arg value="${fennel.dir}/farrago/FemGeneratedClasses.h"/>
      <arg value="${fennel.dir}/farrago/FemGeneratedMethods.h"/>
      <arg value="${fennel.dir}/common/FemGeneratedEnums.h"/>
      <arg value="FEM.Fennel"/>
      <arg value="Fem"/>
    </farrago.javaExec>


    <!-- not strictly part of fem, but it is JNI code -->
<!--    <javah
      classpathref="farrago.run.classpath"
      class="net.sf.farrago.fennel.FennelPseudoUuidGenerator"
      outputFile="${open.dir}/fennel/farrago/JniPseudoUuid.h"/> -->
  </target>

  <!-- Generate FarragoMetadataFactory -->
  <target name="generateMetadataFactory">
    <antcall target="extractFemTimestamp"/>
    <property file="${farrago.xmi.dir}/femTimestamp.txt"/>
    <!-- FactoryGen.class needed for code generation -->
    <farrago.javaCompile
      srcdir="${farrago.src.dir}"
      destdir="${farrago.classes.dir}"
      classpathref="farrago.build.classpath">
      <include name="**/FactoryGen.java" />
    </farrago.javaCompile>
    <farrago.javaExec
      classname="net.sf.farrago.catalog.codegen.FactoryGen"
      classpathref="farrago.run.classpath">
      <arg
        value="${farrago.src.dir}/net/sf/farrago/FarragoMetadataFactory.java"/>
      <arg
        value="${farrago.src.dir}/net/sf/farrago/FarragoMetadataFactoryImpl.java"/>
      <arg value="net.sf.farrago"/>
      <arg value="FarragoMetadataFactory"/>
      <arg value="FarragoMetadataFactoryImpl"/>
      <arg value="net.sf.farrago.FarragoPackage"/>
      <arg value="FarragoCatalog"/>
      <arg value="${fem.timestamp}"/>
    </farrago.javaExec>
  </target>

  <target name="extractFemTimestamp">
    <farrago.extractModelTimestamp umlFile="${FarragoExtMetamodel.uml}"
      outFile="${farrago.xmi.dir}/femTimestamp.txt"/>
  </target>

  <!-- Debugging target for listing repository extents -->
  <target name="printRepositoryExtents" depends="farrago.mdr_taskdef">
    <mdr 
        propertiesFile="${farrago.ReposStorage.propfile}"
        logConfigFile="${FarragoMdrBuildTrace.properties}">
      <propertyset>
        <propertyref name="FARRAGO_CATALOG_DIR"/>
      </propertyset>
      <printExtentNames/>
    </mdr>
  </target>

  <target name="macker">
    <path id="macker.classpath">
      <fileset dir="${macker.dir}/lib" includes="*.jar"/>
      <fileset dir="${macker.dir}/build" includes="macker.jar"/>
    </path>
    <taskdef name="macker"
      classname="net.innig.macker.ant.MackerAntTask"
      classpathref="macker.classpath"/>

    <macker maxMessages="10">
      <rules dir="${farrago.src.dir}" includes="**/*macker*.xml" />
      <classes dir="${farrago.classes.dir}">
        <include name="**/*.class" />
      </classes>
    </macker>
  </target>

  <target name="findbugs">
    <taskdef name="findbugs"
      classname="edu.umd.cs.findbugs.anttask.FindBugsTask" />
    <findbugs home="${findbugs.dir}" 
      jvmargs="-Xms1024m -Xmx1024m"
      output="emacs" 
      outputFile="findbugs.txt">
      <sourcePath path="${farrago.src.dir}"/>
      <auxClasspath path="${farrago.sqlline.classpath}"/>
      <class location="${farrago.classes.dir}"/>
    </findbugs>
  </target>

  <!-- Verify that all source files have the required headers -->
  <!-- TODO:  see if this works in non-Linux environments -->
  <target name="checkSourceFilePreambles">
    <echo message="checking source file preambles no longer"/>
  </target>

  <!-- Ensure that javadoc has no warnings/errors. -->
  <target name="checkJavadoc" unless="codecov.build">
    <record name="javadoc-complaints.log" action="start" 
      emacsmode="true" loglevel="warn"/>
    <antcall target="javadoc"/>
    <record name="javadoc-complaints.log" action="stop"/>
    <loadfile srcFile="javadoc-complaints.log" property="javadoc.complaints">
      <filterchain>
        <filterreader classname="org.apache.tools.ant.filters.LineContains">
          <param type="negate" value="true"/>
          <param type="contains" value="Error fetching URL"/>
        </filterreader>
        <striplinebreaks />
      </filterchain>
    </loadfile>
    <fail if="javadoc.complaints"
        message="Javadoc reported warnings or errors; see javadoc-complaints.log for details"/>
    <delete file="javadoc-complaints.log"/>
    <!-- Save disk space since we're just checking. -->
    <antcall target="cleanJavadoc"/>
  </target>

  <target name="cleanJavadoc">
    <delete includeEmptyDirs="true" quiet="true">
      <fileset dir="${javadoc.dir}" includes="**/*"/>
    </delete>
  </target>

  <!-- Beautify Farrago source code.  This currently requires
       the commercial Triemax version of Jalopy, which needs to
       be installed manually under thirdparty/jalopy. -->
  <target name="jalopy">
    <taskdef name="jalopy"
      classname="com.triemax.JalopyTask">
      <classpath>
        <fileset dir="${jalopy.dir}/lib">
          <include name="*.jar"/>
        </fileset>
      </classpath>
    </taskdef>
    <jalopy backup="false" convention="${farrago.src.dir}/jalopy.xml" 
      threads="2" classpathref="farrago.jalopy.classpath" history="NONE" 
      force="true">
      <fileset dir="${farrago.src.dir}">
        <include name="**/*.java"/>
        <exclude name="org/eigenbase/inventory/**/*.java"/>
      </fileset>
    </jalopy>
  </target>

  <!-- generate Emacs tags -->
  <target name="etags">
    <farrago.createEmacsTags filesetPropertyName="fileset.taggable"/>
  </target>

  <!-- generate Farrago javadoc -->
  <target name="javadoc">
    <antcall target="cleanJavadoc"/>
    <!-- remove stray package.html files under classes to avoid 'multiple
         sources of package comments' errors -->
    <delete includeEmptyDirs="false" quiet="true">
      <fileset dir="${farrago.classes.dir}" includes="**/package.html"/>
    </delete>
    <mkdir dir="${javadoc.dir}"/>
    <antcall target="javadoc-with-or-without-ydoc"/>
  </target>

  <target name="javadoc-with-or-without-ydoc"
      depends="javadoc-with-ydoc,javadoc-without-ydoc"/>


  <!-- Generate javadoc using the yDoc doclet to generate UML
       diagrams.  To call this target, set ydoc.home to the root of
       your installation (e.g. "/usr/local/ydoc-2.2_03-jdk1.5"),
       obtain a license (free for open-source use) and place the
       license as ${ydoc.home}/resources/ydoc.license. -->
  <target name="javadoc-with-ydoc" if="ydoc.home">
    <property name="ps" value="${path.separator}"/>
    <javadoc
      maxmemory="1024m"
      private="true"
      destdir="${javadoc.dir}"
      source="${farrago.javasrc.version}"
      classpathref="farrago.javadoc.classpath">
      <tag dir="src" includes="customJavadocTags.txt"/>
      <packageset dir="${farrago.catalog.src.dir}">
        <include name="**"/>
      </packageset>
      <packageset dir="${farrago.src.dir}">
        <include name="**"/>
      </packageset>
      <packageset dir="${farrago.dir}/examples/plannerviz/src">
        <include name="**"/>
      </packageset>
      <packageset dir="${farrago.dir}/examples/miniplan/src">
        <include name="**"/>
      </packageset>
      <packageset dir="${farrago.dir}/ext/mql/src">
        <include name="**"/>
      </packageset>
      <packageset dir="${farrago.dir}/examples/rng/src">
        <include name="**"/>
      </packageset>
      <packageset dir="${farrago.dir}/examples/rng/catalog/java">
        <include name="**"/>
      </packageset>
      <link href="http://www.netbeans.org/download/dev/javadoc/org-netbeans-api-mdr"/>
      <link href="http://java.sun.com/products/jmi/jmi-1_0-fr-doc"/>
      <link href="http://java.sun.com/j2se/1.5.0/docs/api"/>
      <link href="http://www.junit.org/junit/javadoc/3.8.1"/>
      <link href="http://dist.codehaus.org/janino/javadoc/"/>
      <link href="http://www.csg.is.titech.ac.jp/openjava/OpenJava_1.1/htdocs"/>
      <link href="${enki.dir}/javadoc"/>
      <doclet
          name="ydoc.doclets.YStandard"
          path="${ydoc.home}/lib/ydoc.jar${ps}${ydoc.home}/lib/class2svg.jar${ps}${ydoc.home}/resources${ps}${ydoc.home}/doc">
        <param name="-author"/>
        <param name="-generic"/>
        <param name="-umlautogen"/>
        <param name="-tag" value="y.precondition"/>
        <param name="-tag" value="y.postcondition"/>
        <param name="-tag" value="y.complexity"/>
        <param name="-tag" value="param"/>
        <param name="-tag" value="return"/>
        <param name="-tag" value="see"/>
        <param name="-tag" value="y.uml"/>
      </doclet>
    </javadoc>
  </target>

  <target name="javadoc-without-ydoc" unless="ydoc.home">
    <javadoc
      maxmemory="1024m"
      private="true"
      destdir="${javadoc.dir}"
      source="${farrago.javasrc.version}"
      classpathref="farrago.javadoc.classpath">
      <tag dir="src" includes="customJavadocTags.txt"/>
      <packageset dir="${farrago.catalog.src.dir}">
        <include name="**"/>
      </packageset>
      <packageset dir="${farrago.src.dir}">
        <include name="**"/>
      </packageset>
      <packageset dir="${farrago.dir}/examples/plannerviz/src">
        <include name="**"/>
      </packageset>
      <packageset dir="${farrago.dir}/examples/miniplan/src">
        <include name="**"/>
      </packageset>
      <packageset dir="${farrago.dir}/ext/mql/src">
        <include name="**"/>
      </packageset>
      <packageset dir="${farrago.dir}/examples/rng/src">
        <include name="**"/>
      </packageset>
      <packageset dir="${farrago.dir}/examples/rng/catalog/java">
        <include name="**"/>
      </packageset>
      <link href="http://www.netbeans.org/download/dev/javadoc/org-netbeans-api-mdr"/>
      <link href="http://java.sun.com/products/jmi/jmi-1_0-fr-doc"/>
      <link href="http://java.sun.com/j2se/1.5.0/docs/api"/>
      <link href="http://www.junit.org/junit/javadoc/3.8.1"/>
      <link href="http://dist.codehaus.org/janino/javadoc/"/>
      <link href="http://www.csg.is.titech.ac.jp/openjava/OpenJava_1.1/htdocs"/>
      <link href="${enki.dir}/javadoc"/>
    </javadoc>
  </target>

  <!-- create the documentation tarball -->
  <target name="buildDoc"
    depends="cleanExamples, createCatalog, buildExamples, javadoc, jjDoc">
    <delete file="${farrago.dir}/doc.tar" />
    <delete file="${farrago.dir}/doc.tar.gz" />
    <tar tarfile="${farrago.dir}/doc.tar">
      <tarfileset dir="${farrago.dir}" includes="doc/**" excludes="**/*.vsd"/>
    </tar>
    <gzip zipfile="${farrago.dir}/doc.tar.gz"
              src="${farrago.dir}/doc.tar" />
    <delete file="${farrago.dir}/doc.tar" />
  </target>

  <!-- run JSwat on sqlline in interactive mode -->
  <target name="jswat.sqlline" depends="all">
    <farrago.jswatDebug
      classpath="${farrago.sqlline.classpath}"
      sourcepath="${farrago.sourcepath}"
      classname="sqlline.SqlLine">
      <jvmargs>
        <arg line="&FarragoSqlLineProps;"/>
      </jvmargs>
      <programargs>
        <arg value="-u jdbc:farrago: -d net.sf.farrago.jdbc.engine.FarragoJdbcEngineDriver -n sa"/>
      </programargs>
    </farrago.jswatDebug>
  </target>

  <!-- Dump the file classpath.gen for use outside of ant -->
  <target name="createClasspathFile">
    <delete file="${file.classpath}" quiet="true"/>
    <concat destfile="${file.classpath}">cccp</concat>
    <replace file="${file.classpath}" token="cccp"
      value="${farrago.sqlline.classpath}"/>
  </target>
  <property name="file.classpath"
    location="${farrago.dir}/classpath.gen"/>

  <!-- Create an MDR repository for use by SQL/MED tests -->
  <target name="createMdrTestData" depends="farrago.mdr_taskdef">
    <delete quiet="true">
      <fileset dir="unitsql/ddl" includes="mdr.bt?"/>
    </delete>
    <mdr logConfigFile="${FarragoMdrBuildTrace.properties}">
      <storageProperty
        name="org.eigenbase.enki.implementationType" 
        value="NETBEANS_MDR"/>
      <storageProperty
        name="org.netbeans.mdr.persistence.Dir"
        value="${farrago.dir}/unitsql/ddl/mdr"/>

      <createExtent name="TestMof"/>
    </mdr>
  </target>

  <target name="testLeaks" depends="all,cleanTestLogs" >
    <farrago.javaExec classpathref="farrago.run.classpath"
      classname="net.sf.farrago.test.TestLeaks">
    </farrago.javaExec>
  </target>

  <target name="testLeaksJmp" depends="all,cleanTestLogs" >
    <farrago.javaExec classpathref="farrago.run.classpath"
      classname="net.sf.farrago.test.TestLeaks">
      <jvmarg line="-Xrunjmp:nomethods,nomonitors"/>
      <arg value="jmp"/>
    </farrago.javaExec>
  </target>

  <!-- run JSwat on Farrago as an RmiJdbc server -->
  <target name="jswat.server" depends="all">
    <farrago.jswatDebug
      classpath="${farrago.run.classpath}"
      sourcepath="${farrago.sourcepath}"
      classname="net.sf.farrago.server.FarragoServer">
      <jvmargs>
        <arg line="&FarragoProps;"/>
      </jvmargs>
    </farrago.jswatDebug>
  </target>

  <!-- verify that ReposStorage.properties is correctly configured
       for storage via JDBC -->
  <target name="verifyReposSqlStorage" depends="configureReposStorage">
    <farrago.setReposProvider/>

    <ac:if xmlns:ac="antlib:net.sf.antcontrib">
      <equals arg1="${farrago.enki.provider}" arg2="NETBEANS_MDR"/>
      <then>
        <loadproperties srcFile="${farrago.ReposStorage.propfile}">
          <filterchain>
            <tokenfilter>
              <replacestring
                from="MDRStorageProperty.org.netbeans.mdr.persistence."
                to=""/>
            </tokenfilter>
          </filterchain>
        </loadproperties>
        <sql
          driver="${jdbcimpl.driverClassName}"
          url="${jdbcimpl.url}"
          userid="${jdbcimpl.userName}"
          password="${jdbcimpl.password}"
          classpath="${farrago.3p.classpath}"
          rdbms="nonexistentSQL">
          <![CDATA[bogus]]>
        </sql>
        <echo message="Successfully connected to ${jdbcimpl.url}"/>
      </then>
    </ac:if>

    <ac:if xmlns:ac="antlib:net.sf.antcontrib">
      <equals arg1="${farrago.enki.provider}" arg2="ENKI_HIBERNATE"/>
      <then>
        <loadproperties srcFile="${farrago.ReposStorage.propfile}"/>
        <sql
          driver="${hibernate.connection.driver_class}"
          url="${hibernate.connection.url}"
          userid="${hibernate.connection.username}"
          password="${hibernate.connection.password}"
          classpath="${farrago.3p.classpath}"
          rdbms="nonexistentSQL">
          <![CDATA[bogus]]>
        </sql>
        <echo message="Successfully connected to ${hibernate.connection.url}"/>
      </then>
    </ac:if>
  </target>

  <target name="buildExamples" depends="compile">
    <ant antfile="examples/plannerviz/build.xml" inheritAll="false"/>
    <ant antfile="examples/rng/build.xml" target="createPlugin"
      inheritAll="false"/>
    <ant antfile="examples/miniplan/build.xml"
      inheritAll="false"/>
    <ant antfile="ext/mql/build.xml"
      inheritAll="false"/>
  </target>

  <target name="cleanExamples">
    <ant antfile="examples/plannerviz/build.xml" target="clean"
      inheritAll="false"/>
    <ant antfile="examples/rng/build.xml" target="clean"
      inheritAll="false"/>
    <ant antfile="examples/miniplan/build.xml" target="clean"
      inheritAll="false"/>
    <ant antfile="ext/mql/build.xml" target="clean"
      inheritAll="false"/>
  </target>

  <!-- Below is all experimental stuff for the user repository -->
  <!-- WARNING: With the introduction of Enki, these will not work unless
       the MDR provider is Netbeans, and even then it is untested.
       (SWZ, 2008-02-14) -->
  <property name="JdbcStorage.prefix"
    value="MDRStorageProperty.org.netbeans.mdr.persistence.jdbcimpl"/>

  <target name="createUserRepository">
    <farrago.antFork target="forked_createUserRepository"
      classpathref="createUserRepository.classpath">
      <jvmargs>
        <jvmarg line="${assertions.jvmarg}"/>
        <jvmarg line="&FarragoProps;"/>
        <sysproperty
          key="org.netbeans.mdr.storagemodel.StorageFactoryClassName"
          value="org.netbeans.mdr.persistence.jdbcimpl.JdbcStorageFactory"/>
        <sysproperty
          key="${JdbcStorage.prefix}.url"
          value="jdbc:farrago:"/>
        <sysproperty
          key="${JdbcStorage.prefix}.schemaName"
          value="MDR"/>
        <sysproperty
          key="${JdbcStorage.prefix}.userName"
          value="MDR"/>
        <sysproperty
          key="${JdbcStorage.prefix}.driverClassName"
          value="net.sf.farrago.jdbc.engine.FarragoJdbcEngineDriver"/>
        <sysproperty
          key="${JdbcStorage.prefix}.datatype.streamable"
          value="VARBINARY(10000)"/>
      </jvmargs>
    </farrago.antFork>
  </target>

  <target name="jswat.createUserRepository" depends="all">
    <farrago.jswatDebug
      classpath="${createUserRepository.classpath}"
      sourcepath="${farrago.sourcepath}"
      classname="org.apache.tools.ant.Main">
      <jvmargs>
        <arg value="-Dorg.netbeans.mdr.storagemodel.StorageFactoryClassName=org.netbeans.mdr.persistence.jdbcimpl.JdbcStorageFactory"/>
        <arg value="-D${JdbcStorage.prefix}.url=jdbc:farrago:"/>
        <arg value="-D${JdbcStorage.prefix}.userName=MDR"/>
        <arg value="-D${JdbcStorage.prefix}.schemaName=MDR"/>
        <arg value="-D${JdbcStorage.prefix}.driverClassName=net.sf.farrago.jdbc.engine.FarragoJdbcEngineDriver"/>
        <arg value="-D${JdbcStorage.prefix}.datatype.streamable=VARBINARY(10000)"/>
        <arg line="&FarragoProps;"/>
      </jvmargs>
      <programargs>
        <arg value="forked_createUserRepository"/>
      </programargs>
    </farrago.jswatDebug>
  </target>

  <target name="forked_createUserRepository" depends="farrago.mdr_taskdef">
    <mdr
        propertiesFile="${farrago.ReposStorage.propfile}"
        logConfigFile="${FarragoMdrBuildTrace.properties}">
      <propertyset>
        <propertyref name="FARRAGO_CATALOG_DIR"/>
      </propertyset>
      <createExtent name="FarragoMetamodel"/>
      <printExtentNames/>
      <importXmi
        file="${FarragoMetamodel.xmi}"
        extent="FarragoMetamodel"/>
      <printExtentNames/>
      <createExtent
        name="FarragoCatalog"
        extent="FarragoMetamodel"
        package="Farrago"/>
      <printExtentNames/>
      <importXmi
        file="${FarragoConf.xmi}"
        extent="FarragoCatalog"/>
    </mdr>
  </target>

  <!-- End experimental stuff for the user repository -->

  <!-- TODO 24-Sept-2005:  replace this with apt task from ant 1.7 -->
  <target name="generateInventoryReport" depends="compile">
    <pathconvert property="sources.gen"
      pathsep="${line.separator}" dirsep="${file.separator}">
      <path>
        <fileset dir="${farrago.src.dir}">
          <include name="**/*.java" />
        </fileset>
      </path>
    </pathconvert>
    <echo message="${sources.gen}" file="sources.gen"/>
    <exec dir="${farrago.dir}" failonerror="true"
      executable="${javahome.dir}/bin/apt">
      <arg value="-s"/>
      <arg value="${farrago.dir}/inventorys"/>
      <arg value="-nocompile"/>
      <arg value="-classpath"/>
      <arg pathref="farrago.sqlline.classpath"/>
      <arg value="-d"/>
      <arg value="${farrago.dir}/inventoryd"/>
      <arg value="-factory"/>
      <arg value="org.eigenbase.inventory.EigenbaseInventoryGenerator"/>
      <arg value="@sources.gen"/>
    </exec>
  </target>

  <!-- Eclipse installation -->
  <property name="eclipse.dir" location="${thirdparty.dir}/eclipse" />

  <target name="createEclipseProject">
    <pathconvert property="eclipse.libpath" refid="farrago.build.3p.classpath"
      pathsep="&quot;/&gt;&lt;classpathentry kind=&quot;lib&quot; path=&quot;"/>
    <copy file="${farrago.dir}/eclipse/farrago.project" overwrite="true"
        tofile="${farrago.dir}/.project">
    </copy>
    <copy file="${farrago.dir}/eclipse/farrago.classpath" overwrite="true"
        tofile="${farrago.dir}/.classpath">
      <filterset>
        <filter token="LIBPATH" value="${eclipse.libpath}"/>
        <filter token="ECLIPSEDIR" value="${eclipse.dir}"/>
      </filterset>
    </copy>
    <copy todir="${farrago.dir}/.settings" overwrite="true">
      <fileset dir="${farrago.dir}/eclipse/.settings"/>
    </copy>
  </target>

  <target name="generateSqlTestWrapper"
    description="Generate JUnit test wrappers for all unitsql scripts">
    <farrago.generateSqlTestWrapper
      filesetref="fileset.unitsql"
      outputfile="${FarragoSqlTestWrapper.java}"
      rootpath="${farrago.dir}${file.separator}"
      packagename="net.sf.farrago.test"
      classname="FarragoSqlTestWrapper"/>
  </target>

  <target name="cov">
    <antcall target="emmaClean"/>
    <antcall target="emmaTest"/>
    <antcall target="emmaReport"/>
  </target>

  <target name="emmaClean">
    <delete dir="${emma.farrago.classes.dir}" quiet="true"/>
    <delete quiet="true">
        <fileset dir="${farrago.dir}" includes="coverage.*"/>
        <fileset dir="${coverage.dir}"/>
    </delete>
    <mkdir dir="${coverage.dir}"/>
    <mkdir dir="${emma.farrago.classes.dir}"/>
  </target>

  <target name="emmaInstr">
    <mkdir dir="${emma.farrago.classes.dir}"/>
    <emma verbosity="verbose">
      <instr
        mode="copy"
        outdir="${emma.farrago.classes.dir}"
        metadatafile="${farrago.dir}/coverage.em"
        instrpath="${farrago.classes.dir}">
        <filter excludes="*_Stub*"/>
      </instr>
    </emma>
  </target>

  <target name="emmaTest">
    <antcall target="checkTrace"/>
    <antcall target="cleanExamples"/>
    <antcall target="createCatalog"/>
    <antcall target="buildExamples"/>
    <!-- since some classes get built in here, instrument at the last minute-->
    <antcall target="emmaInstr"/>
    <antcall target="testRngPlugin"/>
    <antcall target="exportCatalog"/>
    <antcall target="emmaJunit"/>
    <!-- comment out the following since I merged junit and regression in
    emmaJunit-->
    <!--    <antcall target="regressionWithoutBuild"/>-->
    <antcall target="testCleanup"/>
    <antcall target="compareCatalogExport"/>
    <antcall target="macker"/>
    <antcall target="checkSourceFilePreambles"/>
  </target>

  <target name="emmaReport">
    <emma verbosity="verbose">
      <report sourcepath="${farrago.src.dir}">
        <infileset dir="${farrago.dir}" includes="*.em, *.ec"/>

        <html outfile="${coverage.dir}/coverage.html"/>
        <xml outfile="${coverage.dir}/coverage.xml"/>
        <txt outfile="${coverage.dir}/coverage.txt"/>
      </report>
    </emma>
  </target>

<!-- combine junit and regression targets -->
  <target name="emma-forked_junit">
    <farrago.runTests>
      <testfileset>
        <fileset dir="${emma.farrago.classes.dir}">
<!--          <exclude name="**/test/regression/*Test.class"/>
          <exclude name="**/test/concurrent/*Test.class"/>-->
<!--          <include name="net/sf/farrago/test/FarragoQueryTest.class"/>-->
          <exclude name="**/*ServerTest.class"/>
          <include name="**/*Test.class"/>
        </fileset>
      </testfileset>
      <junitargs>
        <sysproperty key="net.sf.farrago.fileset.unitsql"
          value="${fileset.unitsql}"/>
        <sysproperty key="org.eigenbase.fileset.unitlurql"
          value="${fileset.unitlurql}"/>
        <sysproperty key="net.sf.farrago.fileset.regressionsql"
          value="${fileset.regressionsql}"/>
        <sysproperty key="net.sf.farrago.fileset.concurrentsql"
          value="${fileset.concurrentsql}"/>
      </junitargs>
    </farrago.runTests>
  </target>

  <target name="emmaJunit" depends="cleanTestLogs">
    <farrago.antFork target="emma-forked_junit" classpathref="emma.test.classpath">
      <jvmargs>
        <jvmarg line="${assertions.jvmarg}"/>
        <jvmarg line="&FarragoProps;"/>
        <syspropertyset>
          <propertyref builtin="commandline"/>
        </syspropertyset>
      </jvmargs>
    </farrago.antFork>
    <delete file="${FarragoTrace.log}.lck" quiet="true"/>
  </target>

  <target name="dist">
    <copy file="${release.properties.src}" tofile="${release.properties}" 
          overwrite="true"/>
    <exec executable="git" outputproperty="git.commit">
      <arg value="rev-parse" />
      <arg value="HEAD" />
    </exec>
    <propertyfile file="${release.properties}">
      <entry key="product.build.number" value="${git.commit}"/>
    </propertyfile>
    <antcall target="releaseProps"/>
    <copy file="${release.properties}" todir="${farrago.dist.dir}" force="true"/>
    <ant dir="dist" target="createReleaseDir"/>
  </target>

  <target name="releaseProps">
    <loadproperties srcfile="${release.properties}">
      <filterchain>
        <linecontains>
          <contains value="product."/>
        </linecontains>
      </filterchain>
    </loadproperties>
    <condition property="product.version.string"
      value="${product.version.major}.${product.version.minor}.${product.version.point}"
      else="${product.version.major}.${product.version.minor}.${product.version.point}.${product.build.number}">
      <equals arg1="${product.build.number}" arg2="0"/>
    </condition>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!-- 
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<!-- Farrago ant script for creating distributions -->

<project name="farragoDistribution" basedir="." default="jar">

  <import file="./../buildMacros.xml"/>

  <!-- Load properties needed to derive release spec. -->
  <property file="FarragoRelease.properties"/>
  <fail unless="package.name"/>
  <fail unless="product.version.major"/>
  <fail unless="product.version.minor"/>
  <fail unless="product.version.point"/>
  <condition property="release.spec"
    value="${package.name}-${product.version.major}.${product.version.minor}.${product.version.point}"
    else="${package.name}-${product.version.major}.${product.version.minor}.${product.version.point}.${product.build.number}">
    <equals arg1="${product.build.number}" arg2="0"/>
  </condition>


  <!-- Directories and filenames for distribution jar file. -->
  <property name="dist.dir" location="${farrago.dir}/dist"/>
  <property name="dist.tmp.dir" location="${dist.dir}/tmp"/>
  <property name="release.dir" location="${dist.tmp.dir}/${release.spec}"/>
  <property name="release.file" location="${dist.dir}/${release.spec}.tar.bz2"/>
  <property name="dist.plugin.dir" location="${dist.dir}/plugin"/>
  <property name="dist.jar.file" location="${dist.dir}/farrago.jar"/>
  <property name="dist.jar.jdbc.file" location="${dist.dir}/farrago-jdbc.jar"/>
  <property name="dist.jar.jdbc.client.file" location="${dist.dir}/farrago-jdbc-client.jar"/>
  <property name="dist.jar.jdbc.engine.file" location="${dist.dir}/farrago-jdbc-engine.jar"/>


  <property name="release.dir" location="${dist.dir}/tmp/${release.spec}"/>

  <target name="createReleaseDir">
    <delete dir="${dist.tmp.dir}" failonerror="no"/>
    <mkdir dir="${dist.tmp.dir}"/>
    <mkdir dir="${release.dir}"/>
  </target>

  <target name="allJars" depends="cleanJars,jar,jdbcClientOnlyJar,jdbcJar,jdbcEngineOnlyJar" >
  </target>

  <!-- Cleans up everything --> 
  <target name="clean" depends="cleanJars">
    <delete dir="${release.dir}" quiet="true"/>
  </target>

  <!-- Cleans just jars -->
  <target name="cleanJars">
    <delete file="${dist.jar.file}" quiet="true"/>
    <delete file="${dist.jar.jdbc.file}" quiet="true"/>
    <delete file="${dist.jar.jdbc.client.file}" quiet="true"/>
    <delete file="${dist.jar.jdbc.engine.file}" quiet="true"/>
    <delete file="${dist.jar.jdbc.engine.file}" quiet="true"/>
  </target>
  
  <target name="removeReleaseDir">
    <delete dir="${dist.tmp.dir}"/>
  </target>

  <target name="jar">
    <delete file="${dist.jar.file}" quiet="true"/>
    <jar destfile="${dist.jar.file}" update="true" compress="true">
      <fileset dir="${farrago.dir}">
        <include name="README"/>
        <include name="COPYING"/>
      </fileset>
      <fileset dir="${farrago.classes.dir}">
        <include name="**/*.class"/>
        <include name="**/*.properties"/>
        <include name="FarragoEhCache.xml"/>
      </fileset>
      <fileset dir="${farrago.catalog.src.dir}">
        <include name="**/*.class"/>
        <include name="META-INF/enki/**"/>
      </fileset>
      <fileset dir="${dist.dir}">
        <include name="FarragoRelease.properties"/>
      </fileset>
    </jar>
    <copy file="${farrago.plugin.dir}/FarragoMedJdbc.jar" 
      todir="${dist.plugin.dir}"/>
    <jar destfile="${dist.plugin.dir}/FarragoMedJdbc.jar" update="true">
      <fileset dir="${farrago.dir}">
        <include name="README"/>
        <include name="COPYING"/>
      </fileset>
    </jar>
    <war destfile="${dist.dir}/vjdbc_servlet.war" 
      webxml="${farrago.dir}/ext/vjdbc/web.xml">
      <fileset dir="${thirdparty.dir}/vjdbc/conf/servlet">
        <include name="*.html"/>
        <exclude name="applet.html"/>
      </fileset>
      <webinf dir="${farrago.dir}/ext/vjdbc">
        <include name="vjdbc-config"/>
      </webinf>
      <lib dir="${thirdparty.dir}/vjdbc/lib" excludes="j2ee_api.jar,junit.jar"/>
    </war>
  </target>

  <target name="jdbcClientOnlyJar">
    <jar destfile="${dist.jar.jdbc.client.file}" update="true" compress="true" filesetmanifest="skip">
      <fileset dir="${farrago.classes.dir}">
        <include
          name="net/sf/farrago/jdbc/client/FarragoVjdbcClientDriver.class"/>
        <include
          name="net/sf/farrago/jdbc/client/FarragoVjdbcHttpClientDriver.class"/>
        <include
          name="net/sf/farrago/jdbc/client/FarragoUnregisteredVjdbcClientDriver.class"/>
        <include
          name="net/sf/farrago/jdbc/client/FarragoUnregisteredVjdbcHttpClientDriver.class"/>
        <include
          name="net/sf/farrago/jdbc/FarragoAbstractJdbcDriver.class"/>
        <include
          name="net/sf/farrago/release/*"/>
        <include
          name="org/eigenbase/util/property/*"/>
        <include
          name="org/eigenbase/util14/ConnectStringParser.class"/>
      </fileset>
    </jar>
  </target>

  <!-- Package the build for distribution -->
  <target name="package">
    <tar destfile="${release.file}" compression="bzip2" basedir="${dist.tmp.dir}"/>
  </target>
  
  <target name="jdbcJar">
    <jar destfile="${dist.jar.jdbc.file}" update="true" compress="true" filesetmanifest="skip">
      <fileset dir="${farrago.classes.dir}">
	<include name="net/sf/farrago/jdbc/**/*.class"/>
        <include
          name="net/sf/farrago/release/*"/>
        <include
          name="org/eigenbase/util/property/*"/>
        <include
          name="org/eigenbase/util14/ConnectStringParser.class"/>
      </fileset>
    </jar>
  </target>
  <target name="jdbcEngineOnlyJar">
    <jar destfile="${dist.jar.jdbc.engine.file}" update="true" compress="true" filesetmanifest="skip">
      <fileset dir="${farrago.classes.dir}">
	<include name="net/sf/farrago/jdbc/engine/*.class"/>
        <include
          name="net/sf/farrago/jdbc/FarragoAbstractJdbcDriver.class"/>
        <include
          name="net/sf/farrago/release/*"/>
        <include
          name="org/eigenbase/util/property/*"/>
        <include
          name="org/eigenbase/util14/ConnectStringParser.class"/>
      </fileset>
    </jar>
  </target>
      
  <!-- TODO jvs 26-June-2005:  this isn't used yet -->
  <target name="createPlannervizRelease">
    <copy 
      file="${farrago.dir}/examples/plannerviz/plugin/FarragoPlannerviz.jar" 
      todir="${dist.plugin.dir}"/>
    <jar destfile="${dist.plugin.dir}/FarragoPlannerviz.jar" update="true">
      <fileset dir="${farrago.dir}">
        <include name="README"/>
        <include name="COPYING"/>
      </fileset>
    </jar>
  </target>
</project>
<?xml version="1.0" encoding="UTF-8"?>
<!-- 
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<!-- Farrago miniplan ant build script -->

<project name="farragoMiniplan" basedir="." default="jar">
  <dirname property="farragoMiniplan.dir" file="${ant.file}" />

  <!-- Definitions for Farrago build properties and macros -->
  <import file="../../buildMacros.xml"/>

  <!-- Specialization definitions required by buildPlugin.xml -->

  <property name="plugin.dir" location="${farragoMiniplan.dir}"/>
  <property name="plugin.jar.basename" value="FarragoMiniplan"/>
  <property name="plugin.factory.class" 
    value="net.sf.farrago.miniplan.FarragoMiniplanPersonalityFactory"/>

  <!-- Classpath for plugin dependencies (none in this case) -->
  <path id="plugin.3p.classpath">
  </path>
  <property name="plugin.3p.classpath" refid="plugin.3p.classpath"/>

  <!-- Standard definitions for Farrago plugin build -->
  <import file="../../plugin/buildPlugin.xml"/>

  <target name="compile">
    <mkdir dir="${plugin.classes.dir}"/>
    <farrago.javaCompile
      deprecation="off"
      srcdir="${plugin.src.dir}"
      destdir="${plugin.classes.dir}"
      classpathref="plugin.classpath">
      <include name="**/*.java" />
    </farrago.javaCompile>
  </target>

  <target name="jar" depends="compile">
    <antcall target="plugin.buildJar"/>
  </target>

  <target name="createPlugin">
    <antcall target="clean"/>
    <antcall target="jar"/>
  </target>

  <target name="clean" depends="plugin.clean">
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!-- 
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<!-- Farrago plannerviz ant build script -->

<project name="farragoPlannerviz" basedir="." default="jar">
  <dirname property="farragoPlannerviz.dir" file="${ant.file}" />

  <!-- Definitions for Farrago build properties and macros -->
  <import file="../../buildMacros.xml"/>

  <!-- Specialization definitions required by buildPlugin.xml -->

  <property name="plugin.dir" location="${farragoPlannerviz.dir}"/>
  <property name="plugin.jar.basename" value="FarragoPlannerviz"/>
  <property name="plugin.factory.class" 
    value="net.sf.farrago.plannerviz.FarragoPlannervizPluginFactory"/>

  <path id="plugin.3p.classpath">
    <pathelement location="${jgraphaddons.dir}/lib/jgraphaddons.jar"/>
    <pathelement location="${jgrapht.dir}/lib/jgraph.jar"/>
  </path>
  <property name="plugin.3p.classpath" refid="plugin.3p.classpath"/>

  <!-- Standard definitions for Farrago plugin build -->
  <import file="../../plugin/buildPlugin.xml"/>

  <property name="jgraph.classes.dir" 
    location="${plugin.dir}/jgraph"/>

  <target name="compile">
    <mkdir dir="${plugin.classes.dir}"/>
    <farrago.javaCompile
      deprecation="off"
      srcdir="${plugin.src.dir}"
      destdir="${plugin.classes.dir}"
      classpathref="plugin.classpath">
      <include name="**/*.java" />
    </farrago.javaCompile>
  </target>

  <target name="jar" depends="compile">
    <antcall target="plugin.buildJar"/>
    <mkdir dir="${jgraph.classes.dir}"/>
    <unjar src="${jgrapht.dir}/lib/jgraph.jar" 
      dest="${jgraph.classes.dir}"/>
    <unjar src="${jgraphaddons.dir}/lib/jgraphaddons.jar" 
      dest="${jgraph.classes.dir}"/>
    <jar destfile="${plugin.jar.file}" compress="true" update="true"
      duplicate="fail">
      <fileset dir="${jgraph.classes.dir}">
        <include name="**/*.class"/>
      </fileset>
    </jar>
  </target>

  <target name="createPlugin">
    <antcall target="clean"/>
    <antcall target="jar"/>
  </target>

  <target name="clean" depends="plugin.clean">
    <delete includeEmptyDirs="true" quiet="true">
      <fileset dir="${jgraph.classes.dir}">
        <include name="**/*"/>
      </fileset>
    </delete>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!-- 
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<!-- Farrago plugin RNG example ant build script -->

<project name="farragoExampleRNG" basedir="." default="jar">
  <dirname property="farragoExampleRNG.dir" file="${ant.file}" />

  <!-- Definitions for Farrago build properties and macros -->
  <import file="../../buildMacros.xml"/>

  <!-- Specialization definitions required by buildPlugin.xml -->

  <!-- Plugin build root -->
  <property name="plugin.dir" location="${farragoExampleRNG.dir}"/>

  <!-- Filename for generated jar (no path, no extension) -->
  <property name="plugin.jar.basename" 
    value="FarragoRng"/>

  <!-- UML model name for plugin model extension -->
  <property name="plugin.model.name"
    value="RNGModel"/>

  <!-- Base filename for UML definition of plugin model extension -->
  <property name="plugin.model.basename"
    value="RandomNumberGenerator"/>

  <!-- Prefix to use for model-generated Java classes -->
  <property name="plugin.model.prefix" 
    value="Rng"/>

  <!-- Java package location for model-generated classes -->
  <property name="plugin.model.package" 
    value="net.sf.farrago.rngmodel"/>

  <!-- Java package location for resource definitions -->
  <property name="plugin.resource.package" 
    value="net/sf/farrago/rng/resource"/>

  <!-- Base filename for resource definition -->
  <property name="plugin.resource.basename" 
    value="FarragoRngResource"/>

  <!-- Java class implementing plugin factory -->
  <property name="plugin.factory.class" 
    value="net.sf.farrago.rng.FarragoRngPluginFactory"/>

  <!-- Java package for generated parser -->
  <property name="plugin.parser.impl.package" 
    value="net/sf/farrago/rng/parserimpl"/>

  <!-- JavaCC source for parser -->
  <property name="plugin.parser.jj" value="net/sf/farrago/rng/RngParser.jj"/>

  <!-- Classpath for plugin dependencies (none in this case) -->
  <path id="plugin.3p.classpath">
  </path>
  <property name="plugin.3p.classpath" refid="plugin.3p.classpath"/>


  <!-- Standard definitions for Farrago plugin build -->
  <import file="../../plugin/buildPlugin.xml"/>

  <!-- Source location for resource definitions -->
  <property name="plugin.resource.dir" 
    location="${plugin.src.dir}/net/sf/farrago/rng/resource"/>

  <target name="compile" depends="plugin.buildResources,plugin.buildParser">
    <farrago.javaCompile
      deprecation="off"
      srcdir="${plugin.src.dir}"
      destdir="${plugin.classes.dir}"
      classpathref="plugin.classpath">
      <include name="**/*.java" />
    </farrago.javaCompile>
  </target>

  <target name="jar" depends="compile, plugin.buildJar">
  </target>

  <target name="createPlugin">
    <antcall target="clean"/>
    <antcall target="plugin.buildModel"/>
    <antcall target="jar"/>
  </target>

  <target name="clean" depends="plugin.clean">
  </target>
</project>
<?xml version="1.0" encoding="UTF-8"?>
<!-- 
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<!-- Farrago MQL plugin ant build script -->

<project name="farragoMql" basedir="." default="jar">
  <dirname property="farragoMql.dir" file="${ant.file}" />

  <!-- Definitions for Farrago build properties and macros -->
  <import file="../../buildMacros.xml"/>

  <!-- Specialization definitions required by buildPlugin.xml -->

  <property name="plugin.dir" location="${farragoMql.dir}"/>
  <property name="plugin.jar.basename" value="farrago-mql"/>
  <property name="plugin.manifest.attr.name" 
    value="DataWrapperClassName"/>
  <property name="plugin.factory.class" 
    value="net.sf.farrago.namespace.mql.MedMqlForeignDataWrapper"/>

  <!-- Classpath for plugin dependencies (none in this case) -->
  <path id="plugin.3p.classpath">
  </path>
  <property name="plugin.3p.classpath" refid="plugin.3p.classpath"/>

  <!-- Standard definitions for Farrago plugin build -->
  <import file="../../plugin/buildPlugin.xml"/>

  <target name="compile">
    <mkdir dir="${plugin.classes.dir}"/>
    <farrago.javaCompile
      deprecation="off"
      srcdir="${plugin.src.dir}"
      destdir="${plugin.classes.dir}"
      classpathref="plugin.classpath">
      <include name="**/*.java" />
    </farrago.javaCompile>
  </target>

  <target name="jar" depends="compile">
    <antcall target="plugin.buildJar"/>
  </target>

  <target name="createPlugin">
    <antcall target="clean"/>
    <antcall target="jar"/>
  </target>

  <target name="clean" depends="plugin.clean">
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id$ -->
<!-- ant build script for testing MDR plus CWM without Farrago -->

<project name="mdrcwm" basedir="." default="unspecified">

  <!-- Definitions for Farrago build properties and macros -->
  <import file="../../buildMacros.xml"/>

  <property name="xmi.dir" location="catalog/xmi"/>
  <property name="catalog.src.dir" location="catalog/java"/>
  <property name="catalog.basename" location="catalog/mdr"/>
  <property name="src.dir" location="src"/>
  <property name="classes.dir" location="classes"/>
  <property name="mondrian.dir" location="mondrian"/>

  <path id="mdrcwm.classpath">
    <pathelement path="${farrago.3p.classpath}"/>
    <pathelement location="${catalog.src.dir}"/>
    <pathelement location="${classes.dir}"/>
  </path>
  <property name="mdrcwm.classpath" refid="mdrcwm.classpath"/>

  <target name="init" depends="clean,mdr_taskdef">
    <mkdir dir="${catalog.src.dir}"/>
    <mkdir dir="${classes.dir}"/>
    <xslt style="${xmi.dir}/transformCWM.xsl"
      in="${farrago.cwm.xmi}"
      out="${xmi.dir}/01-02-03.xml">
    </xslt>
    <mdr storageFile="${catalog.basename}">
      <instantiate name="CWM"/>
      <readXMI
        file="${xmi.dir}/01-02-03_Diff.xml"
        extent="CWM"/>
      <mapJava
        dir="${catalog.src.dir}"
        extent="CWM"/>
      <instantiate name="Mondrian" extent="CWM" package="Olap"/>
    </mdr>
    <farrago.javaCompile
      srcdir="${catalog.src.dir}"
      destdir="${catalog.src.dir}"
      classpathref="mdrcwm.classpath">
      <include name="**/*.java"/>
    </farrago.javaCompile>
  </target>

  <target name="clean">
    <delete quiet="true" includeEmptyDirs="true">
      <fileset dir="catalog" includes="mdr.*"/>
      <fileset dir="${classes.dir}" includes="**/*.class"/>
    </delete>
    <delete includeEmptyDirs="true" dir="${catalog.src.dir}"/>
  </target>

  <target name="compile">
    <farrago.javaCompile
      srcdir="${src.dir}"
      destdir="${classes.dir}"
      classpathref="mdrcwm.classpath">
      <include name="**/*.java"/>
    </farrago.javaCompile>
  </target>

  <target name="createObjects" depends="compile">
    <farrago.javaExec classpathref="mdrcwm.classpath"
      classname="CreateTestData">
        <sysproperty key="org.netbeans.mdr.persistence.Dir" 
        value="${catalog.basename}" />
    </farrago.javaExec>
  </target>

  <target name="cleanRepository" depends="deleteExtent, createExtent">
  </target>

  <target name="createExtent" depends="mdr_taskdef">
    <mdr storageFile="${catalog.basename}">
      <instantiate name="Mondrian" extent="CWM" package="Olap"/>
    </mdr>
  </target>

  <target name="deleteExtent" depends="compile">
    <farrago.javaExec classpathref="mdrcwm.classpath"
      classname="CleanRepository">
        <sysproperty key="org.netbeans.mdr.persistence.Dir" 
        value="${catalog.basename}" />
    </farrago.javaExec>
  </target>

  <target name="export" depends="mdr_taskdef">
    <mdr storageFile="${catalog.basename}">
      <writeXMI
        file="${xmi.dir}/export.xmi"
        extent="Mondrian"
        xmiVersion = "1.2" />
    </mdr>
  </target>

  <target name="importFoodMart" depends="mdr_taskdef">
    <mdr storageFile="${catalog.basename}">
      <readXMI
        file="${xmi.dir}/FoodMart.xmi"
        extent="Mondrian"/>
    </mdr>
  </target>

  <target name="mdr_taskdef">
    <taskdef name="mdr" classname="org.netbeans.mdrant.MdrTask"
      classpathref="mdrcwm.classpath"/>
  </target>

  <target name="convertFoodMartToCwm">
    <xslt style="${mondrian.dir}/convertMondrianToCwm.xsl"
      in="${mondrian.dir}/FoodMart.xml"
      out="${xmi.dir}/FoodMart.xmi" />
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>

<project name="sqldeploymentdescriptor" basedir="." 
  default="gen-test-resources">
  <dirname property="sdd.dir" file="${ant.file.sqldeploymentdescriptor}" />

  <property name="class.dir" 
    location="${sdd.dir}/../../.."/>
  <fail unless="class.dir" />
  <target name="gen-test-resources" depends="clean">

    <!-- genrate jar for testing.-->
    <jar jarfile="${sdd.dir}/sddtest.jar">
      <fileset dir="${class.dir}/classes">
      	<include name="**/net/sf/farrago/test/FarragoTestUDR.class" />
      </fileset>
      <fileset dir="${sdd.dir}">
        <include name="deploy.txt"/>
      </fileset>
      <manifest>
        <section name="deploy.txt"> 
          <attribute 
             name="SQLJDeploymentDescriptor" 
             value="TRUE" />
        </section>
      </manifest>
    </jar>
    <!-- generate jar for testing.-->
    <jar jarfile="${sdd.dir}/bad-sddtest.jar">
      <fileset dir="${class.dir}/classes">
        <include name="**/net/sf/farrago/test/FarragoTestUDR.class" />
      </fileset>
      <fileset dir="${sdd.dir}">
        <include name="bad_deploy.txt"/>
      </fileset>
      <manifest>
        <section name="bad_deploy.txt">
          <attribute
             name="SQLJDeploymentDescriptor"
             value="TRUE" />
        </section>
      </manifest>
    </jar>
  </target>

  <target name="clean">
    <delete file="sddtest.jar"/>
    <delete file="bad-sddtest.jar"/>
  </target>
</project>

<?xml version="1.0" encoding="UTF-8"?>
<!-- 
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<!-- Firewater ant build script -->

<project name="firewater" basedir="." default="jar">
  <dirname property="firewater.dir" file="${ant.file}" />

<!-- assume common parent of fennel, farrago and luciddb  -->
  <property name="open.dir" location="${firewater.dir}/.."/>
  <fail unless="open.dir" />
  <property name="farrago.dir" location="${open.dir}/farrago"/>
  <property name="luciddb.dir" location="${open.dir}/luciddb"/>

  <property file="${firewater.dir}/customBuild.properties" />
  <property file="${luciddb.dir}/customBuild.properties" />
  <property file="${farrago.dir}/customBuild.properties" />

  <!-- Definitions for Farrago build properties and macros -->
  <import file="${farrago.dir}/buildMacros.xml"/>

  <!-- Specialization definitions required by buildPlugin.xml -->

  <property name="plugin.dir" location="${firewater.dir}"/>
  <property name="plugin.jar.basename" value="firewater"/>
  <property name="plugin.model.name" value="Fwm"/>
  <property name="plugin.model.basename" value="Firewater"/>
  <property name="plugin.model.prefix" value="Fwm"/>
  <property name="plugin.model.package" value="net.sf.farrago.fwm"/>
  <property name="plugin.resource.package" value="net/sf/firewater/resource"/>
  <property name="plugin.resource.basename" value="FirewaterResource"/>
  <!-- property name="plugin.manifest.attr.name" 
    value="SessionFactoryClassName"/ -->
  <property name="plugin.factory.class" 
    value="net.sf.firewater.FirewaterSessionFactory"/>
  <property name="plugin.parser.impl.package" 
    value="net/sf/firewater/parserimpl"/>
  <property name="plugin.parser.jj" 
    value="net/sf/firewater/FirewaterParser.jj"/>

  <!-- Classpath for plugin dependencies -->
  <path id="plugin.3p.classpath">
    <pathelement location="${farrago.dir}/plugin/FarragoMedJdbc.jar"/>
    <pathelement location="../luciddb/classes"/>
  </path>
  <property name="plugin.3p.classpath" refid="plugin.3p.classpath"/>

  <!-- Standard definitions for Farrago plugin build -->
  <import file="../farrago/plugin/buildPlugin.xml"/>

  <property name="plugin.resource.dir" 
    location="${plugin.src.dir}/firewater/resource"/>

  <property name="testlog.dir" location="${firewater.dir}/testlog"/>

  <property name="test.sessionfactory" value="./plugin/firewater.jar"/>

  <!-- a fileset of all SQL unit tests -->
  <fileset dir="${firewater.dir}/unitsql" id="fileset.unitsql">
    <include name="**/*.sql"/>
  </fileset>
  <pathconvert property="fileset.unitsql" refid="fileset.unitsql"
    pathsep="${line.separator}" dirsep="${file.separator}" />

  <!-- a fileset of all files for which tags should be built -->
  <fileset dir="${basedir}" id="fileset.taggable">
    <include name="catalog/java/**/*.java"/>
    <include name="src/**/*.jj"/>
    <include name="src/**/*.java"/>
    <include name="src/**/package.html"/>
    <exclude name="src/**/parserimpl/*"/>
  </fileset>

  <target name="compile" depends="plugin.buildResources,plugin.buildParser">
    <mkdir dir="${plugin.classes.dir}"/>
    <farrago.javaCompile
      deprecation="off"
      srcdir="${plugin.src.dir}"
      destdir="${plugin.classes.dir}"
      classpathref="plugin.classpath">
      <include name="**/*.java" />
    </farrago.javaCompile>
  </target>

  <target name="jar" depends="compile, copyProperties, plugin.buildJar">
    <manifest file="${plugin.classes.dir}/META-INF/MANIFEST.MF" mode="update">
      <attribute
        name="SessionFactoryClassName"
        value="net.sf.firewater.FirewaterSessionFactory"/>
      <attribute
        name="DataWrapperClassName"
        value="net.sf.firewater.FirewaterDataWrapper"/>
    </manifest>
    <jar destfile="${plugin.jar.file}" compress="true" update="true"
      manifest="${plugin.classes.dir}/META-INF/MANIFEST.MF">
    </jar>
    <mkdir dir="testclasses"/>
    <copy todir="testclasses">
      <fileset dir="classes" includes="**/*Test*.class"/>
    </copy>
    <jar jarfile="plugin/firewater-jdbc.jar"
      filesetmanifest="skip">
      <zipgroupfileset dir="${vjdbc.dir}/lib">
        <include name="vjdbc.jar"/>
        <include name="commons-logging-1.1.jar"/>
      </zipgroupfileset>
      <fileset dir="classes">
        <include name="FarragoRelease.properties"/>
        <include name="net/sf/firewater/jdbc/**/*.class"/>
      </fileset>
      <fileset dir="${farrago.classes.dir}">
        <include
          name="net/sf/farrago/jdbc/client/FarragoVjdbcClientDriver.class"/>
        <include
          name="net/sf/farrago/jdbc/client/FarragoVjdbcHttpClientDriver.class"/>
        <include
          name="net/sf/farrago/jdbc/client/FarragoUnregisteredVjdbcClientDriver.class"/>
        <include
          name="net/sf/farrago/jdbc/client/FarragoUnregisteredVjdbcHttpClientDriver.class"/>
        <include
          name="net/sf/farrago/jdbc/FarragoAbstractJdbcDriver.class"/>
        <include
          name="net/sf/farrago/release/*"/>
        <include
          name="org/eigenbase/util/property/*"/>
        <include
          name="org/eigenbase/util14/ConnectStringParser.class"/>
      </fileset>
    </jar>
  </target>

  <target name="copyProperties">
    <copy todir="classes" overwrite="true">
      <fileset dir="catalog/xmi" includes="FarragoRelease.properties"/>
    </copy>
  </target>

  <target name="createPlugin">
    <antcall target="clean"/>
    <antcall target="plugin.buildModel"/>
    <antcall target="jar"/>
  </target>

  <target name="clean" depends="plugin.clean">
  </target>

  <target name="junit" depends="test">
  </target>

  <target name="test">
    <farrago.runTests fork="yes">
      <testfileset>
        <fileset dir="${plugin.classes.dir}">
          <include name="**/*Test.class"/>
        </fileset>
      </testfileset>
      <junitargs>
        <classpath>
          <pathelement path="plugin/firewater-jdbc.jar"/>
          <pathelement path="${farrago.sqlline.classpath}"/>
          <pathelement path="${plugin.3p.classpath}"/>
          <pathelement path="${farrago.run.classpath}"/>
          <pathelement path="testclasses"/>
        </classpath>
        <jvmarg line="${assertions.jvmarg}"/>
        <sysproperty key="net.sf.farrago.home"
          file="."/>
        <sysproperty key="net.sf.farrago.catalog"
          file="./catalog/data"/>
        <sysproperty key="net.sf.farrago.test.jdbcDriverClass"
          value="net.sf.firewater.jdbc.FirewaterLocalDriver"/>
        <sysproperty key="net.sf.farrago.fileset.unitsql"
          value="${fileset.unitsql}"/>
        <sysproperty key="net.sf.farrago.defaultSessionFactoryLibraryName"
          value="${test.sessionfactory}"/>
        <sysproperty key="java.util.logging.config.file"
          value="./trace/FirewaterTrace.properties"/>
      </junitargs>
    </farrago.runTests>
  </target>
  
  <target name="backupCatalog">
    <farrago.backupCatalog catalogDir="./catalog/data" 
      backupDir="./catalog/backup"/>
  </target>
  
  <target name="restoreCatalog">
    <farrago.restoreCatalog catalogDir="./catalog/data" 
      backupDir="./catalog/backup"/>
  </target>

  <target name="initFiles">
    <!-- TODO:  factor up from luciddb copyFarragoCatalog -->
    <delete quiet="true">
      <fileset dir="./catalog/data"/>
    </delete>
    <mkdir dir="./catalog/data"/>
    <copy 
      todir="./catalog/data"
      file="../luciddb/catalog/ReposStorage.properties"
      overwrite="true" />
    <copy todir="./catalog/data">
      <fileset dir="../luciddb/catalog/backup" includes="*"/>
    </copy>
    <copy todir="./plugin">
      <fileset dir="../farrago/plugin" includes="FarragoMedJdbc.jar"/>
    </copy>
    <farrago.configureTrace 
      propFile="./trace/FirewaterTrace.properties"
      logFile="./trace/FirewaterTrace.log"
      />
  </target>

  <!-- generate Emacs tags -->
  <target name="etags">
    <farrago.createEmacsTags filesetPropertyName="fileset.taggable"/>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<!DOCTYPE project [

<!ENTITY FarragoProps
"
-Dnet.sf.farrago.home=${luciddb.dir}
-Dnet.sf.farrago.catalog=${project.catalog.dir}
-Djava.util.logging.config.file=${project.trace.propfile}
-Dnet.sf.farrago.defaultSessionFactoryLibraryName=class:org.luciddb.session.LucidDbSessionFactory
-Dnet.sf.farrago.test.jdbcDriverClass=org.luciddb.jdbc.LucidDbLocalDriver
${farrago.test.jvmargs}
">

<!ENTITY FarragoSqlLineProps
"
&FarragoProps;
-Dsqlline.historyFile=${sqlline.hist.file}
">

]>

<project name="luciddb" default="test">
  <taskdef resource="net/sf/antcontrib/antlib.xml" />

  <dirname property="luciddb.dir" file="${ant.file.luciddb}" />
  <property environment="env" />
  <osfamily property="osfamily"/>

<!-- assume common parent of fennel, farrago and luciddb  -->
  <property name="open.dir" location="${luciddb.dir}/.."/>
  <fail unless="open.dir" />
  <property name="farrago.dir" location="${open.dir}/farrago"/>
  <property name="farrago.dist.dir" location="${farrago.dir}/dist"/>

  <property name="build.init.properties" location="${luciddb.dir}/build.init.properties" />
  <import file="${luciddb.dir}/properties.xml" />

  <property name="fennel.dir" location="${open.dir}/fennel"/>

  <property file="${farrago.dir}/initBuild.properties" />
  <property file="${luciddb.dir}/customBuild.properties" />

  <!-- directory in which classes are built -->
  <property name="classes.dir" location="${luciddb.dir}/classes" />

  <property name="luciddb.test.dir" location="${luciddb.dir}/test" />
  <property name="luciddb.plugin.dir" location="${luciddb.dir}/plugin" />
  <property name="applib.dir" location="${open.dir}/extensions/applib" />
  <property name="mbean.dir" location="${luciddb.plugin.dir}/mbean" />

  <!-- directory in which catalog data is stored -->
  <property name="catalog.dir" location="${luciddb.dir}/catalog" />

  <!-- directory in which catalog XMI files are stored -->
  <property name="xmi.dir" location="${catalog.dir}/xmi" />

  <!-- jvs 2-Jun-2007:  delete this file and generate it instead -->
  <!-- should not have burned-in version info like this anywhere -->
  <!-- ks 26-May-2011:  burned-in version useful for dev, generated version -->
  <!-- necessary for releases. -->
  <condition property="release.properties.source.file"
    value="${luciddb.dir}/src/FarragoRelease.properties"
    else="${xmi.dir}/FarragoRelease.properties">
    <available file="${luciddb.dir}/src/FarragoRelease.properties" />
  </condition>
  <property name="release.properties.source"
    location="${release.properties.source.file}" />

  <!-- directory in which catalog data is backed up -->
  <property name="catalog.backup.dir" location="${catalog.dir}/backup" />

  <property name="trace.dir" location="${luciddb.dir}/trace" />

  <property name="LucidDbTrace.properties"
    location="${trace.dir}/LucidDbTrace.properties" />

  <property name="LucidDbTrace.log" location="${trace.dir}/LucidDbTrace.log" />

  <property name="LucidDbMdrBuildTrace.properties"
    location="${trace.dir}/LucidDbMdrBuildTrace.properties" />

  <property name="LucidDbMdrBuildTrace.log" location="${trace.dir}/LucidDbMdrBuildTrace.log" />

  <!-- default LucidDb catalog schema name -->
  <property name="luciddb.catalog.schema" value="luciddb"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${catalog.dir}" />
  <property name="project.catalog.schema" value="${luciddb.catalog.schema}" />
  <property name="project.trace.propfile" location="${LucidDbTrace.properties}" />

  <!-- directory for JUnit run output -->
  <property name="testlog.dir" location="${luciddb.dir}/testlog"/>

  <property name="testsrc.dir" location="${luciddb.test.dir}/sql"/>

  <property name="project.testlog.dir" location="${testlog.dir}" />

  <!-- Default build mode is "dev", in this mode load some specific sqls needed for running -->
  <!-- the automated test targets  -->
  <property name="build.mode" value="developer"/>

  <import file="${open.dir}/farrago/buildMacros.xml" />
  <import file="${luciddb.dir}/buildMacros.xml" />

   <!-- Template developer configuration file. -->
  <property name="FarragoConfTemplate.xmi"
    location="${farrago.xmi.dir}/FarragoConfTemplate.xmi"/>

  <!-- Developer configuration file generated from template. -->
  <property name="LucidDbConf.xmi"
    location="${xmi.dir}/LucidDbConf.xmi"/>

  <!-- Set to a path to enable Fennel JNI handle tracing during tests. -->
  <property name="trace.fennel.handles" value=""/>

  <property name="dist.dir"
    location="${luciddb.dir}/dist"/>

  <property name="emma.luciddb.classes.dir" location="${luciddb.dir}/classes-cov"/>

  <property name="coverage.dir" value="${luciddb.dir}/coverage"/>

  <if>
    <equals arg1="${osfamily}" arg2="unix"/>
    <then>
      <property name="lu.release.file" location="${dist.dir}/luciddb.tar.bz2"/>
    </then>
    <else>
      <property name="lu.release.file" location="${dist.dir}/luciddb.zip"/>
    </else>
  </if>

  <!-- Classpaths -->

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${classes.dir}"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${luciddb.plugin.dir}/luciddb-mbean.jar"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <!-- classpath for emma-instrumented running tests via ant -->
  <path id="emma.test.classpath">
    <pathelement path="${emma.luciddb.classes.dir}"/>
    <pathelement path="${emma.farrago.classes.dir}"/>
    <pathelement path="${emma.classpath}"/>
    <pathelement path="${test.classpath}"/>
  </path>
  <property name="emma.test.classpath" refid="emma.test.classpath"/>

  <path id="luciddb.build.classpath">
    <pathelement path="${test.classpath}"/>
    <pathelement location="${farrago.classes.dir}"/>
  </path>
  <property name="luciddb.build.classpath" refid="luciddb.build.classpath"/>

  <path id="mbean.build.classpath">
    <pathelement path="${mbean.dir}"/>
    <pathelement path="${farrago.classes.dir}"/>
    <pathelement path="${farrago.catalog.src.dir}"/>
    <pathelement path="${resgen.dir}/lib/eigenbase-resgen.jar"/>
    <pathelement path="${resgen.dir}/lib/eigenbase-xom.jar"/>
    <pathelement path="${mdrlibs.dir}/jmi.jar"/>
    <pathelement path="${jgrapht.dir}/jgrapht-jdk1.5.jar"/>
    <pathelement path="${openjava.dir}/openjava.jar"/>
  </path>
  <property name="mbean.build.classpath" refid="mbean.build.classpath"/>

  <path id="mbean.run.classpath">
    <pathelement path="${farrago.run.classpath}"/>
    <pathelement path="${mbean.dir}"/>
  </path>
  <property name="mbean.run.classpath" refid="mbean.run.classpath"/>

  <!-- LucidDb Defaults, can override in ${luciddb.dir}/customBuild.properties -->
  <property name="fennel.databaseInitSize" value="2000"/>
  <property name="fennel.tempInitSize" value="3000"/>
  <property name="fennel.checkpointInterval" value="0"/>
  <property name="fennel.cachePageSize" value="32768"/>
  <property name="fennel.cachePagesMax" value="5000"/>
  <property name="fennel.cachePagesInit" value="5000"/>
  <property name="fennel.groupCommitInterval" value="0"/>

  <target name="gen-bh-report">
    <xslt basedir="testlog" destdir="testlog" style="bh-html.xsl" includes="**/bh.xml" extension=".html"/>
    <xslt basedir="testlog" destdir="testlog" style="bh-xml.xsl" includes="**/bh.xml">
      <mapper type="regexp" from="^(.*)bh" to="\1/TEST-bh.xml" />
    </xslt>
    <!-- If test is failed, let it exit (i.e., BUILD FAILED) -->
    <length file="${luciddb.dir}/testlog/bh/bh.debug" property="bh.testres.filesize"/>
      <if>
        <equals arg1="${bh.testres.filesize}" arg2="0" />
          <then>
          </then>
      <else>
         <fail message="Some tests failed."/>
      </else>
      </if>
  </target>

  <target name="gen-bh-report-all">
    <xslt basedir="." destdir="testlog/bh" style="bh-html.xsl" includes="**/bh.xml" extension=".html"/>
    <xslt basedir="." destdir="testlog/bh" style="bh-xml.xsl" includes="**/bh.xml">
      <mapper type="regexp" from="^(.*)bh" to="\1/TEST-bh.xml" />
    </xslt>
  </target>

  <taskdef name="foreach" classname="net.sf.antcontrib.logic.ForEach" classpath="${ant.classpath}"/>
  <taskdef name="if" classname="net.sf.antcontrib.logic.IfTask" classpath="${ant.classpath}"/>

  <target name="gen-properties">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>
  </target>

  <target name="gen-all-sql" depends="gen-properties">
    <property name="target.name" value="gen-all-sql"/>
    <foreach param="target.file" target="call-subdir-target" inheritAll="true">
      <path>
        <fileset dir="${luciddb.dir}/test/sql">
          <include name="**/build.xml"/>
        </fileset>
      </path>
    </foreach>
  </target>

  <target name="call-subdir-target">
    <echo>
      This is the target.file: ${target.file}
    </echo>
    <dirname property="target.dir" file="${target.file}" />
    <ant dir="${target.dir}" antfile="${target.file}" target="${target.name}" inheritAll="false">
        <property name="open.dir" location="${open.dir}"/>
    </ant>
  </target>

  <!-- Nightly tests -->
  <target name="test-nightly-all-init" depends="cleanJars,createCatalog">
    <antcall target="clean-subdirs"/>
    <antcall target="gen-all-sql"/>
  </target>

  <!-- temporarily added target for nightly test -->
  <target name="test-nondb-concurrency" depends="gen-properties">
    <property name="bh.filter.runDuration" value="short,medium,null"/>
    <property name="foreign.db" value="nondb"/>
    <property name="bh.log.gtlf.env.ForeignDb" value="ldb-nondb"/>
    <property name="bh.log.basedir" value="${testlog.dir}/bh-nondb-concurrent"/>
    <property file="run.properties"/>
    <blackhawk.fork
      dir="${luciddb.dir}"
      basedir="${luciddb.dir}"
      testscript="test-nightly-nondb-concurrent.xml"
      classpathref="test.classpath"/>
  </target>
  <!-- end temporary target -->

  <target name="test-nondb" depends="gen-properties">
    <property name="bh.filter.runDuration" value="short,medium,null"/>
    <property name="foreign.db" value="nondb"/>
    <property name="bh.log.gtlf.env.ForeignDb" value="ldb-nondb"/>
    <property name="bh.log.basedir" value="${testlog.dir}/bh-nondb"/>
    <property file="run.properties"/>
    <blackhawk.fork
      dir="${luciddb.dir}"
      basedir="${luciddb.dir}"
      testscript="test-nightly-nondb.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="test-nondb-backupRestore" depends="gen-properties">
    <ant dir="${luciddb.dir}/test/sql/backupRestore" target="test" inheritAll="false">
      <property name="foreign.db" value="nondb"/>
      <property name="bh.log.gtlf.env.ForeignDb" value="ldb-nondb"/>
      <property name="testlog.dir" value="${testlog.dir}"/>
    </ant>
  </target>

  <target name="test-nondb-concurrency-backupRestore" depends="gen-properties">
    <ant dir="${luciddb.dir}/test/sql/concurrency/backupRestore"
       target="test" inheritAll="false">
      <property name="foreign.db" value="nondb"/>
      <property name="bh.log.gtlf.env.ForeignDb" value="ldb-nondb"/>
      <property name="testlog.dir" value="${testlog.dir}"/>
    </ant>
  </target>

  <target name="test-flatfile" depends="gen-properties">
    <property name="bh.filter.runDuration" value="short,medium,null"/>
    <property name="foreign.db" value="flatfile"/>
    <property name="bh.log.gtlf.env.ForeignDb" value="ldb-flatfile"/>
    <property name="bh.log.basedir" value="${testlog.dir}/bh-flatfile"/>
    <property file="run.properties"/>
    <blackhawk.fork
      dir="${luciddb.dir}"
      basedir="${luciddb.dir}"
      testscript="test-nightly-flatfile.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="test-oracle" depends="gen-properties">
    <property name="bh.filter.runDuration" value="short,medium,null"/>
    <property name="foreign.db" value="oracle"/>
    <property name="bh.log.gtlf.env.ForeignDb" value="ldb-oracle"/>
    <property name="bh.log.basedir" value="${testlog.dir}/bh-oracle"/>
    <property file="run.properties"/>
    <blackhawk.fork
      dir="${luciddb.dir}"
      basedir="${luciddb.dir}"
      testscript="test-nightly-oracle.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="test-sqlserver" depends="gen-properties">
    <property name="bh.filter.runDuration" value="short,medium,null"/>
    <property name="foreign.db" value="sqlserver"/>
    <property name="bh.log.gtlf.env.ForeignDb" value="ldb-sqlserver"/>
    <property name="bh.log.basedir" value="${testlog.dir}/bh-sqlserver"/>
    <property file="run.properties"/>
    <blackhawk.fork
      dir="${luciddb.dir}"
      basedir="${luciddb.dir}"
      testscript="test-nightly-sqlserver.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="test-csvjdbc" depends="gen-properties">
    <property name="bh.filter.runDuration" value="short,medium,null"/>
    <property name="foreign.db" value="csvjdbc"/>
    <property name="bh.log.gtlf.env.ForeignDb" value="ldb-csvjdbc"/>
    <property name="bh.log.basedir" value="${testlog.dir}/bh-csvjdbc"/>
    <property file="run.properties"/>
    <blackhawk.fork
      dir="${luciddb.dir}"
      basedir="${luciddb.dir}"
      testscript="test-nightly-csvjdbc.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="clean-subdirs">
    <property name="target.name" value="clean"/>
    <foreach param="target.file" target="call-subdir-target" inheritAll="true">
      <fileset dir="${luciddb.dir}/test/sql">
        <include name="**/build.xml"/>
      </fileset>
    </foreach>
  </target>

  <target name="test-long">
    <property name="bh.filter.runDuration" value="long"/>
    <property name="bh.log.basedir" value="${testlog.dir}/bh-long"/>
    <property file="run.properties"/>
    <blackhawk.fork
      dir="${luciddb.dir}"
      basedir="${luciddb.dir}"
      testscript="test-long.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="test-all" depends="cleanJars,createCatalog,gen-all-sql">
    <property name="bh.log.basedir" value="${testlog.dir}/bh"/>
    <property file="run.properties"/>
    <blackhawk.fork
      dir="${luciddb.dir}"
      basedir="${luciddb.dir}"
      testscript="test-all.xml"
      classpathref="test.classpath"
      fail.on.error="false"/>
    <antcall target="gen-bh-report"/>
  </target>

  <!-- ************** test ****************** 
  Split 'test' to 'test-only' and 'test-only-setup' so Emma can plugin a instr.
  -->

  <target name="test" depends="test-only-setup,test-only">
  </target>

  <target name="test-only-setup" depends="cleanJars,createCatalog,gen-all-sql">
  </target>

  <target name="test-only">
    <property name="bh.log.gtlf.env.ForeignDb" value="ldb-sanity"/>
    <property name="bh.filter.knownFailures" value="false,null"/>
    <property file="run.properties"/>
    <property name="bh.log.basedir" value="${testlog.dir}/bh"/>
    <blackhawk.fork
      dir="${luciddb.dir}"
      basedir="${luciddb.dir}"
      testscript="test.xml"
      classpathref="test.classpath"
      fail.on.error="false"/>
    <antcall target="gen-bh-report"/>

  </target>

  <!-- ************** Emma ****************** 
  -->

  <target name="emmaTest" depends="cleanJars,createCatalog,gen-all-sql">
    <property name="bh.filter.knownFailures" value="false,null"/>
    <property file="run.properties"/>
    <property name="bh.log.basedir" value="${testlog.dir}/bh"/>
    <blackhawk.fork
      dir="${luciddb.dir}"
      basedir="${luciddb.dir}"
      testscript="test.xml"
      classpathref="emma.test.classpath"
      fail.on.error="false"/>
    <antcall target="gen-bh-report"/>
  </target>

  <target name="bhShortregSanity">
    <blackhawk.fork
      dir="${luciddb.dir}"
      basedir="${luciddb.dir}/test/sql/shortreg"
      testscript="test.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="emmaBh">
    <blackhawk.fork
      dir="${luciddb.dir}"
      basedir="${luciddb.dir}/test/sql/shortreg"
      testscript="test.xml"
      classpathref="emma.test.classpath"/>
  </target>


  <target name="compile" depends="clean,makeOutputDirs">
    <!-- compile farrago first -->
    <ant dir="${farrago.dir}" target="compile"/>
    <farrago.javaCompile
      deprecation="off"
      srcdir="${luciddb.test.dir}/src"
      destdir="${classes.dir}"
      classpathref="luciddb.build.classpath">
      <include name="**/*.java" />
      <exclude name="**/mbean/**/*.java"/>
    </farrago.javaCompile>
    <antcall target="copyApplibPlugin"/>
    <antcall target="buildMBeanPlugin"/>
    <antcall target="buildClientJar"/>
    <farrago.javaCompile
      deprecation="off"
      srcdir="${luciddb.test.dir}/src"
      destdir="${classes.dir}"
      classpathref="luciddb.build.classpath">
      <include name="**/mbean/**/*.java"/>
    </farrago.javaCompile>
  </target>

  <!-- creates catalog and populates with initial metadata -->
  <target name="createCatalog" depends="compile">
    <antcall target="makeOutputDirs"/>
    <antcall target="configureTrace"/>
    <antcall target="copyFarragoCatalog"/>
    <antcall target="importConfig"/>
    <antcall target="populateCatalog"/>
    <!-- runFarragoInitSql needs FarragoMedJdbc.jar in luciddb plugin dir-->
    <copy todir="${luciddb.plugin.dir}" file="${farrago.plugin.dir}/FarragoMedJdbc.jar"/>
    <antcall target="runFarragoInitSql"/>
    <antcall target="runLuciddbInitSql"/>
    <antcall target="backupCatalog"/>
    <antcall target="createCatalogScript"/>
    <antcall target="copyFennelFiles"/>
  </target>

  <target name="clean" depends="clean-dist">
    <antcall target="cleanTestLogs"/>
    <antcall target="cleanJars"/>
    <delete quiet="true">
      <fileset dir="${classes.dir}" includes="**/*.class"/>
    </delete>

    <!-- call clean target in sub dirs -->
    <ant dir="test/sql/backupRestore" target="clean"/>
    <ant dir="test/sql/bench" target="clean"/>    
    <ant dir="test/sql/calc" target="clean"/>
    <ant dir="test/sql/company" target="clean"/>
    <ant dir="test/sql/compositekey" target="clean"/>
    <ant dir="test/sql/concurrency" target="clean"/>
    <ant dir="test/sql/constraints" target="clean"/>
    <ant dir="test/sql/conv_types" target="clean"/>
    <ant dir="test/sql/datatypes" target="clean"/>
    <ant dir="test/sql/distribution" target="clean"/>
    <ant dir="test/sql/dml/delete" target="clean"/>
    <ant dir="test/sql/dml/merge" target="clean"/>
    <ant dir="test/sql/flatfile-specific" target="clean"/>
    <ant dir="test/sql/hashjoin" target="clean"/>
    <ant dir="test/sql/mbean" target="clean"/>
    <ant dir="test/sql/mondrian" target="clean"/>
    <ant dir="test/sql/numerics" target="clean"/>
    <ant dir="test/sql/oracle-specific" target="clean"/>
    <ant dir="test/sql/setops" target="clean"/>
    <ant dir="test/sql/shortreg" target="clean"/>
    <ant dir="test/sql/sqbm" target="clean"/>
    <ant dir="test/sql/sqlserver-specific" target="clean"/>
    <ant dir="test/sql/sys" target="clean"/>
    <ant dir="test/sql/tpch" target="clean"/>
    <ant dir="test/sql/ssb" target="clean"/>
    <ant dir="test/sql/txn" target="clean"/>
    <ant dir="test/sql/udr/udf" target="clean"/>
    <ant dir="test/sql/udr/udp" target="clean"/>
    <ant dir="test/sql/udr/udx" target="clean"/>
    <ant dir="test/sql/VI" target="clean"/>

    <delete file="run.properties"/>
  </target>

  <!-- Copies the Farrago unconfigured catalog to our catalog directory. -->
  <!-- Also copies Fennel resources to catalog/fennel. -->
  <target name="copyFarragoCatalog">
    <copy 
        todir="${catalog.dir}"
        file="${farrago.ReposStorage.propfile}"
        overwrite="true">
      <filterchain>
        <tokenfilter>
          <replacestring
            from="jdbc:mysql://localhost:3306/${farrago.catalog.schema}"
            to="jdbc:mysql://localhost:3306/${project.catalog.schema}"/>
          <replacestring
            from="jdbc:postgresql://localhost/${farrago.catalog.schema}"
            to="jdbc:postgresql://localhost/${project.catalog.schema}"/>
          <replaceregex
            pattern="(net\.sf\.farrago\.dev\.[^=]+)=(.*)${farrago.catalog.schema}(.*)"
            replace="\1=\2${project.catalog.schema}\3"/>
        </tokenfilter>
      </filterchain>
    </copy>

    <antcall target="cleanCatalogData"/>

    <farrago.restoreCatalog
      catalogDir="${catalog.dir}"
      backupDir="${farrago.catalog.unconfigured.dir}" 
      catalogOnly="true"/>      

    <mkdir dir="${catalog.dir}/fennel"/>
    <copy todir="${catalog.dir}/fennel" overwrite="true">
      <fileset dir="${farrago.catalog.dir}/fennel" includes="*.properties" />
    </copy>

    <farrago.setReposProvider/>

    <ac:if xmlns:ac="antlib:net.sf.antcontrib">
      <equals arg1="${farrago.enki.provider}" arg2="ENKI_HIBERNATE"/>
      <then>
        <copy 
            file="${farrago.catalog.dir}/templates/EnkiEhCache.xml"
            tofile="${classes.dir}/FarragoEhCache.xml"/>
      </then>
    </ac:if>
  </target>

  <!-- set up the default trace configuration file -->
  <target name="configureTrace">
    <mkdir dir="${trace.dir}"/>
    <farrago.configureTrace
      propFile="${LucidDbTrace.properties}" logFile="${LucidDbTrace.log}"/>
    <farrago.configureTrace
      propFile="${LucidDbMdrBuildTrace.properties}" logFile="${LucidDbMdrBuildTrace.log}"/>
  </target>

  <!-- delete catalog data only -->
  <target name="cleanCatalogData">
    <mkdir dir="${catalog.dir}"/>
    <farrago.cleanCatalog catalogDir="${catalog.dir}" dropStorage="true"/>
  </target>

  <!-- generate developer configuration file and import it -->
  <target name="importConfig">
    <mkdir dir="${xmi.dir}"/>
    <copy file="${FarragoConfTemplate.xmi}"
      tofile="${LucidDbConf.xmi}" overwrite="true"/>
    <replace file="${LucidDbConf.xmi}">
      <replacefilter token="@databaseInitSize@" value="${fennel.databaseInitSize}"/>
      <replacefilter token="@tempInitSize@" value="${fennel.tempInitSize}"/>
      <replacefilter token="@checkpointInterval@" value="${fennel.checkpointInterval}"/>
      <replacefilter token="@cachePageSize@" value="${fennel.cachePageSize}"/>
      <replacefilter token="@cachePagesMax@" value="${fennel.cachePagesMax}"/>
      <replacefilter token="@cachePagesInit@" value="${fennel.cachePagesInit}"/>
      <replacefilter token="@groupCommitInterval@" value="${fennel.groupCommitInterval}"/>
      <replacefilter token="@fennel.disabled@" value="${fennel.disabled}"/>
      <replacefilter token="@resourceDir@" value="$${FARRAGO_HOME}/catalog/fennel"/>
      <replacefilter token="@jniHandleTraceFile@" value="${trace.fennel.handles}"/>
      <replacefilter token="@calcVirtualMachine@" value="CALCVM_JAVA"/>
    </replace>
    <farrago.mdrFork target="forked_importConfig"/>
  </target>

  <target name="forked_importConfig" depends="farrago.mdr_taskdef">
    <mdr 
        propertiesFile="${catalog.dir}/ReposStorage.properties"
        logConfigFile="${LucidDbMdrBuildTrace.properties}">
      <propertyset>
        <propertyref name="FARRAGO_CATALOG_DIR"/>
      </propertyset>
      <importXMI
        file="${LucidDbConf.xmi}"
        extent="FarragoCatalog"/>
    </mdr>
  </target>

  <!-- back up the current catalog contents -->
  <target name="backupCatalog">
    <farrago.backupCatalog
      catalogDir="${catalog.dir}" backupDir="${catalog.backup.dir}"
      includeTempDataFile="true" />
  </target>

  <!-- restore catalog from backup -->
  <target name="restoreCatalog" depends="cleanCatalogData">
    <farrago.restoreCatalog
      catalogDir="${catalog.dir}" backupDir="${catalog.backup.dir}"/>
  </target>

  <!-- write initial metadata to catalog -->
  <target name="populateCatalog">
    <java fork="yes" failonerror="true"
      classpathref="farrago.run.classpath"
      classname="net.sf.farrago.db.FarragoDatabase">
      <jvmarg line="${assertions.jvmarg}"/>
      <jvmarg line="&FarragoProps;"/>
    </java>
  </target>

  <!-- create various output directories -->
  <target name="makeOutputDirs">
    <mkdir dir="${classes.dir}"/>
    <mkdir dir="${testlog.dir}"/>
    <copy todir="${classes.dir}" file="${release.properties.source}"
      overwrite="true"/>
    <!--
         Set jdbc.url.port.default in customBuild.properties to
         override JDBC listener port.
    -->
    <farrago.configureReleaseProperties
        file="${classes.dir}/FarragoRelease.properties"/>
  </target>

  <target name="makePluginDirs">
    <mkdir dir="${luciddb.plugin.dir}"/>
    <mkdir dir="${luciddb.plugin.dir}/mbean"/>
  </target>

  <!-- task for generating resources -->
  <taskdef name="resgen" classname="org.eigenbase.resgen.ResourceGenTask">
    <classpath refid="mbean.run.classpath"/>
  </taskdef>

  <target name="runFarragoInitSql">
    <pathconvert property="farrago.initsql.prop"
      refid="farrago.filelist.initsql" pathsep="${line.separator}"
      dirsep="${file.separator}" />
    <farrago.runSqlTest file="${farrago.initsql.prop}"/>
  </target>

  <!-- create plugin/LucidDbClient.jar -->
  <target name="buildClientJar" depends="makePluginDirs">
    <delete file="${luciddb.plugin.dir}/LucidDbClient.jar" />
    <fileset id="farrago_classes" dir="${farrago.classes.dir}">
      <include
        name="org/luciddb/jdbc/LucidDbClientDriver.class"/>
      <include
        name="org/luciddb/jdbc/LucidDbRmiDriver.class"/>
      <include
        name="org/luciddb/test/LucidDbTestCleanup.class"/>
      <include
        name="net/sf/farrago/jdbc/client/FarragoVjdbcClientDriver.class"/>
      <include
        name="net/sf/farrago/jdbc/client/FarragoVjdbcHttpClientDriver.class"/>
      <include
        name="net/sf/farrago/jdbc/client/FarragoUnregisteredVjdbcClientDriver.class"/>
      <include
        name="net/sf/farrago/jdbc/client/FarragoUnregisteredVjdbcHttpClientDriver.class"/>
      <include
        name="net/sf/farrago/jdbc/FarragoAbstractJdbcDriver.class"/>
      <include
        name="net/sf/farrago/jdbc/FarragoJdbcUtil*.class"/>
      <include
        name="net/sf/farrago/release/*"/>
      <include
        name="org/eigenbase/sql/validate/SqlValidatorException.class"/>
      <include
        name="org/eigenbase/util/EigenbaseContextException.class"/>
      <include
        name="org/eigenbase/util/EigenbaseException.class"/>
      <include
        name="org/eigenbase/util/property/*"/>
      <include
        name="org/eigenbase/util14/ConnectStringParser.class"/>
      <include
        name="org/eigenbase/util14/EigenbaseValidatorException.class"/>
    </fileset>

    <jar jarfile="${luciddb.plugin.dir}/LucidDbClient.jar"
      filesetmanifest="skip">
      <zipgroupfileset dir="${vjdbc.dir}/lib">
        <include name="vjdbc.jar"/>
        <include name="commons-logging-1.1.jar"/>
      </zipgroupfileset>
      <fileset dir="${luciddb.dir}/license/client">
        <include name="COPYING"/>
      </fileset>
      <fileset dir="${luciddb.dir}/classes">
        <include name="FarragoRelease.properties"/>
      </fileset>
      <fileset refid="farrago_classes" />
    </jar>
    <!-- Build a minimal job that does not include commons logging -->
    <jar jarfile="${luciddb.plugin.dir}/LucidDbClient-minimal.jar"
      filesetmanifest="skip">
      <zipgroupfileset dir="${vjdbc.dir}/lib">
        <include name="vjdbc.jar"/>
      </zipgroupfileset>
      <fileset dir="${luciddb.dir}/license/client">
        <include name="COPYING"/>
      </fileset>
      <fileset dir="${luciddb.dir}/classes">
        <include name="FarragoRelease.properties"/>
      </fileset>
      <fileset refid="farrago_classes" />
    </jar>
  </target>

  <!-- copy applib plugin jar from extensions -->
  <target name="copyApplibPlugin">
    <copy file="${applib.dir}/plugin/eigenbase-applib.jar"
      todir="${luciddb.plugin.dir}"/>
  </target>

  <!-- create mbean plugin jar -->
  <target name="buildMBeanPlugin"
    depends="makePluginDirs,checkMBeanPluginUptodate"
    unless="plugin.mbean.uptodate">
    <antcall target="generateMBeanResource"/>
    <farrago.javaCompile
      deprecation="off"
      srcdir="${luciddb.dir}/src"
      destdir="${mbean.dir}"
      classpathref="mbean.build.classpath">
      <include name="**/mbean/**/*.java"/>
    </farrago.javaCompile>
    <jar jarfile="${luciddb.plugin.dir}/luciddb-mbean.jar">
      <fileset dir="${mbean.dir}">
        <include name="**/mbean/**/*"/>
      </fileset>
      <fileset dir="${farrago.classes.dir}">
        <include name="com/lucidera/jdbc/LucidDbLocalDriver.class"/>
      </fileset>
    </jar>
  </target>

  <target name="generateMBeanResource">
    <resgen
      srcdir="${luciddb.dir}/src"
      destdir="${luciddb.dir}/src"
      resdir="${mbean.dir}"
      style="functor"
      locales="en_US">
      <include name="com/lucidera/luciddb/mbean/resource/MBeanQuery.xml"/>
    </resgen>
  </target>

  <target name="checkMBeanPluginUptodate">
    <uptodate property="plugin.mbean.uptodate"
      targetfile="${luciddb.plugin.dir}/luciddb-mbean.jar">
      <srcfiles dir="${luciddb.dir}/src">
        <include name="**/mbean/**/*.java"/>
        <include name="**/mbean/**/*.xml"/>
      </srcfiles>
    </uptodate>
  </target>

  <target name="convertInitSqlScripts">
    <if> <equals arg1="${os.name}" arg2="Linux"/>
      <then>
        <copy file="${luciddb.initsql.dir}/setDeviceSchedulerType.sql.tmpl"
          tofile="${luciddb.initsql.dir}/setDeviceSchedulerType.sql"
          overwrite="true">
          <filterset>
            <filter token="SCHEDULER_TYPE" value="aioLinux"/>
          </filterset>
        </copy>
        <copy file="${luciddb.initsql.dir}/setDeviceSchedulerType.ref.tmpl"
          tofile="${luciddb.initsql.dir}/setDeviceSchedulerType.ref"
          overwrite="true">
          <filterset>
            <filter token="SCHEDULER_TYPE" value="aioLinux"/>
          </filterset>
        </copy>
      </then>
    </if>
  </target>

  <target name="runLuciddbInitSql" depends="convertInitSqlScripts">
    <pathconvert property="luciddb.initsql.prop"
      refid="luciddb.filelist.initsql" pathsep="${line.separator}"
      dirsep="${file.separator}" />
    <luciddb.runSqlTests filelist="${luciddb.initsql.prop}"
      sqltest.classpath="${test.classpath}"/>
  </target>

  <!-- REVIEW jvs 4-June-2006:  Should probably blow away plugin/*.jar -->
  <target name="cleanJars">
    <delete dir="${luciddb.plugin.dir}"/>
  </target>

<!--     <antcall target="cleanClientJar"/> -->
<!--     <antcall target="cleanMBean"/> -->
<!--     <antcall target="cleanJdbcPlugins"/> -->

  <target name="cleanJdbcPlugins">
    <delete file="${luciddb.plugin.dir}/FarragoMedJdbc3p.jar" quiet="true"/>
    <delete file="${luciddb.plugin.dir}/FarragoMedJdbc.jar" quiet="true"/>
  </target>

  <target name="cleanClientJar">
    <delete file="${luciddb.plugin.dir}/LucidDbClient.jar" quiet="true"/>
  </target>

  <target name="cleanMBean">
    <delete dir="${mbean.dir}" quiet="true"/>
    <delete quiet="true">
      <fileset dir="${luciddb.dir}/src">
        <include name="**/MBeanQuery.java"/>
        <include name="**/MBeanQuery_en_US.java"/>
      </fileset>
    </delete>
    <delete file="${luciddb.plugin.dir}/luciddb-mbean.jar" quiet="true"/>
  </target>

  <target name="shortreg" depends="compile" >
    <filelist dir="${testsrc.dir}/shortreg" id="filelist.shortregsql"
      files="creschema.sql,locationload.sql,deptload.sql,empload.sql,
        customersload.sql,productsload.sql,salesload.sql,joinEq.sql"/>
    <pathconvert property="filelist.shortregsql" refid="filelist.shortregsql"
      pathsep="${line.separator}" dirsep="${file.separator}" />
    <luciddb.runSqlTests filelist="${filelist.shortregsql}"
            sqltest.classpath="${test.classpath}"/>
  </target>


  <target name="emmaShortreg">
    <filelist dir="${testsrc.dir}/shortreg" id="filelist.shortregsql"
      files="creschema.sql,locationload.sql,deptload.sql,empload.sql,
        customersload.sql,productsload.sql,salesload.sql,joinEq.sql"/>
    <pathconvert property="filelist.shortregsql" refid="filelist.shortregsql"
      pathsep="${line.separator}" dirsep="${file.separator}" />
    <luciddb.runSqlTests filelist="${filelist.shortregsql}"
            sqltest.classpath="${emma.test.classpath}"/>
  </target>

  <target name="txn">
    <filelist dir="${testsrc.dir}/txn" id="filelist.txnsql"
      files="negative.sql,rollback.sql"/>
    <pathconvert property="filelist.txnsql" refid="filelist.txnsql"
      pathsep="${line.separator}" dirsep="${file.separator}" />
    <luciddb.runSqlTests filelist="${filelist.txnsql}"
            sqltest.classpath="${test.classpath}"/>
  </target>

  <target name="emmaTxn">
    <filelist dir="${testsrc.dir}/txn" id="filelist.txnsql"
      files="negative.sql,rollback.sql"/>
    <pathconvert property="filelist.txnsql" refid="filelist.txnsql"
      pathsep="${line.separator}" dirsep="${file.separator}" />
    <luciddb.runSqlTests filelist="${filelist.txnsql}"
            sqltest.classpath="${emma.test.classpath}"/>
  </target>

  <!-- Extra Short Regression -->
  <target name="shortregSanity" depends="createCatalog">
    <filelist dir="${testsrc.dir}/shortreg" id="filelist.shortregsql"
      files="creschema.sql,locationload.sql,deptload.sql,empload.sql,
        customersload.sql,productsload.sql,salesload.sql,joinEqSanity.sql"/>
    <pathconvert property="filelist.shortregsql" refid="filelist.shortregsql"
      pathsep="${line.separator}" dirsep="${file.separator}" />
    <luciddb.runSqlTests filelist="${filelist.shortregsql}"
      sqltest.classpath="${test.classpath}"/>
  </target>

  <!-- Extra Short Regression -->
  <target name="emmaShortregSanity" depends="createCatalog">
    <filelist dir="${testsrc.dir}/shortreg" id="filelist.shortregsql"
      files="creschema.sql,locationload.sql,deptload.sql,empload.sql,
        customersload.sql,productsload.sql,salesload.sql,joinEqSanity.sql"/>
    <pathconvert property="filelist.shortregsql" refid="filelist.shortregsql"
      pathsep="${line.separator}" dirsep="${file.separator}" />
    <luciddb.runSqlTests filelist="${filelist.shortregsql}"
      sqltest.classpath="${emma.test.classpath}"/>
  </target>

  <target name="cleanTestLogs">
    <delete includeEmptyDirs="true" quiet="true">
      <fileset dir="${testlog.dir}" includes="*.xml"/>
      <fileset dir="${testlog.dir}" includes="*.txt"/>
      <fileset dir="${testlog.dir}/bh"/>
      <fileset dir="${testsrc.dir}" includes="**/*.log"/>
      <fileset dir="${testsrc.dir}" includes="**/*.dif"/>
    </delete>
    <delete quiet="true" file="${LucidDbTrace.log}"/>
  </target>

  <available file="${farrago.dir}/classes-cov/com" property="farrago.classes-cov.exists"/>

  <target name="cov" if="farrago.classes-cov.exists">
    <antcall target="emmaClean"/>
    <antcall target="emmaInstr"/>
    <antcall target="emmaTest"/>
    <antcall target="emmaReport"/>
  </target>

  <target name="covAll" if="farrago.classes-cov.exists">
    <antcall target="emmaClean"/>
    <antcall target="emmaInstr"/>
    <antcall target="emmaTest"/>
    <antcall target="emmaShortreg"/>
    <antcall target="emmaReport"/>
  </target>

  <target name="emmaClean">
    <delete dir="${emma.luciddb.classes.dir}" quiet="true"/>
    <delete quiet="true">
        <fileset dir="${luciddb.dir}" includes="coverage.*"/>
        <fileset dir="${coverage.dir}"/>
    </delete>
    <mkdir dir="${coverage.dir}"/>
    <mkdir dir="${emma.luciddb.classes.dir}"/>
  </target>

  <target name="emmaInstr" depends="emmaClean">
    <emma verbosity="verbose">
      <instr
        mode="copy"
        outdir="${emma.luciddb.classes.dir}"
        metadatafile="${luciddb.dir}/coverage.em"
        instrpath="${classes.dir}">
        <filter excludes="*_Stub*"/>
      </instr>
    </emma>
  </target>

  <target name="emmaTest.old" depends="emmaInstr">
    <antcall target="emmaShortregSanity"/>
    <antcall target="emmaTxn"/>
    <antcall target="emmaBh" />
  </target>

  <target name="emmaReport">
    <emma verbosity="verbose">
      <report sourcepath="${luciddb.test.dir}/src,${farrago.src.dir}">
        <infileset dir="${luciddb.dir}" includes="*.em, *.ec"/>

        <html outfile="${coverage.dir}/coverage.html"/>
        <xml outfile="${coverage.dir}/coverage.xml"/>
        <txt outfile="${coverage.dir}/coverage.txt"/>
      </report>
    </emma>
  </target>

  <!-- Experimental Area: Let's see about creating fine-grained tests with dependencies specified -->

  <macrodef name="xrunSqlTests">
    <attribute name="filelist" default="unspecified"/>
    <sequential>
      <junit printsummary="yes" fork="yes" forkmode="perBatch" haltonerror="no" haltonfailure="no"
        tempdir="${testlog.dir}">
        <classpath refid="test.classpath"/>
        <jvmarg line="${assertions.jvmarg}"/>
        <jvmarg line="&FarragoSqlLineProps;"/>
        <sysproperty key="net.sf.farrago.fileset.unitsql"
          value="@{filelist}"/>
        <formatter type="plain"/>
        <formatter type="xml"/> <!-- for integration builds -->
        <test todir="${testlog.dir}"
          name="com.lucidera.luciddb.test.LucidDbSqlTest" />
      </junit>
    </sequential>
  </macrodef>

  <target name="x">
    <filelist dir="${testsrc.dir}/shortreg" id="filelist.shortregsql"
      files="creschema.sql,locationload.sql,deptload.sql,empload.sql,
        customersload.sql,productsload.sql,salesload.sql,${testfile}"/>
    <pathconvert property="filelist.shortregsql" refid="filelist.shortregsql"
      pathsep="${line.separator}" dirsep="${file.separator}" />
    <xrunSqlTests filelist="${filelist.shortregsql}"/>
  </target>

  <!-- generic ant target that is parameterized by sql file -->
  <target name="run-sql-test">
    <echo>
      sql.files is ${sql.files}
    </echo>
    <junit printsummary="yes" fork="yes" haltonerror="yes" haltonfailure="yes"
      tempdir="${testlog.dir}">
      <classpath refid="test.classpath"/>
      <jvmarg line="${assertions.jvmarg}"/>
      <jvmarg line="&FarragoSqlLineProps;"/>
      <sysproperty key="net.sf.farrago.fileset.unitsql"
        value="${sql.files}"/>
      <formatter type="plain"/>
      <formatter type="xml"/> <!-- for integration builds -->
      <test todir="${testlog.dir}" name="com.lucidera.luciddb.test.LucidDbSqlTest" />
    </junit>
  </target>

  <!-- joinEqSanity test - Basic equi-join tests -->
  <target name="test-join-eq-sanity" depends="test-setup">
    <antcall target="run-sql-test">
      <param name="sql.files" value="${testsrc.dir}/shortreg/joinEqSanity.sql"/>
    </antcall>
  </target>

  <!-- joinEqSanity test - Basic equi-join tests -->
  <target name="test-join-eq" depends="test-setup">
    <antcall target="run-sql-test">
      <param name="sql.files" value="${testlog.dir}/shortreg/joinEq.sql"/>
    </antcall>
  </target>

  <!-- joinRng test - Range join tests. -->
  <target name="test-join-rng" depends="test-setup">
    <antcall target="run-sql-test">
      <param name="sql.files" value="${testsrc.log}/shortreg/joinRng.sql"/>
    </antcall>
  </target>

  <target name="test-setup" depends="createCatalog,gen-properties">
    <filelist dir="${testsrc.log}/shortreg" id="filelist.setup"
      files="creschema.sql,locationload.sql,deptload.sql,empload.sql,
        customersload.sql,productsload.sql,salesload.sql"/>
    <pathconvert property="filelist.setup" refid="filelist.setup"
      pathsep="${line.separator}" dirsep="${file.separator}" />
    <antcall target="run-sql-test">
      <param name="sql.files" value="${filelist.setup}"/>
    </antcall>
  </target>

  <target name="dist" depends="clean-dist">
    <property file="${release.properties.source}" />

    <condition property="lucidera.release.spec"
      value="${package.name}-${product.version.major}.${product.version.minor}.${product.version.point}"
      else="${package.name}-${product.version.major}.${product.version.minor}.${product.version.point}.${product.build.number}">
      <or>
        <equals arg1="${product.build.number}" arg2="0"/>
        <equals arg1="${product.build.number}" arg2="$${product.build.number}"/>
      </or>
    </condition>

    <property name="release.lib.dir"
      location="${dist.dir}/${lucidera.release.spec}/lib"/>
    <property name="lib.farrago.jar" 
      location="${release.lib.dir}/farrago.jar"/>
    <property name="release.plugin.dir"
      location="${dist.dir}/${lucidera.release.spec}/plugin"/>
    <property name="release.bin.dir"
      location="${dist.dir}/${lucidera.release.spec}/bin"/>
    <property name="release.install.dir"
      location="${dist.dir}/${lucidera.release.spec}/install"/>
    <property name="release.catalog.dir"
      location="${dist.dir}/${lucidera.release.spec}/catalog"/>
    <property name="release.properties.target"
      location="${release.lib.dir}/FarragoRelease.properties"/>

    <ant target="dist-dir-luciddb" inheritAll="false">
      <property name="dist.dir" value="${dist.dir}"/>
      <property name="lucidera.release.spec" value="${lucidera.release.spec}"/>
    </ant>
  
  	<!-- Remove RmiJdbc stuff 
	TODO: As soon as LDB-158 is resolved, we can remove this
	-->
  	<delete>
  	    <fileset dir="${dist.dir}/${lucidera.release.spec}/lib" includes="RmiJdbc*"/>
  	</delete>

    <delete dir="${dist.dir}/${lucidera.release.spec}/catalog" quiet="true"/>
    <mkdir dir="${dist.dir}/${lucidera.release.spec}/catalog"/>
    <copy todir="${dist.dir}/${lucidera.release.spec}/catalog"
      file="${farrago.ReposStorage.propfile}">
      <fileset dir="${catalog.backup.dir}">
        <exclude name="temp.dat"/>
      </fileset>
    </copy>
    <copy todir="${release.plugin.dir}">
      <fileset dir="${luciddb.plugin.dir}">
        <exclude name="applib/**"/>
        <exclude name="mbean/**"/>
      </fileset>
    </copy>
    <copy todir="${dist.dir}/${lucidera.release.spec}/examples">
      <fileset dir="${luciddb.dir}/examples"/>
    </copy>
    <copy todir="${dist.dir}/${lucidera.release.spec}/ext">
      <fileset dir="${luciddb.dir}/ext"/>
    </copy>
    <copy 
      file="${luciddb.dir}/license/README" 
      tofile="${dist.dir}/${lucidera.release.spec}/README"
      force="true" overwrite="true" />

    <copy todir="${release.install.dir}" overwrite="true"
      file="${luciddb.dir}/initsql/catalog.sql"/>

    <copy file="${release.properties.source}"
      todir="${release.lib.dir}" overwrite="true"/>
    <chmod file="${release.properties.target}" perm="u+w" />
    <touch file="${release.properties.target}"/>

    <copy todir="${release.catalog.dir}/fennel" overwrite="true">
      <fileset dir="${luciddb.dir}/catalog/fennel" includes="*.properties"/>
    </copy>

    <war destfile="${dist.dir}/${lucidera.release.spec}/lib/vjdbc_servlet.war"
      update="true">
      <webinf dir="${luciddb.dir}/ext/vjdbc">
        <include name="vjdbc-config.xml"/>
      </webinf>
    </war>

    <if>
        <equals arg1="${osfamily}" arg2="unix"/>
      <then>
        <property name="sqllineClient" value="sqllineClient"/>
        <property name="sqllineEngine" value="sqllineEngine"/>
        <property name="farragoServer" value="farragoServer"/>
        <property name="lucidDbServer" value="lucidDbServer"/>
        <property name="installSh" value="install.sh"/>
      </then>
      <else>
        <property name="sqllineClient" value="sqllineClient.bat"/>
        <property name="sqllineEngine" value="sqllineEngine.bat"/>
        <property name="farragoServer" value="farragoServer.bat"/>
        <property name="lucidDbServer" value="lucidDbServer.bat"/>
        <property name="installSh" value="install.bat"/>
      </else>
    </if>

    <chmod file="${release.install.dir}/${installSh}" perm="u+x" />

    <replace file="${release.bin.dir}/${sqllineClient}">
        <replacefilter token="jdbc:farrago:http://localhost"
        value="jdbc:luciddb:http://localhost"/>
        <replacefilter
        token="net.sf.farrago.jdbc.client.FarragoVjdbcHttpClientDriver"
        value="org.luciddb.jdbc.LucidDbClientDriver"/>
        <replacefilter token="guest" value="sa"/>
    </replace>
    <chmod file="${release.bin.dir}/${sqllineClient}" perm="u+x" />

    <move file="${release.bin.dir}/${farragoServer}"
      tofile="${release.bin.dir}/${lucidDbServer}"/>
    <replace file="${release.bin.dir}/${lucidDbServer}">
        <replacefilter token="net.sf.farrago.server.FarragoVjdbcServer"
        value="org.luciddb.session.LucidDbServer"/>
    </replace>
    <chmod file="${release.bin.dir}/${lucidDbServer}" perm="u+x" />

    <replace file="${release.bin.dir}/${sqllineEngine}">
        <replacefilter token="jdbc:farrago:" value="jdbc:luciddb:"/>
        <replacefilter
        token="net.sf.farrago.jdbc.engine.FarragoJdbcEngineDriver"
        value="org.luciddb.jdbc.LucidDbLocalDriver"/>
        <replacefilter token="guest" value="sa"/>
    </replace>
    <chmod file="${release.bin.dir}/${sqllineEngine}" perm="u+x" />

    <if>
      <and>
        <equals arg1="${osfamily}" arg2="unix"/>
        <not>
          <os family="mac"/>
        </not>
      </and>
      <then>
        <copy 
          file="${luciddb.dir}/allocFile" 
          todir="${release.bin.dir}"
          overwrite="true" />
        <chmod file="${release.bin.dir}/allocFile" perm="u+x" />
        <copy 
          file="${luciddb.dir}/lucidDbAllocFile" 
          todir="${release.bin.dir}"
          overwrite="true" />
        <chmod file="${release.bin.dir}/lucidDbAllocFile" perm="u+x" />
      </then>
    </if>

    <!-- we don't use the release.gpl flag any more. This block is for non-gpl
    <if>
      <not>
        <istrue value="${release.gpl}"/>
      </not>
      <then>
        <property name="jar.tmp.dir" location="${dist.dir}/farrago.jar.tmp.dir"/>

        <unjar src="${lib.farrago.jar}" dest="${jar.tmp.dir}" />

        <delete file="${lib.farrago.jar}"/>
        <jar update="true"
          destfile="${lib.farrago.jar}"
          basedir="${jar.tmp.dir}"
          keepcompression="true"/>

        <delete dir="${jar.tmp.dir}" quiet="true"/>
      </then>
    </if>
    -->

    <jar update="true"
      destfile="${lib.farrago.jar}"
      basedir="${release.lib.dir}"
      keepcompression="true"
      includes="FarragoRelease.properties"/>
    <delete file="${release.properties.target}"/>

    <if>
      <equals arg1="${osfamily}" arg2="unix"/>
      <then>
        <exec executable="tar" spawn="false" dir="${dist.dir}">
          <arg value="--bzip2"/>
          <arg value="-cf"/>
          <arg value="${lu.release.file}"/>
          <arg value="${lucidera.release.spec}"/>
        </exec>
      </then>
      <else>
          <zip destfile="${lu.release.file}">
          <zipfileset dir="${dist.dir}/${lucidera.release.spec}" prefix="${lucidera.release.spec}"/>
        </zip>
      </else>
    </if>

  </target>

  <target name="clean-dist">
    <basename property="exclude.file" file="${lu.release.file}"/>
    <delete quiet="true" includeEmptyDirs="true">
      <fileset dir="${dist.dir}">
          <exclude name="${exclude.file}"/>
      </fileset>
    </delete>
  </target>

  <target name="dist-dir-luciddb">
    <!-- farrago distribution file -->
    <property file="${farrago.dist.dir}/FarragoRelease.properties"/>
    <fail unless="package.name"/>
    <fail unless="product.version.major"/>
    <fail unless="product.version.minor"/>
    <fail unless="product.version.point"/>

    <condition property="farrago.release.spec"
      value="${package.name}-${product.version.major}.${product.version.minor}.${product.version.point}"
      else="${package.name}-${product.version.major}.${product.version.minor}.${product.version.point}.${product.build.number}">
      <equals arg1="${product.build.number}" arg2="0"/>
    </condition>

    <condition property="farrago.dist.file"
      value="${farrago.dist.dir}/farrago.zip"
      else="${farrago.dist.dir}/${farrago.release.spec}.tar.bz2">
      <os family="windows"/>
    </condition>

    <delete dir="${dist.dir}" quiet="true"/>
    <mkdir dir="${dist.dir}"/>

    <if>
      <equals arg1="${osfamily}" arg2="unix"/>
      <then>
        <exec executable="tar" spawn="false" dir="${dist.dir}">
          <arg value="--bzip2"/>
          <arg value="-xf"/>
          <arg value="${farrago.dist.file}"/>
        </exec>
      </then>
      <else>
        <unzip src="${farrago.dist.file}" dest="${dist.dir}"/>
      </else>
    </if>

    <!-- rename-dir-to-luciddb: -->
    <move todir="${dist.dir}/${lucidera.release.spec}">
      <fileset dir="${dist.dir}/${farrago.release.spec}"/>
    </move>
  </target>

  <target name="createEclipseProject">

    <pathconvert property="eclipse.libpath" refid="luciddb.build.classpath"
      pathsep="&quot;/&gt;&#10;&lt;classpathentry kind=&quot;lib&quot; path=&quot;"/>
    <copy file="${luciddb.dir}/eclipse/.project" overwrite="true"
        tofile="${luciddb.dir}/.project">
    </copy>
    <copy file="${luciddb.dir}/eclipse/.classpath" overwrite="true"
        tofile="${luciddb.dir}/.classpath">
      <filterset>
        <filter token="LIBPATH" value="${eclipse.libpath}"/>
      </filterset>
    </copy>
    <replace file="${luciddb.dir}/.classpath" token="${farrago.catalog.src.dir}" value="/farrago/catalog/java"/>
    <replace file="${luciddb.dir}/.classpath" token="${farrago.classes.dir}" value="/farrago/classes"/>
    <replace file="${luciddb.dir}/.classpath" token="${classes.dir}" value="classes"/>
    <copy todir="${luciddb.dir}/.settings" overwrite="true">
      <fileset dir="${luciddb.dir}/eclipse/.settings"/>
    </copy>
  </target>

  <target name="createCatalogScript" depends="convertInitSqlScripts">
    <delete file="${luciddb.initsql.dir}/catalog.sql" quiet="true"/>
    <concat destfile="${luciddb.initsql.dir}/catalog.sql">
      <filelist refid="farrago.filelist.initsql"/>
      <filelist refid="luciddb.filelist.initsql"/>
    </concat>
  </target>

  <target name="copyFennelFiles">
    <if>
      <and>
        <equals arg1="${osfamily}" arg2="unix"/>
        <not>
          <os family="mac"/>
        </not>
      </and>
      <then>
        <copy file="${fennel.dir}/util/allocFile" overwrite="true"
          tofile="${luciddb.dir}/allocFile"/>
        <chmod file="${luciddb.dir}/allocFile" perm="u+x" />
      </then>
    </if>
  </target>

<!-- Begin Experiment -->

  <!-- ref file doesn't quite match yet, but makes it easier to compare -->
  <target name="testCatalogScript" depends="createCatalogScript">
    <pathconvert property="fcatalog.ref.prop"
      refid="farrago.filelist.initsql" pathsep="${line.separator}"
      dirsep="${file.separator}" >
      <globmapper from="*.sql" to="*.ref"/>
    </pathconvert>
    <concat destfile="${luciddb.initsql.dir}/catalog.tmp">
      <filelist dir="${file.separator}" files="${fcatalog.ref.prop}" />
      <filterchain>
        <tokenfilter>
          <replacestring from="0: jdbc:farrago:>" to="0: jdbc:luciddb:>"/>
        </tokenfilter>
      </filterchain>
    </concat>
    <pathconvert property="lcatalog.ref.prop"
      refid="luciddb.filelist.initsql" pathsep="${line.separator}"
      dirsep="${file.separator}" >
      <globmapper from="*.sql" to="*.ref"/>
    </pathconvert>
    <concat destfile="${luciddb.initsql.dir}/catalog.ref">
      <filelist dir="${luciddb.initsql.dir}" files="catalog.tmp"/>
      <filelist dir="${file.separator}" files="${lcatalog.ref.prop}"/>
    </concat>
    <luciddb.runSqlTests filelist="${luciddb.initsql.dir}/catalog.sql"
      sqltest.classpath="${test.classpath}"/>
  </target>

<!-- End Experiment-->

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="vi_basic" basedir="." default="test">
  <dirname property="vi_basic.dir" file="${ant.file.vi_basic}" />

  <property name="open.dir" location="${vi_basic.dir}/../../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${vi_basic.dir}/testlog" />

  <!-- directory of csv files -->
  <property name="csvsource.dir" value="${open.dir}/luciddbtestdata/csv_BENCH"/>
  <property name="csv.dir" value="${vi_basic.dir}/csv" />
  <property name="csv.copy.dir" value="${vi_basic.dir}/csv-copy" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>
    <!-- generate sql -->
    <copy todir="${vi_basic.dir}" overwrite="true">
      <fileset dir="${vi_basic.dir}" includes="*.tmpl"/>
      <filterset>
        <filter token="DIR" value="${csv.copy.dir}"/>
      </filterset>
      <globmapper from="*.tmpl" to="*"/>
    </copy>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${vi_basic.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="copy-csv">
    <available file="${csvsource.dir}" type="dir"
      property="raksha.available"/>
    <if>
      <isset property="raksha.available"/>
      <then>
        <!-- sync raksha <-> csv.dir -->
        <sync todir="${csv.dir}"
          overwrite="false"
          failonerror="false"
          verbose="true">
          <fileset dir="${csvsource.dir}" includes="bench100.csv"/>
        </sync>
      </then>
    </if>
    <available file="${csv.dir}" type="dir"
      property="csv.available"/>
    <if>
      <isset property="csv.available"/>
      <then>
        <!-- sync csv.dir <-> csv-copy.dir -->
        <sync todir="${csv.copy.dir}"
          overwrite="true"
          verbose="true"
          failonerror="true">
          <fileset dir="${csv.dir}"/>
        </sync>
      </then>
      <else>
        <echo message="!! NO CSV FILES !!"/>
      </else>
    </if>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete dir="${csv.dir}"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete file="viload.sql"/>
    <delete file="viload.ref"/>
    <delete dir="${bh.log.basedir}"/>
    <delete>
      <fileset dir="${vi_basic.dir}" includes="*.log"/>
    </delete>
    <delete dir="${csv.copy.dir}"/>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="VI" basedir="." default="test">
  <dirname property="VI.dir" file="${ant.file.VI}" />

  <property name="open.dir" location="${VI.dir}/../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties" />

  <!-- Needed for ant contrib task such as <if> -->
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <!-- Just simple gen properties, not really generating any SQLs -->
  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <ant dir="basic" target="test"/>
    <!-- ant dir="leaf" target="test"/ -->
    <!-- ant dir="rs" target="test"/ -->
    <!-- ant dir="pqueue" target="test"/ -->
    <!-- ant dir="xoand" target="test"/ -->
    <!-- ant dir="xomerge" target="test"/ -->
    <!-- ant dir="xominus" target="test"/ -->
    <!-- ant dir="xoor" target="test"/ -->
    <ant dir="populate" target="test"/>
    <ant dir="tbs" target="test"/>
    <ant dir="flip" target="test"/>
    <ant dir="insert" target="test"/>
    <ant dir="recovery" target="test"/>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete file="run.properties"/>
    <ant dir="basic" target="clean"/>
    <ant dir="populate" target="clean"/>
    <ant dir="tbs" target="clean"/>
    <ant dir="flip" target="clean"/>
    <ant dir="insert" target="clean"/>
    <ant dir="recovery" target="clean"/>
  </target>

  <target name="clean-test">
    <delete dir="${bh.log.basedir}"/>
    <ant dir="basic" target="clean-test"/>
    <ant dir="populate" target="clean-test"/>
    <ant dir="tbs" target="clean-test"/>
    <ant dir="flip" target="clean-test"/>
    <ant dir="insert" target="clean-test"/>
    <ant dir="recovery" target="clean-test"/>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="vi_flip" basedir="." default="test">
  <dirname property="vi_flip.dir" file="${ant.file.vi_flip}" />

  <property name="open.dir" location="${vi_flip.dir}/../../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${vi_flip.dir}/testlog" />

  <!-- directory of csv files -->
  <property name="csvsource.dir" value="${open.dir}/luciddbtestdata/csv_BENCH"/>
  <property name="csv.dir" value="${vi_flip.dir}/csv" />
  <property name="csv.copy.dir" value="${vi_flip.dir}/csv-copy" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>
    <!-- generate sql -->
    <copy todir="${vi_flip.dir}" overwrite="true">
      <fileset dir="${vi_flip.dir}" includes="*.tmpl"/>
      <filterset>
        <filter token="DIR" value="${csv.copy.dir}"/>
      </filterset>
      <globmapper from="*.tmpl" to="*"/>
    </copy>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${vi_flip.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="copy-csv">
    <available file="${csvsource.dir}" type="dir"
      property="raksha.available"/>
    <if>
      <isset property="raksha.available"/>
      <then>
        <!-- sync raksha <-> csv.dir -->
        <sync todir="${csv.dir}"
          overwrite="false"
          failonerror="false"
          verbose="true">
          <fileset dir="${csvsource.dir}">
            <include name="bench100.csv"/>
            <include name="bench10K.csv"/>
          </fileset>
        </sync>
      </then>
    </if>
    <available file="${csv.dir}" type="dir"
      property="csv.available"/>
    <if>
      <isset property="csv.available"/>
      <then>
        <!-- sync csv.dir <-> csv-copy.dir -->
        <sync todir="${csv.copy.dir}"
          overwrite="true"
          verbose="true"
          failonerror="true">
          <fileset dir="${csv.dir}"/>
        </sync>
      </then>
      <else>
        <echo message="!! NO CSV FILES !!"/>
      </else>
    </if>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete dir="${csv.dir}"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${bh.log.basedir}"/>
    <delete>
      <fileset dir="${vi_flip.dir}" includes="*.log"/>
    </delete>
    <delete file="creschema.sql"/>
    <delete file="creschema.ref"/>
    <delete dir="${csv.copy.dir}"/>
  </target>

  <target name="clean-csv" depends="clean">
    <delete dir="${csv.dir}"/>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="vi_insert" basedir="." default="test">
  <dirname property="vi_insert.dir" file="${ant.file.vi_insert}" />

  <property name="open.dir" location="${vi_insert.dir}/../../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <taskdef name="foreach" classname="net.sf.antcontrib.logic.ForEach" classpath="${ant.classpath}"/>
  <taskdef name="if" classname="net.sf.antcontrib.logic.IfTask" classpath="${ant.classpath}"/>

  <!-- directory where sql is generated -->
  <property name="gensql.dir" value="${vi_insert.dir}/gen" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${vi_insert.dir}/testlog" />

  <!-- directory where the csv files are copied -->
  <property name="csvsource.dir" value="${open.dir}/luciddbtestdata/csv_BENCH"/>
  <property name="csv.dir" value="${vi_insert.dir}/csv" />
  <property name="csv.copy.dir" value="${vi_insert.dir}/csv-copy" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-sql">
    <filter token="open.dir" value="${open.dir}"/>
    <filter token="csv.dir" value="${csv.copy.dir}"/>

    <!-- generate config.properties file -->
    <copy file="prop.${prop.source}" tofile="config.properties"
      overwrite="true" filtering="true">
      <filterset>
        <filtersfile file="prop.${prop.source}"/>
      </filterset>
    </copy>

    <!-- generate all sql files -->
    <copy todir="${gensql.dir}tmp" overwrite="true"
      filtering="true">
      <fileset dir="${vi_insert.dir}">
        <include name="**/*.tmpl"/>
      </fileset>
      <mapper type="glob" from="*.tmpl" to="*"/>
      <filterset>
        <filtersfile file="config.properties"/>
      </filterset>
    </copy>
    <copy todir="${gensql.dir}/${prop.source}" overwrite="true"
      filtering="true">
      <fileset dir="${gensql.dir}tmp"/>
      <filterchain>
        <tokenfilter>
          <replaceregex pattern="^.*. . >.*@.*@.*" replace=". . . . . . . . > " flags="s"/>
          <replaceregex pattern="^.*@.*@.*" replace="" flags="s"/>
        </tokenfilter>
      </filterchain>
    </copy>
    <delete dir="${gensql.dir}tmp" quiet="true"/>

    <!-- copy over all other .sql and .ref files -->
    <copy todir="${gensql.dir}/${prop.source}">
      <fileset dir="${vi_insert.dir}">
        <include name="**/*.sql"/>
        <include name="**/*.ref"/>
        <exclude name="gen/**"/>
      </fileset>
    </copy>
  </target>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>

    <!-- generate sql -->
    <foreach list="oracle,sqlserver,flatfile,csvjdbc"
      param="prop.source"
      target="gen-sql"/>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${vi_insert.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="copy-csv">
    <available file="${csvsource.dir}" type="dir"
      property="raksha.available"/>
    <if>
      <isset property="raksha.available"/>
      <then>
        <!-- sync raksha <-> csv.dir -->
        <sync todir="${csv.dir}"
          overwrite="false"
          failonerror="false"
          verbose="true">
          <fileset dir="${csvsource.dir}"/>
        </sync>
      </then>
    </if>
    <available file="${csv.dir}" type="dir"
      property="csv.available"/>
    <if>
      <isset property="csv.available"/>
      <then>
        <!-- sync csv.dir <-> csv-copy.dir -->
        <sync todir="${csv.copy.dir}"
          overwrite="true"
          verbose="true"
          failonerror="true">
          <fileset dir="${csv.dir}"/>
        </sync>
      </then>
      <else>
        <echo message="!! NO CSV FILES !!"/>
      </else>
    </if>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete dir="${csv.dir}"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${gensql.dir}"/>
    <delete dir="${bh.log.basedir}"/>
    <delete dir="${csv.copy.dir}"/>
    <delete file="config.properties"/>
  </target>

  <target name="clean-csv">
    <antcall target="clean"/>
    <delete dir="${csv.dir}"/>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="vi_populate" basedir="." default="test">
  <dirname property="vi_populate.dir" file="${ant.file.vi_populate}" />

  <property name="open.dir" location="${vi_populate.dir}/../../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <taskdef name="foreach" classname="net.sf.antcontrib.logic.ForEach" classpath="${ant.classpath}"/>
  <taskdef name="if" classname="net.sf.antcontrib.logic.IfTask" classpath="${ant.classpath}"/>

  <!-- directory where sql is generated -->
  <property name="gensql.dir" value="${vi_populate.dir}/gen" />
  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${vi_populate.dir}/testlog" />
  <!-- directory of csv files -->
  <property name="csvsource.dir" value="${open.dir}/luciddbtestdata/csv_BENCH"/>
  <property name="csv.dir" value="${vi_populate.dir}/csv" />
  <property name="csv.copy.dir" value="${vi_populate.dir}/csv-copy"/>

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <!-- generate sql for a configuration -->
  <target name="gen-sql">
    <filter token="open.dir" value="${open.dir}"/>
    <filter token="csv.dir" value="${csv.copy.dir}"/>

    <!-- generate config.properties file -->
    <copy file="prop.${prop.source}" tofile="config.properties"
      overwrite="true" filtering="true">
      <filterset>
        <filtersfile file="prop.${prop.source}"/>
      </filterset>
    </copy>

    <!-- generate all sql files -->
    <copy todir="${gensql.dir}tmp" overwrite="true"
      filtering="true">
      <fileset dir="${vi_populate.dir}">
        <include name="**/*.tmpl"/>
      </fileset>
      <mapper type="glob" from="*.tmpl" to="*"/>
      <filterset>
        <filtersfile file="config.properties"/>
      </filterset>
    </copy>
    <copy todir="${gensql.dir}/${prop.source}" overwrite="true"
      filtering="true">
      <fileset dir="${gensql.dir}tmp"/>
      <filterchain>
        <tokenfilter>
          <replaceregex pattern="^.*. . >.*@.*@.*" replace=". . . . . . . . > " flags="s"/>
          <replaceregex pattern="^.*@.*@.*" replace="" flags="s"/>
        </tokenfilter>
      </filterchain>
    </copy>
    <delete dir="${gensql.dir}tmp" quiet="true"/>

    <!-- copy over all other .sql and .ref files -->
    <copy todir="${gensql.dir}/${prop.source}">
      <fileset dir="${vi_populate.dir}">
        <include name="**/*.sql"/>
        <include name="**/*.ref"/>
        <exclude name="gen/**"/>
      </fileset>
    </copy>
  </target>

  <!-- generates sql files for all configurations -->
  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>

    <!-- generate sql -->
    <foreach list="oracle,sqlserver,flatfile,csvjdbc" 
      param="prop.source"
      target="gen-sql"/>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${vi_populate.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="copy-csv">
    <available file="${csvsource.dir}" type="dir"
      property="raksha.available"/>
    <if>
      <isset property="raksha.available"/>
      <then>
        <!-- sync raksha <-> csv.dir -->
        <sync todir="${csv.dir}" 
          overwrite="false"
          failonerror="false"
          verbose="true">
          <fileset dir="${csvsource.dir}"/>
        </sync>
      </then>
    </if>
    <available file="${csv.dir}" type="dir"
      property="csv.available"/>
    <if>
      <isset property="csv.available"/>
      <then> 
        <!-- sync csv.dir <-> csv-copy.dir -->
        <sync todir="${csv.copy.dir}"
          overwrite="true"
          verbose="true"
          failonerror="true">
          <fileset dir="${csv.dir}"/>
        </sync>
      </then>
      <else>
        <echo message="!! NO CSV FILES !!"/>
      </else>
    </if>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete dir="${csv.dir}"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${gensql.dir}"/>
    <delete dir="${bh.log.basedir}"/>
    <delete dir="${csv.copy.dir}"/>
    <delete file="config.properties"/>
  </target>

  <target name="clean-csv">
    <antcall target="clean"/>
    <delete dir="${csv.dir}"/>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="vi_recovery" basedir="." default="test">
  <dirname property="vi_recovery.dir" file="${ant.file.vi_recovery}" />

  <property name="open.dir" location="${vi_recovery.dir}/../../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />

  <import file="${open.dir}/farrago/buildMacros.xml" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${vi_recovery.dir}/testlog" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${vi_recovery.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${bh.log.basedir}"/>
    <delete>
      <fileset dir="${vi_recovery.dir}" includes="*.log"/>
    </delete>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

  <project name="vi_tbs" basedir="." default="test">
  <dirname property="vi_tbs.dir" file="${ant.file.vi_tbs}"/>

  <property name="open.dir" location="${vi_tbs.dir}/../../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />


  <!-- directory where sql is generated -->
  <property name="gensql.dir" value="${vi_tbs.dir}/gen" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${vi_tbs.dir}/testlog" />

  <!-- directory of csv files -->
  <property name="csvsource.dir" value="${open.dir}/luciddbtestdata/csv_BENCH"/>
  <property name="csv.dir" value="${vi_tbs.dir}/csv" />
  <property name="csv.copy.dir" value="${vi_tbs.dir}/csv-copy" />
  <property name="data.dir" value="${open.dir}/luciddb/test/data" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>
    <!-- generate sql -->
    <!-- generate sql files -->
    <copy todir="${gensql.dir}/noidx" overwrite="true">
      <fileset dir="${vi_tbs.dir}" includes="*.tmpl"/>
      <filterset id="dir.filter">
        <filter token="DIR" value="${csv.copy.dir}"/>
       </filterset>
      <globmapper from="*.tmpl" to="*"/>
    </copy>

    <copy todir="${gensql.dir}/idx" overwrite="true">
      <fileset dir="${vi_tbs.dir}" includes="*.tmpl"/>
      <filterset refid="dir.filter"/>
      <globmapper from="*.tmpl" to="*"/>
    </copy>

    <!-- copy over non-indexed tests -->
    <copy todir="${gensql.dir}/noidx" overwrite="true">
      <fileset dir="${vi_tbs.dir}">
        <include name="*.sql"/>
        <include name="*.ref"/>
        <exclude name="*idx*"/>
        <exclude name="benchins.*"/>
      </fileset>
    </copy>

    <!-- copy over indexed tests -->
    <copy todir="${gensql.dir}/idx" overwrite="true">
      <fileset dir="${vi_tbs.dir}">
        <include name="*.sql"/>
        <include name="*.ref"/>
        <exclude name="benchins10K.*"/>
        <exclude name="benchins100K.*"/>
      </fileset>
    </copy>        
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${vi_tbs.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="copy-csv">
    <available file="${csvsource.dir}" type="dir"
      property="raksha.available"/>
    <if>
      <isset property="raksha.available"/>
      <then>
        <!-- sync raksha <-> csv.dir -->
        <sync todir="${csv.dir}" 
          overwrite="false"
          failonerror="false"
          verbose="true">
          <fileset dir="${csvsource.dir}"/>
        </sync>
      </then>
    </if>
    <available file="${csv.dir}" type="dir"
      property="csv.available"/>
    <if>
      <isset property="csv.available"/>
      <then> 
        <!-- sync csv.dir <-> csv-copy.dir -->
        <sync todir="${csv.copy.dir}"
          overwrite="true"
          verbose="true"
          failonerror="true">
          <fileset dir="${csv.dir}"/>
        </sync>
      </then>
      <else>
        <echo message="!! NO REMOTE CSV FILES !!"/>
      </else>
    </if>
  </target>

  <target name="copy-local-csv">
    <!-- sync data.dir <-> csv-copy.dir -->
    <sync todir="${csv.copy.dir}"
      overwrite="true"
      verbose="true"
      failonerror="true">
      <fileset dir="${data.dir}" includes="bench100.csv"/>
    </sync>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete dir="${csv.dir}"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${gensql.dir}"/>
    <delete dir="${bh.log.basedir}"/>
    <delete dir="${csv.copy.dir}"/>
  </target>

  <target name="clean-csv" depends="clean">
    <delete dir="${csv.dir}"/>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->
<project name="analyze" basedir="." default="test">
  <dirname property="analyze.dir" file="${ant.file.analyze}" />

  <property name="open.dir" location="${analyze.dir}/../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />

  <import file="${open.dir}/farrago/buildMacros.xml" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${analyze.dir}/testlog" />

  <!-- directories for csv data files -->
  <property name="csv.copy.dir" value="${analyze.dir}/csv-copy" />
  <property name="csvsource.dir" value="${open.dir}/luciddbtestdata/csv_BENCH"/>
  <property name="csv.dir" value="${analyze.dir}/csv" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>



  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>

    <!-- generate sql -->
    <copy todir="${analyze.dir}" overwrite="true">
      <fileset dir="${analyze.dir}" includes="*.tmpl"/>
      <filterset>
        <filter token="DIR" value="${csv.copy.dir}"/>
      </filterset>
      <globmapper from="*.tmpl" to="*"/>
    </copy>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${analyze.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="copy-csv">
    <available file="${csvsource.dir}" type="dir"
      property="raksha.available"/>
    <if>
      <isset property="raksha.available"/>
      <then>
        <!-- sync raksha <-> csv.dir -->
        <sync todir="${csv.dir}"
          overwrite="false"
          failonerror="false"
          verbose="true">
          <fileset dir="${csvsource.dir}">
            <include name="bench1M.csv"/>
            <include name="bench10K.csv"/>
          </fileset>
        </sync>
      </then>
    </if>
    <available file="${csv.dir}" type="dir"
      property="csv.available"/>
    <if>
      <isset property="csv.available"/>
      <then>
        <!-- sync csv.dir <-> csv-copy.dir -->
        <sync todir="${csv.copy.dir}"
          overwrite="true"
          verbose="true"
          failonerror="true">
          <fileset dir="${csv.dir}"/>
        </sync>
        <!-- copy bcp -->
        <copy todir="${csv.copy.dir}" overwrite="true">
           <fileset dir="${analyze.dir}">
            <include name="*.bcp"/>
          </fileset>
        </copy>
      </then>
      <else>
        <echo message="!! NO CSV FILES !!"/>
      </else>
    </if>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete dir="${csv.dir}"/>
    <delete file="run.properties"/>
  </target>


  <target name="clean-test">
    <delete dir="${bh.log.basedir}"/>
    <delete>
      <fileset dir="${analyze.dir}">
        <include name="*.log"/>
        <include name="download.ref"/>
        <include name="download.sql"/>
      </fileset>
    </delete>
    <delete dir="${csv.copy.dir}"/>
  </target>

  <target name="clean-csv">
    <antcall target="clean"/>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="backupRestore" basedir="." default="test">
  <dirname property="backupRestore.dir" file="${ant.file.backupRestore}"/>
  <property name="open.dir" location="${backupRestore.dir}/../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.catalog.schema" value="luciddb" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />
  <property name="build.init.properties" location="${backupRestore.dir}/build.init.properties" />
  <property name="luciddb.dir" location="${open.dir}/luciddb" />
  <import file="${luciddb.dir}/properties.xml" />

  <!-- directory of csv files -->
  <property name="data.dir" value="${open.dir}/luciddb/test/data"/>
  <property name="csv.copy.dir" value="${backupRestore.dir}/csv-copy"/>

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <property name="testlog.dir" value="${backupRestore.dir}" />

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>
    <!-- generate sql -->
    <copy todir="${backupRestore.dir}" overwrite="true">
      <fileset dir="${backupRestore.dir}" includes="*.tmpl"/>
      <filterset>
        <filter token="DIR" value="${csv.copy.dir}"/>
      </filterset>
      <filterset>
        <filter token="TEST_DIR" value="${backupRestore.dir}"/>
      </filterset>
      <globmapper from="*.tmpl" to="*"/>
    </copy>
  </target>

  <target name="create-archive-dirs">
    <!-- create directories used by backup and restore test -->
    <mkdir dir="${backupRestore.dir}/fullArchive"/>
    <mkdir dir="${backupRestore.dir}/incrArchive1"/>
    <mkdir dir="${backupRestore.dir}/incrArchive2"/>
    <mkdir dir="${backupRestore.dir}/diffArchive"/>
    <mkdir dir="${backupRestore.dir}/tmpArchive"/>
    <mkdir dir="${backupRestore.dir}/nonWritableArchive"/>
    <chmod dir="${backupRestore.dir}/nonWritableArchive" perm="u-w"/>
  </target>

  <target name="test-sanity" depends="clean-test">
    <property name="bh.log.basedir" value="${testlog.dir}/bh-backupRestoreSanity" />
    <!-- Clean out old archive data from the system catalog because one of
         error testcases executed as part of this target assumes no backups
         have been done.
    -->
    <ant dir="${open.dir}/luciddb" target="restoreCatalog"/>
    <blackhawk.fork
      basedir="${backupRestore.dir}"
      testscript="sanity.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="test">

    <!-- This set of sanity tests creates the backups used by subsequent
         restore tests.
    -->
    <antcall target="test-sanity"/>

    <antcall target="restoreErrs"/>

    <antcall target="restoreFulla"/>
    <antcall target="validateFulla"/>

    <antcall target="restoreFullb"/>
    <antcall target="restoreIncr1a"/>
    <antcall target="validateIncr1"/>

    <antcall target="restoreFullc"/>
    <antcall target="restoreIncr1b"/>
    <antcall target="restoreIncr2a"/>
    <antcall target="validateIncr2a"/>

    <antcall target="restoreFulld"/>
    <antcall target="restoreDiff"/>
    <antcall target="validateDiff"/>

    <antcall target="restoreFulle"/>
    <antcall target="badRestore1"/>
    <!-- make sure the database is still in a valid state after the
         restore failure
    -->
    <antcall target="validateFullb"/>

    <antcall target="restoreFullf"/>
    <antcall target="badRestore2"/>
    <!-- make sure the database is still in a valid state after the
         restore failure
    -->
    <antcall target="validateFullc"/>

    <!-- Do a couple of restores without restoring the catalog and then do
         a final restore with the catalog.
    -->
    <antcall target="restoreFullWithoutCataloga"/>
    <antcall target="restoreIncr1WithoutCatalog"/>
    <antcall target="restoreIncr2b"/>
    <antcall target="validateIncr2b"/>

    <!-- Make sure the data is inaccessible after a partial restore -->
    <antcall target="restoreFullWithoutCatalogb"/>
    <antcall target="partialRestoreAccess"/>

  </target>

  <target name="restoreErrs">
    <property name="bh.log.basedir" value="${testlog.dir}/bh-restoreErrs" />
    <!-- Clean out old archive data from the system catalog.  The non-readable
         directory needs to be created as part of this target because some
         other test-related targets error out when they encounter non-readable
         directories.
    -->
    <ant dir="${open.dir}/luciddb" target="restoreCatalog"/>
    <mkdir dir="${backupRestore.dir}/nonReadableArchive"/>
    <chmod dir="${backupRestore.dir}/nonReadableArchive" perm="u-r"/>
    <blackhawk.fork
      basedir="${backupRestore.dir}"
      testscript="restoreErrs.xml"
      classpathref="test.classpath"/>
    <chmod dir="${backupRestore.dir}/nonReadableArchive" perm="u+r"/>
    <delete dir="${backupRestore.dir}/nonReadableArchive"/>
  </target>

  <target name="restoreFulla">
    <property name="bh.log.basedir" value="${testlog.dir}/bh-restoreFulla" />
    <blackhawk.fork
      basedir="${backupRestore.dir}"
      testscript="restoreFull.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="restoreFullb">
    <property name="bh.log.basedir" value="${testlog.dir}/bh-restoreFullb" />
    <blackhawk.fork
      basedir="${backupRestore.dir}"
      testscript="restoreFull.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="restoreFullc">
    <property name="bh.log.basedir" value="${testlog.dir}/bh-restoreFullc" />
    <blackhawk.fork
      basedir="${backupRestore.dir}"
      testscript="restoreFull.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="restoreFulld">
    <property name="bh.log.basedir" value="${testlog.dir}/bh-restoreFulld" />
    <blackhawk.fork
      basedir="${backupRestore.dir}"
      testscript="restoreFull.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="restoreFulle">
    <property name="bh.log.basedir" value="${testlog.dir}/bh-restoreFulle" />
    <!-- restoreCatalog is needed so the error test that follows this returns
         a consistent commit sequence number
    -->
    <ant dir="${open.dir}/luciddb" target="restoreCatalog"/>
    <blackhawk.fork
      basedir="${backupRestore.dir}"
      testscript="restoreFull.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="restoreFullf">
    <property name="bh.log.basedir" value="${testlog.dir}/bh-restoreFullf" />
    <!-- restoreCatalog is needed so the error test that follows this returns
         a consistent commit sequence number
    -->
    <ant dir="${open.dir}/luciddb" target="restoreCatalog"/>
    <blackhawk.fork
      basedir="${backupRestore.dir}"
      testscript="restoreFull.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="restoreFullWithoutCataloga">
    <property name="bh.log.basedir" value="${testlog.dir}/bh-restoreFullWithoutCataloga" />
    <!-- do a restoreCatalog so we're starting from scratch -->
    <ant dir="${open.dir}/luciddb" target="restoreCatalog"/>
    <blackhawk.fork
      basedir="${backupRestore.dir}"
      testscript="restoreFullWithoutCatalog.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="restoreFullWithoutCatalogb">
    <property name="bh.log.basedir" value="${testlog.dir}/bh-restoreFullWithoutCatalogb" />
    <!-- don't do a restoreCatalog so we'll retain the original catalog data -->
    <blackhawk.fork
      basedir="${backupRestore.dir}"
      testscript="restoreFullWithoutCatalog.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="restoreIncr1a">
    <property name="bh.log.basedir" value="${testlog.dir}/bh-restoreIncr1a" />
    <blackhawk.fork
      basedir="${backupRestore.dir}"
      testscript="restoreIncr1.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="restoreIncr1b">
    <property name="bh.log.basedir" value="${testlog.dir}/bh-restoreIncr1b" />
    <blackhawk.fork
      basedir="${backupRestore.dir}"
      testscript="restoreIncr1.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="restoreIncr1WithoutCatalog">
      <property name="bh.log.basedir"
          value="${testlog.dir}/bh-restoreIncr1WithoutCatalog" />
    <blackhawk.fork
      basedir="${backupRestore.dir}"
      testscript="restoreIncr1WithoutCatalog.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="restoreIncr2a">
    <property name="bh.log.basedir" value="${testlog.dir}/bh-restoreIncr2a" />
    <blackhawk.fork
      basedir="${backupRestore.dir}"
      testscript="restoreIncr2.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="restoreIncr2b">
    <property name="bh.log.basedir" value="${testlog.dir}/bh-restoreIncr2b" />
    <blackhawk.fork
      basedir="${backupRestore.dir}"
      testscript="restoreIncr2.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="restoreDiff">
    <property name="bh.log.basedir" value="${testlog.dir}/bh-restoreDiff" />
    <blackhawk.fork
      basedir="${backupRestore.dir}"
      testscript="restoreDiff.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="badRestore1">
    <property name="bh.log.basedir" value="${testlog.dir}/bh-badRestore1" />
    <blackhawk.fork
      basedir="${backupRestore.dir}"
      testscript="badRestore1.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="badRestore2">
    <property name="bh.log.basedir" value="${testlog.dir}/bh-badRestore2" />
    <blackhawk.fork
      basedir="${backupRestore.dir}"
      testscript="badRestore2.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="partialRestoreAccess">
    <property name="bh.log.basedir" value="${testlog.dir}/bh-partialRestoreAccess" />
    <blackhawk.fork
      basedir="${backupRestore.dir}"
      testscript="partialRestoreAccess.xml"
      classpathref="test.classpath"/>
    <!-- put the catalog back into a usable state -->
    <ant dir="${open.dir}/luciddb" target="restoreCatalog"/>
  </target>

  <target name="validateFulla">
    <property name="bh.log.basedir" value="${testlog.dir}/bh-validateFulla" />
    <blackhawk.fork
      basedir="${backupRestore.dir}"
      testscript="validateFull.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="validateFullb">
    <property name="bh.log.basedir" value="${testlog.dir}/bh-validateFullb" />
    <blackhawk.fork
      basedir="${backupRestore.dir}"
      testscript="validateFull.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="validateFullc">
    <property name="bh.log.basedir" value="${testlog.dir}/bh-validateFullc" />
    <blackhawk.fork
      basedir="${backupRestore.dir}"
      testscript="validateFull.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="validateIncr1">
    <property name="bh.log.basedir" value="${testlog.dir}/bh-validateIncr1" />
    <blackhawk.fork
      basedir="${backupRestore.dir}"
      testscript="validateIncr1.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="validateIncr2a">
    <property name="bh.log.basedir" value="${testlog.dir}/bh-validateIncr2a" />
    <blackhawk.fork
      basedir="${backupRestore.dir}"
      testscript="validateIncr2.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="validateIncr2b">
    <property name="bh.log.basedir" value="${testlog.dir}/bh-validateIncr2b" />
    <blackhawk.fork
      basedir="${backupRestore.dir}"
      testscript="validateIncr2.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="validateDiff">
    <property name="bh.log.basedir" value="${testlog.dir}/bh-validateDiff" />
    <blackhawk.fork
      basedir="${backupRestore.dir}"
      testscript="validateIncr2.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="copy-csv">
    <sync todir="${csv.copy.dir}"
      overwrite="true"
      verbose="true"
      failonerror="true">
      <fileset dir="${data.dir}">
        <include name="EMP.csv"/>
        <include name="DEPT.csv"/>
        <include name="LOCATION.csv"/>
      </fileset>
    </sync>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${backupRestore.dir}/bh-backupRestoreSanity" />
    <delete dir="${backupRestore.dir}/bh-restoreErrs" />
    <delete dir="${backupRestore.dir}/bh-restoreFulla" />
    <delete dir="${backupRestore.dir}/bh-restoreFullb" />
    <delete dir="${backupRestore.dir}/bh-restoreFullc" />
    <delete dir="${backupRestore.dir}/bh-restoreFulld" />
    <delete dir="${backupRestore.dir}/bh-restoreFulle" />
    <delete dir="${backupRestore.dir}/bh-restoreFullf" />
    <delete dir="${backupRestore.dir}/bh-restoreFullWithoutCataloga" />
    <delete dir="${backupRestore.dir}/bh-restoreFullWithoutCatalogb" />
    <delete dir="${backupRestore.dir}/bh-restoreIncr1a" />
    <delete dir="${backupRestore.dir}/bh-restoreIncr1b" />
    <delete dir="${backupRestore.dir}/bh-restoreIncr1WithoutCatalog" />
    <delete dir="${backupRestore.dir}/bh-restoreIncr2a" />
    <delete dir="${backupRestore.dir}/bh-restoreIncr2b" />
    <delete dir="${backupRestore.dir}/bh-badRestore1" />
    <delete dir="${backupRestore.dir}/bh-badRestore2" />
    <delete dir="${backupRestore.dir}/bh-restoreDiff" />
    <delete dir="${backupRestore.dir}/bh-partialRestoreAccess" />
    <delete dir="${backupRestore.dir}/bh-validateFulla" />
    <delete dir="${backupRestore.dir}/bh-validateFullb" />
    <delete dir="${backupRestore.dir}/bh-validateFullc" />
    <delete dir="${backupRestore.dir}/bh-validateIncr1" />
    <delete dir="${backupRestore.dir}/bh-validateIncr2a" />
    <delete dir="${backupRestore.dir}/bh-validateIncr2b" />
    <delete dir="${backupRestore.dir}/bh-validateDiff" />
    <delete>
      <fileset dir="${backupRestore.dir}" includes="*.log"/>
    </delete>
    <delete file="backups.sql"/>
    <delete file="backupErrs.sql"/>
    <delete file="restoreErr1.mtsql"/>
    <delete file="restoreErr2.mtsql"/>
    <delete file="restoreErr3.mtsql"/>
    <delete file="restoreErr4.mtsql"/>
    <delete file="restoreErr5.mtsql"/>
    <delete file="badRestore1.mtsql"/>
    <delete file="badRestore2.mtsql"/>
    <delete file="restoreFull.mtsql"/>
    <delete file="restoreFullWithoutCatalog.mtsql"/>
    <delete file="restoreIncr1.mtsql"/>
    <delete file="restoreIncr1WithoutCatalog.mtsql"/>
    <delete file="restoreIncr2.mtsql"/>
    <delete file="restoreDiff.mtsql"/>
    <delete file="backups.ref"/>
    <delete file="backupErrs.ref"/>
    <delete file="restoreErr1.ref"/>
    <delete file="restoreErr2.ref"/>
    <delete file="restoreErr3.ref"/>
    <delete file="restoreErr4.ref"/>
    <delete file="restoreErr5.ref"/>
    <delete file="badRestore1.ref"/>
    <delete file="badRestore2.ref"/>
    <delete file="restoreFull.ref"/>
    <delete file="restoreFullWithoutCatalog.ref"/>
    <delete file="restoreIncr1.ref"/>
    <delete file="restoreIncr1WithoutCatalog.ref"/>
    <delete file="restoreIncr2.ref"/>
    <delete file="restoreDiff.ref"/>
    <delete dir="${csv.copy.dir}"/>
    <delete dir="${backupRestore.dir}/fullArchive"/>
    <delete dir="${backupRestore.dir}/incrArchive1"/>
    <delete dir="${backupRestore.dir}/incrArchive2"/>
    <delete dir="${backupRestore.dir}/diffArchive"/>
    <delete dir="${backupRestore.dir}/tmpArchive"/>
    <chmod perm="u+w">
      <dirset dir="${backupRestore.dir}" includes="nonWritableArchive"/>
    </chmod>
    <delete dir="${backupRestore.dir}/nonWritableArchive"/>
    <!-- this should have been done earlier, but just in case -->
    <chmod perm="u+r">
      <dirset dir="${backupRestore.dir}" includes="nonReadableArchive"/>
    </chmod>
    <delete dir="${backupRestore.dir}/nonReadableArchive"/>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="benchmark" basedir="." default="test">
  <dirname property="bench.dir" file="${ant.file.bench}" />

  <property name="open.dir" location="${bench.dir}/../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <taskdef name="foreach" classname="net.sf.antcontrib.logic.ForEach" classpath="${ant.classpath}"/>
  <taskdef name="if" classname="net.sf.antcontrib.logic.IfTask" classpath="${ant.classpath}"/>

  <!-- directory where sql is generated -->
  <property name="gensql.dir" value="${bench.dir}/gen" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${bench.dir}/testlog" />

  <!-- directory of csv files -->
  <property name="csvsource.dir" value="${open.dir}/luciddbtestdata/csv_BENCH"/>
  <property name="csv.dir" value="${bench.dir}/csv" />
  <property name="csv.copy.dir" value="${bench.dir}/csv-copy" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-sql">
    <filter token="open.dir" value="${open.dir}"/>
    <filter token="csv.dir" value="${csv.copy.dir}"/>

    <!-- generate config.properties file -->
    <copy file="prop.${prop.source}" tofile="config.properties"
      overwrite="true" filtering="true">
      <filterset>
        <filtersfile file="prop.${prop.source}"/>
      </filterset>
    </copy>

    <!-- generate all sql files -->
    <copy todir="${gensql.dir}tmp" overwrite="true"
      filtering="true">
      <fileset dir="${bench.dir}">
        <include name="**/*.tmpl"/>
      </fileset>
      <mapper type="glob" from="*.tmpl" to="*"/>
      <filterset>
        <filtersfile file="config.properties"/>
      </filterset>
    </copy>
    <copy todir="${gensql.dir}/${prop.source}" overwrite="true"
      filtering="true">
      <fileset dir="${gensql.dir}tmp"/>
      <filterchain>
        <tokenfilter>
          <replaceregex pattern="^.*. . >.*@.*@.*" replace=". . . . . . . . > " flags="s"/>
          <replaceregex pattern="^.*@.*@.*" replace="" flags="s"/>
        </tokenfilter>
      </filterchain>
    </copy>
    <delete dir="${gensql.dir}tmp" quiet="true"/>

    <!-- copy over all other .sql and .ref files -->
    <copy todir="${gensql.dir}/${prop.source}">
      <fileset dir="${bench.dir}">
        <include name="**/*.sql"/>
        <include name="**/*.ref"/>
        <exclude name="gen/**"/>
      </fileset>
    </copy>
  </target>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>
    <!-- generate sql -->
    <foreach list="oracle,sqlserver,flatfile,csvjdbc"
      param="prop.source"
      target="gen-sql"/>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${bench.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="copy-csv">
    <available file="${csvsource.dir}" type="dir"
      property="raksha.available"/>
    <if>
      <isset property="raksha.available"/>
      <then>
        <!-- sync raksha <-> csv.dir -->
        <sync todir="${csv.dir}"
          overwrite="false"
          failonerror="false"
          verbose="true">
          <fileset dir="${csvsource.dir}" includes="*.csv"/>
        </sync>
      </then>
    </if>
    <available file="${csv.dir}" type="dir"
      property="csv.available"/>
    <if>
      <isset property="csv.available"/>
      <then>
        <!-- sync csv.dir <-> csv-copy.dir -->
        <sync todir="${csv.copy.dir}"
          overwrite="true"
          verbose="true"
          failonerror="true">
          <fileset dir="${csv.dir}"/>
        </sync>
      </then>
      <else>
        <echo message="!! NO CSV FILES !!"/>
      </else>
    </if>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete dir="${csv.dir}"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${gensql.dir}"/>
    <delete dir="${bh.log.basedir}"/>
    <delete dir="${csv.copy.dir}"/>
    <delete file="config.properties"/>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="calc" basedir="." default="test">
  <dirname property="calc.dir" file="${ant.file.calc}" />

  <property name="open.dir" location="${calc.dir}/../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${calc.dir}/testlog" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${calc.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <ant dir="cast" target="clean"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <ant dir="cast" target="clean-test"/>
    <delete dir="${bh.log.basedir}"/>
    <delete>
      <fileset dir="${calc.dir}" includes="*.log"/>
    </delete>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="calc_cast" basedir="." default="test">
  <dirname property="calc_cast.dir" file="${ant.file.calc_cast}" />

  <property name="open.dir" location="${calc_cast.dir}/../../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${calc_cast.dir}/testlog" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${calc_cast.dir}"
      testscript="${testfile}"
      inheritAll="true"
      classpathref="test.classpath"/>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${bh.log.basedir}"/>
    <delete>
      <fileset dir="${calc_cast.dir}" includes="*.log"/>
    </delete>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="company" basedir="." default="test">
  <dirname property="company.dir" file="${ant.file.company}" />

  <property name="open.dir" location="${company.dir}/../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <taskdef name="foreach" classname="net.sf.antcontrib.logic.ForEach" classpath="${ant.classpath}"/>
  <taskdef name="if" classname="net.sf.antcontrib.logic.IfTask" classpath="${ant.classpath}"/>

  <!-- directory where sql is generated -->
  <property name="gensql.dir" value="${company.dir}/gen" />
  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${company.dir}/testlog" />

  <!-- directory of csv files -->
  <property name="csv.copy.dir" value="${company.dir}/csv-copy" />
  <property name="data.dir" value="${open.dir}/luciddb/test/data" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <!-- classpath for running tests on oracle db via ant -->
  <path id="test.orcl.classpath">
    <pathelement path="${test.classpath}"/>
    <pathelement path="${open.dir}/luciddb/plugin/FarragoMedJdbc3p.jar"/>
  </path>
  <property name="test.orcl.classpath" refid="test.orcl.classpath"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>

    <!-- generate sql -->
    <copy todir="${gensql.dir}/noidx" overwrite="true">
      <fileset dir="${company.dir}" includes="*.tmpl"/>
      <filterset id="dir.filter">
        <filter token="DIR" value="${csv.copy.dir}"/>
      </filterset>
      <globmapper from="*.tmpl" to="*"/>
    </copy>

    <copy todir="${gensql.dir}/idx" overwrite="true">
      <fileset dir="${company.dir}" includes="*.tmpl"/>
      <filterset refid="dir.filter"/>
      <globmapper from="*.tmpl" to="*"/>
    </copy>

    <!-- copy over  non-index version of tests -->
    <copy todir="${gensql.dir}/noidx" overwrite="true">
      <fileset dir="${company.dir}">
        <include name="*.ref"/>
        <include name="*.sql"/>
        <exclude name="index.*"/>
        <exclude name="stats.*"/>
        <exclude name="aggJoinFilt.*"/>
        <exclude name="joinFilt.*"/>
        <exclude name="negJoinFilt.*"/>
        <exclude name="negJoinFiltExp.*"/>
        <exclude name="compIdx.*"/>
      </fileset>
    </copy>

    <!-- copy over indexed version of tests -->
    <copy todir="${gensql.dir}/idx" overwrite="true">
      <fileset dir="${company.dir}">
        <include name="*.sql"/>
        <include name="*.ref"/>
       <exclude name="create.*"/>
     </fileset>
    </copy>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${company.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="copy-csv">
    <sync todir="${csv.copy.dir}"
      overwrite="true"
      verbose="true"
      failonerror="true">
      <fileset dir="${data.dir}">
        <include name="DEPT.csv"/>
        <include name="EMP.csv"/>
        <include name="PRODUCTS.csv"/>
        <include name="SALES.csv"/>
        <include name="LOCATION.csv"/>
        <include name="CUSTOMERS.csv"/>
        <include name="SALES.bcp"/>
        <include name="PRODUCTS.bcp"/>
      </fileset>
    </sync>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${gensql.dir}"/>
    <delete dir="${bh.log.basedir}"/>
    <delete dir="${csv.copy.dir}"/>
  </target>

  <!-- Experimental -->
    <target name="test-orcl" depends="gen-all-sql">
    <blackhawk.fork
      basedir="${company.dir}"
      testscript="test-orcl.xml"
      classpathref="test.orcl.classpath"/>
  </target>

  <target name="format-orcl-files">
    <copy todir="${company.dir}/orcl" overwrite="true">
      <fileset dir="${gensql.dir}/idx">
        <include name="*.log"/>
      </fileset>
      <filterchain>
        <tokenfilter>
          <replacestring
            from="0: jdbc:oracle:thin:@akela.lucidera.com:1521:"
            to="0: jdbc:oracle:"/>
          <replacestring
            from="Error: READ_COMMITTED and SERIALIZABLE are the only valid transaction levels (state=,code=17030)"
            to=""/>
          <replacestring
            from=". . . . . . . . . . . . . . . . . . . . . . ."
            to=". . . . . . . . "/>
        </tokenfilter>
      </filterchain>
      <globmapper from="*.log" to="*.orcl"/>
    </copy>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="compositekey" basedir="." default="test">
  <dirname property="compositekey.dir" file="${ant.file.compositekey}" />

  <property name="open.dir" location="${compositekey.dir}/../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <taskdef name="foreach" classname="net.sf.antcontrib.logic.ForEach" classpath="${ant.classpath}"/>
  <taskdef name="if" classname="net.sf.antcontrib.logic.IfTask" classpath="${ant.classpath}"/>

  <!-- directory where sql is generated -->
  <property name="gensql.dir" value="${compositekey.dir}/gen" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${compositekey.dir}/testlog" />

  <!-- directory of csv files -->
  <property name="csv.copy.dir" value="${compositekey.dir}/csv-copy" />
  <property name="data.dir" value="${open.dir}/luciddb/test/data" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-sql">
    <filter token="open.dir" value="${open.dir}"/>
    <filter token="csv.dir" value="${csv.copy.dir}"/>

    <!-- generate config.properties file -->
    <copy file="prop.${prop.source}" tofile="config.properties"
      overwrite="true" filtering="true">
      <filterset>
        <filtersfile file="prop.${prop.source}"/>
      </filterset>
    </copy>

    <!-- generate all sql files -->
    <copy todir="${gensql.dir}tmp" overwrite="true"
      filtering="true">
      <fileset dir="${compositekey.dir}">
        <include name="**/*.tmpl"/>
      </fileset>
      <mapper type="glob" from="*.tmpl" to="*"/>
      <filterset>
        <filtersfile file="config.properties"/>
      </filterset>
    </copy>
    <copy todir="${gensql.dir}/${prop.source}" overwrite="true"
      filtering="true">
      <fileset dir="${gensql.dir}tmp"/>
      <filterchain>
        <tokenfilter>
          <replaceregex pattern="^.*. . >.*@.*@.*" replace=". . . . . . . . > " flags="s"/>
          <replaceregex pattern="^.*@.*@.*" replace="" flags="s"/>
        </tokenfilter>
      </filterchain>
    </copy>
    <delete dir="${gensql.dir}tmp" quiet="true"/>

    <!-- copy over all other .sql and .ref files -->
    <copy todir="${gensql.dir}/${prop.source}">
      <fileset dir="${compositekey.dir}">
        <include name="**/*.sql"/>
        <include name="**/*.ref"/>
        <exclude name="gen/**"/>
      </fileset>
    </copy>
  </target>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>
    <!-- generate sql -->

    <foreach list="oracle,sqlserver,flatfile,csvjdbc"
      param="prop.source"
      target="gen-sql"/>
  </target>

  <target name="copy-csv">
    <sync todir="${csv.copy.dir}"
      overwrite="true"
      verbose="true"
      failonerror="true">
      <fileset dir="${data.dir}">
        <include name="bench100.csv"/>
      </fileset>
    </sync>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${compositekey.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${gensql.dir}"/>
    <delete dir="${bh.log.basedir}"/>
    <delete dir="${csv.copy.dir}"/>
    <delete file="config.properties"/>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="concurBackupRestore" basedir="." default="test">
  <dirname property="concurBackupRestore.dir" file="${ant.file.concurBackupRestore}" />

  <property name="open.dir" location="${concurBackupRestore.dir}/../../../../.." />
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />
  <!-- somewhat redundant but needed because the backup/restore test targets
       don't always inherit the properties in this file
  -->
  <property name="luciddb.dir" location="${open.dir}/luciddb" />
  <property name="build.init.properties" location="${concurBackupRestore.dir}/build.init.properties" />
  <import file="${luciddb.dir}/properties.xml" />

  <!-- directory where sql is generated -->
  <property name="gensql.dir" value="${concurBackupRestore.dir}/gen"/>

  <!-- directory of flat files -->
  <property name="ffsource.tpch.dir" value="${open.dir}/thirdparty/tpch/dataMultiProcess"/>
  <property name="ff.dir" value="${concurBackupRestore.dir}/ff" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <property name="testlog.dir" value="${concurBackupRestore.dir}"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>

    <!-- generate sql files -->
    <copy todir="${gensql.dir}" overwrite="true">
      <fileset dir="${concurBackupRestore.dir}" includes="*.tmpl"/>
      <filterset>
        <filter token="FFDIR" value="${ff.dir}"/>
        <filter token="TEST_DIR" value="${concurBackupRestore.dir}"/>
      </filterset>
      <globmapper from="*.tmpl" to="*"/>
    </copy>
    <copy todir="${gensql.dir}" overwrite="true">
      <fileset dir="${concurBackupRestore.dir}">
        <include name="*.sql"/>
        <include name="*.mtsql"/>
        <include name="*.ref"/>
      </fileset>
    </copy>
  </target>

  <target name="create-archive-dirs">
    <mkdir dir="${concurBackupRestore.dir}/fullArchive"/>
    <mkdir dir="${concurBackupRestore.dir}/fullArchive2"/>
  </target>

  <target name="test" depends="clean-test,create-archive-dirs">
    <antcall target="backup"/>
    <antcall target="restoreBackup"/>
    <antcall target="validateRestore"/>
    <antcall target="cancelBackup"/>
  </target>
  
  <target name="backup">
    <property name="bh.log.basedir" value="${testlog.dir}/bh-concurBackup" />
    <property file="run.properties"/>
    <blackhawk.fork
      basedir="${concurBackupRestore.dir}"
      testscript="backup.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="restoreBackup">
    <property name="bh.log.basedir" value="${testlog.dir}/bh-concurRestore" />
    <property file="run.properties"/>
    <ant dir="${open.dir}/luciddb" target="restoreCatalog"/>
    <blackhawk.fork
      basedir="${concurBackupRestore.dir}"
      testscript="restoreBackup.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="validateRestore">
    <property name="bh.log.basedir" value="${testlog.dir}/bh-concurValidate" />
    <property file="run.properties"/>
    <blackhawk.fork
      basedir="${concurBackupRestore.dir}"
      testscript="validateRestore.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="cancelBackup">
    <property name="bh.log.basedir" value="${testlog.dir}/bh-cancelBackup" />
    <property file="run.properties"/>
    <blackhawk.fork
      basedir="${concurBackupRestore.dir}"
      testscript="cancelBackup.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="create-db">
    <available file="${ff.dir}" type="dir" property="ff.created"/>
    <condition property="db.created">
      <available file="${ffsource.tpch.dir}/100M" type="dir"/>
    </condition>

    <if>
      <isset property="ff.created"/>
      <then/>
      <else>
        <if>
          <istrue value="${db.created}"/>
          <then/>
          <else>
            <exec executable="${thirdparty.dir}/tpch/createdbMultiProcess"
              dir="${thirdparty.dir}/tpch">
              <arg line="100M"/>
            </exec>
          </else>
        </if>
        <sync todir="${ff.dir}" verbose="true">
          <fileset dir="${ffsource.tpch.dir}/100M"/>
        </sync>
      </else>
    </if>

  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete file="${concurBackupRestore.dir}/run.properties"/>
    <delete dir="${ff.dir}"/>
  </target>

  <target name="clean-test">
    <delete dir="${gensql.dir}"/>
    <delete dir="${concurBackupRestore.dir}/bh-concurBackup"/>
    <delete dir="${concurBackupRestore.dir}/bh-concurRestore"/>
    <delete dir="${concurBackupRestore.dir}/bh-concurValidate"/>
    <delete dir="${concurBackupRestore.dir}/bh-cancelBackup"/>
    <delete dir="${concurBackupRestore.dir}/fullArchive"/>
    <delete dir="${concurBackupRestore.dir}/fullArchive2"/>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="concurrency" basedir="." default="test">
  <dirname property="concurrency.dir" file="${ant.file.concurrency}" />

  <property name="open.dir" location="${concurrency.dir}/../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${concurrency.dir}/testlog" />

  <taskdef name="foreach" classname="net.sf.antcontrib.logic.ForEach" classpath="${ant.classpath}"/>
  <taskdef name="if" classname="net.sf.antcontrib.logic.IfTask" classpath="${ant.classpath}"/>

  <!-- directory where sql is generated -->
  <property name="gensql.dir" value="${concurrency.dir}/gen" />

  <!-- directory of csv files -->
  <property name="csvsource.dir" value="${open.dir}/luciddbtestdata/csv_BENCH"/>
  <property name="csv.dir" value="${concurrency.dir}/csv" />
  <property name="csv.copy.dir" value="${concurrency.dir}/csv-copy" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

   <target name="gen-sql">
    <filter token="open.dir" value="${open.dir}"/>
    <filter token="csv.dir" value="${csv.copy.dir}"/>

    <!-- generate config.properties file -->
    <copy tofile="config.properties"
      overwrite="true" filtering="true">
      <fileset dir="${concurrency.dir}/fds">
        <include name="prop.${prop.source}"/>
      </fileset>
      <filterset>
        <filtersfile file="${concurrency.dir}/fds/prop.${prop.source}"/>
      </filterset>
    </copy>

    <!-- generate all sql files -->
    <copy todir="${gensql.dir}tmp" overwrite="true"
      filtering="true">
      <fileset dir="${concurrency.dir}/fds">
        <include name="**/*.tmpl"/>
      </fileset>
      <mapper type="glob" from="*.tmpl" to="${prop.source}*"/>
      <filterset>
        <filtersfile file="config.properties"/>
      </filterset>
    </copy>
    <copy todir="${concurrency.dir}/fds" overwrite="true"
      filtering="true">
      <fileset dir="${gensql.dir}tmp"/>
      <filterchain>
        <tokenfilter>
          <replaceregex pattern="^.*. . >.*@.*@.*" replace=". . . . . . . . > " flags="s"/>
          <replaceregex pattern="^.*@.*@.*" replace="" flags="s"/>
        </tokenfilter>
      </filterchain>
    </copy>
    <delete dir="${gensql.dir}tmp" quiet="true"/>

  </target>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>

    <!-- generate sql -->
    <foreach list="oracle,sqlserver,flatfile,csvjdbc"
      param="prop.source"
      target="gen-sql"/>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${concurrency.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="copy-csv">
    <available file="${csvsource.dir}" type="dir"
      property="raksha.available"/>
    <if>
      <isset property="raksha.available"/>
      <then>
        <!-- sync raksha <-> csv.dir -->
        <sync todir="${csv.dir}"
          overwrite="false"
          failonerror="false"
          verbose="true">
          <fileset dir="${csvsource.dir}"/>
        </sync>
      </then>
    </if>
    <available file="${csv.dir}" type="dir"
      property="csv.available"/>
    <if>
      <isset property="csv.available"/>
      <then>
        <!-- sync csv.dir <-> csv-copy.dir -->
        <sync todir="${csv.copy.dir}"
          overwrite="true"
          verbose="true"
          failonerror="true">
          <fileset dir="${csv.dir}"/>
        </sync>
        <!-- copy bcp -->
        <copy todir="${csv.copy.dir}" overwrite="true">
           <fileset dir="${concurrency.dir}">
            <include name="**/*.bcp"/>
          </fileset>
        </copy>
      </then>
      <else>
        <echo message="!! NO CSV FILES !!"/>
      </else>
    </if>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete dir="${csv.dir}"/>
    <delete file="run.properties"/>
    <ant dir="${concurrency.dir}/readwrite" target="clean"/>
    <ant dir="${concurrency.dir}/backupRestore" target="clean"/>
  </target>

  <target name="clean-each">
    <delete file="${concurrency.dir}/fds/${prop.source}creserver.sql"/>
    <delete file="${concurrency.dir}/fds/${prop.source}creserver.ref"/>
  </target>

  <target name="clean-test">
    <delete dir="${gensql.dir}"/>
    <delete dir="${bh.log.basedir}"/>
    <delete>
      <fileset dir="${concurrency.dir}" includes="*.log"/>
    </delete>
    <delete>
      <fileset dir="${concurrency.dir}/fds" includes="*.log"/>
    </delete>
    <delete>
      <fileset dir="${concurrency.dir}/local" includes="*.log"/>
    </delete>
    <delete dir="${csv.copy.dir}"/>
    <foreach list="oracle,sqlserver,flatfile,csvjdbc"
      param="prop.source"
      target="clean-each"/>
    <delete file="config.properties"/>
    <ant dir="${concurrency.dir}/readwrite" target="clean-test"/>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="rwconcurrency" basedir="." default="test">
  <dirname property="rwconcurrency.dir" file="${ant.file.rwconcurrency}" />

  <property name="open.dir" location="${rwconcurrency.dir}/../../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <!-- directory where sql is generated -->
  <property name="gensql.dir" value="${rwconcurrency.dir}/gen" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${rwconcurrency.dir}/testlog" />

  <!-- directory of flat files -->
  <property name="ffsource.dir" value="${open.dir}/thirdparty/tpch/dataMultiProcess"/>
  <property name="ff.dir" value="${rwconcurrency.dir}/ff"/>

  <!-- directory of big ref files -->
  <property name="bigrefsource.url" value="http://file01.lucidera.com/engineering/testdata/TPCH"/>

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <!-- First, create the files used for queries -->
  <target name="create-db">
    <condition property="db.created">
      <available file="${ffsource.dir}/${datasize}" type="dir"/>
    </condition>

    <if>
      <istrue value="${db.created}"/>
      <then/>
      <else>
        <exec executable="${thirdparty.dir}/tpch/createdbMultiProcess"
          dir="${thirdparty.dir}/tpch">
          <arg line="${datasize}"/>
        </exec>
      </else>
    </if>

    <!-- Generate 10 flatfiles for each table -->
    <condition property="db.created10">
      <available file="${ffsource.dir}/${datasize}-10" type="dir"/>
    </condition>
    <if>
      <istrue value="${db.created10}"/>
      <then/>
      <else>
        <exec executable="${thirdparty.dir}/tpch/createdbMultiProcess"
          dir="${thirdparty.dir}/tpch">
          <arg line="${datasize} 10"/>
        </exec>
      </else>
    </if>

    <!-- Then, create the files for updates -->
    <condition property="updateFiles.created">
      <available file="${ffsource.dir}/${datasize}-1/delete1.tbl" type="file"/>
    </condition>

    <if>
      <istrue value="${updateFiles.created}"/>
      <then/>
      <else>
        <exec executable="${thirdparty.dir}/tpch/createdbMultiProcess"
          dir="${thirdparty.dir}/tpch">
          <arg line="${datasize} 1 2"/>
        </exec>
      </else>
    </if>
    
    <!-- Copy over the query files -->
    <sync todir="${ff.dir}/${datasize}" verbose="true">
      <fileset dir="${ffsource.dir}/${datasize}"/>
    </sync>

    <!-- Copy over the 10 flatfiles for each table -->
    <copy todir="${ff.dir}/${datasize}" verbose="true">
      <fileset dir="${ffsource.dir}/${datasize}-10"/>
    </copy>

    <!-- Then, copy over the files used for updates -->
    <copy todir="${ff.dir}/${datasize}" verbose="true">
      <fileset dir="${ffsource.dir}/${datasize}-1"
        includes="*.tbl,delete*.bcp,lineitemu*.bcp,ordersu*.bcp"/>
    </copy>
  </target>

  <target name="gen-sql">
    <!-- copy over sql.tmpl and template reference files -->
    <copy todir="${gensql.dir}/${datasize.param}" overwrite="true">
      <fileset dir="${rwconcurrency.dir}">
        <include name="*.${datasize.param}"/>
        <include name="*.tmpl"/>
      </fileset>
      <compositemapper>
        <globmapper from="*.${datasize.param}" to="*.ref"/>
        <globmapper from="*.tmpl" to="*"/>
      </compositemapper>
      <filterset>
        <filter token="FFDIR" value="${ff.dir}/${datasize.param}"/>
        <filter token="DIR" value="${gensql.dir}/${datasize.param}"/>
      </filterset>
    </copy>

    <!-- copy over other sql and ref files -->
    <copy todir="${gensql.dir}/${datasize.param}" overwrite="true">
      <fileset dir="${rwconcurrency.dir}">
        <include name="*.sql"/>
        <include name="*.mtsql"/>
        <include name="*.ref"/>
      </fileset>
    </copy>

  </target>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>

    <!-- generate sql -->
    <foreach list="100M" param="datasize.param" target="gen-sql"/>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <property name="bh.filter.runDuration" value="short,medium,null"/> 
    <property file="run.properties"/>
    <blackhawk.fork
      basedir="${rwconcurrency.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete dir="${ff.dir}"/>
    <delete file="datasize"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${bh.log.basedir}"/>
    <delete dir="${gensql.dir}"/>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="constraints" basedir="." default="test">
  <dirname property="constraints.dir" file="${ant.file.constraints}" />

  <property name="open.dir" location="${constraints.dir}/../../../.." />
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${constraints.dir}/testlog" />

  <!-- directory where sql is generated -->
  <property name="gensql.dir" value="${constraints.dir}/gen"/>

  <!-- directory of flat files -->
  <property name="ffsource.tpch.dir" value="${open.dir}/thirdparty/tpch/dataMultiProcess"/>
  <property name="ffsource.bench.dir" value="/mnt/raksha/engineering/testdata/csv_BENCH"/>
  <property name="ff.dir" value="${constraints.dir}/ff" />

  <!-- directory for error logs -->
  <property name="errlog.dir" value="${constraints.dir}/logs" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>

    <!-- generate sql files -->
    <copy todir="${gensql.dir}" overwrite="true">
      <fileset dir="${constraints.dir}" includes="*.tmpl"/>
      <filterset>
        <filter token="FFDIR" value="${ff.dir}"/>
        <filter token="LOGDIR" value="${bh.log.basedir}"/>
        <filter token="ERRLOGDIR" value="${errlog.dir}"/>
      </filterset>
      <globmapper from="*.tmpl" to="*"/>
    </copy>
    <copy todir="${gensql.dir}" overwrite="true">
      <fileset dir="${constraints.dir}">
        <include name="*.sql"/>
        <include name="*.ref"/>
      </fileset>
    </copy>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${constraints.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="create-db">
    <available file="${ff.dir}/bench1m.csv" type="file" 
      property="bench.exists"/>
    <available file="${ffsource.bench.dir}" type="dir" 
      property="raksha.available"/>

    <antcall target="create-db-local"/>

    <if>
      <isset property="bench.exists"/>
      <then/>
      <else>
        <!-- copy bench over if raksha is available -->
        <if> 
          <isset property="raksha.available"/>
          <then>
          <copy todir="${ff.dir}" verbose="true">
            <fileset dir="${ffsource.bench.dir}" includes="bench1M.*"/>
          </copy>
          </then>
          <else>
            <echo message="!! NO REMOTE CSV FILES !!"/>
          </else>
        </if>
      </else>
    </if>

  </target>

  <target name="create-db-local">
    <available file="${ff.dir}" type="dir" property="ff.created"/>
    <condition property="db.created">
      <available file="${ffsource.tpch.dir}/100M" type="dir"/>
    </condition>

    <if>
      <isset property="ff.created"/>
      <then/>
      <else>
        <if>
          <istrue value="${db.created}"/>
          <then/>
          <else>
            <exec executable="${thirdparty.dir}/tpch/createdbMultiProcess"
              dir="${thirdparty.dir}/tpch">
              <arg line="100M"/>
            </exec>
          </else>
        </if>
        <sync todir="${ff.dir}" verbose="true">
          <fileset dir="${ffsource.tpch.dir}/100M"/>
        </sync>
      </else>
    </if>

  </target>


  <target name="clean">
    <antcall target="clean-test"/>
    <delete file="${constraints.dir}/run.properties"/>
    <delete dir="${ff.dir}"/>
    <delete file="datasize"/>
  </target>

  <target name="clean-test">
    <delete dir="${gensql.dir}"/>
    <delete dir="${bh.log.basedir}"/>
    <delete file="${ff.dir}/bench1M.bcp"/>
    <delete> 
      <fileset dir="${errlog.dir}" excludes="Summary.bcp"/>
    </delete>
  </target>

</project>
    
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="conv_types" basedir="." default="test">
  <dirname property="conv_types.dir" file="${ant.file.conv_types}" />

  <property name="open.dir" location="${conv_types.dir}/../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties" />

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${conv_types.dir}/testlog" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${conv_types.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <ant dir="conv_character" target="clean"/>
    <ant dir="conv_numeric" target="clean"/>
    <ant dir="conv_datetime" target="clean"/>
    <ant dir="conv_long" target="clean"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${bh.log.basedir}"/>
    <ant dir="conv_character" target="clean-test"/>
    <ant dir="conv_numeric" target="clean-test"/>
    <ant dir="conv_datetime" target="clean-test"/>
    <ant dir="conv_long" target="clean-test"/>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="conv_char" basedir="." default="test">
  <dirname property="conv_char.dir" file="${ant.file.conv_char}" />

  <property name="open.dir" location="${conv_char.dir}/../../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${conv_char.dir}/testlog" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${conv_char.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${bh.log.basedir}"/>
    <delete>
      <fileset dir="${conv_char.dir}" includes="*.log"/>
    </delete>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="conv_datetime" basedir="." default="test">
  <dirname property="conv_datetime.dir" file="${ant.file.conv_datetime}" />

  <property name="open.dir" location="${conv_datetime.dir}/../../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${conv_datetime.dir}/testlog" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${conv_datetime.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${bh.log.basedir}"/>
    <delete>
      <fileset dir="${conv_datetime.dir}" includes="*.log"/>
    </delete>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="conv_long" basedir="." default="test">
  <dirname property="conv_long.dir" file="${ant.file.conv_long}" />

  <property name="open.dir" location="${conv_long.dir}/../../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${conv_long.dir}/testlog" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${conv_long.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${bh.log.basedir}"/>
    <delete>
      <fileset dir="${conv_long.dir}" includes="*.log"/>
    </delete>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="conv_numeric" basedir="." default="test">
  <dirname property="conv_numeric.dir" file="${ant.file.conv_numeric}" />

  <property name="open.dir" location="${conv_numeric.dir}/../../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${conv_numeric.dir}/testlog" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${conv_numeric.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${bh.log.basedir}"/>
    <delete>
      <fileset dir="${conv_numeric.dir}" includes="*.log"/>
    </delete>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="benchmark" basedir="." default="test">
  <dirname property="datatypes.dir" file="${ant.file.datatypes}" />

  <property name="open.dir" location="${datatypes.dir}/../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <taskdef name="foreach" classname="net.sf.antcontrib.logic.ForEach" classpath="${ant.classpath}"/>
  <taskdef name="if" classname="net.sf.antcontrib.logic.IfTask" classpath="${ant.classpath}"/>

  <!-- directory where sql is generated -->
  <property name="gensql.dir" value="${datatypes.dir}/gen" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${datatypes.dir}/testlog" />

  <!-- directory of csv files -->
  <property name="csv.copy.dir" value="${datatypes.dir}/csv-copy" />
  <property name="data.dir" value="${open.dir}/luciddb/test/data" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-sql">
    <filter token="open.dir" value="${open.dir}"/>
    <filter token="datatypes.dir" value="${datatypes.dir}"/>

    <!-- generate config.properties file -->
    <copy file="prop.${prop.source}" tofile="config.properties"
      overwrite="true" filtering="true">
      <filterset>
        <filtersfile file="prop.${prop.source}"/>
      </filterset>
    </copy>

    <!-- generate all sql files -->
    <copy todir="${gensql.dir}tmp" overwrite="true"
      filtering="true">
      <fileset dir="${datatypes.dir}">
        <include name="**/*.tmpl"/>
        <include name="**/*.${prop.source}"/>
      </fileset>
      <compositemapper>
        <globmapper from="*.tmpl" to="*"/>
        <globmapper from="*.${prop.source}" to="*"/>
      </compositemapper>
      <filterset>
        <filtersfile file="config.properties"/>
      </filterset>
    </copy>
    <copy todir="${gensql.dir}/${prop.source}" overwrite="true"
      filtering="true">
      <fileset dir="${gensql.dir}tmp"/>
      <filterchain>
        <tokenfilter>
          <replaceregex pattern="^.*. . >.*@.*@.*" replace=". . . . . . . . > " flags="s"/>
          <replaceregex pattern="^.*@.*@.*" replace="" flags="s"/>
        </tokenfilter>
      </filterchain>
    </copy>
    <delete dir="${gensql.dir}tmp" quiet="true"/>

    <!-- copy over all other .sql and .ref files -->
    <copy todir="${gensql.dir}/${prop.source}">
      <fileset dir="${datatypes.dir}">
        <include name="**/*.sql"/>
        <include name="**/*.ref"/>
        <exclude name="gen/**"/>
      </fileset>
    </copy>
  </target>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>

    <!-- generate sql -->
    <foreach list="csvjdbc,flatfile,oracle,sqlserver"
      param="prop.source"
      target="gen-sql"/>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${datatypes.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="copy-csv">
    <sync todir="${csv.copy.dir}"
      overwrite="true"
      verbose="true"
      failonerror="true">
      <fileset dir="${data.dir}">
        <include name="blob.*"/>
        <include name="DEPT.csv"/>
        <include name="EMP.csv"/>
        <include name="PRODUCTS.csv"/>
        <include name="SALES.csv"/>
        <include name="types.*"/>
      </fileset>
    </sync>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${gensql.dir}"/>
    <delete dir="${bh.log.basedir}"/>
    <delete dir="${csv.copy.dir}"/>
    <delete file="config.properties"/>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="distribution" basedir="." default="test">
  <dirname property="distribution.dir" file="${ant.file.distribution}" />

  <property name="open.dir" location="${distribution.dir}/../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${distribution.dir}/testlog" />

  <!-- directory of csv files -->
  <property name="csvsource.dir" value="${open.dir}/luciddbtestdata/csv_BENCH"/>
  <property name="csv.dir" value="${distribution.dir}/csv" />
  <property name="csv.copy.dir" value="${distribution.dir}/csv-copy" />
  <property name="data.dir" value="${open.dir}/luciddb/test/data" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>

    <!-- generate sql -->
    <copy todir="${distribution.dir}" overwrite="true">
      <fileset dir="${distribution.dir}" includes="*.tmpl"/>
      <filterset>
        <filter token="DIR" value="${csv.copy.dir}"/>
      </filterset>
      <globmapper from="*.tmpl" to="*"/>
    </copy>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${distribution.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="copy-csv">
    <available file="${csvsource.dir}" type="dir"
      property="raksha.available"/>
    <if>
      <isset property="raksha.available"/>
      <then>
        <!-- sync raksha <-> csv.dir -->
        <sync todir="${csv.dir}"
          overwrite="false"
          failonerror="false"
          verbose="true">
          <fileset dir="${csvsource.dir}"/>
        </sync>
      </then>
    </if>
    <available file="${csv.dir}" type="dir"
      property="csv.available"/>
    <if>
      <isset property="csv.available"/>
      <then>
        <!-- sync csv.dir <-> csv-copy.dir -->
        <sync todir="${csv.copy.dir}"
          overwrite="true"
          verbose="true"
          failonerror="true">
          <fileset dir="${csv.dir}"/>
        </sync>
      </then>
      <else>
        <!-- sync data.dir <-> csv-copy.dir -->
        <sync todir="${csv.copy.dir}"
          overwrite="true"
          verbose="true"
          failonerror="true">
          <fileset dir="${data.dir}" includes="bench100.csv"/>
        </sync>
        <echo message="!! NO REMOTE CSV FILES !!"/>
      </else>
    </if>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete dir="${csv.dir}"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete>
      <fileset dir="${distribution.dir}">
        <include name="creschema.sql"/>
        <include name="creschema.ref"/>
      </fileset>
    </delete>
    <delete dir="${bh.log.basedir}"/>
    <delete>
      <fileset dir="${distribution.dir}" includes="*.log"/>
    </delete>
    <delete dir="${csv.copy.dir}"/>
  </target>

  <target name="clean-csv" depends="clean">
    <delete dir="${csv.dir}"/>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="dml_delete" basedir="." default="test">
  <dirname property="dml_delete.dir" file="${ant.file.dml_delete}" />

  <property name="open.dir" location="${dml_delete.dir}/../../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />

  <import file="${open.dir}/farrago/buildMacros.xml" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${dml_delete.dir}/testlog" />

  <!-- directories for csv data files -->
  <property name="csv.dir" value="${dml_delete.dir}/csv" />
  <property name="csvsource.dir" value="${open.dir}/luciddbtestdata/csv_BENCH"/>

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>

     <!-- generate sql -->
    <copy todir="${dml_delete.dir}" overwrite="true">
      <fileset dir="${dml_delete.dir}" includes="*.tmpl"/>
      <filterset>
        <filter token="DIR" value="${csv.dir}"/>
      </filterset>
      <globmapper from="*.tmpl" to="*"/>
    </copy>

  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${dml_delete.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="copy-csv">
    <available file="${csvsource.dir}" type="dir"
      property="raksha.available"/>
    <if>
      <isset property="raksha.available"/>
      <then>
        <!-- sync raksha <-> csv.dir -->
        <sync todir="${csv.dir}"
          overwrite="false"
          failonerror="false"
          verbose="true">
          <fileset dir="${csvsource.dir}"/>
        </sync>
      </then>
    </if>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete dir="${csv.dir}"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${bh.log.basedir}"/>
    <delete>
      <fileset dir="${dml_delete.dir}" includes="*.log"/>
    </delete>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="dml_merge" basedir="." default="test">
  <dirname property="dml_merge.dir" file="${ant.file.dml_merge}" />

  <property name="open.dir" location="${dml_merge.dir}/../../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />

  <import file="${open.dir}/farrago/buildMacros.xml" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${dml_merge.dir}/testlog" />

  <!-- directories for csv data files -->
  <property name="csv.copy.dir" value="${dml_merge.dir}/csv-copy" />
  <property name="data.dir" value="${open.dir}/luciddb/test/data" />
  <property name="csvsource.dir" value="${open.dir}/luciddbtestdata/csv_BENCH"/>
  <property name="csv.dir" value="${dml_merge.dir}/csv" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>

    <!-- generate sql -->
    <copy todir="${dml_merge.dir}" overwrite="true">
      <fileset dir="${dml_merge.dir}" includes="*.tmpl"/>
      <filterset>
        <filter token="DIR" value="${csv.copy.dir}"/>
      </filterset>
      <globmapper from="*.tmpl" to="*"/>
    </copy>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${dml_merge.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="test-sanity" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${dml_merge.dir}"
      testscript="sanity.xml"
      classpathref="test.classpath"/>
  </target>

  <target name="copy-csv">
    <available file="${csvsource.dir}" type="dir"
      property="raksha.available"/>
    <if>
      <isset property="raksha.available"/>
      <then>
        <!-- sync raksha <-> csv.dir -->
        <sync todir="${csv.dir}"
          overwrite="false"
          failonerror="false"
          verbose="true">
          <fileset dir="${csvsource.dir}"/>
        </sync>
      </then>
    </if>
    <available file="${csv.dir}" type="dir"
      property="csv.available"/>
    <if>
      <isset property="csv.available"/>
      <then>
        <!-- sync csv.dir <-> csv-copy.dir -->
        <sync todir="${csv.copy.dir}"
          overwrite="true"
          verbose="true"
          failonerror="true">
          <fileset dir="${csv.dir}"/>
          <fileset dir="${data.dir}">
            <include name="DEPT.csv"/>
            <include name="EMP.csv"/>
            <include name="PRODUCTS.csv"/>
            <include name="SALES.csv"/>
            <include name="LOCATION.csv"/>
            <include name="CUSTOMERS.csv"/>
            <include name="SALES.bcp"/>
            <include name="PRODUCTS.bcp"/>
          </fileset>
        </sync>
        <!-- copy bcp -->
        <copy todir="${csv.copy.dir}" overwrite="true">
           <fileset dir="${dml_merge.dir}">
            <include name="*.bcp"/>
          </fileset>
        </copy>
      </then>
      <else>
        <echo message="!! NO CSV FILES !!"/>
      </else>
    </if>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete dir="${csv.dir}"/>
    <delete file="run.properties"/>
  </target>


  <target name="clean-test">
    <delete dir="${bh.log.basedir}"/>
    <delete>
      <fileset dir="${dml_merge.dir}">
        <include name="*.log"/>
        <include name="download.ref"/>
        <include name="download.sql"/>
      </fileset>
    </delete>
    <delete dir="${csv.copy.dir}"/>
  </target>

  <target name="clean-csv">
    <antcall target="clean"/>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="flatfile" basedir="." default="test">
  <dirname property="flatfile.dir" file="${ant.file.flatfile}" />

  <property name="open.dir" location="../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />

  <import file="${open.dir}/farrago/buildMacros.xml" />  


  <!-- directory where sql is generated -->
  <property name="gensql.dir" value="${flatfile.dir}/gen" />
  <!-- directory where flatfiles are stored -->
  <property name="flatfiles.dir" value="${flatfile.dir}/flatfiles" />
  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${flatfile.dir}/testlog" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>    

    <!-- generate config.properties file -->
    <filter token="flatfiles.dir" value="${flatfiles.dir}"/>
    <copy file="prop.flatfile" tofile="config.properties"
      overwrite="true" filtering="true">
      <filterset>
        <filtersfile file="prop.flatfile"/>
      </filterset>
    </copy>

    <!-- generate sql -->
    <copy todir="${gensql.dir}" overwrite="true">
      <fileset dir="${flatfile.dir}" includes="*.tmpl"/>
      <globmapper from="*.tmpl" to="*"/>
      <filterset>
        <filtersfile file="config.properties"/>          
      </filterset>
    </copy>
    <copy todir="${gensql.dir}" overwrite="true">
      <fileset dir="${flatfile.dir}">
        <include name="*.sql"/>
        <include name="*.ref"/>
      </fileset>
    </copy>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${flatfile.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${bh.log.basedir}"/>
    <delete dir="${gensql.dir}"/>
    <delete file="config.properties"/>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="hashjoin" basedir="." default="test">
  <dirname property="hashjoin.dir" file="${ant.file.hashjoin}" />

  <property name="open.dir" location="${hashjoin.dir}/../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${hashjoin.dir}/testlog" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${hashjoin.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete>
      <fileset dir="${hashjoin.dir}" includes="*.log"/>
    </delete>
    <delete dir="${bh.log.basedir}"/>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="mbean" basedir="." default="test">
  <dirname property="mbeantest.dir" file="${ant.file.mbean}"/>
  <property name="open.dir" location="${mbeantest.dir}/../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${mbeantest.dir}/testlog" />
  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${open.dir}/luciddb/plugin/luciddb-mbean.jar"/>
    <pathelement path="${open.dir}/luciddb/plugin/applib.jar"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
     <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${mbeantest.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${bh.log.basedir}"/>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="mondrian" basedir="." default="test">
  <dirname property="mondrian.test.dir" file="${ant.file.mondrian}" />

  <property name="open.dir" location="${mondrian.test.dir}/../../../.."/>

<fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <!-- directory where sql is generated -->
  <property name="gensql.dir" value="${mondrian.test.dir}/gen" />

  <import file="${open.dir}/farrago/buildMacros.xml" />

  <taskdef name="foreach" classname="net.sf.antcontrib.logic.ForEach" classpath="${ant.classpath}"/>
  <taskdef name="if" classname="net.sf.antcontrib.logic.IfTask" classpath="${ant.classpath}"/>

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${mondrian.test.dir}/testlog" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-sql">
    <filter token="open.dir" value="${open.dir}"/>
    <filter token="csv.dir" value="${csv.copy.dir}"/>

    <!-- generate config.properties file -->
    <copy file="prop.${prop.source}" tofile="config.properties"
      overwrite="true" filtering="true">
      <filterset>
        <filtersfile file="prop.${prop.source}"/>
      </filterset>
    </copy>

    <!-- generate all sql files -->
    <copy todir="${gensql.dir}tmp" overwrite="true"
      filtering="true">
      <fileset dir="${mondrian.test.dir}">
        <include name="**/*.tmpl"/>
      </fileset>
      <mapper type="glob" from="*.tmpl" to="*"/>
      <filterset>
        <filtersfile file="config.properties"/>
      </filterset>
    </copy>
    <copy todir="${gensql.dir}/${prop.source}" overwrite="true"
      filtering="true">
      <fileset dir="${gensql.dir}tmp"/>
      <filterchain>
        <tokenfilter>
          <replaceregex pattern="^.*. . >.*@.*@.*" replace=". . . . . . . . > " flags="s"/>
          <replaceregex pattern="^.*@.*@.*" replace="" flags="s"/>
        </tokenfilter>
      </filterchain>
    </copy>
    <delete dir="${gensql.dir}tmp" quiet="true"/>

    <!-- copy over all other .sql and .ref files -->
    <copy todir="${gensql.dir}/${prop.source}">
      <fileset dir="${mondrian.test.dir}">
        <include name="**/*.sql"/>
        <include name="**/*.ref"/>
        <exclude name="gen/**"/>
      </fileset>
    </copy>
  </target>


  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>

    <!-- generate sql -->
<!--        <foreach list="oracle,sqlserver,flatfile,csvjdbc" -->
    <foreach list="sqlserver"
      param="prop.source"
      target="gen-sql"/>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${mondrian.test.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${gensql.dir}"/>
    <delete dir="${bh.log.basedir}"/>
    <delete file="config.properties"/>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="mysql" basedir="." default="test">
  <!-- N.B.: mysql.dir is a property in farrago/buildMacros.xml, don't reuse
       that name here or we break the classpath. -->
  <dirname property="mysqltest.dir" file="${ant.file.mysql}" />

  <property name="open.dir" location="${mysqltest.dir}/../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <taskdef name="if" classname="net.sf.antcontrib.logic.IfTask" classpath="${ant.classpath}"/>

  <!-- directory where sql is generated -->
  <property name="gensql.dir" value="${mysqltest.dir}/gen" />
  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${mysqltest.dir}/testlog" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>

    <!-- generate config.properties file -->
    <filter token="open.dir" value="${open.dir}"/>
    <copy file="prop.mysql" tofile="config.properties"
      overwrite="true" filtering="true">
      <filterset>
        <filtersfile file="prop.mysql"/>
      </filterset>
    </copy>

    <!-- generate sql -->
    <copy todir="${gensql.dir}" overwrite="true">
      <fileset dir="${mysqltest.dir}" includes="*.tmpl"/>
      <globmapper from="*.tmpl" to="*"/>
      <filterset>
        <filtersfile file="config.properties"/>
      </filterset>
    </copy>
    <copy todir="${gensql.dir}" overwrite="true">
      <fileset dir="${mysqltest.dir}">
        <include name="*.sql"/>
        <include name="*.ref"/>
        <exclude name="mysql.init.sql"/>
      </fileset>
    </copy>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${mysqltest.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${gensql.dir}"/>
    <delete dir="${bh.log.basedir}"/>
    <delete file="config.properties"/>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="numerics" basedir="." default="test">
  <dirname property="numerics.dir" file="${ant.file.numerics}" />

  <property name="open.dir" location="${numerics.dir}/../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />

  <import file="${open.dir}/farrago/buildMacros.xml" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${numerics.dir}/testlog" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${numerics.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${bh.log.basedir}"/>
    <delete>
      <fileset dir="${numerics.dir}" includes="*.log"/>
    </delete>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="oracle" basedir="." default="test">
  <dirname property="oracle.dir" file="${ant.file.oracle}" />

  <property name="open.dir" location="${oracle.dir}/../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <taskdef name="if" classname="net.sf.antcontrib.logic.IfTask" classpath="${ant.classpath}"/>

  <!-- directory where sql is generated -->
  <property name="gensql.dir" value="${oracle.dir}/gen" />
  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${oracle.dir}/testlog" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>

    <!-- generate config.properties file -->
    <filter token="open.dir" value="${open.dir}"/>
    <copy file="prop.oracle" tofile="config.properties"
      overwrite="true" filtering="true">
      <filterset>
        <filtersfile file="prop.oracle"/>
      </filterset>
    </copy>

    <!-- generate sql -->
    <copy todir="${gensql.dir}" overwrite="true">
      <fileset dir="${oracle.dir}" includes="*.tmpl"/>
      <globmapper from="*.tmpl" to="*"/>
      <filterset>
        <filtersfile file="config.properties"/>
      </filterset>
    </copy>
    <copy todir="${gensql.dir}" overwrite="true">
      <fileset dir="${oracle.dir}">
        <include name="*.sql"/>
        <include name="*.ref"/>
      </fileset>
    </copy>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${oracle.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${gensql.dir}"/>
    <delete dir="${bh.log.basedir}"/>
    <delete file="config.properties"/>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="scripting" basedir="." default="test">
  <dirname property="scripting.dir" file="${ant.file.scripting}" />

  <property name="open.dir" location="${scripting.dir}/../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${scripting.dir}/testlog" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${scripting.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${bh.log.basedir}"/>
    <delete>
      <fileset dir="${scripting.dir}" includes="*.log"/>
    </delete>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="setops" basedir="." default="test">
  <dirname property="setops.dir" file="${ant.file.setops}" />

  <property name="open.dir" location="../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />

  <import file="${open.dir}/farrago/buildMacros.xml" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${setops.dir}/testlog" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${setops.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${bh.log.basedir}"/>
    <delete>
      <fileset dir="${setops.dir}" includes="*.log"/>
    </delete>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="shortreg" basedir="." default="test">
  <dirname property="shortreg.dir" file="${ant.file.shortreg}" />

  <property name="open.dir" location="${shortreg.dir}/../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <taskdef name="foreach" classname="net.sf.antcontrib.logic.ForEach" classpath="${ant.classpath}"/>
  <taskdef name="if" classname="net.sf.antcontrib.logic.IfTask" classpath="${ant.classpath}"/>

  <!-- directory where sql is generated -->
  <property name="gensql.dir" value="${shortreg.dir}/gen" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${shortreg.dir}/testlog" />

  <!-- directory of csv files -->
  <property name="csv.copy.dir" value="${shortreg.dir}/csv-copy" />
  <property name="data.dir" value="${open.dir}/luciddb/test/data" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-sql">
    <filter token="open.dir" value="${open.dir}"/>

    <!-- generate config.properties file -->
    <copy file="prop.${prop.source}" tofile="config.properties"
      overwrite="true" filtering="true">
      <filterset>
        <filtersfile file="prop.${prop.source}"/>
      </filterset>
    </copy>

    <!-- generate all sql files -->
    <copy todir="${gensql.dir}tmp" overwrite="true"
      filtering="true">
      <fileset dir="${shortreg.dir}">
        <include name="**/*.tmpl"/>
      </fileset>
      <mapper type="glob" from="*.tmpl" to="*"/>
      <filterset>
        <filtersfile file="config.properties"/>
      </filterset>
    </copy>
    <copy todir="${gensql.dir}/${prop.source}" overwrite="true"
      filtering="true">
      <fileset dir="${gensql.dir}tmp"/>
      <filterchain>
        <tokenfilter>
          <replaceregex pattern="^.*. . >.*@.*@.*" replace=". . . . . . . . > " flags="s"/>
          <replaceregex pattern="^.*@.*@.*" replace="" flags="s"/>
        </tokenfilter>
      </filterchain>
    </copy>
    <delete dir="${gensql.dir}tmp" quiet="true"/>

    <!-- copy over all other .sql and .ref files -->
    <copy todir="${gensql.dir}/${prop.source}">
      <fileset dir="${shortreg.dir}">
        <include name="*.sql"/>
        <include name="*.ref"/>
      </fileset>
    </copy>
  </target>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>

    <!-- generate sql -->
    <foreach list="oracle,sqlserver,flatfile"
      param="prop.source"
      target="gen-sql"/>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${shortreg.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="copy-csv">
    <sync todir="${csv.copy.dir}"
      overwrite="true"
      verbose="true"
      failonerror="true">
      <fileset dir="${data.dir}">
        <include name="DEPT.csv"/>
        <include name="EMP.csv"/>
        <include name="PRODUCTS.csv"/>
        <include name="SALES.csv"/>
        <include name="LOCATION.csv"/>
        <include name="CUSTOMERS.csv"/>
      </fileset>
    </sync>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${gensql.dir}"/>
    <delete dir="${bh.log.basedir}"/>
    <delete dir="${csv.copy.dir}"/>
    <delete file="config.properties"/>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="sqbm" basedir="." default="test">
  <dirname property="sqbm.dir" file="${ant.file.sqbm}" />

  <property name="open.dir" location="${sqbm.dir}/../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${sqbm.dir}/testlog" />

  <!-- directory of csv files -->
  <property name="csvsource.dir" value="${open.dir}/luciddbtestdata/csv_BENCH"/>
  <property name="csv.dir" value="${sqbm.dir}/csv" />
  <property name="csv.copy.dir" value="${sqbm.dir}/csv-copy" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>

    <!-- generate sql -->
    <copy todir="${sqbm.dir}" overwrite="true">
      <fileset dir="${sqbm.dir}" includes="*.tmpl"/>
      <filterset>
        <filter token="DIR" value="${csv.copy.dir}"/>
      </filterset>
      <globmapper from="*.tmpl" to="*"/>
    </copy>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${sqbm.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="copy-csv">
    <available file="${csvsource.dir}" type="dir"
      property="raksha.available"/>
    <if>
      <isset property="raksha.available"/>
      <then>
        <!-- sync raksha <-> csv.dir -->
        <sync todir="${csv.dir}"
          overwrite="false"
          failonerror="false"
          verbose="true">
          <fileset dir="${csvsource.dir}" includes="bench1M.csv"/>
        </sync>
      </then>
    </if>
    <available file="${csv.dir}" type="dir"
      property="csv.available"/>
    <if>
      <isset property="csv.available"/>
      <then>
        <!-- sync csv.dir <-> csv-copy.dir -->
        <sync todir="${csv.copy.dir}"
          overwrite="true"
          verbose="true"
          failonerror="true">
          <fileset dir="${csv.dir}"/>
        </sync>
      </then>
      <else>
        <echo message="!! NO CSV FILES !!"/>
      </else>
    </if>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete dir="${csv.dir}"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${bh.log.basedir}"/>
    <delete>
      <fileset dir="${sqbm.dir}" includes="*.log"/>
    </delete>
    <delete dir="${gensql.dir}"/>
    <delete>
      <fileset dir="${sqbm.dir}" includes="benchins1m_idx.sql"/>
      <fileset dir="${sqbm.dir}" includes="benchins1m_idx.ref"/>
    </delete>
    <delete dir="${csv.copy.dir}"/>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="sqlserver" basedir="." default="test">
  <dirname property="sqlserver.dir" file="${ant.file.sqlserver}" />

  <property name="open.dir" location="${sqlserver.dir}/../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <taskdef name="if" classname="net.sf.antcontrib.logic.IfTask" classpath="${ant.classpath}"/>

  <!-- directory where sql is generated -->
  <property name="gensql.dir" value="${sqlserver.dir}/gen" />
  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${sqlserver.dir}/testlog" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>

    <!-- generate config.properties file -->
    <filter token="open.dir" value="${open.dir}"/>
    <copy file="prop.sqlserver" tofile="config.properties"
      overwrite="true" filtering="true">
      <filterset>
        <filtersfile file="prop.sqlserver"/>
      </filterset>
    </copy>

    <!-- generate sql -->
    <copy todir="${gensql.dir}" overwrite="true">
      <fileset dir="${sqlserver.dir}" includes="*.tmpl"/>
      <globmapper from="*.tmpl" to="*"/>
      <filterset>
        <filtersfile file="config.properties"/>
      </filterset>
    </copy>
    <copy todir="${gensql.dir}" overwrite="true">
      <fileset dir="${sqlserver.dir}">
        <include name="*.sql"/>
        <include name="*.ref"/>
      </fileset>
    </copy>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${sqlserver.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${gensql.dir}"/>
    <delete dir="${bh.log.basedir}"/>
    <delete file="config.properties"/>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="ssb" basedir="." default="test">
  <dirname property="ssb.dir" file="${ant.file.ssb}" />

  <property name="open.dir" location="${ssb.dir}/../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <taskdef name="foreach" classname="net.sf.antcontrib.logic.ForEach" classpath="${ant.classpath}"/>
  <taskdef name="if" classname="net.sf.antcontrib.logic.IfTask" classpath="${ant.classpath}"/>
  <taskdef name="switch" classname="net.sf.antcontrib.logic.Switch" classpath="${ant.classpath}"/>

  <!-- directory where sql is generated -->
  <property name="gensql.dir" value="${ssb.dir}/gen" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${ssb.dir}/testlog" />

  <!-- directory of flat files -->
  <property name="ffsource.dir" value="${open.dir}/thirdparty/ssb/gen"/>
  <property name="ff.dir" value="${ssb.dir}/ff"/>

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="set-sf">
    <switch value="${datasize}">
      <case value="100M"> <property name="sf" value="0.1"/> </case>
      <case value="1G"> <property name="sf" value="1"/> </case>
      <case value="10G"> <property name="sf" value="10"/> </case>
      <case value="30G"> <property name="sf" value="30"/> </case>
      <case value="100G"> <property name="sf" value="100"/> </case>
      <case value="300G"> <property name="sf" value="300"/> </case>
      <case value="1000G"> <property name="sf" value="1000"/> </case>
      <case value="3000G"> <property name="sf" value="3000"/> </case>
      <case value="10000G"> <property name="sf" value="10000"/> </case>
      <case value="30000G"> <property name="sf" value="30000"/> </case>
      <case value="100000G"> <property name="sf" value="100000"/> </case>
    </switch>
  </target>

  <target name="gen-sql" depends="set-sf">
    <!-- copy over sql.tmpl, and template reference and shell script files -->
    <copy todir="${gensql.dir}/${datasize.param}" overwrite="true">
      <fileset dir="${ssb.dir}">
        <include name="*.${datasize.param}"/>
        <include name="*.tmpl"/>
        <include name="*.sh"/>
      </fileset>
      <compositemapper>
        <globmapper from="*.${datasize.param}.sh" to="*.sh"/>
        <globmapper from="*.${datasize.param}" to="*.ref"/>
        <globmapper from="*.tmpl" to="*"/>
      </compositemapper>
      <filterset>
        <filter token="FFDIR" value="${ff.dir}/${datasize.param}"/>
        <filter token="DIR" value="${gensql.dir}/${datasize.param}"/>
        <filter token="SF" value="${sf}"/>
      </filterset>
    </copy>

    <!-- copy over other sql and ref files -->
    <copy todir="${gensql.dir}/${datasize.param}" overwrite="true">
      <fileset dir="${ssb.dir}">
        <include name="*.sql"/>
        <include name="*.ref"/>
      </fileset>
    </copy>

    <!-- change permissions on executables -->
    <chmod perm="u+x">
      <fileset dir="${gensql.dir}/${datasize.param}">
        <include name="*.sh"/>
      </fileset>
    </chmod>

  </target>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>

    <!-- generate sql -->
    <foreach list="${datasize}" param="datasize.param" target="gen-sql"/>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${ssb.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="create-db">
    <condition property="db.created">
      <available file="${ffsource.dir}/${datasize}" type="dir"/>
    </condition>

    <if>
      <istrue value="${db.created}"/>
      <then/>
      <else>
        <exec executable="${thirdparty.dir}/ssb/createdb"
          dir="${thirdparty.dir}/ssb">
          <arg line="${datasize}"/>
        </exec>
      </else>
    </if>

    <sync todir="${ff.dir}/${datasize}" verbose="true">
      <fileset dir="${ffsource.dir}/${datasize}"/>
    </sync>
  </target>

  <target name="alloc-space" depends="gen-all-sql">
    <!-- Make sure the server isn't running by doing a dummy extend of a
         single page.  The server can't be running while file space is
         being extended.
    -->
    <exec executable="${open.dir}/luciddb/lucidDbAllocFile" failonerror="true">
      <arg value="--append-pages=1"/>
      <arg value="${open.dir}/luciddb/catalog/db.dat"/>
    </exec>
    <ant dir="${open.dir}/luciddb" target="restoreCatalog"/>
    <exec executable="${gensql.dir}/${datasize}/allocSpace.sh"
      failonerror="true"/>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete dir="${ff.dir}"/>
    <delete file="datasize"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${bh.log.basedir}"/>
    <delete dir="${gensql.dir}"/>
  </target>

  <target name="clean-ff" depends="clean">
    <delete dir="${ff.dir}"/>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="sys" basedir="." default="test">
  <dirname property="sys.dir" file="${ant.file.sys}"/>
  <property name="open.dir" location="${sys.dir}/../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${sys.dir}/testlog" />

  <!-- directory of csv files -->
  <property name="data.dir" value="${open.dir}/luciddb/test/data"/>
  <property name="csv.copy.dir" value="${sys.dir}/csv-copy"/>

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>
    <!-- generate sql -->
    <copy todir="${sys.dir}" overwrite="true">
      <fileset dir="${sys.dir}" includes="*.tmpl"/>
      <filterset>
        <filter token="DIR" value="${csv.copy.dir}"/>
      </filterset>
      <globmapper from="*.tmpl" to="*"/>
    </copy>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${sys.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="copy-csv">
    <sync todir="${csv.copy.dir}"
      overwrite="true"
      verbose="true"
      failonerror="true">
      <fileset dir="${data.dir}">
        <include name="EMP.csv"/>
      </fileset>
    </sync>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${bh.log.basedir}"/>
    <delete>
      <fileset dir="${sys.dir}" includes="*.log"/>
    </delete>
    <delete file="dbaViews.sql"/>
    <delete file="dbaViews.ref"/>
    <delete file="flatfileWrapper.sql"/>
    <delete file="flatfileWrapper.ref"/>
    <delete dir="${csv.copy.dir}"/>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="tpch" basedir="." default="test">
  <dirname property="tpch.dir" file="${ant.file.tpch}" />

  <property name="open.dir" location="${tpch.dir}/../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <taskdef name="foreach" classname="net.sf.antcontrib.logic.ForEach" classpath="${ant.classpath}"/>
  <taskdef name="if" classname="net.sf.antcontrib.logic.IfTask" classpath="${ant.classpath}"/>
  <taskdef name="switch" classname="net.sf.antcontrib.logic.Switch" classpath="${ant.classpath}"/>

  <!-- directory where sql is generated -->
  <property name="gensql.dir" value="${tpch.dir}/gen" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${tpch.dir}/testlog" />

  <!-- directory of flat files -->
  <property name="ffsource.dir" value="${open.dir}/thirdparty/tpch/dataMultiProcess"/>
  <property name="ff.dir" value="${tpch.dir}/ff"/>

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="set-sf">
    <switch value="${datasize}">
      <case value="100M"> <property name="sf" value="0.1"/> </case>
      <case value="1G"> <property name="sf" value="1"/> </case>
      <case value="10G"> <property name="sf" value="10"/> </case>
      <case value="30G"> <property name="sf" value="30"/> </case>
      <case value="100G"> <property name="sf" value="100"/> </case>
      <case value="300G"> <property name="sf" value="300"/> </case>
      <case value="1000G"> <property name="sf" value="1000"/> </case>
      <case value="3000G"> <property name="sf" value="3000"/> </case>
      <case value="10000G"> <property name="sf" value="10000"/> </case>
      <case value="30000G"> <property name="sf" value="30000"/> </case>
      <case value="100000G"> <property name="sf" value="100000"/> </case>
    </switch>
  </target>

  <target name="gen-sql" depends="set-sf">
    <!-- copy over sql.tmpl, and template reference and shell script files -->
    <copy todir="${gensql.dir}/${datasize.param}" overwrite="true">
      <fileset dir="${tpch.dir}">
        <include name="*.${datasize.param}"/>
        <include name="*.tmpl"/>
        <include name="*.sh"/>
      </fileset>
      <compositemapper>
        <globmapper from="*.${datasize.param}.sh" to="*.sh"/>
        <globmapper from="*.${datasize.param}" to="*.ref"/>
        <globmapper from="*.tmpl" to="*"/>
      </compositemapper>
      <filterset>
        <filter token="FFDIR" value="${ff.dir}/${datasize.param}"/>
        <filter token="DIR" value="${gensql.dir}/${datasize.param}"/>
        <filter token="SF" value="${sf}"/>
      </filterset>
    </copy>

    <!-- copy over other sql and ref files -->
    <copy todir="${gensql.dir}/${datasize.param}" overwrite="true">
      <fileset dir="${tpch.dir}">
        <include name="*.sql"/>
        <include name="*.ref"/>
      </fileset>
    </copy>

    <!-- change permissions on executables -->
    <chmod perm="u+x">
      <fileset dir="${gensql.dir}/${datasize.param}">
        <include name="*.sh"/>
      </fileset>
    </chmod>

  </target>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>

    <!-- generate sql -->
    <foreach list="${datasize}" param="datasize.param" target="gen-sql"/>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${tpch.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="create-db">
    <condition property="db.created">
      <available file="${ffsource.dir}/${datasize}" type="dir"/>
    </condition>

    <if>
      <istrue value="${db.created}"/>
      <then/>
      <else>
        <exec executable="${thirdparty.dir}/tpch/createdbMultiProcess"
          dir="${thirdparty.dir}/tpch">
          <arg line="${datasize}"/>
        </exec>
      </else>
    </if>

    <sync todir="${ff.dir}/${datasize}" verbose="true">
      <fileset dir="${ffsource.dir}/${datasize}"/>
    </sync>
  </target>

  <target name="alloc-space" depends="gen-all-sql">
    <!-- Make sure the server isn't running by doing a dummy extend of a
         single page.  The server can't be running while file space is
         being extended.
    -->
    <exec executable="${open.dir}/luciddb/lucidDbAllocFile" failonerror="true">
      <arg value="--append-pages=1"/>
      <arg value="${open.dir}/luciddb/catalog/db.dat"/>
    </exec>
    <ant dir="${open.dir}/luciddb" target="restoreCatalog"/>
    <exec executable="${gensql.dir}/${datasize}/allocSpace.sh"
      failonerror="true"/>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete dir="${ff.dir}"/>
    <delete file="datasize"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${bh.log.basedir}"/>
    <delete dir="${gensql.dir}"/>
  </target>

  <target name="clean-ff" depends="clean">
    <delete dir="${ff.dir}"/>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="txn" basedir="." default="test">
  <dirname property="txn.dir" file="${ant.file.txn}" />

  <property name="open.dir" location="${txn.dir}/../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${txn.dir}/testlog" />

  <!-- directory of csv files -->
  <property name="data.dir" value="${open.dir}/luciddb/test/data"/>
  <property name="csv.copy.dir" value="${txn.dir}/csv-copy"/>

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>
    <!-- generate sql -->
    <copy todir="${txn.dir}" overwrite="true">
      <fileset dir="${txn.dir}" includes="*.tmpl"/>
      <filterset>
        <filter token="DIR" value="${csv.copy.dir}"/>
      </filterset>
        <globmapper from="*.tmpl" to="*"/>
    </copy>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork 
      basedir="${txn.dir}" 
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>
  
  <target name="copy-csv">
    <sync todir="${csv.copy.dir}"
      overwrite="true"
      verbose="true"
      failonerror="true">
      <fileset dir="${data.dir}">
        <include name="EMP.csv"/>
      </fileset>
    </sync>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${bh.log.basedir}"/>
    <delete>
      <fileset dir="${txn.dir}" includes="*.log"/>
    </delete>
    <delete file="labels.sql"/>
    <delete file="labels.ref"/>
    <delete dir="${csv.copy.dir}"/>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="benchmark" basedir="." default="test">
  <dirname property="udf.dir" file="${ant.file.udf}" />

  <property name="open.dir" location="${udf.dir}/../../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${udf.dir}/testlog" />

  <!-- directory of csv files -->
  <property name="csv.copy.dir" value="${udf.dir}/csv-copy" />
  <property name="data.dir" value="${open.dir}/luciddb/test/data" />

  <!-- directory for log files -->
  <property name="log.dir" value="${open.dir}/luciddb/testlog" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>
    <!-- generate sql -->
    <copy todir="${udf.dir}" overwrite="true">
      <fileset dir="${udf.dir}" includes="*.tmpl"/>
      <filterset>
        <filter token="DATADIR" value="${csv.copy.dir}"/>
        <filter token="LOGDIR" value="${log.dir}"/>
      </filterset>
      <globmapper from="*.tmpl" to="*"/>
    </copy>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${udf.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="copy-csv">
    <sync todir="${csv.copy.dir}"
      overwrite="true"
      verbose="true"
      failonerror="true">
      <fileset dir="${data.dir}">
        <include name="dates.*"/>
      </fileset>
    </sync>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete file="run.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${bh.log.basedir}"/>
    <delete>
      <fileset dir="${udf.dir}" includes="*.log"/>
    </delete>
    <delete file="stdToDate.sql"/>
    <delete file="stdToDate.ref"/>    
    <delete dir="${csv.copy.dir}"/>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="udp" basedir="." default="test">
  <dirname property="udp.dir" file="${ant.file.udp}" />

  <property name="open.dir" location="${udp.dir}/../../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <!-- directory where sql is generated -->
  <property name="gensql.dir" value="${udp.dir}/gen" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${udp.dir}/testlog" />

  <!-- directory of csv files -->
  <property name="csv.copy.dir" value="${open.dir}/luciddb/test/sql/udr/udp/csv-copy" />
  <property name="data.dir" value="${open.dir}/luciddb/test/data" />
  
  <!-- directory where flatfiles are exported -->
  <property name="csv.exp.dir" value="${open.dir}/luciddb/test/sql/udr/udp/csv-exp" />

  <!-- directory for error logs -->
  <property name="errlog.dir" value="${open.dir}/luciddb/test/sql/udr/udp/logs" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>

    <!-- create error log directory -->
    <mkdir dir="${errlog.dir}"/>

    <!-- generate sql -->
    <copy todir="${gensql.dir}">
      <fileset dir="${udp.dir}" includes="*.tmpl"/>
      <filterset>
        <filter token="DIR" value="${csv.copy.dir}"/>
        <filter token="EXPDIR" value="${csv.exp.dir}"/>
        <filter token="LOGDIR" value="${errlog.dir}"/>
      </filterset>
      <globmapper from="*.tmpl" to="*"/>
    </copy>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${udp.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="copy-csv">
    <sync todir="${csv.copy.dir}"
      overwrite="true"
      verbose="true"
      failonerror="true">
      <fileset dir="${data.dir}">
        <include name="*.csv"/>
        <include name="*.bcp"/>
        <exclude name="blob.*"/>
      </fileset>
    </sync>
  </target>

  <target name="clean-exp">
    <delete dir="${csv.exp.dir}" quiet="true"/>
  </target>

  <target name="clean-test">
  	<delete quiet="true" includeemptydirs="true">
      <fileset dir="${gensql.dir}"/>
      <fileset dir="${csv.exp.dir}"/>
      <fileset dir="${bh.log.basedir}"/>
      <fileset dir="${udp.dir}">
        <include name="*.log"/>
      </fileset>
      <fileset dir="${errlog.dir}"/>
      <fileset dir="${csv.copy.dir}"/>
    </delete>
  </target>
  
  <target name="clean" depends="clean-test">
    <delete quiet="true" includeemptydirs="true">
      <fileset dir="${udp.dir}">
        <include name="run.properties"/>
      </fileset>
    </delete>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="benchmark" basedir="." default="test">
  <dirname property="udx.dir" file="${ant.file.udx}" />

  <property name="open.dir" location="${udx.dir}/../../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir" location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir" location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />

  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${udx.dir}/testlog" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>
    <ant dir="enforceRowConstraints" target="gen-all-sql"/>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${udx.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete file="run.properties"/>
    <ant dir="enforceRowConstraints" target="clean"/>
    <ant dir="impexp" target="clean"/>	
  </target>

  <target name="clean-test">
    <delete dir="${bh.log.basedir}"/>
    <delete>
      <fileset dir="${udx.dir}" includes="*.log"/>
    </delete>
    <ant dir="enforceRowConstraints" target="clean-test"/>
    <ant dir="impexp" target="clean-test"/>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="rowconstraints" basedir="." default="test">
  <dirname property="rowconstraints.dir" file="${ant.file.rowconstraints}" />

  <property name="open.dir" 
    location="${rowconstraints.dir}/../../../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir"
    location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" 
    location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir"
    location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />
  <import file="${open.dir}/luciddb/buildMacros.xml" />

  <!-- directory where sql is generated -->
  <property name="gensql.dir" value="${rowconstraints.dir}/gen" />
  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${rowconstraints.dir}/testlog" />

  <!-- directory for test message catalog jars -->
  <property name="testmsgs.dir" value="${rowconstraints.dir}/msgs" />
  <!-- directory of csv files -->
  <property name="csv.copy.dir" value="${rowconstraints.dir}/csv-copy" />
  <property name="data.dir" value="${open.dir}/luciddb/test/data" />
  <!-- directory for log files -->
  <property name="log.dir" value="${rowconstraints.dir}/logs" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>

    <!-- generate sql -->
    <copy todir="${gensql.dir}" overwrite="true">
      <fileset dir="${rowconstraints.dir}" includes="*.tmpl"/>
      <filterset id="dir.filter">
        <filter token="DIR" value="${csv.copy.dir}"/>
        <filter token="LOGDIR" value="${log.dir}"/>
        <filter token="PLUGINDIR" value="${luciddb.plugin.dir}"/>
      </filterset>
      <globmapper from="*.tmpl" to="*"/>
    </copy>

    <copy todir="${gensql.dir}" overwrite="true">
      <fileset dir="${rowconstraints.dir}">
        <include name="*.sql"/>
        <include name="*.ref"/>
      </fileset>
    </copy>
    
    <!-- create log directory -->
    <mkdir dir="${log.dir}"/>
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${rowconstraints.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <antcall target="cleanTestMsgCatalogs"/>
    <delete dir="${csv.dir}"/>
    <delete file="run.properties"/>
    <delete file="config.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${bh.log.basedir}"/>
    <delete dir="${gensql.dir}"/>
    <delete dir="${csv.copy.dir}"/>
    <delete dir="${log.dir}"/>
  </target>

  <!-- targets to be called for tests -->
  <target name="installTestMsgCatalogs">
    <copy todir="${luciddb.plugin.dir}">
      <fileset dir="${testmsgs.dir}">
        <include name="TestMsgs.jar"/>
      </fileset>
    </copy>
  </target>

  <target name="cleanTestMsgCatalogs">
    <delete quiet="true">
      <fileset dir="${luciddb.plugin.dir}">
        <include name="TestMsgs.jar"/>
      </fileset>
    </delete>
  </target>
  
  <target name="copy-csv">
    <sync todir="${csv.copy.dir}" overwrite="true" verbose="true"
      failonerror="true">
      <fileset dir="${data.dir}">
        <include name="EMP.*"/>
        <include name="types.*"/>
      </fileset>
    </sync>
  </target>

  <!-- misc targets for building msg catalog jars -->
  <target name="buildTestMsgCatalogs">
    <delete>
      <fileset dir="${testmsgs.dir}">
        <include name="TestMsgs.jar"/>
      </fileset>
    </delete>
    <jar jarfile="${testmsgs.dir}/TestMsgs.jar">
      <fileset dir="${testmsgs.dir}">
        <include name="TestMsgs.properties" />
      </fileset>
      <manifest>
        <attribute name="ResourceBundleBaseName" value="TestMsgs"/>
      </manifest>
    </jar>
  </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
// Licensed to DynamoBI Corporation (DynamoBI) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  DynamoBI licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at

//   http:www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
-->

<project name="impexp" basedir="." default="test">
  <dirname property="impexp.dir" file="${ant.file.impexp}" />

  <property name="open.dir" 
    location="${impexp.dir}/../../../../../.."/>
  <fail unless="open.dir" />

  <property environment="env" />
  <property file="run.properties"/>

  <!-- override Farrago -->
  <property name="project.catalog.dir"
    location="${open.dir}/luciddb/catalog" />
  <property name="project.trace.propfile" 
    location="${open.dir}/luciddb/trace/LucidDbTrace.properties" />
  <property name="project.testlog.dir"
    location="${open.dir}/luciddb/testlog" />
  <import file="${open.dir}/farrago/buildMacros.xml" />
  <import file="${open.dir}/luciddb/buildMacros.xml" />

  <!-- directory where sql is generated -->
  <property name="gensql.dir" value="${impexp.dir}/gen" />
  <!-- directory where blackhawk output should go -->
  <property name="bh.log.basedir" value="${impexp.dir}/testlog" />

  <!-- classpath for running tests via ant -->
  <path id="test.classpath">
    <pathelement path="${open.dir}/luciddb/classes"/>
    <pathelement path="${farrago.sqlline.classpath}"/>
    <pathelement path="${ant.classpath}"/>
    <pathelement path="${blackhawk.run.classpath}"/>
    <pathelement path="${test.emma.classpath}" />
  </path>
  <property name="test.classpath" refid="test.classpath"/>

  <target name="gen-all-sql">
    <!-- generate run.properties -->
    <available file="run.properties" type="file"
      property="run.properties.exists"/>
    <if>
      <isset property="run.properties.exists"/>
      <then/>
      <else>
        <copy file="run.properties.tmpl" tofile="run.properties"/>
        <property file="run.properties"/>
      </else>
    </if>

    <!-- generate sql -->
    <copy todir="${gensql.dir}" overwrite="true">
      <fileset dir="${impexp.dir}" includes="*.tmpl"/>
      <filterset id="dir.filter">
        <filter token="DIR" value="${gensql.dir}"/>
        <filter token="PACKAGE" value="${package}"/>
      	<filter token="PACKAGE1" value="${package1}"/>
      </filterset>
      <globmapper from="*.tmpl" to="*"/>
    </copy>

    <copy todir="${gensql.dir}" overwrite="true">
      <fileset dir="${impexp.dir}">
        <include name="*.sql"/>
        <include name="*.ref"/>
      </fileset>
    </copy>
    
  </target>

  <target name="test" depends="clean-test,gen-all-sql">
    <blackhawk.fork
      basedir="${impexp.dir}"
      testscript="${testfile}"
      classpathref="test.classpath"/>
  </target>

  <target name="clean">
    <antcall target="clean-test"/>
    <delete file="run.properties"/>
    <delete file="config.properties"/>
  </target>

  <target name="clean-test">
    <delete dir="${bh.log.basedir}"/>
    <delete dir="${gensql.dir}"/>
  </target>

</project>
