apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply plugin: 'appengine'

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.google.appengine:gradle-appengine-plugin:1.8.6'
    }
}

dependencies {
  compile 'com.google.appengine:appengine-api-1.0-sdk:1.8.6'
  compile 'javax.servlet:servlet-api:2.5'
  compile project(':core')
  compile project(':jsonService')
  appengineSdk 'com.google.appengine:appengine-java-sdk:1.8.6'
}

appengine {
  downloadSdk=true
  app {
    id = 'passfault'
  }
}

war{
  //add everything from the jsonService except the web.xml
  from project(':jsonService').fileTree('src/main/webapp/').exclude('WEB-INF/web.xml')
}

artifacts {
  archives sourcesJar
}


dependencies {
  compile project(':core')
  testCompile group: 'junit', name: 'junit', version: '4+'
}

jar {
	manifest {
		attributes 'Implementation-Title': 'OWASP Passfault', 
			'Implementation-Version': version,
			'Main-Class': 'org.owasp.passfault.TextAnalysis'
	}	
}

jar {
  //this makes a fat jar from the dependencies, simplifying the jnlp(which makes it work on iced-tea plugin in linux)
  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

processResources {
  eachFile{
    if( it.relativePath.pathString.endsWith('.jnlp')) {
      expand appletName: archivesBaseName + '-' + version 
    }
  }
  //expand (version: version) 
  //expand blows up on the large dictionary files, so we only expand on jnlp files
}

artifacts {
  archives jar
  archives sourcesJar
  archives javadocJar
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'eclipse-wtp'
  apply plugin: 'idea'
  apply plugin: 'maven'
  apply plugin: 'signing'

  group = 'org.owasp.passfault'
  version = '0.8-SNAPSHOT'  //using SNAPSHOT in the version will trigger a different uploadArchives behavior
  archivesBaseName = rootProject.name +'-'+ project.name

  repositories {
    mavenCentral()
  }

  dependencies {
    testCompile 'junit:junit:4.11'
  }

  tasks.withType(Compile) {
    options.encoding = 'UTF-8'
  }

  jar {
    manifest.attributes provider: 'gradle'
  }

  task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
  }

}

if (project.hasProperty('sonatypeUsername')){
 subprojects {
  signing {
    sign configurations.archives
  }
  uploadArchives {
    repositories {
      mavenDeployer {
        ext.snapshotRepo = "https://oss.sonatype.org/content/repositories/snapshots/"
        ext.stagingRepo = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
        ext.repo = ext.snapshotRepo
        if (!version.endsWith('SNAPSHOT')){
          ext.repo = ext.stagingRepo
        }
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
    
        repository(url: ext.repo){
          authentication(userName: sonatypeUsername, password: sonatypePassword)
        }

        pom.project {
          name archivesBaseName
          packaging 'jar'
          description 'OWASP Passfault evaluates password strength and enforces password policy'
          url 'https://passfault.com/'

          scm {
            url 'scm:git@github.com:c-a-m/passfault'
            connection 'scm:git@github.com:c-a-m/passfault/passfault.git'
            developerConnection 'scm:git@github.com:c-a-m/passfault/passfault.git'
          }

          licenses {
            license {
              name 'The Apache Software License, Version 2.0'
              url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
              distribution 'repo'
            }
          }

          developers { developer { id 'c-a-m'; name 'Cam Morris' } }
        }//pom.project
      }//maven deployer
    }//repositories
  }//uploadArchives
 }//subprojects
}//if snapshot url

sourceCompatibility = 1.6

dependencies {
	testCompile group: 'junit', name: 'junit', version: '4+'
}

jar {
	manifest {
		attributes 'Implementation-Title': 'OWASP Passfault', 
			'Implementation-Version': version,
			'Main-Class': 'org.owasp.passfault.TextAnalysis'
	}	
}

artifacts {
  archives jar
  archives javadocJar
  archives sourcesJar
}
apply plugin: 'war'
apply plugin: 'jetty'

dependencies {
  compile project(':core')
  compile "javax.servlet:servlet-api:2.5"
}

artifacts {
  archives war
  archives sourcesJar
}



task build {
  inputs.dir("wordlists")
  outputs.dir("$buildDir/wordlists")
  doLast {
    def files = fileTree("wordlists").include("*.txt")
    def destination = new File("$buildDir/wordlists");
    destination.mkdirs();

    files.each { file ->
      normalize(file, destination);
    }
  }
}

def normalize(File unsorted, File destDir){
  new File(destDir, unsorted.name).withWriter { out ->
    out.write("# This file is generated, sorted and padded so that each line has the same length.  ")
    def words = [] as SortedSet
    int maxLength = 0;
    unsorted.eachLine { line ->
      if (line.length() > maxLength) maxLength = line.length();
      if (line.startsWith("#")){
        out.writeLine(line);
      } else {
        words << line.trim().toLowerCase();
      }
    }

    words.each { word ->
      out.write(word);
      for (int i = word.length(); i < maxLength; i++) {
        out.write(' ');
      }
      out.writeLine("");
    }
  }
}