<?xml version="1.0" encoding="UTF-8"?>
<project name="ExampleServiceActivity" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <loadproperties srcFile="local.properties" />

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project'"
            unless="sdk.dir"
    />


<!-- extension targets. Uncomment the ones where you want to do custom work
     in between standard targets -->
<!--
    <target name="-pre-build">
    </target>
    <target name="-pre-compile">
    </target>

    /* This is typically used for code obfuscation.
       Compiled code location: ${out.classes.absolute.dir}
       If this is not done in place, override ${out.dex.input.absolute.dir} */
    <target name="-post-compile">
    </target>
-->

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->
    <import file="${sdk.dir}/tools/ant/build.xml" />

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="ExampleServiceActivityTest" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <loadproperties srcFile="local.properties" />

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project'"
            unless="sdk.dir"
    />


<!-- extension targets. Uncomment the ones where you want to do custom work
     in between standard targets -->
<!--
    <target name="-pre-build">
    </target>
    <target name="-pre-compile">
    </target>

    /* This is typically used for code obfuscation.
       Compiled code location: ${out.classes.absolute.dir}
       If this is not done in place, override ${out.dex.input.absolute.dir} */
    <target name="-post-compile">
    </target>
-->

    	<!-- Include extra build script to correct the generation 
	of coverage reports when this script is run from 
	the master build script-->
	<echo>Include coverage script fix</echo>
	<import file="${societies-main-build-root}/societies-coverage.xml" optional="true"/>


	<!--Turn on verbosity property. Only affects certain targets that use this property-->
    	<property name="verbose" value="false" />

	<!-- Overridden target from SDK build.xml
		Code coverage reports cannot be created if the standard build script
		is not run from the test app's root directory. The standard build creates a coverage.em 
		file but it is output to the master build directory. The societies-coverage.xml
		is invoked to move this file back to the test app's root directory prior to report generation
		The other modifications is the output location of the coverage report which was also
		being out to the master build directory. Finally, the metric attribute allows code coverage
		metrics to be specified. There is no fail if the report discovers metrics below these thresholds.
		EmmaCheck is an add-on Ant task that can do this and may be used in future. It is also 
		possible that the Jenkins Ant plugin could carry out this task.-->
    <target name="test" depends="-test-project-check"
                description="Runs tests from the package defined in test.package property">

        <property name="tested.project.absolute.dir" location="${tested.project.dir}" />

        <property name="test.runner" value="android.test.InstrumentationTestRunner" />

        <!-- Application package of the tested project extracted from its manifest file -->
        <xpath input="${tested.project.absolute.dir}/AndroidManifest.xml"
                expression="/manifest/@package" output="tested.manifest.package" />
        <xpath input="AndroidManifest.xml"
                expression="/manifest/@package" output="manifest.package" />

        <property name="emma.dump.file"
                value="/data/data/${tested.manifest.package}/coverage.ec" />

        <if condition="${emma.enabled}">
            <then>
                <echo>WARNING: Code Coverage is currently only supported on the emulator and rooted devices.</echo>
                <run-tests-helper emma.enabled="true">
                    <extra-instrument-args>
                        <arg value="-e" />
                           <arg value="coverageFile" />
                           <arg value="${emma.dump.file}" />
                    </extra-instrument-args>
                </run-tests-helper>
                <echo>Downloading coverage file into project directory...</echo>
                <exec executable="${adb}" failonerror="true">
                    <arg line="${adb.device.arg}" />
                    <arg value="pull" />
                    <arg value="${emma.dump.file}" />
                    <arg value="coverage.ec" />
                </exec>
			<!-- Non-standard SDK behaviour -->
		<if>
		   <condition>
		      <istrue value="${societies-coverage-report}"/>
		   </condition>
		   <then>
			<antcall target="move-coverage-em"></antcall>
		   </then>
		</if> 


                <echo>Extracting coverage report...</echo>
		<echo>${tested.project.absolute.dir}</echo>
		<echo>${source.dir}</echo>
                <emma>
			<!-- Non-standard SDK behaviour - metrics specified -->
                    <report sourcepath="${tested.project.absolute.dir}/${source.dir}"
                                      verbosity="${verbosity}" metrics="method:5,block:5,line:5,class:100">
                        <!-- TODO: report.dir or something like should be introduced if necessary -->
                        <infileset dir=".">
                            <include name="coverage.ec" />
                            <include name="coverage.em" />
                        </infileset>
                        <!-- TODO: reports in other, indicated by user formats -->
			<!-- Non-standard SDK behaviour -->
                        <html outfile="${basedir}/coverage/coverage.html" depth="method"/>
                   </report>
                </emma>
                <echo>Cleaning up temporary files...</echo>
                <delete file="coverage.ec" />
                <delete file="coverage.em" />
                <echo>Saving the report file in ${basedir}/coverage/coverage.html</echo>
            </then>
            <else>
                <run-tests-helper />
            </else>
        </if>
    </target>


    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->
    <import file="${sdk.dir}/tools/ant/build.xml" />

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="tests" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <loadproperties srcFile="local.properties" />

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project'"
            unless="sdk.dir"
    />


<!-- extension targets. Uncomment the ones where you want to do custom work
     in between standard targets -->
<!--
    <target name="-pre-build">
    </target>
    <target name="-pre-compile">
    </target>

    /* This is typically used for code obfuscation.
       Compiled code location: ${out.classes.absolute.dir}
       If this is not done in place, override ${out.dex.input.absolute.dir} */
    <target name="-post-compile">
    </target>
-->

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->
    <import file="${sdk.dir}/tools/ant/build.xml" />

</project>
<!-- A pre-requisite is to create $ANDROID_HOME and ensure that 
	$ANDROID_HOME/tools is included on the $PATH.
	Alternatively, create property to determine path 
	to Android emulator command
-->
<project name="android-coverage-build" default="build" basedir=".">
    <description>
        builds all Android applications, tests and gets coverage
    </description>
  <!-- set global properties for this build -->
  <property name="android-root" location="../platform-infrastructure/client-frwk"/>
  <property name="test-avd" value="Test22Device"/>
  <property name="societies-main-build-root" location="." ></property>
  <property name="societies-coverage-report" value="true" ></property>

  <target name="build">
	<antcall target="start-emulator-wait"></antcall>  
	<antcall target="TestIPCServiceExample"></antcall>  
  </target>

	<!-- This task will build the test app, install and run tests and generate the coverage report -->
  <target name="IPCServiceExample"  description="build IPCServiceExample">
	 <ant antfile="build.xml" dir="${android-root}/IPCServiceExample" useNativeBasedir="true">
		<target name="all"/>
		<target name="clean"/>
		<target name="emma"/>
		<target name="debug"/>
		<target name="install"/>
	 </ant>
  </target>
	<!-- This task will build the test app, install and run tests and generate the coverage report -->
  <target name="TestIPCServiceExample"  description="test IPCServiceExample" depends="IPCServiceExample" >
	 <ant antfile="build.xml" dir="${android-root}/TestIPCServices" useNativeBasedir="true">
		<target name="all"/>
		<target name="clean"/>
		<target name="emma"/>
		<target name="debug"/>
		<target name="install"/>
		<target name="test"/>
	 </ant>
  </target>
	<!-- Start Android emulator AVD as daemon. Emulator will cease when ant script terminates
		N.B. loads emulator as a headless or non GUI application. Required for 
		build server environments where OS is a server version -->
  <target name="start-test-emulator">
	<parallel>
		<daemons>
			<exec executable="emulator">
                                        <arg value="-no-window"/>
					<arg value="-avd"/>
					<arg value="${test-avd}"/>
			 </exec>
		</daemons>
	</parallel>
   </target>
	<!-- Delay ant to allow Android emulator AVD to start and configure itself.
		Adjust sleep duration if default value is too short-->
   <target name="start-emulator-wait" depends="start-test-emulator">
	<sleep seconds="60"/>
   </target>

</project>

<!-- Copyright (c) 2011, SOCIETIES Consortium (WATERFORD INSTITUTE OF TECHNOLOGY 
	(TSSG), HERIOT-WATT UNIVERSITY (HWU), SOLUTA.NET (SN), GERMAN AEROSPACE CENTRE 
	(Deutsches Zentrum fuer Luft- und Raumfahrt e.V.) (DLR), Zavod za varnostne 
	tehnologije informacijske družbe in elektronsko poslovanje (SETCCE), INSTITUTE 
	OF COMMUNICATION AND COMPUTER SYSTEMS (ICCS), LAKE COMMUNICATIONS (LAKE), 
	INTEL PERFORMANCE LEARNING SOLUTIONS LTD (INTEL), PORTUGAL TELECOM INOVAÇÃO, 
	SA (PTIN), IBM Corp., INSTITUT TELECOM (ITSUD), AMITEC DIACHYTI EFYIA PLIROFORIKI 
	KAI EPIKINONIES ETERIA PERIORISMENIS EFTHINIS (AMITEC), TELECOM ITALIA S.p.a.(TI), 
	TRIALOG (TRIALOG), Stiftelsen SINTEF (SINTEF), NEC EUROPE LTD (NEC)) All 
	rights reserved. Redistribution and use in source and binary forms, with 
	or without modification, are permitted provided that the following conditions 
	are met: 1. Redistributions of source code must retain the above copyright 
	notice, this list of conditions and the following disclaimer. 2. Redistributions 
	in binary form must reproduce the above copyright notice, this list of conditions 
	and the following disclaimer in the documentation and/or other materials 
	provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
	HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
	BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
	FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
	HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
	EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
	OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
	INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
	STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
	ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
	OF SUCH DAMAGE. -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
			http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<!-- Setup the identity of this builder -->
	<groupId>org.societies</groupId>
	<artifactId>android-builder</artifactId>
	<packaging>pom</packaging>
	<version>0.1</version>
	<name>Android Builder</name>

	<!-- All Android projects to be included in nightly builds -->
	<modules>
		<module>../../parent/version.xml</module>
		<module>../../parent/android.xml</module>

		<!-- Societies Android Events -->
		<module>../../android/client-frwk/SocietiesAPITests/Internal/android-api-internal-builder.xml</module>
		<module>../../android/client-frwk/SocietiesAPITests/External/android-api-external-builder.xml</module>
	</modules>
</project>
<!-- Copyright (c) 2011, SOCIETIES Consortium (WATERFORD INSTITUTE OF TECHNOLOGY 
	(TSSG), HERIOT-WATT UNIVERSITY (HWU), SOLUTA.NET (SN), GERMAN AEROSPACE CENTRE 
	(Deutsches Zentrum fuer Luft- und Raumfahrt e.V.) (DLR), Zavod za varnostne 
	tehnologije informacijske družbe in elektronsko poslovanje (SETCCE), INSTITUTE 
	OF COMMUNICATION AND COMPUTER SYSTEMS (ICCS), LAKE COMMUNICATIONS (LAKE), 
	INTEL PERFORMANCE LEARNING SOLUTIONS LTD (INTEL), PORTUGAL TELECOM INOVAÇÃO, 
	SA (PTIN), IBM Corp., INSTITUT TELECOM (ITSUD), AMITEC DIACHYTI EFYIA PLIROFORIKI 
	KAI EPIKINONIES ETERIA PERIORISMENIS EFTHINIS (AMITEC), TELECOM ITALIA S.p.a.(TI), 
	TRIALOG (TRIALOG), Stiftelsen SINTEF (SINTEF), NEC EUROPE LTD (NEC)) All 
	rights reserved. Redistribution and use in source and binary forms, with 
	or without modification, are permitted provided that the following conditions 
	are met: 1. Redistributions of source code must retain the above copyright 
	notice, this list of conditions and the following disclaimer. 2. Redistributions 
	in binary form must reproduce the above copyright notice, this list of conditions 
	and the following disclaimer in the documentation and/or other materials 
	provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
	HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
	BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
	FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
	HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
	EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
	OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
	INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
	STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
	ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
	OF SUCH DAMAGE. -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
			http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<!-- Setup the identity of this builder -->
	<groupId>org.societies</groupId>
	<artifactId>android-builder</artifactId>
	<packaging>pom</packaging>
	<version>0.1</version>
	<name>Android Builder</name>

	<!-- All Android projects to be included in nightly builds -->
	<modules>
		<module>../../parent/version.xml</module>
		<module>../../parent/android.xml</module>

		<!-- Utilities -->
		<module>../../utilities/DBC</module>
		<module>../../utilities/maven/SimpleXMLConvertBasic</module>
		<module>../../utilities/maven/SimpleXMLConverters</module>
		<module>../../utilities/maven/Jaxb2SimpleXMLplugin</module>

		<!-- API -->
		<module>../../api/android-pom.xml</module>
		<!--module>../../api/android/external2</module>
		<module>../../api/android/internal2</module-->
		 				
		<!-- Android Communication components -->
		<module>../../platform-infrastructure/comms-frwk/CommunicationFrameworkCommons/android-pom.xml</module>
		<module>../../android/client-frwk/SocietiesLibraries/AndroidComms/SocietiesAndroidComms</module>
		<module>../../android/client-frwk/SocietiesLibraries/AndroidComms/SocietiesAndroidCommsHelper</module>
		<module>../../android/client-frwk/SocietiesLibraries/AndroidPubSub/SocietiesAndroidPubsub</module>
		<module>../../android/client-frwk/SocietiesLibraries/AndroidPubSub/SocietiesAndroidPubsubHelper</module>
		<module>../../android/client-frwk/SocietiesAndroidCommsApp</module>
		<module>../../android/client-frwk/SocietiesLibraries/SocietiesLoginTesterApp</module>

		<!-- Client Framework Libraries -->
		<module>../../android/client-frwk/SocietiesLibraries/ServiceLifecycle/SocietiesServiceMonitor</module>
		<module>../../android/client-frwk/SocietiesLibraries/CommunityManagement/SocietiesCISManager</module>
		<module>../../android/client-frwk/SocietiesLibraries/AndroidCSSManager/SocietiesCSSManager</module>
		<module>../../android/client-frwk/SocietiesDeviceStatus</module>
		<module>../../android/client-frwk/SocietiesLibraries/AndroidContentProvider/SocietiesContentProvider</module>
		<module>../../android/client-frwk/SocietiesLibraries/AndroidUtilities/SocietiesAndroidUtilities</module>
		<module>../../android/client-frwk/SocietiesLibraries/AndroidEvents/SocietiesAndroidEvents</module>
		<module>../../android/client-frwk/SocietiesLibraries/FriendsManager/FriendsManager</module>
		<module>../../android/client-frwk/SocietiesLibraries/trust/trust-apklib</module>
                <module>../../android/client-frwk/SocietiesLibraries/AndroidContext/SocietiesAndroidContext</module>

		<!-- Not building
		<module>../../platform-infrastructure/client-frwk/SocietiesLibraries/AndroidPersonalisation/SocietiesAndroidPersonalisation</module>  -->
		<!-- Client Framework Service Helpers -->
		<module>../../android/client-frwk/SocietiesServiceHelpers/CoreServicesHelpers/pom.xml</module>
		<module>../../android/client-frwk/SocietiesLibraries/AndroidUserFeedback/AndroidUserFeedback</module>

		<!-- SN Connector -->
		<module>../../platform-infrastructure/sns/AndroidSNApp</module>
		<module>../../platform-infrastructure/sns/SocialDataComms/android-pom.xml</module>
		<module>../../platform-infrastructure/sns/SocietiesAndroidSocialData</module>

		<!-- Android User Agent -->
		<!-- module>../user-agent/Android-user-agent</module -->

		<!-- Privacy -->
		<module>../../privacy-trust/android/privacy-trust/privacy-data-management/apklib</module>

		<!-- Societies Android Client APK-->
		<module>../../android/client-frwk/SocietiesAndroidApp</module>
		
	</modules>
</project>
<!-- Copyright (c) 2011, SOCIETIES Consortium (WATERFORD INSTITUTE OF TECHNOLOGY 
	(TSSG), HERIOT-WATT UNIVERSITY (HWU), SOLUTA.NET (SN), GERMAN AEROSPACE CENTRE 
	(Deutsches Zentrum fuer Luft- und Raumfahrt e.V.) (DLR), Zavod za varnostne 
	tehnologije informacijske družbe in elektronsko poslovanje (SETCCE), INSTITUTE 
	OF COMMUNICATION AND COMPUTER SYSTEMS (ICCS), LAKE COMMUNICATIONS (LAKE), 
	INTEL PERFORMANCE LEARNING SOLUTIONS LTD (INTEL), PORTUGAL TELECOM INOVAÇÃO, 
	SA (PTIN), IBM Corp., INSTITUT TELECOM (ITSUD), AMITEC DIACHYTI EFYIA PLIROFORIKI 
	KAI EPIKINONIES ETERIA PERIORISMENIS EFTHINIS (AMITEC), TELECOM ITALIA S.p.a.(TI), 
	TRIALOG (TRIALOG), Stiftelsen SINTEF (SINTEF), NEC EUROPE LTD (NEC)) All 
	rights reserved. Redistribution and use in source and binary forms, with 
	or without modification, are permitted provided that the following conditions 
	are met: 1. Redistributions of source code must retain the above copyright 
	notice, this list of conditions and the following disclaimer. 2. Redistributions 
	in binary form must reproduce the above copyright notice, this list of conditions 
	and the following disclaimer in the documentation and/or other materials 
	provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
	HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
	BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
	FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
	HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
	EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
	OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
	INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
	STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
	ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
	OF SUCH DAMAGE. -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
			http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.societies</groupId>
	<artifactId>virgo-builder</artifactId>
	<packaging>pom</packaging>
	<version>0.1</version>
	<name>Virgo Builder</name>

	<modules>
		<module>societies-clean.xml</module>
		
		<module>../distributions/virgo-baseline.xml</module>
		<module>../distributions/virgo-cloud-node.xml</module>
		<module>../distributions/virgo-da-node.xml</module>
		
		<!-- Why is that separate? -->
		<module>../../platform-infrastructure/comms-frwk/RichCommsBundle</module>
	</modules>
</project>
<!-- Copyright (c) 2011, SOCIETIES Consortium (WATERFORD INSTITUTE OF TECHNOLOGY 
	(TSSG), HERIOT-WATT UNIVERSITY (HWU), SOLUTA.NET (SN), GERMAN AEROSPACE CENTRE 
	(Deutsches Zentrum fuer Luft- und Raumfahrt e.V.) (DLR), Zavod za varnostne 
	tehnologije informacijske družbe in elektronsko poslovanje (SETCCE), INSTITUTE 
	OF COMMUNICATION AND COMPUTER SYSTEMS (ICCS), LAKE COMMUNICATIONS (LAKE), 
	INTEL PERFORMANCE LEARNING SOLUTIONS LTD (INTEL), PORTUGAL TELECOM INOVAÇÃO, 
	SA (PTIN), IBM Corp., INSTITUT TELECOM (ITSUD), AMITEC DIACHYTI EFYIA PLIROFORIKI 
	KAI EPIKINONIES ETERIA PERIORISMENIS EFTHINIS (AMITEC), TELECOM ITALIA S.p.a.(TI), 
	TRIALOG (TRIALOG), Stiftelsen SINTEF (SINTEF), NEC EUROPE LTD (NEC)) All 
	rights reserved. Redistribution and use in source and binary forms, with 
	or without modification, are permitted provided that the following conditions 
	are met: 1. Redistributions of source code must retain the above copyright 
	notice, this list of conditions and the following disclaimer. 2. Redistributions 
	in binary form must reproduce the above copyright notice, this list of conditions 
	and the following disclaimer in the documentation and/or other materials 
	provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
	HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
	BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
	FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
	HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
	EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
	OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
	INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
	STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
	ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
	OF SUCH DAMAGE. -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
			http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.societies</groupId>
	<artifactId>virgo-nightly-builder</artifactId>
	<packaging>pom</packaging>
	<version>0.1</version>
	<name>Virgo Nightly Builder</name>


	<modules>
		<!-- Virgo Build -->
		<module>virgo-build.xml</module>
		
		<!-- What's that? -->
		<module>../../css-modules/device-mgmt/DeviceDriverSimulator/</module>
		<module>../../css-modules/device-mgmt/devicemanagerconsumer/</module>
	
		<!-- Integration tests -->
		<module>../../integration-tests/builder/virgo-integration/virgo-integration-tests.xml</module>
		
		<!-- Performance tests -->
		<module>../../integration-tests/performance-tests/performance-tester</module>
		
				
		
	</modules>
</project>
<?xml version="1.0"?>
<!-- $Id: build.xml 15311 2012-02-03 09:48:37Z markagreenwood $ -->
<project name="GATE Tokenisers" default="jar" basedir="ANNIE">
    <description>
        GATE see http://gate.ac.uk
    </description>
  <!-- set global properties for this build -->
  <!-- Prevent Ant from warning about includeantruntime not being set -->
  <property name="build.sysclasspath" value="ignore" />

  <!-- Name of the output jar file -->
  <property name="jarFile"  location="heptag_wrapper.jar"/>
  
  <!-- Sources -->
  <property name="srcDir" location="src"/>
  
  <!-- Output directory for the build process -->
  <property name="outputDir"  location="classes"/>

  <!-- Libraries directory for the build process -->
  <property name="libDir"  location="lib"/>
  
  <!-- Extensions directory for the build process -->
  <property name="extDir"  location="lib/ext"/>

  <!-- Documentation directory -->
  <property name="docDir"  location="doc"/>
  
  <!-- Use the new 1.3+ compiler -->
  <property name="build.compiler"  value="modern"/>

  
  <!-- tools.jar path -->
  <path id="tools.jar.path" location="../bin/tools14.jar"/>
  
  <!-- The build CLASSPATH -->
  <path id="build.class.path">
    <fileset file="../../bin/gate.jar"/>
    <fileset file="lib/heptag.jar"/>
  </path>
  
  <!-- Prints out some information messages -->
  <echo level="info">
    This is the ANT build script for a CREOLE GATE component (http://gate.ac.uk).
    Type &quot;ant help&quot; for details about the targets available.
    GATE ${gate.version}, build ${gate.build}</echo>
    
  <!-- Prints out details about the targets -->
  <target name="help">
    <echo level="info">
      This is the ANT build script for gate (http://gate.ac.uk).
      The following targets are available
        -all (default target): compiles GUK and GATE classes and makes the gate.jar archive.
        
        -compile: compiles all the .java files
        -resources: copies the resources to the output directory (${outputDir})
        -jar: creates the gate.jar archive
        -run: starts GATE
        -clean: cleans up the output from all previous builds
        
        -doc: creates the Javadoc and Java2HTML documentation
        -docclean: deletes all built documentation
        -jape: rebuilds the JAPE parser files and associated documentation
        -guk: compiles the GUK classes and builds the guk.jar archive
        -gukdemo: starts the GUK Editor (a.k.a. GATE Unicode Editor)
        -test: runs the GATE test suite
        
        -distro: make a GATE distribution (calls all build tasks in the process)
    </echo>
  </target>
  

	<!-- This target compiles all the classes -->  
  <target name="compile"
          description="compile the source " >
    <!-- Compile the java code from ${srcDir} into ${buildDir} -->
    <javac srcdir="${srcDir}" 
		       destdir="${outputDir}"
           includes="gate/**"
           source="1.4"
					 classpathref="build.class.path"/>
  </target>
	
  <!-- Make gate.jar archive -->
	<target name="jar" depends="compile">
		<jar destfile="${jarFile}" 
         update="false"
         index="true">
      <fileset dir="${outputDir}/"
               includes="gate/**"/>
    </jar>
	</target>
  
  
  <!-- Clear all build output -->
  <target name="clean">
    <delete includeemptydirs="true">
      <fileset dir="${outputDir}" excludes="**/CVS,**/CVS/**,**/.cvsignore"/>
    </delete>
  </target>
  
  <!-- Dummy javadoc as there are no sources but gate core wants the target -->
  <target name="javadoc">
  </target>
  
  <!-- Make documentation - internal -->
  <target name="internaljavadoc">
    <javadoc access="private" 
              destdir="${docDir}/javadoc/internal"
              classpathref="run.class.path"
              Extdirs="${extDir}"
              Encoding="UTF-8"
              Use="yes"
              Windowtitle="GATE JavaDoc"
              link="http://docs.oracle.com/javase/6/docs/api/"
              docencoding="UTF-8"
              charset="UTF-8"
              source="1.6"
              breakiterator="true">
      <fileset dir="${srcDir}"/>        
    </javadoc>
  </target>

  
  <!-- Convert the source to HTML using the java2html utility -->
  <target name="java2html">
    <java jar="${buildDir}/lib/j2h.jar"
          fork="true"
          spawn="false">
      <jvmarg value="-Dfile.encoding=UTF-8"/>
      <arg value="-d"/> <arg file="${docDir}/java2html/"/>
      <arg value="-js"/> <arg file="${srcDir}"/>
      <arg value="-jd"/> <arg file="${docDir}/javadoc"/>
      <arg value="-m"/> <arg value="4"/>
      <arg value="-t"/> <arg value="2"/>
      <arg value="-n"/> <arg value="&quot;GATE source&quot;"/>
    </java>
  </target>
 
  <target name="doc" depends="javadoc, internaljavadoc, java2html"/>
 
  
  <!-- Clear all built documentation -->
  <target name="docclean">
    <delete includeemptydirs="true">
      <fileset dir="${docDir}/javadoc" excludes="**/CVS,**/CVS/**,**/.cvsignore,internal,internal/**"/>
    </delete>
    <delete includeemptydirs="true">
      <fileset dir="${docDir}/javadoc/internal" excludes="**/CVS,**/CVS/**,**/.cvsignore"/>
    </delete>
    <delete includeemptydirs="true">
      <fileset dir="${docDir}/java2html" excludes="**/CVS,**/CVS/**,**/.cvsignore"/>
    </delete>
  </target>
    
  <target name="test" depends="jar">
    <junit fork="true" 
           showoutput="yes"
           printsummary="yes">
      <classpath refid="run.class.path"/>
      <sysproperty key="gate.config" value="${buildDir}/gate.xml"/>
      <jvmarg value="-Djava.ext.dirs=${extDir}"/>
      <formatter type="plain"
                 usefile="false"/>
      <formatter type="xml"
                 if="write.xml"/>
      <test name="gate.TestGate"
            outfile="testResult"
            todir="${buildDir}"/>
    </junit>
  </target>  
</project>

<?xml version="1.0"?>
<!-- $Id: build.xml 15311 2012-02-03 09:48:37Z markagreenwood $ -->
<project name="GATE Tokenisers" default="jar" basedir=".">
    <description>
        GATE see http://gate.ac.uk
    </description>
  <!-- set global properties for this build -->
  <!-- Prevent Ant from warning about includeantruntime not being set -->
  <property name="build.sysclasspath" value="ignore" />

  <!-- Name of the output jar file -->
  <property name="jarFile"  location="heptag_wrapper.jar"/>
  
  <!-- Sources -->
  <property name="srcDir" location="src"/>
  
  <!-- Output directory for the build process -->
  <property name="outputDir"  location="classes"/>

  <!-- Libraries directory for the build process -->
  <property name="libDir"  location="lib"/>
  
  <!-- Extensions directory for the build process -->
  <property name="extDir"  location="lib/ext"/>

  <!-- Documentation directory -->
  <property name="docDir"  location="doc"/>
  
  <!-- Use the new 1.3+ compiler -->
  <property name="build.compiler"  value="modern"/>

  
  <!-- tools.jar path -->
  <path id="tools.jar.path" location="../bin/tools14.jar"/>
  
  <!-- The build CLASSPATH -->
  <path id="build.class.path">
    <fileset file="../../bin/gate.jar"/>
    <fileset file="lib/heptag.jar"/>
  </path>
  
  <!-- Prints out some information messages -->
  <echo level="info">
    This is the ANT build script for a CREOLE GATE component (http://gate.ac.uk).
    Type &quot;ant help&quot; for details about the targets available.
    GATE ${gate.version}, build ${gate.build}</echo>
    
  <!-- Prints out details about the targets -->
  <target name="help">
    <echo level="info">
      This is the ANT build script for gate (http://gate.ac.uk).
      The following targets are available
        -all (default target): compiles GUK and GATE classes and makes the gate.jar archive.
        
        -compile: compiles all the .java files
        -resources: copies the resources to the output directory (${outputDir})
        -jar: creates the gate.jar archive
        -run: starts GATE
        -clean: cleans up the output from all previous builds
        
        -doc: creates the Javadoc and Java2HTML documentation
        -docclean: deletes all built documentation
        -jape: rebuilds the JAPE parser files and associated documentation
        -guk: compiles the GUK classes and builds the guk.jar archive
        -gukdemo: starts the GUK Editor (a.k.a. GATE Unicode Editor)
        -test: runs the GATE test suite
        
        -distro: make a GATE distribution (calls all build tasks in the process)
    </echo>
  </target>
  

	<!-- This target compiles all the classes -->  
  <target name="compile"
          description="compile the source " >
    <!-- Compile the java code from ${srcDir} into ${buildDir} -->
    <javac srcdir="${srcDir}" 
		       destdir="${outputDir}"
           includes="gate/**"
           source="1.4"
					 classpathref="build.class.path"/>
  </target>
	
  <!-- Make gate.jar archive -->
	<target name="jar" depends="compile">
		<jar destfile="${jarFile}" 
         update="false"
         index="true">
      <fileset dir="${outputDir}/"
               includes="gate/**"/>
    </jar>
	</target>
  
  
  <!-- Clear all build output -->
  <target name="clean">
    <delete includeemptydirs="true">
      <fileset dir="${outputDir}" excludes="**/CVS,**/CVS/**,**/.cvsignore"/>
    </delete>
  </target>
  
  <!-- Dummy javadoc as there are no sources but gate core wants the target -->
  <target name="javadoc">
  </target>
  
  <!-- Make documentation - internal -->
  <target name="internaljavadoc">
    <javadoc access="private" 
              destdir="${docDir}/javadoc/internal"
              classpathref="run.class.path"
              Extdirs="${extDir}"
              Encoding="UTF-8"
              Use="yes"
              Windowtitle="GATE JavaDoc"
              link="http://docs.oracle.com/javase/6/docs/api/"
              docencoding="UTF-8"
              charset="UTF-8"
              source="1.6"
              breakiterator="true">
      <fileset dir="${srcDir}"/>        
    </javadoc>
  </target>

  
  <!-- Convert the source to HTML using the java2html utility -->
  <target name="java2html">
    <java jar="${buildDir}/lib/j2h.jar"
          fork="true"
          spawn="false">
      <jvmarg value="-Dfile.encoding=UTF-8"/>
      <arg value="-d"/> <arg file="${docDir}/java2html/"/>
      <arg value="-js"/> <arg file="${srcDir}"/>
      <arg value="-jd"/> <arg file="${docDir}/javadoc"/>
      <arg value="-m"/> <arg value="4"/>
      <arg value="-t"/> <arg value="2"/>
      <arg value="-n"/> <arg value="&quot;GATE source&quot;"/>
    </java>
  </target>
 
  <target name="doc" depends="javadoc, internaljavadoc, java2html"/>
 
  
  <!-- Clear all built documentation -->
  <target name="docclean">
    <delete includeemptydirs="true">
      <fileset dir="${docDir}/javadoc" excludes="**/CVS,**/CVS/**,**/.cvsignore,internal,internal/**"/>
    </delete>
    <delete includeemptydirs="true">
      <fileset dir="${docDir}/javadoc/internal" excludes="**/CVS,**/CVS/**,**/.cvsignore"/>
    </delete>
    <delete includeemptydirs="true">
      <fileset dir="${docDir}/java2html" excludes="**/CVS,**/CVS/**,**/.cvsignore"/>
    </delete>
  </target>
    
  <target name="test" depends="jar">
    <junit fork="true" 
           showoutput="yes"
           printsummary="yes">
      <classpath refid="run.class.path"/>
      <sysproperty key="gate.config" value="${buildDir}/gate.xml"/>
      <jvmarg value="-Djava.ext.dirs=${extDir}"/>
      <formatter type="plain"
                 usefile="false"/>
      <formatter type="xml"
                 if="write.xml"/>
      <test name="gate.TestGate"
            outfile="testResult"
            todir="${buildDir}"/>
    </junit>
  </target>  
</project>

