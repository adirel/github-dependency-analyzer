<!--
build.xml

Master ant build file for Bio-Formats.
Download Apache Ant from http://ant.apache.org/.
Type "ant -p" for a list of targets.

===============================================================================
This build file handles the following components.
For more information on a component, see the
build.properties file in that component's subtree.

Formats code generator
    Package for generating other code, including the Bio-Formats metadata API,
    related documentation, Ice bindings, and Bio-Formats C++ bindings headers
    -=-
    JAR file:      bf-autogen.jar
    Path:          components/autogen
    Project deps:  Bio-Formats, Formats Common
    Library deps:  Apache Velocity
    Optional:      (none)
    License:       GPL

Bio-Formats
    A library for reading and writing popular microscopy file formats
    -=-
    JAR file:      bio-formats.jar
    Path:          components/bio-formats
    Project deps:  Formats Common, OME-XML Java library, JAI Image I/O Tools,
                   MDB Tools (Java port), Apache Jakarta POI,
                   Luratech LuraWave stubs
    Library deps:  JGoodies Forms, Logback, NetCDF,
                   Simple Logging Facade for Java API, TestNG
    Optional:      Xalan Serializer, Xalan
    License:       GPL

Formats Common
    A library containing common I/O and reflection classes
    -=-
    JAR file:      formats-common.jar
    Path:          components/formats-common
    Project deps:  (none)
    Library deps:  Simple Logging Facade for Java API, TestNG
    Optional:      Logback
    License:       GPL

Plugins for ImageJ
    A collection of plugins for ImageJ, including the Bio-Formats Importer,
    Bio-Formats Exporter, Bio-Formats Macro Extensions, Data Browser, Stack
    Colorizer and Stack Slicer
    -=-
    JAR file:      bio-formats_plugins.jar
    Path:          components/bio-formats-plugins
    Project deps:  Bio-Formats, Formats Common, OME-XML Java library
    Library deps:  JGoodies Forms, ImageJ, JUnit, Logback
    Optional:      (none)
    License:       GPL

OME-XML Java library
    A library for working with OME-XML metadata structures
    -=-
    JAR file:      ome-xml.jar
    Path:          components/ome-xml
    Project deps:  (none)
    Library deps:  Simple Logging Facade for Java API, TestNG
    Optional:      Logback
    License:       GPL

Testing framework
    Framework for automated and manual testing of software components
    -=-
    JAR file:      bio-formats-testing-framework.jar
    Path:          components/test-suite
    Project deps:  Bio-Formats, Formats Common, OME I/O
    Library deps:  Logback, Simple Logging Facade for Java API, TestNG
    Optional:      (none)
    License:       BSD

===============================================================================
The following components are forks of third party projects:

JAI Image I/O Tools
    Java API to handle JPEG and JPEG2000 files
    -=-
    JAR file:      jai_imageio.jar
    Path:          components/forks/jai
    Project deps:  (none)
    Optional:      (none)
    License:       BSD
    Project URL:   http://jai-imageio.dev.java.net/
    Notes:         Used by Bio-Formats to read images compressed with JPEG2000
                   and lossless JPEG. Modified from the 2008-10-14 source to
                   include support for the YCbCr color space. Several files in
                   the com.sun.media.jai packages were removed, as they are not
                   needed by Bio-Formats, and created an additional dependency.
                   This component will be removed once our changes have been
                   added to the official JAI CVS repository.

MDB Tools (Java port)
    Java API to handle Microsoft MDB format (Access)
    -=-
    JAR file:      mdbtools-java.jar
    Path:          components/forks/mdbtools
    Project deps:  (none)
    Optional:      (none)
    License:       LGPL
    Project URL:   http://sourceforge.net/forum/message.php?msg_id=2550619
    Notes:         Used by Bio-Formats for Zeiss LSM metadata in MDB files.

Apache Jakarta POI
    Java API to handle Microsoft OLE 2 Compound Document format (Word, Excel)
    -=-
    JAR file:      ome-poi.jar
    Path:          components/forks/poi
    Project deps:  Formats Common
    Optional:      (none)
    License:       Apache
    Project URL:   http://jakarta.apache.org/poi/
    Notes:         Based on poi-2.5.1-final-20040804.jar, with bugfixes for OLE
                   v2 and memory efficiency improvements. Used by Bio-Formats
                   for OLE support (cxd, ipw, oib, zvi).

===============================================================================
The following components are stubs of third party projects:

Luratech LuraWave stubs
    Stub of proprietary Java API to handle Luratech LWF compression
    -=-
    JAR file:      lwf-stubs.jar
    Path:          components/stubs/lwf-stubs
    Project deps:  (none)
    Optional:      (none)
    License:       BSD
    Project URL:   http://www.luratech.com/
    Notes:         required to compile Bio-Formats's support for Luratech LWF
                   compression for the Opera Flex format

===============================================================================
The following external dependencies (in the jar folder) may be required:
Ant-Contrib
    JAR file:  ant-contrib-1.0b3.jar
    URL:       http://ant-contrib.sourceforge.net/
    Notes:     used by tools target to iterate over JAR files ("for" task)
    License:   Apache

Checkstyle
    JAR file:  checkstyle-all-5.0.jar
    URL:       http://checkstyle.sourceforge.net/
    Notes:     used by style Ant target to check source code style conventions
    License:   LGPL

Apache Jakarta Commons HttpClient
    JAR file:  commons-httpclient-2.0-rc2.jar
    URL:       http://jakarta.apache.org/commons/httpclient/
    Notes:     required for OME-Java to communicate with OME servers
    License:   Apache

Apache Jakarta Commons Logging
    JAR file:  commons-logging.jar
    URL:       http://jakarta.apache.org/commons/logging/
    Notes:     used by OME-Java
    License:   Apache

FindBugs Ant task
    JAR file:  findbugs-ant.jar
    URL:       http://findbugs.sourceforge.net/
    Notes:     used by findbugs Ant target to check for program bugs
    License:   LGPL

JGoodies Forms
    JAR file:  jgoodies-forms-1.7.2.jar
    URL:       http://www.jgoodies.com/freeware/forms/index.html
    Notes:     used for layout by Data Browser and OME Notes
    License:   BSD

ImageJ
    JAR file:  ij.jar
    URL:       http://rsb.info.nih.gov/ij/
    Notes:     used by plugins for ImageJ and OME plugins for ImageJ
    License:   Public domain

JUnit
    JAR file:  junit-4.8.2.jar
    URL:       http://www.junit.org/
    Notes:     unit testing framework used for a few unit tests
    License:   Common Public License

Logback
    JAR file:  logback-core-1.1.1.jar, logback-classic-1.1.1.jar
    URL:       http://logback.qos.ch
    Notes:     (none)
    License:   EPL v1.0 and LGPL 2.1

Native library loader
    JAR file:  native-lib-loader-2.0-SNAPSHOT.jar
    URL:       http://github.com/scijava/native-lib-loader
    Notes:     required for loading native libraries
    License:   BSD

NetCDF
    JAR file:  netcdf-4.3.19.jar
    URL:       http://www.unidata.ucar.edu/software/netcdf-java/
    Notes:     used by Bio-Formats via reflection for HDF support (Imaris 5.5)
    License:   LGPL

Simple Logging Facade for Java API
    JAR file:  slf4j-api-1.7.6.jar
    URL:       http://www.slf4j.org/
    Notes:     used for all logging in loci.*
    License:   BSD

Xalan Serializer
    JAR file:  serializer-2.7.1.jar
    URL:       http://xml.apache.org/xalan-j/
    Notes:     used for OME-XML transformations
    License:   Apache

TestNG
    JAR file:  testng-6.8.jar
    URL:       http://testng.org/
    Notes:     testing framework used for the automated test suite
    License:   Apache

Apache Velocity
    JAR file:  velocity-1.6.3-dep.jar
    URL:       http://velocity.apache.org/
    Notes:     used to autogenerate the loci.formats.meta and loci.formats.ome
               Bio-Formats packages
    License:   Apache

Xalan
    JAR file:  xalan-2.7.1.jar
    URL:       http://xml.apache.org/xalan-j/
    Notes:     used for OME-XML transformations
    License:   Apache

Apache XML-RPC
    JAR file:  xmlrpc-1.2-b1.jar
    URL:       http://ws.apache.org/xmlrpc/
    Notes:     used by OME-Java library to communicate with OME servers
    License:   Apache
-->

<project name="Bio-Formats" default="jars" basedir=".">
  <description>
    Master build file for all Bio-Formats software components
  </description>
  <import file="ant/toplevel.xml"/>

  <!-- OME-compatibility layer -->
  <target name="dist" description="OME hook: build and publish Bio-Formats dist">
    <ant target="tools"/>
    <ant target="tools-ome"/>
    <ant target="jar-formats-bsd-tests"/>
    <ant antfile="ome.xml" inheritRefs="false" inheritAll="false"/>
  </target>

  <target name="eclipse" description="OME hook: create eclipse .classpath file">
    <ant target="eclipse" antfile="ome.xml" inheritRefs="false" inheritAll="false"/>
  </target>

  <target name="test-compile" depends="compile-tests" description="OME hook: compile all tests"/>

  <target name="integration" description="No-op"/>

</project>
<!--
build.xml

Ant build file for Bio-Formats code generators.
Download Apache Ant from http://ant.apache.org/.
Type "ant -p" for a list of targets.
-->

<project name="autogen" default="jar" basedir=".">
  <description>Build file for Bio-Formats code generators</description>
  <property name="root.dir" location="../.."/>
  <import file="${root.dir}/ant/java.xml"/>
  <property file="build.properties"/>

  <target name="gen-format-pages" depends="compile"
    description="generate Sphinx pages for each supported format">
    <java classname="FormatPageAutogen"
      classpath="${classes.dir}:${component.runtime-cp}" fork="true">
      <arg value="${filelist}"/>
    </java>
  </target>

  <target name="gen-original-meta-support" depends="compile"
    description="generate docs for Bio-Formats original metadata support">
    <java classname="OriginalMetadataAutogen"
      classpath="${classes.dir}:${component.runtime-cp}" fork="true">
      <arg value="${filelist}"/>
    </java>
  </target>

  <target name="gen-meta-support" depends="compile"
    description="generate docs for Bio-Formats metadata support">
    <exec executable="bash">
      <arg value="${dest.dir}/gen-meta-support.sh"/>
      <arg value="${root.dir}"/>
    </exec>
    <if>
      <isset property="omexml.version"/>
      <then>
        <java classname="${component.main-class}"
          classpath="${classes.dir}:${component.runtime-cp}"
          fork="true" dir="${component.meta-support-dir}">
            <arg value="${omexml.version}"/>
        </java>
      </then>
      <else>
<echo>
Please set the omexml.version property to match
the latest release of the OME-XML schema. E.g.:
  ant -Domexml.version=2008-09 gen-meta-support
</echo>
      </else>
    </if>
  </target>

</project>
<!--
build.xml

Ant build file for Bio-Formats ImageJ plugins project.
Download Apache Ant from http://ant.apache.org/.
Type "ant -p" for a list of targets.
-->

<project name="bio-formats-plugins" default="jar" basedir=".">
  <description>Build file for Bio-Formats ImageJ Plugins project</description>
  <property name="root.dir" location="../.."/>
  <import file="${root.dir}/ant/java.xml"/>
  <property file="build.properties"/>
</project>
<!--
build.xml

Ant build file for Bio-Formats command line tools.
Download Apache Ant from http://ant.apache.org/.
Type "ant -p" for a list of targets.
-->

<project name="bio-formats-tools" default="jar" basedir=".">
  <description>Build file for Bio-Formats tools project</description>
  <property name="root.dir" location="../.."/>
  <import file="${root.dir}/ant/java.xml"/>
  <property file="build.properties"/>

</project>
<!--
build.xml

Ant build file for JAI ImageIO project.
Download Apache Ant from http://ant.apache.org/.
Type "ant -p"  for a list of targets.
-->

<project name="jai" default="jar" basedir=".">
  <description>
    Slightly modified version of the JAI ImageIO project
  </description>
  <property name="root.dir" location="../../.."/>
  <import file="${root.dir}/ant/java.xml"/>
  <property file="build.properties"/>
</project>
<!--
build.xml

Ant build file for MDB Tools project.
Download Apache Ant from http://ant.apache.org/.
Type "ant -p"  for a list of targets.
-->

<project name="mdbtools" default="jar" basedir=".">
  <description>
    OME's fork of the Java MDB Tools project
  </description>
  <property name="root.dir" location="../../.."/>
  <import file="${root.dir}/ant/java.xml"/>
  <property file="build.properties"/>
</project>
<!--
build.xml

Ant build file for Apache POI project.
Download Apache Ant from http://ant.apache.org/.
Type "ant -p"  for a list of targets.
-->

<project name="ome-poi" default="jar" basedir=".">
  <description>
    OME's fork of the Apache POI project
  </description>
  <property name="root.dir" location="../../.."/>
  <import file="${root.dir}/ant/java.xml"/>
  <property file="build.properties"/>
</project>
<!--
build.xml

Ant build file for libjpeg-turbo Java bindings.
Download Apache Ant from http://ant.apache.org/.
Type "ant -p" for a list of targets.
-->

<project name="turbojpeg" default="jar" basedir=".">
  <description>Build file for libjpeg-turbo Java bindings</description>
  <property name="root.dir" location="../.."/>
  <import file="${root.dir}/ant/java.xml"/>
  <property file="build.properties"/>

  <target name="jar" depends="compile" description="generate JAR file">
    <!-- NOTE: Overrides default "jar" target from java.xml -->

    <mkdir dir="${artifact.dir}"/>
    <jar jarfile="${artifact.dir}/${component.jar}" basedir="${classes.dir}">
      <metainf dir="${basedir}" includes="lib/**/*"/>
      <manifest>
        <attribute name="Main-Class" value="${component.main-class}"/>
        <attribute name="Class-Path" value="${component.manifest=cp}"/>
      </manifest>
    </jar>
  </target>

</project>
<!--
build.xml

Ant build file for top-level reader and writer APIs.
Download Apache Ant from http://ant.apache.org/.
Type "ant -p" for a list of targets.
-->

<project name="formats-api" default="jar" basedir=".">
  <description>Build file for top-level reader and writer APIs</description>
  <property name="root.dir" location="../.."/>
  <import file="${root.dir}/ant/java.xml"/>
  <property file="build.properties"/>
</project>
<!--
build.xml

Ant build file for BSD implementations of Bio-Formats readers and writers.
Download Apache Ant from http://ant.apache.org/.
Type "ant -p" for a list of targets.
-->

<project name="formats-bsd" default="jar" basedir=".">
  <description>Build file for BSD Bio-Formats readers and writers</description>
  <property name="root.dir" location="../.."/>
  <import file="${root.dir}/ant/java.xml"/>
  <property file="build.properties"/>

  <target name="test" depends="jar,compile-tests,test-no-ome-xml,
    test-no-lurawave, test-no-jai, test-spec"
    description="run tests">
    <!-- NOTE: Overrides default "test" target from java.xml -->
    <copy tofile="${build.dir}/testng.xml" overwrite="true"
      file="${tests.dir}/loci/formats/utests/testng.xml"/>
    <testng haltonfailure="true" testname="${component.name}">
      <classpath>
        <pathelement location="${root.dir}/tools/"/><!-- logback.xml -->
        <pathelement location="${test-classes.dir}"/>
        <pathelement location="${classes.dir}"/>
        <pathelement path="${component.runtime-cp}"/>
      </classpath>
      <xmlfileset file="${build.dir}/testng.xml"/>
      <jvmarg value="-Dlurawave.license=XXX"/>
    </testng>
  </target>

  <target name="test-no-lurawave" depends="compile-tests"
    description="run missing LuraWave JAR tests" if="doTests">
    <copy tofile="${build.dir}/testng.xml" overwrite="true"
      file="${tests.dir}/loci/formats/utests/testng-no-lurawave.xml"/>
    <testng failureProperty="failedTest">
      <classpath>
        <pathelement location="${root.dir}/tools/"/><!-- logback.xml -->
        <pathelement location="${test-classes.dir}"/>
        <pathelement location="${classes.dir}"/>
        <pathelement path="${component.cp.no-lurawave}"/>
      </classpath>
      <xmlfileset file="${build.dir}/testng.xml"/>
      <jvmarg value="-mx${testng.memory}"/>
    </testng>
    <fail if="failedTest"/>
  </target>

  <target name="test-no-jai" depends="compile-tests"
    description="run missing JAI ImageIO JAR tests" if="doTests">
    <copy tofile="${build.dir}/testng.xml" overwrite="true"
      file="${tests.dir}/loci/formats/utests/testng-no-jai.xml"/>
    <testng failureProperty="failedTest">
      <classpath>
        <pathelement location="${root.dir}/tools/"/><!-- logback.xml -->
        <pathelement location="${test-classes.dir}"/>
        <pathelement location="${classes.dir}"/>
        <pathelement path="${component.cp.no-jai}"/>
      </classpath>
      <xmlfileset file="${build.dir}/testng.xml"/>
      <jvmarg value="-mx${testng.memory}"/>
    </testng>
    <fail if="failedTest"/>
  </target>

  <target name="test-no-ome-xml" depends="compile-tests"
    description="run missing OME-XML JAR tests" if="doTests">
    <copy tofile="${build.dir}/testng.xml" overwrite="true"
      file="${tests.dir}/loci/formats/utests/testng-no-ome-xml.xml"/>
    <testng failureProperty="failedTest">
      <classpath>
        <pathelement location="${root.dir}/tools/"/><!-- logback.xml -->
        <pathelement location="${test-classes.dir}"/>
        <pathelement location="${classes.dir}"/>
        <pathelement path="${component.cp.no-xml}"/>
      </classpath>
      <xmlfileset file="${build.dir}/testng.xml"/>
      <jvmarg value="-mx${testng.memory}"/>
    </testng>
    <fail if="failedTest"/>
  </target>

    <target name="test-spec" depends="jar,compile-tests"
    description="run specification tests">
    <copy tofile="${build.dir}/testng.xml" overwrite="true"
      file="${tests.dir}/spec/testng.xml"/>
    <testng haltonfailure="true" testname="${component.name}">
      <classpath>
        <pathelement location="${root.dir}/tools/"/><!-- logback.xml -->
        <pathelement location="${test-classes.dir}"/>
        <pathelement location="${classes.dir}"/>
        <pathelement path="${component.runtime-cp}"/>
      </classpath>
      <xmlfileset file="${build.dir}/testng.xml"/>
    </testng>
  </target>

  <target name="jar-formats-bsd-tests" depends="compile, compile-tests, copy-test-source"
    description="generate jar of spec test classes" if="doTests">
    <echo>About to compile tests</echo>
    <mkdir dir="${artifact.dir}"/>
    <jar jarfile="${artifact.dir}/${test-component.jar}" basedir="${test-classes.dir}"/>
    <echo>After test to build *-test.jar</echo>
  </target>


</project>
<!--
build.xml

Ant build file for Bio-Formats Legacy project.
Download Apache Ant from http://ant.apache.org/.
Type "ant -p" for a list of targets.
-->

<project name="formats-common" default="jar" basedir=".">
  <description>Build file for Bio-Formats project</description>
  <property name="root.dir" location="../.."/>
  <import file="${root.dir}/ant/java.xml"/>
  <property file="build.properties"/>

  <target name="test" depends="jar, compile-tests" description="run tests">
    <!-- NOTE: Overrides default "test" target from java.xml -->
    <copy tofile="${build.dir}/testng.xml"
      file="${testng.xml.template}" overwrite="true"/>
    <testng failureProperty="failedTest">
      <classpath>
        <pathelement location="${root.dir}/tools/"/><!-- logback.xml -->
        <pathelement location="${test-classes.dir}"/>
        <pathelement location="${classes.dir}"/>
        <pathelement path="${component.runtime-cp}"/>
      </classpath>
      <xmlfileset file="${build.dir}/testng.xml"/>
      <jvmarg value="-mx${testng.memory}"/>
    </testng>
    <fail if="failedTest"/>
  </target>

  <target name="test-parallel" depends="compile-tests"
    description="run parallel tests" if="doTests">
    <copy tofile="${build.dir}/testng.xml"
      file="${testng.xml.template}" overwrite="true"/>
    <testng failureProperty="failedTest" parallel="classes">
      <classpath>
        <pathelement location="${root.dir}/tools/"/><!-- logback.xml -->
        <pathelement location="${test-classes.dir}"/>
        <pathelement location="${classes.dir}"/>
        <pathelement path="${component.runtime-cp}"/>
      </classpath>
      <xmlfileset file="${build.dir}/testng.xml"/>
      <jvmarg value="-mx${testng.memory}"/>
    </testng>
    <fail if="failedTest"/>
  </target>
</project>
<!--
build.xml

Ant build file for Bio-Formats project.
Download Apache Ant from http://ant.apache.org/.
Type "ant -p" for a list of targets.
-->

<project name="formats-gpl" default="jar" basedir=".">
  <description>Build file for Bio-Formats project</description>
  <property name="root.dir" location="../.."/>
  <import file="${root.dir}/ant/java.xml"/>
  <property file="build.properties"/>

  <target name="test" depends="jar,compile-tests,test-no-mdb,test-no-netcdf,
    test-no-poi"
    description="run tests">
    <!-- NOTE: Overrides default "test" target from java.xml -->
    <copy tofile="${build.dir}/testng.xml" overwrite="true"
      file="${tests.dir}/loci/formats/utests/testng.xml"/>
    <testng haltonfailure="true" testname="${component.name}">
      <classpath>
        <pathelement location="${root.dir}/tools/"/><!-- logback.xml -->
        <pathelement location="${test-classes.dir}"/>
        <pathelement location="${classes.dir}"/>
        <pathelement path="${component.runtime-cp}"/>
      </classpath>
      <xmlfileset file="${build.dir}/testng.xml"/>
      <jvmarg value="-mx${testng.memory}"/>
    </testng>
  </target>

  <target name="test-no-mdb" depends="compile-tests"
    description="run missing MDB tools JAR tests" if="doTests">
    <copy tofile="${build.dir}/testng.xml" overwrite="true"
      file="${tests.dir}/loci/formats/utests/testng-no-mdb.xml"/>
    <testng failureProperty="failedTest">
      <classpath>
        <pathelement location="${root.dir}/tools/"/><!-- logback.xml -->
        <pathelement location="${test-classes.dir}"/>
        <pathelement location="${classes.dir}"/>
        <pathelement path="${component.cp.no-mdb}"/>
      </classpath>
      <xmlfileset file="${build.dir}/testng.xml"/>
      <jvmarg value="-mx${testng.memory}"/>
    </testng>
    <fail if="failedTest"/>
  </target>

  <target name="test-no-netcdf" depends="compile-tests"
    description="run missing NetCDF JAR tests" if="doTests">
    <copy tofile="${build.dir}/testng.xml" overwrite="true"
      file="${tests.dir}/loci/formats/utests/testng-no-netcdf.xml"/>
    <testng failureProperty="failedTest">
      <classpath>
        <pathelement location="${root.dir}/tools/"/><!-- logback.xml -->
        <pathelement location="${test-classes.dir}"/>
        <pathelement location="${classes.dir}"/>
        <pathelement path="${component.cp.no-netcdf}"/>
      </classpath>
      <xmlfileset file="${build.dir}/testng.xml"/>
      <jvmarg value="-mx${testng.memory}"/>
    </testng>
    <fail if="failedTest"/>
  </target>

  <target name="test-no-poi" depends="compile-tests"
    description="run missing POI JAR tests" if="doTests">
    <copy tofile="${build.dir}/testng.xml" overwrite="true"
      file="${tests.dir}/loci/formats/utests/testng-no-poi.xml"/>
    <testng failureProperty="failedTest">
      <classpath>
        <pathelement location="${root.dir}/tools/"/><!-- logback.xml -->
        <pathelement location="${test-classes.dir}"/>
        <pathelement location="${classes.dir}"/>
        <pathelement path="${component.cp.no-poi}"/>
      </classpath>
      <xmlfileset file="${build.dir}/testng.xml"/>
      <jvmarg value="-mx${testng.memory}"/>
    </testng>
    <fail if="failedTest"/>
  </target>

  <target name="test-metadata" depends="compile-tests"
    description="test metadata level support for a single file" if="doTests">
    <testng sourcedir="${test.dir}" testname="Metadata tests" failureProperty="failedTest">
      <classpath>
        <pathelement location="${root.dir}/tools/"/><!-- logback.xml -->
        <pathelement location="${test-classes.dir}"/>
        <pathelement location="${classes.dir}"/>
        <pathelement path="${component.runtime-cp}"/>
      </classpath>
      <classfileset file="${test-classes.dir}/loci/formats/utests/MetadataConfigurableTest.class"/>
      <sysproperty key="testng.filename" value="${testng.filename}"/>
      <jvmarg value="-mx${testng.memory}"/>
    </testng>
    <fail if="failedTest"/>
  </target>

  <target name="gen-structure-table" depends="compile"
    description="generate the dataset structure table">
    <java classname="loci.formats.tools.MakeDatasetStructureTable"
      args="../../docs/sphinx/formats/dataset-table.txt"/>
  </target>

</project>
<!--
build.xml

Ant build file for the Metakit library.
Download Apache Ant from http://ant.apache.org/.
Type "ant -p"  for a list of targets.
-->

<project name="metakit" default="jar" basedir=".">
  <description>Library for reading Metakit database files</description>
  <property name="root.dir" location="../.."/>
  <import file="${root.dir}/ant/java.xml"/>
  <property file="build.properties"/>

  <target name="test" depends="jar, compile-tests" description="run tests">
    <!-- NOTE: Overrides default "test" target from java.xml -->
    <copy tofile="${build.dir}/testng.xml"
      file="${testng.xml.template}" overwrite="true"/>
    <testng failureProperty="failedTest">
      <classpath>
        <pathelement location="${root.dir}/tools/"/><!-- logback.xml -->
        <pathelement location="${test-classes.dir}"/>
        <pathelement location="${classes.dir}"/>
        <pathelement path="${component.runtime-cp}"/>
      </classpath>
      <xmlfileset file="${build.dir}/testng.xml"/>
    </testng>
    <fail if="failedTest"/>
  </target>

  <target name="test-file" depends="jar, compile-tests" description="run tests">
    <copy tofile="${build.dir}/testng.xml"
      file="${testng.xml.template}" overwrite="true"/>
    <testng failureProperty="failedTest">
      <classpath>
        <pathelement location="${root.dir}/tools/"/><!-- logback.xml -->
        <pathelement location="${test-classes.dir}"/>
        <pathelement location="${classes.dir}"/>
        <pathelement path="${component.runtime-cp}"/>
      </classpath>
      <xmlfileset file="${build.dir}/testng.xml"/>
      <sysproperty key="filename" value="${filename}"/>
      <jvmarg value="-mx${testng.memory}"/>
    </testng>
    <fail if="failedTest"/>
  </target>

</project>
<!--
build.xml

Ant build file for OME-XML Java library project.
Download Apache Ant from http://ant.apache.org/.
Type "ant -p" for a list of targets.
-->

<project name="ome-xml" default="jar" basedir=".">
  <description>Build file for OME-XML Java library project</description>
  <property name="root.dir" location="../.."/>
  <import file="${root.dir}/ant/java.xml"/>
  <import file="${root.dir}/ant/xsd-fu.xml"/>
  <property file="build.properties"/>

  <target name="generate-source" depends="init-title">
    <property name="xsdfu.modelpath" value="${gensrc.dir}"/>
    <property name="xsdfu.metadatapath" value="${gensrc.dir}"/>
    <property name="xsdfu.omepath" value="${gensrc.dir}"/>

    <delete dir="${xsdfu.modelpath}"/>
    <delete dir="${xsdfu.metadatapath}"/>
    <delete dir="${xsdfu.omepath}"/>

    <!-- Generate the OME model object classes -->
    <xsd_fu package="ome.xml.model" lang="Java" output="${xsdfu.modelpath}">
      <arg value="java_classes"/>
    </xsd_fu>

    <!-- Generate the OME model enumeration classes -->
    <xsd_fu package="ome.xml.model.enums" lang="Java" output="${xsdfu.modelpath}">
      <arg value="enum_types"/>
    </xsd_fu>

    <!-- Generate the handlers for the OME model enumeration classes -->
    <xsd_fu package="ome.xml.model.enums.handlers" lang="Java" output="${xsdfu.modelpath}">
      <arg value="enum_handlers"/>
    </xsd_fu>

    <!-- Generate the metadata interfaces -->
    <xsd_fu package="ome.xml.meta" lang="Java" output="${xsdfu.metadatapath}">
      <arg value="metadata"/>
    </xsd_fu>
    <!-- Generate the OME XML metadata interface -->
    <xsd_fu package="ome.xml.meta" lang="Java" output="${xsdfu.omepath}">
      <arg value="omexml_metadata"/>
    </xsd_fu>
  </target>

  <target name="test" depends="jar,compile-tests" description="run tests">
    <!-- NOTE: Overrides default "test" target from java.xml -->
    <copy tofile="${build.dir}/testng.xml" overwrite="true"
      file="${tests.dir}/ome/xml/utests/testng.xml"/>
    <testng failureProperty="failedTest">
      <classpath>
        <pathelement location="${root.dir}/tools/"/><!-- logback.xml -->
        <pathelement location="${test-classes.dir}"/>
        <pathelement location="${classes.dir}"/>
        <pathelement path="${component.runtime-cp}"/>
        <pathelement path="${lib.dir}/logback-core-${logback.version}.jar"/>
        <pathelement path="${lib.dir}/logback-classic-${logback.version}.jar"/>
      </classpath>
      <xmlfileset file="${build.dir}/testng.xml"/>
      <jvmarg value="-mx${testng.memory}"/>
    </testng>
    <fail if="failedTest"/>
  </target>

</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="specification" default="package" basedir=".">

  <!-- Added to get to build after move -->
  <property name="root.dir" location="../.."/>
  <property name="target.dir" location="target"/>

  <import file="${root.dir}/ant/java.xml"/>
  <property file="build.properties"/>

  <target name="copy-source">
    <copy todir="${dest.dir}" preservelastmodified="true">
      <fileset dir="${basedir}" includes="transforms/,released-schema/,src/"
        excludes="transforms/internal, transforms/internal/*"/>
    </copy>
    <copy todir="${classes.dir}" preservelastmodified="true">
      <fileset dir="${dest.dir}" excludes="src/**"/>
    </copy>
  </target>
  
  <target name="package" depends="offline-validate-ome-xml, jar">
  </target>

  <target name="online-validate-ome-xml"
    description="Checks that all files used in the documentation are well formed using online schemas (very, very slow)">
    <xmlvalidate failonerror="false" warn="true">
      <fileset dir="${basedir}" includes="samples/**/*.ome"
        excludes="samples/**/2008-09/*-metadata.ome, samples/inprogress/*.ome, samples/inprogress/**/*.ome"/>
      <attribute name="http://xml.org/sax/features/validation" value="true"/>
      <attribute name="http://apache.org/xml/features/validation/schema" value="true"/>
      <attribute name="http://xml.org/sax/features/namespaces" value="true"/>
    </xmlvalidate>
    <echo message="Sample OME-XML files validated."/>
  </target>

  <target name="offline-validate-ome-xml"
    description="Checks that all files used in the documentation are well formed using local schemas (fast)">
    <schemavalidate failonerror="true" warn="true">
      <fileset dir="${basedir}" includes="samples/**/*.ome"
        excludes="samples/**/2008-09/*-metadata.ome, samples/inprogress/*.ome"/>

      <!-- Standard -->
      <schema namespace="http://www.w3.org/XML/1998/namespace"
        file="${basedir}/released-schema/additions/jar/xml.xsd"/>
      <schema namespace="http://www.w3.org/2001/XMLSchema"
        file="${basedir}/released-schema/additions/jar/XMLSchema.xsd"/>

      <!-- 2003-FC -->
      <!-- No namespace is defined for AnalysisChain in this release -->
      <schema
        namespace="http://www.openmicroscopy.org/XMLschemas/AnalysisModule/RC1/AnalysisModule.xsd"
        file="${basedir}/released-schema/2003-FC/AnalysisModule.xsd"/>
      <schema
        namespace="http://www.openmicroscopy.org/XMLschemas/BinaryFile/RC1/BinaryFile.xsd"
        file="${basedir}/released-schema/2003-FC/BinaryFile.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/XMLschemas/CA/RC1/CA.xsd"
        file="${basedir}/released-schema/2003-FC/CA.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/XMLschemas/CLI/RC1/CLI.xsd"
        file="${basedir}/released-schema/2003-FC/CLI.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/XMLschemas/MLI/IR2/MLI.xsd"
        file="${basedir}/released-schema/2003-FC/MLI.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/XMLschemas/OME/FC/ome.xsd"
        file="${basedir}/released-schema/2003-FC/ome.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/XMLschemas/STD/RC2/STD.xsd"
        file="${basedir}/released-schema/2003-FC/STD.xsd"/>
      <schema namespace="http://openmicroscopy.com/XMLschemas/DataHistory/IR3/DataHistory.xsd"
        file="${basedir}/released-schema/2003-FC/DataHistory.xsd"/>

      <!-- 2007-06 -->
      <schema namespace="http://www.openmicroscopy.org/Schemas/AnalysisChain/2007-06"
        file="${basedir}/released-schema/2007-06/AnalysisChain.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/AnalysisModule/2007-06"
        file="${basedir}/released-schema/2007-06/AnalysisModule.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/BinaryFile/2007-06"
        file="${basedir}/released-schema/2007-06/BinaryFile.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/CA/2007-06"
        file="${basedir}/released-schema/2007-06/CA.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/CLI/2007-06"
        file="${basedir}/released-schema/2007-06/CLI.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/MLI/2007-06"
        file="${basedir}/released-schema/2007-06/MLI.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/OME/2007-06"
        file="${basedir}/released-schema/2007-06/ome.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/SPW/2007-06"
        file="${basedir}/released-schema/2007-06/SPW.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/STD/2007-06"
        file="${basedir}/released-schema/2007-06/STD.xsd"/>
      <schema namespace="http://openmicroscopy.com/Schemas/DataHistory/2007-06"
        file="${basedir}/released-schema/2007-06/DataHistory.xsd"/>

      <!-- 2008-02 -->
      <schema namespace="http://www.openmicroscopy.org/Schemas/AnalysisChain/2008-02"
        file="${basedir}/released-schema/2008-02/AnalysisChain.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/AnalysisModule/2008-02"
        file="${basedir}/released-schema/2008-02/AnalysisModule.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/BinaryFile/2008-02"
        file="${basedir}/released-schema/2008-02/BinaryFile.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/CA/2008-02"
        file="${basedir}/released-schema/2008-02/CA.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/CLI/2008-02"
        file="${basedir}/released-schema/2008-02/CLI.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/MLI/2008-02"
        file="${basedir}/released-schema/2008-02/MLI.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/OME/2008-02"
        file="${basedir}/released-schema/2008-02/ome.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/SPW/2008-02"
        file="${basedir}/released-schema/2008-02/SPW.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/STD/2008-02"
        file="${basedir}/released-schema/2008-02/STD.xsd"/>
      <schema namespace="http://openmicroscopy.com/Schemas/DataHistory/2008-02"
        file="${basedir}/released-schema/2008-02/DataHistory.xsd"/>

      <!-- 2008-09 -->
      <schema namespace="http://www.openmicroscopy.org/Schemas/AnalysisChain/2008-09"
        file="${basedir}/released-schema/2008-09/AnalysisChain.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/AnalysisModule/2008-09"
        file="${basedir}/released-schema/2008-09/AnalysisModule.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/BinaryFile/2008-09"
        file="${basedir}/released-schema/2008-09/BinaryFile.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/CA/2008-09"
        file="${basedir}/released-schema/2008-09/CA.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/CLI/2008-09"
        file="${basedir}/released-schema/2008-09/CLI.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/MLI/2008-09"
        file="${basedir}/released-schema/2008-09/MLI.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/OME/2008-09"
        file="${basedir}/released-schema/2008-09/ome.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/OMERO/2008-09"
        file="${basedir}/released-schema/2008-09/OMERO.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/SA/2008-09"
        file="${basedir}/released-schema/2008-09/SA.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/SPW/2008-09"
        file="${basedir}/released-schema/2008-09/SPW.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/STD/2008-09"
        file="${basedir}/released-schema/2008-09/STD.xsd"/>
      <schema namespace="http://openmicroscopy.com/Schemas/DataHistory/2008-09"
        file="${basedir}/released-schema/2008-09/DataHistory.xsd"/>

      <!-- 2009-09 -->
      <schema namespace="http://www.openmicroscopy.org/Schemas/AnalysisChain/2009-09"
        file="${basedir}/released-schema/2009-09/AnalysisChain.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/AnalysisModule/2009-09"
        file="${basedir}/released-schema/2009-09/AnalysisModule.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/BinaryFile/2009-09"
        file="${basedir}/released-schema/2009-09/BinaryFile.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/CA/2009-09"
        file="${basedir}/released-schema/2009-09/CA.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/CLI/2009-09"
        file="${basedir}/released-schema/2009-09/CLI.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/MLI/2009-09"
        file="${basedir}/released-schema/2009-09/MLI.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/OME/2009-09"
        file="${basedir}/released-schema/2009-09/ome.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/OMERO/2009-09"
        file="${basedir}/released-schema/2009-09/OMERO.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/SA/2009-09"
        file="${basedir}/released-schema/2009-09/SA.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/SPW/2009-09"
        file="${basedir}/released-schema/2009-09/SPW.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/STD/2009-09"
        file="${basedir}/released-schema/2009-09/STD.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/ROI/2009-09"
        file="${basedir}/released-schema/2009-09/ROI.xsd"/>
      <schema namespace="http://openmicroscopy.com/Schemas/DataHistory/2009-09"
        file="${basedir}/released-schema/2009-09/DataHistory.xsd"/>

      <!-- 2010-04 -->
      <schema namespace="http://www.openmicroscopy.org/Schemas/BinaryFile/2010-04"
        file="${basedir}/released-schema/2010-04/BinaryFile.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/OME/2010-04"
        file="${basedir}/released-schema/2010-04/ome.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/OMERO/2010-04"
        file="${basedir}/released-schema/2010-04/OMERO.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/SA/2010-04"
        file="${basedir}/released-schema/2010-04/SA.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/SPW/2010-04"
        file="${basedir}/released-schema/2010-04/SPW.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/ROI/2010-04"
        file="${basedir}/released-schema/2010-04/ROI.xsd"/>

      <!-- 2010-06 -->
      <schema namespace="http://www.openmicroscopy.org/Schemas/BinaryFile/2010-06"
        file="${basedir}/released-schema/2010-06/BinaryFile.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/OME/2010-06"
        file="${basedir}/released-schema/2010-06/ome.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/OMERO/2010-06"
        file="${basedir}/released-schema/2010-06/OMERO.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/SA/2010-06"
        file="${basedir}/released-schema/2010-06/SA.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/SPW/2010-06"
        file="${basedir}/released-schema/2010-06/SPW.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/ROI/2010-06"
        file="${basedir}/released-schema/2010-06/ROI.xsd"/>

      <!-- 2011-06 -->
      <schema namespace="http://www.openmicroscopy.org/Schemas/BinaryFile/2011-06"
        file="${basedir}/released-schema/2011-06/BinaryFile.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/OME/2011-06"
        file="${basedir}/released-schema/2011-06/ome.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/OMERO/2011-06"
        file="${basedir}/released-schema/2011-06/OMERO.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/SA/2011-06"
        file="${basedir}/released-schema/2011-06/SA.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/SPW/2011-06"
        file="${basedir}/released-schema/2011-06/SPW.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/ROI/2011-06"
        file="${basedir}/released-schema/2011-06/ROI.xsd"/>

      <!-- 2012-06 -->
      <schema namespace="http://www.openmicroscopy.org/Schemas/BinaryFile/2012-06"
        file="${basedir}/released-schema/2012-06/BinaryFile.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/OME/2012-06"
        file="${basedir}/released-schema/2012-06/ome.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/SA/2012-06"
        file="${basedir}/released-schema/2012-06/SA.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/SPW/2012-06"
        file="${basedir}/released-schema/2012-06/SPW.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/ROI/2012-06"
        file="${basedir}/released-schema/2012-06/ROI.xsd"/>

      <!-- 2013-06 -->
      <schema namespace="http://www.openmicroscopy.org/Schemas/BinaryFile/2013-06"
        file="${basedir}/released-schema/2013-06/BinaryFile.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/OME/2013-06"
        file="${basedir}/released-schema/2013-06/ome.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/SA/2013-06"
        file="${basedir}/released-schema/2013-06/SA.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/SPW/2013-06"
        file="${basedir}/released-schema/2013-06/SPW.xsd"/>
      <schema namespace="http://www.openmicroscopy.org/Schemas/ROI/2013-06"
        file="${basedir}/released-schema/2013-06/ROI.xsd"/>

    </schemavalidate>
    <echo message="Sample OME-XML files validated."/>
  </target>

  <target name="clean" description="Cleans the published schemas and specification jar">
    <delete dir="${basedir}/published"/>
    <delete dir="${basedir}/build"/>
    <delete dir="${target.dir}"/>
  </target>

</project>

<!--
build.xml

Ant build file for OME Plugins project.
Download Apache Ant from http://ant.apache.org/.
Type "ant -p" for a list of targets.
-->

<project name="lwf-stubs" default="jar" basedir=".">
  <description>Stubs of LWF classes to enable compilation</description>
  <property name="root.dir" location="../../.."/>
  <import file="${root.dir}/ant/java.xml"/>
  <property file="build.properties"/>
</project>
<!--
build.xml

Ant build file for Bio-Formats testing framework project.
Download Apache Ant from http://ant.apache.org/.
Type "ant -p" for a list of targets.
-->

<project name="tests" default="jar" basedir=".">
  <description>Build file for Bio-Formats testing framework project</description>
  <property name="root.dir" location="../.."/>
  <import file="${root.dir}/ant/java.xml"/>
  <property file="build.properties"/>

  <!-- overrides 'clean' target in common.xml -->
  <target name="clean" >
    <delete dir="${build.dir}"/>
    <delete>
      <fileset dir="." includes="*.log"/>
    </delete>
  </target>

  <target name="test-file-handles" depends="compile"
    description="run tests for leaking file handles">
    <exec executable="${basedir}/target-test-runner">
      <arg value="loci.tests.testng.FileHandleTest"/>
      <arg value="${filename}"/>
    </exec>
  </target>

  <target name="test-open-bytes-performance" depends="compile"
    description="run tests for open bytes performance">
    <exec executable="${basedir}/target-test-runner">
      <arg value="loci.tests.testng.OpenBytesPerformanceTest"/>
      <arg value="${filename}"/>
    </exec>
  </target>

  <target name="test-tiff-writer" depends="compile"
    description="run tests for TIFF writing (conversion)">
    <exec executable="${basedir}/target-test-runner">
      <arg value="loci.tests.testng.TiffWriterTest"/>
      <arg value="${filename}"/>
    </exec>
  </target>

  <target name="test-tiff-compress" depends="compile"
    description="run tests for TIFF compression/decompression">
    <testng testname="TIFF compression tests"
      failureProperty="failedTest">
      <classpath>
        <pathelement location="${basedir}"/><!-- logback.xml -->
        <pathelement location="${classes.dir}"/>
        <pathelement path="${component.runtime-cp}"/>
      </classpath>
      <classfileset file="${classes.dir}/loci/tests/testng/CompressDecompressTest.class"/>
    </testng>
    <fail if="failedTest"/>
  </target>

  <target name="test-minimal-convert" depends="compile"
    description="run conversion tests with fixed input data">
    <testng testname="Minimal conversion tests" failureProperty="failedTest">
      <classpath>
        <pathelement location="${basedir}"/><!-- logback.xml -->
        <pathelement location="${classes.dir}"/>
        <pathelement path="${component.runtime-cp}"/>
      </classpath>
      <classfileset file="${classes.dir}/loci/tests/testng/ConversionTest.class"/>
    </testng>
    <fail if="failedTest"/>
  </target>

  <target name="test-convert" depends="compile"
    description="run automated tests on writers">
    <testng groups="all" testname="Writer tests"
      listener="loci.tests.testng.DotTestListener"
      suitename="Bio-Formats test suite"
      failureProperty="failedTest">
      <classpath>
        <pathelement location="${basedir}"/><!-- logback.xml -->
        <pathelement location="${classes.dir}"/>
        <pathelement path="${component.runtime-cp}"/>
      </classpath>
      <classfileset file="${classes.dir}/${writer-test.class}"/>
      <sysproperty key="testng.filename" value="${testng.filename}"/>
      <sysproperty key="testng.directory" value="${testng.directory}"/>
      <sysproperty key="lurawave.license" value="${lurawave.license}"/>
      <jvmarg value="-mx${testng.memory}"/>
    </testng>
    <fail if="failedTest"/>
  </target>

  <target name="test-all" depends="compile"
    description="run all automated tests">
    <testng groups="all" testname="All tests"
      listeners="loci.tests.testng.DotTestListener,loci.tests.testng.OrderingListener"
      suitename="Bio-Formats software test suite"
      failureProperty="failedTest" useDefaultListeners="false">
      <classpath>
        <pathelement location="${basedir}"/><!-- logback.xml -->
        <pathelement location="${classes.dir}"/>
        <pathelement path="${component.runtime-cp}"/>
      </classpath>
      <classfileset file="${classes.dir}/${reader-test.class}"/>
      <sysproperty key="testng.toplevel-config" value="${testng.toplevel-config}"/>
      <sysproperty key="testng.directory-prefix" value="${testng.directory-prefix}"/>
      <sysproperty key="testng.directory-list" value="${testng.directory-list}"/>
      <sysproperty key="testng.filename" value="${testng.filename}"/>
      <sysproperty key="testng.directory" value="${testng.directory}"/>
      <sysproperty key="testng.omexmlDirectory" value="${testng.omexmlDirectory}"/>
      <sysproperty key="testng.configSuffix" value="${testng.configSuffix}"/>
      <sysproperty key="testng.multiplier" value="${testng.multiplier}"/>
      <sysproperty key="lurawave.license" value="${lurawave.license}"/>
      <sysproperty key="testng.in-memory" value="${testng.in-memory}"/>
      <jvmarg value="-mx${testng.memory}"/>
    </testng>
    <fail if="failedTest"/>
  </target>

  <target name="test-config" depends="compile"
    description="generate config files for automated test suite">
    <testng groups="config" testname="Config generation"
      listener="loci.tests.testng.DotTestListener"
      suitename="Bio-Formats software test suite"
      failureProperty="failedTest">
      <classpath>
        <pathelement location="${basedir}"/><!-- logback.xml -->
        <pathelement location="${classes.dir}"/>
        <pathelement path="${component.runtime-cp}"/>
      </classpath>
      <classfileset file="${classes.dir}/${reader-test.class}"/>
      <sysproperty key="testng.toplevel-config" value="${testng.toplevel-config}"/>
      <sysproperty key="testng.directory-prefix" value="${testng.directory-prefix}"/>
      <sysproperty key="testng.directory-list" value="${testng.directory-list}"/>
      <sysproperty key="testng.filename" value="${testng.filename}"/>
      <sysproperty key="testng.directory" value="${testng.directory}"/>
      <sysproperty key="testng.omexmlDirectory" value="${testng.omexmlDirectory}"/>
      <sysproperty key="testng.multiplier" value="${testng.multiplier}"/>
      <sysproperty key="lurawave.license" value="${lurawave.license}"/>
      <sysproperty key="testng.in-memory" value="${testng.in-memory}"/>
      <jvmarg value="-mx${testng.memory}"/>
    </testng>
    <fail if="failedTest"/>
  </target>

  <target name="test-automated" depends="compile"
    description="run automated tests in group 'automated'">

    <condition property="testng.threadCount" value="1">
      <not>
        <isset property="testng.threadCount"/>
      </not>
    </condition>

    <testng groups="automated" testname="Automated tests"
      listeners="loci.tests.testng.OrderingListener"
      suitename="Bio-Formats software test suite"
      parallel="instances" threadCount="${testng.threadCount}"
      failureProperty="failedTest" useDefaultListeners="false">
      <classpath>
        <pathelement location="${basedir}"/><!-- logback.xml -->
        <pathelement location="${classes.dir}"/>
        <pathelement path="${component.runtime-cp}"/>
      </classpath>
      <classfileset file="${classes.dir}/${reader-test.class}"/>
      <sysproperty key="testng.toplevel-config" value="${testng.toplevel-config}"/>
      <sysproperty key="testng.directory-prefix" value="${testng.directory-prefix}"/>
      <sysproperty key="testng.directory-list" value="${testng.directory-list}"/>
      <sysproperty key="testng.filename" value="${testng.filename}"/>
      <sysproperty key="testng.directory" value="${testng.directory}"/>
      <sysproperty key="testng.omexmlDirectory" value="${testng.omexmlDirectory}"/>
      <sysproperty key="testng.configSuffix" value="${testng.configSuffix}"/>
      <sysproperty key="testng.multiplier" value="${testng.multiplier}"/>
      <sysproperty key="lurawave.license" value="${lurawave.license}"/>
      <sysproperty key="testng.in-memory" value="${testng.in-memory}"/>
      <jvmarg value="-mx${testng.memory}"/>
    </testng>
    <fail if="failedTest"/>
  </target>

  <target name="test-fast" depends="compile"
    description="run automated tests in group 'fast'">
    <testng groups="fast" testname="Fast tests"
      listeners="loci.tests.testng.DotTestListener,loci.tests.testng.OrderingListener"
      suitename="Bio-Formats software test suite"
      failureProperty="failedTest">
      <classpath>
        <pathelement location="${basedir}"/><!-- logback.xml -->
        <pathelement location="${classes.dir}"/>
        <pathelement path="${component.runtime-cp}"/>
      </classpath>
      <classfileset file="${classes.dir}/${reader-test.class}"/>
      <sysproperty key="testng.toplevel-config" value="${testng.toplevel-config}"/>
      <sysproperty key="testng.directory-prefix" value="${testng.directory-prefix}"/>
      <sysproperty key="testng.directory-list" value="${testng.directory-list}"/>
      <sysproperty key="testng.filename" value="${testng.filename}"/>
      <sysproperty key="testng.directory" value="${testng.directory}"/>
      <sysproperty key="testng.omexmlDirectory" value="${testng.omexmlDirectory}"/>
      <sysproperty key="testng.configSuffix" value="${testng.configSuffix}"/>
      <sysproperty key="testng.multiplier" value="${testng.multiplier}"/>
      <sysproperty key="lurawave.license" value="${lurawave.license}"/>
      <sysproperty key="testng.in-memory" value="${testng.in-memory}"/>
      <jvmarg value="-mx${testng.memory}"/>
    </testng>
    <fail if="failedTest"/>
  </target>

  <target name="test-pixels" depends="compile"
    description="run automated tests in group 'pixels'">
    <testng groups="pixels" testname="Pixels tests"
      listeners="loci.tests.testng.DotTestListener,loci.tests.testng.OrderingListener"
      suitename="Bio-Formats software test suite"
      failureProperty="failedTest">
      <classpath>
        <pathelement location="${basedir}"/><!-- logback.xml -->
        <pathelement location="${classes.dir}"/>
        <pathelement path="${component.runtime-cp}"/>
      </classpath>
      <classfileset file="${classes.dir}/${reader-test.class}"/>
      <sysproperty key="testng.toplevel-config" value="${testng.toplevel-config}"/>
      <sysproperty key="testng.directory-prefix" value="${testng.directory-prefix}"/>
      <sysproperty key="testng.directory-list" value="${testng.directory-list}"/>
      <sysproperty key="testng.filename" value="${testng.filename}"/>
      <sysproperty key="testng.directory" value="${testng.directory}"/>
      <sysproperty key="testng.omexmlDirectory" value="${testng.omexmlDirectory}"/>
      <sysproperty key="testng.configSuffix" value="${testng.configSuffix}"/>
      <sysproperty key="testng.multiplier" value="${testng.multiplier}"/>
      <sysproperty key="lurawave.license" value="${lurawave.license}"/>
      <sysproperty key="testng.in-memory" value="${testng.in-memory}"/>
      <jvmarg value="-mx${testng.memory}"/>
    </testng>
    <fail if="failedTest"/>
  </target>

  <target name="test-xml" depends="compile"
    description="run automated tests in group 'xml'">
    <testng groups="xml" testname="XML tests"
      listeners="loci.tests.testng.DotTestListener,loci.tests.testng.OrderingListener"
      suitename="Bio-Formats software test suite"
      failureProperty="failedTest">
      <classpath>
        <pathelement location="${basedir}"/><!-- logback.xml -->
        <pathelement location="${classes.dir}"/>
        <pathelement path="${component.runtime-cp}"/>
      </classpath>
      <classfileset file="${classes.dir}/${reader-test.class}"/>
      <sysproperty key="testng.toplevel-config" value="${testng.toplevel-config}"/>
      <sysproperty key="testng.directory-prefix" value="${testng.directory-prefix}"/>
      <sysproperty key="testng.directory-list" value="${testng.directory-list}"/>
      <sysproperty key="testng.filename" value="${testng.filename}"/>
      <sysproperty key="testng.directory" value="${testng.directory}"/>
      <sysproperty key="testng.omexmlDirectory" value="${testng.omexmlDirectory}"/>
      <sysproperty key="testng.configSuffix" value="${testng.configSuffix}"/>
      <sysproperty key="testng.multiplier" value="${testng.multiplier}"/>
      <sysproperty key="lurawave.license" value="${lurawave.license}"/>
      <sysproperty key="testng.in-memory" value="${testng.in-memory}"/>
      <jvmarg value="-mx${testng.memory}"/>
    </testng>
    <fail if="failedTest"/>
  </target>

  <target name="test-type" depends="compile"
    description="run automated tests in group 'type'">
    <testng groups="type" testname="Type tests"
      listeners="loci.tests.testng.DotTestListener,loci.tests.testng.OrderingListener"
      suitename="Bio-Formats software test suite"
      failureProperty="failedTest">
      <classpath>
        <pathelement location="${basedir}"/><!-- logback.xml -->
        <pathelement location="${classes.dir}"/>
        <pathelement path="${component.runtime-cp}"/>
      </classpath>
      <classfileset file="${classes.dir}/${reader-test.class}"/>
      <sysproperty key="testng.toplevel-config" value="${testng.toplevel-config}"/>
      <sysproperty key="testng.directory-prefix" value="${testng.directory-prefix}"/>
      <sysproperty key="testng.directory-list" value="${testng.directory-list}"/>
      <sysproperty key="testng.filename" value="${testng.filename}"/>
      <sysproperty key="testng.directory" value="${testng.directory}"/>
      <sysproperty key="testng.omexmlDirectory" value="${testng.omexmlDirectory}"/>
      <sysproperty key="testng.configSuffix" value="${testng.configSuffix}"/>
      <sysproperty key="testng.multiplier" value="${testng.multiplier}"/>
      <sysproperty key="lurawave.license" value="${lurawave.license}"/>
      <sysproperty key="testng.in-memory" value="${testng.in-memory}"/>
      <jvmarg value="-mx${testng.memory}"/>
    </testng>
    <fail if="failedTest"/>
  </target>

  <target name="test-config-xml" depends="compile"
    description="generate OME-XML files for automated test suite">
    <testng groups="config-xml" testname="OME-XML generation"
      listener="loci.tests.testng.DotTestListener"
      suitename="Bio-Formats software test suite"
      failureProperty="failedTest">
      <classpath>
        <pathelement location="${basedir}"/><!-- logback.xml -->
        <pathelement location="${classes.dir}"/>
        <pathelement path="${component.runtime-cp}"/>
      </classpath>
      <classfileset file="${classes.dir}/${reader-test.class}"/>
      <sysproperty key="testng.toplevel-config" value="${testng.toplevel-config}"/>
      <sysproperty key="testng.directory-prefix" value="${testng.directory-prefix}"/>
      <sysproperty key="testng.directory-list" value="${testng.directory-list}"/>
      <sysproperty key="testng.filename" value="${testng.filename}"/>
      <sysproperty key="testng.directory" value="${testng.directory}"/>
      <sysproperty key="testng.omexmlDirectory" value="${testng.omexmlDirectory}"/>
      <sysproperty key="testng.multiplier" value="${testng.multiplier}"/>
      <sysproperty key="lurawave.license" value="${lurawave.license}"/>
      <sysproperty key="testng.in-memory" value="${testng.in-memory}"/>
      <jvmarg value="-mx${testng.memory}"/>
    </testng>
    <fail if="failedTest"/>
  </target>

</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="xsd-fu" default="runall" basedir=".">
  <description>Build file for xsd-fu</description>
  <property name="root.dir" location="../.."/>
  <import file="${root.dir}/ant/java.xml"/>

  <target name="package"><!-- Skip compile -->
    <property name="py.target" value="${basedir}/build/lib"/>
    <mkdir dir="${py.target}"/>
    <setup_py>
      <env key="BF_VERSION" value="${release.version}"/>
      <arg value="build"/>
      <arg value="--build-platlib"/>
      <arg value="${py.target}"/>
      <arg value="--build-purelib"/>
      <arg value="${py.target}"/>
    </setup_py>
    <setup_py>
      <env key="BF_VERSION" value="${release.version}"/>
      <arg value="bdist_egg"/>
      <arg value="--dist-dir"/>
      <arg value="${target.dir}"/>
    </setup_py>
    <move todir="${target.dir}">
      <fileset dir="${target.dir}"/>
      <mapper type="regexp" from="(xsd_fu-.*?)-py(.*?).egg" to="xsd-fu.egg" />
    </move>
  </target>
  <target name="install" depends="package">
    <!-- Defining here to work around jar signing -->
    <publishArtifact/>
  </target>

  <target name="test-compile" description="No-op"/>
  <target name="test" description="No-op"/>
  <target name="integration" description="No-op"/>
  <target name="findbugs" description="No-op"/>

  <target name="runall" depends="run-3to8,run-7to8,run-8to8,run-8to9,run-3to9"/>
  <target name="run-3to8">
    <exec executable="./xslt/xslt-test2003FCTo200809"/>
  </target>
  <target name="run-7to8">
    <exec executable="./xslt/xslt-test200706To200809"/>
  </target>
  <target name="run-8to8">
    <exec executable="./xslt/xslt-test200802To200809"/>
  </target>
  <target name="run-8to9">
    <exec executable="./xslt/xslt-test200809To200909"/>
  </target>
  <target name="run-3to9">
    <exec executable="./xslt/xslt-test2003FCTo200809To200909"/>
  </target>

  <target name="clean" description="Cleans the published schemas and specification jar">
    <delete>
      <fileset dir="xslt" includes="**/*.pyc"/>
      <fileset dir="python" includes="**/*.pyc"/>
    </delete>
  </target>

</project>
