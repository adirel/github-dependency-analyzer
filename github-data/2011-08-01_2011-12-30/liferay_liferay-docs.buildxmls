<?xml version="1.0"?>

<project name="QuickstartGuide Conversion" default="echo-props" basedir=".">

	<import file="../build-common.xml" />

	<property name="doc.dir" value="QuickstartGuide"/>

</project>
<?xml version="1.0"?>

<project name="Properties to HTML conversion" default="build-properties-docs" basedir=".">
	<property name="project.dir" value="." />

	<property name="lib.dir" value="${project.dir}/lib" />

	<property name="liferay.portal.dir" value="${project.dir}/../liferay-portal" />
	<property name="properties.dir" value="${project.dir}/properties" />

	<property name="properties.title" value="Portal Properties" />
	<property name="properties.toc" value="true" />
	<property name="properties.file.path" value="portal.properties" />
	<property name="properties.dest.file.path" value="${properties.dir}"/>

	<property name="portal.properties.file.path" value="${liferay.portal.dir}/portal-impl/src/portal.properties" />
	<property name="system.properties.file.path" value="${liferay.portal.dir}/portal-impl/src/system.properties" />
	<property name="liferay-plugin-package_6_1_0.properties.file.path" value="${liferay.portal.dir}/definitions/liferay-plugin-package_6_1_0.properties" />
	<property name="liferay-plugin-package_6_2_0.properties.file.path" value="${liferay.portal.dir}/definitions/liferay-plugin-package_6_2_0.properties" />

	<path id="lib.classpath">
		<fileset dir="${lib.dir}" includes="*.jar" />
	</path>

	<taskdef name="bundle-properties" classname="com.liferay.portal.tools.PropertiesBundlerTask"
	 classpathref="lib.classpath"/>

	<!-- To run the properties converter, use a command of the form ant -Dproperties.title="Page Title" -Dtoc="false" -Dproperties.file=/path/to/properties/file -->
	<target name="properties-to-html" description="runs the properties converter">
		<java fork="true"
			classname="com.liferay.portal.tools.PropertiesConverter"
			classpathref="lib.classpath"
		>
			<arg value="${properties.file.path}" />
			<arg value="${properties.dest.file.path}" />
			<arg value="${properties.title}" />
			<arg value="${properties.toc}" />
		</java>
	</target>

	<!-- To build the properties HTML files, use a command of the form ant
		 -Dliferay.portal.dir=<path-to-your-liferay-portal> -Dlp.version=<your-liferay-portal-version> -->
	<target name="build-properties-docs" if="lp.version" depends="checkLpVersion" description="runs the properties converter to generate HTML versions of portal.properties, system.properties, and liferay-plugin-package.properties">
		<echo message="Include argument &quot;-Dliferay.portal.dir=yourPortalDir&quot; if your portal is not ${liferay.portal.dir}."/>

		<mkdir dir="${properties.dir}"/>

		<antcall target="properties-to-html">
			<param name="properties.title" value="Liferay ${lp.version} Portal Properties"/>
			<param name="properties.toc" value="true"/>
			<param name="properties.file.path" value="${portal.properties.file.path}"/>
			<param name="properties.dest.file.path" value="${properties.dir}"/>
		</antcall>

		<antcall target="properties-to-html">
			<param name="properties.title" value="Liferay ${lp.version} System Properties"/>
			<param name="properties.toc" value="true"/>
			<param name="properties.file.path" value="${system.properties.file.path}"/>
			<param name="properties.dest.file.path" value="${properties.dir}"/>
		</antcall>

		<antcall target="properties-to-html">
			<param name="properties.title" value="Liferay Plugin Package Properties 6.1"/>
			<param name="properties.toc" value="true"/>
			<param name="properties.file.path" value="${liferay-plugin-package_6_1_0.properties.file.path}"/>
			<param name="properties.dest.file.path" value="${properties.dir}"/>
		</antcall>

		<antcall target="properties-to-html">
			<param name="properties.title" value="Liferay Plugin Package Properties 6.2"/>
			<param name="properties.toc" value="true"/>
			<param name="properties.file.path" value="${liferay-plugin-package_6_2_0.properties.file.path}"/>
			<param name="properties.dest.file.path" value="${properties.dir}"/>
		</antcall>

		<antcall target="bundle-properties-docs"/>

	</target>

	<target name="bundle-properties-docs" if="lp.version" depends="checkLpVersion" description="bundles the properties HTML files with an index.html file that lists the included files">
		<bundle-properties lpVersion="${lp.version}" propertiesDir="${properties.dir}"/>
	</target>

	<target name="checkLpVersion" unless="lp.version">
		<echo message="Missing lp.version property. Specify argument of form &quot;-Dlp.version=yourPortalVersion&quot;"/>
	</target>

	<target name="clean" description="deletes the properties directory">
		<delete dir="${properties.dir}"/>
	</target>

</project>
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project default="dist">
	<property name="project.dir" value="." />

	<property name="build.dir" value="${project.dir}/classes" />
	<property name="dist.dir" value="${project.dir}/dist" />
	<property name="lib.dir" value="${project.dir}/lib" />
	<property name="src.dir" value="${project.dir}/src" />
	<property name="deploy.dir" value="${project.dir}/../../lib" />

	<path id="lib.classpath">
		<fileset dir="${lib.dir}" includes="*.jar" />
	</path>

	<path id="project.classpath">
		<pathelement path="${classpath}" />
		<path refid="lib.classpath" />
	</path>

	<!-- targets -->

	<target name="clean" description="cleans up" >
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
	</target>

	<target name="compile" description="compiles the code">
		<mkdir dir="${build.dir}" />

		<antcall target="compile-java">
			<param name="javac.classpathref" value="project.classpath" />
			<param name="javac.destdir" value="${build.dir}" />
			<param name="javac.srcdir" value="${src.dir}" />
		</antcall>
	</target>

	<target name="compile-java">
		<copy todir="${javac.destdir}">
			<fileset dir="${javac.srcdir}" excludes="**/*.java" />
		</copy>

		<javac
			classpathref="${javac.classpathref}"
			destdir="${javac.destdir}"
			includeAntRuntime="false"
			srcdir="${javac.srcdir}"
		/>
	</target>

    <target name="dist" depends="clean, compile"
	description="compiles the code and creates a runnable JAR file for the project">
		<mkdir dir="${dist.dir}" />
        <jar destfile="${dist.dir}/liferay-doc-utils.jar"
			filesetmanifest="mergewithoutmain">
            <manifest>
                <attribute name="Main-Class" value="com.liferay.documentation.util.DocUtils"/>
                <attribute name="Class-Path" value="."/>
            </manifest>
            <fileset dir="${build.dir}"/>
            <zipfileset excludes="META-INF/*.SF" src="${lib.dir}/commons-io-2.0.1.jar"/>
        </jar>
    </target>

	<target name="deploy" depends="dist" description="deploys liferay-doc-utils.jar to liferay-docs/lib">
		<copy file="${dist.dir}/liferay-doc-utils.jar" tofile="${deploy.dir}/liferay-doc-utils.jar"/>
	</target>

</project>
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project default="dist">
	<property name="project.dir" value="." />

	<property name="build.dir" value="${project.dir}/classes" />
	<property name="dist.dir" value="${project.dir}/dist" />
	<property name="docs.lib.dir" value="${project.dir}/../../lib" />
	<property name="lib.dir" value="${project.dir}/lib" />
	<property name="src.dir" value="${project.dir}/src" />

	<path id="lib.classpath">
		<fileset dir="${lib.dir}" includes="*.jar" />
	</path>

	<path id="project.classpath">
		<pathelement path="${classpath}" />
		<path refid="lib.classpath" />
	</path>

	<!-- targets -->

	<target name="clean" description="cleans up" >
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
	</target>

	<target name="compile" description="compiles the code">
		<mkdir dir="${build.dir}" />

		<antcall target="compile-java">
			<param name="javac.classpathref" value="project.classpath" />
			<param name="javac.destdir" value="${build.dir}" />
			<param name="javac.srcdir" value="${src.dir}" />
		</antcall>
	</target>

	<target name="compile-java">
		<copy todir="${javac.destdir}">
			<fileset dir="${javac.srcdir}" excludes="**/*.java" />
		</copy>

		<javac
			classpathref="${javac.classpathref}"
			destdir="${javac.destdir}"
			includeAntRuntime="false"
			srcdir="${javac.srcdir}"
		/>
	</target>

	<target name="dist" depends="clean, compile"
	description="calls clean and compile targets, and creates the properties-converter.jar">
		<mkdir dir="${dist.dir}" />
		<jar destfile="${dist.dir}/properties-converter.jar"
			filesetmanifest="mergewithoutmain"
			update="true">
			<manifest>
				<attribute name="Main-Class" value="com.liferay.portal.tools.propertiesconverter.PropertiesParser"/>
				<attribute name="Class-Path" value="freemarker.jar"/>
			</manifest>
			<fileset dir="${build.dir}"/>
		</jar>
	</target>

	<target name="deploy" depends="dist" description="deploys the properties-converter.jar to liferay-docs/lib">
		<copy file="${dist.dir}/properties-converter.jar" tofile="../../lib/properties-converter.jar" />
		<antcall target="clean" />
	</target>

</project>
<?xml version="1.0"?>

<project name="devGuide Conversion" default="echo-props" basedir=".">

	<import file="../build-common.xml" />

	<property name="doc.dir" value="devGuide"/>

</project>
<?xml version="1.0"?>
<!DOCTYPE project>

<project name="plugins" basedir="." default="all" xmlns:antelope="antlib:ise.antelope.tasks">
	<import file="build-common.xml" />

	<target name="all">
		<antcall target="clean" />
		<antcall target="deploy" />
	</target>

	<target name="build-service">
		<ant dir="hooks" target="build-service" inheritAll="false" />
		<ant dir="portlets" target="build-service" inheritAll="false" />
		<ant dir="webs" target="build-service" inheritAll="false" />
	</target>

	<target name="build-summary">
		<java
			classname="com.liferay.portal.tools.PluginsSummaryBuilder"
			classpathref="portal.classpath"
			fork="true"
			newenvironment="true"
		>
			<jvmarg value="-Dexternal-properties=com/liferay/portal/tools/dependencies/portal-tools.properties" />
			<jvmarg value="-Dplugins.dir=${sdk.dir}" />
		</java>

		<java
			classname="com.liferay.portal.tools.XSLTBuilder"
			classpathref="portal.classpath"
			fork="true"
			newenvironment="true"
		>
			<jvmarg value="-Dexternal-properties=com/liferay/portal/tools/dependencies/portal-tools.properties" />
			<arg value="${sdk.dir}/summary.xml" />
			<arg value="${sdk.dir}/summary.xsl" />
			<arg value="${sdk.dir}/summary.html" />
		</java>
	</target>

	<target name="clean">
		<ant dir="hooks" target="clean" inheritAll="false" />
		<ant dir="layouttpl" target="clean" inheritAll="false" />
		<ant dir="portlets" target="clean" inheritAll="false" />
		<ant dir="shared" target="clean" inheritAll="false" />
		<ant dir="themes" target="clean" inheritAll="false" />
		<ant dir="webs" target="clean" inheritAll="false" />
	</target>

	<target name="compile">
		<ant dir="hooks" target="compile" inheritAll="false" />
		<ant dir="layouttpl" target="compile" inheritAll="false" />
		<ant dir="portlets" target="compile" inheritAll="false" />
		<ant dir="shared" target="compile" inheritAll="false" />
		<ant dir="themes" target="compile" inheritAll="false" />
		<ant dir="webs" target="compile" inheritAll="false" />
	</target>

	<target name="deploy">
		<ant dir="hooks" target="deploy" inheritAll="false" />
		<ant dir="layouttpl" target="deploy" inheritAll="false" />
		<ant dir="portlets" target="deploy" inheritAll="false" />
		<ant dir="shared" target="deploy" inheritAll="false" />
		<ant dir="themes" target="deploy" inheritAll="false" />
		<ant dir="webs" target="deploy" inheritAll="false" />
	</target>

	<target name="direct-deploy">
		<ant dir="hooks" target="direct-deploy" inheritAll="false" />
		<ant dir="layouttpl" target="direct-deploy" inheritAll="false" />
		<ant dir="portlets" target="direct-deploy" inheritAll="false" />
		<ant dir="themes" target="direct-deploy" inheritAll="false" />
		<ant dir="webs" target="direct-deploy" inheritAll="false" />
	</target>

	<target name="ear">
		<delete dir="dist/liferay-portal.ear" />
		<delete dir="dist/modules" />

		<copy todir="dist" overwrite="yes">
			<fileset
				dir="${sdk.dir}/tools/ear_tmpl"
			/>
		</copy>

		<copy todir="dist/modules/APP-INF/lib">
			<fileset dir="${app.server.lib.global.dir}">
				<include name="*.jar" />
			</fileset>
		</copy>

		<fileset dir="dist/modules" id="ear.dependency.libraries">
			<include name="APP-INF/lib/*.jar" />
		</fileset>

		<pathconvert pathsep=" " property="ear.dependency.libraries.converted" refid="ear.dependency.libraries">
			<mapper>
				<chainedmapper>
					<flattenmapper />
					<globmapper from="*.jar" to="APP-INF/lib/*.jar" />
				</chainedmapper>
			</mapper>
		</pathconvert>

		<war
			basedir="${app.server.portal.dir}"
			destfile="dist/modules/liferay-portal.war"
		>
			<manifest>
				<attribute name="Class-Path" value="${ear.dependency.libraries.converted}" />
			</manifest>
		</war>

		<for param="module.full.path">
			<path>
				<dirset
					dir="${app.server.deploy.dir}"
					excludes="${plugins.ear.excludes}"
					includes="${plugins.ear.includes}"
				/>
			</path>
			<sequential>
				<antelope:stringutil string="@{module.full.path}" property="module.full.path.unix">
					<antelope:replace regex="\\" replacement="/" />
				</antelope:stringutil>

				<antelope:grep in="${module.full.path.unix}" regex="(.*/)(.*)" group="2" property="module.name" />

				<war
					basedir="@{module.full.path}"
					destfile="dist/modules/${module.name}.war"
				/>
			</sequential>
		</for>

		<fileset dir="dist/modules" id="ear.modules">
			<include name="*.war" />
		</fileset>

		<pathconvert pathsep="," property="ear.modules.converted" refid="ear.modules">
			<mapper>
				<chainedmapper>
					<flattenmapper />
				</chainedmapper>
			</mapper>
		</pathconvert>

		<java
			classname="com.liferay.portal.tools.EARBuilder"
			classpathref="portal.classpath"
			fork="true"
			newenvironment="true"
		>
			<jvmarg value="-Dexternal-properties=com/liferay/portal/tools/dependencies/portal-tools.properties" />
			<arg value="${basedir}/dist/modules/META-INF/application.xml" />
			<arg value="${ear.modules.converted}" />
			<arg value="${plugins.ear.portal.context.path}" />
		</java>

		<ear
			appxml="dist/modules/META-INF/application.xml"
			basedir="dist/modules"
			destfile="dist/liferay-portal.ear"
			excludes="META-INF/application.xml"
			includes="**/*.jar,*.war,META-INF/*.xml"
		/>

		<delete dir="dist/modules" />
	</target>

	<target name="extract-plugins-sdk">
		<mkdir dir="dist" />

		<delete file="dist/liferay-plugins-sdk-${lp.version}.zip" />

		<ant dir="webs/resources-importer-web" target="clean" inheritAll="false" />

		<zip destfile="dist/liferay-plugins-sdk-${lp.version}.zip">
			<zipfileset
				dir="."
				excludes="*.iml,.git/**,.ivy/**,build.*.properties,dist/**,ext/*-ext/**,hooks/*-hook/**,lib/**,ivy.xml.MD5,layouttpl/*-layouttpl/**,portlets/*-portlet/**,private-plugins.txt,shared/*-shared/**,source_formatter_*,summary.*,themes/*-theme/**,webs/*-web/**"
				prefix="liferay-plugins-sdk-${lp.version}"
			/>
			<zipfileset
				dir="."
				excludes="**/releng/**"
				includes="webs/resources-importer-web/**"
				prefix="liferay-plugins-sdk-${lp.version}"
			/>
			<zipfileset
				dir="."
				includes="lib/ant-contrib.jar,lib/antelopetasks.jar,lib/bcpg-jdk16.jar,lib/bcprov-jdk16.jar"
				prefix="liferay-plugins-sdk-${lp.version}"
			/>
		</zip>
	</target>

	<target name="format-javadoc">
		<ant dir="hooks" target="format-javadoc" inheritAll="false" />
		<ant dir="layouttpl" target="format-javadoc" inheritAll="false" />
		<ant dir="portlets" target="format-javadoc" inheritAll="false" />
		<ant dir="themes" target="format-javadoc" inheritAll="false" />
		<ant dir="webs" target="format-javadoc" inheritAll="false" />
	</target>

	<target name="setup-eclipse">
		<ant dir="hooks" target="clean" inheritAll="false" />
		<ant dir="portlets" target="clean" inheritAll="false" />
		<ant dir="webs" target="clean" inheritAll="false" />

		<ant dir="hooks" target="compile" inheritAll="false" />
		<ant dir="portlets" target="compile" inheritAll="false" />
		<ant dir="webs" target="compile" inheritAll="false" />

		<ant dir="hooks" target="setup-eclipse" inheritAll="false" />
		<ant dir="portlets" target="setup-eclipse" inheritAll="false" />
		<ant dir="webs" target="setup-eclipse" inheritAll="false" />
	</target>

	<target name="war">
		<ant dir="hooks" target="war" inheritAll="false" />
		<ant dir="layouttpl" target="war" inheritAll="false" />
		<ant dir="portlets" target="war" inheritAll="false" />
		<ant dir="themes" target="war" inheritAll="false" />
		<ant dir="webs" target="war" inheritAll="false" />
	</target>

	<target name="zip-portal">
		<if>
			<not>
				<equals arg1="${app.server.type}" arg2="tomcat" />
			</not>
			<then>
				<fail>
.

This task only works when the property "app.server.type" is "tomcat". However,
the outputted files will work in any supported application server.
				</fail>
			</then>
		</if>

		<tstamp>
			<format property="tstamp.value" pattern="yyyyMMddkkmmssSSS" />
		</tstamp>

		<zip destfile="dist/liferay-portal-dependencies-${tstamp.value}.zip">
			<zipfileset
				dir="${app.server.lib.global.dir}"
				prefix="liferay-portal-dependencies-${tstamp.value}"
			/>
		</zip>

		<delete file="dist/liferay-portal-${lp.version}.war" failonerror="false" />

		<zip
			basedir="${app.server.portal.dir}"
			destfile="dist/liferay-portal-${tstamp.value}.war"
			excludes="html/js/editor/_fckeditor/**,html/js/editor/fckeditor/_samples/**"
		/>

		<copy todir="${tstamp.value}/WEB-INF/lib">
			<fileset
				dir="lib"
				includes="ccpp.jar"
			/>
		</copy>

		<zip
			basedir="${tstamp.value}"
			destfile="dist/liferay-portal-${tstamp.value}.war"
			update="yes"
		/>

		<delete dir="${tstamp.value}" />
	</target>
</project><?xml version="1.0"?>
<!DOCTYPE project>

<project name="ext" basedir="." default="deploy">
	<import file="../build-common-plugins.xml" />

	<target name="create">
		<if>
			<not>
				<isset property="ext.name" />
			</not>
			<then>
				<fail>This task must be called by the create script.</fail>
			</then>
		</if>

		<property name="ext.parent.dir" value="${user.dir}" />
		<property name="ext.plugin.dir" value="${ext.parent.dir}/${ext.name}-ext" />

		<if>
			<available file="${ext.plugin.dir}" />
			<then>
				<fail>${ext.name}-ext already exists.</fail>
			</then>
		</if>

		<copy todir="${ext.plugin.dir}">
			<fileset
				dir="${sdk.dir}/tools/ext_tmpl"
			/>
		</copy>

		<mkdir dir="${ext.plugin.dir}/docroot/WEB-INF/ext-impl/src" />
		<mkdir dir="${ext.plugin.dir}/docroot/WEB-INF/ext-lib/global" />
		<mkdir dir="${ext.plugin.dir}/docroot/WEB-INF/ext-lib/portal" />
		<mkdir dir="${ext.plugin.dir}/docroot/WEB-INF/ext-service/src" />
		<mkdir dir="${ext.plugin.dir}/docroot/WEB-INF/ext-util-bridges/src" />
		<mkdir dir="${ext.plugin.dir}/docroot/WEB-INF/ext-util-java/src" />
		<mkdir dir="${ext.plugin.dir}/docroot/WEB-INF/ext-util-taglib/src" />

		<replace dir="${ext.plugin.dir}">
			<replacefilter token="@ext.display.name@" value="${ext.display.name}" />
			<replacefilter token="@ext.name@" value="${ext.name}" />
			<replacefilter token="@plugin.type.dir@" value="${plugin.type.dir}" />
		</replace>
	</target>

	<target name="upgrade-ext">
		<if>
			<not>
				<isset property="ext.name" />
			</not>
			<then>
				<fail>
.

Usage: ant upgrade-ext -Dext.dir=C:\ext -Dext.name=hello-world -Dext.display.name="Hello World"

The arguments "ext.dir", "ext.name", and "ext.display.name" are not properly
specified.

This task will build an EXT plugin from a legacy EXT environment. The files in
the directory denoted by "ext.dir" will be copied into the EXT plugin directory
called "ext.name"-ext. The property "ext.dir" must point to a legacy EXT
environment and the EXT plugin directory called "ext-name"-ext must not already
exist.
				</fail>
			</then>
		</if>

		<if>
			<available file="${ext.name}-ext" />
			<then>
				<fail>${ext.name}-ext already exists.</fail>
			</then>
		</if>

		<antcall target="create">
			<param name="ext.display.name" value="${ext.display.name}" />
			<param name="ext.name" value="${ext.name}" />
		</antcall>

		<copy todir="${ext.name}-ext/docroot/WEB-INF/ext-impl/src" failonerror="false">
			<fileset dir="${ext.dir}/ext-impl/src" />
		</copy>

		<copy todir="${ext.name}-ext/docroot/WEB-INF/ext-lib/global" failonerror="false">
			<fileset dir="${ext.dir}/ext-lib/global" />
		</copy>

		<copy todir="${ext.name}-ext/docroot/WEB-INF/ext-lib/portal" failonerror="false">
			<fileset dir="${ext.dir}/ext-lib/portal" />
		</copy>

		<copy todir="${ext.name}-ext/docroot/WEB-INF/ext-service/src" failonerror="false">
			<fileset dir="${ext.dir}/ext-service/src" />
		</copy>

		<copy todir="${ext.name}-ext/docroot/WEB-INF/ext-web/docroot" failonerror="false" overwrite="true">
			<fileset
				dir="${ext.dir}/ext-web/docroot"
				excludes="**/struts-config.xml,**/tiles-defs.xml"
			/>
		</copy>

		<copy
			file="${ext.dir}/ext-web/docroot/WEB-INF/struts-config.xml"
			tofile="${ext.name}-ext/docroot/WEB-INF/ext-web/docroot/WEB-INF/struts-config-ext.xml"
		/>

		<copy
			file="${ext.dir}/ext-web/docroot/WEB-INF/tiles-defs.xml"
			tofile="${ext.name}-ext/docroot/WEB-INF/ext-web/docroot/WEB-INF/tiles-defs-ext.xml"
		/>

		<copy todir="${ext.name}-ext/docroot/WEB-INF/sql" failonerror="false">
			<fileset dir="${ext.dir}/sql" />
		</copy>
	</target>
</project><?xml version="1.0"?>
<!DOCTYPE project>

<project name="hooks" basedir="." default="deploy">
	<import file="../build-common-plugins.xml" />

	<target name="create">
		<if>
			<or>
				<not>
					<isset property="hook.display.name" />
				</not>
				<not>
					<isset property="hook.name" />
				</not>
			</or>
			<then>
				<fail>This task must be called by the create script.</fail>
			</then>
		</if>

		<property name="hook.parent.dir" value="${user.dir}" />
		<property name="hook.dir" value="${hook.parent.dir}/${hook.name}-hook" />

		<if>
			<available file="${hook.dir}" />
			<then>
				<fail>${hook.name}-hook already exists.</fail>
			</then>
		</if>

		<copy todir="${hook.dir}">
			<fileset
				dir="${sdk.dir}/tools/hook_tmpl"
			/>
		</copy>

		<replace dir="${hook.dir}">
			<replacefilter token="@hook.display.name@" value="${hook.display.name}" />
			<replacefilter token="@hook.name@" value="${hook.name}" />
			<replacefilter token="@plugin.type.dir@" value="${plugin.type.dir}" />
		</replace>
	</target>
</project><?xml version="1.0"?>
<!DOCTYPE project>

<project name="layouttpl" basedir="." default="deploy" xmlns:antelope="antlib:ise.antelope.tasks">
	<import file="../build-common-plugins.xml" />

	<target name="create">
		<if>
			<or>
				<not>
					<isset property="layouttpl.display.name" />
				</not>
				<not>
					<isset property="layouttpl.name" />
				</not>
			</or>
			<then>
				<fail>This task must be called by the create script.</fail>
			</then>
		</if>

		<property name="layouttpl.parent.dir" value="${user.dir}" />
		<property name="layouttpl.dir" value="${layouttpl.parent.dir}/${layouttpl.name}-layouttpl" />

		<if>
			<available file="${layouttpl.dir}" />
			<then>
				<fail>${layouttpl.name}-layouttpl already exists.</fail>
			</then>
		</if>

		<copy todir="${layouttpl.dir}">
			<fileset
				dir="${sdk.dir}/tools/layouttpl_tmpl"
			/>
		</copy>

		<antelope:stringutil string="${layouttpl.name}" property="layouttpl.template.name">
			<replace regex="-" replacement="_" />
		</antelope:stringutil>

		<replace dir="${layouttpl.dir}">
			<replacefilter token="@layouttpl.display.name@" value="${layouttpl.display.name}" />
			<replacefilter token="@layouttpl.name@" value="${layouttpl.name}" />
			<replacefilter token="@layouttpl.template.name@" value="${layouttpl.template.name}" />
			<replacefilter token="@plugin.type.dir@" value="${plugin.type.dir}" />
		</replace>

		<move
			file="${layouttpl.dir}/docroot/blank_columns.png"
			tofile="${layouttpl.dir}/docroot/${layouttpl.template.name}.png"
		/>

		<move
			file="${layouttpl.dir}/docroot/blank_columns.tpl"
			tofile="${layouttpl.dir}/docroot/${layouttpl.template.name}.tpl"
		/>

		<move
			file="${layouttpl.dir}/docroot/blank_columns.wap.tpl"
			tofile="${layouttpl.dir}/docroot/${layouttpl.template.name}.wap.tpl"
		/>

		<touch file="${layouttpl.dir}/docroot/${layouttpl.template.name}.wap.tpl" />
	</target>
</project><?xml version="1.0"?>
<!DOCTYPE project>

<project name="portlets" basedir="." default="deploy" xmlns:antelope="antlib:ise.antelope.tasks">
	<import file="../build-common-plugins.xml" />

	<target name="create">
		<if>
			<or>
				<not>
					<isset property="portlet.display.name" />
				</not>
				<not>
					<isset property="portlet.name" />
				</not>
			</or>
			<then>
				<fail>This task must be called by the create script.</fail>
			</then>
		</if>

		<property name="portlet.parent.dir" value="${user.dir}" />
		<property name="portlet.dir" value="${portlet.parent.dir}/${portlet.name}-portlet" />

		<if>
			<available file="${portlet.dir}" />
			<then>
				<fail>${portlet.dir} already exists.</fail>
			</then>
		</if>

		<copy todir="${portlet.dir}">
			<fileset
				dir="${sdk.dir}/tools/portlet_tmpl"
			/>
		</copy>

		<antelope:stringutil string="${portlet.display.name}" property="portlet.java.class.name">
			<antelope:replace regex="\s+" replacement="" />
			<antelope:trim />
		</antelope:stringutil>

		<antelope:stringutil string="${portlet.name}" property="portlet.java.package.name">
			<antelope:replace regex="-" replacement="" />
			<antelope:trim />
		</antelope:stringutil>

		<if>
			<not>
				<or>
					<not>
						<isset property="portlet.framework" />
					</not>
					<equals arg1="${portlet.framework}" arg2="" />
					<equals arg1="${portlet.framework}" arg2="mvc" />
				</or>
			</not>
			<then>
				<if>
					<or>
						<equals arg1="${portlet.framework}" arg2="icefaces" />
						<equals arg1="${portlet.framework}" arg2="liferay_faces_alloy" />
						<equals arg1="${portlet.framework}" arg2="primefaces" />
						<equals arg1="${portlet.framework}" arg2="richfaces" />
					</or>
					<then>
						<copy todir="${portlet.dir}">
							<fileset
								dir="${sdk.dir}/tools/portlet_jsf_tmpl"
							/>
						</copy>
					</then>
				</if>

				<copy overwrite="true" todir="${portlet.dir}">
					<fileset
						dir="${sdk.dir}/tools/portlet_${portlet.framework}_tmpl"
					/>
				</copy>
			</then>
		</if>

		<if>
			<or>
				<equals arg1="${portlet.framework}" arg2="icefaces" />
				<equals arg1="${portlet.framework}" arg2="jsf" />
				<equals arg1="${portlet.framework}" arg2="liferay_faces_alloy" />
				<equals arg1="${portlet.framework}" arg2="primefaces" />
				<equals arg1="${portlet.framework}" arg2="richfaces" />
			</or>
			<then>
				<if>
					<or>
						<equals arg1="${portlet.framework}" arg2="jsf" />
						<equals arg1="${portlet.framework}" arg2="liferay_faces_alloy" />
						<equals arg1="${portlet.framework}" arg2="primefaces" />
						<equals arg1="${portlet.framework}" arg2="richfaces" />
					</or>
					<then>
						<echo file="${portlet.dir}/docroot/WEB-INF/liferay-plugin-package.properties" append="true">

portal-dependency-jars=commons-beanutils.jar,commons-collections.jar,commons-digester.jar,commons-fileupload.jar,commons-io.jar,commons-lang.jar

speed-filters-enabled=false
						</echo>
					</then>
					<else>
						<echo file="${portlet.dir}/docroot/WEB-INF/liferay-plugin-package.properties" append="true">

portal-dependency-jars=commons-beanutils.jar,commons-collections.jar,commons-digester.jar,commons-lang.jar

speed-filters-enabled=false
						</echo>
					</else>
				</if>

				<replace file="${portlet.dir}/docroot/WEB-INF/liferay-portlet.xml">
					<replacetoken><![CDATA[</icon>]]></replacetoken>
					<replacevalue><![CDATA[</icon>
		<requires-namespaced-parameters>false</requires-namespaced-parameters>
		<ajaxable>false</ajaxable>]]></replacevalue>
				</replace>

				<replaceregexp match="&lt;/header-portlet-css&gt;(.*)&lt;/footer-portlet-javascript&gt;" replace="&lt;/header-portlet-css&gt;" flags="s">
					<fileset
						dir="${portlet.dir}/docroot/WEB-INF"
						includes="liferay-portlet.xml"
					/>
				</replaceregexp>

				<replace file="${portlet.dir}/docroot/WEB-INF/portlet.xml">
					<replacetoken><![CDATA[<portlet-class>com.liferay.util.bridges.mvc.MVCPortlet</portlet-class>]]></replacetoken>
					<replacevalue><![CDATA[<portlet-class>javax.portlet.faces.GenericFacesPortlet</portlet-class>]]></replacevalue>
				</replace>

				<replace file="${portlet.dir}/docroot/WEB-INF/portlet.xml">
					<replacetoken><![CDATA[<name>view-template</name>]]></replacetoken>
					<replacevalue><![CDATA[<name>javax.portlet.faces.defaultViewId.view</name>]]></replacevalue>
				</replace>

				<replace file="${portlet.dir}/docroot/WEB-INF/portlet.xml">
					<replacetoken><![CDATA[<value>/view.jsp</value>]]></replacetoken>
					<replacevalue><![CDATA[<value>/views/view.xhtml</value>]]></replacevalue>
				</replace>

				<delete includeemptydirs="true">
					<fileset
						dir="${portlet.dir}/docroot"
						includes="js/**,view.jsp"
					/>
				</delete>
			</then>
		</if>

		<if>
			<equals arg1="${portlet.framework}" arg2="scala" />
			<then>
				<move
					file="${portlet.dir}/docroot/WEB-INF/src/ScalaPortlet.scala"
					tofile="${portlet.dir}/docroot/WEB-INF/src/${portlet.java.package.name}/${portlet.java.class.name}ScalaPortlet.scala"
				/>

				<echo file="${portlet.dir}/docroot/WEB-INF/liferay-plugin-package.properties" append="true">

portal-dependency-jars=scala-library.jar</echo>

				<replace file="${portlet.dir}/docroot/WEB-INF/portlet.xml">
					<replacetoken><![CDATA[<portlet-class>com.liferay.util.bridges.mvc.MVCPortlet</portlet-class>]]></replacetoken>
					<replacevalue><![CDATA[<portlet-class>@portlet.java.package.name@.@portlet.java.class.name@Portlet</portlet-class>]]></replacevalue>
				</replace>

				<replaceregexp match="&lt;/icon&gt;(.*)&lt;/footer-portlet-javascript&gt;" replace="&lt;/icon&gt;" flags="s">
					<fileset
						dir="${portlet.dir}/docroot/WEB-INF"
						includes="liferay-portlet.xml"
					/>
				</replaceregexp>

				<replace file="${portlet.dir}/docroot/WEB-INF/liferay-portlet.xml">
					<replacetoken><![CDATA[</icon>]]></replacetoken>
					<replacevalue><![CDATA[</icon>
		<ajaxable>false</ajaxable>]]></replacevalue>
				</replace>
			</then>
		</if>

		<if>
			<equals arg1="${portlet.framework}" arg2="vaadin" />
			<then>
				<move
					file="${portlet.dir}/docroot/WEB-INF/src/Application.java"
					tofile="${portlet.dir}/docroot/WEB-INF/src/${portlet.java.package.name}/${portlet.java.class.name}Application.java"
				/>

				<echo file="${portlet.dir}/docroot/WEB-INF/liferay-plugin-package.properties" append="true">

portal-dependency-jars=vaadin.jar</echo>

				<replace file="${portlet.dir}/docroot/WEB-INF/portlet.xml">
					<replacetoken><![CDATA[<portlet-class>com.liferay.util.bridges.mvc.MVCPortlet</portlet-class>]]></replacetoken>
					<replacevalue><![CDATA[<portlet-class>com.vaadin.terminal.gwt.server.ApplicationPortlet2</portlet-class>]]></replacevalue>
				</replace>

				<replace file="${portlet.dir}/docroot/WEB-INF/portlet.xml">
					<replacetoken><![CDATA[<name>view-template</name>]]></replacetoken>
					<replacevalue><![CDATA[<name>application</name>]]></replacevalue>
				</replace>

				<replace file="${portlet.dir}/docroot/WEB-INF/portlet.xml">
					<replacetoken><![CDATA[<value>/view.jsp</value>]]></replacetoken>
					<replacevalue><![CDATA[<value>@portlet.java.package.name@.@portlet.java.class.name@Application</value>]]></replacevalue>
				</replace>

				<replaceregexp match="&lt;/icon&gt;(.*)&lt;/footer-portlet-javascript&gt;" replace="&lt;/icon&gt;" flags="s">
					<fileset
						dir="${portlet.dir}/docroot/WEB-INF"
						includes="liferay-portlet.xml"
					/>
				</replaceregexp>

				<replace file="${portlet.dir}/docroot/WEB-INF/liferay-portlet.xml">
					<replacetoken><![CDATA[</icon>]]></replacetoken>
					<replacevalue><![CDATA[</icon>
		<requires-namespaced-parameters>false</requires-namespaced-parameters>
		<ajaxable>false</ajaxable>]]></replacevalue>
				</replace>

				<delete includeemptydirs="true">
					<fileset
						dir="${portlet.dir}/docroot"
						includes="css/**,js/**,view.jsp"
					/>
				</delete>
			</then>
		</if>

		<replace dir="${portlet.dir}">
			<replacefilter token="@plugin.type.dir@" value="${plugin.type.dir}" />
			<replacefilter token="@portlet.display.name@" value="${portlet.display.name}" />
			<replacefilter token="@portlet.java.class.name@" value="${portlet.java.class.name}" />
			<replacefilter token="@portlet.java.package.name@" value="${portlet.java.package.name}" />
			<replacefilter token="@portlet.name@" value="${portlet.name}" />
		</replace>

		<mkdir dir="${portlet.dir}/docroot/WEB-INF/tld" />

		<copy todir="${portlet.dir}/docroot/WEB-INF/tld">
			<fileset dir="${app.server.portal.dir}/WEB-INF/tld">
				<include name="aui.tld" />
				<include name="liferay-portlet.tld" />
				<include name="liferay-portlet-ext.tld" />
				<include name="liferay-security.tld" />
				<include name="liferay-theme.tld" />
				<include name="liferay-ui.tld" />
				<include name="liferay-util.tld" />
			</fileset>
		</copy>
	</target>
</project><?xml version="1.0"?>
<!DOCTYPE project>

<project name="event-listing-portlet" basedir="." default="deploy">
	<import file="../build-common-portlet.xml" />
</project><?xml version="1.0"?>
<!DOCTYPE project>

<project name="shared" basedir="." default="deploy">
	<import file="../build-common-plugins.xml" />
</project><?xml version="1.0"?>
<!DOCTYPE project>

<project name="cdi-portlet-bridge-shared" basedir="." default="deploy">
	<property name="ivy.pom.description" value="The Liferay CDI Portlet Bridge provides the ability for portlet developers to use CDI." />
	<property name="ivy.pom.developer.name" value="Neil Griffin" />
	<property name="ivy.pom.name" value="Liferay CDI Portlet Bridge" />

	<property name="plugin.version" value="2" />

	<import file="../build-common-shared.xml" />
</project><?xml version="1.0"?>
<!DOCTYPE project>

<project name="deploy-listener-shared" basedir="." default="deploy">
	<property name="plugin.version" value="1" />

	<import file="../build-common-shared.xml" />
</project><?xml version="1.0"?>

<project name="gogo-commands-shared" basedir="." default="compile">
	<property name="plugin.version" value="1" />

	<import file="../../build-common-osgi-plugin.xml" />
</project><?xml version="1.0"?>

<project name="http-service-shared" basedir="." default="compile">
	<property name="plugin.version" value="1" />

	<import file="../../build-common-osgi-plugin.xml" />

	<property name="osgi.plugin.portal.lib.jars" value="axis.jar" />
</project><?xml version="1.0"?>
<!DOCTYPE project>

<project name="ip-geocoder-shared" basedir="." default="deploy">
	<property name="plugin.version" value="1" />

	<import file="../build-common-shared.xml" />
</project><?xml version="1.0"?>
<!DOCTYPE project>

<project name="knowledge-base-shared" basedir="." default="deploy">
	<property name="plugin.version" value="1" />

	<import file="../build-common-shared.xml" />
</project><?xml version="1.0"?>
<!DOCTYPE project>

<project name="localization-shared" basedir="." default="deploy">
	<property name="plugin.version" value="1" />

	<import file="../build-common-shared.xml" />
</project><?xml version="1.0"?>

<project name="log-bridge-shared" basedir="." default="compile">
	<property name="plugin.version" value="1" />

	<import file="../../build-common-osgi-plugin.xml" />
</project><?xml version="1.0"?>
<!DOCTYPE project>

<project name="portal-compat-shared" basedir="." default="deploy">
	<property name="plugin.version" value="1" />

	<import file="../build-common-shared.xml" />
</project><?xml version="1.0"?>
<!DOCTYPE project>

<project name="private-messaging-shared" basedir="." default="deploy">
	<property name="plugin.version" value="1" />

	<import file="../build-common-shared.xml" />
</project><?xml version="1.0"?>

<project name="servlet-jsp-compiler-shared" basedir="." default="compile">
	<property name="plugin.version" value="1" />

	<import file="../../build-common-osgi-plugin.xml" />

	<property name="original.lib.name" value="org.apache.jasper.glassfish" />
	<property name="original.lib.url" value="http://search.maven.org/remotecontent?filepath=org/eclipse/jetty/orbit" />
	<property name="original.lib.version" value="2.1.0.v201110031002" />

	<property name="osgi.dependencies" value="phidias.jar" />

	<property name="schemas.dir" value="src/javax/servlet/jsp/resources" />
	<property name="schemas.url" value="http://svn.apache.org/repos/asf/tomcat/trunk/java/javax/servlet/jsp/resources" />

	<target name="compile">
		<antcall target="patch">
			<param name="patch.destination" value="org/apache/jasper/EmbeddedServletOptions.java,org/apache/jasper/JspC.java,org/apache/jasper/Options.java,org/apache/jasper/compiler/Compiler.java,org/apache/jasper/compiler/Generator.java,org/apache/jasper/compiler/Jsr199JavaCompiler.java,org/apache/jasper/compiler/JspRuntimeContext.java,org/apache/jasper/compiler/TldLocationsCache.java,org/apache/jasper/runtime/PageContextImpl.java" />
			<param name="patch.original.lib.name" value="${original.lib.name}" />
			<param name="patch.original.lib.version" value="${original.lib.version}" />
			<param name="patch.original.lib.url" value="${original.lib.url}" />
			<param name="patch.source" value="patches/LPS-35513.patch" />
		</antcall>

		<if>
			<not>
				<available file="${schemas.dir}" />
			</not>
			<then>
				<mkdir dir="${schemas.dir}" />

				<get
					dest="${schemas.dir}/jsp_2_0.xsd"
					src="${schemas.url}/jsp_2_0.xsd"
				/>

				<get
					dest="${schemas.dir}/jsp_2_1.xsd"
					src="${schemas.url}/jsp_2_1.xsd"
				/>

				<get
					dest="${schemas.dir}/jsp_2_2.xsd"
					src="${schemas.url}/jsp_2_2.xsd"
				/>

				<get
					dest="${schemas.dir}/jsp_2_3.xsd"
					src="${schemas.url}/jsp_2_3.xsd"
				/>

				<get
					dest="${schemas.dir}/jspxml.dtd"
					src="${schemas.url}/jspxml.dtd"
				/>

				<get
					dest="${schemas.dir}/jspmlx.xsd"
					src="${schemas.url}/jspxml.xsd"
				/>

				<get
					dest="${schemas.dir}/web-jsptaglibrary_1_1.dtd"
					src="${schemas.url}/web-jsptaglibrary_1_1.dtd"
				/>

				<get
					dest="${schemas.dir}/web-jsptaglibrary_1_2.dtd"
					src="${schemas.url}/web-jsptaglibrary_1_2.dtd"
				/>

				<get
					dest="${schemas.dir}/web-jsptaglibrary_2_0.xsd"
					src="${schemas.url}/web-jsptaglibrary_2_0.xsd"
				/>

				<get
					dest="${schemas.dir}/web-jsptaglibrary_2_1.xsd"
					src="${schemas.url}/web-jsptaglibrary_2_1.xsd"
				/>
			</then>
		</if>

		<antcall target="build-common-osgi-plugin.compile" />
	</target>
</project><?xml version="1.0"?>

<project name="servlet-jstl-shared" basedir="." default="compile">
	<property name="plugin.version" value="1" />

	<import file="../../build-common-osgi-plugin.xml" />

	<property name="original.lib.name" value="org.apache.taglibs.standard.glassfish" />
	<property name="original.lib.version" value="1.2.0.v201112081803" />
	<property name="original.lib.url" value="http://search.maven.org/remotecontent?filepath=org/eclipse/jetty/orbit/" />

	<target name="compile">
		<antcall target="patch">
			<param name="patch.destination" value="org/apache/taglibs/standard/tlv/JstlBaseTLV.java" />
			<param name="patch.original.lib.name" value="${original.lib.name}" />
			<param name="patch.original.lib.version" value="${original.lib.version}" />
			<param name="patch.original.lib.url" value="${original.lib.url}" />
			<param name="patch.source" value="patches/LPS-35466.patch" />
		</antcall>

		<antcall target="build-common-osgi-plugin.compile" />
	</target>
</project><?xml version="1.0"?>
<!DOCTYPE project>

<project name="so-activities-shared" basedir="." default="deploy">
	<property name="plugin.version" value="1" />

	<import file="../build-common-shared.xml" />
</project><?xml version="1.0"?>
<!DOCTYPE project>

<project name="test-module-framework-shared" basedir="." default="deploy">
	<property name="plugin.version" value="1" />

	<import file="../../build-common-osgi-plugin.xml" />
</project><?xml version="1.0"?>
<!DOCTYPE project>

<project name="themes" basedir="." default="deploy">
	<import file="../build-common-plugins.xml" />

	<target name="create">
		<if>
			<or>
				<not>
					<isset property="theme.display.name" />
				</not>
				<not>
					<isset property="theme.name" />
				</not>
			</or>
			<then>
				<fail>This task must be called by the create script.</fail>
			</then>
		</if>

		<property name="theme.parent.dir" value="${user.dir}" />
		<property name="theme.dir" value="${theme.parent.dir}/${theme.name}-theme" />

		<if>
			<available file="${theme.dir}" />
			<then>
				<fail>${theme.name}-theme already exists.</fail>
			</then>
		</if>

		<copy todir="${theme.dir}">
			<fileset
				dir="${sdk.dir}/tools/theme_tmpl"
			/>
		</copy>

		<mkdir dir="${theme.dir}/docroot/_diffs" />
		<mkdir dir="${theme.dir}/docroot/WEB-INF/src/resources-importer/document_library/documents" />
		<mkdir dir="${theme.dir}/docroot/WEB-INF/src/resources-importer/journal/articles" />
		<mkdir dir="${theme.dir}/docroot/WEB-INF/src/resources-importer/journal/structures" />
		<mkdir dir="${theme.dir}/docroot/WEB-INF/src/resources-importer/journal/templates" />

		<replace dir="${theme.dir}">
			<replacefilter token="@plugin.type.dir@" value="${plugin.type.dir}" />
			<replacefilter token="@theme.display.name@" value="${theme.display.name}" />
			<replacefilter token="@theme.name@" value="${theme.name}" />
		</replace>
	</target>

	<target name="merge">
		<echo message="${theme.name}-theme" />
	</target>
</project><?xml version="1.0"?>
<!DOCTYPE project>

<project name="test-resources-importer-theme" basedir="." default="deploy">
	<import file="../build-common-theme.xml" />

	<property name="theme.parent" value="_styled" />
</project><?xml version="1.0"?>
<!DOCTYPE project>

<project name="@ext.name@-ext" basedir="." default="deploy">
	<import file="@plugin.type.dir@/build-common-ext.xml" />
</project><?xml version="1.0"?>
<!DOCTYPE project>

<project name="@hook.name@-hook" basedir="." default="deploy">
	<import file="@plugin.type.dir@/build-common-hook.xml" />
</project><?xml version="1.0"?>
<!DOCTYPE project>

<project name="@layouttpl.name@-layouttpl" basedir="." default="deploy">
	<property name="plugin.version" value="1" />

	<import file="@plugin.type.dir@/build-common-layouttpl.xml" />
</project><?xml version="1.0"?>
<!DOCTYPE project>

<project name="@portlet.name@-portlet" basedir="." default="deploy">
	<import file="@plugin.type.dir@/build-common-portlet.xml" />

	<target name="compile">
		<antcall target="build-common-plugin.compile" />

		<antcall target="scalac" />
	</target>

	<target name="fsc" depends="init-scala">
		<mkdir dir="docroot/WEB-INF/classes" />

		<fsc
			classpathref="scala.classpath"
			deprecation="true"
			destdir="docroot/WEB-INF/classes"
			srcdir="docroot/WEB-INF/src"
		>
			<include name="**/*.java" />
			<include name="**/*.scala" />
		</fsc>
	</target>

	<target name="fsc-reset" depends="init-scala">
		<mkdir dir="docroot/WEB-INF/classes" />

		<fsc
			classpathref="scala.classpath"
			deprecation="true"
			destdir="docroot/WEB-INF/classes"
			reset="true"
			srcdir="docroot/WEB-INF/src"
		>
			<include name="**/*.java" />
			<include name="**/*.scala" />
		</fsc>
	</target>

	<target name="fsc-shutdown" depends="init-scala">
		<mkdir dir="docroot/WEB-INF/classes" />

		<fsc
			classpathref="scala.classpath"
			deprecation="true"
			destdir="docroot/WEB-INF/classes"
			shutdown="true"
			srcdir="docroot/WEB-INF/src"
		>
			<include name="**/*.java" />
			<include name="**/*.scala" />
		</fsc>
	</target>

	<target name="init-scala">
		<taskdef classpathref="lib.classpath" resource="scala/tools/ant/antlib.xml">
			<classpath>
				<pathelement location="docroot/WEB-INF/lib/scala-library.jar" />
			</classpath>
		</taskdef>
	</target>

	<target name="scalac" depends="init-scala">
		<mkdir dir="docroot/WEB-INF/classes" />

		<path id="plugin-lib.classpath">
			<fileset dir="docroot/WEB-INF/lib" includes="*.jar" />
			<pathelement location="docroot/WEB-INF/classes" />
		</path>

		<path id="scala.classpath">
			<path refid="plugin.classpath" />
		</path>

		<scalac
			classpathref="scala.classpath"
			deprecation="true"
			destdir="docroot/WEB-INF/classes"
			srcdir="docroot/WEB-INF/src"
		>
			<include name="**/*.java" />
			<include name="**/*.scala" />
		</scalac>
	</target>
</project><?xml version="1.0"?>
<!DOCTYPE project>

<project name="@portlet.name@-portlet" basedir="." default="deploy">
	<import file="@plugin.type.dir@/build-common-portlet.xml" />
</project><?xml version="1.0"?>
<!DOCTYPE project>

<project name="@theme.name@-theme" basedir="." default="deploy">
	<import file="@plugin.type.dir@/build-common-theme.xml" />

	<property name="theme.parent" value="_styled" />
</project><?xml version="1.0"?>
<!DOCTYPE project>

<project name="webs" basedir="." default="deploy">
	<import file="../build-common-plugins.xml" />
</project><?xml version="1.0"?>
<!DOCTYPE project>

<project name="resources-importer-web" basedir="." default="deploy">
	<import file="../build-common-web.xml" />
</project><?xml version="1.0"?>

<project name="soffice Conversion" default="echo-props" basedir=".">

	<import file="../build-common.xml" />

	<property name="doc.dir" value="soffice"/>

</project>
<?xml version="1.0"?>

<project name="Liferay User Guide" default="echo-props" basedir=".">

	<import file="../build-common.xml" />

	<property name="doc.dir" value="userGuide"/>
	
	<!-- If converting a single chapter, specify the chapter filename (excluding the extension) as an argument. For example, to convert chapter one to odt, enter the command "ant build chapter-to-odt -Dchapter=01-introduction-to-liferay-ui". -->

</project>
