<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2011 Michael R. Lange <michael.r.lange@langmi.de>.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
 -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <groupId>de.langmi.spring.batch.tutorials</groupId>
    <artifactId>hello-world-groovy</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>hello-world-groovy</name>
    <url>https://github.com/langmi/spring-batch-tutorials</url>

    <description>
        Spring Batch Hello World! with groovy Tutorial
        This projects needs:
        
        * Java 1.6+
        * Maven 3+
        
        see maven-enforcer-plugin configuration.
    </description>

    <licenses>
        <license>
            <name>Apache 2</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
            <distribution>manual</distribution>
            <comments>
                Declared 'manual' distribution, because there are no plans 
                to upload the project to a maven repository.
            </comments>
        </license>
    </licenses>

    <developers>
        <developer>
            <id>michael</id>
            <name>Michael Lange</name>
            <email>michael.r.lange@langmi.de</email>
            <url>http://www.langmi.de</url>
            <roles>
                <role>architect</role>
                <role>developer</role>
            </roles>
            <timezone>+1</timezone>
        </developer>
    </developers>

    <properties>
        <!-- general project settings -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.java.version>1.6</project.java.version>
        <groovy.version>2.0.0-beta-2</groovy.version>        
        <!-- re-used dependency version data -->
        <spring.batch.version>2.1.8.RELEASE</spring.batch.version>
        <spring.framework.version>3.1.0.RELEASE</spring.framework.version>
    </properties>

    <build>
        <plugins>
        <!-- alternative to gmaven, needs the maven-resources-plugin configuration
             too -->
<!--
        <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.3.2</version>
                <configuration>
                    <compilerId>groovy-eclipse-compiler</compilerId>
                    <verbose>true</verbose>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.codehaus.groovy</groupId>
                        <artifactId>groovy-eclipse-compiler</artifactId>
                        <version>2.5.2-01</version>
                    </dependency>
                </dependencies>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>1.7</version>
                <executions>
                    <execution>
                        <id>add-source</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>src/main/groovy</source>
                            </sources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>add-test-source</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>add-test-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>src/test/groovy</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>-->
            <plugin>
                <groupId>org.codehaus.gmaven</groupId>
                <artifactId>gmaven-plugin</artifactId>
                <version>1.3</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>generateStubs</goal>
                            <goal>compile</goal>
                            <goal>generateTestStubs</goal>
                            <goal>testCompile</goal>
                        </goals>
                        <configuration>
                            <providerSelection>1.7</providerSelection>
                        </configuration>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>org.codehaus.gmaven.runtime</groupId>
                        <artifactId>gmaven-runtime-1.7</artifactId>
                        <version>1.2</version>
                        <exclusions>
                            <exclusion>
                                <groupId>org.codehaus.groovy</groupId>
                                <artifactId>groovy-all</artifactId>
                            </exclusion>
                        </exclusions>
                    </dependency>
                    <dependency>
                        <groupId>org.codehaus.groovy</groupId>
                        <artifactId>groovy-all</artifactId>
                        <version>${groovy.version}</version>
                    </dependency>
                </dependencies>
            </plugin>
            <plugin>
                <!-- To ensure all project resources will be used
                     with UTF-8, we use the maven-resources-plugin.
                     
                     Additionally i want to get all .groovy files un-compiled
                     for the target/classes directory, because i use the
                     groovy files in both compiled and un-compiled state.
                -->
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.5</version>
                <configuration>
                    <encoding>${project.build.sourceEncoding}</encoding>
                </configuration>
                <executions>
                    <execution>
                        <!-- copy the .groovy files to the target/classes 
                             directory to get them for test-classpath and
                             inside the compiled .jar -->
                        <id>copy-resources</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/target/classes</outputDirectory>
                            <resources>          
                                <resource>
                                    <directory>src/main/groovy</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>              
                        </configuration>            
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!-- create an all-in-one executable jar with maven-shade-plugin
                     bound to phase:package 

                     special handling for spring.handlers/spring.schemas files
                     to prevent overwriting (maven-shade-plugin joins them to
                     one file) 

                     usage:
                     java -jav hello-world-groovy-1.0-SNAPSHOT-executable.jar spring\batch\job\hello-word-job.xml helloWorldJob -->
                <artifactId>maven-shade-plugin</artifactId>
                <version>1.5</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <transformers>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>org.springframework.batch.core.launch.support.CommandLineJobRunner</mainClass>
                                </transformer>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>META-INF/spring.handlers</resource>
                                </transformer>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>META-INF/spring.schemas</resource>
                                </transformer>
                            </transformers>
                            <shadedArtifactAttached>true</shadedArtifactAttached>
                            <!-- optional -->
                            <shadedClassifierName>executable</shadedClassifierName>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!-- 
                    With the maven-enforcer-plugin i want to make sure
                    the project is built with maven 3+ and Java 1.6+.
                -->
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>1.0.1</version>
                <executions>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireJavaVersion>
                                    <version>${project.java.version}</version>
                                </requireJavaVersion>
                                <requireMavenVersion>
                                    <!-- right now the plugin reads the version
                                         as lowest allowed, so there is no need 
                                         to use fancy formats like: [3.0,)
                                         see http://maven.apache.org/plugins/maven-enforcer-plugin/rules/versionRanges.html
                                         -->
                                    <version>3.0.0</version>
                                </requireMavenVersion>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <dependencies>        
        <dependency>
            <groupId>org.codehaus.groovy</groupId>
            <artifactId>groovy-all</artifactId>
            <version>${groovy.version}</version>
        </dependency>
        <!-- Spring (core) Framework dependencies -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId>
            <version>${spring.framework.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${spring.framework.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>${spring.framework.version}</version>
        </dependency>
        <!-- Spring Batch dependencies -->
        <dependency>
            <groupId>org.springframework.batch</groupId>
            <artifactId>spring-batch-core</artifactId>
            <version>${spring.batch.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.batch</groupId>
            <artifactId>spring-batch-infrastructure</artifactId>
            <version>${spring.batch.version}</version>
        </dependency>
        <!-- test scoped dependencies -->
        <dependency>
            <groupId>org.springframework.batch</groupId>
            <artifactId>spring-batch-test</artifactId>
            <version>${spring.batch.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${spring.framework.version}</version>
            <scope>test</scope>            
        </dependency>
    </dependencies>
</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2011 Michael R. Lange <michael.r.lange@langmi.de>.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
 -->
<project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
      
    <modelVersion>4.0.0</modelVersion>

    <groupId>de.langmi.spring.batch.tutorials</groupId>
    <artifactId>hello-world-java</artifactId>
    <version>1.0</version>
    <packaging>jar</packaging>

    <name>hello-world-java</name>
    <url>https://github.com/langmi/spring-batch-tutorials</url>

    <description>
        A simple Spring Batch "Hello World!" tutorial.
        This projects needs:
        
        * Java 1.6+
        * Maven 3+
        
        see maven-enforcer-plugin configuration.
    </description>

    <licenses>
        <license>
            <name>Apache 2</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
            <distribution>manual</distribution>
            <comments>
                Declared 'manual' distribution, because there are no plans 
                to upload the project to a maven repository.
            </comments>
        </license>
    </licenses>

    <developers>
        <developer>
            <id>michael</id>
            <name>Michael Lange</name>
            <email>michael.r.lange@langmi.de</email>
            <url>http://www.langmi.de</url>
            <roles>
                <role>architect</role>
                <role>developer</role>
            </roles>
            <timezone>+1</timezone>
        </developer>
    </developers>

    <properties>
        <!-- general project settings -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.java.version>1.6</project.java.version>
        <!-- maven-compiler-plugin settings -->
        <maven.compiler.debug>true</maven.compiler.debug>
        <maven.compiler.optimize>false</maven.compiler.optimize>
        <!-- re-used dependency version data -->
        <spring.batch.version>2.1.8.RELEASE</spring.batch.version>
        <spring.framework.version>3.1.0.RELEASE</spring.framework.version>
    </properties>

    <build>
        <plugins>
            <plugin>
                <!-- maven-compiler-plugin configured to:
                        * use specific Java Version
                        * use specific target Java Version
                        * use UTF-8 for java sources
                        * use debug compiler settings
                        * do not use optimize compiler settings
                        * show deprecated informations (will build anyhow)
                -->
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.3.2</version>
                <configuration>
                    <source>${project.java.version}</source>
                    <target>${project.java.version}</target>
                    <encoding>${project.build.sourceEncoding}</encoding>
                    <debug>${maven.compiler.debug}</debug>
                    <optimize>${maven.compiler.optimize}</optimize>
                    <showDeprecation>true</showDeprecation>
                </configuration>
            </plugin>    
            <plugin>
                <!-- To ensure all project resources will be used
                     with UTF-8, we use the maven-resources-plugin.
                -->
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.5</version>
                <configuration>
                    <encoding>${project.build.sourceEncoding}</encoding>
                </configuration>
            </plugin>
            <plugin>
                <!-- maven-surefire-plugin configured to set
                        * forkMode for clean context per test
                        
                     in other projects i set the log4j file place and
                     java arguments for memory configuration too, but this
                     is not needed for this simple hello-world project
                -->
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.9</version>
                <configuration>
                    <forkMode>${maven.surefire.forkmode}</forkMode>
                </configuration>
            </plugin>
            <plugin>
                <!-- create an all-in-one executable jar with maven-shade-plugin
                     bound to phase:package 
                     special handling for spring.handlers/spring.schemas files
                     to prevent overwriting (maven-shade-plugin joins them to
                     one file) 
                     
                     usage:
                     cd to <project>/target
                     java -jar hello-world-java-1.0-executable.jar spring/batch/job/hello-world-job.xml helloWorldJob
                     -->                     
                <artifactId>maven-shade-plugin</artifactId>
                <version>1.5</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <transformers>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>org.springframework.batch.core.launch.support.CommandLineJobRunner</mainClass>
                                </transformer>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>META-INF/spring.handlers</resource>
                                </transformer>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>META-INF/spring.schemas</resource>
                                </transformer>
                            </transformers>
                            <shadedArtifactAttached>true</shadedArtifactAttached>
                            <!-- configures the suffix name for the executable jar
                                 here it will be '<project.artifact>-<project.version>-executable.jar'-->
                            <shadedClassifierName>executable</shadedClassifierName>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!-- 
                    With the maven-enforcer-plugin i want to make sure
                    the project is built with maven 3+ and Java 1.6+.
                -->
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>1.0.1</version>
                <executions>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireJavaVersion>
                                    <version>${project.java.version}</version>
                                </requireJavaVersion>
                                <requireMavenVersion>
                                    <!-- right now the plugin reads the version
                                         as lowest allowed, so there is no need 
                                         to use fancy formats like: [3.0,)
                                         see http://maven.apache.org/plugins/maven-enforcer-plugin/rules/versionRanges.html
                                         -->
                                    <version>3.0.0</version>
                                </requireMavenVersion>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>            
        </plugins>        
    </build>
    <dependencies>
        <!-- Spring (core) Framework dependencies -->
        <!-- references version property 
             <spring.framework.version>3.0.6.RELEASE</spring.framework.version> 
             just replace ${spring.framework.version} with 3.1.0.RELEASE 
             if you don't want to use properties -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId>
            <version>${spring.framework.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${spring.framework.version}</version>
        </dependency>
        <dependency>
            <!-- spring-jdbc specified, because spring-batch has
             older 2.5.6 version configured, but we want the newer 3.1.0 here -->
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>${spring.framework.version}</version>
        </dependency>
        <!-- Spring Batch dependencies -->
        <!-- references version property 
             <spring.batch.version>2.1.8.RELEASE</spring.batch.version> 
             just replace ${spring.framework.version} with 2.1.8.RELEASE 
             if you don't want to use properties -->
        <dependency>
            <groupId>org.springframework.batch</groupId>
            <artifactId>spring-batch-core</artifactId>
            <version>${spring.batch.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.batch</groupId>
            <artifactId>spring-batch-infrastructure</artifactId>
            <version>${spring.batch.version}</version>
        </dependency>
        <!-- test scoped dependencies -->
        <dependency>
            <groupId>org.springframework.batch</groupId>
            <artifactId>spring-batch-test</artifactId>
            <version>${spring.batch.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${spring.framework.version}</version>
            <scope>test</scope>            
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.10</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project><?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2011 Michael R. Lange <michael.r.lange@langmi.de>.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<project 
    xmlns="http://maven.apache.org/POM/4.0.0" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <groupId>de.langmi.spring.batch.tutorials</groupId>
    <artifactId>parent</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <name>spring batch tutorials parent</name>
    <url>https://github.com/langmi/spring-batch-tutorials</url>

    <description>Spring Batch Tutorials parent project for convenient build all feature</description>

    <modules>
        <module>hello-world-java</module>
        <module>hello-world-groovy</module>
    </modules>

    <licenses>
        <license>
            <name>Apache 2</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
            <distribution>manual</distribution>
            <comments>
                Declared 'manual' distribution, because there are no plans 
                to upload the project to a maven repository.
            </comments>
        </license>
    </licenses>

    <developers>
        <developer>
            <id>michael</id>
            <name>Michael R. Pralow</name>
            <email>me@michael-pralow.de</email>
            <roles>
                <role>architect</role>
                <role>developer</role>
            </roles>
            <timezone>+1</timezone>
        </developer>
    </developers>

</project>