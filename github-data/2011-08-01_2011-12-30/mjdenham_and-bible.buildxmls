<?xml version="1.0" encoding="UTF-8"?>
<project name="StartupActivity">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked in in Version
         Control Systems. -->
    <property file="local.properties" />

    <!-- The build.properties file can be created by you and is never touched
         by the 'android' tool. This is the place to change some of the default property values
         used by the Ant rules.
         Here are some properties you may want to change/update:

         application.package
             the name of your application package as defined in the manifest. Used by the
             'uninstall' rule.
         source.dir
             the name of the source directory. Default is 'src'.
         out.dir
             the name of the output directory. Default is 'bin'.

         Properties related to the SDK location or the project target should be updated
          using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your application and
         should be checked in in Version Control Systems.

         -->
    <property file="build.properties" />

    <!-- The default.properties file is created and updated by the 'android' tool, as well
         as ADT.
         This file is an integral part of the build system for your application and
         should be checked in in Version Control Systems. -->
    <property file="default.properties" />

    <!-- Custom Android task to deal with the project target, and import the proper rules.
         This requires ant 1.6.0 or above. -->
    <path id="android.antlibs">
        <pathelement path="${sdk.dir}/tools/lib/anttasks.jar" />
        <pathelement path="${sdk.dir}/tools/lib/sdklib.jar" />
        <pathelement path="${sdk.dir}/tools/lib/androidprefs.jar" />
        <pathelement path="${sdk.dir}/tools/lib/apkbuilder.jar" />
        <pathelement path="${sdk.dir}/tools/lib/jarutils.jar" />
    </path>

    <taskdef name="setup"
        classname="com.android.ant.SetupTask"
        classpathref="android.antlibs" />

    <!-- Execute the Android Setup task that will setup some properties specific to the target,
         and import the build rules files.

         The rules file is imported from
            <SDK>/platforms/<target_platform>/templates/android_rules.xml

         To customize some build steps for your project:
         - copy the content of the main node <project> from android_rules.xml
         - paste it in this build.xml below the <setup /> task.
         - disable the import by changing the setup task below to <setup import="false" />

         This will ensure that the properties are setup correctly but that your customized
         build steps are used.
    -->
    <setup />

</project>
<project name="buildJswordTweakedJar" default="copyJarsToAndBible" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
	
	<property name="jsword.project" location="../../jsword-git/jsword"/>
	<property name="jsword.src" location="${jsword.project}/src/main/java"/>
	<property name="jsword.resources" location="${jsword.project}/src/main/resources"/>
	<property name="tweaks.jsword.src" location="src/main/java/jsword"/>
	<property name="tweaks.jsword.resources" location="src/main/resources"/>
	<property name="tweaks.util.src" location="src/util/java"/>
	<property name="build.src" location="build/src" />
	<property name="build.class" location="build/class" />
	<property name="distribution" location="distribution" />
	<property name="andbible" location="../AndBible" />
	
	<dirname property="core.basedir"		file="${ant.file.core}" />
	<property name="jsword-tweaks.home"			location="${core.basedir}" />
	
	<path id="classpath">
		<fileset dir="${jsword-tweaks.home}/lib/jars" includes="*.jar"/>
		<fileset dir="./libs" includes="*.jar"/>
	</path>
	
	<target name="clean">
		<delete dir="${build.src}"/>
		<delete dir="${build.class}"/>
		<delete dir="${distribution}"/>
	</target>
	
	<target name="init" depends="clean">
		<tstamp/>
		<mkdir dir="${build.src}"/>
		<mkdir dir="${build.class}"/>
		<mkdir dir="${distribution}"/>
	</target>
			
	<target name="mergeCode" depends="init">
		<copy todir="${build.src}">
			<fileset dir="${jsword.src}"/>
			<fileset dir="${jsword.resources}">
				<exclude name="org/crosswire/jsword/versification/**" />
			</fileset>
		</copy>
		<copy todir="${build.src}" filtering="yes">
			<fileset dir="${jsword.resources}">
				<include name="org/crosswire/jsword/versification/**" />
			</fileset>
			<!-- zerosUnmapped causes exceptions and does not map verse 0 so comment it out -->
		    <filterchain>
		        <tokenfilter>
		            <replaceregex pattern="!zerosUnmapped" replace="#!zerosUnmapped // commented out"/>
		        </tokenfilter>
		    </filterchain>
		</copy>

		<!-- switch the Chinese localisation defaults around so default CN is simplified and TW is Traditional-->
		<copy file="${jsword.resources}/BibleNames_zh.properties" tofile="${build.src}/BibleNames_zh_TW.properties" />
		<copy file="${jsword.resources}/BibleNames_zh_CN.properties" tofile="${build.src}/BibleNames_zh.properties" overwrite="true"/>

		<copy todir="${build.src}" overwrite="true">
			<fileset dir="${tweaks.jsword.src}"/>
			<fileset dir="${tweaks.jsword.resources}"/>
		</copy>

	</target>

	<target name="compile" depends="mergeCode">
		<javac srcdir="${build.src}" destdir="${build.class}" classpathref="classpath" debug="true" source="1.6" target="1.6"/>
	</target>

	<target name="jar" depends="compile">
		<jar jarfile="${distribution}/jsword.jar">
			<fileset dir="${build.class}"/>
			<!-- need to include the .properties and .plugin files -->
			<fileset dir="${build.src}">
				<exclude name="**/*.java"/>
				<exclude name="**/*.html"/>
			</fileset>
		</jar>	
		<jar jarfile="${distribution}/jsword-src.jar" basedir="${build.src}"/>
	</target>

	<target name="copyJarsToAndBible" depends="jar" description="Copy generated jars to And Bible for use">
		<copy todir="${andbible}/libs">
			<fileset dir="${distribution}" includes="*.jar" excludes="*-src.jar"/>
		</copy>
		<copy todir="${andbible}/libs-src">
			<fileset dir="${distribution}" includes="*-src.jar"/>
		</copy>
	</target>

	<!--=======================================================================
	== Use ivy to manage external jars.
	== These are properties related to ivy.
	=========================================================================-->
	<property name="ivy.version"			value="2.3.0" />
	<property name="tools.home"				location="${jsword-tweaks.home}/tools" />
	<property name="ivy.home"				location="${tools.home}/ivy" />
	<property name="ivy.url"				value="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.version}/ivy-${ivy.version}.jar" />
	<property name="ivy.jar.file"			location="${ivy.home}/ivy-${ivy.version}.jar" />
	<property name="ivy.quiet"				value="default" /> <!-- default or quiet -->
	<property name="ivy.sync"				value="false" /> <!-- true or false -->
	<property name="ivy.project.dir"		location="${jsword-tweaks.home}"/>
	<property name="ivy.lib.dir"			location="${ivy.project.dir}/lib"/>
	<property name="ivy.dep.file"			location="${ivy.project.dir}/ivy.xml" />
	<property name="ivy.default.ivy.user.dir"	location="${ivy.project.dir}/ivy" />

	<!-- Ivy.sync controls whether only the current version of jar is allowed.
	  == This is good when updating the project, but not from day-to-day
	  == since we build extra stuff into the same location. Having sync="true"
	  == causes that to be deleted and need to be restored.
	-->
	<target	name="ivy"
			description="Retrieve dependencies with ivy"
			depends="ivy.task">
		<ivy:retrieve sync="${ivy.sync}" pattern="${ivy.lib.dir}/[type]s/[artifact]-[revision].[ext]" log="${ivy.quiet}" />
		<ivy:cachepath pathid="default.path" />
	</target>

	<target	name="ivy.clean"
			description="Remove the ivy installation">
		<delete dir="${ivy.home}" />
	</target>

	<target	name="ivy.clean-cache"
			description="Remove dependent jars that ivy manages"
			depends="ivy.task">
		<ivy:cleancache />
	</target>

	<!-- Make ivy visible to Ant -->
	<target	name="ivy.task"
			depends="ivy.download">
		<path id="ivy.lib.path">
			<fileset dir="${ivy.home}" includes="*.jar" />
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
	</target>

	<!-- Download ivy -->
	<target	name="ivy.download"
			depends="ivy.check"
			unless="ivy.present">
		<mkdir dir="${ivy.home}" />
		<!-- download Ivy from web site so that it can be used even without any special installation -->
		<get src="${ivy.url}" dest="${ivy.jar.file}" usetimestamp="true" />
	</target>

	<!-- See if Ivy is installed -->
	<target	name="ivy.check">
		<available file="${ivy.jar.file}"		type="file" property="ivy.present" />
	</target>


<!--
No Tweaks 	
	<target name="copyTweaksToJsword" description="Copy tweaks to JSword project">
		<copy todir="${jsword.src}" overwrite="true">
			<fileset dir="${tweaks.jsword.src}"/>
			<fileset dir="${tweaks.util.src}"/>
		</copy>
		<copy todir="${jsword.resources}" overwrite="true">
			<fileset dir="${tweaks.jsword.resources}"/>
		</copy>
	</target>
 -->
</project>