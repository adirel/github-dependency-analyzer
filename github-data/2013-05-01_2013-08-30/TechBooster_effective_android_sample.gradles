apply plugin: 'android-library'

android {
    compileSdkVersion 18
    buildToolsVersion '18.1.0'

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
        }
    }
}
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.5.+'
    }
}
apply plugin: 'android'

dependencies {
}

android {
    compileSdkVersion 17
    buildToolsVersion "18.1.0"

    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 17
    }
}
// Top-level build file where you can add configuration options common to all sub-projects/modules.
import groovy.xml.MarkupBuilder

buildscript {
	repositories { mavenCentral() }
	dependencies { classpath 'com.android.tools.build:gradle:0.5.+' }
}

apply plugin: 'android'
apply plugin: 'eclipse'

sourceCompatibility = 1.6
targetCompatibility = 1.6

ext {
	generatedSrc = "gen"
	jppVersion = "1.6.2"

	jsonpullparserGenclassPostfix = "Gen"
	jsonpullparserDebug = "true"
}

repositories { mavenCentral() }

configurations { apt }

dependencies {
	compile 'com.google.android:support-v4:r7'
	compile 'net.vvakame:jsonpullparser-core:1.6.2'
	compile 'org.twitter4j:twitter4j-core:3.0.3'

	apt 'net.vvakame:jsonpullparser-apt:1.6.2'
}

android {
	compileSdkVersion 17
	buildToolsVersion "18.1.0"

	sourceSets {
		main {
			manifest.srcFile 'AndroidManifest.xml'
			java.srcDirs = ['src']
			resources.srcDirs = ['src']
			aidl.srcDirs = ['src']
			renderscript.srcDirs = ['src']
			res.srcDirs = ['res']
			assets.srcDirs = ['assets']
		}

		instrumentTest.setRoot('../AndroidProjectTest/src')
		instrumentTest {
			java.srcDirs = ['../AndroidProjectTest/src']
			res.srcDirs = ['../AndroidProjectTest/src']
			assets.srcDirs = ['../AndroidProjectTest/assets']
			resources.srcDirs = ['../AndroidProjectTest/src']
		}
	}

	defaultConfig { testInstrumentationRunner "android.test.InstrumentationTestRunner" }
}

// for eclipse
sourceSets {
	main {
		java { srcDirs 'src', generatedSrc }
		output.classesDir = "bin/classes"
	}
}

// for apt
android.applicationVariants.all { variant ->
	def aptOutput = file(generatedSrc)

	variant.javaCompile.doFirst {
		println "*** compile doFirst ${variant.name}, aptOutput=${aptOutput}"
		aptOutput.mkdirs()
		aptOutput.eachFileRecurse groovy.io.FileType.FILES, {
			if (it.name.equals('R.java')) {
				return
			}
			it.delete()
		}
		variant.javaCompile.options.compilerArgs += [
			'-processorpath',
			configurations.apt.getAsPath(),
			'-AandroidManifestFile=' + variant.processResources.manifestFile,
			'-s',
			aptOutput
		]
	}
}

// for eclipse

task copyDependenciesToAndroidLibs(type: Copy) {
	into "libs"
	from configurations.compile

	eclipseJdt.dependsOn copyDependenciesToAndroidLibs
}

task copyFactoriesToFactoryDir(type: Copy) {
	into "factory"
	from configurations.apt

	eclipseJdt.dependsOn copyFactoriesToFactoryDir
}

task cleanDependenciesToAndroidLibs() {
	delete "libs"
	delete "factory"
	delete ".settings"
	delete ".factorypath"

	cleanEclipseJdt.dependsOn cleanDependenciesToAndroidLibs
}

eclipse {
	project {
		name = 'AndroidProject'
		natures = [
			'com.android.ide.eclipse.adt.AndroidNature',
			'org.eclipse.jdt.core.javanature'
		]
		buildCommands.clear()
		[
			'com.android.ide.eclipse.adt.ResourceManagerBuilder',
			'com.android.ide.eclipse.adt.PreCompilerBuilder',
			'org.eclipse.jdt.core.javabuilder',
			'com.android.ide.eclipse.adt.ApkBuilder'
		].each { buildCommand it }
	}
	classpath {
		containers.clear()
		containers 'com.android.ide.eclipse.adt.ANDROID_FRAMEWORK', 'com.android.ide.eclipse.adt.LIBRARIES', 'com.android.ide.eclipse.adt.DEPENDENCIES'

		downloadSources = true
		downloadJavadoc = true
	}
	jdt {
		file {
			withProperties { properties ->
				properties.setProperty("org.eclipse.jdt.core.compiler.processAnnotations", "enabled")
			}
		}
	}
}

def writeEclipseSettings(File f, String s) {
	f.getParentFile().mkdirs()

	def w = new FileWriter(f)
	w.write(s)
	w.close()
}

eclipseJdt {
	doFirst {
		def f = file(".factorypath")
		def w = new FileWriter(f)

		def xml = new MarkupBuilder(w)
		xml.setDoubleQuotes(true)
		xml."factorypath"() {
			"factorypathentry"(
					kind: "PLUGIN", id: "org.eclipse.jst.ws.annotations.core", enabled: true, runInBatchMode: false
					)
			"factorypathentry"(
					kind: "WKSPJAR", id: "/${project.name}/factory/jsonpullparser-apt-${jppVersion}.jar", enabled: true, runInBatchMode: false
					)
		}
		w.close()

		writeEclipseSettings file(".settings/org.eclipse.jdt.apt.core.prefs"), """
			|eclipse.preferences.version=1
			|org.eclipse.jdt.apt.aptEnabled=true
			|org.eclipse.jdt.apt.genSrcDir=${generatedSrc}
			|org.eclipse.jdt.apt.processorOptions/JsonPullParserClassPostfix=${jsonpullparserGenclassPostfix}
			|org.eclipse.jdt.apt.processorOptions/JsonPullParserDebug=${jsonpullparserDebug}
			|org.eclipse.jdt.apt.reconcileEnabled=false
			|""".stripMargin()
	}
}
import java.io.File;

buildscript {
	repositories { mavenCentral() }
	dependencies { classpath 'com.android.tools.build:gradle:0.5.+' }
}

apply plugin: 'java'
apply plugin: 'eclipse'

dependencies {
}

sourceCompatibility = 1.6
targetCompatibility = 1.6

ext { generatedSrc = "gen" }

repositories { mavenCentral() }


// for eclipse
sourceSets {
	main {
		java { srcDirs 'src', generatedSrc }
		output.classesDir = "bin/classes"
	}
}

task copyDependenciesToAndroidLibs(type: Copy) {
	into "libs"
	from configurations.compile

	eclipseJdt.dependsOn copyDependenciesToAndroidLibs
}

task cleanDependenciesToAndroidLibs() {
	delete "libs"
	delete ".settings"

	cleanEclipseJdt.dependsOn cleanDependenciesToAndroidLibs
}

eclipse {
	project {
		name = 'AndroidProjectTest'
		natures = [
			'com.android.ide.eclipse.adt.AndroidNature',
			'org.eclipse.jdt.core.javanature'
		]
		buildCommands.clear()
		[
			'com.android.ide.eclipse.adt.ResourceManagerBuilder',
			'com.android.ide.eclipse.adt.PreCompilerBuilder',
			'org.eclipse.jdt.core.javabuilder',
			'com.android.ide.eclipse.adt.ApkBuilder'
		].each { buildCommand it }
	}
	classpath {
		containers.clear()
		containers 'com.android.ide.eclipse.adt.ANDROID_FRAMEWORK', 'com.android.ide.eclipse.adt.LIBRARIES', 'com.android.ide.eclipse.adt.DEPENDENCIES'

		file {
			withXml {
				def node = it.asNode()
				node.appendNode('classpathentry', [kind: 'src', combineaccessrules: 'false', path: '/AndroidProject'])
			}
		}

		downloadSources = true
		downloadJavadoc = true
	}
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.5.+'
    }
}
apply plugin: 'android'

configurations {
    apt
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')

    apt files('compile-libs/androidannotations-2.7.1.jar')
    compile files('libs/androidannotations-api-2.7.1.jar')

    // if you'd like to depend on jars in maven repository, use these.
    //apt "com.googlecode.androidannotations:androidannotations:2.7.1")
    //compile "com.googlecode.androidannotations:androidannotations-api:2.7.1")
}

android {
    compileSdkVersion 18
    buildToolsVersion "18.1.0"

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
}

android.applicationVariants.all { variant ->
    def aptOutput = file("${project.buildDir}/source/r/${variant.dirName}")

    variant.javaCompile.doFirst {
        println "*** compile doFirst ${variant.name}, aptOutput=${aptOutput}"
        aptOutput.mkdirs()
        aptOutput.eachFileRecurse groovy.io.FileType.FILES, {
            if (it.name.equals('R.java')) {
                return
            }
            it.delete()
        }
        variant.javaCompile.options.compilerArgs += [
                '-processorpath', configurations.apt.getAsPath(),
                '-AandroidManifestFile=' + variant.processResources.manifestFile,
                '-s', aptOutput
        ]
    }
}
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.5.+'
    }
}
apply plugin: 'android'

repositories {
    mavenCentral()
}

android {
    compileSdkVersion 18
    buildToolsVersion "18.1.0"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 18
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:18.0.0'
}
// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.5.+'
    }
}
apply plugin: 'android'

repositories {
    mavenCentral()
}

android {
    compileSdkVersion 18
    buildToolsVersion "18.1.0"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 18
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:18.0.0'
}
// Top-level build file where you can add configuration options common to all sub-projects/modules.
