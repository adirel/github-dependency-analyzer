buildscript {
  repositories {
    mavenCentral()
    mavenLocal()
  }

  dependencies {
    classpath 'org.gradle.api.plugins:gradle-nexus-plugin:0.3'
  }
}

apply from:'jdee.gradle'

allprojects {
  group = 'org.oscim'
  version = '0.5.9-SNAPSHOT'

  ext.gdxVersion = "1.0-SNAPSHOT"

  repositories {
    mavenCentral()
    maven { url 'http://repo.opengeo.org' }
    //maven { url 'https://github.com/hjanetzek/maven-repo/raw/master/' }
    mavenLocal()
  }

  // create IntelliJ project settings - untested
  apply plugin: 'idea'
}

subprojects {
  // create eclipse  project settings
  apply plugin: 'eclipse'

  task copySettings(type: Copy) {
    from "$rootDir/eclipse"
    into ".settings"
    include '**/*'
  }

  eclipseProject.dependsOn copySettings

  // create emacs JDEE project settings
  // http://ignatyev-dev.blogspot.de/2013/07/gradle-projects-in-jdee.html
  apply from:'../jdee.gradle'
}

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:0.9.+'
  }
}

apply plugin: 'android'

dependencies {
  compile project(':vtm-android')
  compile project(':vtm-jeo')
  compile project(':vtm-extras')
  compile project(':vtm-themes')
}

android {
  compileSdkVersion 19
  buildToolsVersion '19.0.1'

  sourceSets {
    main {
      manifest.srcFile 'AndroidManifest.xml'
      java.srcDirs = ['src']
      resources.srcDirs = ['src', 'assets']
      res.srcDirs = ['res']
      assets.srcDirs = ['assets']
    }

    debug.setRoot('build-types/debug')
    release.setRoot('build-types/release')
  }
  // remove duplicates
  packagingOptions {
	exclude 'META-INF/services/org.jeo.data.Driver'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/NOTICE'
  }

  // ignore deprecated
  lintOptions.abortOnError false
}

// Including configurations into Eclipse

eclipse.jdt {
  sourceCompatibility = 1.6
  targetCompatibility = 1.6
}

// Configuring Eclipse classpath
eclipse.classpath {
  plusConfigurations += configurations.compile

  defaultOutputDir = file('bin/classes')

  file {
    // Direct manipulation of the generated classpath XML
    withXml {
      def node = it.asNode()
      node.appendNode('classpathentry kind="src" path="src"')
      node.appendNode('classpathentry kind="src" path="gen"')
    }
  }
}

eclipse.project {
  natures = ['com.android.ide.eclipse.adt.AndroidNature',
	     'org.eclipse.jdt.core.javanature']

  buildCommand 'com.android.ide.eclipse.adt.ResourceManagerBuilder'
  buildCommand 'com.android.ide.eclipse.adt.PreCompilerBuilder'
  buildCommand 'com.android.ide.eclipse.adt.ApkBuilder'
}


task run (dependsOn: 'installDebug'){
  doFirst {
    println(">> adb run...")
    String adb = System.getenv()['ANDROID_HOME'] + '/platform-tools/adb'
    String cmd = "${adb} shell am start -n org.oscim.android.test/.Samples"
    def proc = cmd.execute()
    proc.in.eachLine {line -> println line}
    proc.err.eachLine {line -> System.err.println( 'ERROR: ' + line)}
    proc.waitFor()
  }
}buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:0.9.+'
  }
}

repositories {
  maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

apply plugin: 'android'

configurations { providedCompile }

dependencies {
  compile project(':vtm-gdx')
  compile project(':vtm-themes')
  compile 'com.noveogroup.android:android-logger:1.3.1'
  compile "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
  //compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
  //compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
  compile files("${rootDir}/vtm-ext-libs/gdx-native-libs.jar")
  compile files("${rootDir}/vtm-ext-libs/native-libs.jar")
}

//task copyLibs(type: Copy) {
//  from "$rootDir/vtm-ext-libs/vtm-gdx-android"
//  into "libs"
//  include '**/*'
//}

//tasks.withType(JavaCompile) { compileTask ->
//   compileTask.dependsOn copyLibs }

android {
  compileSdkVersion 19
  buildToolsVersion '19.0.1'

  sourceSets {
    main {
      manifest.srcFile 'AndroidManifest.xml'
      java.srcDirs = ['src', 'assets']
      resources.srcDirs = ['src', 'assets']
      aidl.srcDirs = ['src', 'assets']
      renderscript.srcDirs = ['src', 'assets']
      res.srcDirs = ['res']
      assets.srcDirs = ['assets']
    }

    debug.setRoot('build-types/debug')
    release.setRoot('build-types/release')
  }
}

// Including configurations into Eclipse
eclipse {
  jdt {
    sourceCompatibility = 1.6
    targetCompatibility = 1.6
  }

  // Configuring Eclipse classpath
  classpath {
    plusConfigurations += configurations.compile

    defaultOutputDir = file('bin/classes')

    file {
      // only used to explode jni .so into aar
      whenMerged { classpath ->
	classpath.entries.findAll { entry ->
	  entry.path.contains('native-libs') }*.exported = false

	classpath.entries.removeAll { entry ->
       	  entry.path.contains('gdx-1.0-SNAPSHOT') }
      }


      // Direct manipulation of the generated classpath XML
      withXml {
	def node = it.asNode()
	node.appendNode('classpathentry kind="src" path="src"')
	node.appendNode('classpathentry kind="src" path="gen"')
      }
    }
  }

  project {
    natures = ['com.android.ide.eclipse.adt.AndroidNature',
	       'org.eclipse.jdt.core.javanature']

    buildCommand 'com.android.ide.eclipse.adt.ResourceManagerBuilder'
    buildCommand 'com.android.ide.eclipse.adt.PreCompilerBuilder'
    buildCommand 'com.android.ide.eclipse.adt.ApkBuilder'
    // use extracted jni .so in eclipse
    linkedResource name: 'libs', type: '2',
	   locationUri: 'PARENT-1-PROJECT_LOC/vtm-ext-libs/vtm-gdx-android'

  }
}

task run (dependsOn: 'installDebug'){
  doFirst {
    println(">> adb run...")
    String adb = System.getenv()['ANDROID_HOME'] + '/platform-tools/adb'
    String cmd = "${adb} shell am start -n org.oscim.gdx/.MainActivity"
    def proc = cmd.execute()
    proc.in.eachLine {line -> println line}
    proc.err.eachLine {line -> System.err.println( 'ERROR: ' + line)}
    proc.waitFor()
  }
}
buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:0.9.+'
  }
}

apply plugin: 'android'

dependencies {
  compile project(':vtm-android')
  compile project(':vtm-themes')
}

android {
  compileSdkVersion 19
  buildToolsVersion '19.0.1'

  sourceSets {
    main {
      manifest.srcFile 'AndroidManifest.xml'
      java.srcDirs = ['src']
      resources.srcDirs = ['src', 'assets']
      res.srcDirs = ['res']
      assets.srcDirs = ['assets']
    }

    debug.setRoot('build-types/debug')
    release.setRoot('build-types/release')
  }

  // ignore deprecated
  lintOptions.abortOnError false
}

// Including configurations into Eclipse
eclipse {
  sourceCompatibility = 1.6
  targetCompatibility = 1.6

  // Configuring Eclipse classpath
  classpath {
    plusConfigurations += configurations.compile

    defaultOutputDir = file('bin/classes')

    file {
      // Direct manipulation of the generated classpath XML
      withXml {
	def node = it.asNode()
	node.appendNode('classpathentry kind="src" path="src"')
	node.appendNode('classpathentry kind="src" path="gen"')
      }
    }
  }

  project {
    natures = ['com.android.ide.eclipse.adt.AndroidNature',
	       'org.eclipse.jdt.core.javanature']

    buildCommand 'com.android.ide.eclipse.adt.ResourceManagerBuilder'
    buildCommand 'com.android.ide.eclipse.adt.PreCompilerBuilder'
    buildCommand 'com.android.ide.eclipse.adt.ApkBuilder'
  }
}

task run (dependsOn: 'installDebug'){
  doFirst {
    println(">> adb run...")
    String adb = System.getenv()['ANDROID_HOME'] + '/platform-tools/adb'
    String cmd = "${adb} shell am start -n org.oscim.jeo.android/.TestActivity"
    def proc = cmd.execute()
    proc.in.eachLine {line -> println line}
    proc.err.eachLine {line -> System.err.println( 'ERROR: ' + line)}
    proc.waitFor()
  }
}
buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:0.9.+'
    // for aar/maven stuff
    // https://github.com/dcendents/android-maven-plugin
    classpath 'com.github.dcendents:android-maven-plugin:1.0'
  }
}

apply plugin: 'android-library'
apply plugin: 'android-maven'

dependencies {
  //compile 'org.oscim:vtm:0.5.9-SNAPSHOT'
  compile project(':vtm')

  compile 'com.android.support:support-v4:19.0.1'

  // -> might be more efficient, but configuring
  // log-levels is way too complicated...
  // compile 'org.slf4j:slf4j-android:1.7.6'

  compile 'com.noveogroup.android:android-logger:1.3.1'

  // local jars will be packaged into the aar
  compile files("${rootDir}/vtm-ext-libs/native-libs.jar")
}

android {
  compileSdkVersion 19
  buildToolsVersion '19.0.1'

  sourceSets {
    main {
      manifest.srcFile 'AndroidManifest.xml'
      java.srcDirs = ['src']
      resources.srcDirs = ['src']
      res.srcDirs = ['res']
      assets.srcDirs = ['assets']
    }
    debug.setRoot('build-types/debug')
    release.setRoot('build-types/release')
  }

  lintOptions.abortOnError false
}

eclipse {
  classpath {
    plusConfigurations += configurations.compile

    //customizing the classes output directory:
    defaultOutputDir = file('bin/classes')

    file {
      // Manipulation of the classpath XML before merging local
      // and generated copies
      beforeMerged { classpath ->
	// Remove all source entries to avoid overlap
	classpath.entries.removeAll() { c ->
	  c.kind == 'src'
	}
      }

      // only used to explode jni .so into aar
      whenMerged { classpath ->
	classpath.entries.findAll { entry ->
	  entry.path.contains('native-libs') }*.exported = false
      }

      // Direct manipulation of the generated classpath XML
      withXml {
	// Since non-default source directories are used
	// they need to be manually added to the classpath XML
	def node = it.asNode()
	// Main source directory and generated code directory
	node.appendNode('classpathentry kind="src" path="src"')
	node.appendNode('classpathentry kind="src" path="gen"')

      }
    }
  }
  jdt {
    sourceCompatibility = 1.6
    targetCompatibility = 1.6
  }
  project {
    natures = ['com.android.ide.eclipse.adt.AndroidNature',
	       'org.eclipse.jdt.core.javanature']
    buildCommand 'com.android.ide.eclipse.adt.ResourceManagerBuilder'
    buildCommand 'com.android.ide.eclipse.adt.PreCompilerBuilder'
    buildCommand 'com.android.ide.eclipse.adt.ApkBuilder'

    // use extracted jni .so in eclipse
    linkedResource name: 'libs', type: '2',
	   locationUri: 'PARENT-1-PROJECT_LOC/vtm-ext-libs/vtm-android'
  }
}
repositories {
  // libgdx
  maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'application'

mainClassName = 'org.oscim.gdx.GdxMapApp'

// package vtm native libs into jar
//task copyLibs(type: Copy) {
//  from(zipTree("../vtm-ext-libs/gdx/vtm-jni-natives.jar"))
//  into("${buildDir}/assets")
//}

//tasks.withType(JavaCompile) { compileTask ->
//  compileTask.dependsOn copyLibs
//}

sourceSets {
  main.java.srcDirs = ['src']
  //main.resources.srcDirs = ["${buildDir}/assets"]
  output.resourcesDir = 'assets'
}

dependencies {
  compile project(':vtm-gdx')
  compile project(':vtm-themes')
  compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
  compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
  compile 'org.slf4j:slf4j-simple:1.7.5'
  compile files('../vtm-ext-libs/gdx/vtm-jni-natives.jar')
}

run { ignoreExitValue = true }
apply plugin: 'java'
apply plugin: 'maven'

sourceSets {
  main.java.srcDirs = ['src']
  main.resources.srcDirs = ['src']
}

dependencies {
  compile project(':vtm')
  compile 'com.google.protobuf:protobuf-java:2.4.1'
  compile 'org.openstreetmap.osmosis:osmosis-osm-binary:0.43.1'
  compile 'com.fasterxml.jackson.core:jackson-core:2.3.0'
  compile 'com.vividsolutions:jts:1.13'
}

repositories {
  maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

apply plugin: 'java'
apply plugin: 'maven'

sourceSets {
  main.java.srcDirs = ['src']
  main.resources.srcDirs = ['src']
}

dependencies {
  compile project(':vtm')
  compile project(':vtm-themes')
  compile "com.badlogicgames.gdx:gdx:$gdxVersion"
}
buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath 'com.github.jtakakura:gradle-robovm-plugin:0.0.4'
  }
}

repositories {
  maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

apply plugin: 'java'
apply plugin: 'robovm'

ext {
  // Configure your application main class
  mainClassName = "org.oscim.ios.RoboVmLauncher"
  //roboVMVersion = "0.0.9"
}

dependencies {
  compile project(':vtm-gdx')
  compile project(':vtm-themes')
  compile 'org.slf4j:slf4j-simple:1.7.5'
  compile "com.badlogicgames.gdx:gdx-backend-robovm:$gdxVersion"
}


sourceCompatibility = '1.7'
//[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

robovm {
  // Configure robovm
  iosSignIdentity = ""
  iosProvisioningProfile = ""
}

sourceSets {
  main {
    java.srcDirs = ['src/']
    //resources.srcDirs = ['src/', 'data']
  }
  output.resourcesDir = 'assets'
}

// compile bytecode to llvm and run in the ios simulator
// task run (dependsOn: compileJava){
//   doFirst {
//     println(">> Running RoboVM")
//     String cmd = "$project.robovm_home/bin/robovm -verbose -arch x86 -os ios -cp $project.robovm_home/lib/robovm-objc.jar:$project.robovm_home/lib/robovm-cocoatouch.jar:$projectDir/build/classes/main/ -run $mainClass"
//     def proc = cmd.execute()

//     proc.in.eachLine {line -> println line}
//     proc.err.eachLine {line -> System.err.println( 'ERROR: ' + line)}
//     proc.waitFor()
//   }
// }


eclipse {
  project {
    natures = [  'org.eclipse.jdt.core.javanature',
		 'org.robovm.eclipse.RoboVMNature']
    buildCommand 'org.robovm.eclipse.RoboVMClassBuilder'
  }
}
apply plugin: 'java'
apply plugin: 'maven'


sourceSets {
  main.java.srcDirs = ['src']
  main.resources.srcDirs = ['src']
}

dependencies {
  compile project(':vtm')
  compile ('org.jeo:jeo:0-SNAPSHOT') {
    exclude group: 'org.slf4j', module: 'slf4j-jdk14'
  }
  compile ('org.jeo:jeo-carto:0-SNAPSHOT') {
    exclude group: 'org.slf4j', module: 'slf4j-jdk14'
  }
}

// eclipse.classpath.file.whenMerged { classpath ->
//   classpath.entries.findAll { entry ->
//     entry.path.contains('vtm-0.5.9-SNAPSHOT.jar') }*.exported = false
// }
repositories {
  // libgdx
  maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

apply plugin: 'java'
apply plugin: 'application'

mainClassName = 'org.oscim.gdx.GdxMapApp'

// package vtm native libs into jar
task copyLibs(type: Copy) {
  from(zipTree("../vtm-ext-libs/gdx/vtm-jni-natives.jar"))
  into("${buildDir}/assets")
}

tasks.withType(JavaCompile) { compileTask ->
  compileTask.dependsOn copyLibs
}

sourceSets {
  main.java.srcDirs = ['src']
  main.resources.srcDirs = ["${buildDir}/assets"]
  output.resourcesDir = 'assets'
}

dependencies {
  compile project(':vtm-desktop')
  compile project(':vtm-extras')
  compile project(':vtm-jeo')
}

run { ignoreExitValue = true }
apply plugin: 'java'
apply plugin: 'maven'

dependencies {
  compile project(':vtm')
  compile 'com.squareup.okhttp:okhttp:1.5.2'
  testCompile 'junit:junit:4.11'
  testCompile 'org.mockito:mockito-all:1.9.5'
  testCompile 'org.easytesting:fest-assert-core:2.0M10'
  testCompile 'com.squareup.okhttp:mockwebserver:1.5.2'
}

sourceSets {
  main.java.srcDirs = ['src']
  test.java.srcDirs = ['test']
}
apply plugin: 'java'
apply plugin: 'maven'


dependencies {
  compile project(':vtm')
}

sourceSets {
  main.java.srcDirs = ['src']
  main.resources.srcDirs = ['resources']
}
buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://github.com/steffenschaefer/gwt-gradle-plugin/raw/maven-repo/' }
  }
  dependencies {
    classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.3'
  }
}

repositories {
  maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'gwt'
apply plugin: 'eclipse'

sourceSets {
  //main.java.srcDirs = ['src', 'src/org/oscim/gdx/emu']
  main.java.srcDirs = ['src']
}

dependencies {
  providedCompile project(':vtm-web')
  providedCompile "com.badlogicgames.gdx:gdx:$gdxVersion:sources"
  providedCompile "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion:sources"
  providedCompile "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion"
  providedCompile 'ru.finam:slf4j-gwt:1.2.1'
  providedCompile 'org.slf4j:slf4j-api:1.7.5'
}

// explicit dependencies for org.gradle.configureondemand=true
evaluationDependsOn(':vtm')
evaluationDependsOn(':vtm-themes')
evaluationDependsOn(':vtm-gdx')
evaluationDependsOn(':vtm-web')


gwt {
  gwtVersion='2.6.0'
  modules 'org.oscim.web.VtmWebApp'

  superDev {
    noPrecompile=true
  }
  compiler {
        enableClosureCompiler = false; // activates -XenableClosureCompiler
        disableClassMetadata = true; // activates -XdisableClassMetadata
        disableCastChecking = true; // activates -XdisableCastChecking
  }
    
  src += files(sourceSets.main.java.srcDirs)
  src += files(project(':vtm').sourceSets.main.allJava.srcDirs)
  src += files(project(':vtm-themes').sourceSets.main.allJava.srcDirs)
  src += files(project(':vtm-themes').sourceSets.main.resources.srcDirs)
  src += files(project(':vtm-gdx').sourceSets.main.allJava.srcDirs)
  src += files(project(':vtm-web').sourceSets.main.allJava.srcDirs)
}

// Run jetty with draft compiled war
task jettyDraftWar(type: JettyRunWar) {
  dependsOn draftWar
  dependsOn.remove('war')
  webApp=draftWar.archivePath
}

task copyThemeAssets(type: Copy) {
    from "$rootDir/vtm-themes/resources/assets"
    into "assets"
    include '**/*'
}

task copyVtmAssets(type: Copy) {
    from "$rootDir/vtm/resources/assets"
    into "assets"
    include '**/*'
}

task copyWarSources(type: Copy) {
    from 'war/index.html'
    from 'war/default.css'
    into "src/main/webapp"
}

tasks.withType(JavaCompile) { compileTask ->
  compileTask.dependsOn copyThemeAssets
  compileTask.dependsOn copyVtmAssets
  compileTask.dependsOn copyWarSources
}

// Configuring Eclipse classpath
eclipse.classpath {

  defaultOutputDir = file('war/WEB-INF/classes')

  //file {
  //  whenMerged { classpath ->
  //    classpath.entries.findAll { entry ->
  //	entry.path == 'src' }*.excludes = ['main','org/oscim/gdx/emu/']
  //  }
  //}
}
buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://github.com/steffenschaefer/gwt-gradle-plugin/raw/maven-repo/' }
  }
  dependencies {
    classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.3'
  }
}

repositories {
  maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'gwt'
apply plugin: 'eclipse'

sourceSets {
  main.java.srcDirs = ['src']
}

dependencies {
  providedCompile project(':vtm-web')
  providedCompile project(':vtm-extras')
  providedCompile "com.badlogicgames.gdx:gdx:$gdxVersion:sources"
  providedCompile "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion:sources"
  providedCompile "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion"
  providedCompile 'ru.finam:slf4j-gwt:1.2.1'
  providedCompile 'org.slf4j:slf4j-api:1.7.5'
  providedCompile 'org.timepedia.exporter:gwtexporter:2.5.0-SNAPSHOT'
}

// explicit dependencies for org.gradle.configureondemand=true
evaluationDependsOn(':vtm')
evaluationDependsOn(':vtm-themes')
evaluationDependsOn(':vtm-gdx')
evaluationDependsOn(':vtm-web')

gwt {
  gwtVersion='2.6.0'
  modules 'org.oscim.web.VtmWebJs'

  superDev {
    noPrecompile=true
  }
  compiler {
        enableClosureCompiler = false; // activates -XenableClosureCompiler
        disableClassMetadata = true; // activates -XdisableClassMetadata
        disableCastChecking = true; // activates -XdisableCastChecking
  }
    
  src += files(sourceSets.main.java.srcDirs)
  src += files(project(':vtm').sourceSets.main.allJava.srcDirs)
  src += files(project(':vtm-themes').sourceSets.main.allJava.srcDirs)
  src += files(project(':vtm-themes').sourceSets.main.resources.srcDirs)
  src += files(project(':vtm-gdx').sourceSets.main.allJava.srcDirs)
  src += files(project(':vtm-web').sourceSets.main.allJava.srcDirs)
}

// Run jetty with draft compiled war
task jettyDraftWar(type: JettyRunWar) {
  dependsOn draftWar
  //dependsOn.remove('war')
  webApp=draftWar.archivePath
}

task copyThemeAssets(type: Copy) {
    from "$rootDir/vtm-themes/resources/assets"
    into "assets"
    include '**/*'
}

task copyVtmAssets(type: Copy) {
    from "$rootDir/vtm/resources/assets"
    into "assets"
    include '**/*'
}

task copyWarSources(type: Copy) {
    from 'war/index.html'
    from 'war/default.css'
    from 'war/map.js'
    into "src/main/webapp"
    //include '**/*'
}

tasks.withType(JavaCompile) { compileTask ->
  compileTask.dependsOn copyThemeAssets
  compileTask.dependsOn copyVtmAssets
  compileTask.dependsOn copyWarSources
}

// Configuring Eclipse classpath
eclipse.classpath {

  defaultOutputDir = file('war/WEB-INF/classes')

  //file {
  //  whenMerged { classpath ->
  //    classpath.entries.findAll { entry ->
  //	entry.path == 'src' }*.excludes = ['main','org/oscim/gdx/emu/']
  //  }
  //}
}
buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://github.com/steffenschaefer/gwt-gradle-plugin/raw/maven-repo/' }
  }
  dependencies {
    classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.3'
  }
}

repositories {
  maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

//apply plugin: 'war'
//apply plugin: 'jetty'
apply plugin: 'java'
apply plugin: 'gwt-base'
apply plugin: 'eclipse'

sourceSets {
  main.java.srcDirs = ['src', 'src/org/oscim/gdx/emu']
}

dependencies {
  compile project(':vtm-gdx')
  compile project(':vtm-extras')
  compile "com.badlogicgames.gdx:gdx:$gdxVersion:sources"
  compile "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion:sources"
  compile "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion"
  compile 'ru.finam:slf4j-gwt:1.2.1'
  compile 'org.slf4j:slf4j-api:1.7.5'
}

// explicit dependencies for org.gradle.configureondemand=true
evaluationDependsOn(':vtm')
evaluationDependsOn(':vtm-themes')
evaluationDependsOn(':vtm-gdx')
evaluationDependsOn(':vtm-extras')

gwt {
  gwtVersion='2.6.0'
  modules 'org.oscim.gdx.VtmWeb'

  superDev {
    noPrecompile=true
  }
  compiler {
        enableClosureCompiler = false; // activates -XenableClosureCompiler
        disableClassMetadata = true; // activates -XdisableClassMetadata
        disableCastChecking = true; // activates -XdisableCastChecking
  }
    
  src += files(sourceSets.main.java.srcDirs)
  src += files(project(':vtm').sourceSets.main.allJava.srcDirs)
  src += files(project(':vtm-themes').sourceSets.main.allJava.srcDirs)
  src += files(project(':vtm-themes').sourceSets.main.resources.srcDirs)
  src += files(project(':vtm-gdx').sourceSets.main.allJava.srcDirs)
}

// Run jetty with draft compiled war
//task jettyDraftWar(type: JettyRunWar) {
//  dependsOn draftWar
//  dependsOn.remove('war')
//  webApp=draftWar.archivePath
//}

//task copyThemeAssets(type: Copy) {
//    from "$rootDir/vtm-themes/resources/assets"
//    into "assets"
//    include '**/*'
//}

//task copyVtmAssets(type: Copy) {
//    from "$rootDir/vtm/resources/assets"
//    into "assets"
//    include '**/*'
//}

//tasks.withType(JavaCompile) { compileTask ->
//  compileTask.dependsOn copyThemeAssets
//  compileTask.dependsOn copyVtmAssets
//}

// Configuring Eclipse classpath
eclipse.classpath {

  defaultOutputDir = file('war/WEB-INF/classes')

  file {
    whenMerged { classpath ->
      classpath.entries.findAll { entry ->
	entry.path == 'src' }*.excludes = ['main','org/oscim/gdx/emu/']
    }
  }
}
apply plugin: 'java'
apply plugin: 'maven'

configurations { providedCompile }

dependencies {
  compile 'org.slf4j:slf4j-api:1.7.6'
  providedCompile 'com.squareup.okhttp:okhttp:1.5.2'
  providedCompile 'com.google.code.findbugs:annotations:2.0.1'
}

sourceSets {
  main.java.srcDirs = ['src']
  main.resources.srcDirs = ['resources']
  main.compileClasspath += configurations.providedCompile
}

//... there is probably a better way
eclipse.classpath {
  plusConfigurations += configurations.providedCompile

  file.whenMerged { classpath ->
    classpath.entries.findAll { entry ->
      entry.path.contains('annotations') }*.exported = false
  }
}
