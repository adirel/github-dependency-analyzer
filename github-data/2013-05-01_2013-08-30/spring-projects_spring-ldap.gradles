buildscript {
    repositories {
        maven { url "http://repo.springsource.org/plugins-release" }
        maven { url "http://dl.bintray.com/content/aalmiray/asciidoctor" }
    }
    dependencies {
        classpath("org.springframework.build.gradle:propdeps-plugin:0.0.3")
        classpath('org.asciidoctor:asciidoctor-gradle-plugin:0.7.0')
    }
}

apply plugin: "asciidoctor"
apply plugin: "sonar-runner"

ext.GRADLE_SCRIPT_DIR = "${rootProject.projectDir}/gradle"
ext.JAVA_MODULE_SCRIPT = "${GRADLE_SCRIPT_DIR}/java-module.gradle"
ext.MAVEN_DEPLOYMENT_SCRIPT = "${GRADLE_SCRIPT_DIR}/maven-deployment.gradle"
ext.JAVA_SCRIPT = "${GRADLE_SCRIPT_DIR}/java.gradle"
ext.RELEASE_CHECKS_SCRIPT = "${GRADLE_SCRIPT_DIR}/release-checks.gradle"
ext.SAMPLE_WAR_GRADLE = "${GRADLE_SCRIPT_DIR}/sample-war.gradle"

ext.coreModules = subprojects.findAll { p-> (!p.name.contains("test") && !p.name.contains("sample") && !p.name.contains("sandbox")) || p.name == "spring-ldap-test" }

configure(allprojects) {
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'
    apply plugin: 'groovy'

    group = "org.springframework.ldap"

    ext.releaseBuild = version.endsWith('RELEASE')
    ext.snapshotBuild = version.endsWith('SNAPSHOT')
    ext.javadocLinks = [
        "http://download.oracle.com/javase/1.5.0/docs/api",
        "http://static.springframework.org/spring/docs/3.0.x/api/",
        "http://logging.apache.org/log4j/1.2/apidocs/",
        "http://commons.apache.org/logging/apidocs/",
        "http://commons.apache.org/dbcp/apidocs/",
        "http://commons.apache.org/pool/apidocs/",
        "http://junit.sourceforge.net/javadoc/",
    ] as String[]
}

configure(coreModules) {
    apply from: JAVA_MODULE_SCRIPT
}

configure(subprojects - coreModules) {
    sonarRunner {
        skipProject = true
    }

    tasks.findByPath("artifactoryPublish")?.enabled = false
}

description = "Spring LDAP"

configurations.archives.artifacts.clear()

sonarRunner {
    sonarProperties {
        property "sonar.exclusions", "file:**/generated-src/**"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.jacoco.reportPath", "${buildDir.name}/jacoco.exec"
        property "sonar.links.homepage", 'https://github.com/SpringSource/spring-ldap'
        property "sonar.links.ci", 'https://build.springsource.org/browse/LDAP-B20X'
        property "sonar.links.issue", 'https://jira.springsource.org/browse/LDAP'
        property "sonar.links.scm", 'https://github.com/SpringSource/spring-ldap'
        property "sonar.links.scm_dev", 'https://github.com/SpringSource/spring-ldap.git'
    }
}

asciidoctor {
    outputDir = new File("$buildDir/docs")
    options = [
            eruby: 'erubis',
            attributes: [
                    copycss : '',
                    icons : 'font',
                    'source-highlighter': 'prettify',
                    sectanchors : '',
                    toc2: '',
                    idprefix: '',
                    idseparator: '-',
                    doctype: 'book',
                    numbered: '',
                    'spring-ldap-version' : project.version,
                    revnumber : project.version
            ]
    ]
}

task api(type: Javadoc) {
    group = "Documentation"
    description = "Generates aggregated Javadoc API documentation."
    title = "${rootProject.description} ${version} API"

    options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
    options.author = true
    options.header = rootProject.description
    options.splitIndex = true
    options.links(project.ext.javadocLinks)

    maxMemory = "1024m"
    destinationDir = new File(buildDir, "api")

    source coreModules*.javadoc*.source
    classpath = files(coreModules*.javadoc*.classpath)
}

task docsZip(type: Zip, dependsOn: asciidoctor) {
    group = "Distribution"
    baseName = "spring-ldap"
    classifier = "docs"
    description = "Builds -${classifier} archive containing api and reference " +
        "for deployment at http://static.springframework.org/spring-ldap/docs."

    from("src/dist") {
        include "changelog.txt"
    }

    from (api) {
        into "apidocs"
    }

    from (asciidoctor.outputDir) {
        include "*.html"
        into "reference"
    }
}

task schemaZip(type: Zip) {
    group = 'Distribution'
    baseName = rootProject.name
    classifier = 'schema'
    description = "Builds -${classifier} archive containing all " +
        "XSDs for deployment at static.springframework.org/schema."

    coreModules.each { module ->
        def Properties schemas = new Properties();

        module.sourceSets.main.resources.find {
            it.path.endsWith('META-INF/spring.schemas')
        }?.withInputStream { schemas.load(it) }

        for (def key : schemas.keySet()) {
            def shortName = key.replaceAll(/http.*schema.(.*).spring-.*/, '$1')
            assert shortName != key
            File xsdFile = module.sourceSets.main.resources.find {
                it.path.endsWith(schemas.get(key))
            }
            assert xsdFile != null
            into (shortName) {
                from xsdFile.path
            }
        }
    }
}


task distZip(type: Zip, dependsOn: [docsZip]) {
    dependsOn subprojects*.tasks*.matching { task -> task.name == 'assemble' }

    group = "Distribution"
    baseName = "spring-ldap"
    classifier = "dist"
    description = "Builds -${classifier} archive, containing all jars and docs, " +
                "suitable for community download page."

    ext.baseDir = "${baseName}-${project.version}"


    from("src/dist") {
        include "readme.md"
        include "license.txt"
        include "notice.txt"
        into "${baseDir}"
        expand(copyright: new Date().format("yyyy"), version: project.version)
    }

    from(zipTree(docsZip.archivePath)) {
        into "${baseDir}/docs"
    }

    coreModules.each { subproject ->
        into ("${baseDir}/libs") {
            from subproject.jar
            if (subproject.tasks.findByPath("sourcesJar")) {
                from subproject.sourcesJar
            }
            if (subproject.tasks.findByPath("javadocJar")) {
                from subproject.javadocJar
            }
        }
    }
}

artifacts {
    archives docsZip
    archives distZip
    archives schemaZip
}

dependencies {
    compile project(":spring-ldap-core"),
            "org.springframework:spring-tx:$springVersion"

    testCompile     "junit:junit:$junitVersion",
                    "org.easymock:easymock:2.5.1"
}apply from: 'javacc.gradle'

idea.module.excludeDirs = [
        file('.gradle'),
        file('build/javacc'),
        file('build/classes'),
        file('build/tmp'),
        file('build/dependency-cache'),
        file('build/libs')]

dependencies {
    compile  "org.springframework:spring-core:$springVersion",
             "org.springframework:spring-beans:$springVersion",
             "org.springframework:spring-tx:$springVersion",
             "org.springframework.data:spring-data-commons:$springDataVersion"
             "org.slf4j:slf4j-api:$slf4jVersion"

    provided "commons-pool:commons-pool:$commonsPoolVersion",
             "com.sun:ldapbp:1.0",
             "org.springframework:spring-context:$springVersion",
             "org.springframework:spring-jdbc:$springVersion",
             "org.springframework:spring-orm:$springVersion",
             "com.mysema.querydsl:querydsl-apt:$queryDslVersion"

    testCompile "junit:junit:$junitVersion",
                "commons-lang:commons-lang:$commonsLangVersion",
                "gsbase:gsbase:$gsbaseVersion",
                "org.mockito:mockito-core:$mockitoVersion",
                "org.slf4j:slf4j-log4j12:$slf4jVersion",
                "org.springframework:spring-test:$springVersion",
                powerMockDependencies
}
dependencies {
    compile project(':spring-ldap-ldif-core'),
            "commons-lang:commons-lang:$commonsLangVersion"

    compile("org.springframework.batch:spring-batch-infrastructure:$springBatchVersion") {
        exclude group: "org.springframework", module: "spring-core"
        exclude group: "org.springframework", module: "spring-context"
        exclude group: "org.springframework", module: "spring-aop"
    }

    testCompile "junit:junit:$junitVersion",
            "org.springframework:spring-context:$springVersion",
            "org.springframework:spring-aop:$springVersion",
            "org.springframework:spring-test:$springVersion",

    testCompile("org.springframework.batch:spring-batch-test:$springBatchVersion") {
        exclude group: "org.springframework", module: "spring-test"
    }
}
dependencies {
    compile project(":spring-ldap-core")

    testCompile "junit:junit:$junitVersion",
                 "commons-io:commons-io:2.4"
    testCompile ("log4j:log4j:$log4jVersion") {
        exclude group: 'javax.jms'
        exclude group: 'com.sun.jdmk'
        exclude group: 'com.sun.jmx'
    }
}jar {
    manifest.attributes["Main-Class"] = "org.springframework.ldap.odm.tools.SchemaToJava"
}

dependencies {
    compile project(":spring-ldap-core"),
            project(":spring-ldap-core-tiger"),
            "org.springframework:spring-core:$springVersion",
            "org.freemarker:freemarker:2.3.9",
            "commons-logging:commons-logging:$commonsLoggingVersion",
            "commons-cli:commons-cli:1.2"

    runtime "org.springframework:spring-context:$springVersion"

    provided "commons-pool:commons-pool:$commonsPoolVersion",
             "com.sun:ldapbp:1.0",
            "commons-lang:commons-lang:$commonsLangVersion",
            "org.springframework:spring-context:$springVersion",
             "org.springframework:spring-jdbc:$springVersion",
             "org.springframework:spring-orm:$springVersion"

    testCompile project(":spring-ldap-test"),
                "junit:junit:$junitVersion",
                "jdepend:jdepend:2.9.1",
                "commons-io:commons-io:2.4"
}apply from: SAMPLE_WAR_GRADLE

dependencies {
    compile project(':spring-ldap-test'),
            'javax.servlet:jstl:1.2',
            "org.springframework:spring-context:$springVersion",
            "org.springframework:spring-webmvc:$springVersion"

    provided "javax.servlet:servlet-api:2.5"

    runtime 'ch.qos.logback:logback-classic:1.0.13'

    testCompile "org.springframework:spring-test:$springVersion",
                "junit:junit:$junitVersion"
}apply from: SAMPLE_WAR_GRADLE

dependencies {
    compile project(':spring-ldap-test'),
            'javax.servlet:jstl:1.2',
            "org.springframework:spring-context:$springVersion",
            "org.springframework:spring-webmvc:$springVersion"

    provided "javax.servlet:servlet-api:2.5"

    runtime 'ch.qos.logback:logback-classic:1.0.13'

    testCompile "org.springframework:spring-test:$springVersion",
                "junit:junit:$junitVersion"
}apply from: SAMPLE_WAR_GRADLE

dependencies {
    compile project(':spring-ldap-test'),
            'javax.servlet:jstl:1.2',
            "org.springframework:spring-context:$springVersion",
            "org.springframework:spring-webmvc:$springVersion",
            "com.fasterxml.jackson.core:jackson-databind:2.2.3",
            "com.google.guava:guava:15.0"

    provided "javax.servlet:javax.servlet-api:3.0.1",
            'javax.servlet.jsp:jsp-api:2.1'

    runtime 'ch.qos.logback:logback-classic:1.0.13'

    testCompile "org.springframework:spring-test:$springVersion",
                "junit:junit:$junitVersion"
}apply from: JAVA_SCRIPT

dependencies {
    compile project(":spring-ldap-core")

    provided "com.sun:ldapbp:1.0"

    testCompile "junit:junit:$junitVersion",
                "org.mockito:mockito-core:$mockitoVersion",
                "gsbase:gsbase:$gsbaseVersion"
}
dependencies {
    compile project(":spring-ldap-core"),
            project(":spring-ldap-ldif-core"),
            "com.google.code.typica:typica:1.3",
            "commons-io:commons-io:2.4",
            "javax.xml:jsr173:1.0",
            "javax.activation:activation:1.1",
            "javax.xml.bind:jaxb-api:2.1",
            "javax.xml:jaxb-impl:2.1",
            "org.springframework:spring-core:$springVersion",
            "org.springframework:spring-beans:$springVersion",
            "org.springframework:spring-context:$springVersion",
            "org.springframework:spring-test:$springVersion"


    compile("org.apache.directory.server:apacheds-all:1.5.5") {
        exclude group: "org.slf4j", module: "slf4j-api"
    }

    provided "junit:junit:$junitVersion"
}apply from: JAVA_SCRIPT

dependencies {
    compile 	project(":spring-ldap-test"),
                project(":spring-ldap-odm"),
                project(":spring-ldap-core-tiger")

    provided	"org.springframework:spring-jdbc:$springVersion",
                "org.springframework:spring-orm:$springVersion"

    testCompile "org.springframework:spring-test:$springVersion",
                "junit:junit:$junitVersion",
                "org.slf4j:slf4j-log4j12:$slf4jVersion"

}

test.enabled = false // TODO this should be enabled depending on build parameterapply from: JAVA_SCRIPT

dependencies {
    compile     project(":spring-ldap-core-tiger"),
                project(":spring-ldap-test"),
                "commons-logging:commons-logging:$commonsLoggingVersion",
                "commons-httpclient:commons-httpclient:3.1",
                "commons-codec:commons-codec:1.3"

    provided	"org.springframework:spring-jdbc:$springVersion"

    testCompile "org.springframework:spring-aop:$springVersion",
                "org.springframework:spring-test:$springVersion",
                "gsbase:gsbase:$gsbaseVersion",
                "junit:junit:$junitVersion",
                "com.sun:ldapbp:1.0",
                "org.slf4j:slf4j-log4j12:$slf4jVersion"

}

test.enabled = false // TODO this should be enabled depending on build parameterrepositories {
    maven { url "http://download.java.net/maven/2/" }
}
apply from: JAVA_SCRIPT

ext.spring20Version = '2.0.8'

dependencies {
    testCompile 	(project(":spring-ldap-test")) {
        exclude group: "org.springframework", module:"spring-core"
        exclude group: "org.springframework", module:"spring-beans"
        exclude group: "org.springframework", module:"spring-context"
        exclude group: "org.springframework", module:"spring-test"
        exclude group: "org.springframework", module:"spring-tx"
    }

    testCompile "org.springframework:spring-mock:$spring20Version",
                "org.springframework:spring-context:$spring20Version",
                "org.springframework:spring-core:$spring20Version",
                "org.springframework:spring-dao:$spring20Version",
                "org.springframework:spring-beans:$spring20Version",
                "org.slf4j:slf4j-log4j12:$slf4jVersion"

}repositories {
    maven { url "http://download.java.net/maven/2/" }
}
apply from: JAVA_SCRIPT

ext.spring25Version = '2.5.6.SEC03'

dependencies {
    testCompile 	(project(":spring-ldap-test")) {
        exclude group: "org.springframework", module:"spring-core"
        exclude group: "org.springframework", module:"spring-beans"
        exclude group: "org.springframework", module:"spring-context"
        exclude group: "org.springframework", module:"spring-test"
        exclude group: "org.springframework", module:"spring-tx"
    }

    testCompile ("org.springframework:spring-test:$spring25Version") {
        exclude group: "junit", module:"junit"
    }

    testCompile "org.springframework:spring-test:$spring25Version",
                "org.springframework:spring-context:$spring25Version",
                "org.springframework:spring-core:$spring25Version",
                "org.springframework:spring-tx:$spring25Version",
                "org.springframework:spring-beans:$spring25Version",
                "junit:junit:$junitVersion",
                "org.slf4j:slf4j-log4j12:$slf4jVersion"

}
repositories {
    maven { url "http://download.java.net/maven/2/" }
}
apply from: JAVA_SCRIPT

ext.spring30Version = '3.0.7.RELEASE'

dependencies {
    testCompile 	(project(":spring-ldap-test")) {
        exclude group: "org.springframework", module:"spring-core"
        exclude group: "org.springframework", module:"spring-beans"
        exclude group: "org.springframework", module:"spring-context"
        exclude group: "org.springframework", module:"spring-test"
        exclude group: "org.springframework", module:"spring-tx"
    }

    testCompile ("org.springframework:spring-test:$spring30Version") {
        exclude group: "junit", module:"junit"
    }

    testCompile "org.springframework:spring-test:$spring30Version",
                "org.springframework:spring-context:$spring30Version",
                "org.springframework:spring-core:$spring30Version",
                "org.springframework:spring-tx:$spring30Version",
                "org.springframework:spring-beans:$spring30Version",
                "junit:junit:$junitVersion",
                "org.slf4j:slf4j-log4j12:$slf4jVersion"
}
apply from: JAVA_SCRIPT

dependencies {
    compile     project(":spring-ldap-test"),
                project(":spring-ldap-integration-tests"),
                project(":spring-ldap-sandbox"),
                project(":spring-ldap-core-tiger"),
                "commons-pool:commons-pool:1.4"

    provided 	"org.springframework:spring-jdbc:$springVersion",
                "com.sun:ldapbp:1.0"

    testCompile "junit:junit:$junitVersion",
                "org.springframework:spring-aop:$springVersion",
                "org.springframework:spring-aop:$springVersion",
                "gsbase:gsbase:$gsbaseVersion",
                "org.slf4j:slf4j-log4j12:$slf4jVersion"

}

test.enabled = false // TODO this should be enabled depending on build parameterrepositories {
    maven { url "http://download.java.net/maven/2/" }
}
apply from: JAVA_SCRIPT

configurations {
    jacoco //Configuration Group used by Sonar to provide Code Coverage using JaCoCo
}

idea.module.excludeDirs = [
        file('.gradle'),
        file('build/classes'),
        file('build/tmp'),
        file('build/dependency-cache'),
        file('build/libs')]

sourceSets {
    generated {
        java {
            srcDirs = ['build/generated-src']
        }
    }
}

ext.springSecurityVersion='3.0.5.RELEASE'

dependencies {
    compile 	project(":spring-ldap-test"),
                project(":spring-ldap-core-tiger")

    compile "com.mysema.querydsl:querydsl-apt:$queryDslVersion"

    compile("org.springframework.security:spring-security-core:$springSecurityVersion") {
        exclude group: "org.springframework", module: "spring-expression"
        exclude group: "org.springframework", module: "spring-core"
        exclude group: "org.springframework", module: "spring-context"
        exclude group: "org.springframework", module: "spring-tx"
        exclude group: "org.springframework", module: "spring-aop"
    }

    provided	"commons-pool:commons-pool:$commonsPoolVersion",
                "org.springframework:spring-jdbc:$springVersion",
                "org.springframework:spring-orm:$springVersion"

    testCompile "org.springframework:spring-test:$springVersion",
                "org.springframework:spring-aop:$springVersion",
                "org.springframework:spring-expression:$springVersion",
                "org.hibernate:hibernate:3.2.6.ga",
                "aspectj:aspectjrt:1.5.3",
                "aspectj:aspectjweaver:1.5.3",
                "hsqldb:hsqldb:1.8.0.7",
                "junit:junit:$junitVersion",
                "org.springframework.security:spring-security-config:$springSecurityVersion",
                "org.slf4j:slf4j-log4j12:$slf4jVersion"


    testCompile("org.springframework.security:spring-security-ldap:$springSecurityVersion") {
        exclude group: "org.springframework.ldap", module: "spring-ldap-core"
    }
}

task generateQueryDSL(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
    source = sourceSets.main.java
    classpath = configurations.compile
    options.compilerArgs = [
            "-proc:only",
            "-processor", "org.springframework.ldap.repository.support.LdapAnnotationProcessor"
    ]
    destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
}

compileJava {
    dependsOn generateQueryDSL
    source generateQueryDSL.destinationDir
}

compileGeneratedJava {
    dependsOn generateQueryDSL
    options.warnings = false
    classpath += sourceSets.main.runtimeClasspath
}

clean {
    delete sourceSets.generated.java.srcDirs
}

ideaModule.dependsOn generateQueryDSL

idea {
    module {
        sourceDirs += file('build/generated-src')
    }
}

dependencies {
    jacoco group: "org.jacoco", name: "org.jacoco.agent", version: "0.6.2.201302030002", classifier: "runtime"
}

test {
    jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=$projectDir/../../core/build/jacoco.exec,includes=org.springframework.*"
    systemProperties = System.properties
}

