apply plugin: 'base'
	
buildscript {
    repositories {
        maven { url 'http://repo.springsource.org/plugins-release' }
    }
    dependencies {
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.5'
    }
}

ext {
    springVersion = "3.0.7.RELEASE"
    tomcatVersion = "7.0.52"

    springAmqpVersion = "1.2.1.RELEASE"
    springDataRedisVersion = "1.2.0.RELEASE"
    springDataMongoVersion = "1.4.0.RELEASE"
    
    jedisVersion = "2.4.1"

    commonDbcpVersion = "1.3"
    commonDbcp2Version = "2.0"

    mysqlDriverVersion = "5.1.29"
    mariadbDriverVersion = "1.1.3"
    postgresDriverVersion = "9.0-801.jdbc4"
    javaxMailVersion = "1.4.7"
    cglibVersion = "3.1"

    jacksonVersion = "2.3.1"

    log4jVersion = "1.2.17"

    junitVersion = "4.11"
    mockitoVersion = "1.9.5"
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'eclipse'
    
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'

    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    task packageSources(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
    		archives packageSources
    }

    dependencies {
        testCompile("junit:junit:$junitVersion")
        testCompile("org.mockito:mockito-core:$mockitoVersion")
    }
    
	repositories {
	    mavenLocal()

	    maven { url "http://repo.spring.io/snapshot" }
	    maven { url "http://repo.spring.io/milestone" }
	    maven { url "http://repo.spring.io/libs-milestone" }
	    maven { url "http://repo.maven.apache.org/maven2" }
	}
}

configure(rootProject) {
	task schemaZip(type: Zip) {
		group = 'Distribution'
		classifier = 'schema'
		description = "Builds -${classifier} archive containing all " +
			"XSDs for deployment at static.springframework.org/schema."
	
		subprojects.each { subproject ->
			def Properties schemas = new Properties();
			def shortName = subproject.name
	
			subproject.sourceSets.main.resources.find {
				it.path.endsWith('META-INF/spring.schemas')
			}?.withInputStream { schemas.load(it) }
	
			for (def key : schemas.keySet()) {
				File xsdFile = subproject.sourceSets.main.resources.find {
					it.path.endsWith(schemas.get(key))
				}
				assert xsdFile != null
				into ("cloud/${shortName}") {
					from xsdFile.path
				}
			}
		}
	}
	
	artifacts {
		archives schemaZip
	}
}

task dist(dependsOn: assemble) {
	group = 'Distribution'
	description = 'Builds -dist, -docs and -schema distribution archives.'
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}description = 'Spring-Cloud Cloud Foundry Connector'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:0.8'
    }
}

apply plugin: 'shadow'

dependencies {
  compile project(':core')
  compile("com.fasterxml.jackson.core:jackson-core:$jacksonVersion")
  compile("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
}

shadow {
    relocation {
        pattern = 'com.fasterxml.jackson'
        shadedPattern = 'org.springframework.cloud.cloudfoundry.com.fasterxml.jackson'
    }
}

task moveShadowJar(type: Copy) {
    from "$buildDir/distributions/${archivesBaseName}-${version}-shadow.jar"
    into "$buildDir/libs"
     rename { String fileName ->
        fileName.replace('-shadow', '')
    }
}

moveShadowJar.dependsOn shadowJar
assemble.dependsOn moveShadowJar
install.dependsOn moveShadowJar

configurations {
    tests
}

task testJar(type: Jar) {
    classifier = 'tests'
    from sourceSets.test.output.classesDir
}

build.dependsOn testJar

artifacts {
    tests testJar
}description = 'Spring-Cloud Cloud Foundry User-provided Connector'

dependencies {
    compile project(':cloudfoundry-connector')
    testCompile project(path: ':cloudfoundry-connector', configuration: 'tests')
}

description = 'Spring-Cloud Core'

configurations {
	tests
}

task testJar(type: Jar) {
	classifier = 'tests'
	from sourceSets.test.output.classesDir
}

build.dependsOn testJar

artifacts {
  tests testJar
}description = 'Spring-Cloud Heroku Connector'

dependencies {
  compile project(':core')
}
description = 'Service Connectors'

dependencies {
  testCompile project(path: ':core', configuration: 'tests')
  compile project(':core')

  compile("org.springframework:spring-context:$springVersion")
  compile("log4j:log4j:$log4jVersion")

  testCompile("org.springframework:spring-test:$springVersion")
  testCompile("mysql:mysql-connector-java:$mysqlDriverVersion")
  testCompile("org.mariadb.jdbc:mariadb-java-client:$mariadbDriverVersion")
  testCompile("postgresql:postgresql:$postgresDriverVersion")
  testCompile("cglib:cglib-nodep:$cglibVersion")

  testRuntime("javax.mail:javax.mail-api:$javaxMailVersion")

  optional("org.springframework:spring-jdbc:$springVersion")
  optional("org.springframework:spring-context-support:$springVersion")
  optional("org.apache.tomcat:tomcat-jdbc:$tomcatVersion")
  optional("org.apache.tomcat:tomcat-dbcp:$tomcatVersion")
  optional("org.apache.commons:commons-dbcp2:$commonDbcp2Version") {
    exclude(module: 'commons-logging')
    exclude(module: 'xerces')
    exclude(module: 'xercesImpl')
    exclude(module: 'xml-apis')
  }
  optional("commons-dbcp:commons-dbcp:$commonDbcpVersion") {
    exclude(module: 'commons-logging')
    exclude(module: 'xerces')
    exclude(module: 'xercesImpl')
    exclude(module: 'xml-apis')
  }
  optional("org.springframework.amqp:spring-rabbit:$springAmqpVersion")
  optional("org.springframework.data:spring-data-redis:$springDataRedisVersion") {
    exclude(module: 'spring-context-support')
  }
  optional("redis.clients:jedis:$jedisVersion")

  optional("org.springframework.data:spring-data-mongodb:$springDataMongoVersion") {
    exclude(module: 'spring-beans')
    exclude(module: 'spring-expression')
    exclude(module: 'spring-tx')
  }
}
