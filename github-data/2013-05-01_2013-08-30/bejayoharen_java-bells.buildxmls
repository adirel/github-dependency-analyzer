<project name="Java Bells" default="jar" basedir=".">
	<description>
		Builds Java Bells, a Jingle jibrary for java.
	</description>
	<property name="src" location="src" />
	<property name="build" location="build" />
	<property name="target" location="target" />
	<property file="passwords.props" />

	<!-- jars/dependent libraries -->
	<path id="jars.list">
		<fileset dir="lib">
			<include name="*.jar"/>
		</fileset>
	</path>
	<property name="jars" refid="jars.list" />

	<target name="init">
		<tstamp />
		<mkdir dir="${build}" />
	</target>

	<target name="compile" depends="init">
		<javac srcdir="${src}" debug="true" debuglevel="lines,source" destdir="${build}" source="1.6" target="1.6" includeantruntime="false"
			classpath="${classpath}:${jars}" />
	</target>

	<target name="test" depends="compile">
		<java classname="com.xonami.javaBellsSample.JavaBellsSample" fork="true" dir="." classpath="${classpath}:${jars}:${build}">
			<arg value="JavaBellsSample" />
			<arg value="CALL_AND_ANSWER" />
			<arg value="${username}" />
			<arg value="${password}" />
			<arg value="${host}" />
			<jvmarg value="-Djava.library.path=${java.library.path}:lib/native/mac" />
		</java>
	</target>

	<target name="jar" depends="compile">
		<jar destfile="${target}/java-bells-no-deps.jar" basedir="${build}" includes="**" />
		<jar destfile="${target}/java-bells-with-deps.jar">
			<fileset dir="${build}"/>
			<restrict>
				<archives>
					<zips>
						<fileset dir="lib" includes="**/*.jar"/>
					</zips>
				</archives>
			<not><name name="META-INF/*.SF" /></not>
			<not><name name="META-INF/*.DSA" /></not>
			<not><name name="META-INF/*.RSA" /></not>
			</restrict>
		</jar>
	</target>

	<target name="testanswer" depends="compile">
		<java classname="com.xonami.javaBellsSample.JavaBellsSample" fork="true" dir="." classpath="${classpath}:${jars}:${build}">
			<arg value="JavaBellsSample" />
			<arg value="ANSWER" />
			<arg value="${username}" />
			<arg value="${password}" />
			<arg value="${host}" />
			<jvmarg value="-Djava.library.path=${java.library.path}:lib/native/mac" />
		</java>
	</target>

	<target name="testcall" depends="compile">
		<java classname="com.xonami.javaBellsSample.JavaBellsSample" fork="true" dir="." classpath="${classpath}:${jars}:${build}">
			<arg value="JavaBellsSample" />
			<arg value="CALL" />
			<arg value="${username}" />
			<arg value="${password}" />
			<arg value="${host}" />
			<jvmarg value="-Djava.library.path=${java.library.path}:lib/native/mac" />
		</java>
	</target>

	<target name="testanswer2" depends="compile">
		<java classname="com.xonami.javaBellsSample.JavaBellsSample2" fork="true" dir="." classpath="${classpath}:${jars}:${build}">
			<arg value="JavaBellsSample2" />
			<arg value="ANSWER" />
			<arg value="${username}" />
			<arg value="${password}" />
			<arg value="${host}" />
			<jvmarg value="-Djava.library.path=${java.library.path}:lib/native/mac" />
		</java>
	</target>

	<target name="testcall2" depends="compile">
		<java classname="com.xonami.javaBellsSample.JavaBellsSample2" fork="true" dir="." classpath="${classpath}:${jars}:${build}">
			<arg value="JavaBellsSample2" />
			<arg value="CALL" />
			<arg value="${username}" />
			<arg value="${password}" />
			<arg value="${host}" />
			<jvmarg value="-Djava.library.path=${java.library.path}:lib/native/mac" />
		</java>
	</target>

	<target name="testcallout" depends="compile">
		<java classname="com.xonami.javaBellsSample.JavaBellsCallerSample" fork="true" dir="." classpath="${classpath}:${jars}:${build}">
			<arg value="JavaBellsCallerSample" />
			<arg value="${username}" />
			<arg value="${password}" />
			<arg value="${host}" />
			<jvmarg value="-Djava.library.path=${java.library.path}:lib/native/mac" />
		</java>
	</target>

	<target name="clean">
		<delete dir="${build}" />
		<delete dir="${target}" />
	</target>
</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="libjitsi">

  <property file="local.properties" />
  <property name="dest" value="classes" />
  <property name="dist" value="dist" />
  <property name="libjitsi.jar" value="libjitsi.jar"/>
  <property name="src" value="src"/>
  <property name="doc" value="doc"/>
  <property name="java.doc" value="${doc}/api"/>
  <property name="native.libs" value="lib/native"/>
  <property environment="system"/>
     
  <path id="compile.class.path">
    <fileset dir="lib" includes="*.jar" />
  </path>

  <condition property="build.label"
             value="-${label}"
             else="">
    <isset property="label"/>
  </condition>

  <!-- Import JNI build xml -->
  <import file="${src}/native/build.xml"/>

  <target
      name="clean"
      description="Remove all compiled/generated files and prepare for a clean compile/build.">
    <delete failonerror="false" includeemptydirs="true">
      <fileset file="${libjitsi.jar}" />
      <fileset dir="${dest}" />
      <fileset dir="${dist}" />
      <fileset dir="${doc}" />
    </delete>
  </target>

  <target name="compile">
    <mkdir dir="${dest}" />
    <javac
        classpathref="compile.class.path"
        debug="true"
        destdir="${dest}"
        fork="true"
        optimize="true"
        source="1.5"
        target="1.5">
      <src path="${src}"/>
      <exclude name="org/jitsi/impl/neomedia/codec/audio/speex/Java*"/>
    </javac>
  </target>

  <target name="compile-with-g729">
    <replace
        file="${src}/org/jitsi/impl/neomedia/codec/EncodingConfigurationImpl.java"
        token="public static final boolean G729 = false"
        value="public static final boolean G729 = true"/>
    <antcall target="compile" />
    <replace
        file="${src}/org/jitsi/impl/neomedia/codec/EncodingConfigurationImpl.java"
        token="public static final boolean G729 = true"
        value="public static final boolean G729 = false"/>
   </target>

  <target name="jar" depends="compile">
    <jar
        compress="true"
        destfile="${libjitsi.jar}">
      <fileset casesensitive="no" dir="${dest}">
        <include name="**/*.class" />
      	<include name="**/*.properties" />
        <exclude name="${dest}/libjitsi.jar" />
      </fileset>
    </jar>    
  </target>

  <target
      name="make"
      depends="compile,jar"
      description="Incrementally compile and jar/package the project." />
  
  <target
      name="make-with-g729"
      depends="compile-with-g729,jar"
      description="Incrementally compile and jar/package the project including support for the G.729 audio codec." />

  <target
      name="rebuild"
      depends="clean,make"
      description="Clean and make the project." />

  <!--
    Run a libjitsi example from the org.jitsi.examples package by name. The name
    of the example to run is to be specified as the value of the Ant property
    'run.example.name'. Command-line arguments may be specified to the example
    to be run via the Ant property 'run.example.arg.line'.
  -->
  <target
      name="run-example"
      depends="compile"
      description="Run a libjitsi example by name.">
    <java
        classname="org.jitsi.examples.${run.example.name}"
        failonerror="true"
        fork="true">
      <arg line="${run.example.arg.line}" />
      <classpath>
        <path refid="compile.class.path" />
        <pathelement location="${dest}" />
      </classpath>
      <sysproperty
          key="java.library.path"
          path="lib/native/linux-64:lib/native/linux:lib/native/mac:lib/native/windows-64:lib/native/windows" />
    </java>
  </target>

  <!-- JAVADOC -->
  <target name="javadoc"
      description="Generates project javadoc.">
      <javadoc author="true" destdir="${java.doc}" package="true"
          version="true" use="true" windowtitle="Jitsi API"
          classpathref="compile.class.path" source="1.5+" maxmemory="256m">
          <packageset dir="${src}">
              <include name="**"/>
          </packageset>
          <tag name="todo" description="To do:"/>
          <tag name="note" description="Note:"/>
          <link href="${j2se_api}" />
          <header>
              <![CDATA[
              <b> Jitsi: the OpenSource Java VoIP and Instant Messaging client. </b>
              ]]>
          </header>
          <bottom>
              <![CDATA[
              <font size="-1">
                  <a href="http://jitsi.org"> Jitsi, the OpenSource Java VoIP and Instant Messaging client. </a>
                  <br>
                      <a href="http://gnu.org"> Distributable under LGPL license. </a>
                  <br>
              </font>
              ]]>
          </bottom>
      </javadoc>
  </target>

  <!-- build all binaries and the libjitsi.jar -->
  <target name="dist" depends="make">
      <mkdir dir="${dist}/windows"/>
      <mkdir dir="${dist}/macosx"/>
      <mkdir dir="${dist}/linux"/>

      <zip destfile="${dist}/windows/libjitsi${build.label}-x86.zip">
          <zipfileset file="libjitsi.jar" />
          <zipfileset dir="lib" includes="*.jar" prefix="lib"/>
          <zipfileset dir="lib/native/windows" includes="*.dll"
                      prefix="lib/native/windows"/>
      </zip>
      <zip destfile="${dist}/windows/libjitsi${build.label}-x64.zip">
          <zipfileset file="libjitsi.jar" />
          <zipfileset dir="lib" includes="*.jar" prefix="lib"/>
          <zipfileset dir="lib/native/windows-64" includes="*.dll"
                      prefix="lib/native/windows-64"/>
      </zip>
      <zip destfile="${dist}/macosx/libjitsi${build.label}.zip">
          <zipfileset file="libjitsi.jar" />
          <zipfileset dir="lib" includes="*.jar" prefix="lib"/>
          <zipfileset dir="lib/native/mac" includes="*.jnilib"
                      prefix="lib/native/mac"/>
      </zip>
      <zip destfile="${dist}/linux/libjitsi${build.label}-i386.zip">
          <zipfileset file="libjitsi.jar" />
          <zipfileset dir="lib" includes="*.jar" prefix="lib"/>
          <zipfileset dir="lib/native/linux" includes="*.so"
                      prefix="lib/native/linux"/>
      </zip>
      <zip destfile="${dist}/linux/libjitsi${build.label}-amd64.zip">
          <zipfileset file="libjitsi.jar" />
          <zipfileset dir="lib" includes="*.jar" prefix="lib"/>
          <zipfileset dir="lib/native/linux-64" includes="*.so"
                      prefix="lib/native/linux-64"/>
      </zip>
  </target>

</project>
<project name="libjitsi-native" default="help-native">
  <import file="../../build.xml"/>

  <!-- additionnal property -->
  <property name="obj" value="${src}/native/native_obj" />

  <!-- load cpptasks jar to have <cc /> tag -->
  <taskdef resource="cpptasks.tasks">
    <!-- load cpptasks jar -->
    <classpath>
      <pathelement location="lib/installer-exclude/cpptasks.jar"/>
    </classpath>
  </taskdef>

  <!-- windows specific properties -->
  <condition property="is.running.windows" value="${os.name}">
      <os family="windows"/>
  </condition>
  <!-- linux specific properties -->
  <condition property="is.running.linux" value="${os.name}">
      <equals arg1="${os.name}" arg2="linux" casesensitive="false" trim="true"/>
  </condition>
  <!-- solaris specific properties -->
  <condition property="is.running.solaris" value="${os.name}">
      <equals arg1="${os.name}" arg2="solaris" casesensitive="false" trim="true"/>
  </condition>

  <condition property="is.running.solaris" value="${os.name}">
      <equals arg1="${os.name}" arg2="SunOS" casesensitive="false" trim="true"/>
  </condition>
  <!-- mac specific properties -->
  <condition property="is.running.macos" value="${os.name}">
      <os family="mac"/>
  </condition>
  <!-- FreeBSD specific properties -->
  <condition property="is.running.freebsd" value="${os.name}">
      <equals arg1="${os.name}" arg2="freebsd" casesensitive="false" trim="true"/>
  </condition>

  <condition property="arch" value="32">
    <or>
      <os arch="x86" />
      <os arch="i386" />
      <os arch="i486" />
      <os arch="i586" />
      <os arch="i686" />
    </or>
  </condition>
  <condition property="arch" value="64">
    <or>
      <os arch="amd64" />
      <os arch="x86_64" />
    </or>
  </condition>
  <condition property="is.running.windows_32" value="y">
    <and>
      <isset property="is.running.windows"/>
      <equals arg1="${arch}" arg2="32" />
    </and>
  </condition>
  <condition property="is.running.windows_64" value="y">
    <and>
      <isset property="is.running.windows"/>
      <equals arg1="${arch}" arg2="64" />
    </and>
  </condition>

  <!--
    Cross compilation. It is mainly used on Linux to cross-compile 32-bit
    binaries on a 64-bit host. It is also used to compile ffmpeg on Mac OS X for
    each architecture before creating an universal binary with the lipo tool.
  -->
  <condition property="cross_32" value="y" >
    <equals arg1="${arch}" arg2="32" />
  </condition>

  <condition property="cross_64" value="y" >
    <equals arg1="${arch}" arg2="64" />
  </condition>

  <!-- Mac OS X only -->
  <condition property="cross_ppc" value="y" >
    <equals arg1="${arch}" arg2="ppc" />
  </condition>

  <!-- initialize destination directory -->
  <condition property="native_install_dir" value="${native.libs}/windows">
    <and>
      <isset property="is.running.windows"/>
      <equals arg1="${arch}" arg2="32" />
    </and>
  </condition>

  <condition property="native_install_dir" value="${native.libs}/windows-64">
    <and>
      <isset property="is.running.windows"/>
      <equals arg1="${arch}" arg2="64" />
    </and>
  </condition>

  <condition property="native_install_dir" value="${native.libs}/linux">
    <and>
      <isset property="is.running.linux"/>
      <equals arg1="${arch}" arg2="32" />
    </and>
  </condition>

  <condition property="native_install_dir" value="${native.libs}/linux-64">
    <and>
      <isset property="is.running.linux"/>
      <equals arg1="${arch}" arg2="64" />
    </and>
  </condition>

  <condition property="native_install_dir" value="${native.libs}/mac">
    <isset property="is.running.macos"/>
  </condition>

  <!-- The path to the dpkg-buildpackage tool -->
  <property name="dpkg-buildpackage" value="/usr/bin/dpkg-buildpackage"/>
  <!-- The path to the dh_testdir tool -->
  <property name="dh_testdir" value="/usr/bin/dh_testdir"/>
  <condition property="is.running.debian">
    <and>
        <isset property="is.running.linux"/>
        <available file="${dpkg-buildpackage}"/>
        <available file="${dh_testdir}"/>
    </and>
  </condition>

  <!--
  <echo message="ffmpeg library: ${ffmpeg}" />
  <echo message="x264 library: ${x264}" />
  <echo message="lame library: ${lame}" />
  <echo message="portaudio library: ${portaudio}" />
  <echo message="speex library: ${speex}" />
  <echo message="Install directory ${native_install_dir}" />
  <echo message="arch: ${arch}" />
  -->

  <target name="init-native" description="Initialize native stuff">
    <mkdir dir="${obj}" />
  </target>

  <!-- compile jnscreencapture library -->
  <target name="screencapture" description="Build screencapture shared library"
    depends="init-native">
    <cc outtype="shared" name="gcc" outfile="${native_install_dir}/jnscreencapture" objdir="${obj}">
      <!-- common compiler flags -->
      <compilerarg value="-std=c99" />
      <compilerarg value="-D_XOPEN_SOURCE=600" />
      <compilerarg value="-Wall" />
      <compilerarg value="-Wextra" />
      <compilerarg value="-O3" />

      <!-- Linux specific flags -->
      <compilerarg value="-m32" if="cross_32" unless="is.running.macos" />
      <compilerarg value="-m64" if="cross_64" unless="is.running.macos" />
      <compilerarg value="-I${system.JAVA_HOME}/include" if="is.running.linux" />
      <compilerarg value="-I${system.JAVA_HOME}/include/linux" if="is.running.linux" />

      <linkerarg value="-m32" if="cross_32" unless="is.running.macos" />
      <linkerarg value="-m64" if="cross_64" unless="is.running.macos" />
      <linkerarg value="-lX11" location="end" if="is.running.linux" />

      <!-- Mac OS X specific flags -->
      <compilerarg value="-mmacosx-version-min=10.5" if="is.running.macos"/>
      <compilerarg value="-arch" if="is.running.macos" />
      <compilerarg value="x86_64" if="is.running.macos" />
      <compilerarg value="-arch" if="is.running.macos" />
      <compilerarg value="i386" if="is.running.macos" />
      <compilerarg value="-arch" if="is.running.macos" />
      <compilerarg value="ppc" if="is.running.macos" />
      <compilerarg value="-I/System/Library/Frameworks/ApplicationServices.framework/Headers" if="is.running.macos" />
      <compilerarg value="-I/System/Library/Frameworks/JavaVM.framework/Headers" if="is.running.macos" />

      <linkerarg value="-o" location="end" if="is.running.macos" />
      <linkerarg value="libjnscreencapture.jnilib" location="end" if="is.running.macos" />
      <linkerarg value="-arch" if="is.running.macos" />
      <linkerarg value="x86_64" if="is.running.macos" />
      <linkerarg value="-arch" if="is.running.macos" />
      <linkerarg value="i386" if="is.running.macos" />
      <linkerarg value="-arch" if="is.running.macos" />
      <linkerarg value="ppc" if="is.running.macos" />
      <linkerarg value="-framework" if="is.running.macos" />
      <linkerarg value="ApplicationServices" if="is.running.macos" />

      <!-- Windows specific flags -->
      <compilerarg value="-I${system.JAVA_HOME}/include" if="is.running.windows" />
      <compilerarg value="-I${system.JAVA_HOME}/include/win32" if="is.running.windows" />

      <linkerarg value="-lgdi32" location="end" if="is.running.windows" />
      <linkerarg value="-ojnscreencapture.dll" if="is.running.windows" />
      <linkerarg value="-Wl,--kill-at" if="is.running.windows" />

      <fileset dir="${src}/native/screencapture" includes="*.c"/>
    </cc>
  </target>

  <!-- compile jnawtrenderer library -->
  <target name="jawtrenderer" description="Build jnawtrenderer shared library" depends="init-native">
    <cc outtype="shared" name="gcc" outfile="${native_install_dir}/jnawtrenderer" objdir="${obj}">

      <!-- common compiler flags -->
      <compilerarg value="-D_JNI_IMPLEMENTATION_" />
      <compilerarg value="-m32" if="cross_32" unless="is.running.macos" />
      <compilerarg value="-m64" if="cross_64" unless="is.running.macos" />
      <compilerarg value="-O2" />
      <compilerarg value="-std=c99" />
      <compilerarg value="-Wall" />

      <compilerarg value="-I${system.JAVA_HOME}/include" unless="is.running.macos" />

      <linkerarg value="-m32" if="cross_32" unless="is.running.macos" />
      <linkerarg value="-m64" if="cross_64" unless="is.running.macos" />
      <linkerarg value="-ljawt" location="end" />

      <!-- Linux-specific flags -->
      <compilerarg value="-I${system.JAVA_HOME}/include/linux" if="is.running.linux" />
      <!-- some debian specific -->
      <compilerarg value="-D_FORTIFY_SOURCE=2" if="is.running.debian"/>
      <compilerarg value="-g" if="is.running.debian"/>
      <compilerarg value="-fstack-protector" if="is.running.debian"/>
      <compilerarg value="--param=ssp-buffer-size=4" if="is.running.debian"/>
      <compilerarg value="-Werror=format-security" if="is.running.debian"/>
      <compilerarg value="-Wformat" if="is.running.debian"/>

      <linkerarg value="-L${system.JAVA_HOME}/jre/lib/i386" if="is.running.linux" />
      <linkerarg value="-L${system.JAVA_HOME}/jre/lib/amd64" if="is.running.linux" />
      <linkerarg value="-Wl,-z,relro" if="is.running.debian"/>
      <linkerarg value="-lXv" location="end" if="is.running.linux" />
      <linkerarg value="-lX11" location="end" if="is.running.linux" />

      <fileset dir="${src}/native/jawtrenderer" includes="org*.c JAWTRenderer_Linux.c" if="is.running.linux"/>

      <!-- Mac OS X-specific flags -->
      <compilerarg value="-mmacosx-version-min=10.5" if="is.running.macos"/>
      <compilerarg value="-arch" if="is.running.macos" />
      <compilerarg value="i386" if="is.running.macos" />
      <compilerarg value="-arch" if="is.running.macos" />
      <compilerarg value="x86_64" if="is.running.macos" />
      <compilerarg value="-I/System/Library/Frameworks/JavaVM.framework/Headers" if="is.running.macos" />

      <linkerarg value="-o" location="end" if="is.running.macos" />
      <linkerarg value="libjnawtrenderer.jnilib" location="end" if="is.running.macos" />
      <linkerarg value="-dynamiclib" if="is.running.macos" />
      <linkerarg value="-arch" if="is.running.macos" />
      <linkerarg value="i386" if="is.running.macos" />
      <linkerarg value="-arch" if="is.running.macos" />
      <linkerarg value="x86_64" if="is.running.macos" />
      <linkerarg value="-framework" if="is.running.macos" />
      <linkerarg value="OpenGL" if="is.running.macos" />
      <linkerarg value="-framework" if="is.running.macos" />
      <linkerarg value="Foundation" if="is.running.macos" />
      <linkerarg value="-framework" if="is.running.macos" />
      <linkerarg value="AppKit" if="is.running.macos" />
      <linkerarg value="-framework" if="is.running.macos" />
      <linkerarg value="QuartzCore" if="is.running.macos" />
      <linkerarg value="-L/System/Library/Frameworks/JavaVM.framework/Libraries/" if="is.running.macos" />

      <fileset dir="${src}/native/jawtrenderer" includes="org*.c JAWTRenderer_MacOSX.m" if="is.running.macos" />

      <!-- Windows-specific flags -->
      <compilerarg value="-D_WIN32_WINNT=0x0502" if="is.running.windows" />
      <compilerarg value="-DWINVER=0x0502" if="is.running.windows" />
      <compilerarg value="-I${system.JAVA_HOME}/include/win32" if="is.running.windows" />

      <linkerarg value="-ojnawtrenderer.dll" if="is.running.windows" />
      <linkerarg value="-Wl,--kill-at" if="is.running.windows" />
      <linkerarg value="-L${system.JAVA_HOME}/lib" if="is.running.windows_32" />
      <linkerarg value="-L${system.JAVA_HOME}/jre/bin" if="is.running.windows_64" />
      <linkerarg value="-ld3d9" location="end" if="is.running.windows" />

      <fileset dir="${src}/native/jawtrenderer" includes="org*.c JAWTRenderer_Windows.c" if="is.running.windows"/>
    </cc>
  </target>

  <!-- compile ffmpeg library -->
  <target name="ffmpeg" description="Build ffmpeg shared library" depends="init-native">

    <fail message="ffmpeg repository not set!" unless="ffmpeg" />
    <fail message="x264 repository not set!" unless="x264" />
    <fail message="lame repository not set!" unless="lame" />

    <cc outtype="shared" name="gcc" outfile="${native_install_dir}/jnffmpeg" objdir="${obj}">
      <!-- common compiler flags -->
      <compilerarg value="-D_JNI_IMPLEMENTATION_" />
      <compilerarg value="-D_XOPEN_SOURCE=600" />
      <compilerarg value="-fPIC" />
      <compilerarg value="-I${ffmpeg}" />
      <compilerarg value="-m${arch}" />
      <compilerarg value="-O2" />
      <compilerarg value="-std=c99" />
      <compilerarg value="-Wall" />
      <compilerarg value="-D_JITSI_LIBAV_" if="LIBAV"/>

      <linkerarg value="-L${ffmpeg}/libavcodec" />
      <linkerarg value="-L${ffmpeg}/libavfilter" />
      <linkerarg value="-L${ffmpeg}/libavformat" />
      <linkerarg value="-L${ffmpeg}/libavutil" />
      <linkerarg value="-L${ffmpeg}/libswscale" />
      <!--
        Depending on the way that lame is built, libmp3lame.a may be in
        libmp3lame/ or libmp3lame/.libs/.
      -->
      <linkerarg value="-L${lame}/libmp3lame" />
      <linkerarg value="-L${lame}/libmp3lame/.libs" />
      <linkerarg value="-L${x264}" />
      <linkerarg value="-m${arch}" />
      <linkerarg value="-Wl,-z,relro" if="is.running.debian"/>
      <!--
        Static libraries MUST be at the end otherwise they will not be added to
        the shared library.
      -->
      <linkerarg value="-lavformat" location="end" />
      <linkerarg value="-lavcodec" location="end" />
      <linkerarg value="-lavfilter" location="end" />
      <linkerarg value="-lavutil" location="end" />
      <linkerarg value="-lswscale" location="end" />
      <linkerarg value="-lmp3lame" location="end" />
      <linkerarg value="-lx264" location="end" />

      <!-- Linux specific flags -->
      <compilerarg value="-I${system.JAVA_HOME}/include" if="is.running.linux" />
      <compilerarg value="-I${system.JAVA_HOME}/include/linux" if="is.running.linux" />

      <linkerarg value="-Wl,-Bsymbolic" if="is.running.linux" />

      <!-- Mac OS X specific flags -->
      <compilerarg value="-mmacosx-version-min=10.4" if="is.running.macos"/>
      <compilerarg value="-I/System/Library/Frameworks/JavaVM.framework/Headers" if="is.running.macos" />

      <!-- ffmpeg/x264 libraries cannot be built as universal binaries
           so you have to setup and compile ffmpeg/x264 for each architecture separately.
           Run this ant script with:
           -Darch=32 (rename libjnffmpeg.dyld to libjnffmpeg.dyld.32)
           -Darch=64 (rename libjnffmpeg.dyld to libjnffmpeg.dyld.64)
           -Darch=ppc (rename libjnffmpeg.dyld to libjnffmpeg.dyld.ppc)

           Finally create the universal binary with:
           lipo -create libjnffmpeg.dyld.32 libjnffmpeg.dyld.64 libjnffmpeg.dyld.ppc -output libjnffmpeg.jnilib
      -->
      <linkerarg value="-o" location="end" if="is.running.macos" />
      <linkerarg value="libjnffmpeg.jnilib" location="end" if="is.running.macos" />
      <linkerarg value="-dynamiclib" if="is.running.macos" />
      <linkerarg value="-Wl,-read_only_relocs,suppress" if="is.running.macos" />

      <!-- Windows specific flags -->
      <compilerarg value="-D_WIN32_WINNT=0x0502" if="is.running.windows" />
      <compilerarg value="-DWINVER=0x0502" if="is.running.windows" />
      <compilerarg value="-I${system.JAVA_HOME}/include" if="is.running.windows" />
      <compilerarg value="-I${system.JAVA_HOME}/include/win32" if="is.running.windows" />

      <linkerarg value="-ojnffmpeg.dll" if="is.running.windows" />
      <linkerarg value="-Wl,--kill-at" if="is.running.windows" />

      <fileset dir="${src}/native/ffmpeg" includes="*.c"/>
    </cc>

    <delete dir="${obj}" failonerror="false" />
    <delete file="${native_install_dir}/history.xml" failonerror="false" />
  </target>

  <!-- compile jnwasapi library -->
  <target
      depends="init-native"
      description="Build jnwasapi shared library for Windows Vista, 7 and 8"
      if="is.running.windows"
      name="wasapi">
    <cc
        name="gcc"
        objdir="${obj}"
        outfile="${native_install_dir}/jnwasapi"
        outtype="shared">
      <compilerarg value="-DCOBJMACROS" />
      <compilerarg value="-D_JNI_IMPLEMENTATION_" />
      <compilerarg value="-D_WIN32_WINNT=0x0600" />
      <compilerarg value="-DWINVER=0x0600" />
      <compilerarg value="-m32" if="cross_32" />
      <compilerarg value="-m64" if="cross_64" />
      <compilerarg value="-I${system.JAVA_HOME}/include" />
      <compilerarg value="-I${system.JAVA_HOME}/include/win32" />
      <compilerarg value="-O2" />
      <compilerarg value="-std=c99" />
      <compilerarg value="-Wall" />

      <linkerarg value="-lole32" location="end" />
      <linkerarg value="-m32" if="cross_32" />
      <linkerarg value="-m64" if="cross_64" />
      <linkerarg value="-ojnwasapi.dll" />
      <linkerarg value="-Wl,--kill-at" />

      <fileset dir="${src}/native/windows/wasapi" includes="*.c"/>
    </cc>
  </target>

  <!-- compile jnportaudio library -->
  <target name="portaudio" description="Build jnportaudio shared library" depends="init-native">

    <fail message="portaudio repository not set!" unless="portaudio" />

    <condition property="is.speex.set" value="true">
        <and>
            <isset property="speex"/>
            <not>
                <isset property="speex.dynamic"/>
            </not>
        </and>
    </condition>
    <condition property="is.speex.set" value="true">
        <and>
            <isset property="speex.dynamic"/>
            <not>
                <isset property="speex"/>
            </not>
        </and>
    </condition>

    <condition property="is.speex.dynamic.set" value="true">
        <and>
            <isset property="speex.dynamic"/>
            <isset property="is.running.linux"/>
        </and>
    </condition>

    <fail message="speex repository not set!" unless="is.speex.set" />

    <cc outtype="shared" name="gcc" outfile="${native_install_dir}/jnportaudio" objdir="${obj}">
      <!-- Common flags -->
      <compilerarg value="-m32" if="cross_32" unless="is.running.macos" />
      <compilerarg value="-m64" if="cross_64" unless="is.running.macos" />
      <compilerarg value="-D_JNI_IMPLEMENTATION_" />
      <compilerarg value="-fPIC" />
      <compilerarg value="-I${portaudio}/include" />
      <compilerarg value="-I${speex}/include" />
      <compilerarg value="-I${system.JAVA_HOME}/include" unless="is.running.macos" />
      <compilerarg value="-O2" />
      <compilerarg value="-std=c99" />
      <compilerarg value="-Wall" />

      <linkerarg value="-m32" if="cross_32" unless="is.running.macos" />
      <linkerarg value="-m64" if="cross_64" unless="is.running.macos" />
      <linkerarg value="-L${portaudio}/lib/.libs" />
      <linkerarg value="-L${speex}/libspeex/.libs" />

      <!-- Linux-specific flags -->
      <compilerarg value="-I${system.JAVA_HOME}/include/linux" if="is.running.linux" />
      <compilerarg value="-D_FORTIFY_SOURCE=2" if="is.running.debian"/>

      <linkerarg value="-Wl,-z,relro" if="is.running.debian"/>
      <!-- Static libraries MUST be at the end; otherwise, they will not be
           added to shared library.
      -->
      <linkerarg value="-Wl,-Bstatic" location="end" if="is.running.linux" />
      <linkerarg value="-lportaudio" location="end" if="is.running.linux" />
      <linkerarg value="-lspeexdsp" location="end" if="is.running.linux" unless="speex.dynamic"/>
      <linkerarg value="-Wl,-Bdynamic" location="end" if="is.running.linux" />
      <linkerarg value="-lspeexdsp" location="end" if="is.speex.dynamic.set"/>
      <linkerarg value="-lrt" location="end" if="is.running.linux" />
      <linkerarg value="-lasound" location="end" if="is.running.linux" />
      <linkerarg value="-lm" location="end" if="is.running.linux" />
      <linkerarg value="-lpthread" location="end" if="is.running.linux" />

      <!-- OS X-specific flags -->
      <compilerarg value="-arch"  if="is.running.macos" />
      <compilerarg value="i386" if="is.running.macos" />
      <compilerarg value="-arch" if="is.running.macos" />
      <compilerarg value="x86_64" if="is.running.macos" />
      <compilerarg value="-mmacosx-version-min=10.4" if="is.running.macos"/>
      <compilerarg value="-I/System/Library/Frameworks/JavaVM.framework/Headers" if="is.running.macos" />

      <linkerarg value="-arch" if="is.running.macos" />
      <linkerarg value="i386" if="is.running.macos" />
      <linkerarg value="-arch" if="is.running.macos" />
      <linkerarg value="x86_64" if="is.running.macos" />
      <linkerarg value="-dynamiclib" if="is.running.macos" />
      <linkerarg value="-o" location="end" if="is.running.macos" />
      <linkerarg value="libjnportaudio.jnilib" location="end" if="is.running.macos" />
      <linkerarg value="-framework" location="end" if="is.running.macos" />
      <linkerarg value="AudioToolbox" location="end" if="is.running.macos" />
      <linkerarg value="-framework" location="end" if="is.running.macos" />
      <linkerarg value="AudioUnit" location="end" if="is.running.macos" />
      <linkerarg value="-framework" location="end" if="is.running.macos" />
      <linkerarg value="CoreAudio" location="end" if="is.running.macos" />
      <linkerarg value="-framework" location="end" if="is.running.macos" />
      <linkerarg value="Carbon" location="end" if="is.running.macos" />
      <linkerarg value="-lportaudio" location="end" if="is.running.macos" />
      <linkerarg value="-lspeexdsp" location="end" if="is.running.macos" />
      <linkerarg value="-dynamic" location="end" if="is.running.macos" />
      <linkerarg value="-lpthread" location="end" if="is.running.macos" />

      <!-- Windows-specific flags -->
      <compilerarg value="-D_WIN32_WINNT=0x0502" if="is.running.windows" />
      <compilerarg value="-DWINVER=0x0502" if="is.running.windows" />
      <compilerarg value="-I${system.JAVA_HOME}/include/win32" if="is.running.windows" />

      <linkerarg value="-ojnportaudio.dll" if="is.running.windows" />
      <linkerarg value="-Wl,--kill-at" if="is.running.windows" />
      <linkerarg value="-Wl,-Bstatic" location="end" if="is.running.windows" />
      <linkerarg value="-lportaudio" location="end" if="is.running.windows" />
      <linkerarg value="-lspeexdsp" location="end" if="is.running.windows" />
      <linkerarg value="-lwinmm" location="end" if="is.running.windows" />
      <linkerarg value="-lsetupapi" location="end" if="is.running.windows" />
      <linkerarg value="-ldsound" location="end" if="is.running.windows" />
      <linkerarg value="-lm" location="end" if="is.running.windows" />
      <linkerarg value="-lstdc++" location="end" if="is.running.windows" />
      <linkerarg value="-lole32" location="end" if="is.running.windows" />
      <linkerarg value="-luuid" location="end" if="is.running.windows" />

      <fileset dir="${src}/native/portaudio" includes="*.c"/>
    </cc>
  </target>

  <!-- compile jspeex library -->
  <target name="speex" description="Build jspeex shared library" depends="init-native">

    <fail message="speex repository not set!" unless="speex" />

    <cc outtype="shared" name="gcc" outfile="${native_install_dir}/jspeex" objdir="${obj}">
      <!-- common compiler flags -->
      <compilerarg value="-std=c99" />
      <compilerarg value="-Wall" />
      <compilerarg value="-O2" />
      <compilerarg value="-I${speex}/include" />
      <compilerarg value="-D_JNI_IMPLEMENTATION_" />

      <linkerarg value="-L${speex}/libspeex/.libs" />

      <!-- Linux specific flags -->
      <compilerarg value="-m32" if="cross_32" unless="is.running.macos" />
      <compilerarg value="-m64" if="cross_64" unless="is.running.macos" />
      <compilerarg value="-I${system.JAVA_HOME}/include" if="is.running.linux" />
      <compilerarg value="-I${system.JAVA_HOME}/include/linux" if="is.running.linux" />

      <linkerarg value="-m32" if="cross_32" unless="is.running.macos" />
      <linkerarg value="-m64" if="cross_64" unless="is.running.macos" />

      <!-- static libraries MUST be at the end otherwise
      they will not be added to shared library
      -->
      <linkerarg value="-Wl,-Bstatic" location="end" if="is.running.linux" />
      <linkerarg value="-lspeex" location="end" if="is.running.linux" />
      <linkerarg value="-lspeexdsp" location="end" if="is.running.linux" />
      <linkerarg value="-Wl,-Bdynamic" location="end" if="is.running.linux" />
      <linkerarg value="-lm" location="end" if="is.running.linux" />

      <!-- Mac OS X specific flags -->
      <compilerarg value="-mmacosx-version-min=10.5" if="is.running.macos"/>
      <compilerarg value="-arch"  if="is.running.macos" />
      <compilerarg value="x86_64" if="is.running.macos" />
      <compilerarg value="-arch" if="is.running.macos" />
      <compilerarg value="i386" if="is.running.macos" />
      <compilerarg value="-I/System/Library/Frameworks/JavaVM.framework/Headers" if="is.running.macos" />

      <linkerarg value="-o" location="end" if="is.running.macos" />
      <linkerarg value="libjspeex.jnilib" location="end" if="is.running.macos" />
      <linkerarg value="-dynamiclib" if="is.running.macos" />
      <linkerarg value="-arch" if="is.running.macos" />
      <linkerarg value="x86_64" if="is.running.macos" />
      <linkerarg value="-arch" if="is.running.macos" />
      <linkerarg value="i386" if="is.running.macos" />
      <linkerarg value="-lspeex" location="end" if="is.running.macos" />
      <linkerarg value="-lspeexdsp" location="end" if="is.running.macos" />

      <!-- Windows specific flags -->
      <compilerarg value="-I${system.JAVA_HOME}/include" if="is.running.windows" />
      <compilerarg value="-I${system.JAVA_HOME}/include/win32" if="is.running.windows" />

      <linkerarg value="-ojspeex.dll" if="is.running.windows" />
      <linkerarg value="-Wl,--kill-at" if="is.running.windows" />
      <linkerarg value="-Wl,-Bstatic" location="end" if="is.running.windows" />
      <linkerarg value="-lspeex" location="end" if="is.running.windows" />
      <linkerarg value="-lspeexdsp" location="end" if="is.running.windows" />
      <linkerarg value="-Wl,-Bdynamic" location="end" if="is.running.windows" />
      <linkerarg value="-lm" location="end" if="is.running.windows" />

      <fileset dir="${src}/native/speex" includes="*.c"/>
    </cc>
  </target>

  <!-- compile jng722 library -->
  <target name="g722" description="Build jng722 shared library" depends="init-native">

    <cc outtype="shared" name="gcc" outfile="${native_install_dir}/jng722" objdir="${obj}">
      <!-- common compiler flags -->
      <compilerarg value="-std=c99" />
      <compilerarg value="-Wall" />
      <compilerarg value="-O2" />
      <compilerarg value="-D_JNI_IMPLEMENTATION_" />

      <!-- Linux specific flags -->
      <compilerarg value="-m32" if="cross_32" unless="is.running.macos" />
      <compilerarg value="-m64" if="cross_64" unless="is.running.macos" />
      <compilerarg value="-I${system.JAVA_HOME}/include" if="is.running.linux" />
      <compilerarg value="-I${system.JAVA_HOME}/include/linux" if="is.running.linux" />

      <linkerarg value="-m32" if="cross_32" unless="is.running.macos" />
      <linkerarg value="-m64" if="cross_64" unless="is.running.macos" />

      <!-- Mac OS X specific flags -->
      <compilerarg value="-mmacosx-version-min=10.5" if="is.running.macos"/>
      <compilerarg value="-arch"  if="is.running.macos" />
      <compilerarg value="x86_64" if="is.running.macos" />
      <compilerarg value="-arch" if="is.running.macos" />
      <compilerarg value="i386" if="is.running.macos" />
      <compilerarg value="-arch" if="is.running.macos" />
      <compilerarg value="ppc" if="is.running.macos" />
      <compilerarg value="-I/System/Library/Frameworks/JavaVM.framework/Headers" if="is.running.macos" />

      <linkerarg value="-o" location="end" if="is.running.macos" />
      <linkerarg value="libjng722.jnilib" location="end" if="is.running.macos" />
      <linkerarg value="-dynamiclib" if="is.running.macos" />
      <linkerarg value="-arch" if="is.running.macos" />
      <linkerarg value="x86_64" if="is.running.macos" />
      <linkerarg value="-arch" if="is.running.macos" />
      <linkerarg value="i386" if="is.running.macos" />
      <linkerarg value="-arch" if="is.running.macos" />
      <linkerarg value="ppc" if="is.running.macos" />

      <!-- Windows specific flags -->
      <compilerarg value="-I${system.JAVA_HOME}/include" if="is.running.windows" />
      <compilerarg value="-I${system.JAVA_HOME}/include/win32" if="is.running.windows" />

      <linkerarg value="-ojng722.dll" if="is.running.windows" />
      <linkerarg value="-Wl,--kill-at" if="is.running.windows" />

      <fileset dir="${src}/native/g722" includes="*.c"/>
    </cc>
  </target>

    <!-- compile opus
        linux binaries are linked to the distribution binary (call ant -Dopus=)
        while other os opus is added to shared library, to avoid
        additional binaries
        macosx and windows currently not tested.
    -->
    <target name="opus" description="Build opus shared library" depends="init-native">

        <fail message="opus repository not set!" unless="opus"/>

        <cc outtype="shared" name="gcc"
            objdir="${obj}"
            outfile="${native_install_dir}/jnopus">
            <!-- common compiler flags -->
            <compilerarg value="-shared" />
            <compilerarg value="-Wall" />
            <compilerarg value="-fPIC"/>
            <compilerarg value="-O2" />
            <compilerarg value="-I${opus}/include" unless="is.running.linux"/>
            <compilerarg value="-I/usr/include/opus" if="is.running.linux"/>
            <compilerarg value="-D_JNI_IMPLEMENTATION_" />

            <linkerarg value="-Wl,-z,relro" if="is.running.debian"/>
            <linkerarg value="-L${opus}/.libs" />

            <!-- Linux specific flags -->
            <compilerarg value="-m32" if="cross_32" unless="is.running.macos" />
            <compilerarg value="-m64" if="cross_64" unless="is.running.macos" />
            <compilerarg value="-I${system.JAVA_HOME}/include" if="is.running.linux" />
            <compilerarg value="-I${system.JAVA_HOME}/include/linux" if="is.running.linux" />

            <linkerarg value="-m32" if="cross_32" unless="is.running.macos" />
            <linkerarg value="-m64" if="cross_64" unless="is.running.macos" />

            <!-- static libraries MUST be at the end otherwise
                they will not be added to shared library
            -->
            <!--<linkerarg value="-Wl,-Bstatic" location="end" if="is.running.linux" />-->
            <linkerarg value="-lopus" location="end" if="is.running.linux" />
            <!--<linkerarg value="-Wl,-Bdynamic" location="end" if="is.running.linux" />-->

            <!-- Mac OS X specific flags -->
            <compilerarg value="-mmacosx-version-min=10.5" if="is.running.macos"/>
            <compilerarg value="-arch"  if="is.running.macos" />
            <compilerarg value="x86_64" if="is.running.macos" />
            <compilerarg value="-arch" if="is.running.macos" />
            <compilerarg value="i386" if="is.running.macos" />
            <compilerarg value="-arch" if="is.running.macos" />
            <compilerarg value="ppc" if="is.running.macos" />
            <compilerarg value="-I/System/Library/Frameworks/JavaVM.framework/Headers" if="is.running.macos" />

            <linkerarg value="-o" location="end" if="is.running.macos" />
            <linkerarg value="libjnopus.jnilib" location="end" if="is.running.macos" />
            <linkerarg value="-dynamiclib" if="is.running.macos" />
            <linkerarg value="-arch" if="is.running.macos" />
            <linkerarg value="x86_64" if="is.running.macos" />
            <linkerarg value="-arch" if="is.running.macos" />
            <linkerarg value="i386" if="is.running.macos" />
            <linkerarg value="-arch" if="is.running.macos" />
            <linkerarg value="ppc" if="is.running.macos" />
            <linkerarg value="-lopus" location="end" if="is.running.macos" />

            <!-- Windows specific flags -->
            <compilerarg value="-I${system.JAVA_HOME}/include" if="is.running.windows" />
            <compilerarg value="-I${system.JAVA_HOME}/include/win32" if="is.running.windows" />

            <linkerarg value="-ojnopus.dll" if="is.running.windows" />
            <linkerarg value="-Wl,--no-undefined" if="is.running.windows" />
            <linkerarg value="-Wl,--kill-at" if="is.running.windows" />
            <linkerarg value="-Wl,-Bstatic" location="end" if="is.running.windows" />
            <linkerarg value="-lopus" location="end" if="is.running.windows" />

            <fileset dir="${src}/native/opus" includes="*.c"/>

            <!-- opus libraries cannot be built as universal binaries
               so you have to setup and compile opus for each architecture separately.
               Run this ant script with:
               -Darch=32 (rename libjnopus.jnilib to libjnopus.jnilib-32)
               -Darch=64 (rename libjnopus.jnilib to libjnopus.jnilib-64)

               Finally create the universal binary with:
               lipo -create libjnopus.jnilib-* -output libjnopus.jnilib
               strip libjnopus.jnilib
          -->
        </cc>
    </target>

    <target name="libvpx" description="Build the libvpx shared library" depends="init-native">

        <fail message="libvpx repository not set!" unless="libvpx"/>

        <cc outtype="shared" name="gcc"
            objdir="${obj}"
            outfile="${native_install_dir}/jnvpx">
            <!-- common compiler flags -->
            <compilerarg value="-shared" />
            <compilerarg value="-Wall" />
            <compilerarg value="-fPIC"/>
            <compilerarg value="-O2" />
            <compilerarg value="-I${libvpx}" unless="is.running.linux"/>
            <compilerarg value="-I/usr/include/vpx" if="is.running.linux"/>
            <compilerarg value="-D_JNI_IMPLEMENTATION_" />

            <linkerarg value="-L${libvpx}" />

            <!-- Linux specific flags -->
            <compilerarg value="-m32" if="cross_32" unless="is.running.macos" />
            <compilerarg value="-m64" if="cross_64" unless="is.running.macos" />
            <compilerarg value="-I${system.JAVA_HOME}/include" if="is.running.linux" />
            <compilerarg value="-I${system.JAVA_HOME}/include/linux" if="is.running.linux" />

            <linkerarg value="-m32" if="cross_32" unless="is.running.macos" />
            <linkerarg value="-m64" if="cross_64" unless="is.running.macos" />

            <!-- static libraries MUST be at the end otherwise
                they will not be added to shared library
            -->
            <!--<linkerarg value="-Wl,-Bstatic" location="end" if="is.running.linux" />-->
            <linkerarg value="-lvpx" location="end" if="is.running.linux" />
            <!--<linkerarg value="-Wl,-Bdynamic" location="end" if="is.running.linux" />-->

            <!-- Mac OS X specific flags -->
            <compilerarg value="-mmacosx-version-min=10.5" if="is.running.macos"/>
            <compilerarg value="-arch"  if="is.running.macos" />
            <compilerarg value="x86_64" if="is.running.macos" />
            <compilerarg value="-arch" if="is.running.macos" />
            <compilerarg value="i386" if="is.running.macos" />
            <compilerarg value="-arch" if="is.running.macos" />
            <compilerarg value="ppc" if="is.running.macos" />
            <compilerarg value="-I/System/Library/Frameworks/JavaVM.framework/Headers" if="is.running.macos" />

            <linkerarg value="-o" location="end" if="is.running.macos" />
            <linkerarg value="libjnvpx.jnilib" location="end" if="is.running.macos" />
            <linkerarg value="-dynamiclib" if="is.running.macos" />
            <linkerarg value="-arch" if="is.running.macos" />
            <linkerarg value="x86_64" if="is.running.macos" />
            <linkerarg value="-arch" if="is.running.macos" />
            <linkerarg value="i386" if="is.running.macos" />
            <linkerarg value="-arch" if="is.running.macos" />
            <linkerarg value="ppc" if="is.running.macos" />
            <linkerarg value="-lvpx" location="end" if="is.running.macos" />

            <!-- Windows specific flags -->
            <compilerarg value="-I${system.JAVA_HOME}/include" if="is.running.windows" />
            <compilerarg value="-I${system.JAVA_HOME}/include/win32" if="is.running.windows" />

            <linkerarg value="-ojnvpx.dll" if="is.running.windows" />
            <linkerarg value="-Wl,--no-undefined" if="is.running.windows" />
            <linkerarg value="-Wl,--kill-at" if="is.running.windows" />
            <linkerarg value="-Wl,-Bstatic" location="end" if="is.running.windows" />
            <linkerarg value="-lvpx" location="end" if="is.running.windows" />

            <fileset dir="${src}/native/vpx" includes="*.c"/>
        </cc>
    </target>

  <!-- compile jnvideo4linux2 library -->
  <target name="video4linux2" description="Build jnvideo4linux2 shared library" if="is.running.linux"
    depends="init-native">
    <cc outtype="shared" name="gcc" outfile="${native_install_dir}/jnvideo4linux2" objdir="${obj}">
      <compilerarg value="-std=c99" />
      <compilerarg value="-Wall" />
      <compilerarg value="-O2" />
      <compilerarg value="-I${system.JAVA_HOME}/include" />
      <compilerarg value="-I${system.JAVA_HOME}/include/linux" />
      <compilerarg value="-m32" if="cross_32" />
      <compilerarg value="-m64" if="cross_64" />

      <linkerarg value="-m32" if="cross_32" />
      <linkerarg value="-m64" if="cross_64" />
      <linkerarg value="-Wl,-z,relro" if="is.running.debian"/>

      <fileset dir="${src}/native/linux/video4linux2" includes="*.c"/>
    </cc>
  </target>

  <!-- compile jnwincoreaudio library for Windows Vista, 7 and 8 (32-bit/64-bit)
    -->
  <target
    name="win-coreaudio"
    description="Build jnwincoreaudio shared library for Windows Vista, 7 and 8"
    if="is.running.windows"
    depends="init-native">
    <cc name="gcc"
        objdir="${obj}"
        outfile="${native_install_dir}/jnwincoreaudio"
        outtype="shared">

      <compilerarg value="-D_JNI_IMPLEMENTATION_" />
      <compilerarg value="-D_WIN32_WINNT=0x0600" />
      <compilerarg value="-DWINVER=0x0600" />
      <compilerarg value="-I${system.JAVA_HOME}/include" />
      <compilerarg value="-I${system.JAVA_HOME}/include/win32" />
      <compilerarg value="-O2" />
      <compilerarg value="-Wall" />
      <compilerarg value="-xc++" />
      <compilerarg value="-m32" if="cross_32" />
      <compilerarg value="-m64" if="cross_64" />

      <linkerarg value="-ojnwincoreaudio.dll" />
      <linkerarg value="-Wl,--kill-at" />
      <libset libs="ole32" />
      <linkerarg value="-m32" if="cross_32" />
      <linkerarg value="-m64" if="cross_64" />

      <fileset dir="${src}/native/windows/coreaudio/lib" includes="*.c" />
      <fileset dir="${src}/native/windows/coreaudio/jni" includes="*.c" />
    </cc>

    <delete dir="${obj}" failonerror="false" />
    <delete file="${native_install_dir}/history.xml" failonerror="false" />
  </target>

  <!-- compile jnmaccoreaudio library for Mac OS X (32-bit/64-bit) -->
  <target name="mac-coreaudio" description="Build jnmaccoreaudio shared library for Mac OS X" if="is.running.macos"
    depends="init-native">
    <cc outtype="shared" name="gcc" outfile="${native_install_dir}/jnmaccoreaudio" objdir="${obj}">
      <compilerarg value="-Wall" />
      <compilerarg value="-O2" />
      <compilerarg value="-arch" />
      <compilerarg value="x86_64" />
      <compilerarg value="-arch" />
      <compilerarg value="i386" />
      <compilerarg value="-I/System/Library/Frameworks/JavaVM.framework/Headers"
      />

      <linkerarg value="-o" location="end" />
      <linkerarg value="libjnmaccoreaudio.jnilib" location="end" />
      <linkerarg value="-arch" />
      <linkerarg value="x86_64" />
      <linkerarg value="-arch" />
      <linkerarg value="i386" />
      <linkerarg value="-framework" />
      <linkerarg value="Foundation" />
      <linkerarg value="-framework" />
      <linkerarg value="Coreaudio" />

      <fileset dir="${src}/native/macosx/coreaudio/lib" includes="*.c"/>
      <fileset dir="${src}/native/macosx/coreaudio/jni" includes="*.c"/>
    </cc>

    <delete dir="${obj}" failonerror="false" />
    <delete file="${native_install_dir}/history.xml" failonerror="false" />
  </target>

  <!-- compile jnquicktime library for Mac OS X (32-bit/64-bit/ppc) -->
  <target name="quicktime" description="Build jnquicktime shared library for Mac OS X" if="is.running.macos"
    depends="init-native">
    <cc outtype="shared" name="gcc" outfile="${native_install_dir}/jnquicktime" objdir="${obj}">
      <compilerarg value="-Wall" />
      <compilerarg value="-O2" />
      <compilerarg value="-arch" />
      <compilerarg value="x86_64" />
      <compilerarg value="-arch" />
      <compilerarg value="i386" />
      <compilerarg value="-arch" />
      <compilerarg value="ppc" />
      <compilerarg value="-I/System/Library/Frameworks/JavaVM.framework/Headers" />

      <linkerarg value="-o" location="end" />
      <linkerarg value="libjnquicktime.jnilib" location="end" />
      <linkerarg value="-arch" />
      <linkerarg value="x86_64" />
      <linkerarg value="-arch" />
      <linkerarg value="i386" />
      <linkerarg value="-arch" />
      <linkerarg value="ppc" />
      <linkerarg value="-framework" />
      <linkerarg value="Foundation" />
      <linkerarg value="-framework" />
      <linkerarg value="QTKit" />
      <linkerarg value="-framework" />
      <linkerarg value="Quartz" />

      <fileset dir="${src}/native/macosx/quicktime" includes="*.c *.m"/>
    </cc>

    <delete dir="${obj}" failonerror="false" />
    <delete file="${native_install_dir}/history.xml" failonerror="false" />
  </target>

    <!-- compile pulseaudio library
        gcc -D_JNI_IMPLEMENTATION_ -fPIC -I/usr/lib/jvm/java-1.5.0-sun/include
            -I/usr/lib/jvm/java-1.5.0-sun/include/linux -O2 -Wall
            org_jitsi_impl_neomedia_pulseaudio_PA.c `pkg-config - -cflags libpulse`
            -shared -o libjnpulseaudio.so -Wl,- -no-undefined `pkg-config - -libs libpulse`
            -ldl && strip -x libjnpulseaudio.so
    -->
    <target name="pulseaudio"
            description="Build pulseaudio shared library" if="is.running.linux"
            depends="init-native">
        <cc outtype="shared" name="gcc"
            outfile="${native_install_dir}/jnpulseaudio"
            objdir="${obj}">
                <compilerarg value="-D_JNI_IMPLEMENTATION_" />
                <compilerarg value="-fPIC" />
                <compilerarg value="-O2" />
                <compilerarg value="-Wall" />
                <compilerarg value="-I${system.JAVA_HOME}/include" />
                <compilerarg value="-I${system.JAVA_HOME}/include/linux" />
                <compilerarg value="-shared" />
                <compilerarg value="-ldl" />
                <compilerarg value="-D_REENTRANT" />

                <linkerarg value="-Wl,--no-undefined" />
                <linkerarg value="-Wl,-z,relro" if="is.running.debian"/>
                <linkerarg value="-lpulse" />
                <linkerarg value="-ldl" />

                <compilerarg value="-m32" if="cross_32" />
                <compilerarg value="-m64" if="cross_64" />

                <linkerarg value="-m32" if="cross_32" />
                <linkerarg value="-m64" if="cross_64" />

                <fileset dir="${src}/native/linux/pulseaudio" includes="*.c"/>
        </cc>
    </target>

  <!-- Cleanup object file and shared libraries -->
  <target name="clean-native" description="Clean all object file and libraries.">
    <delete failonerror="false" includeemptydirs="true">
        <fileset dir="${obj}" />
        <fileset dir="${src}/native/" includes="*.dll *.so *.dyld *.jnilib *.manifest *.o *.obj *.lib *.exp history.xml" />
        <fileset dir="." includes="**.dll *.so *.dyld *.jnilib *.manifest *.o *.obj *.lib *.exp history.xml" />
    </delete>
  </target>

  <!-- Help, print useful targets -->
  <target name="help-native">
    <echo message="Targets available:" />
    <echo message="'ant screencapture' to compile screencapture shared library" />
    <echo message="'ant jawtrenderer' to compile jawtrenderer shared library" />
    <echo message="'ant ffmpeg' to compile ffmpeg shared library" />
    <echo message="'ant portaudio' to compile jnportaudio shared library" />
    <echo message="'ant speex' to compile jspeex shared library" />
    <echo message="'ant g722' to compile jng722 shared library" />
    <echo message="'ant hid' to compile hid shared library" />
    <echo message="'ant hwaddressretriever' to compile hwaddressretriever shared library" />
    <echo message="'ant video4linux2 (Linux only)' to compile jvideo4linux2 shared library" />
    <echo message="'ant galagonotification (Linux only)' to compile galagonotification shared library" />
    <echo message="'ant localhostretriever (Windows only)' to compile LocalhostRetriever shared library" />
    <echo message="'ant directshow (Windows only)' to compile jdirectshow shared library" />
    <echo message="'ant aegeturleventhandler (Mac OS X only)' to compile AEGetURLEventHandler shared library" />
    <echo message="'ant sparkle (Mac OS X only)' to compile sparkle shared library" />
    <echo message="'ant win-coreaudio (Windows Vista, 7 and 8 only)' to compile jnwincoreaudio shared library (use -Darch=32 or -Darch=64 for cross-compiling)" />
    <echo message="'ant mac-coreaudio (Mac OS X only)' to compile jnmaccoreaudio shared library" />
    <echo message="'ant quicktime (Mac OS X only)' to compile jquicktime shared library" />
    <echo message="" />
    <echo message="Options:" />
    <echo message="-Darch: cross-compile for 32-bit (-Darch=32), 64-bit (-Darch=64) or ppc (-Darch=ppc, Mac OS X only) targets. Windows users have to use gcc >= 4.5." />
    <echo message="-Dx264: path to x264 directory (ffmpeg JNI compilation)." />
    <echo message="-Dlame: path to lame directory (ffmpeg JNI compilation)." />
    <echo message="-Dffmpeg: path to ffmpeg directory (ffmpeg JNI compilation)." />
    <echo message="-Dportaudio path to portaudio directory (jnportaudio JNI compilation)." />
    <echo message="-Dspeex: path to speex directory (jnportaudio/jspeex JNI compilation)." />
    <echo message="" />
    <echo message="Please note that external libraries such as ffmpeg, x264, lame, portaudio and speex have to be compiled" />
    <echo message="(follow READMEs in relevant directory) before trying to compile libffmpeg and libjnportaudio"  />
    <echo message="When compiling libffmpeg you have to tell ant script the directory of ffmpeg and x264 with"  />
    <echo message="-Dffmpeg=/path/to/ffmpeg and -Dx264=/path/to/x264 -Dlame=/path/to/lame"  />
    <echo message="When compiling libjnportaudio you have to tell ant script the directory of portaudio and speex with"  />
    <echo message="-Dportaudio=/path/to/portaudio and -Dspeex=/path/to/speex"  />
  </target>
</project>

<?xml version="1.0"?>

<!-- Smack Build Script ========================================== -->
<!-- Jive Software      ============================================== -->

<!--
    $RCSfile$
    $Revision: 13638 $
    $Date: 2013-05-04 05:15:17 -0700 (Sat, 04 May 2013) $
-->

<project name="Smack" default="all" basedir="..">

    <!-- TASKDEFS -->
    <!-- ======================================================================================= -->
    <!-- ======================================================================================= -->

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="${basedir}/build/ant-contrib.jar"/>
        </classpath>
    </taskdef>

    <!-- PROPERTIES -->
    <!-- ======================================================================================= -->

    <!-- Smack Version -->
    <property name="version.major" value="3" />
    <property name="version.minor" value="3" />
    <property name="version.revision" value="0" />
    <property name="version.extra" value="" />

    <if>
        <equals arg1="${version.extra}" arg2=""/>
        <then>
            <property name="version"
                      value="${version.major}.${version.minor}.${version.revision}"/>
            <property name="version.filename"
                      value="${version.major}_${version.minor}_${version.revision}"/>
        </then>
        <else>
            <property name="version"
                      value="${version.major}.${version.minor}.${version.revision}.${version.extra}"/>
            <property name="version.filename"
                      value="${version.major}_${version.minor}_${version.revision}_${version.extra}"/>
        </else>
    </if>
    <tstamp>
        <format property="builddate" pattern="MM/dd/yyyy"/>
    </tstamp>

    <property file="${basedir}/build/build.properties" />
    <property name="compile.dir" value="${basedir}/target/classes" />
    <property name="compile.test.dir" value="${basedir}/target/classes-test" />
    <property name="jar.dest.dir" value="${basedir}/target" />
    <property name="javadoc.dest.dir" value="${basedir}/target/javadoc" />
    <property name="merge.lib.dir" value="${basedir}/build/merge" />
    <property name="test.dir" value="${basedir}/test" />
    <property name="test-unit.dir" value="${basedir}/test-unit" />
    <property name="resources.dir" value="${basedir}/build/resources" />
    <property name="jingle.extension.merge.lib.dir" value="${basedir}/jingle/extension/build/merge" />
    <property name="jingle.extension.lib.dir" value="${basedir}/jingle/extension/build/lib" />

    <!-- Test props - override these defaults in the properties file or in command line -->
    <property name="test.host" value="localhost" />
    <property name="test.port" value="5222" />
    <property name="test.admin.username" value="admin" />
    <property name="test.admin.password" value="admin" />
    <property name="test.admin.resource" value="Test" />
    <property name="test.smack.debug" value="false" />

    <!-- PATHS, DEPENDIENCIES, PATTERNS -->
    <!-- ======================================================================================= -->
    <!-- ======================================================================================= -->

    <patternset id="test.cases">
        <include name="org/jivesoftware/smack/**/*Test.java" />
        <include name="org/jivesoftware/smackx/**/*Test.java" />
        <exclude name="org/jivesoftware/smack/**/Messenger*Test.java" />
    </patternset>

    <patternset id="messenger.test.cases">
        <include name="org/jivesoftware/smack/**/Messenger*Test.java" />
    </patternset>

    <!-- TARGETS -->
    <!-- ======================================================================================= -->

    <!-- all -->
    <!-- ======================================================================================= -->
    <target name="all" depends="jar" description="Calls 'jar' target by default">
    </target>

    <!-- compile -->
    <!-- ======================================================================================= -->
    <target name="compile" description="Compiles all source to ${compile.dir}.">
        <!-- make target dir -->
        <mkdir dir="${compile.dir}" />
        <javac
            destdir="${compile.dir}"
            includeAntRuntime="no"
            debug="on"
            source="1.6"
            target="1.6"
        >
            <src path="${basedir}/source" />
            <classpath>
                <fileset dir="${merge.lib.dir}">
                    <include name="*.jar"/>
                </fileset>
            </classpath>
        </javac>
        <mkdir dir="${compile.dir}/jingle/extension" />
        <javac
            destdir="${compile.dir}/jingle/extension"
            includeAntRuntime="no"
            debug="on"
            source="1.6"
            target="1.6"
        >
            <src path="${basedir}/jingle/extension/source" />
            <classpath>
                <fileset dir="${merge.lib.dir}">
                    <include name="*.jar"/>
                </fileset>
                <fileset dir="${jingle.extension.lib.dir}">
                    <include name="*.jar"/>
                </fileset>
                                <fileset dir="${jingle.extension.merge.lib.dir}">
                    <include name="*.jar"/>
                </fileset>
                                <pathelement path="${compile.dir}"/>
            </classpath>
        </javac>
    </target>

    <!-- compile-test -->
    <!-- ======================================================================================= -->
    <target name="compile-test" description="Compiles all source to ${compile.dir}.">
        <!-- make target dir -->
        <mkdir dir="${compile.test.dir}" />
        <javac
            destdir="${compile.test.dir}"
            includeAntRuntime="no"
            debug="on"
            source="1.6"
            target="1.6"
        >
            <src path="${basedir}/source" />
            <src path="${test.dir}" />
            <src path="${test-unit.dir}" />
            <classpath>
                <fileset dir="${merge.lib.dir}">
                    <include name="*.jar"/>
                </fileset>
                <fileset dir="${basedir}/build">
                    <include name="junit-4.10.jar"/>
                    <include name="mockito-all-1.8.2.jar"/>
                    <include name="powermock-mockito-1.3.5-full.jar"/>
                </fileset>
                <fileset dir ="${basedir}/build/build">
                    <include name="xmlunit.jar"/>
                    <include name="java-xmlbuilder-0.3.jar" />
                </fileset>
                <pathelement location="${compile.dir}" />
            </classpath>
        </javac>
    </target>

    <!-- jar -->
    <!-- ======================================================================================= -->
    <target name="jar" depends="compile" unless="jar.uptodate" description="Produces smack.jar">
        <copy todir="${compile.dir}/META-INF" file="${basedir}/build/resources/META-INF/smack-config.xml" />
        <jar destfile="${jar.dest.dir}/smack.jar"
            basedir="${compile.dir}"
            includes="org/jivesoftware/smack/**/*.class, **/smack-config.xml">
            <zipfileset src="${merge.lib.dir}/xpp.jar"/>
        </jar>
        <taskdef resource="aQute/bnd/ant/taskdef.properties" classpath="${basedir}/build/build/biz.aQute.bnd.jar"/>
        <bndwrap jars="${jar.dest.dir}/smack.jar" output="${jar.dest.dir}/smack.jar" />
        <jar file="${jar.dest.dir}/smack.jar" update="true">
            <manifest>
                <attribute name="Bundle-SymbolicName" value="org.igniterealtime.smack" />
            </manifest>
        </jar>
        <copy todir="${compile.dir}/META-INF" file="${basedir}/build/resources/META-INF/smack.providers" />
        <jar destfile="${jar.dest.dir}/smackx.jar"
            basedir="${compile.dir}"
            includes="org/jivesoftware/smackx/**/*.class, **/*.providers"
            excludes="org/jivesoftware/smackx/debugger/*.class">
            <manifest>
                <attribute name="Class-Path" value="smack.jar" />
            </manifest>
            <zipfileset src="${merge.lib.dir}/jzlib.jar"/>
        </jar>
        <bndwrap jars="${jar.dest.dir}/smackx.jar" output="${jar.dest.dir}/smackx.jar" />
        <jar file="${jar.dest.dir}/smackx.jar" update="true">
            <manifest>
                <attribute name="Bundle-SymbolicName" value="org.igniterealtime.smack-ext" />
            </manifest>
        </jar>
        <copy todir="${compile.dir}/images">
            <fileset dir="${basedir}/build/resources/images">
                <include name="*.png"/>
            </fileset>
        </copy>
        <jar destfile="${jar.dest.dir}/smackx-debug.jar"
            basedir="${compile.dir}"
            includes="org/jivesoftware/smackx/debugger/*.class, **/*.png">
            <manifest>
                <attribute name="Class-Path" value="smack.jar" />
            </manifest>
        </jar>
        <bndwrap jars="${jar.dest.dir}/smackx-debug.jar" output="${jar.dest.dir}/smackx-debug.jar" />
        <jar file="${jar.dest.dir}/smackx-debug.jar" update="true">
            <manifest>
                <attribute name="Bundle-SymbolicName" value="org.igniterealtime.smack-ext-debug" />
            </manifest>
        </jar>
                <jar destfile="${jar.dest.dir}/smackx-jingle.jar"
            basedir="${compile.dir}/jingle/extension"
            includes="org/jivesoftware/smackx/**/*.class">
            <manifest>
                <attribute name="Class-Path" value="smack.jar, smackx.jar" />
            </manifest>
            <zipfileset src="${jingle.extension.merge.lib.dir}/jstun.jar"/>
        </jar>
        <bndwrap jars="${jar.dest.dir}/smackx-jingle.jar" output="${jar.dest.dir}/smackx-jingle.jar" />
        <jar file="${jar.dest.dir}/smackx-jingle.jar" update="true">
            <manifest>
                <attribute name="Bundle-SymbolicName" value="org.igniterealtime.smack-ext-jingle" />
            </manifest>
        </jar>
        <delete file="${compile.dir}/META-INF/smack-config.xml" />
        <delete file="${compile.dir}/META-INF/smack.providers" />
        <delete>
            <fileset dir="${compile.dir}/images">
                <include name="*.png"/>
            </fileset>
        </delete>
    </target>

    <!-- jar -->
    <!-- ======================================================================================= -->
    <target name="jar-test" depends="compile-test" description="Produces jar of test code">
        <jar destfile="${jar.dest.dir}/smack-test.jar"
            basedir="${compile.test.dir}"
            includes="org/jivesoftware/smack/**/*.class"
        />
    </target>

    <target name="jar-test-smackx" depends="compile-test" description="Produces jar of test code">
        <jar destfile="${jar.dest.dir}/smack-test-smackx.jar"
            basedir="${compile.test.dir}"
            includes="org/jivesoftware/smackx/**/*.class 
		      org/jivesoftware/util/**/*.class"
        />
    </target>


    <!-- javadoc -->
    <!-- ======================================================================================= -->
    <target name="javadoc" description="JavaDocs the Smack source code">

        <mkdir dir="${javadoc.dest.dir}" />
        <javadoc
            packagenames="org.jivesoftware.smack.*, org.jivesoftware.smackx.*"
            excludepackagenames="org.jivesoftware.smack.util.collections"
            sourcepath="${basedir}/source"
            destdir="${javadoc.dest.dir}"
            author="true"
            windowtitle="Smack ${version} Documentation"
            overview="${basedir}/source/overview.html"
        >
            <classpath>
                <fileset dir="${merge.lib.dir}">
                    <include name="*.jar"/>
                </fileset>
            </classpath>
            <doctitle><![CDATA[<font face="arial,helvetica">Smack ${version}</font>]]></doctitle>
            <header><![CDATA[<b>Smack</b>]]></header>
            <bottom><![CDATA[<i>Copyright &copy; 2003-2007 Jive Software. </i>]]></bottom>
            <link href="http://java.sun.com/j2se/1.3/docs/api/" />
            <link href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/api/" />
        </javadoc>
    </target>


    <!-- test -->
    <!-- ======================================================================================= -->
    <target name="func-test" depends="compile, jar-test" unless="no.test">
        <antcall target="test.messenger"/>
        <antcall target="test"/>
    </target>


    <!-- test -->
    <!-- ======================================================================================= -->
    <target name="test" depends="compile, jar-test" unless="no.test">

        <echo>


            **** no.test: ${no.test}


        </echo>

        <property name="test.messenger" value="false" />

        <if>
            <not><equals arg1="test.messenger" arg2="true" /></not>
            <then>
                <property name="test.classes" value="test.cases" />
            </then>
        </if>

        <junit printsummary="on"
            fork="true"
            haltonfailure="false"
            failureproperty="tests.failed"
            showoutput="true">

            <sysproperty key="smack.test.host" value="${test.host}" />
            <sysproperty key="smack.test.port" value="${test.port}" />
            <sysproperty key="smack.test.admin.username" value="${test.admin.username}" />
            <sysproperty key="smack.test.admin.password" value="${test.admin.password}" />
            <sysproperty key="smack.test.admin.resource" value="${test.admin.resource}" />
            <sysproperty key="smack.debug" value="${test.smack.debug}" />

            <classpath>
                <fileset dir="${merge.lib.dir}">
                    <include name="*.jar"/>
                </fileset>
                <fileset dir="${basedir}/build">
                    <include name="junit-4.10.jar"/>
                    <include name="mockito-all-1.8.2.jar"/>
                    <include name="powermock-mockito-1.3.5-full.jar"/>
                </fileset>
                <fileset dir ="${basedir}/build/build">
                        <include name="xmlunit.jar"/>
                                <include name="java-xmlbuilder-0.3.jar" />
                </fileset>
                <fileset dir="${jar.dest.dir}">
                    <include name="smack-test.jar"/>
                </fileset>
                <pathelement location="${compile.dir}" />
                <pathelement location="${test.dir}" />
                <pathelement location="${resources.dir}" />
            </classpath>

            <formatter type="brief" usefile="false"/>

            <batchtest>
                <fileset dir="${basedir}/test">
                    <patternset refid="${test.classes}" />
                </fileset>
            </batchtest>
        </junit>

        <fail if="tests.failed" message="** Tests failed, see test log. **" />
    </target>

    <!-- test-unit -->
    <!-- ======================================================================================= -->
    <target name="test-unit" depends="compile, jar-test, jar-test-smackx" unless="no.test">
        <junit printsummary="on"
            fork="true"
            haltonfailure="false"
            failureproperty="tests.failed"
            showoutput="true">

            <classpath>
                <fileset dir="${merge.lib.dir}">
                    <include name="*.jar"/>
                </fileset>
                <fileset dir="${basedir}/build">
                    <include name="junit-4.10.jar"/>
                    <include name="mockito-all-1.8.2.jar"/>
                    <include name="powermock-mockito-1.3.5-full.jar"/>
                </fileset>
                <fileset dir ="${basedir}/build/build">
                    <include name="xmlunit.jar"/>
                    <include name="java-xmlbuilder-0.3.jar" />
                </fileset>
                <fileset dir="${jar.dest.dir}">
                    <include name="smack-test.jar"/>
		    <include name="smack-test-smackx.jar" />
                </fileset>
                <pathelement location="${compile.dir}" />
                <pathelement location="${test-unit.dir}" />
                <pathelement location="${resources.dir}" />
            </classpath>

            <formatter type="brief" usefile="false"/>

            <batchtest>
                <fileset dir="${basedir}/test-unit">
                    <patternset refid="test.cases" />
                </fileset>
            </batchtest>
        </junit>

        <fail if="tests.failed" message="** Tests failed, see test log. **" />
    </target>

    <!-- test -->
    <!-- ======================================================================================= -->
    <target name="test.messenger" depends="compile, jar-test" unless="no.test">
        <antcall target="test" inheritall="true" inheritrefs="true">
            <param name="test.messenger" value="true" />
            <param name="test.classes" value="messenger.test.cases" />
        </antcall>
    </target>


    <!-- release -->
    <!-- ======================================================================================= -->
    <target name="release" description="Builds a release" if="release.exists" depends="release-exists">
        <antcall target="jar">
            <param name="no.test" value="true" />
        </antcall>
        <antcall target="javadoc">
            <param name="no.test" value="true" />
        </antcall>
        <ant antfile="${basedir}/build/release.xml" />
    </target>

        <!-- checkcode -->
        <!-- ======================================================================================= -->
        <target name="checkcode" >
                <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask">
                <classpath>
                    <pathelement location="${basedir}/build/pmd.jar" />
                    <pathelement location="${basedir}/build/asm.jar" />
                    <pathelement location="${basedir}/build/jaxen.jar" />
                </classpath>
                </taskdef>
                <pmd shortFilenames="true">
                        <ruleset>migrating</ruleset>
                        <ruleset>finalizers</ruleset>
                        <formatter type="html" toFile="target/pmd_report.html" toConsole="true" />
                        <fileset dir="source/">
                                <include name="**/*.java" />
                        </fileset>
                </pmd>
        </target>

    <!-- release-exists -->
    <!-- ======================================================================================= -->
    <target name="release-exists" >
        <available file="${basedir}/build/release.xml" property="release.exists"/>
    </target>


    <!-- clean -->
    <!-- ======================================================================================= -->
    <target name="clean" description="Deletes all generated content.">
        <delete dir="${javadoc.dest.dir}" />
        <delete dir="${compile.dir}" />
        <delete dir="${compile.test.dir}" />
        <delete file="${basedir}/smack.jar" />
        <delete file="${basedir}/smackx.jar" />
        <delete file="${basedir}/smackx-debug.jar" />
        <delete file="${basedir}/smack-test.jar" />
        <delete file="${basedir}/smackx-test.jar" />
        <delete file="${basedir}/smackx-jingle.jar" />
        <delete dir="${basedir}/target" />
    </target>

</project>
Not Found<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="jingle" default="all">
  
  
  <property file="jingle.properties"/>
  <!-- Uncomment the following property if no tests compilation is needed -->
  <!-- 
  <property name="skip.tests" value="true"/>
   -->
  
  <!-- Compiler options -->
  
  <property name="compiler.debug" value="on"/>
  <property name="compiler.generate.no.warnings" value="off"/>
  <property name="compiler.args" value=""/>
  <property name="compiler.max.memory" value="128m"/>
  <patternset id="ignored.files">
    <exclude name="**/CVS/**"/>
    <exclude name="**/SCCS/**"/>
    <exclude name="**/RCS/**"/>
    <exclude name="**/rcs/**"/>
    <exclude name="**/.DS_Store/**"/>
    <exclude name="**/.svn/**"/>
    <exclude name="**/vssver.scc/**"/>
    <exclude name="**/vssver2.scc/**"/>
  </patternset>
  <patternset id="compiler.resources">
    <include name="**/?*.properties"/>
    <include name="**/?*.xml"/>
    <include name="**/?*.html"/>
    <include name="**/?*.dtd"/>
    <include name="**/?*.tld"/>
    <include name="**/?*.gif"/>
    <include name="**/?*.png"/>
    <include name="**/?*.jpeg"/>
    <include name="**/?*.jpg"/>
  </patternset>
  
  <!-- JDK definitions -->
  
  <property name="jdk.bin.1.5" value="${jdk.home.1.5}/bin"/>
  <path id="jdk.classpath.1.5">
    <fileset dir="${jdk.home.1.5}">
      <include name="jre/lib/charsets.jar"/>
      <include name="jre/lib/deploy.jar"/>
      <include name="jre/lib/javaws.jar"/>
      <include name="jre/lib/jce.jar"/>
      <include name="jre/lib/jsse.jar"/>
      <include name="jre/lib/plugin.jar"/>
      <include name="jre/lib/rt.jar"/>
      <include name="jre/lib/ext/dnsns.jar"/>
      <include name="jre/lib/ext/localedata.jar"/>
      <include name="jre/lib/ext/sunjce_provider.jar"/>
      <include name="jre/lib/ext/sunpkcs11.jar"/>
    </fileset>
  </path>
  
  <property name="project.jdk.home" value="${jdk.home.1.5}"/>
  <property name="project.jdk.bin" value="${jdk.bin.1.5}"/>
  <property name="project.jdk.classpath" value="jdk.classpath.1.5"/>
  
  
  <!-- Project Libraries -->
  
  <!-- Modules -->
  
  
  <!-- Module JingleExtension -->
  
  <dirname property="module.jingleextension.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.jingleextension" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.jingleextension" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.jingleextension" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.jingleextension" value="${compiler.args}"/>
  
  <property name="jingleextension.output.dir" value="${module.jingleextension.basedir}/../../classes"/>
  <property name="jingleextension.testoutput.dir" value="${module.jingleextension.basedir}/../../classes"/>
  
  <path id="jingleextension.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="jingleextension.module.classpath">
    <path refid="${module.jdk.classpath.jingleextension}"/>
    <pathelement location="${module.jingleextension.basedir}/../merge/jstun.jar"/>
    <pathelement location="${module.jingleextension.basedir}/../lib/smackx.jar"/>
    <pathelement location="${module.jingleextension.basedir}/../lib/smack.jar"/>
    <pathelement location="${module.jingleextension.basedir}/../lib/smackx-debug.jar"/>
    <pathelement location="${module.jingleextension.basedir}/../lib/junit.jar"/>
  </path>
  
  
  <patternset id="excluded.from.module.jingleextension">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.jingleextension">
    <patternset refid="excluded.from.module.jingleextension"/>
  </patternset>
  
  <path id="jingleextension.module.sourcepath">
    <dirset dir="${module.jingleextension.basedir}/../../../jingle-extension">
      <include name="source"/>
    </dirset>
  </path>
  
  <path id="jingleextension.module.test.sourcepath">
    <dirset dir="${module.jingleextension.basedir}/../../../jingle-extension">
      <include name="test"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.jingleextension" depends="compile.module.jingleextension.production,compile.module.jingleextension.tests" description="Compile module JingleExtension"/>
  
  <target name="compile.module.jingleextension.production" description="Compile module JingleExtension; production classes">
    <mkdir dir="${jingleextension.output.dir}"/>
    <javac destdir="${jingleextension.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.jingleextension}/javac">
      <compilerarg line="${compiler.args.jingleextension}"/>
      <bootclasspath refid="jingleextension.module.bootclasspath"/>
      <classpath refid="jingleextension.module.classpath"/>
      <src refid="jingleextension.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.jingleextension"/>
    </javac>
    
    <copy todir="${jingleextension.output.dir}">
      <fileset dir="${module.jingleextension.basedir}/../../source">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.jingleextension.tests" depends="compile.module.jingleextension.production" description="compile module JingleExtension; test classes" unless="skip.tests">
    <mkdir dir="${jingleextension.testoutput.dir}"/>
    <javac destdir="${jingleextension.testoutput.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.jingleextension}/javac">
      <compilerarg line="${compiler.args.jingleextension}"/>
      <classpath refid="jingleextension.module.classpath"/>
      <classpath location="${jingleextension.output.dir}"/>
      <src refid="jingleextension.module.test.sourcepath"/>
      <patternset refid="excluded.from.compilation.jingleextension"/>
    </javac>
    
    <copy todir="${jingleextension.testoutput.dir}">
      <fileset dir="${module.jingleextension.basedir}/../../test">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="clean.module.jingleextension" description="cleanup module">
    <delete dir="${jingleextension.output.dir}"/>
    <delete dir="${jingleextension.testoutput.dir}"/>
  </target>
  
  <target name="init" description="Build initialization">
    <!-- Perform any build initialization in this target -->
  </target>
  
  <target name="clean" depends="clean.module.jingleextension" description="cleanup all"/>
  
  <target name="all" depends="init, clean, compile.module.jingleextension" description="build all"/>
</project>