buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.5.6'
    }
}

apply plugin: 'android'

dependencies {
    compile 'com.android.support:support-v4:18.0.0'
//    compile files('libs/android-support-v4.jar')
}

android {
    compileSdkVersion 18
    buildToolsVersion "18.0.0"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 18
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }
}
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.5.6'
    }
}

apply plugin: 'android-library'

dependencies {
    compile 'com.android.support:support-v4:13.0.0'
}

android {
    compileSdkVersion 18
    buildToolsVersion "18.0.0"

    defaultConfig {
        minSdkVersion 7
        targetSdkVersion 16
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }
}buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.5.6'
    }
}

apply plugin: 'android'

dependencies {
    compile 'com.android.support:support-v4:13.0.0'
    compile project(':ActionBarSherlock')
}

android {
    compileSdkVersion 18
    buildToolsVersion "18.0.0"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 18
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }
}
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.5.6'
    }
}

apply plugin: 'android-library'

dependencies {
    compile 'com.android.support:support-v4:13.0.0'
}

android {
    compileSdkVersion 18
    buildToolsVersion "18.0.0"

    defaultConfig {
        minSdkVersion 7
        targetSdkVersion 16
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }
}buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.5.6'
    }
}

apply plugin: 'android'

dependencies {
    compile 'com.android.support:support-v4:13.0.0'
    compile project(':ActionBarSherlock')
}

android {
    compileSdkVersion 18
    buildToolsVersion "18.0.0"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 17
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }

    signingConfigs {
        release
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }
}

if (project.hasProperty('keyAlias') && 
    project.hasProperty('storeFile') &&
    project.hasProperty('storePassword') &&
    project.hasProperty('keyPassword')) {
    android.signingConfigs.release.keyAlias = keyAlias
    android.signingConfigs.release.storeFile = file(storeFile)
    android.signingConfigs.release.storePassword = storePassword
    android.signingConfigs.release.keyPassword = keyPassword
} else {
    android.buildTypes.release.signingConfig = null
}
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.5.6'
    }
}

apply plugin: 'android-library'

dependencies {
    compile 'com.android.support:support-v4:13.0.0'
}

android {
    compileSdkVersion 18
    buildToolsVersion "18.0.0"

    defaultConfig {
        minSdkVersion 7
        targetSdkVersion 16
        proguardFile 'proguard-project.txt'
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }
}buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.5.6'
    }
}

apply plugin: 'android'

dependencies {
    compile 'com.android.support:support-v4:13.0.0'
    compile project(':ActionBarSherlock')
}

android {
    compileSdkVersion 18
    buildToolsVersion "18.0.0"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 17
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }

    signingConfigs {
        release
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release

            runProguard true
            proguardFile getDefaultProguardFile('proguard-android.txt')
        }
    }
}

if (project.hasProperty('keyAlias') && 
    project.hasProperty('storeFile') &&
    project.hasProperty('storePassword') &&
    project.hasProperty('keyPassword')) {
    android.signingConfigs.release.keyAlias = keyAlias
    android.signingConfigs.release.storeFile = file(storeFile)
    android.signingConfigs.release.storePassword = storePassword
    android.signingConfigs.release.keyPassword = keyPassword
} else {
    android.buildTypes.release.signingConfig = null
}
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.5.6'
    }
}

apply plugin: 'android-library'

dependencies {
    compile 'com.android.support:support-v4:13.0.0'
}

android {
    compileSdkVersion 18
    buildToolsVersion "18.0.0"

    defaultConfig {
        minSdkVersion 7
        targetSdkVersion 16
        proguardFile 'proguard-project.txt'
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }
}buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.5.6'
    }
}

apply plugin: 'android'

dependencies {
    compile 'com.android.support:support-v4:13.0.0'
    compile project(':ActionBarSherlock')
}

android {
    compileSdkVersion 18
    buildToolsVersion "18.0.0"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 17
    }

    productFlavors {
        paid {
            packageName = "com.corner23.android.playstore.paid"
        }
        free {
            packageName = "com.corner23.android.playstore.free"
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
        paid {
            res.srcDirs = ['overlay/res']
        }
    }

    signingConfigs {
        release
    }

    buildTypes {
        debug {
            packageNameSuffix ".debug"
            versionNameSuffix "-debug"
        }

        release {
            packageNameSuffix ".release"
            versionNameSuffix = "-release"
            signingConfig signingConfigs.release

            runProguard true
            proguardFile getDefaultProguardFile('proguard-android.txt')
        }
    }
}

if (project.hasProperty('keyAlias') && 
    project.hasProperty('storeFile') &&
    project.hasProperty('storePassword') &&
    project.hasProperty('keyPassword')) {
    android.signingConfigs.release.keyAlias = keyAlias
    android.signingConfigs.release.storeFile = file(storeFile)
    android.signingConfigs.release.storePassword = storePassword
    android.signingConfigs.release.keyPassword = keyPassword
} else {
    android.buildTypes.release.signingConfig = null
}
apply plugin: 'android'

dependencies {
    compile 'com.android.support:support-v4:13.0.0'
    compile project(':library:ActionBarSherlock')
}

android {
    compileSdkVersion 17
    buildToolsVersion "17.0.0"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 17
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }

    signingConfigs {
        release {
            if (project.hasProperty('demoKeyAlias') && 
                project.hasProperty('demoStoreFile') &&
                project.hasProperty('demoStorePassword') &&
                project.hasProperty('demoKeyPassword')) {
                keyAlias = demoKeyAlias
                storeFile = file(demoStoreFile)
                storePassword = demoStorePassword
                keyPassword = demoKeyPassword
            } else {
                signingConfig = null
            }
        }
    }

    buildTypes {
        debug {
            packageNameSuffix ".debug"
            versionNameSuffix "-debug"
        }

        release {
            packageNameSuffix ".release"
            versionNameSuffix = "-release"
            signingConfig signingConfigs.release

            runProguard true
            proguardFile getDefaultProguardFile('proguard-android.txt')
        }
    }
}
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.5.6'
    }
}
apply plugin: 'android-library'

dependencies {
    compile 'com.android.support:support-v4:13.0.0'
}

android {
    compileSdkVersion 17
    buildToolsVersion "17.0.0"

    defaultConfig {
        minSdkVersion 7
        targetSdkVersion 16
        proguardFile 'proguard-project.txt'
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }
}
apply plugin: 'android'

dependencies {
    compile 'com.android.support:support-v4:13.0.0'
    compile project(':library:ActionBarSherlock')
}

android {
    compileSdkVersion 17
    buildToolsVersion "17.0.0"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 17
    }

    signingConfigs {
        release {
            if (project.hasProperty('demoKeyAlias') && 
                project.hasProperty('demoStoreFile') &&
                project.hasProperty('demoStorePassword') &&
                project.hasProperty('demoKeyPassword')) {
                keyAlias = demoKeyAlias
                storeFile = file(demoStoreFile)
                storePassword = demoStorePassword
                keyPassword = demoKeyPassword
            } else {
                signingConfig = null
            }
        }
    }

    buildTypes {
        debug {
            packageNameSuffix ".debug"
            versionNameSuffix "-debug"
        }

        release {
            packageNameSuffix ".release"
            versionNameSuffix = "-release"
            signingConfig signingConfigs.release

            runProguard true
            proguardFile getDefaultProguardFile('proguard-android.txt')
        }
    }
}
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.5.6'
    }
}
apply plugin: 'android-library'

dependencies {
    compile 'com.android.support:support-v4:13.0.0'
}

android {
    compileSdkVersion 17
    buildToolsVersion "17.0.0"

    defaultConfig {
        minSdkVersion 7
        targetSdkVersion 16
        proguardFile 'proguard-project.txt'
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }
}
apply plugin: 'android'

dependencies {
    compile 'com.android.support:support-v4:13.0.0'
    compile project(':library:ActionBarSherlock')
    compile project(':library:UnifiedPreference')
}

android {
    compileSdkVersion 17
    buildToolsVersion "17.0.0"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 17
    }

    signingConfigs {
        release {
            if (project.hasProperty('demoKeyAlias') && 
                project.hasProperty('demoStoreFile') &&
                project.hasProperty('demoStorePassword') &&
                project.hasProperty('demoKeyPassword')) {
                keyAlias = demoKeyAlias
                storeFile = file(demoStoreFile)
                storePassword = demoStorePassword
                keyPassword = demoKeyPassword
            } else {
                signingConfig = null
            }
        }
    }

    buildTypes {
        debug {
            packageNameSuffix ".debug"
            versionNameSuffix "-debug"
        }

        release {
            packageNameSuffix ".release"
            versionNameSuffix = "-release"
            signingConfig signingConfigs.release

            runProguard true
            proguardFile getDefaultProguardFile('proguard-android.txt')
        }
    }
}
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.5.6'
    }
}
apply plugin: 'android-library'

dependencies {
    compile 'com.android.support:support-v4:13.0.0'
}

android {
    compileSdkVersion 17
    buildToolsVersion "17.0.0"

    defaultConfig {
        minSdkVersion 7
        targetSdkVersion 16
        proguardFile 'proguard-project.txt'
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }
}
apply plugin: 'android-library'

dependencies {
    compile project(':library/ActionBarSherlock/library')
}

android {
    compileSdkVersion 17
    buildToolsVersion "17.0.0"

    defaultConfig {
        minSdkVersion 7
        targetSdkVersion 16
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }
}apply plugin: 'android'

dependencies {
    compile 'com.android.support:support-v4:13.0.0'
    compile project(':library:ActionBarSherlock')
    compile project(':library:UnifiedPreference')
}

android {
    compileSdkVersion 17
    buildToolsVersion "17.0.0"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 17
    }

    signingConfigs {
        release {
            if (project.hasProperty('demoKeyAlias') && 
                project.hasProperty('demoStoreFile') &&
                project.hasProperty('demoStorePassword') &&
                project.hasProperty('demoKeyPassword')) {
                keyAlias = demoKeyAlias
                storeFile = file(demoStoreFile)
                storePassword = demoStorePassword
                keyPassword = demoKeyPassword
            } else {
                signingConfig = null
            }
        }
    }

    buildTypes {
        debug {
            packageNameSuffix ".debug"
            versionNameSuffix "-debug"
        }

        release {
            packageNameSuffix ".release"
            versionNameSuffix = "-release"
            signingConfig signingConfigs.release

            runProguard true
            proguardFile getDefaultProguardFile('proguard-android.txt')
        }
    }
}
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.5.6'
    }
}
apply plugin: 'android-library'

dependencies {
    compile 'com.android.support:support-v4:13.0.0'
}

android {
    compileSdkVersion 17
    buildToolsVersion "17.0.0"

    defaultConfig {
        minSdkVersion 7
        targetSdkVersion 16
        proguardFile 'proguard-project.txt'
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }
}
apply plugin: 'android-library'

dependencies {
    compile project(':ActionBarSherlock')
}

android {
    compileSdkVersion 17
    buildToolsVersion "17.0.0"

    defaultConfig {
        minSdkVersion 7
        targetSdkVersion 16
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }
}apply plugin: 'android'

dependencies {
    compile 'com.android.support:support-v4:13.0.0'
    compile project(':library:ActionBarSherlock')
    compile project(':library:UnifiedPreference')
}

android {
    compileSdkVersion 17
    buildToolsVersion "17.0.0"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 17
    }

    signingConfigs {
        release {
            if (project.hasProperty('demoKeyAlias') && 
                project.hasProperty('demoStoreFile') &&
                project.hasProperty('demoStorePassword') &&
                project.hasProperty('demoKeyPassword')) {
                keyAlias = demoKeyAlias
                storeFile = file(demoStoreFile)
                storePassword = demoStorePassword
                keyPassword = demoKeyPassword
            } else {
                signingConfig = null
            }
        }
    }

    buildTypes {
        debug {
            packageNameSuffix ".debug"
            versionNameSuffix "-debug"
        }

        release {
            packageNameSuffix ".release"
            versionNameSuffix = "-release"
            signingConfig signingConfigs.release

            runProguard true
            proguardFile getDefaultProguardFile('proguard-android.txt')
        }
    }
}
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.5.6'
    }
}
apply plugin: 'android-library'

dependencies {
    compile 'com.android.support:support-v4:13.0.0'
}

android {
    compileSdkVersion 17
    buildToolsVersion "17.0.0"

    defaultConfig {
        minSdkVersion 7
        targetSdkVersion 16
        proguardFile 'proguard-project.txt'
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
        }
    }
}
apply plugin: 'android-library'

dependencies {
    compile project(':library:ActionBarSherlock')
}

android {
    compileSdkVersion 17
    buildToolsVersion "17.0.0"

    defaultConfig {
        minSdkVersion 7
        targetSdkVersion 16
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
        }
    }
}apply plugin: 'android'
apply from: "$rootDir/android-common-task.gradle"

archivesBaseName = "demo"

dependencies {
    compile 'com.android.support:support-v4:13.0.0'
    compile project(':library:ActionBarSherlock:library')
    compile project(':library:UnifiedPreference:library')
}

android {
    compileSdkVersion 17
    buildToolsVersion "17.0.0"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 17
        versionName '1.0.1' + getGitHash()
        packageName = 'com.corner23.android.demo'
    }

    project.ext.appStartupClassName = 'com.corner23.android.demo.MainActivity'
    
    productFlavors {
        rock
        amazonFree {
            packageName = 'com.corner23.android.demo.amazon.free'
        }
        amazonPaid {
            packageName = 'com.corner23.android.demo.amazon.paid'
        }
        playFree {
            packageName = 'com.corner23.android.demo.play.free'
        }
        playPaid {
            packageName = 'com.corner23.android.demo.play.paid'
        }
    }

    signingConfigs {
        release {
            if (project.hasProperty('demoKeyAlias') && 
                project.hasProperty('demoStoreFile') &&
                project.hasProperty('demoStorePassword') &&
                project.hasProperty('demoKeyPassword')) {
                keyAlias = demoKeyAlias
                storeFile = file(demoStoreFile)
                storePassword = demoStorePassword
                keyPassword = demoKeyPassword
            } else {
                signingConfig = null
            }
        }
    }

    buildTypes {
        debug {
            packageNameSuffix ".debug"
            versionNameSuffix "-SNAPSHOT"
        }

        release {
            signingConfig signingConfigs.release

            runProguard true
            proguardFile getDefaultProguardFile('proguard-android.txt')
        }
    }

    // setup your extra resources here, if not defined the default debug and 
    // release sourceSets will be used
    project.ext.amazonPaid = [
        debugManifest: 'src/amazonPaidDebug/AndroidManifest.xml',
        releaseManifest: 'src/amazonPaidRelease/AndroidManifest.xml',
        debugRes: ['src/amazonPaidDebug/res'],
        releaseRes: ['src/amazonPaidRelease/res']
    ]

    project.ext.amazonFree = [
        debugManifest: 'src/amazonFreeDebug/AndroidManifest.xml',
        releaseManifest: 'src/amazonFreeRelease/AndroidManifest.xml',
        debugRes: ['src/amazonFreeDebug/res'], 
        releaseRes: ['src/amazonFreeRelease/res']
    ]
}

clean.doLast {
    project.delete "$rootProject.projectDir/out"
}

def env = System.getProperties()
if (env['com.android.studio.gradle.project.path'] != null) {
    project.ext.buildFromAndroidStudio = true
}
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        if (gradle.gradleVersion.startsWith("1.8")) {
            classpath 'com.android.tools.build:gradle:0.6.0'
        } else {
            classpath 'com.android.tools.build:gradle:0.5.6'
        }
    }
}

allprojects {
    tasks.withType(Compile) {
        options.compilerArgs << "-Xlint:deprecation"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.8'
}

// get hash of current commit
def getGitHash() {
    def os = new ByteArrayOutputStream()
    exec {
        executable = 'git'
        args = ['rev-parse', '--short', 'HEAD']
        standardOutput = os
    }
    
    return "-" + os.toString().trim();
}

apply plugin: 'android-library'

dependencies {
    compile 'com.android.support:support-v4:13.0.0'
}

version = '4.2.0'

android {
    compileSdkVersion 17
    buildToolsVersion "17.0.0"

    defaultConfig {
        minSdkVersion 7
        targetSdkVersion 16
        proguardFile 'proguard-project.txt'
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }
}

apply plugin: 'android-library'

dependencies {
    compile project(':library:ActionBarSherlock:library')
}

version = '0.0.3'

android {
    compileSdkVersion 17
    buildToolsVersion "17.0.0"

    defaultConfig {
        minSdkVersion 7
        targetSdkVersion 16
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }
}

apply plugin: 'android'

dependencies {
    compile 'com.android.support:support-v4:13.0.0'
    if (project.hasProperty("useRepo")) {
        compile 'com.corner23.android.library:ActionBarSherlock:4.2.0'
        compile 'com.corner23.android.library:UnifiedPreference:0.0.3'
    } else {
        compile project(':library:ActionBarSherlock')
        compile project(':library:UnifiedPreference')
    } 
}

// get hash of current commit
new ByteArrayOutputStream().withStream { os -> 
    def result = exec {
        executable = 'git'
        args = ['rev-parse', '--short', 'HEAD']
        standardOutput = os
    }
    
    project.ext.gitHash = os.toString().trim();
}

archivesBaseName = "demo"

android {
    compileSdkVersion 17
    buildToolsVersion "17.0.0"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 17
        versionName '1.0.1'
        packageName = 'com.corner23.android.demo'
    }

    productFlavors {
        rock
        amazonFree {
            packageName = 'com.corner23.android.amazon.free'
        }
        playFree {
            packageName = 'com.corner23.android.playstore.free'
        }
    }

    signingConfigs {
        release {
            if (project.hasProperty('demoKeyAlias') && 
                project.hasProperty('demoStoreFile') &&
                project.hasProperty('demoStorePassword') &&
                project.hasProperty('demoKeyPassword')) {
                keyAlias = demoKeyAlias
                storeFile = file(demoStoreFile)
                storePassword = demoStorePassword
                keyPassword = demoKeyPassword
            } else {
                signingConfig = null
            }
        }
    }

    buildTypes {
        debug {
            packageNameSuffix ".debug"
            versionNameSuffix "-SNAPSHOT"
        }

        release {
            signingConfig signingConfigs.release

            runProguard true
            proguardFile getDefaultProguardFile('proguard-android.txt')
        }
    }
}

android.applicationVariants.each { variant ->
    // replace output apk name to <product>-<version>-<buildtype>-<githash>.apk
    def versionSuffix = variant.buildType.versionNameSuffix ? variant.buildType.versionNameSuffix : ""
    def versionName = variant.mergedFlavor.versionName + versionSuffix + "-${gitHash}";
    def apk = variant.outputFile;
    def newName = apk.name.replace(variant.buildType.name, versionName);

    variant.outputFile = new File(apk.parentFile, newName);

    // launch after install
    variant.install.doLast {
        def packageSuffix = variant.buildType.packageNameSuffix ? variant.buildType.packageNameSuffix : ""
        def packageName = variant.productFlavors.packageName[0] ? variant.productFlavors.packageName[0] : android.defaultConfig.packageName
        def startupClass = packageName + packageSuffix + '/com.corner23.android.demo.MainActivity'
        def result = exec {
            executable = 'adb'
            args = ['shell', 'am', 'start', '-c', 'android.intent.category.LAUNCHER', '-n', startupClass]
        }
    }
}
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.5.6'
    }
}

allprojects {
    repositories {
        mavenCentral()
        maven { url "${rootDir}/repository" }
    }
}

task deploy(dependsOn: ':library:deploy') {
}
apply plugin: 'android-library'

dependencies {
    compile 'com.android.support:support-v4:13.0.0'
}

archivesBaseName = 'ActionBarSherlock'
version = '4.2.0'

android {
    compileSdkVersion 17
    buildToolsVersion "17.0.0"

    defaultConfig {
        minSdkVersion 7
        targetSdkVersion 16
        proguardFile 'proguard-project.txt'
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }
}

apply plugin: 'android-library'

dependencies {
    compile project(':library:ActionBarSherlock')
}

archivesBaseName = 'UnifiedPreference'
version = '0.0.3'

android {
    compileSdkVersion 17
    buildToolsVersion "17.0.0"

    defaultConfig {
        minSdkVersion 7
        targetSdkVersion 16
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }
}

allprojects {
    apply plugin: 'maven'
    group = 'com.corner23.android.library'
}

subprojects {
    uploadArchives {
        repositories.mavenDeployer {
            repository(url: uri("$rootDir/repository"))

            addFilter('aar') { artifact, file ->
                artifact.name == archivesBaseName
            }
            addFilter('apklib') { artifact, file ->
                artifact.name == archivesBaseName + '-apklib'
            }
        }
    }

    task apklib(type: Zip) {
        appendix = extension = 'apklib'

        from 'AndroidManifest.xml'
        into('res') {
            from 'res'
        }
        into('src') {
            from 'src'
        }
    }

    artifacts {
        archives apklib
    }
}

task deploy(dependsOn: subprojects.uploadArchives) {
    doLast {
        println 'Done deployment'
    }
}
