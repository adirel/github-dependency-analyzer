def vJavaLang = '1.7'
def javaProjects = [ project(':sagan-site'), project(':sagan-indexer'), project(':sagan-common') ]
def bootProjects = javaProjects - project(':sagan-common')
def gradleDir = "${rootProject.rootDir}/gradle"

wrapper.gradleVersion = '1.11'

buildscript {
    ext.springRepo = 'http://repo.spring.io/libs-release'

    repositories {
        maven { url springRepo }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.0.1.RELEASE"
        classpath 'org.cloudfoundry:cf-gradle-plugin:1.0.2' // see deploy.gradle
    }
}

configure(allprojects) {
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    idea.module {
        excludeDirs += [
                file('bin'),      // containing build artifacts from Eclipse (if any)
                file('work'),     // containing transient artifacts used by embedded Tomcat
                file('logs'),     // containing app logs written by embedded Tomcat
                file('data'),     // containing logs and data written by elasticsearch
                file('.settings') // containing intentionally checked-in Eclipse metadata
        ]
    }
}

configure(rootProject) {
    apply from: 'gradle/gitMetadata.gradle'

    idea.project {
        languageLevel = vJavaLang
        ipr {
            withXml { provider ->
                def mapping = provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping
                mapping.@vcs = 'Git'
                mapping.@directory = '$PROJECT_DIR$'
            }
        }
    }
}

configure(javaProjects) {
    apply plugin: 'java'

    targetCompatibility = vJavaLang
    sourceCompatibility = vJavaLang

    repositories {
        maven { url springRepo }
    }

    dependencies {
        compile 'org.slf4j:slf4j-api'
        testCompile 'junit:junit'
        testCompile 'org.hamcrest:hamcrest-library'
        testCompile 'org.mockito:mockito-core'
    }

    // Ensure that all Gradle-compiled classes are available to Eclipse's
    // classpath.
    eclipseClasspath.dependsOn testClasses

    // Skip generation and removal of .settings/org.eclipse.jdt.core.prefs files
    // during the normal `gradle eclipse` / `gradle cleanEclipse` lifecycle, as
    // these files have been checked in with formatting settings imported from
    // style/sagan-format.xml and style/sagan.importorder.
    // See http://www.gradle.org/docs/current/userguide/eclipse_plugin.html
    eclipseJdt.onlyIf { false }
    cleanEclipseJdt.onlyIf { false }
}

configure(bootProjects) {
    apply plugin: 'spring-boot'
    apply from: "$gradleDir/integTest.gradle"
    apply from: "$gradleDir/deploy.gradle"
    apply from: "$gradleDir/writeGitPropertiesFile.gradle"

    springBoot.backupSource = false
    bootRun.dependsOn writeGitPropertiesFile
}

import org.gradle.api.tasks.Exec
import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'java'

jar {
    from 'dist'
    eachFile { details ->
        details.path = details.path.startsWith('META-INF') ?: 'static/'+details.path
    }
    // Jar contains duplicate empty folders, see Gradle issue:
    // http://issues.gradle.org/browse/GRADLE-1830
    // so we need to set includeEmptyDirs to false
    includeEmptyDirs = false

}

task npmInstall(type:Exec) {
    // be Gradle-like and suppress boilerplate logging
    logging.captureStandardOutput LogLevel.INFO
    // but we do always want to see downloads in the log
    logging.captureStandardError LogLevel.LIFECYCLE
    inputs.files "package.json", "bower.json"
    outputs.dir "node_modules"
    if(Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'cmd', '/c', 'npm', 'install'
    } else {
        commandLine 'npm', 'install'
    }
}

task npmBuild(dependsOn: npmInstall, type:Exec) {
    logging.captureStandardOutput LogLevel.INFO
    logging.captureStandardError LogLevel.INFO
    inputs.dir "src"
    inputs.file "gulpfile.js"
    outputs.dir "dist"
    if(Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'cmd', '/c', 'npm', 'run', 'build'
    } else {
        commandLine 'npm', 'run', 'build'
    }
}

jar.dependsOn npmBuild

idea.module {
    // see .gitignore
    excludeDirs += [
            file('dist'),
            file('src/lib'),
            file('node_modules')
    ]
}
sourceSets {
    testUtil {
        java.srcDir 'src/test-util/java'
        resources.srcDir 'src/test-util/resources'
    }
}

dependencies {
    compile "org.springframework:spring-context"
    compile "org.springframework.security:spring-security-core"
    compile 'org.springframework.social:spring-social-github:1.0.0.M4'
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.data:spring-data-jpa:1.5.1.RELEASE"

    compile 'org.elasticsearch:elasticsearch:0.90.2'
    compile('io.searchbox:jest:0.0.4') {
        exclude(module: 'commons-logging')
    }
    compile 'org.springframework.cloud:spring-service-connector:0.9.5'
    compile 'org.springframework.cloud:cloudfoundry-connector:0.9.5'

    // datasource and connection pool dependencies
    runtime 'org.postgresql:postgresql:9.2-1002-jdbc4'
    compile 'com.h2database:h2'
    compile 'org.apache.tomcat:tomcat-jdbc'

    // for use in on-the-fly database setup and migrations
    compile 'com.googlecode.flyway:flyway-core:2.2.1'

    compile('org.simpleframework:simple-xml:2.7') {
        exclude(module: 'stax')
        exclude(module: 'stax-api')
        exclude(module: 'xpp3')
    }

    compile 'org.jsoup:jsoup:1.7.2'
    compile 'org.yaml:snakeyaml'
    compile 'joda-time:joda-time'
    compile 'org.hibernate:hibernate-validator'

    // for use in rendering AsciiDoc-based guide content to HTML
    compile 'org.asciidoctor:asciidoctor-java-integration:0.1.4'

    testUtilCompile "junit:junit"
    testUtilCompile sourceSets.main.output
    testUtilCompile configurations.compile
    testUtilRuntime configurations.runtime

    // pick up common test utility classes
    testCompile sourceSets.testUtil.output

    // for use of spring-test's MatcherAssertionErrors.*
    testCompile "org.springframework:spring-test"
}

// Add test-util source directories to IDEA .iml files
idea.module {
    testSourceDirs += (sourceSets.testUtil.java.srcDirs + sourceSets.testUtil.resources.srcDirs)
}

// sagan-common is not technically a "Spring Boot" application--it is just a library.
// However, we apply the spring-boot plugin here anyway in order to pick up boot's
// default dependency versioning, such that we stay in sync with other modules that
// are actually "boot"-style apps.
apply plugin: 'spring-boot'
bootRepackage.enabled = false

springBoot.mainClass = 'sagan.IndexerMain'

dependencies {
    compile project(':sagan-common')

    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-security"

    // for use in CrawlerService
    compile "org.apache.httpcomponents:httpclient"
    compile('com.soulgalore:crawler:1.5.1') {
        exclude(module: 'guice')
        exclude(module: 'commons-logging')
    }

    // for use in mocking http interactions
    testCompile "org.springframework:spring-test"

    // pick up common test utility classes
    testCompile project(':sagan-common').sourceSets.testUtil.output
}

task copyStaticTemplates(type: Copy, dependsOn: project(':sagan-site').processResources) {
    description = "Copies static html templates from :sagan-site in order to index them at runtime."

    from project(':sagan-site').sourceSets.main.output.resourcesDir
    into sourceSets.main.output.resourcesDir
    include "templates/pages/**/*"
}
processResources.dependsOn copyStaticTemplates

// Ensure that site tasks have execution priority over indexer tasks, as it is
// desirable to identify problems with the site as quickly as possible
gradle.projectsEvaluated {
    tasks.each { indexerTask ->
        def siteTask = project(':sagan-site').tasks.findByPath(indexerTask.name)
        if (siteTask != null) {
            indexerTask.mustRunAfter siteTask
        }
    }
}


springBoot.mainClass = 'sagan.SiteMain'

applicationDefaultJvmArgs = [
        // Avoid PermGen errors during JRuby/Asciidoctor guide processing on JDK 7 with `gradle :sagan-site:bootRun`
        // See http://www.gradle.org/docs/1.7/release-notes#specify-default-jvm-arguments-for-the-application-plugin
        "-XX:MaxPermSize=128M",
        // Set SAGAN_HOME env variable to the root of sagan project. This allows to register an additional
        // resource handler location and serve static resources directly from the sagan-client module during dev.
        // See sagan.ClientResourcesConfig
        "-DSAGAN_HOME=${rootProject.rootDir}"
]

dependencies {
    def vHttpClient = '4.3'

    compile project(':sagan-common')
    compile project(':sagan-client')

    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.apache.tomcat.embed:tomcat-embed-jasper" // until spring-boot #248 is fixed
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.security:spring-security-acl"

    // Thymeleaf is used as the template engine for serving HTML
    compile 'org.thymeleaf:thymeleaf-spring4'
    compile 'org.thymeleaf:thymeleaf'
    compile 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'
    compile 'com.github.mxab.thymeleaf.extras:thymeleaf-extras-data-attribute:1.3'
    compile 'org.thymeleaf.extras:thymeleaf-extras-springsecurity3'

    // nekohtml is required for thymeleaf's LEGACYHTML5 mode
    runtime 'net.sourceforge.nekohtml:nekohtml:1.9.15'

    // for use in generating blog atom feeds
    compile 'net.java.dev.rome:rome:1.0.0'

    // for use by spring-social-github's OAuth2 support
    // note that 'runtime' scope would be enough, but 'compile'
    // helps override conflicting httpclient versions
    compile "org.apache.httpcomponents:httpclient:${vHttpClient}"
    compile "org.apache.httpcomponents:httpcore:${vHttpClient}"
    compile "org.apache.httpcomponents:httpcore-nio:${vHttpClient}"

    // for use in serving redirects; see urlrewrite.xml
    compile 'org.tuckey:urlrewritefilter:4.0.3'

    // for use in mocking http interactions
    testCompile "org.springframework:spring-test"

    // pick up common test utility classes
    testCompile project(':sagan-common').sourceSets.testUtil.output
}