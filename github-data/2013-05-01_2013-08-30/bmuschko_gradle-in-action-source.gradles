task appendFilenames << {
    File inputDirectory = file("src");
    File outputFile = new File(getBuildDir(), "allfiles.txt");
    File outputDirectory = outputFile.getParentFile();

    if(!outputDirectory.exists()) {
        outputDirectory.mkdirs();
    }

    outputFile.createNewFile();
    FileWriter fileWriter = new FileWriter(outputFile, true);

    try {
        for(File file : inputDirectory.listFiles()) {
            fileWriter.write(file.getName() + "\n");
        }
    }
    finally {
        fileWriter.close();
    }
}
task appendFilenames << {
    def inputDirectory = file('src')
    def outputFile = new File(buildDir, 'allfiles.txt')
    def outputDirectory = outputFile.parentFile

    if(!outputDirectory.exists()) {
        outputDirectory.mkdirs()
    }

    outputFile.createNewFile()
    inputDirectory.eachFile { outputFile << "$it.name\n" }
}
def version = 12
assert version == 12
version++
assert version == 12class ProjectVersion {
    Integer major
    Integer minor

    ProjectVersion(Integer major, Integer minor) {
        this.major = major
        this.minor = minor
    }
}

def buildTool = 'Gradle'
assert buildTool.class == java.lang.String

def initProjectVersion(major, minor) {
    new ProjectVersion(major, minor)
}

assert initProjectVersion(1, 2).class == ProjectVersion

class ProjectVersion {
    Integer major
    Integer minor

    ProjectVersion(Integer major, Integer minor) {
        this.major = major
        this.minor = minor
    }
}

def initProjectVersion(major, minor) {
    new ProjectVersion(major, minor)
}

initProjectVersion(1, 2)
initProjectVersion 1, 2

println('Groovy is awesome!')
println 'Groovy is awesome!'def myString1 = 'This is a single-quoted String'
def myString2 = "This is a double-quoted String"
def myString3 = """
    This
    is a
    multiline
    String
"""def language = 'groovy'
def sentence = "$language is awesome!"
assert sentence == 'groovy is awesome!'

def improvedSentence = "${language.capitalize()} is awesome!"
assert improvedSentence == 'Groovy is awesome!'def buildTools = ['Ant', 'Maven']
assert buildTools.getClass() == java.util.ArrayList
assert buildTools.size() == 2
assert buildTools[1] == 'Maven'

buildTools << 'Gradle'
assert buildTools.size() == 3
assert buildTools[2] == 'Gradle'

buildTools.each { buildTool ->
    println buildTool
}def inceptionYears = ['Ant': 2000, 'Maven': 2004]
assert inceptionYears.getClass() == java.util.LinkedHashMap
assert inceptionYears.size() == 2
assert inceptionYears.Ant == 2000
assert inceptionYears['Ant'] == 2000

inceptionYears['Gradle'] = 2009
assert inceptionYears.size() == 3
assert inceptionYears['Gradle'] == 2009

inceptionYears.each { buildTool, year ->
    println "$buildTool was first released in $year"
}
class ProjectVersion {
    Integer major
    Integer minor
}

ProjectVersion projectVersion = new ProjectVersion(major: 1, minor: 10)
assert projectVersion.minor == 10
projectVersion.minor = 30
assert projectVersion.minor == 30class ProjectVersion {
    Integer major
    Integer minor
}

def incrementMajorProjectVersion = {
    it.major++
}

ProjectVersion projectVersion = new ProjectVersion(major: 1, minor: 10)
incrementMajorProjectVersion(projectVersion)
assert projectVersion.major == 2class ProjectVersion {
    Integer major
    Integer minor
}

def incrementMajorProjectVersion = { ProjectVersion version ->
    version.major++
}

ProjectVersion projectVersion = new ProjectVersion(major: 1, minor: 10)
incrementMajorProjectVersion(projectVersion)
assert projectVersion.major == 2

class ProjectVersion {
    Integer major
    Integer minor
}

def setFullProjectVersion = { projectVersion, major, minor ->
    projectVersion.major = major
    projectVersion.minor = minor
}

ProjectVersion projectVersion = new ProjectVersion(major: 1, minor: 10)
setFullProjectVersion(projectVersion, 2, 1)
assert projectVersion.major == 2
assert projectVersion.minor == 1
class ProjectVersion {
    Integer major
    Integer minor
}

ProjectVersion projectVersion = new ProjectVersion(major: 1, minor: 10)
def minorVersion = { projectVersion.minor }
assert minorVersion() == 10class ProjectVersion {
    Integer major
    Integer minor
}

Integer incrementVersion(Closure closure, Integer count) {
    closure() + count
}

ProjectVersion projectVersion = new ProjectVersion(major: 1, minor: 10)
assert incrementVersion({ projectVersion.minor }, 2) == 12
class ProjectVersion {
    Integer major
    Integer minor

    void increment(Closure closure) {
        closure.resolveStrategy = Closure.DELEGATE_ONLY
        closure.delegate = this
        closure()
    }
}

ProjectVersion projectVersion = new ProjectVersion(major: 1, minor: 10)
projectVersion.increment { major += 1 }
assert projectVersion.major == 2
projectVersion.increment { minor += 5 }
assert projectVersion.minor == 15
def buildTools = ['Ant', 'Maven', 'Gradle']
assert buildTools.find { it == 'Gradle' } == 'Gradle'
assert buildTools.every { it.size() >= 4 } == false

assert 'gradle'.capitalize() == 'Gradle'

new File('build.gradle').eachLine { line ->
    println line
}
apply plugin: 'java'

version = '0.1'

repositories {
    mavenCentral()
}

dependencies {
    compile 'commons-codec:commons-codec:1.6'
}
import com.manning.gia.sanitycheck.tasks.BuildExerciser

ext.supportedGradleVersion = '1.7'

task verifyListings(type: BuildExerciser, group: 'Gradle in Action', description: 'Verifies that listings can be run successfully.') {
    gradleVersion = supportedGradleVersion
}

task wrapper(type: Wrapper) {
    gradleVersion = supportedGradleVersion
}task helloWorld {
    doLast {
        println "Hello World"
    }
}
task helloWorld << {
    println "Hello World"
}
task startSession << {
    chant()
}

def chant() {
    ant.echo 'Repeat after me...'
}

3.times { counter ->
    task "yayGradle$counter" << {
        println 'Gradle rocks'
    }
}

yayGradle0.dependsOn startSession
yayGradle2.dependsOn yayGradle1, yayGradle0
task groupTherapy(dependsOn: yayGradle2)apply plugin: 'java'

version = 0.1
sourceCompatibility = 1.6

jar {
    manifest {
        attributes 'Main-Class': 'com.manning.gia.todo.ToDoApp'
    }
}apply plugin: 'java'

version = 0.1
sourceCompatibility = 1.6

jar {
    manifest {
        attributes 'Main-Class': 'com.manning.gia.todo.ToDoApp'
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
    }
}

buildDir = 'out'apply plugin: 'java'

version = 0.1
sourceCompatibility = 1.6

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
    }
}

buildDir = 'out'

jar {
    manifest {
        attributes 'Main-Class': 'com.manning.gia.todo.ToDoApp'
    }
}apply plugin: 'java'

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.1'
}apply plugin: 'java'apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}

webAppDirName = 'webfiles'

war {
    from 'static'
}apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}

jettyRun {
    httpPort = 9090
    contextPath = 'todo'
}apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.2'
}
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    providedCompile 'javax.servlet:servlet-api:2.5',
            'javax.servlet.jsp:jsp-api:2.1'
    runtime 'javax.servlet:jstl:1.1.2',
            'taglibs:standard:1.1.2'
}version = '0.1-SNAPSHOT'

task printVersion {
    doFirst {
        println "Before reading the project version"
    }

    doLast {
        println "Version: $version"
    }
}

printVersion.doFirst { println "First action" }
printVersion << { println "Last action" } 
version = '0.1-SNAPSHOT'

task printVersion(group: 'versioning',
        description: 'Prints project version.') << {
    logger.quiet "Version: $version"
}
version = '0.1-SNAPSHOT'

task printVersion {
    group = 'versioning'
    description = 'Prints project version.'

    doLast {
        logger.quiet "Version: $version"
    }
}
version = '0.1-SNAPSHOT'

task printVersion << {
    logger.quiet "Version: $version"
}project.ext.myProp = 'myValue'

ext {
    someOtherProp = 123
}

assert myProp == 'myValue'
println project.someOtherProp
ext.someOtherProp = 567

task first << { println "first" }
task second << { println "second" }
first.finalizedBy secondassert project.exampleProp == 'myValue'

task printGradleProperty << {
    println "Second property: $someOtherProp"
}version = '0.1-SNAPSHOT'

task first << { println "first" }
task second << { println "second" }

task printVersion(dependsOn: [second, first]) << {
    logger.quiet "Version: $version"
}

task third << { println "third" }
third.dependsOn('printVersion')     
version = new ProjectVersion(0, 1)

class ProjectVersion {
    Integer major
    Integer minor
    Boolean release

    ProjectVersion(Integer major, Integer minor) {
        this.major = major
        this.minor = minor
        this.release = Boolean.FALSE
    }

    ProjectVersion(Integer major, Integer minor, Boolean release) {
        this(major, minor)
        this.release = release
    }

    @Override
    String toString() {
        "$major.$minor${release ? '' : '-SNAPSHOT'}"
    }
}

task printVersion << {
    logger.quiet "Version: $version"
}
ext.versionFile = file('version.properties')

task loadVersion {
    project.version = readVersion()
}

ProjectVersion readVersion() {
    logger.quiet 'Reading the version file.'

    if (!versionFile.exists()) {
        throw new GradleException("Required version file does not exist: $versionFile.canonicalPath")
    }

    Properties versionProps = new Properties()

    versionFile.withInputStream { stream ->
        versionProps.load(stream)
    }

    new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(), versionProps.release.toBoolean())
}

task printVersion << {
    logger.quiet "Version: $version"
}

class ProjectVersion {
    Integer major
    Integer minor
    Boolean release

    ProjectVersion(Integer major, Integer minor) {
        this.major = major
        this.minor = minor
        this.release = Boolean.FALSE
    }

    ProjectVersion(Integer major, Integer minor, Boolean release) {
        this(major, minor)
        this.release = release
    }

    @Override
    String toString() {
        "$major.$minor${release ? '' : '-SNAPSHOT'}"
    }
}ext.versionFile = file('version.properties')

task loadVersion {
    project.version = readVersion()
}

ProjectVersion readVersion() {
    logger.quiet 'Reading the version file.'

    if (!versionFile.exists()) {
        throw new GradleException("Required version file does not exit: $versionFile.canonicalPath")
    }

    Properties versionProps = new Properties()

    versionFile.withInputStream { stream ->
        versionProps.load(stream)
    }

    new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(), versionProps.release.toBoolean())
}

task printVersion << {
    logger.quiet "Version: $version"
}

task makeReleaseVersion(group: 'versioning', description: 'Makes project a release version.') << {
    version.release = true
    ant.propertyfile(file: versionFile) {
        entry(key: 'release', type: 'string', operation: '=', value: 'true')
    }
}

class ProjectVersion {
    Integer major
    Integer minor
    Boolean release

    ProjectVersion(Integer major, Integer minor) {
        this.major = major
        this.minor = minor
        this.release = Boolean.FALSE
    }

    ProjectVersion(Integer major, Integer minor, Boolean release) {
        this(major, minor)
        this.release = release
    }

    @Override
    String toString() {
        "$major.$minor${release ? '' : '-SNAPSHOT'}"
    }
}ext.versionFile = file('version.properties')

task loadVersion {
    project.version = readVersion()
}

ProjectVersion readVersion() {
    logger.quiet 'Reading the version file.'

    if (!versionFile.exists()) {
        throw new GradleException("Required version file does not exit: $versionFile.canonicalPath")
    }

    Properties versionProps = new Properties()

    versionFile.withInputStream { stream ->
        versionProps.load(stream)
    }

    new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(), versionProps.release.toBoolean())
}

task makeReleaseVersion(group: 'versioning', description: 'Makes project a release version.') {
    inputs.property('release', version.release)
    outputs.file versionFile

    doLast {
        version.release = true
        ant.propertyfile(file: versionFile) {
            entry(key: 'release', type: 'string', operation: '=', value: 'true')
        }
    }
}

class ProjectVersion {
    Integer major
    Integer minor
    Boolean release

    ProjectVersion(Integer major, Integer minor) {
        this.major = major
        this.minor = minor
        this.release = Boolean.FALSE
    }

    ProjectVersion(Integer major, Integer minor, Boolean release) {
        this(major, minor)
        this.release = release
    }

    @Override
    String toString() {
        "$major.$minor${release ? '' : '-SNAPSHOT'}"
    }
}ext.versionFile = file('version.properties')

task loadVersion {
    project.version = readVersion()
}

ProjectVersion readVersion() {
    logger.quiet 'Reading the version file.'

    if (!versionFile.exists()) {
        throw new GradleException("Required version file does not exit: $versionFile.canonicalPath")
    }

    Properties versionProps = new Properties()

    versionFile.withInputStream { stream ->
        versionProps.load(stream)
    }

    new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(), versionProps.release.toBoolean())
}

class ReleaseVersionTask extends DefaultTask {
    @Input Boolean release
    @OutputFile File destFile

    ReleaseVersionTask() {
        group = 'versioning'
        description = 'Makes project a release version.'
    }

    @TaskAction
    void start() {
        project.version.release = true
        ant.propertyfile(file: destFile) {
            entry(key: 'release', type: 'string', operation: '=', value: 'true')
        }
    }
}

class ProjectVersion {
    Integer major
    Integer minor
    Boolean release

    ProjectVersion(Integer major, Integer minor) {
        this.major = major
        this.minor = minor
        this.release = Boolean.FALSE
    }

    ProjectVersion(Integer major, Integer minor, Boolean release) {
        this(major, minor)
        this.release = release
    }

    @Override
    String toString() {
        "$major.$minor${release ? '' : '-SNAPSHOT'}"
    }
}ext.versionFile = file('version.properties')

task loadVersion {
    project.version = readVersion()
}

ProjectVersion readVersion() {
    logger.quiet 'Reading the version file.'

    if (!versionFile.exists()) {
        throw new GradleException("Required version file does not exit: $versionFile.canonicalPath")
    }

    Properties versionProps = new Properties()

    versionFile.withInputStream { stream ->
        versionProps.load(stream)
    }

    new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(), versionProps.release.toBoolean())
}

task makeReleaseVersion(type: ReleaseVersionTask) {
    release = version.release
    destFile = versionFile
}

class ReleaseVersionTask extends DefaultTask {
    @Input Boolean release
    @OutputFile File destFile

    ReleaseVersionTask() {
        group = 'versioning'
        description = 'Makes project a release version.'
    }

    @TaskAction
    void start() {
        project.version.release = true
        ant.propertyfile(file: destFile) {
            entry(key: 'release', type: 'string', operation: '=', value: 'true')
        }
    }
}

class ProjectVersion {
    Integer major
    Integer minor
    Boolean release

    ProjectVersion(Integer major, Integer minor) {
        this.major = major
        this.minor = minor
        this.release = Boolean.FALSE
    }

    ProjectVersion(Integer major, Integer minor, Boolean release) {
        this(major, minor)
        this.release = release
    }

    @Override
    String toString() {
        "$major.$minor${release ? '' : '-SNAPSHOT'}"
    }
}ext.versionFile = file('version.properties')

task loadVersion {
    project.version = readVersion()
}

ProjectVersion readVersion() {
    logger.quiet 'Reading the version file.'

    if (!versionFile.exists()) {
        throw new GradleException("Required version file does not exit: $versionFile.canonicalPath")
    }

    Properties versionProps = new Properties()

    versionFile.withInputStream { stream ->
        versionProps.load(stream)
    }

    new ProjectVersion(min: versionProps.major.toInteger(), maj: versionProps.minor.toInteger(), prodReady: versionProps.release.toBoolean())
}

class ReleaseVersionTask extends DefaultTask {
    @Input Boolean release
    @OutputFile File destFile

    ReleaseVersionTask() {
        group = 'versioning'
        description = 'Makes project a release version.'
    }

    @TaskAction
    void start() {
        project.version.release = true
        ant.propertyfile(file: destFile) {
            entry(key: 'release', type: 'string', operation: '=', value: 'true')
        }
    }
}

class ProjectVersion {
    Integer min
    Integer maj
    Boolean prodReady

    @Override
    String toString() {
        "$maj.$min${prodReady ? '' : '-SNAPSHOT'}"
    }
}ext.versionFile = file('project-version.properties')

task loadVersion {
    project.version = readVersion()
}

ProjectVersion readVersion() {
    logger.quiet 'Reading the version file.'

    if (!versionFile.exists()) {
        throw new GradleException("Required version file does not exit: $versionFile.canonicalPath")
    }

    Properties versionProps = new Properties()

    versionFile.withInputStream { stream ->
        versionProps.load(stream)
    }

    new ProjectVersion(min: versionProps.major.toInteger(), maj: versionProps.minor.toInteger(), prodReady: versionProps.release.toBoolean())
}

task makeReleaseVersion(type: ReleaseVersionTask) {
    release = version.prodReady
    destFile = new File('project-version.properties')
}

class ReleaseVersionTask extends DefaultTask {
    @Input Boolean release
    @OutputFile File destFile

    ReleaseVersionTask() {
        group = 'versioning'
        description = 'Makes project a release version.'
    }

    @TaskAction
    void start() {
        project.version.prodReady = true
        ant.propertyfile(file: destFile) {
            entry(key: 'release', type: 'string', operation: '=', value: 'true')
        }
    }
}

class ProjectVersion {
    Integer min
    Integer maj
    Boolean prodReady

    @Override
    String toString() {
        "$maj.$min${prodReady ? '' : '-SNAPSHOT'}"
    }
}apply plugin: 'war'
ext.versionFile = file('version.properties')

task loadVersion {
    project.version = readVersion()
}

ProjectVersion readVersion() {
    logger.quiet 'Reading the version file.'

    if (!versionFile.exists()) {
        throw new GradleException("Required version file does not exit: $versionFile.canonicalPath")
    }

    Properties versionProps = new Properties()

    versionFile.withInputStream { stream ->
        versionProps.load(stream)
    }

    new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(), versionProps.release.toBoolean())
}

task makeReleaseVersion(group: 'versioning', description: 'Makes project a release version.') << {
    version.release = true
    ant.propertyfile(file: versionFile) {
        entry(key: 'release', type: 'string', operation: '=', value: 'true')
    }
}

task createDistribution(type: Zip, dependsOn: makeReleaseVersion) {
    from war.outputs.files

    from(sourceSets*.allSource) {
        into 'src'
    }

    from(rootDir) {
        include versionFile.name
    }
}

task backupReleaseDistribution(type: Copy) {
    from createDistribution.outputs.files
    into "$buildDir/backup"
}

task release(dependsOn: backupReleaseDistribution) << {
    logger.quiet 'Releasing the project...'
}

class ProjectVersion {
    Integer major
    Integer minor
    Boolean release

    ProjectVersion(Integer major, Integer minor) {
        this.major = major
        this.minor = minor
        this.release = Boolean.FALSE
    }

    ProjectVersion(Integer major, Integer minor, Boolean release) {
        this(major, minor)
        this.release = release
    }

    @Override
    String toString() {
        "$major.$minor${release ? '' : '-SNAPSHOT'}"
    }
}apply plugin: 'war'
ext.versionFile = file('version.properties')

task loadVersion {
    project.version = readVersion()
}

ProjectVersion readVersion() {
    logger.quiet 'Reading the version file.'

    if (!versionFile.exists()) {
        throw new GradleException("Required version file does not exit: $versionFile.canonicalPath")
    }

    Properties versionProps = new Properties()

    versionFile.withInputStream { stream ->
        versionProps.load(stream)
    }

    new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(), versionProps.release.toBoolean())
}

task makeReleaseVersion(group: 'versioning', description: 'Makes project a release version.') << {
    version.release = true
    ant.propertyfile(file: versionFile) {
        entry(key: 'release', type: 'string', operation: '=', value: 'true')
    }
}

task createDistribution(type: Zip, dependsOn: makeReleaseVersion) {
    from war.outputs.files

    from(sourceSets*.allSource) {
        into 'src'
    }

    from(rootDir) {
        include versionFile.name
    }
}

task backupReleaseDistribution(type: Copy) {
    from createDistribution.outputs.files
    into "$buildDir/backup"
}

task release(dependsOn: backupReleaseDistribution) << {
    logger.quiet 'Releasing the project...'
}

task incrementMajorVersion(group: 'versioning', description: 'Increments project major version.') << {
    String currentVersion = version.toString()
    ++version.major
    String newVersion = version.toString()
    logger.info "Incrementing major project version: $currentVersion -> $newVersion"

    ant.propertyfile(file: versionFile) {
        entry(key: 'major', type: 'int', operation: '+', value: 1)
    }
}

task incrementMinorVersion(group: 'versioning', description: 'Increments project minor version.') << {
    String currentVersion = version.toString()
    ++version.minor
    String newVersion = version.toString()
    logger.info "Incrementing minor project version: $currentVersion -> $newVersion"

    ant.propertyfile(file: versionFile) {
        entry(key: 'minor', type: 'int', operation: '+', value: 1)
    }
}

class ProjectVersion {
    Integer major
    Integer minor
    Boolean release

    ProjectVersion(Integer major, Integer minor) {
        this.major = major
        this.minor = minor
        this.release = Boolean.FALSE
    }

    ProjectVersion(Integer major, Integer minor, Boolean release) {
        this(major, minor)
        this.release = release
    }

    @Override
    String toString() {
        "$major.$minor${release ? '' : '-SNAPSHOT'}"
    }
}apply plugin: 'war'
ext.versionFile = file('version.properties')

task loadVersion {
    project.version = readVersion()
}

ProjectVersion readVersion() {
    logger.quiet 'Reading the version file.'

    if (!versionFile.exists()) {
        throw new GradleException("Required version file does not exit: $versionFile.canonicalPath")
    }

    Properties versionProps = new Properties()

    versionFile.withInputStream { stream ->
        versionProps.load(stream)
    }

    new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(), versionProps.release.toBoolean())
}

task makeReleaseVersion(group: 'versioning', description: 'Makes project a release version.') << {
    version.release = true
    ant.propertyfile(file: versionFile) {
        entry(key: 'release', type: 'string', operation: '=', value: 'true')
    }
}

task createDistribution(type: Zip, dependsOn: makeReleaseVersion) {
    from war.outputs.files

    from(sourceSets*.allSource) {
        into 'src'
    }

    from(rootDir) {
        include versionFile.name
    }
}

task backupReleaseDistribution(type: Copy) {
    from createDistribution.outputs.files
    into "$buildDir/backup"
}

task release(dependsOn: backupReleaseDistribution) << {
    logger.quiet 'Releasing the project...'
}

tasks.addRule("Pattern: increment<Classifier>Version – Increments the project version classifier.") { String taskName ->
    if (taskName.startsWith('increment') && taskName.endsWith('Version')) {
        task(taskName) << {
            String classifier = (taskName - 'increment' - 'Version').toLowerCase()
            String currentVersion = version.toString()

            switch (classifier) {
                case 'major': ++version.major
                    break
                case 'minor': ++version.minor
                    break
                default: throw new GradleException("Invalid version type '$classifier. Allowed types: ['Major', 'Minor']")
            }

            String newVersion = version.toString()
            logger.info "Incrementing $classifier project version: $currentVersion -> $newVersion"

            ant.propertyfile(file: versionFile) {
                entry(key: classifier, type: 'int', operation: '+', value: 1)
            }
        }
    }
}


class ProjectVersion {
    Integer major
    Integer minor
    Boolean release

    ProjectVersion(Integer major, Integer minor) {
        this.major = major
        this.minor = minor
        this.release = Boolean.FALSE
    }

    ProjectVersion(Integer major, Integer minor, Boolean release) {
        this(major, minor)
        this.release = release
    }

    @Override
    String toString() {
        "$major.$minor${release ? '' : '-SNAPSHOT'}"
    }
}apply plugin: 'war'
ext.versionFile = file('version.properties')

task loadVersion {
    project.version = readVersion()
}

ProjectVersion readVersion() {
    logger.quiet 'Reading the version file.'

    if (!versionFile.exists()) {
        throw new GradleException("Required version file does not exit: $versionFile.canonicalPath")
    }

    Properties versionProps = new Properties()

    versionFile.withInputStream { stream ->
        versionProps.load(stream)
    }

    new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(), versionProps.release.toBoolean())
}

gradle.taskGraph.whenReady { TaskExecutionGraph taskGraph ->
    if (taskGraph.hasTask(release)) {
        if (!version.release) {
            version.release = true
            ant.propertyfile(file: versionFile) {
                entry(key: 'release', type: 'string', operation: '=', value: 'true')
            }
        }
    }
}

task createDistribution(type: Zip) {
    from war.outputs.files

    from(sourceSets*.allSource) {
        into 'src'
    }

    from(rootDir) {
        include versionFile.name
    }
}

task backupReleaseDistribution(type: Copy) {
    from createDistribution.outputs.files
    into "$buildDir/backup"
}

task release(dependsOn: backupReleaseDistribution) << {
    logger.quiet 'Releasing the project...'
}

tasks.addRule("Pattern: increment<Classifier>Version – Increments the project version classifier.") { String taskName ->
    if (taskName.startsWith('increment') && taskName.endsWith('Version')) {
        task(taskName) << {
            String classifier = (taskName - 'increment' - 'Version').toLowerCase()
            String currentVersion = version.toString()

            switch (classifier) {
                case 'major': ++version.major
                    break
                case 'minor': ++version.minor
                    break
                default: throw new GradleException("Invalid version type '$classifier. Allowed types: ['Major', 'Minor']")
            }

            String newVersion = version.toString()
            logger.info "Incrementing $classifier project version: $currentVersion -> $newVersion"

            ant.propertyfile(file: versionFile) {
                entry(key: classifier, type: 'int', operation: '+', value: 1)
            }
        }
    }
}


class ProjectVersion {
    Integer major
    Integer minor
    Boolean release

    ProjectVersion(Integer major, Integer minor) {
        this.major = major
        this.minor = minor
        this.release = Boolean.FALSE
    }

    ProjectVersion(Integer major, Integer minor, Boolean release) {
        this(major, minor)
        this.release = release
    }

    @Override
    String toString() {
        "$major.$minor${release ? '' : '-SNAPSHOT'}"
    }
}apply plugin: 'war'
ext.versionFile = file('version.properties')

task loadVersion {
    project.version = readVersion()
}

ProjectVersion readVersion() {
    logger.quiet 'Reading the version file.'

    if (!versionFile.exists()) {
        throw new GradleException("Required version file does not exit: $versionFile.canonicalPath")
    }

    Properties versionProps = new Properties()

    versionFile.withInputStream { stream ->
        versionProps.load(stream)
    }

    new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(), versionProps.release.toBoolean())
}

class ReleaseVersionListener implements TaskExecutionGraphListener {
    final static String releaseTaskPath = ':release'

    @Override
    void graphPopulated(TaskExecutionGraph taskGraph) {
        if (taskGraph.hasTask(releaseTaskPath)) {
            List<Task> allTasks = taskGraph.allTasks
            Task releaseTask = allTasks.find { it.path == releaseTaskPath }
            Project project = releaseTask.project

            if (!project.version.release) {
                project.version.release = true
                project.ant.propertyfile(file: project.versionFile) {
                    entry(key: 'release', type: 'string', operation: '=', value: 'true')
                }
            }
        }
    }
}

gradle.taskGraph.addTaskExecutionGraphListener(new ReleaseVersionListener())

task createDistribution(type: Zip) {
    from war.outputs.files

    from(sourceSets*.allSource) {
        into 'src'
    }

    from(rootDir) {
        include versionFile.name
    }
}

task backupReleaseDistribution(type: Copy) {
    from createDistribution.outputs.files
    into "$buildDir/backup"
}

task release(dependsOn: backupReleaseDistribution) << {
    logger.quiet 'Releasing the project...'
}

tasks.addRule("Pattern: increment<Classifier>Version – Increments the project version classifier.") { String taskName ->
    if (taskName.startsWith('increment') && taskName.endsWith('Version')) {
        task(taskName) << {
            String classifier = (taskName - 'increment' - 'Version').toLowerCase()
            String currentVersion = version.toString()

            switch (classifier) {
                case 'major': ++version.major
                    break
                case 'minor': ++version.minor
                    break
                default: throw new GradleException("Invalid version type '$classifier. Allowed types: ['Major', 'Minor']")
            }

            String newVersion = version.toString()
            logger.info "Incrementing $classifier project version: $currentVersion -> $newVersion"

            ant.propertyfile(file: versionFile) {
                entry(key: classifier, type: 'int', operation: '+', value: 1)
            }
        }
    }
}


class ProjectVersion {
    Integer major
    Integer minor
    Boolean release

    ProjectVersion(Integer major, Integer minor) {
        this.major = major
        this.minor = minor
        this.release = Boolean.FALSE
    }

    ProjectVersion(Integer major, Integer minor, Boolean release) {
        this(major, minor)
        this.release = release
    }

    @Override
    String toString() {
        "$major.$minor${release ? '' : '-SNAPSHOT'}"
    }
}version = '0.1-SNAPSHOT'

task printVersion {
    doFirst {
        println "Version: $version"
    }
}
version = '0.1-SNAPSHOT'

task printVersion {
    doLast {
        println "Version: $version"
    }
}
setDescription("myProject")
println "Description of project $name: " + project.descriptionconfigurations {
    cargo {
        description = 'Classpath for Cargo Ant tasks.'
        visible = false
    }
}

task deployToLocalTomcat << {
    FileTree cargoDependencies = configurations.getByName('cargo').asFileTree
    ant.taskdef(resource: 'cargo.tasks', classpath: cargoDependencies.asPath)

    ant.cargo(containerId: 'tomcat7x', action: 'run', output: "$buildDir/output.log") {
        configuration {
            deployable(type: 'war', file: 'todo.war')
        }

        zipUrlInstaller(installUrl: 'http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.32/bin/apache-tomcat-7.0.32.zip')
    }
}

dependencies {
    cargo 'org.codehaus.cargo:cargo-ant:1.3.1'
}

repositories {
    mavenCentral()
}

configurations.cargo.resolutionStrategy {
    failOnVersionConflict()
}
configurations {
    cargo {
        description = 'Classpath for Cargo Ant tasks.'
        visible = false
    }
}

task deployToLocalTomcat << {
    FileTree cargoDependencies = configurations.getByName('cargo').asFileTree
    ant.taskdef(resource: 'cargo.tasks', classpath: cargoDependencies.asPath)

    ant.cargo(containerId: 'tomcat7x', action: 'run', output: "$buildDir/output.log") {
        configuration {
            deployable(type: 'war', file: 'todo.war')
        }

        zipUrlInstaller(installUrl: 'http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.32/bin/apache-tomcat-7.0.32.zip')
    }
}

ext.cargoGroup = 'org.codehaus.cargo'
ext.cargoVersion = '1.3.1'

dependencies {
    cargo "$cargoGroup:cargo-ant:$cargoVersion"
}

repositories {
    mavenCentral()
}

configurations.cargo.resolutionStrategy {
    force "$cargoGroup:cargo-ant:1.3.0"
}
configurations {
    cargo {
        description = 'Classpath for Cargo Ant tasks.'
        visible = false
    }
}

task deployToLocalTomcat << {
    FileTree cargoDependencies = configurations.getByName('cargo').asFileTree
    println configurations.getByName('cargo').asPath
    ant.taskdef(resource: 'cargo.tasks', classpath: cargoDependencies.asPath)

    ant.cargo(containerId: 'tomcat7x', action: 'run', output: "$buildDir/output.log") {
        configuration {
            deployable(type: 'war', file: 'todo.war')
        }

        zipUrlInstaller(installUrl: 'http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.32/bin/apache-tomcat-7.0.32.zip')
    }
}

task copyDependenciesToLocalDir(type: Copy) {
    FileTree cargoDependencies = configurations.getByName('cargo').asFileTree
    from cargoDependencies
    into "${System.properties['user.home']}/libs/cargo"
}

task printDependencies << {
    configurations.cargo.incoming.resolutionResult.allDependencies { DependencyResult dependencyResult ->
        ModuleVersionSelector selector = dependencyResult.requested
        println "$selector.group:$selector.name:$selector.version ($selector)"
    }
}

ext.cargoGroup = 'org.codehaus.cargo'
ext.cargoVersion = '1.3.1'

dependencies {
    cargo group: cargoGroup, name: 'cargo-core-uberjar', version: cargoVersion
    cargo "$cargoGroup:cargo-ant:$cargoVersion"
}

repositories {
    mavenCentral()
}
apply plugin: 'java'

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.hibernate:hibernate-core:3.6.3.Final'
}configurations {
    cargo {
        description = 'Classpath for Cargo Ant tasks.'
        visible = false
    }
}

configurations {
    cargo {
        description = 'Classpath for Cargo Ant tasks.'
        visible = false
    }
}

task deployToLocalTomcat << {
    FileTree cargoDependencies = configurations.getByName('cargo').asFileTree
    ant.taskdef(resource: 'cargo.tasks', classpath: cargoDependencies.asPath)

    ant.cargo(containerId: 'tomcat7x', action: 'run', output: "$buildDir/output.log") {
        configuration {
            deployable(type: 'war', file: 'todo.war')
        }

        zipUrlInstaller(installUrl: 'http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.32/bin/apache-tomcat-7.0.32.zip')
    }
}configurations {
    cargo {
        description = 'Classpath for Cargo Ant tasks.'
        visible = false
    }
}

task deployToLocalTomcat << {
    FileTree cargoDependencies = configurations.getByName('cargo').asFileTree
    ant.taskdef(resource: 'cargo.tasks', classpath: cargoDependencies.asPath)

    ant.cargo(containerId: 'tomcat7x', action: 'run', output: "$buildDir/output.log") {
        configuration {
            deployable(type: 'war', file: 'todo.war')
        }

        zipUrlInstaller(installUrl: 'http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.32/bin/apache-tomcat-7.0.32.zip')
    }
}

ext.cargoGroup = 'org.codehaus.cargo'
ext.cargoVersion = '1.3.1'

dependencies {
    cargo group: cargoGroup, name: 'cargo-core-uberjar', version: cargoVersion
    cargo "$cargoGroup:cargo-ant:$cargoVersion"
}

repositories {
    mavenCentral()
}

configurations {
    cargo {
        description = 'Classpath for Cargo Ant tasks.'
        visible = false
    }
}

task deployToLocalTomcat << {
    FileTree cargoDependencies = configurations.getByName('cargo').asFileTree
    ant.taskdef(resource: 'cargo.tasks', classpath: cargoDependencies.asPath)

    ant.cargo(containerId: 'tomcat7x', action: 'run', output: "$buildDir/output.log") {
        configuration {
            deployable(type: 'war', file: 'todo.war')
        }

        zipUrlInstaller(installUrl: 'http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.32/bin/apache-tomcat-7.0.32.zip')
    }
}

dependencies {
    cargo('org.codehaus.cargo:cargo-ant:1.3.1') {
        exclude group: 'xml-apis', module: 'xml-apis'
    }
    cargo 'xml-apis:xml-apis:2.0.2'
}

repositories {
    mavenCentral()
}

configurations {
    cargo {
        description = 'Classpath for Cargo Ant tasks.'
        visible = false
    }
}

task deployToLocalTomcat << {
    FileTree cargoDependencies = configurations.getByName('cargo').asFileTree
    ant.taskdef(resource: 'cargo.tasks', classpath: cargoDependencies.asPath)

    ant.cargo(containerId: 'tomcat7x', action: 'run', output: "$buildDir/output.log") {
        configuration {
            deployable(type: 'war', file: 'todo.war')
        }

        zipUrlInstaller(installUrl: 'http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.32/bin/apache-tomcat-7.0.32.zip')
    }
}

dependencies {
    cargo('org.codehaus.cargo:cargo-ant:1.3.1') {
        transitive = false
    }

    // Selectively declare required dependencies
    cargo 'org.codehaus.cargo:cargo-core-uberjar:1.3.1'
}

repositories {
    mavenCentral()
}

configurations {
    cargo {
        description = 'Classpath for Cargo Ant tasks.'
        visible = false
    }
}

task deployToLocalTomcat << {
    FileTree cargoDependencies = configurations.getByName('cargo').asFileTree
    ant.taskdef(resource: 'cargo.tasks', classpath: cargoDependencies.asPath)

    ant.cargo(containerId: 'tomcat7x', action: 'run', output: "$buildDir/output.log") {
        configuration {
            deployable(type: 'war', file: 'todo.war')
        }

        zipUrlInstaller(installUrl: 'http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.32/bin/apache-tomcat-7.0.32.zip')
    }
}

dependencies {
    cargo 'org.codehaus.cargo:cargo-ant:1.+'
}

repositories {
    mavenCentral()
}

configurations {
    cargo {
        description = 'Classpath for Cargo Ant tasks.'
        visible = false
    }
}

task deployToLocalTomcat << {
    FileTree cargoDependencies = configurations.getByName('cargo').asFileTree
    ant.taskdef(resource: 'cargo.tasks', classpath: cargoDependencies.asPath)

    ant.cargo(containerId: 'tomcat7x', action: 'run', output: "$buildDir/output.log") {
        configuration {
            deployable(type: 'war', file: 'todo.war')
        }

        zipUrlInstaller(installUrl: 'http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.32/bin/apache-tomcat-7.0.32.zip')
    }
}

dependencies {
    cargo 'org.codehaus.cargo:cargo-ant:1.3.1'
}

repositories {
    mavenCentral()
}

task copyDependenciesToLocalDir(type: Copy) {
    from configurations.cargo.asFileTree
    into "${System.properties['user.home']}/libs/cargo"
}

configurations {
    cargo {
        description = 'Classpath for Cargo Ant tasks.'
        visible = false
    }
}

task deployToLocalTomcat << {
    FileTree cargoDependencies = configurations.getByName('cargo').asFileTree
    ant.taskdef(resource: 'cargo.tasks', classpath: cargoDependencies.asPath)

    ant.cargo(containerId: 'tomcat7x', action: 'run', output: "$buildDir/output.log") {
        configuration {
            deployable(type: 'war', file: 'todo.war')
        }

        zipUrlInstaller(installUrl: 'http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.32/bin/apache-tomcat-7.0.32.zip')
    }
}

dependencies {
    cargo fileTree(dir: "${System.properties['user.home']}/libs/cargo", include: '*.jar')
}

configurations {
    cargo {
        description = 'Classpath for Cargo Ant tasks.'
        visible = false
    }
}

task deployToLocalTomcat << {
    FileTree cargoDependencies = configurations.getByName('cargo').asFileTree
    ant.taskdef(resource: 'cargo.tasks', classpath: cargoDependencies.asPath)

    ant.cargo(containerId: 'tomcat7x', action: 'run', output: "$buildDir/output.log") {
        configuration {
            deployable(type: 'war', file: 'todo.war')
        }

        zipUrlInstaller(installUrl: 'http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.32/bin/apache-tomcat-7.0.32.zip')
    }
}

dependencies {
    cargo 'org.codehaus.cargo:cargo-ant:1.3.1'
}

repositories {
    maven {
        name 'Custom Maven Repository',
        url 'http://repository-gradle-in-action.forge.cloudbees.com/release/'
    }
}

configurations {
    spring
}

dependencies {
    spring group: 'org.springframework', name: 'org.springframework.core', version: '3.0.5.RELEASE', configuration: 'compile'
}

repositories {
    ivy {
        url 'http://repository.springsource.com/ivy/bundles/release'
        layout 'pattern', {
            artifact '[organisation]/[module]/[revision]/[artifact]-[revision].[ext]'
            ivy '[organisation]/[module]/[revision]/ivy-[revision].xml'
        }
    }

    ivy {
        url 'http://repository.springsource.com/ivy/bundles/external'
        layout 'maven'
    }
}configurations {
    cargo {
        description = 'Classpath for Cargo Ant tasks.'
        visible = false
    }
}

task deployToLocalTomcat << {
    FileTree cargoDependencies = configurations.getByName('cargo').asFileTree
    ant.taskdef(resource: 'cargo.tasks', classpath: cargoDependencies.asPath)

    ant.cargo(containerId: 'tomcat7x', action: 'run', output: "$buildDir/output.log") {
        configuration {
            deployable(type: 'war', file: 'todo.war')
        }

        zipUrlInstaller(installUrl: 'http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.32/bin/apache-tomcat-7.0.32.zip')
    }
}

dependencies {
    cargo name: 'activation', version: '1.1'
    cargo name: 'ant', version: '1.7.1'
    cargo name: 'ant-launcher', version: '1.7.1'
    cargo name: 'cargo-ant', version: '1.3.1'
    cargo name: 'cargo-core-uberjar', version: '1.3.1'
    cargo name: 'commons-discovery', version: '0.4'
    cargo name: 'commons-logging', version: '1.0.4'
    cargo name: 'dom4j', version: '1.4'
    cargo name: 'isorelax', version: '20020414'
    cargo ':jaxb-api:2.1', ':jaxb-impl:2.1.13', ':jaxen:1.0-FCS', ':jdom:1.0', ':msv:20020414',
            ':relaxngDatatype:20020414', ':saxpath:1.0-FCS', ':stax-api:1.0-2', ':xercesImpl:2.8.1',
            ':xml-apis:1.3.03'
}

repositories {
    flatDir(dir: "${System.properties['user.home']}/libs/cargo", name: 'Local libs directory')
}
configurations {
    cargo {
        description = 'Classpath for Cargo Ant tasks.'
        visible = false
    }
}

task deployToLocalTomcat << {
    FileTree cargoDependencies = configurations.getByName('cargo').asFileTree
    ant.taskdef(resource: 'cargo.tasks', classpath: cargoDependencies.asPath)

    ant.cargo(containerId: 'tomcat7x', action: 'run', output: "$buildDir/output.log") {
        configuration {
            deployable(type: 'war', file: 'todo.war')
        }

        zipUrlInstaller(installUrl: 'http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.32/bin/apache-tomcat-7.0.32.zip')
    }
}

dependencies {
    cargo 'org.codehaus.cargo:cargo-ant:1.3.1'
}

repositories {
    mavenCentral()
}

task printDependencies << {
    configurations.getByName('cargo').each { dependency ->
        println dependency
    }
}

ext.projectIds = ['group': 'com.manning.gia', 'version': '0.1']

group = projectIds.group
version = projectIds.version

project(':model') {
    group = projectIds.group
    version = projectIds.version
    apply plugin: 'java'
}

project(':repository') {
    group = projectIds.group
    version = projectIds.version
    apply plugin: 'java'
}

project(':web') {
    group = projectIds.group
    version = projectIds.version
    apply plugin: 'java'
    apply plugin: 'war'
    apply plugin: 'jetty'

    repositories {
        mavenCentral()
    }

    dependencies {
        providedCompile 'javax.servlet:servlet-api:2.5'
        runtime 'javax.servlet:jstl:1.1.2'
    }
}ext.projectIds = ['group': 'com.manning.gia', 'version': '0.1']

group = projectIds.group
version = projectIds.version

project(':model') {
    group = projectIds.group
    version = projectIds.version
    apply plugin: 'java'
}

project(':repository') {
    group = projectIds.group
    version = projectIds.version
    apply plugin: 'java'

    dependencies {
        compile project(':model')
    }
}

project(':web') {
    group = projectIds.group
    version = projectIds.version
    apply plugin: 'java'
    apply plugin: 'war'
    apply plugin: 'jetty'

    repositories {
        mavenCentral()
    }

    dependencies {
        compile project(':repository')
        providedCompile 'javax.servlet:servlet-api:2.5'
        runtime 'javax.servlet:jstl:1.1.2'
    }
}ext.projectIds = ['group': 'com.manning.gia', 'version': '0.1']

group = projectIds.group
version = projectIds.version

task hello << {
    println 'Hello from root project'
}

project(':model') {
    group = projectIds.group
    version = projectIds.version
    apply plugin: 'java'

    task hello << {
        println 'Hello from model project'
    }
}

project(':repository') {
    group = projectIds.group
    version = projectIds.version
    apply plugin: 'java'

    dependencies {
        compile project(':model')
    }

    task hello << {
        println 'Hello from repository project'
    }
}

project(':web') {
    group = projectIds.group
    version = projectIds.version
    apply plugin: 'java'
    apply plugin: 'war'
    apply plugin: 'jetty'

    repositories {
        mavenCentral()
    }

    dependencies {
        compile project(':repository')
        providedCompile 'javax.servlet:servlet-api:2.5'
        runtime 'javax.servlet:jstl:1.1.2'
    }
}ext.projectIds = ['group': 'com.manning.gia', 'version': '0.1']

group = projectIds.group
version = projectIds.version

task hello << {
    println 'Hello from root project'
}

project(':model') {
    group = projectIds.group
    version = projectIds.version
    apply plugin: 'java'

    task hello(dependsOn: ':repository:hello') << {
        println 'Hello from model project'
    }
}

project(':repository') {
    group = projectIds.group
    version = projectIds.version
    apply plugin: 'java'

    dependencies {
        compile project(':model')
    }

    task hello << {
        println 'Hello from repository project'
    }
}

project(':web') {
    group = projectIds.group
    version = projectIds.version
    apply plugin: 'java'
    apply plugin: 'war'
    apply plugin: 'jetty'

    repositories {
        mavenCentral()
    }

    dependencies {
        compile project(':repository')
        providedCompile 'javax.servlet:servlet-api:2.5'
        runtime 'javax.servlet:jstl:1.1.2'
    }
}allprojects {
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}

project(':repository') {
    dependencies {
        compile project(':model')
    }
}

project(':web') {
    apply plugin: 'war'
    apply plugin: 'jetty'

    repositories {
        mavenCentral()
    }

    dependencies {
        compile project(':repository')
        providedCompile 'javax.servlet:servlet-api:2.5'
        runtime 'javax.servlet:jstl:1.1.2'
    }
}allprojects {
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}dependencies {
    compile project(':model')
}
apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}
allprojects {
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}allprojects {
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}dependencies {
    compile project(':model')
}apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}
allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}
repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    testCompile 'junit:junit:4.11'
}apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}
repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    testCompile 'junit:junit:4.11'
}
apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    testCompile 'org.testng:testng:6.8'
}

test {
    useTestNG()
}apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}apply plugin: 'groovy'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    testCompile 'org.codehaus.groovy:groovy:2.0.6'
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
}apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}apply plugin: 'groovy'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    testCompile 'junit:junit:4.11'
    testCompile 'org.testng:testng:6.8'
    testCompile 'org.codehaus.groovy:groovy:2.0.6'
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
}

task testNG(type: Test) {
    useTestNG()
}

test.dependsOn testNGapply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}
apply plugin: 'groovy'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    testCompile 'junit:junit:4.11'
    testCompile 'org.testng:testng:6.8'
    testCompile 'org.codehaus.groovy:groovy:2.0.6'
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
}

task testNG(type: Test) {
    useTestNG()
}

test.dependsOn testNG

task aggregateTestReports(type: TestReport) {
    destinationDir = test.reports.html.destination
    reportOn test, testNG
}

check.dependsOn aggregateTestReportsapply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    testCompile 'junit:junit:4.11'
}

test {
    systemProperty 'items', '20'
    jvmArgs '-Xms128m', '-Xmx256m', '-XX:MaxPermSize=128m'

    testLogging {
        showStandardStreams = true
    }
}apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    testCompile 'junit:junit:4.11'
}

test {
    systemProperty 'items', '20'

    testLogging {
        showStandardStreams = true
    }
}apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    testCompile 'junit:junit:4.11'
}

test {
    testLogging {
        exceptionFormat 'full'
    }
}apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}
repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    testCompile 'junit:junit:4.11'
}

test {
    testLogging {
        events 'started', 'passed', 'skipped', 'failed'
    }
}apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}
repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    testCompile 'junit:junit:4.11'
}

test {
    testLogging {
        exceptionFormat 'full'
        events 'passed', 'skipped', 'failed'
    }

    forkEvery = 5
    maxParallelForks = determineMaxParallelForks()
}

def determineMaxParallelForks() {
    (Runtime.runtime.availableProcessors() / 2) < 1 ? 1 : Runtime.runtime.availableProcessors() / 2
}apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}
apply plugin: 'announce'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    testCompile 'junit:junit:4.11'
}

test.afterSuite { TestDescriptor suite, TestResult result ->
    if (!suite.parent && result.getTestCount() > 0) {
        long elapsedTestTime = result.getEndTime() - result.getStartTime()
        announce.announce("Elapsed time for execution of ${result.getTestCount()} test(s): $elapsedTestTime ms", 'local')
    }
}apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}
apply plugin: 'announce'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    testCompile 'junit:junit:4.11'
}

test.addTestListener(new NotificationTestListener(project))

class NotificationTestListener implements TestListener {
    final Project project

    NotificationTestListener(Project project) {
        this.project = project
    }

    @Override
    void afterSuite(TestDescriptor suite, TestResult result) {
        if (!suite.parent && result.getTestCount() > 0) {
            long elapsedTestTime = result.getEndTime() - result.getStartTime()
            project.announce.announce("Elapsed time for execution of ${result.getTestCount()} test(s): $elapsedTestTime ms", 'local')
        }
    }

    @Override
    void afterTest(TestDescriptor testDescriptor, TestResult result) {}

    @Override
    void beforeSuite(TestDescriptor suite) {}

    @Override
    void beforeTest(TestDescriptor testDescriptor) {}
}apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}apply from: 'databaseSetup.gradle'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}

test {
    exclude '**/*IntegTest.class'
    reports.html.destination = file("$reports.html.destination/unit")
    reports.junitXml.destination = file("$reports.junitXml.destination/unit")
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    include '**/*IntegTest.class'
    reports.html.destination = file("$reports.html.destination/integration")
    reports.junitXml.destination = file("$reports.junitXml.destination/integration")
    dependsOn startAndPrepareDatabase
    finalizedBy stopDatabase
}

tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
        exceptionFormat 'full'
    }
}

check.dependsOn integrationTestapply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}apply from: 'databaseSetup.gradle'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    dependsOn startAndPrepareDatabase
    finalizedBy stopDatabase
}

tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
        exceptionFormat 'full'
    }
}

check.dependsOn integrationTestapply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    testCompile 'junit:junit:4.11'
}apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'groovy'

repositories {
    mavenCentral()
}

configurations {
    functTestCompile.extendsFrom testCompile
    functTestRuntime.extendsFrom testRuntime
}

ext.seleniumGroup = 'org.seleniumhq.selenium'
ext.seleniumVersion = '2.32.0'

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
    testCompile 'org.codehaus.groovy:groovy:2.0.6'
    testCompile 'junit:junit:4.11'
    functTestCompile 'org.codehaus.geb:geb-junit4:0.7.2'
    functTestCompile "$seleniumGroup:selenium-api:$seleniumVersion"
    functTestRuntime "$seleniumGroup:selenium-firefox-driver:$seleniumVersion"
}

sourceSets {
    functionalTest {
        groovy.srcDir file('src/functTest/groovy')
        resources.srcDir file('src/functTest/resources')
        compileClasspath = sourceSets.main.output + configurations.functTestCompile
        runtimeClasspath = output + compileClasspath + configurations.functTestRuntime
    }
}

ext {
    functionalJettyStopPort = 8081
    functionalJettyStopKey = 'stopKey'
}

task functionalJettyRun(type: org.gradle.api.plugins.jetty.JettyRun) {
    stopPort = functionalJettyStopPort
    stopKey = functionalJettyStopKey
    contextPath = 'todo'
    daemon = true
}

task functionalJettyStop(type: org.gradle.api.plugins.jetty.JettyStop) {
    stopPort = functionalJettyStopPort
    stopKey = functionalJettyStopKey
}

task functionalTest(type: Test) {
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
    reports.html.destination = file("$reports.html.destination/functional")
    reports.junitXml.destination = file("$reports.junitXml.destination/functional")
    systemProperty 'geb.env', 'firefox'
    systemProperty 'geb.build.reportsDir', reporting.file("$name/geb")
    dependsOn functionalJettyRun
    finalizedBy functionalJettyStop
}

check.dependsOn functionalTestapply from: 'cloudbees.gradle'apply from: 'cloudbees.gradle'ext {
    apiUrl = 'https://api.cloudbees.com/api'
    apiFormat = 'xml'
    apiVersion = '1.0'
}

if (project.hasProperty('cloudbeesApiKey')) {
    ext.apiKey = project.property('cloudbeesApiKey')
}

if (project.hasProperty('cloudbeesApiSecret')) {
    ext.secret = project.property('cloudbeesApiSecret')
}

import com.manning.gia.plugins.cloudbees.tasks.app.CloudBeesAppInfo
import com.manning.gia.plugins.cloudbees.tasks.app.CloudBeesAppDeployWar

task cloudBeesAppInfo(type: CloudBeesAppInfo) {
    apiUrl = project.apiUrl
    apiKey = project.apiKey
    secret = project.secret
    apiFormat = project.apiFormat
    apiVersion = project.apiVersion
    appId = project.hasProperty('appId') ? project.appId : null
}

task cloudBeesAppDeployWar(type: CloudBeesAppDeployWar) {
    apiUrl = project.apiUrl
    apiKey = project.apiKey
    secret = project.secret
    apiFormat = project.apiFormat
    apiVersion = project.apiVersion
    appId = project.hasProperty('appId') ? project.appId : null
    message = project.hasProperty('message') ? project.message : null
    warFile = project.hasProperty('warFile') ? file(project.warFile) : null
}repositories {
    mavenCentral()
}

dependencies {
    compile 'com.cloudbees:cloudbees-api-client:1.4.0'
}ext {
    apiUrl = 'https://api.cloudbees.com/api'
    apiFormat = 'xml'
    apiVersion = '1.0'
}

if (project.hasProperty('cloudbeesApiKey')) {
    ext.apiKey = project.property('cloudbeesApiKey')
}

if (project.hasProperty('cloudbeesApiSecret')) {
    ext.secret = project.property('cloudbeesApiSecret')
}

import com.manning.gia.plugins.cloudbees.tasks.app.CloudBeesAppInfo
import com.manning.gia.plugins.cloudbees.tasks.app.CloudBeesAppDeployWar

task cloudBeesAppInfo(type: CloudBeesAppInfo) {
    apiUrl = project.apiUrl
    apiKey = project.apiKey
    secret = project.secret
    apiFormat = project.apiFormat
    apiVersion = project.apiVersion
    appId = project.hasProperty('appId') ? project.appId : null
}

task cloudBeesAppDeployWar(type: CloudBeesAppDeployWar) {
    apiUrl = project.apiUrl
    apiKey = project.apiKey
    secret = project.secret
    apiFormat = project.apiFormat
    apiVersion = project.apiVersion
    appId = project.hasProperty('appId') ? project.appId : null
    message = project.hasProperty('message') ? project.message : null
    warFile = project.hasProperty('warFile') ? file(project.warFile) : null
}repositories {
    mavenCentral()
}

dependencies {
    compile 'com.cloudbees:cloudbees-api-client:1.4.0'
}ext {
    apiUrl = 'https://api.cloudbees.com/api'
    apiFormat = 'xml'
    apiVersion = '1.0'
}

if (project.hasProperty('cloudbeesApiKey')) {
    ext.apiKey = project.property('cloudbeesApiKey')
}

if (project.hasProperty('cloudbeesApiSecret')) {
    ext.secret = project.property('cloudbeesApiSecret')
}

import com.manning.gia.plugins.cloudbees.tasks.app.CloudBeesAppInfo
import com.manning.gia.plugins.cloudbees.tasks.app.CloudBeesAppDeployWar

task cloudBeesAppInfo(type: CloudBeesAppInfo) {
    apiUrl = project.apiUrl
    apiKey = project.apiKey
    secret = project.secret
    apiFormat = project.apiFormat
    apiVersion = project.apiVersion
    appId = project.hasProperty('appId') ? project.appId : null
}

task cloudBeesAppDeployWar(type: CloudBeesAppDeployWar) {
    apiUrl = project.apiUrl
    apiKey = project.apiKey
    secret = project.secret
    apiFormat = project.apiFormat
    apiVersion = project.apiVersion
    appId = project.hasProperty('appId') ? project.appId : null
    message = project.hasProperty('message') ? project.message : null
    warFile = project.hasProperty('warFile') ? file(project.warFile) : null
}repositories {
    mavenCentral()
}

dependencies {
    compile 'com.cloudbees:cloudbees-api-client:1.4.0'
    testCompile localGroovy()
    testCompile 'org.spockframework:spock-core:0.6-groovy-1.8'
}apply plugin: com.manning.gia.plugins.cloudbees.CloudBeesPluginrepositories {
    mavenCentral()
}

dependencies {
    compile 'com.cloudbees:cloudbees-api-client:1.4.0'
    testCompile localGroovy()
    testCompile 'org.spockframework:spock-core:0.6-groovy-1.8'
}if (project.hasProperty('cloudbeesApiKey')) {
    ext.apiKey = project.property('cloudbeesApiKey')
}

if (project.hasProperty('cloudbeesApiSecret')) {
    ext.secret = project.property('cloudbeesApiSecret')
}

apply plugin: com.manning.gia.plugins.cloudbees.CloudBeesPlugin

cloudBees {
    apiUrl = 'https://api.cloudbees.com/api'
    apiKey = project.apiKey
    secret = project.secret
    appId = 'gradle-in-action/todo'
}repositories {
    mavenCentral()
}

dependencies {
    compile 'com.cloudbees:cloudbees-api-client:1.4.0'
    testCompile localGroovy()
    testCompile 'org.spockframework:spock-core:0.6-groovy-1.8'
}if (project.hasProperty('cloudbeesApiKey')) {
    ext.apiKey = project.property('cloudbeesApiKey')
}

if (project.hasProperty('cloudbeesApiSecret')) {
    ext.secret = project.property('cloudbeesApiSecret')
}

apply plugin: com.manning.gia.plugins.cloudbees.CloudBeesPlugin

cloudBees {
    apiUrl = 'https://api.cloudbees.com/api'
    apiKey = project.apiKey
    secret = project.secret
    appId = 'gradle-in-action/todo'
}repositories {
    mavenCentral()
}

dependencies {
    compile 'com.cloudbees:cloudbees-api-client:1.4.0'
    testCompile localGroovy()
    testCompile 'org.spockframework:spock-core:0.6-groovy-1.8'
}if (project.hasProperty('cloudbeesApiKey')) {
    ext.apiKey = project.property('cloudbeesApiKey')
}

if (project.hasProperty('cloudbeesApiSecret')) {
    ext.secret = project.property('cloudbeesApiSecret')
}

apply plugin: 'cloudbees'

cloudBees {
    apiUrl = 'https://api.cloudbees.com/api'
    apiKey = project.apiKey
    secret = project.secret
    appId = 'gradle-in-action/todo'
}repositories {
    mavenCentral()
}

dependencies {
    compile 'com.cloudbees:cloudbees-api-client:1.4.0'
    testCompile localGroovy()
    testCompile 'org.spockframework:spock-core:0.6-groovy-1.8'
}apply plugin: 'groovy'
apply plugin: 'maven'

archivesBaseName = 'cloudbees-plugin'
group = 'com.manning.gia'
version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    compile localGroovy()
    compile gradleApi()
    compile 'com.cloudbees:cloudbees-api-client:1.4.0'
    testCompile 'org.spockframework:spock-core:0.6-groovy-1.8'
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file://$projectDir/../repo")
        }
    }
}allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
}buildscript {
    repositories {
        maven { url "file://$projectDir/../../repo" }
        mavenCentral()
    }

    dependencies {
        classpath 'com.manning.gia:cloudbees-plugin:1.0'
    }
}

apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'cloudbees'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}

if (project.hasProperty('cloudbeesApiKey')) {
    ext.apiKey = project.property('cloudbeesApiKey')
}

if (project.hasProperty('cloudbeesApiSecret')) {
    ext.secret = project.property('cloudbeesApiSecret')
}

cloudBees {
    apiUrl = 'https://api.cloudbees.com/api'
    apiKey = project.apiKey
    secret = project.secret
    appId = 'gradle-in-action/todo'
}task cleanAnt(type: GradleBuild) {
    buildFile = 'importedAntBuild.gradle'
    tasks = ['clean']
}

apply plugin: 'java'
ant.importBuild '../ant/build.xml'

[init, compile, dist]*.logging*.level = LogLevel.INFO

init {
    doFirst {
        logger.quiet "Deleting the directory '${ant.properties.build}'."
    }

    doLast {
        logger.quiet "Starting from a clean slate."
    }
}

ext.buildDir = '../ant/build'
ant.properties.build = "$buildDir/classes"
ant.properties.dist = "$buildDir/libs"

task sourcesJar(type: Jar) {
    baseName = 'my-app'
    classifier = 'sources'
    version = ant.properties.version
    destinationDir = file(ant.properties.dist)
    from new File(ant.properties.src, 'main/java')
}

dist.dependsOn sourcesJar

compile {
    inputs.dir file(ant.properties.src)
    outputs.dir file(ant.properties.build)
}Not Foundant.importBuild '../ant/build.xml'

[init, compile, dist]*.logging*.level = LogLevel.INFO

init {
    doFirst {
        logger.quiet "Deleting the directory '${ant.properties.build}'."
    }

    doLast {
        logger.quiet "Starting from a clean slate."
    }
}

ext.antBuildDir = '../ant/build'
ant.properties.build = "$antBuildDir/classes"
ant.properties.dist = "$antBuildDir/libs"

task sourcesJar(type: Jar) {
    baseName = 'my-app'
    classifier = 'sources'
    version = ant.properties.version
    destinationDir = file(ant.properties.dist)
    from new File(ant.properties.src, 'main/java')
}

dist.dependsOn sourcesJar

compile {
    inputs.dir file(ant.properties.src)
    outputs.dir file(ant.properties.build)
}

task downloadReleaseDocumentation {
    logging.level = LogLevel.INFO
    ext.repoUrl = 'https://repository-gradle-in-action.forge.cloudbees.com/release'

    doLast {
        ant.get(dest: ant.properties.build) {
            url(url: "$repoUrl/files/README.txt")
            url(url: "$repoUrl/files/RELEASE_NOTES.txt")
        }
    }
}

dist.dependsOn downloadReleaseDocumentation

configurations {
    antCompile
}

repositories {
    mavenCentral()
}

dependencies {
    antCompile 'org.apache.commons:commons-lang3:3.1'
}

ant.properties.antCompileClasspath = configurations.antCompile.asPath
apply plugin: 'java'

configurations {
    provided
    testProvided.extendsFrom provided
}

sourceSets {
    main {
        compileClasspath += configurations.provided
    }

    test {
        compileClasspath += configurations.testProvided
    }
}

repositories {
    mavenCentral()
}

dependencies {
    provided 'mysql:mysql-connector-java:5.1.8'
}
def getMavenSettingsCredentials = {
    File mavenSettings = new File(projectDir, 'settings.xml')
    def xmlSlurper = new XmlSlurper()
    xmlSlurper.parse(mavenSettings)
}

task printAppServerHome << {
    def env = project.hasProperty('env') ? project.getProperty('env') : 'dev'
    logger.quiet "Using environment '$env'"
    def settings = getMavenSettingsCredentials()
    def allProfiles = settings.profiles.profile
    def profile = allProfiles.find { it.activation.property.name == 'env' && it.activation.property.value == env }
    def appServerHome = profile.properties.'appserver.home'
    println "The $env server's home directory: $appServerHome"
}apply plugin: 'compare-gradle-builds'

allprojects {
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.6'
}

compareGradleBuilds {
    sourceBuild {
        projectDir = rootProject.projectDir
        gradleVersion = '1.6'
    }
    targetBuild {
        projectDir = sourceBuild.projectDir
        gradleVersion = '1.7'
    }
}apply from: 'databaseSetup.gradle'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
        exceptionFormat 'full'
    }
}

startDatabase.dependsOn test
integrationTest.dependsOn startAndPrepareDatabase
stopDatabase.dependsOn integrationTest
check.dependsOn stopDatabaseapply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'groovy'
apply plugin: 'eclipse'

repositories {
    mavenCentral()
}

configurations {
    functTestCompile.extendsFrom testCompile
    functTestRuntime.extendsFrom testRuntime
}

ext.seleniumGroup = 'org.seleniumhq.selenium'
ext.seleniumVersion = '2.32.0'

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
    runtime 'taglibs:standard:1.1.2'
    testCompile 'org.codehaus.groovy:groovy:2.0.6'
    testCompile 'junit:junit:4.11'
    functTestCompile 'org.codehaus.geb:geb-junit4:0.7.2'
    functTestCompile "$seleniumGroup:selenium-api:$seleniumVersion"
    functTestRuntime "$seleniumGroup:selenium-firefox-driver:$seleniumVersion"
}

sourceSets {
    functionalTest {
        groovy.srcDir file('src/functTest/groovy')
        resources.srcDir file('src/functTest/resources')
        compileClasspath = sourceSets.main.output + configurations.functTestCompile
        runtimeClasspath = output + compileClasspath + configurations.functTestRuntime
    }
}

task functionalTest(type: Test) {
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
    testReportDir = file("$testReportDir/functional")
    testResultsDir = file("$testResultsDir/functional")
    systemProperty 'geb.env', 'firefox'
    systemProperty 'geb.build.reportsDir', reporting.file("$name/geb")
}

ext {
    functionalJettyStopPort = 8081
    functionalJettyStopKey = 'stopKey'
}

task functionalJettyRun(type: org.gradle.api.plugins.jetty.JettyRun) {
    stopPort = functionalJettyStopPort
    stopKey = functionalJettyStopKey
    contextPath = 'todo'
    daemon = true
}

task functionalJettyStop(type: org.gradle.api.plugins.jetty.JettyStop) {
    stopPort = functionalJettyStopPort
    stopKey = functionalJettyStopKey
}

functionalJettyRun.dependsOn functionalTestClasses
functionalTest.dependsOn functionalJettyRun
functionalJettyStop.dependsOn functionalTest
check.dependsOn functionalJettyStop

eclipse {
    classpath {
        plusConfigurations << configurations.functTestCompile
        plusConfigurations << configurations.functTestRuntime
    }
}allprojects {
    apply plugin: 'eclipse'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'

    eclipse {
        jdt {
            sourceCompatibility = 1.6
            targetCompatibility = 1.6
        }

        classpath {
            downloadSources = true
            downloadJavadoc = false
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.7'
}

eclipse {
    project {
        name = 'todo'
        comment = 'A task management application'
        referencedProjects 'model', 'repository', 'web'
    }
}eclipse {
    project {
        comment = 'Data representation of To Do items'
    }
}apply from: 'databaseSetup.gradle'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    dependsOn startAndPrepareDatabase
    finalizedBy stopDatabase
}

tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
        exceptionFormat 'full'
    }
}

check.dependsOn integrationTest

eclipse {
    project {
        comment = 'Storage and retrieval of To Do items'
    }
}apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'groovy'
apply plugin: 'eclipse-wtp'

repositories {
    mavenCentral()
}

configurations {
    functTestCompile.extendsFrom testCompile
    functTestRuntime.extendsFrom testRuntime
}

ext.seleniumGroup = 'org.seleniumhq.selenium'
ext.seleniumVersion = '2.32.0'

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
    runtime 'taglibs:standard:1.1.2'
    testCompile 'org.codehaus.groovy:groovy:2.0.6'
    testCompile 'junit:junit:4.11'
    functTestCompile 'org.codehaus.geb:geb-junit4:0.7.2'
    functTestCompile "$seleniumGroup:selenium-api:$seleniumVersion"
    functTestRuntime "$seleniumGroup:selenium-firefox-driver:$seleniumVersion"
}

sourceSets {
    functionalTest {
        groovy.srcDir file('src/functTest/groovy')
        resources.srcDir file('src/functTest/resources')
        compileClasspath = sourceSets.main.output + configurations.functTestCompile
        runtimeClasspath = output + compileClasspath + configurations.functTestRuntime
    }
}

ext {
    functionalJettyStopPort = 8081
    functionalJettyStopKey = 'stopKey'
}

task functionalJettyRun(type: org.gradle.api.plugins.jetty.JettyRun) {
    stopPort = functionalJettyStopPort
    stopKey = functionalJettyStopKey
    contextPath = 'todo'
    daemon = true
}

task functionalJettyStop(type: org.gradle.api.plugins.jetty.JettyStop) {
    stopPort = functionalJettyStopPort
    stopKey = functionalJettyStopKey
}

task functionalTest(type: Test) {
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
    reports.html.destination = file("$reports.html.destination/functional")
    reports.junitXml.destination = file("$reports.junitXml.destination/functional")
    systemProperty 'geb.env', 'firefox'
    systemProperty 'geb.build.reportsDir', reporting.file("$name/geb")
    dependsOn functionalJettyRun
    finalizedBy functionalJettyStop
}

check.dependsOn functionalTest

eclipse {
    project {
        comment = 'Web components for managing To Do items in the browser'
    }

    classpath {
        plusConfigurations << configurations.functTestCompile
        plusConfigurations << configurations.functTestRuntime
    }

    wtp {
        component {
            contextPath = 'todo'
        }
    }
}allprojects {
    apply plugin: 'eclipse'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'

    eclipse {
        jdt {
            sourceCompatibility = 1.6
            targetCompatibility = 1.6
        }

        classpath {
            downloadSources = true
            downloadJavadoc = false
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.7'
}

eclipse {
    project {
        name = 'todo'
        comment = 'A task management application'
        referencedProjects 'model', 'repository', 'web'
    }
}eclipse {
    project {
        comment = 'Data representation of To Do items'
    }
}apply from: 'databaseSetup.gradle'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    dependsOn startAndPrepareDatabase
    finalizedBy stopDatabase
}

tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
        exceptionFormat 'full'
    }
}

check.dependsOn integrationTest

eclipse {
    project {
        comment = 'Storage and retrieval of To Do items'
    }
}apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'groovy'
apply plugin: 'eclipse-wtp'

repositories {
    mavenCentral()
}

configurations {
    functTestCompile.extendsFrom testCompile
    functTestRuntime.extendsFrom testRuntime
}

ext.seleniumGroup = 'org.seleniumhq.selenium'
ext.seleniumVersion = '2.32.0'

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
    runtime 'taglibs:standard:1.1.2'
    testCompile 'org.codehaus.groovy:groovy:2.0.6'
    testCompile 'junit:junit:4.11'
    functTestCompile 'org.codehaus.geb:geb-junit4:0.7.2'
    functTestCompile "$seleniumGroup:selenium-api:$seleniumVersion"
    functTestRuntime "$seleniumGroup:selenium-firefox-driver:$seleniumVersion"
}

sourceSets {
    functionalTest {
        groovy.srcDir file('src/functTest/groovy')
        resources.srcDir file('src/functTest/resources')
        compileClasspath = sourceSets.main.output + configurations.functTestCompile
        runtimeClasspath = output + compileClasspath + configurations.functTestRuntime
    }
}

ext {
    functionalJettyStopPort = 8081
    functionalJettyStopKey = 'stopKey'
}

task functionalJettyRun(type: org.gradle.api.plugins.jetty.JettyRun) {
    stopPort = functionalJettyStopPort
    stopKey = functionalJettyStopKey
    contextPath = 'todo'
    daemon = true
}

task functionalJettyStop(type: org.gradle.api.plugins.jetty.JettyStop) {
    stopPort = functionalJettyStopPort
    stopKey = functionalJettyStopKey
}

task functionalTest(type: Test) {
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
    reports.html.destination = file("$reports.html.destination/functional")
    reports.junitXml.destination = file("$reports.junitXml.destination/functional")
    systemProperty 'geb.env', 'firefox'
    systemProperty 'geb.build.reportsDir', reporting.file("$name/geb")
    dependsOn functionalJettyRun
    finalizedBy functionalJettyStop
}

check.dependsOn functionalTest

eclipse {
    project {
        comment = 'Web components for managing To Do items in the browser'
    }

    classpath {
        plusConfigurations << configurations.functTestCompile
        plusConfigurations << configurations.functTestRuntime
    }

    wtp {
        component {
            contextPath = 'todo'
        }

        facet {
            file {
                withXml { xml ->
                    def node = xml.asNode()
                    node.appendNode('installed', [facet: 'wst.jsdt.web', version: '1.0'])
                }
            }
        }
    }
}allprojects {
    apply plugin: 'eclipse'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'

    eclipse {
        jdt {
            sourceCompatibility = 1.6
            targetCompatibility = 1.6
        }

        classpath {
            downloadSources = true
            downloadJavadoc = false
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.7'
}

eclipse {
    project {
        name = 'todo'
        comment = 'A task management application'
        referencedProjects 'model', 'repository', 'web'
    }
}eclipse {
    project {
        comment = 'Data representation of To Do items'
    }
}apply from: 'databaseSetup.gradle'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    dependsOn startAndPrepareDatabase
    finalizedBy stopDatabase
}

tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
        exceptionFormat 'full'
    }
}

check.dependsOn integrationTest

eclipse {
    project {
        comment = 'Storage and retrieval of To Do items'
    }
}import org.gradle.plugins.ide.eclipse.model.Facet

apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'groovy'
apply plugin: 'eclipse-wtp'

repositories {
    mavenCentral()
}

configurations {
    functTestCompile.extendsFrom testCompile
    functTestRuntime.extendsFrom testRuntime
}

ext.seleniumGroup = 'org.seleniumhq.selenium'
ext.seleniumVersion = '2.32.0'

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
    runtime 'taglibs:standard:1.1.2'
    testCompile 'org.codehaus.groovy:groovy:2.0.6'
    testCompile 'junit:junit:4.11'
    functTestCompile 'org.codehaus.geb:geb-junit4:0.7.2'
    functTestCompile "$seleniumGroup:selenium-api:$seleniumVersion"
    functTestRuntime "$seleniumGroup:selenium-firefox-driver:$seleniumVersion"
}

sourceSets {
    functionalTest {
        groovy.srcDir file('src/functTest/groovy')
        resources.srcDir file('src/functTest/resources')
        compileClasspath = sourceSets.main.output + configurations.functTestCompile
        runtimeClasspath = output + compileClasspath + configurations.functTestRuntime
    }
}

ext {
    functionalJettyStopPort = 8081
    functionalJettyStopKey = 'stopKey'
}

task functionalJettyRun(type: org.gradle.api.plugins.jetty.JettyRun) {
    stopPort = functionalJettyStopPort
    stopKey = functionalJettyStopKey
    contextPath = 'todo'
    daemon = true
}

task functionalJettyStop(type: org.gradle.api.plugins.jetty.JettyStop) {
    stopPort = functionalJettyStopPort
    stopKey = functionalJettyStopKey
}

task functionalTest(type: Test) {
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
    reports.html.destination = file("$reports.html.destination/functional")
    reports.junitXml.destination = file("$reports.junitXml.destination/functional")
    systemProperty 'geb.env', 'firefox'
    systemProperty 'geb.build.reportsDir', reporting.file("$name/geb")
    dependsOn functionalJettyRun
    finalizedBy functionalJettyStop
}

check.dependsOn functionalTest

eclipse {
    project {
        comment = 'Web components for managing To Do items in the browser'
    }

    classpath {
        plusConfigurations << configurations.functTestCompile
        plusConfigurations << configurations.functTestRuntime
    }

    wtp {
        component {
            contextPath = 'todo'
        }

        facet {
            file {
                whenMerged { wtpComponent ->
                    wtpComponent.facets << new Facet('wst.jsdt.web', '1.0')
                }
            }
        }
    }
}allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'

    idea {
        module {
            downloadSources = true
            downloadJavadoc = false
        }
    }
}

idea {
    project {
        jdkName = '1.6'
        languageLevel = '1.6'
    }
}
apply from: 'databaseSetup.gradle'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    dependsOn startAndPrepareDatabase
    finalizedBy stopDatabase
}

tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
        exceptionFormat 'full'
    }
}

check.dependsOn integrationTest

idea {
    module {
        sourceSets.integrationTest.allSource.srcDirs.each {
            testSourceDirs += it
        }
    }
}apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'groovy'

repositories {
    mavenCentral()
}

configurations {
    functTestCompile.extendsFrom testCompile
    functTestRuntime.extendsFrom testRuntime
}

ext.seleniumGroup = 'org.seleniumhq.selenium'
ext.seleniumVersion = '2.32.0'

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
    runtime 'taglibs:standard:1.1.2'
    testCompile 'org.codehaus.groovy:groovy:2.0.6'
    testCompile 'junit:junit:4.11'
    functTestCompile 'org.codehaus.geb:geb-junit4:0.7.2'
    functTestCompile "$seleniumGroup:selenium-api:$seleniumVersion"
    functTestRuntime "$seleniumGroup:selenium-firefox-driver:$seleniumVersion"
}

sourceSets {
    functionalTest {
        groovy.srcDir file('src/functTest/groovy')
        resources.srcDir file('src/functTest/resources')
        compileClasspath = sourceSets.main.output + configurations.functTestCompile
        runtimeClasspath = output + compileClasspath + configurations.functTestRuntime
    }
}

ext {
    functionalJettyStopPort = 8081
    functionalJettyStopKey = 'stopKey'
}

task functionalJettyRun(type: org.gradle.api.plugins.jetty.JettyRun) {
    stopPort = functionalJettyStopPort
    stopKey = functionalJettyStopKey
    contextPath = 'todo'
    daemon = true
}

task functionalJettyStop(type: org.gradle.api.plugins.jetty.JettyStop) {
    stopPort = functionalJettyStopPort
    stopKey = functionalJettyStopKey
}

task functionalTest(type: Test) {
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
    reports.html.destination = file("$reports.html.destination/functional")
    reports.junitXml.destination = file("$reports.junitXml.destination/functional")
    systemProperty 'geb.env', 'firefox'
    systemProperty 'geb.build.reportsDir', reporting.file("$name/geb")
    dependsOn functionalJettyRun
    finalizedBy functionalJettyStop
}

check.dependsOn functionalTest

idea {
    module {
        sourceSets.functionalTest.allSource.srcDirs.each {
            testSourceDirs += it
        }

        scopes.TEST.plus += configurations.functTestCompile
        scopes.TEST.plus += configurations.functTestRuntime
    }
}allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'

    idea {
        module {
            downloadSources = true
            downloadJavadoc = false
        }
    }
}

idea {
    project {
        jdkName = '1.6'
        languageLevel = '1.6'

        ipr.withXml { provider ->
            def node = provider.asNode()
            def gradleSettings = node.appendNode('component', [name: 'GradleSettings'])
            gradleSettings.appendNode('option', [name: 'linkedProjectPath', value: '$PROJECT_DIR$/build.gradle'])
        }
    }
}apply from: 'databaseSetup.gradle'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    dependsOn startAndPrepareDatabase
    finalizedBy stopDatabase
}

tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
        exceptionFormat 'full'
    }
}

check.dependsOn integrationTest

idea {
    module {
        sourceSets.integrationTest.allSource.srcDirs.each {
            testSourceDirs += it
        }
    }
}apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'groovy'

repositories {
    mavenCentral()
}

configurations {
    functTestCompile.extendsFrom testCompile
    functTestRuntime.extendsFrom testRuntime
}

ext.seleniumGroup = 'org.seleniumhq.selenium'
ext.seleniumVersion = '2.32.0'

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
    testCompile 'org.codehaus.groovy:groovy:2.0.6'
    testCompile 'junit:junit:4.11'
    functTestCompile 'org.codehaus.geb:geb-junit4:0.7.2'
    functTestCompile "$seleniumGroup:selenium-api:$seleniumVersion"
    functTestRuntime "$seleniumGroup:selenium-firefox-driver:$seleniumVersion"
}

sourceSets {
    functionalTest {
        groovy.srcDir file('src/functTest/groovy')
        resources.srcDir file('src/functTest/resources')
        compileClasspath = sourceSets.main.output + configurations.functTestCompile
        runtimeClasspath = output + compileClasspath + configurations.functTestRuntime
    }
}

ext {
    functionalJettyStopPort = 8081
    functionalJettyStopKey = 'stopKey'
}

task functionalJettyRun(type: org.gradle.api.plugins.jetty.JettyRun) {
    stopPort = functionalJettyStopPort
    stopKey = functionalJettyStopKey
    contextPath = 'todo'
    daemon = true
}

task functionalJettyStop(type: org.gradle.api.plugins.jetty.JettyStop) {
    stopPort = functionalJettyStopPort
    stopKey = functionalJettyStopKey
}

task functionalTest(type: Test) {
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
    reports.html.destination = file("$reports.html.destination/functional")
    reports.junitXml.destination = file("$reports.junitXml.destination/functional")
    systemProperty 'geb.env', 'firefox'
    systemProperty 'geb.build.reportsDir', reporting.file("$name/geb")
    dependsOn functionalJettyRun
    finalizedBy functionalJettyStop
}

check.dependsOn functionalTest

idea {
    module {
        sourceSets.functionalTest.allSource.srcDirs.each {
            testSourceDirs += it
        }

        scopes.TEST.plus += configurations.functTestCompile
        scopes.TEST.plus += configurations.functTestRuntime
    }
}import org.gradle.plugins.ide.idea.model.IdeaLanguageLevel
import org.gradle.plugins.ide.idea.model.Jdk

allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'

    idea {
        module {
            downloadSources = true
            downloadJavadoc = false
        }
    }
}

idea {
    project {
        ipr.whenMerged { project ->
            project.jdk = new Jdk('1.6', new IdeaLanguageLevel('1.5'))
        }
    }
}apply from: 'databaseSetup.gradle'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    dependsOn startAndPrepareDatabase
    finalizedBy stopDatabase
}

tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
        exceptionFormat 'full'
    }
}

check.dependsOn integrationTest

idea {
    module {
        sourceSets.integrationTest.allSource.srcDirs.each {
            testSourceDirs += it
        }
    }
}apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'groovy'

repositories {
    mavenCentral()
}

configurations {
    functTestCompile.extendsFrom testCompile
    functTestRuntime.extendsFrom testRuntime
}

ext.seleniumGroup = 'org.seleniumhq.selenium'
ext.seleniumVersion = '2.32.0'

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
    runtime 'taglibs:standard:1.1.2'
    testCompile 'org.codehaus.groovy:groovy:2.0.6'
    testCompile 'junit:junit:4.11'
    functTestCompile 'org.codehaus.geb:geb-junit4:0.7.2'
    functTestCompile "$seleniumGroup:selenium-api:$seleniumVersion"
    functTestRuntime "$seleniumGroup:selenium-firefox-driver:$seleniumVersion"
}

sourceSets {
    functionalTest {
        groovy.srcDir file('src/functTest/groovy')
        resources.srcDir file('src/functTest/resources')
        compileClasspath = sourceSets.main.output + configurations.functTestCompile
        runtimeClasspath = output + compileClasspath + configurations.functTestRuntime
    }
}

ext {
    functionalJettyStopPort = 8081
    functionalJettyStopKey = 'stopKey'
}

task functionalJettyRun(type: org.gradle.api.plugins.jetty.JettyRun) {
    stopPort = functionalJettyStopPort
    stopKey = functionalJettyStopKey
    contextPath = 'todo'
    daemon = true
}

task functionalJettyStop(type: org.gradle.api.plugins.jetty.JettyStop) {
    stopPort = functionalJettyStopPort
    stopKey = functionalJettyStopKey
}

task functionalTest(type: Test) {
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
    reports.html.destination = file("$reports.html.destination/functional")
    reports.junitXml.destination = file("$reports.junitXml.destination/functional")
    systemProperty 'geb.env', 'firefox'
    systemProperty 'geb.build.reportsDir', reporting.file("$name/geb")
    dependsOn functionalJettyRun
    finalizedBy functionalJettyStop
}

check.dependsOn functionalTest

idea {
    module {
        sourceSets.functionalTest.allSource.srcDirs.each {
            testSourceDirs += it
        }

        scopes.TEST.plus += configurations.functTestCompile
        scopes.TEST.plus += configurations.functTestRuntime
    }
}buildscript {
    repositories {
        maven {
            url 'http://phildop.us/m2repo'
        }
        dependencies {
            classpath 'us.phildop:gradle-sublimetext-plugin:0.5'
        }
    }
}

allprojects {
    apply plugin: 'sublimeText'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.7'
}apply from: 'databaseSetup.gradle'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    dependsOn startAndPrepareDatabase
    finalizedBy stopDatabase
}

tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
        exceptionFormat 'full'
    }
}

check.dependsOn integrationTestapply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'groovy'

repositories {
    mavenCentral()
}

configurations {
    functTestCompile.extendsFrom testCompile
    functTestRuntime.extendsFrom testRuntime
}

ext.seleniumGroup = 'org.seleniumhq.selenium'
ext.seleniumVersion = '2.32.0'

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
    runtime 'taglibs:standard:1.1.2'
    testCompile 'org.codehaus.groovy:groovy:2.0.6'
    testCompile 'junit:junit:4.11'
    functTestCompile 'org.codehaus.geb:geb-junit4:0.7.2'
    functTestCompile "$seleniumGroup:selenium-api:$seleniumVersion"
    functTestRuntime "$seleniumGroup:selenium-firefox-driver:$seleniumVersion"
}

sourceSets {
    functionalTest {
        groovy.srcDir file('src/functTest/groovy')
        resources.srcDir file('src/functTest/resources')
        compileClasspath = sourceSets.main.output + configurations.functTestCompile
        runtimeClasspath = output + compileClasspath + configurations.functTestRuntime
    }
}

ext {
    functionalJettyStopPort = 8081
    functionalJettyStopKey = 'stopKey'
}

task functionalJettyRun(type: org.gradle.api.plugins.jetty.JettyRun) {
    stopPort = functionalJettyStopPort
    stopKey = functionalJettyStopKey
    contextPath = 'todo'
    daemon = true
}

task functionalJettyStop(type: org.gradle.api.plugins.jetty.JettyStop) {
    stopPort = functionalJettyStopPort
    stopKey = functionalJettyStopKey
}

task functionalTest(type: Test) {
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
    reports.html.destination = file("$reports.html.destination/functional")
    reports.junitXml.destination = file("$reports.junitXml.destination/functional")
    systemProperty 'geb.env', 'firefox'
    systemProperty 'geb.build.reportsDir', reporting.file("$name/geb")
    dependsOn functionalJettyRun
    finalizedBy functionalJettyStop
}

check.dependsOn functionalTestbuildscript {
    repositories {
        maven {
            url 'http://phildop.us/m2repo'
        }
        dependencies {
            classpath 'us.phildop:gradle-sublimetext-plugin:0.5'
        }
    }
}

allprojects {
    apply plugin: 'sublimeText'
    group = 'com.manning.gia'
    version = '0.1'

    sublimeText {
        defaultFolderExcludePatterns = ['.gradle', 'build']
    }
}

subprojects {
    apply plugin: 'java'

    sublimeText {
        generateSublimeJavaClasspath = true
        generateSublimeJavaSrcpath = true
        addGradleCompile = true
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.7'
}
apply from: 'databaseSetup.gradle'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    dependsOn startAndPrepareDatabase
    finalizedBy stopDatabase
}

tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
        exceptionFormat 'full'
    }
}

check.dependsOn integrationTestapply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'groovy'

repositories {
    mavenCentral()
}

configurations {
    functTestCompile.extendsFrom testCompile
    functTestRuntime.extendsFrom testRuntime
}

ext.seleniumGroup = 'org.seleniumhq.selenium'
ext.seleniumVersion = '2.32.0'

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
    runtime 'taglibs:standard:1.1.2'
    testCompile 'org.codehaus.groovy:groovy:2.0.6'
    testCompile 'junit:junit:4.11'
    functTestCompile 'org.codehaus.geb:geb-junit4:0.7.2'
    functTestCompile "$seleniumGroup:selenium-api:$seleniumVersion"
    functTestRuntime "$seleniumGroup:selenium-firefox-driver:$seleniumVersion"
}

sourceSets {
    functionalTest {
        groovy.srcDir file('src/functTest/groovy')
        resources.srcDir file('src/functTest/resources')
        compileClasspath = sourceSets.main.output + configurations.functTestCompile
        runtimeClasspath = output + compileClasspath + configurations.functTestRuntime
    }
}

ext {
    functionalJettyStopPort = 8081
    functionalJettyStopKey = 'stopKey'
}

task functionalJettyRun(type: org.gradle.api.plugins.jetty.JettyRun) {
    stopPort = functionalJettyStopPort
    stopKey = functionalJettyStopKey
    contextPath = 'todo'
    daemon = true
}

task functionalJettyStop(type: org.gradle.api.plugins.jetty.JettyStop) {
    stopPort = functionalJettyStopPort
    stopKey = functionalJettyStopKey
}

task functionalTest(type: Test) {
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
    reports.html.destination = file("$reports.html.destination/functional")
    reports.junitXml.destination = file("$reports.junitXml.destination/functional")
    systemProperty 'geb.env', 'firefox'
    systemProperty 'geb.build.reportsDir', reporting.file("$name/geb")
    dependsOn functionalJettyRun
    finalizedBy functionalJettyStop
}

check.dependsOn functionalTestbuildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.cloudbees:cloudbees-api-client:1.4.0'
    }
}

ext {
    apiUrl = 'https://api.cloudbees.com/api'
    apiFormat = 'xml'
    apiVersion = '1.0'
}

if (project.hasProperty('cloudbeesApiKey')) {
    ext.apiKey = project.property('cloudbeesApiKey')
}

if (project.hasProperty('cloudbeesApiSecret')) {
    ext.secret = project.property('cloudbeesApiSecret')
}

import com.cloudbees.api.ApplicationInfo
import com.cloudbees.api.BeesClient

task cloudBeesAppInfo(description: 'Returns the basic information about an application.', group: 'CloudBees') {
    inputs.property('apiKey', apiKey)
    inputs.property('secret', secret)
    inputs.property('appId', appId)

    doLast {
        BeesClient client = new BeesClient(apiUrl, apiKey, secret, 'xml', '1.0')

        ApplicationInfo info

        try {
            info = client.applicationInfo(appId)
        }
        catch (Exception e) {
            throw new GradleException(e.message)
        }

        logger.quiet "Application id : $info.id"
        logger.quiet "         title : $info.title"
        logger.quiet "       created : $info.created"
        logger.quiet "          urls : $info.urls"
        logger.quiet "        status : $info.status"
    }
}apply plugin: 'groovy'

repositories {
    mavenCentral()
}

dependencies {
    testCompile localGroovy()
    testCompile gradleApi()
    testCompile 'org.spockframework:spock-core:0.7-groovy-1.8'
}allprojects {
    apply plugin: 'eclipse'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.7'
}
apply from: 'databaseSetup.gradle'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    dependsOn startAndPrepareDatabase
    finalizedBy stopDatabase
}

tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
        exceptionFormat 'full'
    }
}

check.dependsOn integrationTestapply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'groovy'
apply plugin: 'eclipse-wtp'

repositories {
    mavenCentral()
}

configurations {
    functTestCompile.extendsFrom testCompile
    functTestRuntime.extendsFrom testRuntime
}

ext.seleniumGroup = 'org.seleniumhq.selenium'
ext.seleniumVersion = '2.32.0'

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
    runtime 'taglibs:standard:1.1.2'
    testCompile 'org.codehaus.groovy:groovy:2.0.6'
    testCompile 'junit:junit:4.11'
    functTestCompile 'org.codehaus.geb:geb-junit4:0.7.2'
    functTestCompile "$seleniumGroup:selenium-api:$seleniumVersion"
    functTestRuntime "$seleniumGroup:selenium-firefox-driver:$seleniumVersion"
}

sourceSets {
    functionalTest {
        groovy.srcDir file('src/functTest/groovy')
        resources.srcDir file('src/functTest/resources')
        compileClasspath = sourceSets.main.output + configurations.functTestCompile
        runtimeClasspath = output + compileClasspath + configurations.functTestRuntime
    }
}

ext {
    functionalJettyStopPort = 8081
    functionalJettyStopKey = 'stopKey'
}

task functionalJettyRun(type: org.gradle.api.plugins.jetty.JettyRun) {
    stopPort = functionalJettyStopPort
    stopKey = functionalJettyStopKey
    contextPath = 'todo'
    daemon = true
}

task functionalJettyStop(type: org.gradle.api.plugins.jetty.JettyStop) {
    stopPort = functionalJettyStopPort
    stopKey = functionalJettyStopKey
}

task functionalTest(type: Test) {
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
    reports.html.destination = file("$reports.html.destination/functional")
    reports.junitXml.destination = file("$reports.junitXml.destination/functional")
    systemProperty 'geb.env', 'firefox'
    systemProperty 'geb.build.reportsDir', reporting.file("$name/geb")
    dependsOn functionalJettyRun
    finalizedBy functionalJettyStop
}

check.dependsOn functionalTestallprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}
apply from: 'databaseSetup.gradle'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    dependsOn startAndPrepareDatabase
    finalizedBy stopDatabase
}

tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
        exceptionFormat 'full'
    }
}

check.dependsOn integrationTestapply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'groovy'

repositories {
    mavenCentral()
}

configurations {
    functTestCompile.extendsFrom testCompile
    functTestRuntime.extendsFrom testRuntime
}

ext.seleniumGroup = 'org.seleniumhq.selenium'
ext.seleniumVersion = '2.32.0'

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
    runtime 'taglibs:standard:1.1.2'
    testCompile 'org.codehaus.groovy:groovy:2.0.6'
    testCompile 'junit:junit:4.11'
    functTestCompile 'org.codehaus.geb:geb-junit4:0.7.2'
    functTestCompile "$seleniumGroup:selenium-api:$seleniumVersion"
    functTestRuntime "$seleniumGroup:selenium-firefox-driver:$seleniumVersion"
}

sourceSets {
    functionalTest {
        groovy.srcDir file('src/functTest/groovy')
        resources.srcDir file('src/functTest/resources')
        compileClasspath = sourceSets.main.output + configurations.functTestCompile
        runtimeClasspath = output + compileClasspath + configurations.functTestRuntime
    }
}

ext {
    functionalJettyStopPort = 8081
    functionalJettyStopKey = 'stopKey'
}

task functionalJettyRun(type: org.gradle.api.plugins.jetty.JettyRun) {
    stopPort = functionalJettyStopPort
    stopKey = functionalJettyStopKey
    contextPath = 'todo'
    daemon = true
}

task functionalJettyStop(type: org.gradle.api.plugins.jetty.JettyStop) {
    stopPort = functionalJettyStopPort
    stopKey = functionalJettyStopKey
}

task functionalTest(type: Test) {
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
    reports.html.destination = file("$reports.html.destination/functional")
    reports.junitXml.destination = file("$reports.junitXml.destination/functional")
    systemProperty 'geb.env', 'firefox'
    systemProperty 'geb.build.reportsDir', reporting.file("$name/geb")
    dependsOn functionalJettyRun
    finalizedBy functionalJettyStop
}

check.dependsOn functionalTestallprojects {
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}apply plugin: 'war'
apply plugin: 'jetty'
apply from: "$rootDir/gradle/jsDependencies.gradle"

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}allprojects {
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}
repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}apply plugin: 'war'
apply plugin: 'jetty'
apply from: "$rootDir/gradle/jsDependencies.gradle"
apply from: "$rootDir/gradle/jsMinification.gradle"

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}allprojects {
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}apply plugin: 'war'
apply plugin: 'jetty'
apply from: "$rootDir/gradle/jsDependencies.gradle"
apply from: "$rootDir/gradle/jsOptimize.gradle"

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}allprojects {
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}
repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}apply plugin: 'war'
apply plugin: 'jetty'
apply from: "$rootDir/gradle/jsDependencies.gradle"
apply from: "$rootDir/gradle/jsCodeQuality.gradle"

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}allprojects {
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}
repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}apply plugin: 'war'
apply plugin: 'jetty'
apply from: "$rootDir/gradle/jsDependencies.gradle"
apply from: "$rootDir/gradle/jsOptimize.gradle"

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}allprojects {
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}

task installGruntDependencies(type: Exec) {
    inputs.file 'package.json'
    outputs.dir 'node_modules'

    executable 'npm'
    args 'install'
}

import com.manning.gia.js.Grunt

task jsHint(type: Grunt, dependsOn: installGruntDependencies) {
    commands = ['jshint']
}allprojects {
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'

    tasks.withType(JavaCompile) {
        options.useAnt = false
        options.fork = true
    }
}
apply plugin: 'groovy'

sourceSets.main.java.srcDirs = []
sourceSets.main.groovy.srcDirs = ['src/main/java', 'src/main/groovy']

repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    compile 'org.codehaus.groovy:groovy-all:2.0.5'
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}allprojects {
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}apply plugin: 'groovy'

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.1.5'
}repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    compile 'org.codehaus.groovy:groovy-all:2.0.5'
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}allprojects {
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}apply plugin: 'groovy'

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.1.5'
}

sourceSets {
    main {
        groovy {
            srcDirs = ['src/groovy']
        }
    }

    test {
        groovy {
            srcDirs = ['test/groovy']
        }
    }
}
repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    compile 'org.codehaus.groovy:groovy-all:2.0.5'
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}allprojects {
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}
apply plugin: 'groovy'

sourceSets.main.java.srcDirs = []
sourceSets.main.groovy.srcDirs = ['src/main/java', 'src/main/groovy']

repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    compile 'org.codehaus.groovy:groovy-all:2.0.5'
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}allprojects {
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}apply plugin: 'scala'

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.scala-lang:scala-library:2.10.1'
}repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    compile 'org.codehaus.groovy:groovy-all:2.0.5'
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}allprojects {
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}apply plugin: 'scala'

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.scala-lang:scala-library:2.10.1'
}

sourceSets {
    main {
        scala {
            srcDirs = ['src/scala']
        }
    }

    test {
        scala {
            srcDirs = ['test/scala']
        }
    }
}
repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    compile 'org.codehaus.groovy:groovy-all:2.0.5'
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}allprojects {
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
}
apply plugin: 'scala'

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.scala-lang:scala-library:2.10.1'
}

sourceSets.main.java.srcDirs = []
sourceSets.main.scala.srcDirs = ['src/main/java', 'src/main/scala']

repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    compile 'org.codehaus.groovy:groovy-all:2.0.5'
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
    apply from: "$rootDir/gradle/jacoco.gradle"

    repositories {
        mavenCentral()
    }
}apply from: 'databaseSetup.gradle'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
        exceptionFormat 'full'
    }
}

startDatabase.dependsOn test
integrationTest.dependsOn startAndPrepareDatabase
stopDatabase.dependsOn integrationTest
check.dependsOn stopDatabaseapply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
    apply from: "$rootDir/gradle/cobertura.gradle"

    repositories {
        mavenCentral()
    }

    sourceCompatibility = '1.6'
    targetCompatibility = '1.6'
}apply from: 'databaseSetup.gradle'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
        exceptionFormat 'full'
    }
}

startDatabase.dependsOn test
integrationTest.dependsOn startAndPrepareDatabase
stopDatabase.dependsOn integrationTest
check.dependsOn stopDatabaseapply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'

    ext.configDir = new File(rootDir, 'config')
    apply from: "$rootDir/gradle/checkstyle.gradle"

    repositories {
        mavenCentral()
    }
}
apply from: 'databaseSetup.gradle'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
        exceptionFormat 'full'
    }
}

startDatabase.dependsOn test
integrationTest.dependsOn startAndPrepareDatabase
stopDatabase.dependsOn integrationTest
check.dependsOn stopDatabaseapply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'

    ext.configDir = new File(rootDir, 'config')
    apply from: "$rootDir/gradle/pmd.gradle"

    repositories {
        mavenCentral()
    }
}apply from: 'databaseSetup.gradle'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
        exceptionFormat 'full'
    }
}

startDatabase.dependsOn test
integrationTest.dependsOn startAndPrepareDatabase
stopDatabase.dependsOn integrationTest
check.dependsOn stopDatabaseapply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'

    ext.configDir = new File(rootDir, 'config')
    apply from: "$rootDir/gradle/findbugs.gradle"

    repositories {
        mavenCentral()
    }
}apply from: 'databaseSetup.gradle'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
        exceptionFormat 'full'
    }
}

startDatabase.dependsOn test
integrationTest.dependsOn startAndPrepareDatabase
stopDatabase.dependsOn integrationTest
check.dependsOn stopDatabaseapply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'

    ext.configDir = new File(rootDir, 'config')
    apply from: "$rootDir/gradle/jdepend.gradle"

    repositories {
        mavenCentral()
    }
}
apply from: 'databaseSetup.gradle'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
        exceptionFormat 'full'
    }
}

startDatabase.dependsOn test
integrationTest.dependsOn startAndPrepareDatabase
stopDatabase.dependsOn integrationTest
check.dependsOn stopDatabaseapply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}apply plugin: 'sonar-runner'

sonarRunner {
    sonarProperties {
        property 'sonar.projectName', 'todo'
        property 'sonar.projectDescription', 'A task management application'
    }
}

allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
    apply from: "$rootDir/gradle/jacoco.gradle"

    repositories {
        mavenCentral()
    }

    sonarRunner {
        sonarProperties {
            property 'sonar.sourceEncoding', 'UTF-8'
        }
    }
}apply from: 'databaseSetup.gradle'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
        exceptionFormat 'full'
    }
}

startDatabase.dependsOn test
integrationTest.dependsOn startAndPrepareDatabase
stopDatabase.dependsOn integrationTest
check.dependsOn stopDatabase

sonarRunner {
    sonarProperties {
        properties['sonar.tests'] += sourceSets.integrationTest.allSource.srcDirs
    }
}apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}apply plugin: 'sonar-runner'

sonarRunner {
    sonarProperties {
        property 'sonar.projectName', 'todo'
        property 'sonar.projectDescription', 'A task management application'
    }
}

allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
    ext.configDir = new File(rootDir, 'config')

    sonarRunner {
        sonarProperties {
            property 'sonar.sourceEncoding', 'UTF-8'
        }
    }
}apply from: 'databaseSetup.gradle'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
        exceptionFormat 'full'
    }
}

startDatabase.dependsOn test
integrationTest.dependsOn startAndPrepareDatabase
stopDatabase.dependsOn integrationTest
check.dependsOn stopDatabase

sonarRunner {
    sonarProperties {
        properties['sonar.tests'] += sourceSets.integrationTest.allSource.srcDirs
    }
}apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}apply plugin: 'sonar-runner'

sonarRunner {
    sonarProperties {
        property 'sonar.projectName', 'todo'
        property 'sonar.projectDescription', 'A task management application'
    }
}

allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
    apply from: "$rootDir/gradle/cobertura.gradle"

    repositories {
        mavenCentral()
    }

    sourceCompatibility = '1.6'
    targetCompatibility = '1.6'

    sonarRunner {
        sonarProperties {
            property 'sonar.sourceEncoding', 'UTF-8'
            property 'sonar.core.codeCoveragePlugin', 'cobertura'

            tasks.withType(SourceTask) { task ->
                if (task.name == 'testCoberturaReport') {
                    property 'sonar.cobertura.reportPath', new File(task.reportDir, 'coverage.xml')
                }
            }
        }
    }
}apply from: 'databaseSetup.gradle'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
        exceptionFormat 'full'
    }
}

startDatabase.dependsOn test
integrationTest.dependsOn startAndPrepareDatabase
stopDatabase.dependsOn integrationTest
check.dependsOn stopDatabase

sonarRunner {
    sonarProperties {
        properties['sonar.tests'] += sourceSets.integrationTest.allSource.srcDirs
    }
}apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}apply plugin: 'groovy'

archivesBaseName = 'cloudbees-plugin'
group = 'com.manning.gia'
version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    compile localGroovy()
    compile gradleApi()
    compile 'com.cloudbees:cloudbees-api-client:1.4.0'
    testCompile 'org.spockframework:spock-core:0.6-groovy-1.8'
}

task sourcesJar(type: Jar) {
    baseName 'cloudbees-plugin'
    classifier 'sources'
    from sourceSets.main.allSource
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    baseName 'cloudbees-plugin'
    classifier 'groovydoc'
    from groovydoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives groovydocJar
}apply plugin: 'groovy'

archivesBaseName = 'cloudbees-plugin'
group = 'com.manning.gia'
version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    compile localGroovy()
    compile gradleApi()
    compile 'com.cloudbees:cloudbees-api-client:1.4.0'
    testCompile 'org.spockframework:spock-core:0.6-groovy-1.8'
}

task sourcesJar(type: Jar) {
    baseName 'cloudbees-plugin'
    classifier 'sources'
    from sourceSets.main.allSource
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    baseName 'cloudbees-plugin'
    classifier 'groovydoc'
    from groovydoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives groovydocJar
}

apply plugin: 'distribution'

distributions {
    main {
        baseName = archivesBaseName

        contents {
            from { libsDir }
        }
    }

    docs {
        baseName = "$archivesBaseName-docs"

        contents {
            from(libsDir) {
                include sourcesJar.archiveName
                include groovydocJar.archiveName
            }
        }
    }
}apply plugin: 'groovy'

archivesBaseName = 'cloudbees-plugin'
group = 'com.manning.gia'
version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    compile localGroovy()
    compile gradleApi()
    compile 'com.cloudbees:cloudbees-api-client:1.4.0'
    testCompile 'org.spockframework:spock-core:0.6-groovy-1.8'
}

task sourcesJar(type: Jar) {
    baseName 'cloudbees-plugin'
    classifier 'sources'
    from sourceSets.main.allSource
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    baseName 'cloudbees-plugin'
    classifier 'groovydoc'
    from groovydoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives groovydocJar
}

apply plugin: 'distribution'

distributions {
    main {
        baseName = archivesBaseName

        contents {
            from { libsDir }
        }
    }

    docs {
        baseName = "$archivesBaseName-docs"

        contents {
            from(libsDir) {
                include sourcesJar.archiveName
                include groovydocJar.archiveName
            }
        }
    }
}

apply plugin: 'maven-publish'

publishing {
    publications {
        plugin(MavenPublication) {
            from components.java
            artifactId 'cloudbees-plugin'
        }
    }
}apply plugin: 'groovy'

archivesBaseName = 'cloudbees-plugin'
group = 'com.manning.gia'
version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    compile localGroovy()
    compile gradleApi()
    compile 'com.cloudbees:cloudbees-api-client:1.4.0'
    testCompile 'org.spockframework:spock-core:0.6-groovy-1.8'
}

task sourcesJar(type: Jar) {
    baseName 'cloudbees-plugin'
    classifier 'sources'
    from sourceSets.main.allSource
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    baseName 'cloudbees-plugin'
    classifier 'groovydoc'
    from groovydoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives groovydocJar
}

apply plugin: 'distribution'

distributions {
    main {
        baseName = archivesBaseName

        contents {
            from { libsDir }
        }
    }

    docs {
        baseName = "$archivesBaseName-docs"

        contents {
            from(libsDir) {
                include sourcesJar.archiveName
                include groovydocJar.archiveName
            }
        }
    }
}

apply plugin: 'maven-publish'

publishing {
    publications {
        plugin(MavenPublication) {
            from components.java
            artifactId 'cloudbees-plugin'

            artifact sourcesJar
            artifact groovydocJar
        }
    }
}apply plugin: 'groovy'

archivesBaseName = 'cloudbees-plugin'
group = 'com.manning.gia'
version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    compile localGroovy()
    compile gradleApi()
    compile 'com.cloudbees:cloudbees-api-client:1.4.0'
    testCompile 'org.spockframework:spock-core:0.6-groovy-1.8'
}

task sourcesJar(type: Jar) {
    baseName 'cloudbees-plugin'
    classifier 'sources'
    from sourceSets.main.allSource
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    baseName 'cloudbees-plugin'
    classifier 'groovydoc'
    from groovydoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives groovydocJar
}

apply plugin: 'distribution'

distributions {
    main {
        baseName = archivesBaseName

        contents {
            from { libsDir }
        }
    }

    docs {
        baseName = "$archivesBaseName-docs"

        contents {
            from(libsDir) {
                include sourcesJar.archiveName
                include groovydocJar.archiveName
            }
        }
    }
}

apply plugin: 'maven-publish'

publishing {
    publications {
        plugin(MavenPublication) {
            from components.java
            artifactId 'cloudbees-plugin'

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'Gradle CloudBees plugin')
                root.appendNode('description', 'Gradle plugin for managing applications and databases on CloudBees RUN@cloud.')
                root.appendNode('inceptionYear', '2013')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'The Apache Software License, Version 2.0')
                license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                license.appendNode('distribution', 'repo')

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('id', 'bmuschko')
                developer.appendNode('name', 'Benjamin Muschko')
                developer.appendNode('email', 'benjamin.muschko@gmail.com')
            }

            artifact sourcesJar
            artifact groovydocJar
        }
    }
}apply plugin: 'groovy'

archivesBaseName = 'cloudbees-plugin'
group = 'com.manning.gia'
version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    compile localGroovy()
    compile gradleApi()
    compile 'com.cloudbees:cloudbees-api-client:1.4.0'
    testCompile 'org.spockframework:spock-core:0.6-groovy-1.8'
}

task sourcesJar(type: Jar) {
    baseName 'cloudbees-plugin'
    classifier 'sources'
    from sourceSets.main.allSource
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    baseName 'cloudbees-plugin'
    classifier 'groovydoc'
    from groovydoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives groovydocJar
}

apply plugin: 'distribution'

distributions {
    main {
        baseName = archivesBaseName

        contents {
            from { libsDir }
        }
    }

    docs {
        baseName = "$archivesBaseName-docs"

        contents {
            from(libsDir) {
                include sourcesJar.archiveName
                include groovydocJar.archiveName
            }
        }
    }
}

apply plugin: 'maven-publish'

publishing {
    publications {
        plugin(MavenPublication) {
            from components.java
            artifactId 'cloudbees-plugin'

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'Gradle CloudBees plugin')
                root.appendNode('description', 'Gradle plugin for managing applications and databases on CloudBees RUN@cloud.')
                root.appendNode('inceptionYear', '2013')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'The Apache Software License, Version 2.0')
                license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                license.appendNode('distribution', 'repo')

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('id', 'bmuschko')
                developer.appendNode('name', 'Benjamin Muschko')
                developer.appendNode('email', 'benjamin.muschko@gmail.com')
            }

            artifact sourcesJar
            artifact groovydocJar
        }
    }

    repositories {
        maven {
            name 'myLocal'
            url "file://$projectDir/../repo"
        }
    }
}apply plugin: 'groovy'

archivesBaseName = 'cloudbees-plugin'
group = 'com.manning.gia'
version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    compile localGroovy()
    compile gradleApi()
    compile 'com.cloudbees:cloudbees-api-client:1.4.0'
    testCompile 'org.spockframework:spock-core:0.6-groovy-1.8'
}

task sourcesJar(type: Jar) {
    baseName 'cloudbees-plugin'
    classifier 'sources'
    from sourceSets.main.allSource
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    baseName 'cloudbees-plugin'
    classifier 'groovydoc'
    from groovydoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives groovydocJar
}

apply plugin: 'distribution'

distributions {
    main {
        baseName = archivesBaseName

        contents {
            from { libsDir }
        }
    }

    docs {
        baseName = "$archivesBaseName-docs"

        contents {
            from(libsDir) {
                include sourcesJar.archiveName
                include groovydocJar.archiveName
            }
        }
    }
}

ext {
    artifactoryBaseUrl = 'http://localhost:8081/artifactory'
    artifactorySnapshotRepoUrl = "$artifactoryBaseUrl/libs-snapshot-local"
    artifactoryReleaseRepoUrl = "$artifactoryBaseUrl/libs-release-local"
}

apply plugin: 'maven-publish'

publishing {
    publications {
        plugin(MavenPublication) {
            from components.java
            artifactId 'cloudbees-plugin'

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'Gradle CloudBees plugin')
                root.appendNode('description', 'Gradle plugin for managing applications and databases on CloudBees RUN@cloud.')
                root.appendNode('inceptionYear', '2013')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'The Apache Software License, Version 2.0')
                license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                license.appendNode('distribution', 'repo')

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('id', 'bmuschko')
                developer.appendNode('name', 'Benjamin Muschko')
                developer.appendNode('email', 'benjamin.muschko@gmail.com')
            }

            artifact sourcesJar
            artifact groovydocJar
        }
    }

    repositories {
        maven {
            name 'myLocal'
            url "file://$projectDir/repo"
        }

        maven {
            name 'remoteArtifactory'
            url project.version.endsWith('-SNAPSHOT') ? artifactorySnapshotRepoUrl : artifactoryReleaseRepoUrl

            credentials {
                username = artifactoryUsername
                password = artifactoryPassword
            }
        }
    }
}apply plugin: 'groovy'

archivesBaseName = 'cloudbees-plugin'
group = 'com.manning.gia'
version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    compile localGroovy()
    compile gradleApi()
    compile 'com.cloudbees:cloudbees-api-client:1.4.0'
    testCompile 'org.spockframework:spock-core:0.6-groovy-1.8'
}

task sourcesJar(type: Jar) {
    baseName 'cloudbees-plugin'
    classifier 'sources'
    from sourceSets.main.allSource
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    baseName 'cloudbees-plugin'
    classifier 'groovydoc'
    from groovydoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives groovydocJar
}

apply plugin: 'distribution'

distributions {
    main {
        baseName = archivesBaseName

        contents {
            from { libsDir }
        }
    }

    docs {
        baseName = "$archivesBaseName-docs"

        contents {
            from(libsDir) {
                include sourcesJar.archiveName
                include groovydocJar.archiveName
            }
        }
    }
}

ext {
    bintrayBaseUrl = 'https://api.bintray.com/maven'
    bintrayUsername = 'bmuschko'
    bintrayRepository = 'gradle-plugins'
    bintrayPackage = 'gradle-cloudbees-plugin'
}

apply plugin: 'maven-publish'

publishing {
    publications {
        plugin(MavenPublication) {
            from components.java
            artifactId 'cloudbees-plugin'

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'Gradle CloudBees plugin')
                root.appendNode('description', 'Gradle plugin for managing applications and databases on CloudBees RUN@cloud.')
                root.appendNode('inceptionYear', '2013')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'The Apache Software License, Version 2.0')
                license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                license.appendNode('distribution', 'repo')

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('id', 'bmuschko')
                developer.appendNode('name', 'Benjamin Muschko')
                developer.appendNode('email', 'benjamin.muschko@gmail.com')
            }

            artifact sourcesJar
            artifact groovydocJar
        }
    }

    repositories {
        maven {
            name 'Bintray'
            url "$bintrayBaseUrl/$bintrayUsername/$bintrayRepository/$bintrayPackage"

            credentials {
                username = bintrayUsername
                password = bintrayApiKey
            }
        }
    }
}buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.gradle.api.plugins:gradle-cloudbees-plugin:0.1'
    }
}

apply plugin: 'cloudbees'
allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'

    apply from: "$rootDir/gradle/versioning.gradle"
}

subprojects {
    apply plugin: 'java'

    repositories {
        mavenCentral()
    }
}
repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'

    apply from: "$rootDir/gradle/versioning.gradle"
}

subprojects {
    apply plugin: 'java'

    repositories {
        mavenCentral()
    }
}repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}

task createBuildInfoFile << {
    def buildInfoFile = new File("$buildDir/build-info.properties")
    Properties props = new Properties()
    props.setProperty('version', project.version.toString())
    props.setProperty('timestamp', project.buildTimestamp)
    props.store(buildInfoFile.newWriter(), null)
}

war {
    dependsOn createBuildInfoFile
    baseName = 'todo'

    from(buildDir) {
        include 'build-info.properties'
        into('WEB-INF/classes')
    }
}
allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'

    apply from: "$rootDir/gradle/versioning.gradle"
}

subprojects {
    apply plugin: 'java'

    repositories {
        mavenCentral()
    }
}
repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
}

task createBuildInfoFile << {
    def buildInfoFile = new File("$buildDir/build-info.properties")
    Properties props = new Properties()
    props.setProperty('version', project.version.toString())
    props.setProperty('timestamp', project.buildTimestamp)
    props.store(buildInfoFile.newWriter(), null)
}

war {
    dependsOn createBuildInfoFile
    baseName = 'todo'

    from(buildDir) {
        include 'build-info.properties'
        into('WEB-INF/classes')
    }
}

apply plugin: 'maven-publish'

ext {
    artifactoryBaseUrl = 'http://localhost:8081/artifactory'
    artifactoryReleaseRepoUrl = "$artifactoryBaseUrl/libs-release-local"
    artifactoryUsername = project.hasProperty('artifactoryUsername') ? project.getProperty('artifactoryUsername') : null
    artifactoryPassword = project.hasProperty('artifactoryPassword') ? project.getProperty('artifactoryPassword') : null
}

publishing {
    publications {
        toDoWebApp(MavenPublication) {
            from components.web
            artifactId 'todo-web'

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'To Do application')
                root.appendNode('description', 'A simple task management application.')
            }
        }
    }

    repositories {
        maven {
            name 'remoteArtifactory'
            url artifactoryReleaseRepoUrl

            credentials {
                username = artifactoryUsername
                password = artifactoryPassword
            }
        }
    }
}

import com.manning.gia.vm.Vagrant

ext.targetedVagrantProjectDir = file('../vagrant-tomcat-box')

task vagrantUp(type: Vagrant) {
    commands = ['up']
    dir = targetedVagrantProjectDir
}

task vagrantDestroy(type: Vagrant) {
    commands = ['destroy', '--force']
    dir = targetedVagrantProjectDir
}

task vagrantSshConfig(type: Vagrant) {
    commands = ['ssh-config']
    dir = targetedVagrantProjectDir
}

task vagrantStatus(type: Vagrant) {
    commands = ['status']
    dir = targetedVagrantProjectDir
}

task vagrantSuspend(type: Vagrant) {
    commands = ['suspend']
    dir = targetedVagrantProjectDir
}

task vagrantResume(type: Vagrant) {
    commands = ['resume']
    dir = targetedVagrantProjectDir
}allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '0.1'

    apply from: "$rootDir/gradle/versioning.gradle"
}

subprojects {
    apply plugin: 'java'
    sourceCompatibility = '1.6'
    targetCompatibility = '1.6'

    repositories {
        mavenCentral()
    }
}


def env = project.hasProperty('env') ? project.getProperty('env') : 'local'
logger.quiet "Loading configuration for environment '$env'."

def configFile = file("$rootDir/gradle/config/buildConfig.groovy")
def parsedConfig = new ConfigSlurper(env).parse(configFile.toURL())

allprojects {
    ext.config = parsedConfig
}repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}apply plugin: 'war'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
    runtime 'taglibs:standard:1.1.2'
}

task createBuildInfoFile << {
    def buildInfoFile = new File("$buildDir/build-info.properties")
    Properties props = new Properties()
    props.setProperty('version', project.version.toString())
    props.setProperty('timestamp', project.buildTimestamp)
    props.store(buildInfoFile.newWriter(), null)
}

war {
    dependsOn createBuildInfoFile
    baseName = 'todo'

    from(buildDir) {
        include 'build-info.properties'
        into('WEB-INF/classes')
    }
}

apply plugin: 'maven-publish'

ext {
    artifactoryBaseUrl = 'http://localhost:8081/artifactory'
    artifactoryReleaseRepoUrl = "$artifactoryBaseUrl/libs-release-local"
    artifactoryUsername = project.hasProperty('artifactoryUsername') ? project.getProperty('artifactoryUsername') : null
    artifactoryPassword = project.hasProperty('artifactoryPassword') ? project.getProperty('artifactoryPassword') : null
}

publishing {
    publications {
        toDoWebApp(MavenPublication) {
            from components.web

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'To Do application')
                root.appendNode('description', 'A simple task management application.')
            }
        }
    }

    repositories {
        maven {
            name 'remoteArtifactory'
            url artifactoryReleaseRepoUrl

            credentials {
                username = artifactoryUsername
                password = artifactoryPassword
            }
        }
    }
}

task deployWar << {
    logger.quiet "Deploying WAR file to $config.server.hostname via SSH at port $config.server.sshPort."
}allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '1.0'

    apply from: "$rootDir/gradle/versioning.gradle"
}

subprojects {
    apply plugin: 'java'
    sourceCompatibility = '1.6'
    targetCompatibility = '1.6'

    repositories {
        mavenCentral()
    }
}

def env = project.hasProperty('env') ? project.getProperty('env') : 'local'
logger.quiet "Loading configuration for environment '$env'."

def configFile = file("$rootDir/gradle/config/buildConfig.groovy")
def parsedConfig = new ConfigSlurper(env).parse(configFile.toURL())

allprojects {
    ext.config = parsedConfig
}
repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}apply plugin: 'war'
apply plugin: 'jetty'
apply from: "$rootDir/gradle/sshDeploy.gradle"

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
    runtime 'taglibs:standard:1.1.2'
}

task createBuildInfoFile << {
    def buildInfoFile = new File("$buildDir/build-info.properties")
    Properties props = new Properties()
    props.setProperty('version', project.version.toString())
    props.setProperty('timestamp', project.buildTimestamp)
    props.store(buildInfoFile.newWriter(), null)
}

war {
    dependsOn createBuildInfoFile
    baseName = 'todo'

    from(buildDir) {
        include 'build-info.properties'
        into('WEB-INF/classes')
    }
}

apply plugin: 'maven-publish'

ext {
    artifactoryBaseUrl = 'http://localhost:8081/artifactory'
    artifactoryReleaseRepoUrl = "$artifactoryBaseUrl/libs-release-local"
    artifactoryUsername = project.hasProperty('artifactoryUsername') ? project.getProperty('artifactoryUsername') : null
    artifactoryPassword = project.hasProperty('artifactoryPassword') ? project.getProperty('artifactoryPassword') : null
}

publishing {
    publications {
        toDoWebApp(MavenPublication) {
            from components.web

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'To Do application')
                root.appendNode('description', 'A simple task management application.')
            }
        }
    }

    repositories {
        maven {
            name 'remoteArtifactory'
            url artifactoryReleaseRepoUrl

            credentials {
                username = artifactoryUsername
                password = artifactoryPassword
            }
        }
    }
}allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '1.0'

    apply from: "$rootDir/gradle/versioning.gradle"
}

subprojects {
    apply plugin: 'java'
    sourceCompatibility = '1.6'
    targetCompatibility = '1.6'

    repositories {
        mavenCentral()
    }
}

def env = project.hasProperty('env') ? project.getProperty('env') : 'local'
logger.quiet "Loading configuration for environment '$env'."

def configFile = file("$rootDir/gradle/config/buildConfig.groovy")
def parsedConfig = new ConfigSlurper(env).parse(configFile.toURL())

allprojects {
    ext.config = parsedConfig
}
repositories {
    mavenCentral()
}

dependencies {
    compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.5.2'
}repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}apply plugin: 'war'
apply plugin: 'jetty'
apply from: "$rootDir/gradle/sshDeploy.gradle"
apply from: "$rootDir/gradle/smokeTest.gradle"

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
    runtime 'taglibs:standard:1.1.2'
}

task createBuildInfoFile << {
    def buildInfoFile = new File("$buildDir/build-info.properties")
    Properties props = new Properties()
    props.setProperty('version', project.version.toString())
    props.setProperty('timestamp', project.buildTimestamp)
    props.store(buildInfoFile.newWriter(), null)
}

war {
    dependsOn createBuildInfoFile
    baseName = 'todo'

    from(buildDir) {
        include 'build-info.properties'
        into('WEB-INF/classes')
    }
}

apply plugin: 'maven-publish'

ext {
    artifactoryBaseUrl = 'http://localhost:8081/artifactory'
    artifactoryReleaseRepoUrl = "$artifactoryBaseUrl/libs-release-local"
    artifactoryUsername = project.hasProperty('artifactoryUsername') ? project.getProperty('artifactoryUsername') : null
    artifactoryPassword = project.hasProperty('artifactoryPassword') ? project.getProperty('artifactoryPassword') : null
}

publishing {
    publications {
        toDoWebApp(MavenPublication) {
            from components.web

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'To Do application')
                root.appendNode('description', 'A simple task management application.')
            }
        }
    }

    repositories {
        maven {
            name 'remoteArtifactory'
            url artifactoryReleaseRepoUrl

            credentials {
                username = artifactoryUsername
                password = artifactoryPassword
            }
        }
    }
}allprojects {
    apply plugin: 'idea'
    group = 'com.manning.gia'
    version = '1.0'

    apply from: "$rootDir/gradle/versioning.gradle"
}

subprojects {
    apply plugin: 'java'
    sourceCompatibility = '1.6'
    targetCompatibility = '1.6'

    repositories {
        mavenCentral()
    }
}

def env = project.hasProperty('env') ? project.getProperty('env') : 'local'
logger.quiet "Loading configuration for environment '$env'."

def configFile = file("$rootDir/gradle/config/buildConfig.groovy")
def parsedConfig = new ConfigSlurper(env).parse(configFile.toURL())

allprojects {
    ext.config = parsedConfig
}repositories {
    mavenCentral()
}

dependencies {
    compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.5.2'
}
repositories {
    mavenCentral()
}

dependencies {
    compile project(':model')
    runtime 'com.h2database:h2:1.3.170'
    testCompile 'junit:junit:4.11'
}apply plugin: 'war'
apply plugin: 'jetty'
apply from: "$rootDir/gradle/sshDeploy.gradle"
apply from: "$rootDir/gradle/smokeTest.gradle"
apply from: "$rootDir/gradle/functionalTest.gradle"

repositories {
    mavenCentral()
}

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
    runtime 'taglibs:standard:1.1.2'
}

task createBuildInfoFile << {
    def buildInfoFile = new File("$buildDir/build-info.properties")
    Properties props = new Properties()
    props.setProperty('version', project.version.toString())
    props.setProperty('timestamp', project.buildTimestamp)
    props.store(buildInfoFile.newWriter(), null)
}

war {
    dependsOn createBuildInfoFile
    baseName = 'todo'

    from(buildDir) {
        include 'build-info.properties'
        into('WEB-INF/classes')
    }
}

apply plugin: 'maven-publish'

ext {
    artifactoryBaseUrl = 'http://localhost:8081/artifactory'
    artifactoryReleaseRepoUrl = "$artifactoryBaseUrl/libs-release-local"
    artifactoryUsername = project.hasProperty('artifactoryUsername') ? project.getProperty('artifactoryUsername') : null
    artifactoryPassword = project.hasProperty('artifactoryPassword') ? project.getProperty('artifactoryPassword') : null
}

publishing {
    publications {
        toDoWebApp(MavenPublication) {
            from components.web

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'To Do application')
                root.appendNode('description', 'A simple task management application.')
            }
        }
    }

    repositories {
        maven {
            name 'remoteArtifactory'
            url artifactoryReleaseRepoUrl

            credentials {
                username = artifactoryUsername
                password = artifactoryPassword
            }
        }
    }
}