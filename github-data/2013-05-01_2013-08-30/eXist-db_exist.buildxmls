<?xml version="1.0" encoding="UTF-8"?>
<!-- ======================================================================= -->
<!-- eXist 2.x build file                                                    -->
<!-- ======================================================================= -->
<!-- $Id$ -->
<project basedir="." default="all" name="eXist-DB">
    
    <description>eXist Open Source Native XML Database</description>
    
    <!-- import default properties from file -->
    <property file="local.build.properties"/>
    <property file="build.properties"/>
    
    <!-- set proxy if needed, use properties in build.properties  -->
    
    <setproxy nonproxyhosts="${proxy.nonproxyhosts}" proxyhost="${proxy.host}" proxyport="${proxy.port}"
        proxypassword="${proxy.password}" proxyuser="${proxy.user}" socksproxyhost="${proxy.socks.host}"
        socksproxyport="${proxy.socks.port}"/>
    
    <!-- Core build scripts -->
    <import file="build/scripts/build-impl.xml"/>
    <import file="build/scripts/soap.xml"/>
    <import file="build/scripts/jarsigner.xml"/>
    <import file="build/scripts/installer.xml"/>
    <import file="build/scripts/dist.xml"/>
    
    <!-- Specialties -->   
    <import file="build/scripts/minimal.xml"/>
    
    <!-- Additional scripts -->   
    <import file="build/scripts/junit.xml"/>
    <import file="build/scripts/performance.xml"/>
    <import file="build/scripts/quality.xml"/>
    <import file="build/scripts/static-docs.xml"/>
    <import file="build/scripts/subversion.xml"/>
    
</project>
<project name="build" default="nothing" basedir=".">
    <taskdef name="svn" classname="org.tigris.subversion.svnant.SvnTask"/>
    <property file="${build.properties.file}"/>
    <property name="build.dir" location="all"/>
    <property name="project-suffix" value=""/>
    <property name="current.checkout.dir" location="${build.dir}/checkout"/>
    <target name="nothing"/>
    <target name="setup">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.dir}/checkout"/>
        <mkdir dir="${build.dir}/logs"/>
        <mkdir dir="${build.dir}/artifacts"/>
    </target>
    <target name="create-touch">
        <tstamp>
            <format property="current.datetime" pattern="MM/dd/yyyy hh:mm aa"/>
        </tstamp>
        <echo file="${build.dir}/${project}${project-suffix}.touch">${current.datetime}</echo>
    </target>
    <target name="force">
        <tstamp>
            <format property="current.datetime" pattern="MM/dd/yyyy hh:mm aa"/>
        </tstamp>
        <delete file="${build.dir}/${project}${project-suffix}.touch"/>
        <echo file="${build.dir}/${project}${project-suffix}.touch">${current.datetime}</echo>
    </target>

 <target name="system-properties">
    <echo message="Java Runtime Environment 
        version: ${java.version}"/>
    <echo message="Java Runtime Environment 
        vendor: ${java.vendor}"/>
    <echo message="Java Runtime Environment 
        vendor URL: ${java.vendor.url}"/>
    <echo message="Java installation 
        directory: ${java.home}"/>
    <echo message="Java Virtual Machine 
        specification version: 
        ${java.vm.specification.version}"/>
    <echo message="Java Virtual Machine 
        specification vendor: 
        ${java.vm.specification.vendor}"/>
    <echo message="Java Virtual Machine 
        specification name: 
        ${java.vm.specification.name}"/>
    <echo message="Java Virtual Machine 
        implementation version: 
        ${java.vm.version}"/>
    <echo message="Java Virtual Machine 
        implementation vendor: 
        ${java.vm.vendor}"/>
    <echo message="Java Virtual Machine 
        implementation name: ${java.vm.name}"/>
    <echo message="Java Runtime Environment 
        specification version: 
        ${java.specification.version}"/>
    <echo message="Java Runtime Environment 
        specification vendor: 
        ${java.specification.vendor}"/>
    <echo message="Java Runtime Environment 
        specification name: 
        ${java.specification.name}"/>
    <echo message="Java class format version 
        number: ${java.class.version}"/>
    <echo message="Java class path: 
        ${java.class.path}"/>
    <echo message="List of paths to search when 
        loading libraries: ${java.library.path}"/>
    <echo message="Path of extension directory 
        or directories: ${java.ext.dirs}"/>
    <echo message="Default temp file path: 
        ${java.io.tmpdir}"/>
    <echo message="Operating system name: 
        ${os.name}"/>
    <echo message="Operating system 
        architecture: ${os.arch}"/>
    <echo message="Operating system version: 
        ${os.version}"/>
  </target>

   <import file="build.exist.xml"/>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="all" name="existdb">

 <!-- 

    all               Build and test everything; create a distribution, optionally install. 
    clean             Delete all generated files and directories. 
    deploy            Deploy the code, usually to a remote server. 
    dist              Produce the distributables. 
    distclean         Clean up the distribution files only. 
    docs              Generate all documentation. 
    init              Initialize the build: create directories, call <tstamp> and other common actions. 
    install           Perform a local installation. 
    javadocs          Generate the Javadoc pages. 
    printerdocs       Generate printable documents. 
    test              Run the unit tests. 
    uninstall         Remove a local installation. 
 -->
 <property name="existhome.dir" location="../.."/>

 <target name="all" description="Compile sources, create jars">
  <echo>${ant.project.name}</echo>
  <echo>basedir=${basedir}</echo>
  <echo>existhome.dir=${existhome.dir}</echo>

  <!-- <include name="extensions/indexes/*/extension.xml"/>
  <include name="extensions/extension.xml"/>
  <include name="extensions/*/extension.xml"/>
  <include name="extensions/exquery/*/extension.xml"/> -->

  <subant target="all">
   <fileset dir="${existhome.dir}/">
    <include name="extensions/**/extension.xml"/>
   </fileset>
  </subant>

 </target>

 <target name="clean" description="Clean generated files (classes, jars)">
  <echo>${existhome.dir}</echo>
  <echo>${basedir}</echo>
  <subant target="clean">
   <fileset dir="${existhome.dir}">
    <include name="extensions/**/extension.xml"/>
   </fileset>
  </subant>
 </target>

 <target name="dist" description="Create jar files.">
  <subant target="dist">
   <fileset dir="${existhome.dir}/">
    <include name="extensions/**/extension.xml"/>
   </fileset>
  </subant>
 </target>

 <target name="compile" description="Compile sources">
  <subant target="compile">
   <include name="extensions/**/extension.xml"/>
  </subant>
 </target>

 <target name="clean-all" description="Clean download, data etc."> </target>

 <target name="init" description="Initialize the build."> </target>

 <target name="test" description="Run tests on extensions.">
  <subant target="test">
   <fileset dir="${existhome.dir}/">
    <include name="extensions/**/extension.xml"/>
   </fileset>
  </subant>
 </target>

 <target name="javadoc" description="Generate javadoc for extensions.">

  <subant target="javadoc">
   <fileset dir="${existhome.dir}/">
    <include name="extensions/**/extension.xml"/>
   </fileset>
  </subant>

 </target>

</project>
<!--
  ~ Copyright (c) 2011. betterForm Project - http://www.betterform.de
  ~ Licensed under the terms of BSD License
  ~ Author betterFORM team ( info AT betterform.de )
  -->

<project name="betterFORM extension for eXist" default="install" basedir=".">
    <property name="exist.rootdir" value="${basedir}/../.."/>
    <property name="exist.web.xml" value="${exist.rootdir}/webapp/WEB-INF/web.xml"/>

    <property file="../local.build.properties"/>
    <property file="../build.properties"/>

    <condition property="include.feature.betterform.config">
        <istrue value="${include.feature.betterform}"/>
    </condition>

    <property name="betterform.home" value="${exist.rootdir}/extensions/betterform"/>
    <property name="betterform.etc" value="${betterform.home}/main/etc"/>
    <property name="betterform.xrx" value="${betterform.home}/main/xrx"/>
    <property name="betterform.lib" value="${betterform.home}/main/lib"/>
    <property name="betterform.webapp" value="${betterform.home}/main/webapp"/>

    <macrodef name="xslt-saxon">
        <attribute name="in"/>
        <attribute name="out"/>
        <attribute name="style"/>
        <sequential>
            <echo level="info">XSLT Generating @{out}</echo>
            <java classname="net.sf.saxon.Transform"
                  classpath="${exist.rootdir}/lib/endorsed/saxonhe-9.4.0.7.jar"
                  logError="true"
                  output="@{out}"
                  fork="true">
                <arg value="@{in}"/>
                <arg value="@{style}"/>
            </java>
        </sequential>
    </macrodef>

    <path id="classpath.exist">
        <fileset dir="${exist.rootdir}/lib/core">
            <include name="*.jar"/>
        </fileset>
        <pathelement path="${exist.rootdir}/exist.jar"/>
        <pathelement path="${exist.rootdir}/exist-optional.jar"/>
    </path>

    <target name="install" description="install betterFORM into an existing eXist XML DB installation"
            if="include.feature.betterform.config">
        <echo>
            Add betterFORM config parameters to eXist to ${exist.web.xml}
        </echo>

        <antcall target="patchWebXml"/>

        <echo>
            Deploy betterFORM resources to eXist webapp (${exist.rootdir}/webapp/WEB-INF/)
        </echo>

        <antcall target="deployBFResources"/>
    </target>

    <target name="clean" xmlns:xmldb="http://exist-db.org/ant" description="uninstall betterFORM"
            if="include.feature.betterform.config">
        <echo>
            Uninstalling betterFORM.
        </echo>

        <delete dir="${exist.rootdir}/webapp/betterform"/>
        <!--delete file="${exist.rootdir}/webapp/dashboard.html"/-->

        <!--delete files from WEB-INF-->
        <delete file="${exist.rootdir}/webapp/WEB-INF/betterform-config.xml" />
        <delete file="${exist.rootdir}/webapp/WEB-INF/betterform-version.info"/>
        <delete file="${exist.rootdir}/webapp/WEB-INF/dwr.xml" />
        <delete file="${exist.rootdir}/webapp/WEB-INF/dwr20.dtd" />
        <delete file="${exist.rootdir}/webapp/WEB-INF/classes/ehcache.xml"/>

        <!-- restore web.xml -->
        <move file="${betterform.home}/uninstall/web.xml" tofile="${exist.rootdir}/webapp/WEB-INF/web.xml" overwrite="true" failonerror="false"/>
        <delete dir="${betterform.home}/uninstall" includeemptydirs="true"/>

    </target>

    <target name="patchWebXml">
        <mkdir dir="${betterform.home}/uninstall"/>
        <property name="javax.xml.transform.TransformerFactory" value="net.sf.saxon.TransformerFactoryImpl"/>
        <xslt-saxon in="${exist.web.xml}" style="${betterform.etc}/MergeWebXML.xsl" out="${exist.web.xml}.bf"/>
        <move file="${exist.web.xml}" tofile="${betterform.home}/uninstall/web.xml" failonerror="true"/>
        <move file="${exist.web.xml}.bf" tofile="${exist.web.xml}"/>
    </target>

    <target name="deployBFResources">
        <echo>
            Creating uninstall folder.
        </echo>

        <mkdir dir="${betterform.home}/uninstall"/>

        <echo>
            Copying betterFORM configuration files to WEB-INF dir.
        </echo>
        <copy file="${betterform.webapp}/WEB-INF/betterform-config.xml" todir="${exist.rootdir}/webapp/WEB-INF"/>
        <copy file="${betterform.webapp}/WEB-INF/betterform-version.info" todir="${exist.rootdir}/webapp/WEB-INF"/>
        <copy file="${betterform.webapp}/WEB-INF/dwr.xml" todir="${exist.rootdir}/webapp/WEB-INF"/>
        <copy file="${betterform.webapp}/WEB-INF/dwr20.dtd" todir="${exist.rootdir}/webapp/WEB-INF"/>
        <mkdir dir="${exist.rootdir}/webapp/WEB-INF/classes"/>
        <copy file="${betterform.webapp}/WEB-INF/classes/ehcache.xml" todir="${exist.rootdir}/webapp/WEB-INF/classes"/>

        <!--echo>
            Copying betterFORM error page and dashboard to webapp.
        </echo>
         <copy todir="${exist.rootdir}/webapp/">
            <fileset file="${betterform.webapp}/dashboard.html"/>
        </copy-->
    </target>

</project>
<!-- 
    Ant build file for the exist-db extension modules.
    
    Requires a configuration file called local.build.properties or build.properties.
    
    $Id$
-->
<project basedir="." default="jar" name="modules">

    <!--
        Reference to directories
    -->
    <property name="src" value="./src"/>
    <property name="modules.lib" value="./lib"/>
    <property name="classes" value="./classes"/>
    
    <property name="top.dir" value="../.."/>
    <property file="${top.dir}/build.properties"/>

    <property name="build.compiler" value="modern"/>

    <!--
        Get values from properties files. Note that the values in "local.build.properties" 
        are leading to "build.properties".
    -->
    <property file="../local.build.properties"/>
    <property file="../build.properties"/>

    <!-- Modules (in alphabetical order) -->
   
	<condition property="include.module.jfreechart_svg">
	    <and>
            <istrue value="${include.module.jfreechart}"/>
            <istrue value="${include.module.xslfo}"/>
        </and>
    </condition>

    <condition property="libs.available.calabash">
        <available file="${modules.lib}/calabash.jar"/>
    </condition>

	<condition property="include.module.oracle_ext">
	    <and>
            <istrue value="${include.module.oracle}"/>
            <available classname="oracle.jdbc.OracleTypes"/>
        </and>
    </condition>
 
    <path id="classpath.core">
        <fileset dir="${top.dir}/${lib.core}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${top.dir}/${lib.optional}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${top.dir}/${lib.endorsed}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${top.dir}/${lib.user}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${top.dir}/tools/ant/lib">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${top.dir}/extensions/modules/lib" erroronmissingdir="false">
            <include name="*.jar"/>
        </fileset>
        <pathelement path="${top.dir}/exist.jar"/>
        <pathelement path="${top.dir}/exist-optional.jar"/>
        <pathelement path="${top.dir}/start.jar"/>
        <pathelement path="${java.class.path}"/>
    </path>


    <taskdef name="fetch" classname="nl.ow.dilemma.ant.fetch.FetchTask" classpathref="classpath.core" />

    <!-- 
        Special targets for XSLFO module 
    -->
    <target name="check-xslfo-libs-available"> 
      <condition property="libs.available.xslfo">
        <and>
          <available file="${modules.lib}/fop.jar"/>
          <available file="${modules.lib}/batik-all-1.7.jar"/>
          <available file="${modules.lib}/xmlgraphics-commons-1.5.jar"/>
          <available file="${modules.lib}/avalon-framework-4.2.0.jar"/>
        </and>
      </condition>
    </target>
    <target name="prepare-xslfo" depends="check-xslfo-libs-available" unless="libs.available.xslfo" if="${include.module.xslfo}">
        <echo message="Load: ${include.module.xslfo}"/>
        <echo message="------------------------------------------------------"/>
        <echo message="Downloading libraries required by the xsl-fo module"/>
        <echo message="------------------------------------------------------"/>

        <!-- Apache FOP -->       
        <fetch classpathref="classpath.core" dest="${modules.lib}" url="${include.module.xslfo.url}">
            <patternset>
                <include name="**/fop.jar"/>
                <include name="**/batik-all-*.jar"/>
                <include name="**/xmlgraphics-commons-*.jar"/>
                <include name="**/avalon-framework-*.jar"/>
            </patternset>
        </fetch>        

    </target>

    <!-- 
        existdb-contrib fetch task import used for downloading and extracting jar/class from zip
    -->
    <taskdef name="fetch" classname="nl.ow.dilemma.ant.fetch.FetchTask" classpathref="classpath.core" />

   <!--
        Special targets for expath package module
    -->
    <target name="prepare-expathrepo" if="${include.module.expathrepo}">
        <echo message="------------------------------------------------------"/>
        <echo message="Downloading libraries required by the expath package module"/>
        <echo message="------------------------------------------------------"/>

        <copy todir="${classes}/org/exist/xquery/modules/expathrepo">
            <fileset dir="${src}/org/exist/xquery/modules/expathrepo">
                <include name="*.xql"/>
            </fileset>
        </copy>
        <!-- disabled because teamcity doesn't like it -->
          <!--get src="${include.module.expathrepo.url}"
                dest="${top.dir}/${lib.core}"/-->

    </target>

    <!-- 
        Special targets for xmlcalabash module 
    -->
    <target name="prepare-xmlcalabash"
            unless="libs.available.calabash" if="${include.module.xmlcalabash}" >
        <echo message="------------------------------------------------------"/>
        <echo message="Downloading libraries required by the xmlcalabash module"/>
        <echo message="------------------------------------------------------"/>
        <echo message="Calabash: ${libs.available.calabash}"/>
        <fetch classpathref="classpath.core" dest="${modules.lib}" 
               url="${include.module.xmlcalabash.url}">
            <patternset>
              <include name="**/calabash.jar"/>
            </patternset>
        </fetch>
    </target>

    <!-- 
        Special targets for simpleql module 
    -->
    <uptodate property="parser.uptodate" srcfile="${src}/org/exist/xquery/modules/simpleql/SimpleQLParser.g"
        targetfile="${src}/org/exist/xquery/modules/simpleql/SimpleQLParser.java"/>

    <target name="prepare-simpleql" unless="parser.uptodate" if="${include.module.simpleql}">
        <echo message="Running ANTLR to generate XQuery parser"/>
        <antlr target="${src}/org/exist/xquery/modules/simpleql/SimpleQLParser.g"
            outputdirectory="${src}/org/exist/xquery/modules/simpleql" traceparser="${antlr.traceParser}"
            tracelexer="${antlr.traceLexer}">
            <classpath>
                <path refid="classpath.core"/>
            </classpath>
        </antlr>
    </target>

    <!-- 
        Special targets for jfreechart module unless="jfreechart-present"
    -->
    <target name="prepare-jfreechart" if="${include.module.jfreechart}">
        <echo message="-------------------------------------------------------"/>
        <echo message="Downloading libraries required by the jfreechart module"/>
        <echo message="-------------------------------------------------------"/>

        <fetch classpathref="classpath.core" dest="${modules.lib}" 
                             url="${include.module.jfreechart.url}" classname="org.jfree.chart.JFreeChart"
                             usecache="true">
            <patternset>
                <include name="**/lib/jfreechart-*.jar"/>
                <include name="**/lib/jcommon-*.jar"/>
                <exclude name="**/lib/jfreechart-*-*.jar"/>
            </patternset>
        </fetch>
    </target>

    <!-- 
        Special targets for memcached module
    -->
    <target name="prepare-memcached" if="${include.module.memcached}">
        <echo message="-------------------------------------------------------"/>
        <echo message="Downloading libraries required by the memcached module"/>
        <echo message="-------------------------------------------------------"/>
        
        <fetch classpathref="classpath.core" dest="${modules.lib}" 
            url="${include.module.memcached.url}" classname="net.spy.memcached.MemcachedClient"/>
    </target>

    <!-- 
        Special targets for xmpp module 
    -->
    <target name="prepare-xmpp" if="${include.module.xmpp}">
        <echo message="--------------------------------------------------"/>
        <echo message="Downloading libraries required by the XMPP module"/>
        <echo message="--------------------------------------------------"/>

        <fetch classpathref="classpath.core" dest="${modules.lib}" 
                             url="${include.module.xmpp.url}" classname="org.jivesoftware.smack.XMPPConnection">
            <patternset>
                <include name="**/smack.jar"/>
                <include name="**/smackx.jar"/>
            </patternset>
        </fetch>

    </target>

    <!-- 
        Special targets for cqlparser module 
    -->
    <target name="prepare-cqlparser" if="${include.module.cqlparser}">
        <echo message="------------------------------------------------------"/>
        <echo message="Downloading libraries required by the cqlparser module"/>
        <echo message="------------------------------------------------------"/>

        <fetch classpathref="classpath.core" dest="${modules.lib}" 
               url="${include.module.cqlparser.url}" classname="org.z3950.zing.cql.CQLParser" />

    </target>

    <target name="finish-persistentlogin" if="${include.module.persistentlogin}">
        <copy todir="${classes}/org/exist/xquery/modules/persistentlogin">
            <fileset dir="${src}/org/exist/xquery/modules/persistentlogin">
                <include name="*.xql"/>
            </fileset>
        </copy>
    </target>

    <!-- 
        ========================================
        Below this line only generic build items
        ========================================
    -->
    <target name="prepare-ivy">
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="classpath.core"/>
        <ivy:retrieve xmlns:ivy="antlib:org.apache.ivy.ant" sync="false"/>
    </target>

    <target name="prepare" depends="prepare-ivy,prepare-xslfo,prepare-simpleql,prepare-jfreechart,prepare-memcached,prepare-xmpp,prepare-xmlcalabash,prepare-expathrepo,prepare-cqlparser">
        <mkdir dir="${classes}"/>
    </target>

    <target name="compile" depends="prepare" description="Compile extension modules">
        <echo message="---------------------------"/>
        <echo message="Compiling extension modules"/>
        <echo message="---------------------------"/>

        <echo
            message="Compiling with Java ${ant.java.version} from ${build.compiler.source} source to ${build.compiler.target} target, debug ${build.debug}, optimize ${build.optimize}, deprecation ${build.deprecation}"/>

        <javac includeAntRuntime="false" debug="${build.debug}" deprecation="${build.deprecation}" destdir="${classes}" encoding="UTF-8"
            optimize="${build.optimize}" srcdir="${src}" source="${build.compiler.source}"
            target="${build.compiler.target}">
            <classpath>
                <path refid="classpath.core"/>
            </classpath>

        <exclude name="org/exist/xquery/modules/cache/**" unless="${include.module.cache}"/>
            <exclude name="org/exist/xquery/modules/compression/**" unless="${include.module.compression}"/>
            <exclude name="org/exist/xquery/modules/context/**" unless="${include.module.context}"/>
            <exclude name="org/exist/xquery/modules/counter/**" unless="${include.module.counter}"/>
            <exclude name="org/exist/xquery/modules/cqlparser/**" unless="${include.module.cqlparser}"/>
            <exclude name="org/exist/xquery/modules/datetime/**" unless="${include.module.datetime}"/>
            <exclude name="org/exist/xquery/modules/example/**" unless="${include.module.example}"/>
            <exclude name="org/exist/xquery/modules/file/**" unless="${include.module.file}"/>
            <exclude name="org/exist/xquery/modules/httpclient/**" unless="${include.module.httpclient}"/>
            <exclude name="org/exist/xquery/modules/image/**" unless="${include.module.image}"/>
            <exclude name="org/exist/xquery/modules/jfreechart/**" unless="${include.module.jfreechart}"/>
            <exclude name="org/exist/xquery/modules/jfreechart/render/SVG**" unless="${include.module.jfreechart_svg}"/>
            <exclude name="org/exist/xquery/modules/jndi/**" unless="${include.module.jndi}"/>
            <exclude name="org/exist/xquery/modules/lib/**" unless="${include.module.lib}"/>
			<exclude name="org/exist/xquery/modules/mail/**" unless="${include.module.mail}"/>
            <exclude name="org/exist/xquery/modules/math/**" unless="${include.module.math}"/>
            <exclude name="org/exist/xquery/modules/memcached/**" unless="${include.module.memcached}"/>
            <exclude name="org/exist/xquery/modules/oracle/**" unless="${include.module.oracle_ext}"/>
			<exclude name="org/exist/xquery/modules/scheduler/**" unless="${include.module.scheduler}"/>
            <exclude name="org/exist/xquery/modules/simpleql/**" unless="${include.module.simpleql}"/>
            <exclude name="org/exist/xquery/modules/sql/**" unless="${include.module.sql}"/>
            <exclude name="org/exist/xquery/modules/xmldiff/**" unless="${include.module.xmldiff}"/>
            <exclude name="org/exist/xquery/modules/xmpp/**" unless="${include.module.xmpp}"/>
            <exclude name="org/exist/xquery/modules/xslfo/**" unless="${include.module.xslfo}"/>
            <exclude name="org/exist/xquery/modules/xmlcalabash/**" unless="${include.module.xmlcalabash}"/>
            <exclude name="org/exist/xquery/modules/expathrepo/**" unless="${include.module.expathrepo}"/>
            <exclude name="org/exist/xquery/modules/process/**" unless="${include.module.process}"/>
            <exclude name="org/exist/xquery/modules/persistentlogin/**" unless="${include.module.persistentlogin}"/>
        </javac>
    </target>

    <target name="jar" depends="compile, finish-persistentlogin">
        <echo message="Creating exist-modules.jar ..."/>
        <jar basedir="${classes}" jarfile="${top.dir}/${lib.extensions}/exist-modules.jar">
            <manifest>
                <attribute name="Project-Name" value="${project.name}"/>
                <attribute name="Project-Version" value="${project.version}"/>
                <attribute name="Project-Build" value="${DSTAMP}"/>
                <attribute name="SVN-Revision" value="${svn.revision}"/>
            </manifest>
        </jar>
    </target>
    
    <target name="clean">
        <delete dir="${classes}"/>
        <delete file="${top.dir}/${lib.extensions}/exist-modules.jar" failonerror="false"/>
    </target>

    <target name="clean-all">
        <delete file="${modules.lib}/calabash.jar" failonerror="false"/>
    </target>


</project>
<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="jar" name="activedirectory">
    
    <property name="src" value="./src"/>
    <property name="classes" value="./classes"/>
    <property name="top.dir" value="../../.."/>
    
    <property name="test" value="test"/>
    <property name="test.classes" value="${test}/classes"/>
    <property name="test.src" value="${test}/src"/>

	<property file="${top.dir}/build.properties"/>
    
    <property file="../../local.build.properties"/>
    <property file="../../build.properties"/>
    
    <condition property="include.feature.security.activedirectory.config">
        <istrue value="${include.feature.security.activedirectory}"/>
    </condition>
    
    <path id="classpath.core">
        <fileset dir="${top.dir}/tools/jetty/lib">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${top.dir}/${lib.core}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${top.dir}/${lib.optional}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${top.dir}/${lib.endorsed}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${top.dir}/${lib.user}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${top.dir}/tools/ant/lib">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${top.dir}/extensions">
            <include name="**/lib/*.jar"/>
        </fileset>
        <pathelement path="${top.dir}/lib/extensions/exist-security-ldap.jar"/>
        <pathelement path="${top.dir}/exist.jar"/>
        <pathelement path="${top.dir}/exist-optional.jar"/>
        <pathelement path="${top.dir}/start.jar"/>
        <pathelement path="${java.class.path}"/>
    </path>

    <path id="classpath.aspectj">
        <fileset dir="${top.dir}/tools/aspectj/lib">
            <include name="*.jar"/>
        </fileset>
    </path>
    
    <target name="prepare">
        <mkdir dir="${classes}"/>
    </target>
    
    <target name="compile" depends="prepare" if="include.feature.security.activedirectory.config">
        <echo message="---------------------------"/>
        <echo message="Compiling Active Directory security module"/>
        <echo message="---------------------------"/>
        
        <echo
            message="Compiling with Java ${ant.java.version} from ${build.compiler.source} source to ${build.compiler.target} target, debug ${build.debug}, optimize ${build.optimize}, deprecation ${build.deprecation}"/>
        
        <javac includeAntRuntime="false" debug="${build.debug}" deprecation="${build.deprecation}" 
            destdir="${classes}" encoding="UTF-8"
            optimize="${build.optimize}" srcdir="${src}" 
            source="${build.compiler.source}" target="${build.compiler.target}">
            <classpath>
                <path refid="classpath.core"/>
            </classpath>
        </javac>
    </target>
    
    <target name="jar" depends="compile" if="include.feature.security.activedirectory.config">
        <echo message="Creating exist-security-activedirectory.jar ..."/>
        <jar basedir="${classes}" jarfile="${top.dir}/${lib.extensions}/exist-security-activedirectory.jar">  
            <manifest>
                <attribute name="Project-Name" value="${project.name}"/>
                <attribute name="Project-Version" value="${project.version}"/>
                <attribute name="Project-Build" value="${DSTAMP}"/>
                <attribute name="SVN-Revision" value="${svn.revision}"/>
            </manifest>
        </jar>
    </target>
    
    <target name="clean">
        <delete dir="${classes}"/>
        <delete file="${top.dir}/${lib.extensions}/exist-security-activedirectory.jar" failonerror="false"/>
    </target>
	
    <target name="compile-tests" depends="compile">
        <javac includeAntRuntime="false" debug="${build.debug}" deprecation="${build.deprecation}"
            destdir="${test.classes}" encoding="UTF-8"
            optimize="${build.optimize}" srcdir="${test.src}"
            source="${build.compiler.source}" target="${build.compiler.target}">
            <classpath>
                <path refid="classpath.core"/>
                <path refid="classpath.junit"/>
            </classpath>
        </javac>
    </target>

    <target name="test" depends="compile-tests">
        <junit fork="yes" haltonfailure="false" printsummary="yes" showoutput="${junit.output}" maxmemory="${junit.forked.VM.maxmemory}">

            <classpath refid="classpath.core"/>
            <classpath refid="classpath.junit"/>
            <classpath refid="classpath.aspectj"/>
    
            <formatter type="plain"/>
            <formatter type="xml"/>

            <test name="org.exist.security.realm.activedirectory.ActiveDirectoryRealmTest"
                todir="${junit.index.reports}"/>
        </junit>
    </target>

</project><?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="all" name="xprocxq">
    <!-- $Id -->

    <property name="top.dir" value="../.."/>
    <property file="${top.dir}/build.properties" />
    <property file="../local.build.properties" />

    <property name="xprocxq.dir" value="main"/>

    <target name="all" depends="clean">
        <echo message="-------------------------------------"/>
        <echo message="Building XProcXQ"/>
        <echo message="-------------------------------------"/>
        <ant dir="${xprocxq.dir}" antfile="build.xml" target="exist-jar" inheritall="false"/>
        <delete dir="${top.dir}/lib/extensions" includes="xprocxq*.jar" failonerror="false"/>
        <copy todir="${top.dir}/lib/extensions">
            <fileset dir="${xprocxq.dir}/dist">
                <include name="*.jar"/>
            </fileset>
        </copy>
    </target>

    <target name="clean">
        <ant dir="${xprocxq.dir}" antfile="build.xml" target="clean" inheritall="false"/>
    </target>
</project>
<?xml version="1.0"?>
<project name="xproc.xq" basedir=".">
    <description>This build file builds the distro for xprocxq.</description>

	<property name="dist" location="dist"/>
	<loadfile property="release" srcFile="VERSION"/>
	<property name="release-dest" location=".."/>
    
    <property name="top.dir" value="../../.."/>
    <property file="${top.dir}/build.properties"/>


    <!-- ===================================================== -->
    <!-- create release dist for eXist                         -->
    <!-- ===================================================== -->
    <target name="dist" depends="exist-jar">
	
		<buildnumber/>
	
		<copy file="README.eXist" todir="${dist}"/>
  		<copy file="LICENSE" todir="${dist}"/>
  		<copy file="Changelog" todir="${dist}"/>

  	  	<copy todir="${dist}/examples">
	    	<fileset dir="docs/examples" excludes="**/*.svn"/>
	  	</copy>
	
		<propertyfile file="build.number"/>
	
		<move file="${dist}/xprocxq.jar" tofile="${dist}/${release}.${build.number}.jar"/> 
	
	 	<zip destfile="${release-dest}/${release}.${build.number}.zip"
	       basedir="dist"
	  	/>
	</target>


    <!-- ===================================================== -->
    <!-- create jar for eXist                                  -->
    <!-- ===================================================== -->
    <target name="exist-jar" depends="clean">
      <delete dir="${dist}/xprocxq.jar"/>
      <zip destfile="${dist}/xprocxq.jar">
          <zipfileset dir="lib" includes="**/**/**.xml" prefix="net/xproc/xprocxq/lib"/>
        <zipfileset dir="src/xquery" includes="**/**/**.*" prefix="net/xproc/xprocxq/src/xquery"/>
        <zipfileset dir="src/expath" includes="**/**/**.*" prefix="org/expath/www/mod/http-client"/>
        <zipfileset dir="etc" includes="**/**/*.*" prefix="net/xproc/xprocxq/etc"/>
      </zip>
    </target>


    <!-- ===================================================== -->
    <!-- get artifacts from W3C site                           -->
    <!-- ===================================================== -->
    <target name="get-w3c-artifacts" description="download .xml files from W3C XProc">
        <get src="http://www.w3.org/XML/XProc/docs/pipeline-library.xml" dest="etc/pipeline-library.xml"/>
        <get src="http://www.w3.org/XML/XProc/docs/typed-pipeline-library.xml" dest="etc/typed-pipeline-library.xml"/>
        <get src="http://www.w3.org/XML/XProc/docs/error-list.xml" dest="etc/error-list.xml"/>
    </target>


    <!-- ===================================================== -->
    <!-- clean dist                                            -->
    <!-- ===================================================== -->
    <target name="clean">
        <delete dir="dist" quiet="true" failonerror="false"/>
        <mkdir dir="dist"/>
        
        <delete file="${top.dir}/${lib.extensions}/xprocxq.jar" failonerror="false"/>
    </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="eXist-db" default="default" basedir=".">
    <description>Builds, tests, and runs the project eXist-db.</description>
    <import file="nbproject/build-impl.xml"/>

    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar-with-manifest:    JAR building (if you are using a manifest)
      -do-jar-without-manifest: JAR building (if you are not using a manifest)
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="eXist-1.4-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->
    
    <target name="-post-compile" depends="aspectj">
        <!-- override from build-impl.xml -->
    </target>
    
    <!-- Add an AspectJ build target -->
    <taskdef classpath="tools/aspectj/lib/aspectjtools-1.7.1.jar" resource="org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties"/>
    <target name="aspectj">
        <echo level="info">--- aspectj (start) ---</echo>
        <iajc
            destdir="${build.classes.dir}"
            source="${javac.source}"
            target="${javac.target}"
            classpath="${javac.classpath}:${j2ee.platform.classpath}"
            deprecation="${javac.deprecation}"
            encoding="${source.encoding}"
            debug="${javac.debug}" showWeaveInfo="true">
            <inpath>
                <pathelement location="${build.classes.dir}" />
            </inpath>
        </iajc>
    </target>
    
</project>
<?xml version="1.0"?>
<project default="all" basedir="." xmlns:xdb="http://exist-db.org/ant">
  <description> eXist ant task test </description>

  <typedef resource="org/exist/ant/antlib.xml" uri="http://exist-db.org/ant">
    <classpath>
      <fileset dir="../../lib/core">
        <include name="*.jar"/>
      </fileset>
      <!--
      <fileset dir="../../lib/endorsed">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="../../lib/optional">
        <include name="*.jar"/>
      </fileset>
      -->
      <pathelement location="../../exist.jar"/>
      <pathelement location="../../exist-optional.jar"/>
    </classpath>
  </typedef>


  <property name="xmldb.host" value="localhost"/>
  <property name="xmldb.port" value="8080"/>
  <property name="xmldb.user" value="admin"/>
  <property name="xmldb.passwd" value="admin"/>
  <property name="xmldb.url" value="xmldb:exist://${xmldb.host}:${xmldb.port}/exist/xmlrpc/db"/>

  <target name="all">
    <antcall target="store"/>
    <antcall target="create"/>
    <antcall target="list"/>
    <antcall target="exist"/>
    <antcall target="extract"/>
    <antcall target="xpath"/>
    <antcall target="copy"/>
    <antcall target="move"/>
    <antcall target="xquery"/>
    <!--
    <antcall target="xupdate"/>
    -->
    <antcall target="backup"/>
    <antcall target="remove"/>
    <antcall target="groups"/>
    <antcall target="users"/>
    <antcall target="adduser"/>
    <antcall target="rmuser"/>
    <antcall target="restore"/>
  </target>

  <target name="store" description="test store task">
    <mkdir dir="data"/>
    <copy todir="data">
      <fileset dir="../mods" includes="*.xml"/>
    </copy>
    <xdb:store user="${xmldb.user}" password="${xmldb.passwd}" uri="${xmldb.url}/test"
      createcollection="true">
      <fileset dir="data">
        <include name="*.xml"/>
      </fileset>
    </xdb:store>
    <xdb:store user="${xmldb.user}" password="${xmldb.passwd}" uri="${xmldb.url}/test"
      createcollection="true" srcfile="../examples.xml"/>
  </target>

  <target name="create" description="test create task">
    <xdb:create user="${xmldb.user}" password="${xmldb.passwd}" uri="${xmldb.url}/test"
      collection="sub1"/>
    <xdb:create user="${xmldb.user}" password="${xmldb.passwd}" uri="${xmldb.url}/test/sub1"
      collection="sub11"/>
    <xdb:create user="${xmldb.user}" password="${xmldb.passwd}" uri="${xmldb.url}/test"
      collection="sub2"/>
  </target>

  <target name="exist">
    <antcall target="exist_col"/>
    <antcall target="exist_res"/>
  </target>
  <condition property="col.exist">
    <xdb:exist user="${xmldb.user}" password="${xmldb.passwd}" uri="${xmldb.url}/test"/>
  </condition>
  <condition property="res.exist">
    <xdb:exist user="${xmldb.user}" password="${xmldb.passwd}" uri="${xmldb.url}/test"
      resource="examples.xml"/>
  </condition>
  <target name="exist_col" description="test exist condition for collection" if="col.exist">
    <echo message="collection exists"/>
  </target>
  <target name="exist_res" description="test exist condition for resource" if="res.exist">
    <echo message="resource exists"/>
  </target>

  <target name="list" description="test list task">
    <xdb:list user="${xmldb.user}" password="${xmldb.passwd}" uri="${xmldb.url}" collections="true"
      outputproperty="cols"/>
    <echo message="cols=${cols}/test"/>
    <xdb:list user="${xmldb.user}" password="${xmldb.passwd}" uri="${xmldb.url}/test"
      resources="true" outputproperty="res"/>
    <echo message="cols=${res}"/>
    <xdb:list user="${xmldb.user}" password="${xmldb.passwd}" uri="${xmldb.url}/test"
      collections="true" resources="true" outputproperty="colsnres"/>
    <echo message="cols=${colsnres}"/>
  </target>

  <target name="extract" description="test extract task">
    <mkdir dir="tmp"/>
    <xdb:extract user="${xmldb.user}" password="${xmldb.passwd}" uri="${xmldb.url}/test"
      destdir="tmp"/>
    <xdb:extract user="${xmldb.user}" password="${xmldb.passwd}" uri="${xmldb.url}/test"
      resource="examples.xml" destfile="tmp/test.xml"/>
  </target>

  <target name="xpath" description="test query task">
    <mkdir dir="tmp"/>
    <xdb:xpath user="${xmldb.user}" password="${xmldb.passwd}" uri="${xmldb.url}"
      query="/example-queries/query" count="true" outputproperty="count"/>
    <echo message="Found ${count} results"/>
    <xdb:xpath user="${xmldb.user}" password="${xmldb.passwd}" uri="${xmldb.url}"
      query="/example-queries/query[0]/description" outputproperty="descr"/>
    <echo message="Query result: ${descr}"/>
    <xdb:xpath user="${xmldb.user}" password="${xmldb.passwd}" uri="${xmldb.url}"
      query="/example-queries/query" destDir="tmp"/>
    <xdb:xpath user="${xmldb.user}" password="${xmldb.passwd}" uri="${xmldb.url}"
      query="/mods/titleInfo" namespace="http://www.loc.gov/mods/v3" destDir="tmp"/>
    <xdb:xpath user="${xmldb.user}" password="${xmldb.passwd}" uri="${xmldb.url}/test"
      resource="examples.xml" query="/example-queries/query" destDir="tmp"/>
  </target>

  <target name="copy" description="test copy task">
    <xdb:copy user="${xmldb.user}" password="${xmldb.passwd}" uri="${xmldb.url}/test"
      resource="examples.xml" destination="sub1" name="new.xml"/>
    <xdb:copy user="${xmldb.user}" password="${xmldb.passwd}" uri="${xmldb.url}/test"
      collection="sub1" destination="sub2" name="new"/>
  </target>

  <target name="move" description="test move task">
    <xdb:move user="${xmldb.user}" password="${xmldb.passwd}" uri="${xmldb.url}/test/sub1"
      resource="new.xml" destination="sub11" name="moved.xml"/>
    <xdb:move user="${xmldb.user}" password="${xmldb.passwd}" uri="${xmldb.url}/test"
      collection="sub2" destination="sub1" name="moved"/>
  </target>

  <target name="xquery" description="test xquery task">
    <xdb:xquery user="${xmldb.user}" password="${xmldb.passwd}" uri="${xmldb.url}"
                query="collection('/db/test')//*:publisher" outputproperty="query1"/>
    <echo>${query1}</echo>
    <!--
    <xdb:xquery user="${xmldb.user}" password="${xmldb.passwd}" uri="${xmldb.url}/test"
      queryUri=".. .. .." outputproperty="query2"/>
    <echo>${query2}</echo>
    -->
  </target>

  <target name="xupdate" description="test xupdate task">
    <xdb:xupdate user="${xmldb.user}" password="${xmldb.passwd}" uri="${xmldb.url}/test"/>
  </target>

  <target name="remove" description="test remove task">
    <xdb:remove user="${xmldb.user}" password="${xmldb.passwd}" uri="${xmldb.url}/test"
      resource="examples.xml"/>
    <xdb:remove user="${xmldb.user}" password="${xmldb.passwd}" uri="${xmldb.url}" collection="test"
    />
  </target>

  <target name="backup" description="test backup task">
    <mkdir dir="backup"/>
    <xdb:backup user="${xmldb.user}" password="${xmldb.passwd}" uri="${xmldb.url}/test" dir="backup"
    />
  </target>

  <target name="restore" description="test restore task">
    <xdb:restore user="${xmldb.user}" password="${xmldb.passwd}" uri="${xmldb.url}"
      dir="backup/db/test"/>

    <!--
    <xdb:restore user="${xmldb.user}" password="${xmldb.passwd}" uri="${xmldb.url}">
      <dirset dir="backup/db">
        <include name="*"/>
      </dirset>
    </xdb:restore>
    -->

  </target>

  <target name="groups" description="test groups task">
    <xdb:groups user="${xmldb.user}" password="${xmldb.passwd}" uri="${xmldb.url}"
      outputproperty="groups"/>
    <echo message="groups=${groups}"/>
  </target>

  <target name="users" description="test users task">
    <xdb:users user="${xmldb.user}" password="${xmldb.passwd}" uri="${xmldb.url}"
      outputproperty="users"/>
    <echo message="users=${users}"/>
  </target>

  <target name="adduser" description="test add user task">
    <xdb:adduser user="${xmldb.user}" password="${xmldb.passwd}" uri="${xmldb.url}" name="test"
      secret="test" primarygroup="guest"/>
  </target>
    
  <target name="rmuser" description="test remove user task">
    <xdb:rmuser user="${xmldb.user}" password="${xmldb.passwd}" uri="${xmldb.url}" name="test"/>
  </target>

  <target name="shutdown" description="test shutdown task">
    <xdb:shutdown user="${xmldb.user}" password="${xmldb.passwd}" uri="${xmldb.url}/test"/>
  </target>
</project>
<!-- $Id$ -->
<project basedir="." default="all" name="samples">

    <property name="top.dir" value=".."/>
    <property name="src" value="./src"/>
    <property name="classes" value="./classes"/>

    <path id="classpath.core">
        <fileset dir="${top.dir}/${lib.core}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${top.dir}/${lib.endorsed}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${top.dir}/${lib.optional}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${top.dir}/${tools.ant}/lib">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${top.dir}/${lib.extensions}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${top.dir}/extensions">
            <include name="**/lib/*.jar"/>
        </fileset>
        <pathelement path="${top.dir}/exist.jar"/>
        <pathelement path="${top.dir}/exist-optional.jar"/>
        <pathelement path="${java.class.path}"/>
    </path>

    <target name="prepare">
        <delete failonerror="false" dir="${classes}"/>
        <mkdir dir="${classes}"/>
    </target>

    <target depends="prepare" name="compile" description="Compile samples">
        <echo
            message="Compiling samples with Java ${ant.java.version} from ${build.compiler.source} source to ${build.compiler.target} target, debug ${build.debug}, optimize ${build.optimize}, deprecation ${build.deprecation}"/>
        <javac includeAntRuntime="false" debug="${build.debug}" deprecation="${build.deprecation}" destdir="${classes}"
            srcdir="${src}" source="${build.compiler.source}" target="${build.compiler.target}"
            optimize="${build.optimize}" encoding="UTF-8">
            <classpath>
                <path refid="classpath.core"/>
            </classpath>
        </javac>
    </target>

    <target  name="jar" description="Create samples jar">
        <jar basedir="${classes}" compress="true" jarfile="${top.dir}/examples.jar" >
            <manifest>
                <attribute name="Project-Name" value="${project.name}"/>
                <attribute name="Project-Version" value="${project.version}"/>
                <attribute name="Project-Build" value="${DSTAMP}"/>
                <attribute name="SVN-Revision" value="${svn.revision}"/>
            </manifest>
            <include name="org/exist/examples/**"/>
        </jar>
    </target>

    <target  depends="compile,jar" name="all" description="Create samples"/>


</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="test-exist-ant" default="run" xmlns:au="antlib:org.apache.ant.antunit" xmlns:xdb="http://exist-db.org/ant">

    <!-- $Id$ -->

    <import file="common.xml"/>

    <target name="setup">
        <echo>startup eXist</echo>
        
       <xdb:create user="admin" password=""
       uri="${test.coll}" collection="antunit"/>  

       <xdb:create user="admin" password=""
       uri="${test.coll}/antunit" collection="test"/>

       <xdb:create user="admin" password=""
       uri="${test.coll}/antunit/test" collection="test"/>

        <xdb:store user="admin" password=""
           uri="${test.coll}/antunit"
           createcollection="true" srcfile="test.xml"/>

        <xdb:store user="admin" password=""
            uri="${test.coll}/antunit/test"
            createcollection="true" srcfile="test.xml"/>

        <xdb:store user="admin" password=""
           uri="${test.coll}/antunit"
           createcollection="true" type="binary" srcfile="logo.jpg"/>

        <xdb:store user="admin" password=""
           uri="${test.coll}/antunit"
           createcollection="true" srcfile="test1.xml"/>
        <xdb:store user="admin" password=""
           uri="${test.coll}/antunit"
           createcollection="true" srcfile="common.xml"/>
    </target>

    <target name="alltests">
        <au:antunit>
            <file file="base.xml"/>
            <file file="user.xml"/>
            <file file="file.xml"/>
            <file file="server.xml"/>
            <file file="xmldb.xml"/>
            <au:plainlistener/>
        </au:antunit>
    </target>

    <target name="teardown">
        <xdb:remove uri="${test.coll}" user="admin" password="" collection="antunit"/>

        <delete file="test-logo.jpg"/>
        <delete file="test-output.xml"/>
        <delete dir="antunit"/>

        <!-- remove testtest user //-->
        <xdb:rmuser uri="${exist.uri}/db" user="admin" password="" name="testtest"/>

    </target>

    <target name="run" depends="setup,alltests,teardown"/>

</project>
<?xml version="1.0" encoding="iso-8859-1" ?>
<!-- $Id: dist.xml 10790 2009-12-17 21:41:03Z dizzzz $ -->
<project basedir="../.." default="backrest" name="backrest">
    
    <description>Create eXist standalone backup/restore distribution</description>
    
    <!-- import common targets -->
    <import file="../../build.xml"/>
    
    <property name="backrest" value="./tools/backrest"/>
    <property name="backrest.src" value="${backrest}/src"/>
    <property name="backrest.dist" value="${backrest}/dist/${project.name}-backrest-${project.version}"/>
    <property name="backrest.lib" value="${backrest.dist}/lib"/>
    
    
    <!-- ================================================================== -->
    <!-- init                                                               -->
    <!-- ================================================================== -->
    
    <target name="init-backrest" depends="prepare">
        
        <delete dir="${backrest}/dist" failonerror="false"/>
        
        <mkdir dir="${backrest}/dist"/>
        <mkdir dir="${backrest.dist}"/>
        <mkdir dir="${backrest.lib}"/>
        <mkdir dir="${backrest.dist}/webapp"/>
        <mkdir dir="${backrest.dist}/webapp/WEB-INF"/>
        <mkdir dir="${backrest.dist}/webapp/WEB-INF/data"/>
    </target>
    
    
    <!-- ================================================================== -->
    <!-- create backrest                                                               -->
    <!-- ================================================================== -->
    
    <target name="create-backrest" depends="init-backrest, jar">
        
        <!-- Create a consolidated jar file -->
        
         <zip destfile="${backrest.lib}/exist-backrest.jar">        
            <archives>
                <zips>
                    <fileset dir="${basedir}">
                        <include name="exist.jar"/>
                    </fileset>
                </zips>
                
                <zips>
                    <fileset dir="${lib.core}">   
                        <include name="antlr-*.jar"/>
                        <include name="xmldb.jar"/>
                        <include name="xmlrpc-common-*.jar"/>
                        <include name="xmlrpc-client-*.jar"/>
                        <include name="ws-commons-util-*.jar"/>
                        <include name="commons-pool-*.jar"/>
                        <include name="excalibur-cli-*.jar"/>
                        <include name="jline-*.jar"/>
                        <include name="log4j-*.jar"/>
                        <include name="sunxacml-*.jar"/>
                    </fileset>                     
                </zips>
                
                <zips>                   
                    <fileset dir="${lib.endorsed}">      
                        <include name="*.jar"/>
                    </fileset>
                </zips>
            </archives>       
        </zip>
        
         <!-- Copy all the scripts -->
        
        <copy todir="${backrest.dist}" overwrite="true">
            <fileset dir="${backrest.src}">      
                <include name="*.bat"/>
                <include name="*.sh"/>
                <include name="*.properties"/>
            </fileset>
        </copy>
        
    </target>
    
    
    <!-- ================================================================== -->
    <!-- Create dist-backrest                                               -->
    <!-- ================================================================== -->
    
    <target name="backrest" depends="create-backrest" description="Create backrest zip">
        
        <zip basedir="${backrest}/dist" compress="true" zipfile="${backrest}/${project.name}-backrest-${project.version}.zip"/>
        
    </target>
    
    
</project>
<project basedir="." default="jar" name="XBot">
    
    <property name="src" value="./src"/>
    <property name="lib" value="./lib"/>
    <property name="dist" value="./dist"/>
    <property name="classes" value="./classes"/>
    <property name="server.dir" value="../.."/>

    <target name="prepare">
        <echo message="--------------------------------------------------"/>
        <echo message="Compiling XBot IRC Bot"/>
        <echo message="--------------------------------------------------"/>
        <mkdir dir="${classes}"/>
        <mkdir dir="${dist}"/>
    </target>

    <path id="classpath.xbot">
        <pathelement path="${lib}/pircbot.jar"/>
        <pathelement path="${server.dir}/lib/core/xmldb.jar"/>
        <pathelement path="${server.dir}/lib/optional/servlet-api-2.5.jar"/>
        <pathelement path="${server.dir}/exist.jar"/>
    </path>
	
	<!-- =================================================================== -->
    <!-- Compiles the source code                                            -->
    <!-- =================================================================== -->
    <target depends="prepare" name="compile">
        <javac includeAntRuntime="false" debug="true" deprecation="${build.deprecation}"
                destdir="${classes}" encoding="UTF-8"
                optimize="${build.optimize}" srcdir="${src}"
                source="${build.compiler.source}" target="${build.compiler.target}">

            <classpath>
                <path refid="classpath.xbot"/>
            </classpath>
        </javac>
    </target>
	
    <target name="jar" depends="compile">
        <jar basedir="${classes}" jarfile="${dist}/ircbot.jar"/>
    </target>

    <target name="clean">
        <delete dir="${classes}"/>
        <delete dir="${dist}"/>
    </target>

    <target name="dist" depends="compile">
        <jar basedir="${classes}" compress="true" jarfile="${dist}/xbot.jar">
            <include name="org/exist/**"/>
        </jar>
        <war destfile="${dist}/irc.war" webxml="webapp/WEB-INF/web.xml">
            <lib dir="${dist}">
                <include name="*.jar"/>
            </lib>
        </war>
    </target>
</project><?xml version="1.0" encoding="UTF-8"?>

<!-- ======================================================================= -->
<!-- Compile the wrapper class to start eXist as a service                   -->
<!-- ======================================================================= -->
<project basedir="." default="jar" name="CommandLineInstaller">

    <property name="src" value="./src"/>
    <property name="classes" value="./classes"/>
	<property name="main.dir" value="../.."/>

    <property name="build.compiler" value="modern"/>

    <path id="classpath.izpack">
        <fileset dir="${izpack.dir}/lib">
            <include name="*.jar"/>
        </fileset>
    </path>

    <!-- =================================================================== -->
    <!-- Prepare the build                                                   -->
    <!-- =================================================================== -->
    <target name="prepare">
        <mkdir dir="${classes}"/>
    </target>

    <!-- =================================================================== -->
    <!-- Compiles the source code                                            -->
    <!-- =================================================================== -->
    <target depends="prepare" name="compile">
         <echo
            message="Compiling with Java ${ant.java.version} from ${build.compiler.source} source to ${build.compiler.target} target, debug ${build.debug}, optimize ${build.optimize}, deprecation ${build.deprecation}"/>
            
        <javac includeAntRuntime="false" debug="${build.debug}" deprecation="${build.deprecation}" 
			destdir="${classes}" encoding="UTF-8"
			optimize="${build.optimize}" srcdir="${src}" 
        	source="${build.compiler.source}" target="${build.compiler.target}" verbose="true">

            <classpath>
            	<path refid="classpath.izpack"/>
            </classpath>
        </javac>
    </target>

    <target name="jar" depends="compile">
		<jar destfile="clinstaller.jar" basedir="${classes}" compress="true"/>
	</target>
</project>
<project basedir="." default="compile" name="RequestReplayer">
	<property name="src" value="./src"/>
    <property name="classes" value="./classes"/>
	
	<target name="prepare">
    	<echo message="--------------------------------------------------"/>
        <echo message="Compiling Request Replayer"/>
        <echo message="--------------------------------------------------"/>
		<mkdir dir="${classes}"/>
	</target>
	
	<!-- =================================================================== -->
    <!-- Compiles the source code                                            -->
    <!-- =================================================================== -->
    <target depends="prepare" name="compile">
        <javac includeAntRuntime="false" debug="${build.debug}" deprecation="${build.deprecation}" 
			destdir="${classes}" encoding="UTF-8"
			optimize="${build.optimize}" srcdir="${src}" 
        	source="${build.compiler.source}" target="${build.compiler.target}">

        </javac>
    </target>
	
	<target name="clean">
		<delete dir="${classes}"/>
	</target>
</project><?xml version="1.0" encoding="UTF-8"?>
<!-- $Id$ -->
<!-- ======================================================================= -->
<!-- Compile the wrapper class to start eXist as a service                   -->
<!-- ======================================================================= -->
<project basedir="." default="compile" name="eXistWrapper">

    <property file="../../build.properties" />

    <property name="src" value="./src"/>
    <property name="lib" value="./lib"/>
    <property name="classes" value="./classes"/>
	<property name="conf" value="./conf"/>
	<property name="bin" value="./bin"/>
	<property name="logs" value="./logs"/>
	<property name="work" value="./work"/>
	<property name="server.dir" value="../.."/>
    <property name="jetty.dir" value="tools/jetty"/>

    <property name="build.compiler" value="modern"/>
    
    <path id="classpath.wrapper">
    	<pathelement path="${lib}/wrapper.jar"/>
    	<pathelement path="${server.dir}/start.jar"/>
    	<pathelement path="${server.dir}/exist.jar"/>
    </path>
    
    <!-- =================================================================== -->
    <!-- Prepare the build                                                   -->
    <!-- =================================================================== -->
    <target name="prepare">
    	<echo message="--------------------------------------------------"/>
        <echo message="Setting up Java Service Wrapper"/>
        <echo message="--------------------------------------------------"/>
        
        <mkdir dir="${classes}"/>
	    <delete dir="${logs}"/>
		<mkdir dir="${logs}"/>
    	<delete dir="${work}"/>
    	<mkdir dir="${work}"/>
        <tstamp/>
    	
    	<filter token="app.name" value="eXist-db"/>
    	<filter token="app.long.name" value="eXist-db Native XML Database"/>
    	<filter token="app.description" value="eXist-db Database Server"/>
    	<filter token="app.long.description" value="Start and stop the eXist-db Database Server wrapper"/>
    	<filter token="jetty.dir" value="${jetty.dir}"/>
    	<filter token="java.vm" value="java"/>
    	<copy file="${conf}/wrapper.conf.in" tofile="${conf}/wrapper.conf" filtering="true" overwrite="false" />
    	<filter token="java.vm" value="$JAVA_HOME/bin/java"/>
    	<copy file="${conf}/wrapper.conf.in" tofile="${conf}/wrapper.conf.install" filtering="true"/>
    	<copy file="${bin}/exist.sh.in" tofile="${bin}/exist.sh" filtering="true"/>
    	<chmod file="${bin}/exist.sh" perm="+x"/>
    	
    	<!-- Create log4j config based on general config file -->
    	<xslt in="${server.dir}/log4j.xml" out="${conf}/log4j.xml" style="wrapper-log4j.xsl"/>
    </target>

    <!-- =================================================================== -->
    <!-- Compiles the source code                                            -->
    <!-- =================================================================== -->
    <target depends="prepare" name="compile">
        <javac includeAntRuntime="false" debug="${build.debug}" deprecation="${build.deprecation}" 
			destdir="${classes}" encoding="UTF-8"
			optimize="${build.optimize}" srcdir="${src}" 
        	source="${build.compiler.source}" target="${build.compiler.target}">
            <classpath>
            	<path refid="classpath.wrapper"/>
            </classpath>
        </javac>
    </target>
	
	<target name="clean">
		<delete dir="${classes}"/>
		<delete file="${conf}/wrapper.conf.install"/>
		<delete file="${bin}/exist.sh"/>
	</target>
</project>
<project name="XQTS" basedir="." default="store">
    <!-- $Id$ -->

    <!-- import default properties from file -->
    <xmlproperty file="config.xml"/>

    <property name="server.dir" value="../.."/>

    <path id="classpath.core">
        <fileset dir="${server.dir}/lib/core">
            <include name="*.jar"/>
        </fileset>
        <pathelement path="${server.dir}/exist.jar"/>
        <pathelement path="${server.dir}/exist-optional.jar"/>
    </path>
    
    <typedef resource="org/exist/ant/antlib.xml" uri="http://exist-db.org/ant">
        <classpath refid="classpath.core"/>
    </typedef>

    <available file="${config.basedir}" property="xqts.present"/>
    <available file="${server.dir}/src/org/exist/numbering/NodeId.java" property="exist.dln"/>

    <target name="store" xmlns:xmldb="http://exist-db.org/ant" if="xqts.present"  depends="check-files">
        <echo message="XQuery Test Suite (XQTS) Setup"/>
        <echo message="---------------------------------"/>
        <echo message="Loading XQTS sources from directory: ${config.basedir}"/>
        
    	<!-- workaround ENTITY problem -->
    	<copy todir="${server.dir}">
    	  <fileset dir="${config.basedir}"
    	           includes="**/cat/*"
    	  />
    	</copy>
    	
    	<xmldb:store uri="xmldb:exist://localhost:8080/exist/xmlrpc/db/system/config/db"
    		user="${config.username}" password="${config.password}"
    		createcollection="true">
            <fileset dir=".">
                <include name="collection.xconf"/>
            </fileset>
        </xmldb:store>
    	
        <xmldb:store uri="xmldb:exist://localhost:8080/exist/xmlrpc/db/XQTS" createcollection="true" user="${config.username}" password="${config.password}">
            <fileset dir=".">
                <include name="config.xml"/>
                <include name="stylesheets/*.xsl"/>
            </fileset>
        </xmldb:store>

        <!-- xmldb:store uri="xmldb:exist://localhost:8080/exist/xmlrpc/db/XQTS/ReportingResults" createcollection="true" user="${config.username}" password="${config.password}">
            <fileset dir=".">
                <include name="collectresults.xql"/>
            </fileset>
        </xmldb:store-->
        
        <xmldb:store uri="xmldb:exist://localhost:8080/exist/xmlrpc/db/XQTS/ReportingResults" createcollection="true" user="${config.username}" password="${config.password}">
            <fileset dir="${config.basedir}/ReportingResults">
                <include name="XQTSResult.xsd"/>
                <include name="XQTSResults.xsl"/>
                <include name="Results.xml"/>
            </fileset>
        </xmldb:store>
        
        <xmldb:store uri="xmldb:exist://localhost:8080/exist/xmlrpc/db/XQTS" createcollection="true" user="${config.username}" password="${config.password}">
            <fileset dir="${config.basedir}">
                <include name="XQTSCatalog.xml"/>
            </fileset>
        </xmldb:store>

        <xmldb:store uri="xmldb:exist://localhost:8080/exist/xmlrpc/db/XQTS/TestSources" createcollection="true" user="${config.username}" password="${config.password}">
            <fileset dir="${config.basedir}/TestSources">
                <include name="*"/>
                <!-- This list should be not very long -->
                <exclude name="badxml.xml"/> 
                <exclude name="BCisInvalid.xml"/> 
                <exclude name="InvalidUmlaut.xml"/> 
                <exclude name="InvalidXMLId.xml"/> 
                
            </fileset>
        </xmldb:store>
             
        <!--xmldb:store uri="xmldb:exist://localhost:8080/exist/xmlrpc/db/XQTS/TestSources" createcollection="true" type="xml" user="${config.username}" password="${config.password}">
            <fileset dir="${config.basedir}/TestSources">
                <include name="orders"/>
            </fileset>
        </xmldb:store-->

    </target>
    
    <target name="check-files" unless="xqts.present">
        <echo message="The XQTS sources could not be found in directory ${config.basedir}. Please edit"/>
        <echo message="webapp/xqts/config.xml and check the path specified via the"/>
        <echo message="&lt;basedir&gt; element."/>
    </target>
</project>
