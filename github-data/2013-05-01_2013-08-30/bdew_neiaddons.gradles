buildscript {
    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
    repositories {
        mavenCentral()
	mavenLocal()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.0-SNAPSHOT'
    }
}

apply plugin: 'forge'
apply plugin: 'scala'

version = "1.10.4"
ext.bdlibver = "1.0.0.15"
ext.versuffix = "mc164"

if (project.hasProperty('buildnum')) {
    project.version = project.version + '.' + project.buildnum
} else {
    project.version = "0-SNAPSHOT"
    ext.bdlibver = "0-SNAPSHOT"
    repositories.mavenLocal()
}

group = "net.bdew"
archivesBaseName = "neiaddons"

minecraft {
    version = "1.6.4-9.11.1.964"
    replace("BDLIB_VER", project.bdlibver)
    replace("NEIADDONS_VER", project.version)
}

repositories {
    mavenCentral()
    maven {
        name = "bdew"
        url = "http://jenkins.bdew.net/maven"
    }
}

dependencies {
    compile "net.bdew:bdlib:" + bdlibver
    compile project(path: ':deps', configuration: 'deps')
}

import org.apache.tools.ant.filters.ReplaceTokens

sourceSets {
    main {
        scala {
            srcDir 'src'
        }
        resources {
            srcDir 'resources'
        }
    }
}


compileScala {
    // Hack the compile classpath to include deps jar before forge/mc so 
    // that NEI custom GuiContainer is used. WTB SANITY PST
    doFirst {
	    sourceSets.main.compileClasspath = files(project.depJarPath) + sourceSets.main.compileClasspath;
    }
}

processResources {
    inputs.property "tokens", minecraft.replacements
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        filter(ReplaceTokens, tokens: minecraft.replacements)
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    exclude "**/*.psd"
}

jar {
    exclude "**/*.psd"
    appendix = project.versuffix
}

artifacts {
    archives sourceJar
    archives deobfJar
}

apply plugin: 'maven-publish'


ideaModule {
    dependsOn task(":deps:sourceJar")
    dependsOn task(":deps:deobfJar")
}

idea {
    module {
        iml {
            withXml { xmlProvider ->
                // Fix the IDEA module XML to use the jars produced by deps, because using them directly doesn't work properly
                // This is somwhat hackish, but i couldn't find a better way...

                // Find the right node
                def module = xmlProvider.asNode()
                def moduleDeps = module.component.find {it.@name == "NewModuleRootManager"}

                // Nuke the module dependency
                moduleDeps.remove(moduleDeps.find {it['@module-name'] == 'deps'})

                // Setup the entry structure
                def myNode = new Node(null, 'orderEntry', [type:'module-library', exported:''])
                moduleDeps.children().add(0, myNode)
                def libNode = myNode.appendNode 'library'
                def classesNode = libNode.appendNode 'CLASSES'
                def sourceNode = libNode.appendNode 'SOURCES'

                // Add the jars, project.depJarPath and project.depSourceJarPath are set in the subproject  
                classesNode.appendNode 'root', [url: 'jar://' + project.depJarPath.getAbsolutePath().replace('\\','/')+'!/']
                sourceNode.appendNode 'root', [url: 'jar://' + project.depSourceJarPath.getAbsolutePath().replace('\\','/')+'!/']
            }
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact deobfJar

            artifact sourceJar {
                classifier "sources"
            }
        }
    }
    repositories {
        maven {
            url "file://var/www/maven"
        }
    }
}buildscript {
    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.0-SNAPSHOT'
    }
}

apply plugin: 'forge'

version = "1.2.0"

if (project.hasProperty('buildnum')) {
    project.version = project.version + '.' + project.buildnum
} else {
    project.version = project.version + '-dev'
}

group= "net.bdew.gendustry"
archivesBaseName = "deps"

minecraft {
    version = "1.6.4-9.11.1.964"
}

apply from: 'downloader.gradle'

addGitDep("ccl","https://github.com/Chicken-Bones/CodeChickenLib.git","a315c0059e2397977b227f438db9d21ef8de1a8e")
addHgDep("ccc","https://bitbucket.org/ChickenBones/codechickencore","4bad417f4db168b24662b684d349048b6003ad0a")
addHgDep("nei","https://bitbucket.org/ChickenBones/notenoughitems","3d7c952ca8f5c669d719e553cf873ebf57da605a")
addZipDep("forestry","http://bit.ly/IYjfWc","2.3.1.0")

task patchDeps(type: Sync) {
    dependsOn getDeps
    from "build/deps"
    into "deps"
    exclude "**/.git"
    exclude "**/.hg"
    doLast {
        println("Applying patch...")
        ant.fixcrlf(srcDir: "deps", includes: "**/*.java")
        ant.patch(patchfile: "fixes.patch", strip: "1", dir: "deps", ignorewhitespace: "Yes", failonerror: "Yes")
    }
}

deobfBinJar.dependsOn(patchDeps)

afterEvaluate {
    sourceMainJava.dependsOn(patchDeps)
}

deobfBinJar.addTransformer('deps/nei/nei_at.cfg')

sourceSets {
    main {
        java {
            srcDir 'deps/ccc'
            srcDir 'deps/ccl'
            srcDir 'deps/nei'
            include 'codechicken/**'
            include 'net/**'

            srcDir 'deps/forestry'
            include 'forestry/**'
        }
    }
}

jar {
    classifier "obf"
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allSource
    rootProject.ext.depSourceJarPath = archivePath
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    rootProject.ext.depJarPath = archivePath
}

genIntellijRuns {
    enabled = false
}


configurations { deps }
artifacts { 
    deps deobfJar
    deps sourceJar
}