def computeVersionName() {
  def lastGitTag = "git describe --tags HEAD".execute().text
  def tagMatcher = lastGitTag =~ /^v(.*)/
  if (tagMatcher) {
    lastGitTag = tagMatcher[0][1]
  } else {
    return "0.0.1-SNAPSHOT"
  }
  def snapshotMatcher = lastGitTag =~ /^[^-]*-[^-]*-g/
  if (snapshotMatcher) {
    "${lastGitTag}-SNAPSHOT"
  } else {
    lastGitTag
  }
}

def computeVersion() {
  def lastVersion = "git describe --tags --abbrev=0".execute().text
  def matcher = lastVersion =~ /^v(.*)/
  lastVersion = matcher ? matcher[0][1] : "0.0.0"
  def parts = lastVersion.split("\\.", 3)
  def versionName = computeVersionName()
  if (versionName.endsWith('-SNAPSHOT')) {
    parts[2] = Integer.toString(parts[2].toInteger() + 1)
    parts[0] + '.' + parts[1] + '.' + parts[2] + '-SNAPSHOT'
  } else {
    lastVersion
  }
}

ext {
  compileSdkVersion = 17
  buildToolsVersion = '19.0.1'

  versionName = computeVersionName()
  version = computeVersion()
  println 'versionName: ' + versionName
  println 'version: ' + version
}

task wrapper(type: Wrapper) {
  gradleVersion = '1.10'
}

subprojects {

  buildscript {
    repositories {
      mavenCentral()
      maven {
        name 'Sonatype Snapshots'
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
      }
    }
    dependencies {
      classpath 'com.android.tools.build:gradle:0.8.+'
      classpath 'com.squareup.gradle:gradle-android-test-plugin:0.9.1-SNAPSHOT'
      classpath 'com.github.dcendents:android-maven-plugin:1.0'
    }
  }

  repositories {
    mavenCentral()
  }

  tasks.withType(Compile) {
    options.encoding = "UTF-8"
  }

}

apply plugin: 'android-library'
apply plugin: 'android-test'
apply plugin: 'android-maven'
apply plugin: 'signing'

dependencies {
  compile 'com.google.android:support-v4:r7'
  compile('com.google.api-client:google-api-client-android:1.15.0-rc') {
    exclude group: 'com.google.android.google-play-services', module: 'google-play-services'
    exclude group: 'junit', module: 'junit'
    exclude group: 'com.google.android', module: 'android'
  }
  compile 'com.google.oauth-client:google-oauth-client-java6:1.15.0-rc'
  compile 'com.google.http-client:google-http-client-jackson:1.15.0-rc'

  testCompile 'junit:junit:4.10'
  testCompile 'org.robolectric:robolectric:2.1.+'
}

configurations {
  compile.exclude group: 'org.apache.httpcomponents', module: 'httpclient'
  compile.exclude group: 'xpp3', module: 'xpp3'
}

android {
  compileSdkVersion rootProject.ext.compileSdkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion

  lintOptions {
    // temporary fix for https://code.google.com/p/android/issues/detail?id=64014
    disable 'InvalidPackage'
  }

  sourceSets {
    main {
      manifest.srcFile 'AndroidManifest.xml'
      res.srcDirs = ['res']
    }
  }
}

android.libraryVariants.all { variant ->
  def name = variant.buildType.name
  if (name.equals(com.android.builder.BuilderConstants.DEBUG)) {
    // skip debug builds
    return;
  }
  task("javadoc${variant.name.capitalize()}", type: Javadoc) {
    description "Generates Javadoc for $variant.name."
    source = variant.javaCompile.source
    ext.androidJar = "${android.plugin.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
  }

  task("bundleJavadoc${variant.name.capitalize()}", type: Jar) {
    description "Bundles Javadoc into zip for $variant.name."
    classifier = "javadoc"
    from tasks["javadoc${variant.name.capitalize()}"]
  }
}

task jar(type: Jar) {
  from 'build/classes/release'
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from android.sourceSets.main.java
}

task javadocJar(type: Jar, dependsOn: "javadocRelease") {
  classifier = 'javadoc'
  from 'build/docs/javadoc'
}

artifacts {
  archives jar
  archives sourcesJar
  archives javadocJar
}

if (project.hasProperty('signing.secretKeyRingFile') && project.hasProperty('signing.keyId')) {
  signing {
    sign configurations.archives
  }
}

if (project.hasProperty('SONATYPE_USERNAME') && project.hasProperty('SONATYPE_PASSWORD')) {
  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
    
        repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
          authentication(userName: SONATYPE_USERNAME, password: SONATYPE_PASSWORD)
        }

        snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
          authentication(userName: SONATYPE_USERNAME, password: SONATYPE_PASSWORD)
        }
    
        pom.project {
          name 'Android OAuth Client Library'
          groupId 'com.wu-man'
          artifactId 'android-oauth-client'
          version rootProject.ext.version
          packaging 'jar', 'aar'
          description 'Android OAuth Client is a library that helps to easily add an OAuth flow to an existing Android application.'
          url 'http://wuman.github.com/android-oauth-client/'
          inceptionYear '2013'
      
          scm {
            url 'https://github.com/wuman/android-oauth-client'
            connection 'scm:git:git://github.com/wuman/android-oauth-client.git'
            developerConnection 'scm:git:git@github.com:wuman/android-oauth-client.git'
          }
      
          licenses {
            license {
              name 'Apache License Version 2.0'
              url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
              distribution 'repo'
            }
          }
      
          developers {
            developer {
              id 'wuman'
              name 'David Wu'
              url 'http://blog.wu-man.com'
              email 'david@wu-man.com'
              timezone '+8'
            }
          }
        }
      }
    }
  }
}

apply plugin: 'android'
apply plugin: 'android-test'

dependencies {
  compile project(':library')
  compile('de.keyboardsurfer.android.widget:crouton:1.8.1') {
    exclude group: 'com.google.android', module: 'support-v4'
  }
  compile 'com.squareup.picasso:picasso:2.2.0'

  testCompile 'junit:junit:4.10'
  testCompile 'org.robolectric:robolectric:2.1.+'
}

def computeVersionCode(versionName) {
  def parts = versionName.replaceAll('[^-\\d]', '').replaceAll('[-]$', '').split('-', 3)
  def versionCode = 0.0
  parts.eachWithIndex() { part, i ->
    if (i<2) {
      versionCode += (Math.pow(10, ((1-i) * 4)) * part.toInteger())
    }
  }
  versionCode.toInteger()
}

def gitSha() {
  'git rev-parse --short HEAD'.execute().text.trim()
}

def buildTime() {
  new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))
}

android {
  compileSdkVersion rootProject.ext.compileSdkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion

  defaultConfig {
    minSdkVersion 9
    targetSdkVersion rootProject.ext.compileSdkVersion

    versionName rootProject.ext.versionName
    versionCode computeVersionCode(rootProject.ext.versionName)

    buildConfigField 'String', 'GIT_SHA', "\"${gitSha()}\""
    buildConfigField 'String', 'BUILD_TIME', "\"${buildTime()}\""
  }

  buildTypes {
    debug {
      versionNameSuffix '-debug'
    }
  }

  lintOptions {
    // temporary fix for https://code.google.com/p/android/issues/detail?id=64014
    disable 'InvalidPackage'
  }

  sourceSets {
    main {
      manifest.srcFile 'AndroidManifest.xml'
      res.srcDirs = ['res']
    }
  }
}

File signFile = rootProject.file('sign.properties')
if (signFile.exists()) {
  Properties p = new Properties()
  p.load(new FileInputStream(signFile))
  android {
    signingConfigs {
      release {
        storeFile file(p.KEYSTORE)
        storePassword p.KEYSTORE_PASSWORD
        keyAlias p.KEY_ALIAS
        keyPassword p.KEY_PASSWORD
      }
    }
  }
  android.buildTypes.release.signingConfig android.signingConfigs.release
}
