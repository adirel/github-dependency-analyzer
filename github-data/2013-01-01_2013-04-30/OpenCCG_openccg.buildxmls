<!-- $Id: build.xml,v 1.61 2011/12/14 03:11:05 mwhite14850 Exp $ -->
<!-- Copyright (C) 2003-13 Jason Baldridge, Michael White and Scott Martin -->
<project name="OpenCCG" default="package" basedir=".">

  <path id="gen.classpath">
    <fileset dir="lib" includes="*.jar"/>
  </path>

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init">
    <tstamp/>
    <property name="Name" value="OpenCCG"/>
    <property name="name" value="openccg"/>
    <property name="year" value="2013"/>
    <property name="version" value="0.9.5"/>

    <echo message="----------- ${Name} ${version} [${year}] ------------"/>

    <property name="debug" value="on"/>
    <property name="optimize" value="off"/>
    <property name="deprecation" value="on"/>

    <property name="top.dir" value="."/>
    <property name="src.dir" value="./src"/>
    <property name="bin.dir" value="./bin"/>
    <property name="lib.dir" value="./lib"/>
    <property name="docs.dir" value="./docs"/>
    <property name="test.dir" value="./test"/>
    <property name="packages" value="opennlp.ccg.*,opennlp.ccgbank.*"/>
    <property name="build.dir" value="./output"/>
    <property name="build.dest" value="./output/classes"/>
    <property name="build.gen" value="${top.dir}/output/gen"/>
    <property name="build.javadocs" value="${docs.dir}/api"/>
  	
    <path id="build.classpath">
      <pathelement location="${lib.dir}/ant-junit.jar"/>
      <pathelement location="${lib.dir}/ant-launcher.jar"/>
      <pathelement location="${lib.dir}/ant.jar"/>
      <pathelement location="${lib.dir}/jdom.jar"/>
      <pathelement location="${lib.dir}/trove.jar"/>
      <pathelement location="${lib.dir}/javacc.jar"/>
      <pathelement location="${lib.dir}/jgrapht-jdk1.6.jar"/>
      <pathelement location="${lib.dir}/jline.jar"/>
      <pathelement location="${lib.dir}/jopt-simple.jar"/>
      <pathelement location="${lib.dir}/junit-4.10.jar"/>
      <pathelement location="${lib.dir}/serializer.jar"/>
      <pathelement location="${lib.dir}/xalan.jar"/>
      <pathelement location="${lib.dir}/xml-apis.jar"/>
      <pathelement location="${lib.dir}/xsltc.jar"/>
    </path>

    <filter token="year" value="${year}"/>
    <filter token="version" value="${version}"/>
    <filter token="date" value="${TODAY}"/>
    <filter token="log" value="true"/>
    <filter token="verbose" value="true"/>
  </target>
  

  <!-- =================================================================== -->
  <!-- Help on usage                                                       -->
  <!-- =================================================================== -->
  <target name="usage">
    <echo message=""/>
    <echo message=""/>
    <echo message="OpenCCG build file"/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=" Available targets are:"/>
    <echo message=""/>
    <echo message="   package  --> generates the openccg.jar file (default)"/>
    <echo message="   compile  --> compiles the source code"/>
    <echo message="   javadoc  --> generates the API documentation"/>
    <echo message="   test     --> runs JUnit tests"/>
    <echo message="   clean    --> cleans up the compilation directory"/>
    <echo message=""/>
    <echo message=" See the comments inside the build.xml file for more details."/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=""/>
  </target>
  

  <!-- =================================================================== -->
  <!-- Prepares the build directories                                      -->
  <!-- =================================================================== -->
  <target name="prepare" depends="init">
    <!-- create directories -->
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.dest}"/>
    <mkdir dir="${build.gen}"/>
  </target>

  
  <!-- Runs JavaCC (parser generator)                                      -->
  <!-- =================================================================== -->
  <target name="javacc"
          depends="prepare"
          description="generates parser using javacc">
    <mkdir dir="${build.gen}/opennlp/ccgbank/parse"/>
    <copy file="${src.dir}/opennlp/ccgbank/parse/SimpleNode.java"
	  todir="${build.gen}/opennlp/ccgbank/parse"/>
    <jjtree target="${src.dir}/opennlp/ccgbank/parse/CCGbankDerivation.jjt"
	    javacchome="${lib.dir}"
	    outputdirectory="${build.gen}/opennlp/ccgbank/parse"
	    />
    <javacc target="${build.gen}/opennlp/ccgbank/parse/CCGbankDerivation.jj"
	    outputdirectory="${build.gen}/opennlp/ccgbank/parse"
	    javacchome="${lib.dir}/"/>
  </target>


  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <target name="compile" 
          depends="javacc"
          description="compiles the source code">
    <!-- compile generated JavaCC classes-->
    <javac srcdir="${build.gen}"
           destdir="${build.dest}"
           debug="${debug}"
           deprecation="${deprecation}"
           classpathref="build.classpath"
           nowarn="true"
	   includeAntRuntime="false"
           excludes="**/.backup.orig/**"
           optimize="${optimize}"/> 
    <javac srcdir="${src.dir}"
           destdir="${build.dest}"
           debug="${debug}"
           deprecation="${deprecation}"
           classpathref="build.classpath"
           nowarn="true"
	   includeAntRuntime="false"
           excludes="**/.backup.orig/**,srilmbridge/,kenlm/"
           optimize="${optimize}">
    </javac>
    <subant antfile="${src.dir}/ccg2xml/build.xml" buildpath="${basedir}"/>
  </target>
	
  
  <!-- =================================================================== -->
  <!-- Creates the jar file                                                -->
  <!-- =================================================================== -->
  <target name="package" 
          depends="compile"
          description="generates the openccg.jar file (default)">
    <jar jarfile="${lib.dir}/${name}.jar">
      <fileset dir="${build.dest}">
		<include name="**"/>
		<exclude name="**/alignment/*Test*.class"/>
		<exclude name="**/disjunctivizer/*Test*.class"/>
		<exclude name="**/hylo/graph/*Test*.class"/>
		<exclude name="**/util/*Test*.class"/>
	  </fileset>
      <fileset dir="${src.dir}" includes="**/*.xsl"/>
      <fileset dir="${src.dir}" includes="**/*.properties"/>
      <!-- for grammardoc -->
      <fileset dir="${src.dir}" includes="**/*.css"/>
      <fileset dir="${src.dir}" includes="**/*.js"/>
    </jar>
  </target>

  
  <!-- =================================================================== -->
  <!-- Creates the release file                                            -->
  <!--                                                                     -->
  <!-- Note: to create a release based on a clean openccg source           -->
  <!-- directory, use the latest version in the repository which           -->
  <!-- should exclude all the compiled and derived files.                  -->
  <!-- =================================================================== -->
  <target name="release" depends="document,package">
    <subant antfile="${docs.dir}/build.xml" buildpath="${basedir}"
	    target="clean"/>
    <antcall target="clean"/>
    <tar tarfile="${name}-${version}.tar">
      <tarfileset mode="755" 
                  dir="../"
                  includes="${name}/bin/** ${name}/ccgbank/bin/**"/>
      <tarfileset dir="../" 
                  includes="${name}/**" 
                  excludes="${name}/.* **/CVS **/bin/ **/.backup.orig/ ${name}/classes/** ${name}/output/** ${name}/src/srilmbridge/** ${name}/grammars/**/test/ ${name}/grammars/**/apml/"/>
    </tar>
    <gzip src="${name}-${version}.tar" 
          zipfile="../${name}-${version}.tgz" />
    <delete file="${name}-${version}.tar" />
  </target>


  <!-- =================================================================== -->
  <!-- Creates the homepage                                                -->
  <!-- NB: We haven't been including the API docs on the home page.        -->
  <!-- NB: To update the homepage:                                         -->
  <!--     1. go to openccg/docs                                           -->
  <!--     2. sftp username@web.sf.net                                     -->
  <!--     3. cd cd /home/groups/o/op/openccg/htdocs                       -->
  <!--     4. put index.html                                               -->
  <!-- =================================================================== -->
  <target name="homepage" 
          depends="init,document"
          description="generates the API documentation">
    <tar tarfile="${name}-homepage.tar"
         basedir="./docs/"
         includes="**"
         excludes="**/CVS **/.backup.orig" />
    <gzip src="${name}-homepage.tar"
          zipfile="${build.dir}/${name}-homepage.tgz" />
    <delete file="${name}-homepage.tar" />
  </target>


  <!-- =================================================================== -->
  <!-- Creates the documentation                                           -->
  <!-- =================================================================== -->
  <target name="document" depends="prepare,javacc">
    <mkdir dir="${build.javadocs}"/>
    <javadoc packagenames="${packages}"
             destdir="${build.javadocs}"
			 classpathref="build.classpath"
             author="true"
             version="true"
             use="true"
             splitindex="true"
             noindex="false"
             windowtitle="${name}"
             doctitle="The ${Name} API v${version}"
             bottom="Copyright &#169; ${year} Jason Baldridge, Gann Bierner, Michael White and additional contributors. All Rights Reserved.">
	  <sourcepath>
		<pathelement path="${src.dir}"/>
		<pathelement path="${build.gen}"/>
	  </sourcepath>
	  <link href="http://docs.oracle.com/javase/6/docs/api/"/>
	  <link href="http://jgrapht.org/javadoc/"/>
      <link href="http://www.jdom.org/docs/apidocs/"/>
	</javadoc>
  	<subant antfile="${docs.dir}/build.xml" buildpath="${basedir}"/>
  </target>


  <!-- =================================================================== -->
  <!-- Runs all JUnit tests                                                -->
  <!-- =================================================================== -->
  <target name="test" depends="compile">
    <javac srcdir="${test.dir}" destdir="${build.dest}"
	   classpathref="build.classpath" debug="on" includeAntRuntime="false"/>

    <junit haltonerror="true" fork="off" includeantruntime="false">
      <classpath>
        <pathelement location="${build.dest}"/>
        <pathelement path="${java.class.path}"/>
      	<pathelement location="${lib.dir}/jdom.jar"/>
      	<pathelement location="${lib.dir}/jgrapht-jdk1.6.jar"/>
      	<pathelement location="${lib.dir}/junit-4.10.jar"/>
      	<pathelement location="${lib.dir}/serializer.jar"/>
      	<pathelement location="${lib.dir}/trove.jar"/>
      </classpath>
      <formatter type="plain" usefile="false" />
      <batchtest>
        <fileset dir="${test.dir}">
          <include name="**/*Test*.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>


  <!-- =================================================================== -->
  <!-- Cleans targets                                                      -->
  <!-- =================================================================== -->
  <target name="clean" 
          depends="init"
          description="cleans up the directory">
    <delete dir="${build.dir}"/>
    <subant antfile="${src.dir}/ccg2xml/build.xml" buildpath="${basedir}"
	    target="clean"/>
    <delete>
      <fileset dir="${bin.dir}" includes="*.pyc"/>
    </delete>
  </target>

  <target name="cleandocs" depends="init" description="cleans up the API docs directory, and extra pdf docs">
    <delete dir="${build.javadocs}"/>
    <subant antfile="${docs.dir}/build.xml" buildpath="${basedir}"
	    target="clean"/>
  </target>

</project>

<!-- End of file -->
<!--
 Copyright (C) 2005-2011 Scott Martin, Rajakrishan Rajkumar and Michael White
 
 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.
 
 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Lesser General Public License for more details.
 
 You should have received a copy of the GNU Lesser General Public
 License along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
-->

<!-- This build file is for corpus conversion and grammar extraction. -->

<!-- $Id: build.xml,v 1.29 2011/11/20 15:39:18 mwhite14850 Exp $ -->
<project name="CCGBankExtract" default="extract" basedir=".">
  
  <taskdef resource="net/sf/antcontrib/antlib.xml"/>
  <property file="build.properties" />

  <!-- =================================================================== -->
  <!-- File lists for re-use by transformations.                           -->
  <!-- =================================================================== -->
  <filelist id="convert-initial" dir="${templates.dir}">
    <file name="uncurryBareParse.xsl" />
    <file name="markMistakes.xsl" />
    <file name="correctMistakes1.xsl" />
    <file name="changePunct.xsl" />
    <file name="adjustCats.xsl" />
    <file name="labelConj1.xsl" />
  </filelist>

  <filelist id="convert-all" dir="${templates.dir}">
    <file name="uncurryBareParse.xsl" />
    <file name="markMistakes.xsl" />
    <file name="correctMistakes1.xsl" />
    <file name="changePunct.xsl" />
    <!--<file name="adjustCandCcats1.xsl",-->
    <file name="adjustCats.xsl" />

    <file name="allotIdLeaf.xsl" />
    <file name="insertPTBInfo.xsl" />
    <file name="labelConj1.xsl" />

    <file name="annotateExtraposedAppos.xsl" />
    <file name="annotateReportedSpeech.xsl" />
    <file name="adjustReportedSpeech.xsl" />
    <file name="annotateParentheticals1.xsl" />
    <file name="adjustParenthetical.xsl" />

    <!--Appositive vs Conjunction detection and annotation-->
    <file name="annotateAppos1.xsl" />
    <file name="annotateAppos2.xsl" />
    <!-- Provide correct analysis for Appositives present-->
    <file name="labelAppos.xsl" />
    <file name="annotateAppos3.xsl" />
    <!-- Ensure proper balancing of the appositives detected above.-->
    <file name="balanceAppos.xsl" />
    <!-- Delete balancing commas-->
    <file name="adjustAppos.xsl" />

    <!-- Confer comma cats to place names-->
    <file name="labelPlace1.xsl" />
    <file name="labelPlace2.xsl" />
    <file name="annotatePlace.xsl" />

    <file name="labelConj2.xsl" />
    <file name="labelConj3.xsl" />

    <!-- Various other types of comma adjuncts-->
    <file name="labelPuncts.xsl" />

    <file name="preSentAdj.xsl" />
    <file name="annotateVPCommas.xsl" />
    <file name="annotateParentheticals2.xsl" />

    <file name="annotateStrayAppos.xsl" />
    <file name="annotateNom-AdjConj.xsl" />

    <file name="inferConjRules.xsl" />
    <file name="annotatePrtConjs.xsl" />

    <!-- Dash & bracket rules-->
    <file name="annotateAppos-Dash.xsl" />
    <file name="balanceDash-Paren.xsl" />
    <file name="annotateBrackets.xsl" />

    <!-- Colon rules-->
    <file name="annotateColons.xsl" />

    <!-- Dot rules-->
    <file name="annotateDots.xsl" />

    <!-- Final period feats-->
    <file name="sentFinalPuncts.xsl" />

    <!--<file name="replaceColons.xsl"/>-->
    <file name="allotIdLeaf.xsl" />
    <!-- <file name="reinsertPTBInfo.xsl" /> -->

    <!--Add PTB quotation marks-->
    <file name="insertQuoteSemClassInfo.xsl" />
    <file name="annotateQuotes.xsl" />
    <file name="allotIdTree.xsl" />

    <!--Collapse NEs if desired options are set-->
    <file name="collapseMWUPart.xsl"/>

    <!--Shared task NE collapsing -->
    <!-- <file name="collapseMWUSharedTask.xsl"/> -->
    
    <file name="trueCaser.xsl"/>

    <file name="introduceMMExtns.xsl"/>

    <file name="correctPPHeads.xsl" />
    <file name="computeCats.xsl" />
    <file name="adjustRoles.xsl" />
    <file name="addStems.xsl" />

    <!--Normalize tags-->
    <file name="normPTBTags.xsl" />
    <file name="normPunctPos.xsl" />
    <file name="allotIndexRel.xsl" />
  </filelist>

  <filelist id="convert-conj" dir="${templates.dir}">
    <file name="inferConjRules.xsl" />
  </filelist>

  <filelist id="convert-final" dir="${templates.dir}">
    <file name="computeCats.xsl" />
    <file name="adjustRoles.xsl" />
    <file name="addStems.xsl" />
    <file name="normPunctPos.xsl" />
  </filelist>

  <filelist id="extract-lexicon" dir="${templates.dir}">
    <file name="filterLex.xsl" />
    <file name="closedCatInsert.xsl" />
    <file name="insertLF.xsl" />
    <!--<file name="insertPunctLF.xsl"/>-->
    <file name="insertPunctLF-PosMod.xsl" />
    <file name="addFilterLexFeats.xsl"/>
    <file name="insertSemFeats.xsl" />
    <file name="markUnmatched.xsl" />
    <file name="repairUnmatched.xsl" />
    <!--<file name="macroLexDef.xsl"/>-->
  </filelist>

  <filelist id="extract-morph" dir="${templates.dir}">
    <file name="morphExtr.xsl" />
    <file name="macroInsert.xsl" />
  </filelist>

  <filelist id="extract-rules" dir="${templates.dir}">
    <file name="ccgRules.xsl" />
  </filelist>


  <!-- =================================================================== -->
  <!-- Init                                                                -->
  <!-- =================================================================== -->

  <target name="init">
    <taskdef resource="opennlp/ccgbank/ccgbank.properties"/>
    <!-- make property 'ext' encoding sect and file, using 'all' instead of * -->
    <var name="fid" value="${file}"/>
    <if>
      <equals arg1="${fid}" arg2="*" />
      <then>
	<var name="fid" value="all"/>
      </then>
    </if>
    <var name="sid" value="${sect}"/>
    <if>
      <equals arg1="${sid}" arg2="*" />
      <then>
	<var name="sid" value="all"/>
      </then>
    </if>
    <property name="ext" value="${sid}-${fid}"/>
  </target>


  <!-- =================================================================== -->
  <!-- Conversion                                                          -->
  <!-- NB: can use bin/convert-all to run sections in parallel             -->
  <!-- =================================================================== -->

  <!-- Checks whether converted files are up-to-date wrt the flag file. -->
  <!-- NB: to run conversion again, delete ${convert.dir}/done-*        -->
  <target name="check-converted" depends="init">
    <uptodate property="converted.uptodate" targetfile="${convert.dir}/done-${ext}">
      <srcfiles dir="${ccgbank.dir}" includes="${sect}/${file}.auto"/>
    </uptodate>
  </target>

  <!-- This version includes all the aux files (incl quotes), but no NE info. -->
  <target name="convert-puncts-aux" depends="check-converted" unless="converted.uptodate">
    <convert target="${convert.dir}" wordsFile="${words}" stemsFile="${stems}" auxFileDirectory="${aux.dir}">
      <sources>
	<fileset dir="${ccgbank.dir}">
	  <include name="${sect}/${file}.auto" />
	</fileset>
      </sources>
      <templates>
	<filelist refid="convert-all" />
      </templates>
    </convert>
    <touch file="${convert.dir}/done-${ext}"/>
  </target>

  <!-- This version also includes NE info. -->
  <target name="convert-puncts-aux-bbn" depends="check-converted" unless="converted.uptodate">
    <convert target="${convert.dir}" wordsFile="${words}" stemsFile="${stems}" auxFileDirectory="${aux.dir}" bbnAuxDirectory="${aux.dir}">
      <sources>
	<fileset dir="${ccgbank.dir}">
	  <include name="${sect}/${file}.auto" />
	</fileset>
      </sources>
      <templates>
	<filelist refid="convert-all" />
      </templates>
    </convert>
    <touch file="${convert.dir}/done-${ext}"/>
  </target>

  <!-- Shared task conversion -->
  <!-- In task "convert-all", instead of transform "collapseMWUPart.xsl", add "collapseMWUSharedTask.xsl"-->
  <!-- Also in build.properties file, set aux.dir=/home/scratch/raja/genchal11/SR_release1.0-Aux/hlds/-->
  <target name="convert-sharedtask" depends="check-converted" unless="converted.uptodate">
    <convert target="${convert.dir}" wordsFile="${words}" stemsFile="${stems}" auxFileDirectory="${aux.dir}" bbnAuxDirectory="${aux.dir}">
      <sources>
	<fileset dir="${ccgbank.dir}">
	  <include name="${sect}/${file}.auto" />
	</fileset>
      </sources>
      <templates>
	<filelist refid="convert-all" />
      </templates>
    </convert>
    <touch file="${convert.dir}/done-${ext}"/>
  </target>

  <!-- This version is for testing ... -->
  <target name="convert-test" depends="init">
    <convert target="./tmp" wordsFile="${words}" stemsFile="${stems}" auxFileDirectory="${aux.dir}">
      <sources>
	<fileset dir="${ccgbank.dir}">
	  <include name="${sect}/${file}.auto" />
	</fileset>
      </sources>
      <templates>
	<!--
	<filelist id="convert-test" dir="${templates.dir}">
	  <file name="uncurryBareParse.xsl" />
	  <file name="find-s-back-n.xsl" />
	</filelist>
	-->
	<filelist refid="convert-initial"/>
	<filelist refid="convert-final"/>
      </templates>
    </convert>
  </target>


  <!-- =================================================================== -->
  <!-- Export                                                              -->
  <!-- =================================================================== -->

  <target name="export-to-auto" depends="init">
    <xslt style="templates/exportToAuto.xsl" basedir="${convert.dir}" destdir="${convert.dir}"
	  extension=".auto" includes="${sect}/${file}.xml">
      <factory name="org.apache.xalan.processor.TransformerFactoryImpl" />
    </xslt>
  </target>

  <target name="export-to-auto-archive" depends="init">
    <tar tarfile="openccgbank.auto.tar">
      <tarfileset dir="${convert.dir}" includes="**/*.auto" />
    </tar>
    <gzip src="openccgbank.auto.tar" zipfile="openccgbank.auto.tgz" />
    <delete file="openccgbank.auto.tar" />
  </target>


  <!-- =================================================================== -->
  <!-- Extraction                                                          -->
  <!-- =================================================================== -->

  <!-- for the section and file, extracts a grammar with no cutoffs and makes LFs -->
  <target name="extract" depends="init">
    <echo>Extracting grammar with no cutoffs and making LFs</echo>
    <echo>Section: ${sect}  File: ${file}</echo>
    <extract target="${extract.dir}" grammarName="base" ppheads="false" catFreqCutoff="1" lexFreqCutoff="1" openFreqCutoff="1" ruleFreqCutoff="1" skipUnmatched="false">
      <sources>
	<fileset dir="${convert.dir}">
	  <include name="${sect}/${file}.xml" />
	</fileset>
      </sources>
      <templates type="lexicon"> <filelist refid="extract-lexicon" /> </templates>
      <templates type="morph"> <filelist refid="extract-morph" /> </templates>
      <templates type="rules"> <filelist refid="extract-rules" /> </templates>
      <testbed debugDerivations="false" text="${info.dir}/text-${ext}" factors="${info.dir}/factors-${ext}" combos="${info.dir}/combos-${ext}" tree="${info.dir}/tree-${ext}" preds="${info.dir}/preds-${ext}"/>
    </extract>
  </target>

  <!-- definitions for extract-all -->
  <property name="all.dirs" value="00,${training.dirs},23"/>

  <macrodef name="concat-info">
    <attribute name="type"/>
    <sequential>
      <echo>Concatenating @{type}-train</echo>
      <concat destfile="${info.dir}/@{type}-train">
	<fileset dir="${info.dir}" 
		 includes="@{type}-*-all"
		 excludes="@{type}-00-all,@{type}-01-all,@{type}-22-all,@{type}-23-all,@{type}-24-all"/>
      </concat>
    </sequential>
  </macrodef>

  <!-- Checks whether factors-train (in particular) is up-to-date. -->
  <target name="check-all-extracted" depends="init">
    <uptodate property="extract.all.uptodate" 
	      srcfile="${convert.dir}/02/wsj_0200.xml" 
	      targetfile="${info.dir}/factors-train"/>
  </target>

  <!-- for all sections in use, extracts a grammar with no cutoffs and makes LFs, concatenating info files -->
  <!-- nb: using a loop with exec here to run each section in its own VM -->
  <target name="extract-all" depends="check-all-extracted" unless="extract.all.uptodate">
    <for list="${all.dirs}" param="sect">
      <sequential>
	<echo>Starting extract task for section @{sect}</echo>
	<exec executable="ccg-build" dir="." output="${log.dir}/log.extract.@{sect}">
	  <arg value="-Dsect=@{sect}"/>
	  <arg value="-Dfile=*"/>
	  <arg value="extract"/>
	</exec>
      </sequential>
    </for>
    <echo>Concatenating training section files in ${info.dir}</echo>
    <concat-info type="text"/>
    <concat-info type="textsc"/>
    <concat-info type="factors"/>
    <concat-info type="combos"/>
    <concat-info type="tree"/>
    <concat-info type="preds"/>
  </target>

  <!-- Checks whether the training lexicon (in particular) is up-to-date. -->
  <target name="check-train-extracted" depends="init">
    <uptodate property="extract.train.uptodate" 
	      srcfile="${convert.dir}/02/wsj_0200.xml" 
	      targetfile="${grams.dir}/train/lexicon.xml"/>
  </target>

  <!-- extracts a grammar from the training section with no cat cutoffs, copying it to ${grams.dir}/train -->
  <target name="extract-train" depends="check-train-extracted"
	  unless="extract.train.uptodate">
    <extract target="${extract.dir}" grammarName="train" ppheads="false" catFreqCutoff="1" lexFreqCutoff="1" openFreqCutoff="50" ruleFreqCutoff="10" skipUnmatched="true">
      <sources>
	<fileset dir="${convert.dir}">
	  <include name="*/*.xml" />
	  <exclude name="00/*" />
	  <exclude name="01/*" />
	  <exclude name="22/*" />
	  <exclude name="23/*" />
	  <exclude name="24/*" />
	</fileset>
      </sources>
      <templates type="lexicon"> <filelist refid="extract-lexicon" /> </templates>
      <templates type="morph"> <filelist refid="extract-morph" /> </templates>
      <templates type="rules"> <filelist refid="extract-rules" /> </templates>
    </extract>
    <copy todir="${grams.dir}/train">
      <fileset dir="${extract.dir}" includes="*.xml,*.html"/>
    </copy>
  </target>

  <!-- Checks whether the training lexicon with cutoffs is up-to-date. -->
  <target name="check-train-cfc10-extracted" depends="init">
    <uptodate property="extract.train.cfc10.uptodate" 
	      srcfile="${convert.dir}/02/wsj_0200.xml" 
	      targetfile="${grams.dir}/train-cfc10/lexicon.xml"/>
  </target>

  <!-- extracts a grammar from the training section with cutoffs, copying it to ${grams.dir}/train-cfc10 -->
  <target name="extract-train-cfc10" depends="check-train-cfc10-extracted"
	  unless="extract.train.cfc10.uptodate">
    <extract target="${extract.dir}" grammarName="train" ppheads="false" catFreqCutoff="10" lexFreqCutoff="3" openFreqCutoff="50" ruleFreqCutoff="10" skipUnmatched="true">
      <sources>
	<fileset dir="${convert.dir}">
	  <include name="*/*.xml" />
	  <exclude name="00/*" />
	  <exclude name="01/*" />
	  <exclude name="22/*" />
	  <exclude name="23/*" />
	  <exclude name="24/*" />
	</fileset>
      </sources>
      <templates type="lexicon"> <filelist refid="extract-lexicon" /> </templates>
      <templates type="morph"> <filelist refid="extract-morph" /> </templates>
      <templates type="rules"> <filelist refid="extract-rules" /> </templates>
    </extract>
    <copy todir="${grams.dir}/train-cfc10">
      <fileset dir="${extract.dir}" includes="*.xml,*.html"/>
    </copy>
  </target>

  <!-- Checks whether the training lexicon (in particular) is up-to-date. -->
  <target name="check-dev-extracted" depends="init">
    <uptodate property="extract.dev.uptodate" 
	      srcfile="${convert.dir}/00/wsj_0001.xml" 
	      targetfile="${grams.dir}/dev/lexicon.xml"/>
  </target>

  <!-- extracts a grammar from the dev section with no cat cutoffs, copying it to ${grams.dir}/dev -->
  <target name="extract-dev" depends="check-dev-extracted" unless="extract.dev.uptodate">
    <extract target="${extract.dir}" grammarName="dev" ppheads="false" catFreqCutoff="1" lexFreqCutoff="1" openFreqCutoff="10" ruleFreqCutoff="3" skipUnmatched="true">
      <sources>
	<fileset dir="${convert.dir}">
	  <include name="00/*.xml" />
	</fileset>
      </sources>
      <templates type="lexicon"> <filelist refid="extract-lexicon" /> </templates>
      <templates type="morph"> <filelist refid="extract-morph" /> </templates>
      <templates type="rules"> <filelist refid="extract-rules" /> </templates>
    </extract>
    <copy todir="${grams.dir}/dev">
      <fileset dir="${extract.dir}" includes="*.xml,*.html"/>
    </copy>
  </target>

  <!-- for the section and file, extracts a grammar with no cutoffs and makes LFs with debug derivs flag set -->
  <target name="extract-debug" depends="init">
    <echo>Extracting grammar with no cutoffs and making LFs with debug derivs true</echo>
    <echo>Section: ${sect}  File: ${file}</echo>
    <extract target="${extract.dir}" grammarName="base" ppheads="false" catFreqCutoff="1" lexFreqCutoff="1" openFreqCutoff="1" ruleFreqCutoff="1" skipUnmatched="false">
      <sources>
	<fileset dir="${convert.dir}">
	  <include name="${sect}/${file}.xml" />
	</fileset>
      </sources>
      <templates type="lexicon"> <filelist refid="extract-lexicon" /> </templates>
      <templates type="morph"> <filelist refid="extract-morph" /> </templates>
      <templates type="rules"> <filelist refid="extract-rules" /> </templates>
      <testbed debugDerivations="true" />
    </extract>
  </target>


  <!-- =================================================================== -->
  <!-- Top-level                                                           -->
  <!-- 1st: do bin/convert-all to convert sections in parallel             -->
  <!--      (alternatively, do convert-puncts-aux-bbn for all sections)    -->
  <!-- 2nd: do extract-various                                             -->
  <!-- 3rd: do ccg-build -f build-models.xml all                           -->
  <!-- =================================================================== -->

  <target name="extract-various" depends="extract-all,extract-train,extract-train-cfc10,extract-dev"/>

</project>

<!-- End of file -->
<?xml version="1.0"?>

<project name="OpenCCG Documentation" basedir="." default="compile">

  <target name="compile">
  	<subant antfile="./guide/build.xml" buildpath="${basedir}"/>
  	<subant antfile="./realizer/build.xml" buildpath="${basedir}"/>
  </target>

  <target name="clean">
    <subant antfile="./guide/build.xml" buildpath="${basedir}" target="clean"/>
    <subant antfile="./realizer/build.xml" buildpath="${basedir}"
      target="clean"/>
  </target>
  
</project><?xml version="1.0"?>

<project name="OpenCCG Guide" basedir="." default="compile">

	<uptodate property="rough-guide.upToDate"
	    srcfile="./guide.tex"
	    targetfile="../grammars-rough-guide.pdf"/>
		
	  <!-- =================================================================== -->
	  <!-- Compiles Grammar Rough Guide                                        -->
	  <!-- =================================================================== -->
	  <target name="compile" unless="rough-guide.upToDate">
	    <echo message="Compiling grammar rough guide"/>
	    
	    <available file="./gb4e.sty" property="gb4e.sty.present"/>
	    <fail unless="gb4e.sty.present" message="gb4e.sty is not present"/>

	  	<available file="./cgloss4e.sty" property="cgloss4e.sty.present"/>
	    <fail unless="cgloss4e.sty.present" message="cgloss4e.sty is not present"/>

	    <available file="./openccg.sty" property="openccg.sty.present"/>
	    <fail unless="openccg.sty.present" message="openccg.sty is not present"/>
		    
	    <available file="./openccg.bib" property="openccg.bib.present"/>
	    <fail unless="openccg.bib.present" message="openccg.bib is not present"/>
		    
	    <!-- branch on cygwin, then finish -->
	    <antcall target="compile.default"/>
	    <antcall target="compile.cygwin"/>
	    <antcall target="compile.finish"/>
	  </target>

	  <target name="compile.default" unless="cygwin">
	    <echo message="(default compile)"/>
	    <exec executable="pdflatex" dir="." failonerror="true">
	      <arg value="guide.tex"/>
	    </exec>
	    <exec executable="bibtex" dir="." failonerror="true">
	      <arg value="guide"/>
	    </exec>
	    <exec executable="pdflatex" dir="." failonerror="true">
	      <arg value="guide.tex"/>
	    </exec>
	    <exec executable="pdflatex" dir="." failonerror="true">
	      <arg value="guide.tex"/>
	    </exec>
	  </target>
		  
	  <target name="compile.cygwin" if="cygwin">
	    <echo message="(cygwin compile)"/>
	    <exec executable="bash" dir="." failonerror="true">
	      <arg value="-c"/> <arg value="pdflatex guide.tex"/>
	    </exec>
	    <exec executable="bash" dir="." failonerror="true">
	      <arg value="-c"/> <arg value="bibtex guide"/>
	    </exec>
	    <exec executable="bash" dir="." failonerror="true">
	      <arg value="-c"/> <arg value="pdflatex guide.tex"/>
	    </exec>
	    <exec executable="bash" dir="." failonerror="true">
	      <arg value="-c"/> <arg value="pdflatex guide.tex"/>
	    </exec>
	  </target>
		  
	  <target name="compile.finish">
	    <copy file="./guide.pdf" tofile="../grammars-rough-guide.pdf" overwrite="true" />
	  </target>
		
	  <target name="clean">
	    <delete>
	      <fileset dir="." includes="guide.*" excludes="guide.tex"/>
	    </delete>
	  </target>

</project><?xml version="1.0"?>

<project name="OpenCCG Realizer Manual" basedir="." default="compile">

	<uptodate property="realizer-manual.upToDate"
    srcfile="./manual.tex"
    targetfile="../realizer-manual.pdf"/>
	
  <!-- =================================================================== -->
  <!-- Compiles Realizer Manual                                            -->
  <!-- =================================================================== -->
  <target name="compile" unless="realizer-manual.upToDate">
    <echo message="Compiling grammar rough guide"/>
    
    <available file="./gb4e.sty" property="gb4e.sty.present"/>
    <fail unless="gb4e.sty.present" message="gb4e.sty is not present"/>

  	<available file="./cgloss4e.sty" property="cgloss4e.sty.present"/>
    <fail unless="cgloss4e.sty.present" message="cgloss4e.sty is not present"/>

    <available file="./openccg.sty" property="openccg.sty.present"/>
    <fail unless="openccg.sty.present" message="openccg.sty is not present"/>
	    
    <available file="./refs.bib" property="refs.bib.present"/>
    <fail unless="refs.bib.present" message="refs.bib is not present"/>
  	
  	<available file="./ex1a.pdf" property="ex1a.pdf.present"/>
    <fail unless="ex1a.pdf.present" message="ex1a.pdf is not present"/>
  	
  	<available file="./ex1b.pdf" property="ex1b.pdf.present"/>
    <fail unless="ex1b.pdf.present" message="ex1b.pdf is not present"/>
    	
   	<available file="./ex1c.pdf" property="ex1c.pdf.present"/>
    <fail unless="ex1c.pdf.present" message="ex1c.pdf is not present"/>
  	
  	<available file="./pruner-class.pdf" property="pruner-class.pdf.present"/>
    <fail unless="pruner-class.pdf.present" message="pruner-class.pdf is not present"/>
    	
   	<available file="./realizer-class.pdf" property="realizer-class.pdf.present"/>
    <fail unless="realizer-class.pdf.present" message="realizer-class.pdf is not present"/>
    	
   	<available file="./scorer-class.pdf" property="scorer-class.pdf.present"/>
    <fail unless="scorer-class.pdf.present" message="scorer-class.pdf is not present"/>
	    
    <!-- branch on cygwin, then finish -->
    <antcall target="compile.default"/>
    <antcall target="compile.cygwin"/>
    <antcall target="compile.finish"/>
  </target>

  <target name="compile.default" unless="cygwin">
    <echo message="(default compile)"/>
    <exec executable="pdflatex" dir="." failonerror="true">
      <arg value="manual.tex"/>
    </exec>
    <exec executable="bibtex" dir="." failonerror="true">
      <arg value="manual"/>
    </exec>
    <exec executable="pdflatex" dir="." failonerror="true">
      <arg value="manual.tex"/>
    </exec>
    <exec executable="pdflatex" dir="." failonerror="true">
      <arg value="manual.tex"/>
    </exec>
  </target>
	  
  <target name="compile.cygwin" if="cygwin">
    <echo message="(cygwin compile)"/>
    <exec executable="bash" dir="." failonerror="true">
      <arg value="-c"/> <arg value="pdflatex manual.tex"/>
    </exec>
    <exec executable="bash" dir="." failonerror="true">
      <arg value="-c"/> <arg value="bibtex manual"/>
    </exec>
    <exec executable="bash" dir="." failonerror="true">
      <arg value="-c"/> <arg value="pdflatex manual.tex"/>
    </exec>
    <exec executable="bash" dir="." failonerror="true">
      <arg value="-c"/> <arg value="pdflatex manual.tex"/>
    </exec>
  </target>
	  
  <target name="compile.finish">
    <copy file="./manual.pdf" tofile="../realizer-manual.pdf" overwrite="true" />
  </target>

  <target name="clean">
    <delete>
      <fileset dir="." includes="manual.*" excludes="manual.tex"/>
    </delete>
  </target>

</project><!-- $Id: build.xml,v 1.5 2007/03/26 14:42:19 mwhite14850 Exp $ -->
<!-- Copyright (C) 2003-4 University of Edinburgh (Michael White) -->
<project default="grammar" basedir=".">

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init">
    <tstamp/>
    <property name="Name" value="OpenCCG"/>
    <property name="name" value="openccg"/>

    <echo message="----------- ${Name} ------------"/>

    <property name="lib.dir" value="${openccg.home}/lib"/>
    <property name="grammars.dir" value="${openccg.home}/grammars"/>
    <property name="core-en.dir" value="${grammars.dir}/core-en"/>

    <path id="validate.classpath">
      <pathelement location="${lib.dir}/xercesImpl.jar"/>
      <pathelement location="${lib.dir}/${name}.jar"/>
    </path>
  </target>
  

  <!-- =================================================================== -->
  <!-- Help on usage                                                       -->
  <!-- =================================================================== -->
  <target name="usage">
    <echo message=""/>
    <echo message=""/>
    <echo message="OpenCCG grammar build file"/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=" Available targets are:"/>
    <echo message=""/>
    <echo message="   grammar  --> builds the grammar (default)"/>
    <echo message=""/>
    <echo message=" See the comments inside the build.xml file for more details."/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=""/>
  </target>
  

  <!-- =================================================================== -->
  <!-- Builds grammar                                                     -->
  <!-- =================================================================== -->
  <target name="grammar" depends="init" description="builds grammar">
    <echo message="Transforming dict.xsl to dict.xml"/>
    <java classname="org.apache.xalan.xslt.Process"> 
      <arg value="-XSL"/> <arg value="dict.xsl"/>
      <arg value="-OUT"/> <arg value="dict.xml"/>
    </java>
    <echo message="Transforming lexicon-base.xsl to lexicon-base.xml and unary-rules.xml"/>
    <java classname="org.apache.xalan.xslt.Process"> 
      <arg value="-XSL"/> <arg value="lexicon-base.xsl"/>
      <arg value="-OUT"/> <arg value="lexicon-base.xml"/>
    </java>
    <echo message="Adding family members from dict.xml to lexicon-base.xml, yielding lexicon.xml"/>
    <java classname="org.apache.xalan.xslt.Process"> 
      <arg value="-IN"/> <arg value="lexicon-base.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/add-family-members.xsl"/>
      <arg value="-PARAM"/> <arg value="dict-file"/> <arg value="${basedir}/dict.xml"/>
      <arg value="-OUT"/> <arg value="lexicon.xml"/>
    </java>
    <echo message="Adding intonation info to dict.xml yielding dict-plus-intonation-info.xml"/>
    <java classname="org.apache.xalan.xslt.Process"> 
      <arg value="-IN"/> <arg value="dict.xml"/>
      <arg value="-XSL"/> <arg value="${core-en.dir}/add-intonation-info.xsl"/>
      <arg value="-OUT"/> <arg value="dict-plus-intonation-info.xml"/>
    </java>
    <echo message="Extracting morph items from dict-plus-intonation-info.xml to morph.xml"/>
    <java classname="org.apache.xalan.xslt.Process"> 
      <arg value="-IN"/> <arg value="dict-plus-intonation-info.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/extract-morph.xsl"/>
      <arg value="-OUT"/> <arg value="morph.xml"/>
    </java>
    <echo message="Adding type changing rules from unary-rules.xml to rules-base.xml, yielding rules.xml"/>
    <java classname="org.apache.xalan.xslt.Process"> 
      <arg value="-IN"/> <arg value="rules-base.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/append.xsl"/>
      <arg value="-PARAM"/> <arg value="file-to-append"/> <arg value="${basedir}/unary-rules.xml"/>
      <arg value="-OUT"/> <arg value="rules.xml"/>
    </java>
    <echo message="Adding extra types from types-extras.xml to core-en/types.xml, yielding types.xml"/>
    <java classname="org.apache.xalan.xslt.Process"> 
      <arg value="-IN"/> <arg value="${core-en.dir}/types.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/append.xsl"/>
      <arg value="-PARAM"/> <arg value="file-to-append"/> <arg value="${basedir}/types-extras.xml"/>
      <arg value="-OUT"/> <arg value="types.xml"/>
    </java>
    <echo message="Validating grammar.xml, lexicon.xml, morph.xml, rules.xml and types.xml"/>
    <java classname="opennlp.ccg.test.Validator" classpathref="validate.classpath" fork="true"> 
      <arg value="grammar.xml"/>
      <arg value="lexicon.xml"/>
      <arg value="morph.xml"/>
      <arg value="rules.xml"/>
      <arg value="types.xml"/>
    </java>
  </target>

</project>

<!-- End of file -->
<!-- $Id: build.xml,v 1.9 2007/03/26 14:37:57 mwhite14850 Exp $ -->
<!-- Copyright (C) 2003-4 University of Edinburgh (Michael White) -->
<project default="grammar" basedir=".">

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init">
    <tstamp/>
    <property name="Name" value="OpenCCG"/>
    <property name="name" value="openccg"/>

    <echo message="----------- ${Name} ------------"/>

    <property name="lib.dir" value="${openccg.home}/lib"/>
    <property name="grammars.dir" value="${openccg.home}/grammars"/>
    <property name="core-en.dir" value="${grammars.dir}/core-en"/>

    <path id="validate.classpath">
      <pathelement location="${lib.dir}/xercesImpl.jar"/>
      <pathelement location="${lib.dir}/${name}.jar"/>
    </path>
  </target>
  

  <!-- =================================================================== -->
  <!-- Help on usage                                                       -->
  <!-- =================================================================== -->
  <target name="usage">
    <echo message=""/>
    <echo message=""/>
    <echo message="OpenCCG grammar build file"/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=" Available targets are:"/>
    <echo message=""/>
    <echo message="   grammar  --> builds the grammar (default)"/>
    <echo message=""/>
    <echo message=" See the comments inside the build.xml file for more details."/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=""/>
  </target>
  

  <!-- =================================================================== -->
  <!-- Builds grammar                                                     -->
  <!-- =================================================================== -->
  <target name="grammar" depends="init" description="builds grammar">
    <echo message="Transforming dict.xsl to dict.xml"/>
    <java classname="org.apache.xalan.xslt.Process"> 
      <arg value="-XSL"/> <arg value="dict.xsl"/>
      <arg value="-OUT"/> <arg value="dict.xml"/>
    </java>
    <echo message="Transforming lexicon-base.xsl to lexicon-base.xml and unary-rules.xml"/>
    <java classname="org.apache.xalan.xslt.Process"> 
      <arg value="-XSL"/> <arg value="lexicon-base.xsl"/>
      <arg value="-OUT"/> <arg value="lexicon-base.xml"/>
    </java>
    <echo message="Adding family members from dict.xml to lexicon-base.xml, yielding lexicon.xml"/>
    <java classname="org.apache.xalan.xslt.Process"> 
      <arg value="-IN"/> <arg value="lexicon-base.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/add-family-members.xsl"/>
      <arg value="-PARAM"/> <arg value="dict-file"/> <arg value="${basedir}/dict.xml"/>
      <arg value="-OUT"/> <arg value="lexicon.xml"/>
    </java>
    <echo message="Adding intonation info to dict.xml yielding dict-plus-intonation-info.xml"/>
    <java classname="org.apache.xalan.xslt.Process"> 
      <arg value="-IN"/> <arg value="dict.xml"/>
      <arg value="-XSL"/> <arg value="${core-en.dir}/add-intonation-info.xsl"/>
      <arg value="-OUT"/> <arg value="dict-plus-intonation-info.xml"/>
    </java>
    <echo message="Extracting morph items from dict-plus-intonation-info.xml to morph.xml"/>
    <java classname="org.apache.xalan.xslt.Process"> 
      <arg value="-IN"/> <arg value="dict-plus-intonation-info.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/extract-morph.xsl"/>
      <arg value="-OUT"/> <arg value="morph.xml"/>
    </java>
    <echo message="Adding type changing rules from unary-rules.xml to rules-base.xml, yielding rules.xml"/>
    <java classname="org.apache.xalan.xslt.Process"> 
      <arg value="-IN"/> <arg value="rules-base.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/append.xsl"/>
      <arg value="-PARAM"/> <arg value="file-to-append"/> <arg value="${basedir}/unary-rules.xml"/>
      <arg value="-OUT"/> <arg value="rules.xml"/>
    </java>
    <echo message="Adding extra types from types-extras.xml to core-en/types.xml, yielding types.xml"/>
    <java classname="org.apache.xalan.xslt.Process"> 
      <arg value="-IN"/> <arg value="${core-en.dir}/types.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/append.xsl"/>
      <arg value="-PARAM"/> <arg value="file-to-append"/> <arg value="${basedir}/types-extras.xml"/>
      <arg value="-OUT"/> <arg value="types.xml"/>
    </java>
    <echo message="Validating grammar.xml, lexicon.xml, morph.xml, rules.xml and types.xml"/>
    <java classname="opennlp.ccg.test.Validator" classpathref="validate.classpath" fork="true"> 
      <arg value="grammar.xml"/>
      <arg value="lexicon.xml"/>
      <arg value="morph.xml"/>
      <arg value="rules.xml"/>
      <arg value="types.xml"/>
    </java>
  </target>

</project>

<!-- End of file -->
<!-- $Id: build.xml,v 1.2 2007/03/26 18:31:08 mwhite14850 Exp $ -->
<!-- Copyright (C) 2003 University of Edinburgh (Michael White) and Cem Bozsahin -->
<project default="grammar" basedir=".">

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init">
    <tstamp/>
    <property name="Name" value="OpenCCG"/>
    <property name="name" value="openccg"/>

    <echo message="----------- ${Name} ------------"/>

    <property name="lib.dir" value="${openccg.home}/lib"/>
    <property name="grammars.dir" value="${openccg.home}/grammars"/>

    <path id="validate.classpath">
      <pathelement location="${lib.dir}/xercesImpl.jar"/>
      <pathelement location="${lib.dir}/${name}.jar"/>
    </path>
  </target>
  

  <!-- =================================================================== -->
  <!-- Help on usage                                                       -->
  <!-- =================================================================== -->
  <target name="usage">
    <echo message=""/>
    <echo message=""/>
    <echo message="OpenCCG grammar build file"/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=" Available targets are:"/>
    <echo message=""/>
    <echo message="   grammar  --> builds the grammar (default)"/>
    <echo message=""/>
    <echo message="   skeleton  --> builds the skeleton file"/>
    <echo message=""/>
    <echo message=" See the comments inside the build.xml file for more details."/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=""/>
  </target>
  

  <!-- =================================================================== -->
  <!-- Builds grammar                                                     -->
  <!-- =================================================================== -->
  <target name="grammar" depends="init" description="builds grammar">
    <echo message="Adding family members from dict.xml to lexicon-base.xml, yielding lexicon.xml"/>
    <java classname="org.apache.xalan.xslt.Process"> 
      <arg value="-IN"/> <arg value="lexicon-base.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/add-family-members.xsl"/>
      <arg value="-PARAM"/> <arg value="dict-file"/> <arg value="${basedir}/dict.xml"/>
      <arg value="-OUT"/> <arg value="lexicon.xml"/>
    </java>
    <echo message="Extracting morph items from dict.xml to morph.xml"/>
    <java classname="org.apache.xalan.xslt.Process"> 
      <arg value="-IN"/> <arg value="${basedir}/dict.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/extract-morph.xsl"/>
      <arg value="-OUT"/> <arg value="morph.xml"/>
    </java>
    <echo message="Validating grammar.xml, lexicon.xml, morph.xml, rules.xml and types.xml"/>
    <java classname="opennlp.ccg.test.Validator" classpathref="validate.classpath" fork="true"> 
      <arg value="grammar.xml"/>
      <arg value="lexicon.xml"/>
      <arg value="morph.xml"/>
      <arg value="rules.xml"/>
      <arg value="types.xml"/>
    </java>
  </target>

  <target name="skeleton"
          depends="init"
 description="Builds pre-lexicon to start up lexicon development">
    <echo message="Validating parameters.xml"/>
    <java classname="opennlp.ccg.test.Validator" classpathref="validate.classpath" fork="true"> 
      <arg value="parameters.xml"/>
    </java>
    <echo message="Generating preset-families.xml"/>
    <java classname="org.apache.xalan.xslt.Process">
      <arg value="-IN"/> <arg value="${basedir}/parameters.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/parametric-lexicon.xsl"/>
      <arg value="-OUT"/> <arg value="${basedir}/preset-families.xml"/>
    </java>
    <echo message="Validating preset-families.xml"/>
    <java classname="opennlp.ccg.test.Validator" classpathref="validate.classpath" fork="true"> 
      <arg value="preset-families.xml"/>
    </java>
	<echo message="Generating types.xml"/>
    <java classname="org.apache.xalan.xslt.Process">
      <arg value="-IN"/> <arg value="${basedir}/parameters.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/parametric-types.xsl"/>
      <arg value="-OUT"/> <arg value="${basedir}/types.xml"/>
    </java>
    <echo message="Validating types.xml"/>
    <java classname="opennlp.ccg.test.Validator" classpathref="validate.classpath" fork="true"> 
      <arg value="types.xml"/>
    </java>
  </target>
</project>

<!-- End of file -->
<!-- $Id: build.xml,v 1.2 2007/03/26 18:31:11 mwhite14850 Exp $ -->
<!-- Copyright (C) 2003 University of Edinburgh (Michael White) and Cem Bozsahin -->
<project default="grammar" basedir=".">

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init">
    <tstamp/>
    <property name="Name" value="OpenCCG"/>
    <property name="name" value="openccg"/>

    <echo message="----------- ${Name} ------------"/>

    <property name="lib.dir" value="${openccg.home}/lib"/>
    <property name="grammars.dir" value="${openccg.home}/grammars"/>

    <path id="validate.classpath">
      <pathelement location="${lib.dir}/xercesImpl.jar"/>
      <pathelement location="${lib.dir}/${name}.jar"/>
    </path>
  </target>
  

  <!-- =================================================================== -->
  <!-- Help on usage                                                       -->
  <!-- =================================================================== -->
  <target name="usage">
    <echo message=""/>
    <echo message=""/>
    <echo message="OpenCCG grammar build file"/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=" Available targets are:"/>
    <echo message=""/>
    <echo message="   grammar  --> builds the grammar (default)"/>
    <echo message=""/>
    <echo message="   skeleton  --> builds the skeleton file"/>
    <echo message=""/>
    <echo message=" See the comments inside the build.xml file for more details."/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=""/>
  </target>
  

  <!-- =================================================================== -->
  <!-- Builds grammar                                                     -->
  <!-- =================================================================== -->
  <target name="grammar" depends="init" description="builds grammar">
    <echo message="Adding family members from dict.xml to lexicon-base.xml, yielding lexicon.xml"/>
    <java classname="org.apache.xalan.xslt.Process"> 
      <arg value="-IN"/> <arg value="lexicon-base.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/add-family-members.xsl"/>
      <arg value="-PARAM"/> <arg value="dict-file"/> <arg value="${basedir}/dict.xml"/>
      <arg value="-OUT"/> <arg value="lexicon.xml"/>
    </java>
    <echo message="Extracting morph items from dict.xml to morph.xml"/>
    <java classname="org.apache.xalan.xslt.Process"> 
      <arg value="-IN"/> <arg value="${basedir}/dict.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/extract-morph.xsl"/>
      <arg value="-OUT"/> <arg value="morph.xml"/>
    </java>
    <echo message="Validating grammar.xml, lexicon.xml, morph.xml, rules.xml and types.xml"/>
    <java classname="opennlp.ccg.test.Validator" classpathref="validate.classpath" fork="true"> 
      <arg value="grammar.xml"/>
      <arg value="lexicon.xml"/>
      <arg value="morph.xml"/>
      <arg value="rules.xml"/>
      <arg value="types.xml"/>
    </java>
  </target>

  <target name="skeleton"
          depends="init"
 description="Builds pre-lexicon to start up lexicon development">
    <echo message="Validating parameters.xml"/>
    <java classname="opennlp.ccg.test.Validator" classpathref="validate.classpath" fork="true"> 
      <arg value="parameters.xml"/>
    </java>
    <echo message="Generating preset-families.xml"/>
    <java classname="org.apache.xalan.xslt.Process">
      <arg value="-IN"/> <arg value="${basedir}/parameters.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/parametric-lexicon.xsl"/>
      <arg value="-OUT"/> <arg value="${basedir}/preset-families.xml"/>
    </java>
    <echo message="Validating preset-families.xml"/>
    <java classname="opennlp.ccg.test.Validator" classpathref="validate.classpath" fork="true"> 
      <arg value="preset-families.xml"/>
    </java>
	<echo message="Generating types.xml"/>
    <java classname="org.apache.xalan.xslt.Process">
      <arg value="-IN"/> <arg value="${basedir}/parameters.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/parametric-types.xsl"/>
      <arg value="-OUT"/> <arg value="${basedir}/types.xml"/>
    </java>
    <echo message="Validating types.xml"/>
    <java classname="opennlp.ccg.test.Validator" classpathref="validate.classpath" fork="true"> 
      <arg value="types.xml"/>
    </java>
  </target>
</project>

<!-- End of file -->
<!-- $Id: build.xml,v 1.2 2007/03/26 18:31:12 mwhite14850 Exp $ -->
<!-- Copyright (C) 2003 University of Edinburgh (Michael White) and Cem Bozsahin -->
<project default="grammar" basedir=".">

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init">
    <tstamp/>
    <property name="Name" value="OpenCCG"/>
    <property name="name" value="openccg"/>

    <echo message="----------- ${Name} ------------"/>

    <property name="lib.dir" value="${openccg.home}/lib"/>
    <property name="grammars.dir" value="${openccg.home}/grammars"/>

    <path id="validate.classpath">
      <pathelement location="${lib.dir}/xercesImpl.jar"/>
      <pathelement location="${lib.dir}/${name}.jar"/>
    </path>
  </target>
  

  <!-- =================================================================== -->
  <!-- Help on usage                                                       -->
  <!-- =================================================================== -->
  <target name="usage">
    <echo message=""/>
    <echo message=""/>
    <echo message="OpenCCG grammar build file"/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=" Available targets are:"/>
    <echo message=""/>
    <echo message="   grammar  --> builds the grammar (default)"/>
    <echo message=""/>
    <echo message="   skeleton  --> builds the skeleton file"/>
    <echo message=""/>
    <echo message=" See the comments inside the build.xml file for more details."/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=""/>
  </target>
  

  <!-- =================================================================== -->
  <!-- Builds grammar                                                     -->
  <!-- =================================================================== -->
  <target name="grammar" depends="init" description="builds grammar">
    <echo message="Adding family members from dict.xml to lexicon-base.xml, yielding lexicon.xml"/>
    <java classname="org.apache.xalan.xslt.Process"> 
      <arg value="-IN"/> <arg value="lexicon-base.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/add-family-members.xsl"/>
      <arg value="-PARAM"/> <arg value="dict-file"/> <arg value="${basedir}/dict.xml"/>
      <arg value="-OUT"/> <arg value="lexicon.xml"/>
    </java>
    <echo message="Extracting morph items from dict.xml to morph.xml"/>
    <java classname="org.apache.xalan.xslt.Process"> 
      <arg value="-IN"/> <arg value="${basedir}/dict.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/extract-morph.xsl"/>
      <arg value="-OUT"/> <arg value="morph.xml"/>
    </java>
    <echo message="Validating grammar.xml, lexicon.xml, morph.xml, rules.xml and types.xml"/>
    <java classname="opennlp.ccg.test.Validator" classpathref="validate.classpath" fork="true"> 
      <arg value="grammar.xml"/>
      <arg value="lexicon.xml"/>
      <arg value="morph.xml"/>
      <arg value="rules.xml"/>
      <arg value="types.xml"/>
    </java>
  </target>

  <target name="skeleton"
          depends="init"
 description="Builds pre-lexicon to start up lexicon development">
    <echo message="Validating parameters.xml"/>
    <java classname="opennlp.ccg.test.Validator" classpathref="validate.classpath" fork="true"> 
      <arg value="parameters.xml"/>
    </java>
    <echo message="Generating preset-families.xml"/>
    <java classname="org.apache.xalan.xslt.Process">
      <arg value="-IN"/> <arg value="${basedir}/parameters.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/parametric-lexicon.xsl"/>
      <arg value="-OUT"/> <arg value="${basedir}/preset-families.xml"/>
    </java>
    <echo message="Validating preset-families.xml"/>
    <java classname="opennlp.ccg.test.Validator" classpathref="validate.classpath" fork="true"> 
      <arg value="preset-families.xml"/>
    </java>
	<echo message="Generating types.xml"/>
    <java classname="org.apache.xalan.xslt.Process">
      <arg value="-IN"/> <arg value="${basedir}/parameters.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/parametric-types.xsl"/>
      <arg value="-OUT"/> <arg value="${basedir}/types.xml"/>
    </java>
    <echo message="Validating types.xml"/>
    <java classname="opennlp.ccg.test.Validator" classpathref="validate.classpath" fork="true"> 
      <arg value="types.xml"/>
    </java>
  </target>
</project>

<!-- End of file -->
<!-- $Id: build.xml,v 1.2 2007/03/26 18:31:12 mwhite14850 Exp $ -->
<!-- Copyright (C) 2003 University of Edinburgh (Michael White) and Cem Bozsahin -->
<project default="grammar" basedir=".">

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init">
    <tstamp/>
    <property name="Name" value="OpenCCG"/>
    <property name="name" value="openccg"/>

    <echo message="----------- ${Name} ------------"/>

    <property name="lib.dir" value="${openccg.home}/lib"/>
    <property name="grammars.dir" value="${openccg.home}/grammars"/>

    <path id="validate.classpath">
      <pathelement location="${lib.dir}/xercesImpl.jar"/>
      <pathelement location="${lib.dir}/${name}.jar"/>
    </path>
  </target>
  

  <!-- =================================================================== -->
  <!-- Help on usage                                                       -->
  <!-- =================================================================== -->
  <target name="usage">
    <echo message=""/>
    <echo message=""/>
    <echo message="OpenCCG grammar build file"/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=" Available targets are:"/>
    <echo message=""/>
    <echo message="   grammar  --> builds the grammar (default)"/>
    <echo message=""/>
    <echo message="   skeleton  --> builds the skeleton file"/>
    <echo message=""/>
    <echo message=" See the comments inside the build.xml file for more details."/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=""/>
  </target>
  

  <!-- =================================================================== -->
  <!-- Builds grammar                                                     -->
  <!-- =================================================================== -->
  <target name="grammar" depends="init" description="builds grammar">
    <echo message="Adding family members from dict.xml to lexicon-base.xml, yielding lexicon.xml"/>
    <java classname="org.apache.xalan.xslt.Process"> 
      <arg value="-IN"/> <arg value="lexicon-base.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/add-family-members.xsl"/>
      <arg value="-PARAM"/> <arg value="dict-file"/> <arg value="${basedir}/dict.xml"/>
      <arg value="-OUT"/> <arg value="lexicon.xml"/>
    </java>
    <echo message="Extracting morph items from dict.xml to morph.xml"/>
    <java classname="org.apache.xalan.xslt.Process"> 
      <arg value="-IN"/> <arg value="${basedir}/dict.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/extract-morph.xsl"/>
      <arg value="-OUT"/> <arg value="morph.xml"/>
    </java>
    <echo message="Validating grammar.xml, lexicon.xml, morph.xml, rules.xml and types.xml"/>
    <java classname="opennlp.ccg.test.Validator" classpathref="validate.classpath" fork="true"> 
      <arg value="grammar.xml"/>
      <arg value="lexicon.xml"/>
      <arg value="morph.xml"/>
      <arg value="rules.xml"/>
      <arg value="types.xml"/>
    </java>
  </target>

  <target name="skeleton"
          depends="init"
 description="Builds pre-lexicon to start up lexicon development">
    <echo message="Validating parameters.xml"/>
    <java classname="opennlp.ccg.test.Validator" classpathref="validate.classpath" fork="true"> 
      <arg value="parameters.xml"/>
    </java>
    <echo message="Generating preset-families.xml"/>
    <java classname="org.apache.xalan.xslt.Process">
      <arg value="-IN"/> <arg value="${basedir}/parameters.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/parametric-lexicon.xsl"/>
      <arg value="-OUT"/> <arg value="${basedir}/preset-families.xml"/>
    </java>
    <echo message="Validating preset-families.xml"/>
    <java classname="opennlp.ccg.test.Validator" classpathref="validate.classpath" fork="true"> 
      <arg value="preset-families.xml"/>
    </java>
	<echo message="Generating types.xml"/>
    <java classname="org.apache.xalan.xslt.Process">
      <arg value="-IN"/> <arg value="${basedir}/parameters.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/parametric-types.xsl"/>
      <arg value="-OUT"/> <arg value="${basedir}/types.xml"/>
    </java>
    <echo message="Validating types.xml"/>
    <java classname="opennlp.ccg.test.Validator" classpathref="validate.classpath" fork="true"> 
      <arg value="types.xml"/>
    </java>
  </target>
</project>

<!-- End of file -->
<!-- $Id: build.xml,v 1.2 2007/03/26 18:31:12 mwhite14850 Exp $ -->
<!-- Copyright (C) 2003 University of Edinburgh (Michael White) and Cem Bozsahin -->
<project default="grammar" basedir=".">

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init">
    <tstamp/>
    <property name="Name" value="OpenCCG"/>
    <property name="name" value="openccg"/>

    <echo message="----------- ${Name} ------------"/>

    <property name="lib.dir" value="${openccg.home}/lib"/>
    <property name="grammars.dir" value="${openccg.home}/grammars"/>

    <path id="validate.classpath">
      <pathelement location="${lib.dir}/xercesImpl.jar"/>
      <pathelement location="${lib.dir}/${name}.jar"/>
    </path>
  </target>
  

  <!-- =================================================================== -->
  <!-- Help on usage                                                       -->
  <!-- =================================================================== -->
  <target name="usage">
    <echo message=""/>
    <echo message=""/>
    <echo message="OpenCCG grammar build file"/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=" Available targets are:"/>
    <echo message=""/>
    <echo message="   grammar  --> builds the grammar (default)"/>
    <echo message=""/>
    <echo message="   skeleton  --> builds the skeleton file"/>
    <echo message=""/>
    <echo message=" See the comments inside the build.xml file for more details."/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=""/>
  </target>
  

  <!-- =================================================================== -->
  <!-- Builds grammar                                                     -->
  <!-- =================================================================== -->
  <target name="grammar" depends="init" description="builds grammar">
    <echo message="Adding family members from dict.xml to lexicon-base.xml, yielding lexicon.xml"/>
    <java classname="org.apache.xalan.xslt.Process"> 
      <arg value="-IN"/> <arg value="lexicon-base.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/add-family-members.xsl"/>
      <arg value="-PARAM"/> <arg value="dict-file"/> <arg value="${basedir}/dict.xml"/>
      <arg value="-OUT"/> <arg value="lexicon.xml"/>
    </java>
    <echo message="Extracting morph items from dict.xml to morph.xml"/>
    <java classname="org.apache.xalan.xslt.Process"> 
      <arg value="-IN"/> <arg value="${basedir}/dict.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/extract-morph.xsl"/>
      <arg value="-OUT"/> <arg value="morph.xml"/>
    </java>
    <echo message="Validating grammar.xml, lexicon.xml, morph.xml, rules.xml and types.xml"/>
    <java classname="opennlp.ccg.test.Validator" classpathref="validate.classpath" fork="true"> 
      <arg value="grammar.xml"/>
      <arg value="lexicon.xml"/>
      <arg value="morph.xml"/>
      <arg value="rules.xml"/>
      <arg value="types.xml"/>
    </java>
  </target>

  <target name="skeleton"
          depends="init"
 description="Builds pre-lexicon to start up lexicon development">
    <echo message="Validating parameters.xml"/>
    <java classname="opennlp.ccg.test.Validator" classpathref="validate.classpath" fork="true"> 
      <arg value="parameters.xml"/>
    </java>
    <echo message="Generating preset-families.xml"/>
    <java classname="org.apache.xalan.xslt.Process">
      <arg value="-IN"/> <arg value="${basedir}/parameters.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/parametric-lexicon.xsl"/>
      <arg value="-OUT"/> <arg value="${basedir}/preset-families.xml"/>
    </java>
    <echo message="Validating preset-families.xml"/>
    <java classname="opennlp.ccg.test.Validator" classpathref="validate.classpath" fork="true"> 
      <arg value="preset-families.xml"/>
    </java>
	<echo message="Generating types.xml"/>
    <java classname="org.apache.xalan.xslt.Process">
      <arg value="-IN"/> <arg value="${basedir}/parameters.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/parametric-types.xsl"/>
      <arg value="-OUT"/> <arg value="${basedir}/types.xml"/>
    </java>
    <echo message="Validating types.xml"/>
    <java classname="opennlp.ccg.test.Validator" classpathref="validate.classpath" fork="true"> 
      <arg value="types.xml"/>
    </java>
  </target>
</project>

<!-- End of file -->
<!-- $Id: build.xml,v 1.2 2007/03/26 18:31:13 mwhite14850 Exp $ -->
<!-- Copyright (C) 2003 University of Edinburgh (Michael White) and Cem Bozsahin -->
<project default="grammar" basedir=".">

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init">
    <tstamp/>
    <property name="Name" value="OpenCCG"/>
    <property name="name" value="openccg"/>

    <echo message="----------- ${Name} ------------"/>

    <property name="lib.dir" value="${openccg.home}/lib"/>
    <property name="grammars.dir" value="${openccg.home}/grammars"/>

    <path id="validate.classpath">
      <pathelement location="${lib.dir}/xercesImpl.jar"/>
      <pathelement location="${lib.dir}/${name}.jar"/>
    </path>
  </target>
  

  <!-- =================================================================== -->
  <!-- Help on usage                                                       -->
  <!-- =================================================================== -->
  <target name="usage">
    <echo message=""/>
    <echo message=""/>
    <echo message="OpenCCG grammar build file"/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=" Available targets are:"/>
    <echo message=""/>
    <echo message="   grammar  --> builds the grammar (default)"/>
    <echo message=""/>
    <echo message="   skeleton  --> builds the skeleton file"/>
    <echo message=""/>
    <echo message=" See the comments inside the build.xml file for more details."/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=""/>
  </target>
  

  <!-- =================================================================== -->
  <!-- Builds grammar                                                     -->
  <!-- =================================================================== -->
  <target name="grammar" depends="init" description="builds grammar">
    <echo message="Adding family members from dict.xml to lexicon-base.xml, yielding lexicon.xml"/>
    <java classname="org.apache.xalan.xslt.Process"> 
      <arg value="-IN"/> <arg value="lexicon-base.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/add-family-members.xsl"/>
      <arg value="-PARAM"/> <arg value="dict-file"/> <arg value="${basedir}/dict.xml"/>
      <arg value="-OUT"/> <arg value="lexicon.xml"/>
    </java>
    <echo message="Extracting morph items from dict.xml to morph.xml"/>
    <java classname="org.apache.xalan.xslt.Process"> 
      <arg value="-IN"/> <arg value="${basedir}/dict.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/extract-morph.xsl"/>
      <arg value="-OUT"/> <arg value="morph.xml"/>
    </java>
    <echo message="Validating grammar.xml, lexicon.xml, morph.xml, rules.xml and types.xml"/>
    <java classname="opennlp.ccg.test.Validator" classpathref="validate.classpath" fork="true"> 
      <arg value="grammar.xml"/>
      <arg value="lexicon.xml"/>
      <arg value="morph.xml"/>
      <arg value="rules.xml"/>
      <arg value="types.xml"/>
    </java>
  </target>

  <target name="skeleton"
          depends="init"
 description="Builds pre-lexicon to start up lexicon development">
    <echo message="Validating parameters.xml"/>
    <java classname="opennlp.ccg.test.Validator" classpathref="validate.classpath" fork="true"> 
      <arg value="parameters.xml"/>
    </java>
    <echo message="Generating preset-families.xml"/>
    <java classname="org.apache.xalan.xslt.Process">
      <arg value="-IN"/> <arg value="${basedir}/parameters.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/parametric-lexicon.xsl"/>
      <arg value="-OUT"/> <arg value="${basedir}/preset-families.xml"/>
    </java>
    <echo message="Validating preset-families.xml"/>
    <java classname="opennlp.ccg.test.Validator" classpathref="validate.classpath" fork="true"> 
      <arg value="preset-families.xml"/>
    </java>
	<echo message="Generating types.xml"/>
    <java classname="org.apache.xalan.xslt.Process">
      <arg value="-IN"/> <arg value="${basedir}/parameters.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/parametric-types.xsl"/>
      <arg value="-OUT"/> <arg value="${basedir}/types.xml"/>
    </java>
    <echo message="Validating types.xml"/>
    <java classname="opennlp.ccg.test.Validator" classpathref="validate.classpath" fork="true"> 
      <arg value="types.xml"/>
    </java>
  </target>
</project>

<!-- End of file -->
<!-- $Id: build.xml,v 1.2 2007/03/26 18:31:13 mwhite14850 Exp $ -->
<!-- Copyright (C) 2003 University of Edinburgh (Michael White) and Cem Bozsahin -->
<project default="grammar" basedir=".">

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init">
    <tstamp/>
    <property name="Name" value="OpenCCG"/>
    <property name="name" value="openccg"/>

    <echo message="----------- ${Name} ------------"/>

    <property name="lib.dir" value="${openccg.home}/lib"/>
    <property name="grammars.dir" value="${openccg.home}/grammars"/>

    <path id="validate.classpath">
      <pathelement location="${lib.dir}/xercesImpl.jar"/>
      <pathelement location="${lib.dir}/${name}.jar"/>
    </path>
  </target>
  

  <!-- =================================================================== -->
  <!-- Help on usage                                                       -->
  <!-- =================================================================== -->
  <target name="usage">
    <echo message=""/>
    <echo message=""/>
    <echo message="OpenCCG grammar build file"/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=" Available targets are:"/>
    <echo message=""/>
    <echo message="   grammar  --> builds the grammar (default)"/>
    <echo message=""/>
    <echo message="   skeleton  --> builds the skeleton file"/>
    <echo message=""/>
    <echo message=" See the comments inside the build.xml file for more details."/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=""/>
  </target>
  

  <!-- =================================================================== -->
  <!-- Builds grammar                                                     -->
  <!-- =================================================================== -->
  <target name="grammar" depends="init" description="builds grammar">
    <echo message="Adding family members from dict.xml to lexicon-base.xml, yielding lexicon.xml"/>
    <java classname="org.apache.xalan.xslt.Process"> 
      <arg value="-IN"/> <arg value="lexicon-base.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/add-family-members.xsl"/>
      <arg value="-PARAM"/> <arg value="dict-file"/> <arg value="${basedir}/dict.xml"/>
      <arg value="-OUT"/> <arg value="lexicon.xml"/>
    </java>
    <echo message="Extracting morph items from dict.xml to morph.xml"/>
    <java classname="org.apache.xalan.xslt.Process"> 
      <arg value="-IN"/> <arg value="${basedir}/dict.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/extract-morph.xsl"/>
      <arg value="-OUT"/> <arg value="morph.xml"/>
    </java>
    <echo message="Validating grammar.xml, lexicon.xml, morph.xml, rules.xml and types.xml"/>
    <java classname="opennlp.ccg.test.Validator" classpathref="validate.classpath" fork="true"> 
      <arg value="grammar.xml"/>
      <arg value="lexicon.xml"/>
      <arg value="morph.xml"/>
      <arg value="rules.xml"/>
      <arg value="types.xml"/>
    </java>
  </target>

  <target name="skeleton"
          depends="init"
 description="Builds pre-lexicon to start up lexicon development">
    <echo message="Validating parameters.xml"/>
    <java classname="opennlp.ccg.test.Validator" classpathref="validate.classpath" fork="true"> 
      <arg value="parameters.xml"/>
    </java>
    <echo message="Generating preset-families.xml"/>
    <java classname="org.apache.xalan.xslt.Process">
      <arg value="-IN"/> <arg value="${basedir}/parameters.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/parametric-lexicon.xsl"/>
      <arg value="-OUT"/> <arg value="${basedir}/preset-families.xml"/>
    </java>
    <echo message="Validating preset-families.xml"/>
    <java classname="opennlp.ccg.test.Validator" classpathref="validate.classpath" fork="true"> 
      <arg value="preset-families.xml"/>
    </java>
	<echo message="Generating types.xml"/>
    <java classname="org.apache.xalan.xslt.Process">
      <arg value="-IN"/> <arg value="${basedir}/parameters.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/parametric-types.xsl"/>
      <arg value="-OUT"/> <arg value="${basedir}/types.xml"/>
    </java>
    <echo message="Validating types.xml"/>
    <java classname="opennlp.ccg.test.Validator" classpathref="validate.classpath" fork="true"> 
      <arg value="types.xml"/>
    </java>
  </target>
</project>

<!-- End of file -->
<!-- $Id: build.xml,v 1.2 2007/03/26 18:31:14 mwhite14850 Exp $ -->
<!-- Copyright (C) 2006 Michael White -->
<project default="grammar" basedir=".">

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init">
    <tstamp/>
    <property name="Name" value="OpenCCG"/>
    <property name="name" value="openccg"/>

    <echo message="----------- ${Name} ------------"/>

    <property name="lib.dir" value="${openccg.home}/lib"/>
    <property name="grammars.dir" value="${openccg.home}/grammars"/>

    <path id="validate.classpath">
      <pathelement location="${lib.dir}/xercesImpl.jar"/>
      <pathelement location="${lib.dir}/${name}.jar"/>
    </path>
  </target>
  

  <!-- =================================================================== -->
  <!-- Help on usage                                                       -->
  <!-- =================================================================== -->
  <target name="usage">
    <echo message=""/>
    <echo message=""/>
    <echo message="OpenCCG grammar build file"/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=" Available targets are:"/>
    <echo message=""/>
    <echo message="   grammar  --> builds the grammar (default)"/>
    <echo message=""/>
    <echo message=" See the comments inside the build.xml file for more details."/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=""/>
  </target>
  

  <!-- =================================================================== -->
  <!-- Builds grammar                                                     -->
  <!-- =================================================================== -->
  <target name="grammar" depends="init" description="builds grammar">
    <echo message="Adding family members from dict.xml to lexicon-base.xml, yielding lexicon.xml"/>
    <java classname="org.apache.xalan.xslt.Process"> 
      <arg value="-IN"/> <arg value="lexicon-base.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/add-family-members.xsl"/>
      <arg value="-PARAM"/> <arg value="dict-file"/> <arg value="${basedir}/dict.xml"/>
      <arg value="-OUT"/> <arg value="lexicon.xml"/>
    </java>
    <echo message="Extracting morph items from dict.xml to morph.xml"/>
    <java classname="org.apache.xalan.xslt.Process"> 
      <arg value="-IN"/> <arg value="dict.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/extract-morph.xsl"/>
      <arg value="-OUT"/> <arg value="morph.xml"/>
    </java>
    <echo message="Validating grammar.xml, lexicon.xml, morph.xml, rules.xml and types.xml"/>
    <java classname="opennlp.ccg.test.Validator" classpathref="validate.classpath" fork="true"> 
      <arg value="grammar.xml"/>
      <arg value="lexicon.xml"/>
      <arg value="morph.xml"/>
      <arg value="rules.xml"/>
      <arg value="types.xml"/>
    </java>
  </target>

</project>

<!-- End of file -->
<!-- $Id: build.xml,v 1.4 2007/03/26 14:39:54 mwhite14850 Exp $ -->
<!-- Copyright (C) 2003 Michael White -->
<project default="grammar" basedir=".">

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init">
    <tstamp/>
    <property name="Name" value="OpenCCG"/>
    <property name="name" value="openccg"/>

    <echo message="----------- ${Name} ------------"/>

    <property name="lib.dir" value="${openccg.home}/lib"/>
    <property name="grammars.dir" value="${openccg.home}/grammars"/>

    <path id="validate.classpath">
      <pathelement location="${lib.dir}/xercesImpl.jar"/>
      <pathelement location="${lib.dir}/${name}.jar"/>
    </path>
  </target>
  

  <!-- =================================================================== -->
  <!-- Help on usage                                                       -->
  <!-- =================================================================== -->
  <target name="usage">
    <echo message=""/>
    <echo message=""/>
    <echo message="OpenCCG grammar build file"/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=" Available targets are:"/>
    <echo message=""/>
    <echo message="   grammar  --> builds the grammar (default)"/>
    <echo message=""/>
    <echo message=" See the comments inside the build.xml file for more details."/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=""/>
  </target>
  

  <!-- =================================================================== -->
  <!-- Builds grammar                                                     -->
  <!-- =================================================================== -->
  <target name="grammar" depends="init" description="builds grammar">
    <echo message="Validating grammar.xml, lexicon.xml, morph.xml, rules.xml and types.xml"/>
    <java classname="opennlp.ccg.test.Validator" classpathref="validate.classpath" fork="true"> 
      <arg value="grammar.xml"/>
      <arg value="lexicon.xml"/>
      <arg value="morph.xml"/>
      <arg value="rules.xml"/>
      <arg value="types.xml"/>
    </java>
  </target>
	
	<!-- =================================================================== -->
  <!-- Generates documentation                                             -->
  <!-- =================================================================== -->
	<target name="document">

		<taskdef name="grammardoc" classname="opennlp.ccg.grammardoc.GrammarDoc">
			<classpath>
				<fileset dir="../../lib">
					<include name="ant.jar"/>
				</fileset>
				<fileset dir="../../output">
					<include name="openccg.jar"/>
				</fileset>
			</classpath>
		</taskdef>
		
		<grammardoc srcdir="." destdir="docs/"/>
	</target>
	
</project>

<!-- End of file -->
<!-- $Id: build.xml,v 1.7 2007/03/26 14:40:44 mwhite14850 Exp $ -->
<!-- Copyright (C) 2003 University of Edinburgh (Michael White) -->
<project default="grammar" basedir=".">

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init">
    <tstamp/>
    <property name="Name" value="OpenCCG"/>
    <property name="name" value="openccg"/>

    <echo message="----------- ${Name} ------------"/>

    <property name="lib.dir" value="${openccg.home}/lib"/>
    <property name="grammars.dir" value="${openccg.home}/grammars"/>

    <path id="validate.classpath">
      <pathelement location="${lib.dir}/xercesImpl.jar"/>
      <pathelement location="${lib.dir}/${name}.jar"/>
    </path>
  </target>
  

  <!-- =================================================================== -->
  <!-- Help on usage                                                       -->
  <!-- =================================================================== -->
  <target name="usage">
    <echo message=""/>
    <echo message=""/>
    <echo message="OpenCCG grammar build file"/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=" Available targets are:"/>
    <echo message=""/>
    <echo message="   grammar  --> builds the grammar (default)"/>
    <echo message=""/>
    <echo message=" See the comments inside the build.xml file for more details."/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=""/>
  </target>
  

  <!-- =================================================================== -->
  <!-- Builds grammar                                                     -->
  <!-- =================================================================== -->
  <target name="grammar" depends="init" description="builds grammar">
    <echo message="Transforming lexicon-base.xsl to lexicon-base.xml"/>
    <java classname="org.apache.xalan.xslt.Process"> 
      <arg value="-XSL"/> <arg value="lexicon-base.xsl"/>
      <arg value="-OUT"/> <arg value="lexicon-base.xml"/>
    </java>
    <echo message="Adding family members from dict.xml to lexicon-base.xml, yielding lexicon.xml"/>
    <java classname="org.apache.xalan.xslt.Process"> 
      <arg value="-IN"/> <arg value="lexicon-base.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/add-family-members.xsl"/>
      <arg value="-PARAM"/> <arg value="dict-file"/> <arg value="${basedir}/dict.xml"/>
      <arg value="-OUT"/> <arg value="lexicon.xml"/>
    </java>
    <echo message="Extracting morph items from dict.xml to morph.xml"/>
    <java classname="org.apache.xalan.xslt.Process"> 
      <arg value="-IN"/> <arg value="dict.xml"/>
      <arg value="-XSL"/> <arg value="${grammars.dir}/extract-morph.xsl"/>
      <arg value="-OUT"/> <arg value="morph.xml"/>
    </java>
    <echo message="Validating grammar.xml, lexicon.xml, morph.xml and rules.xml"/>
    <java classname="opennlp.ccg.test.Validator" classpathref="validate.classpath" fork="true"> 
      <arg value="grammar.xml"/>
      <arg value="lexicon.xml"/>
      <arg value="morph.xml"/>
      <arg value="rules.xml"/>
    </java>
  </target>

</project>

<!-- End of file -->
<?xml version="1.0"?>

<project name="OpenCCG ccg2xml" basedir="." default="compile-ccg2xml">
  
	<property name="src.dir" value="../../src"/>
	<property name="bin.dir" value="../../bin"/>
	<property name="ccg2xml.dir" value="${src.dir}/ccg2xml"/>
	
	<uptodate property="ccg2xml.upToDate" srcfile="${ccg2xml.dir}/ccg.ply"
	      targetfile="${bin.dir}/ccg2xml.py"/>
	
	<!-- =================================================================== -->
  <!-- Compiles ccg2xml                                                    -->
  <!-- =================================================================== -->
  <target name="compile-ccg2xml">
    <antcall target="compile-ccg2xml.1"/>
    <antcall target="compile-ccg2xml.finish"/>
    <antcall target="copy-ccg-edit"/>
  </target>

  <target name="compile-ccg2xml.1" unless="ccg2xml.upToDate">
    <echo message="Compiling ccg2xml"/>
    
    <available file="${ccg2xml.dir}/convert-ply.py"
      property="convert-ply.py.present"/>
    <fail unless="convert-ply.py.present"
      message="convert-ply.py is not present"/>

    <available file="${ccg2xml.dir}/ccg.ply" property="ccg.ply.present"/>
    <fail unless="ccg.ply.present" message="ccg.ply is not present"/>
    
    <available file="${ccg2xml.dir}/lex.py" property="lex.py.present"/>
    <fail unless="lex.py.present" message="lex.py is not present"/>
    
    <available file="${ccg2xml.dir}/yacc.py" property="yacc.py.present"/>
    <fail unless="yacc.py.present" message="yacc.py is not present"/>
      
    <!-- branch on cygwin -->
    <antcall target="compile-ccg2xml.default"/>
    <antcall target="compile-ccg2xml.cygwin"/>
  </target>

  <target name="compile-ccg2xml.default" unless="cygwin">
    <echo message="(default compile)"/>
    <exec executable="python" dir="${ccg2xml.dir}" failonerror="true">
      <arg line="convert-ply.py -o ccg2xml.py ccg.ply"/>
    </exec>
  </target>
  
  <target name="compile-ccg2xml.cygwin" if="cygwin">
    <echo message="(cygwin compile)"/>
    <exec executable="bash" dir="${ccg2xml.dir}" failonerror="true">
      <arg value="-c"/>
      <arg value="python convert-ply.py -o ccg2xml.py ccg.ply"/>
    </exec>
  </target>
  
  <target name="compile-ccg2xml.finish">
    <copy todir="${bin.dir}">
      <fileset dir="${ccg2xml.dir}">
        <include name="ccg2xml.py"/>
        <include name="lex.py"/>
        <include name="yacc.py"/>
      </fileset>
    </copy>
  </target>

  <target name="copy-ccg-edit">
    <copy todir="${bin.dir}">
      <fileset dir="${ccg2xml.dir}">
        <include name="ccg_editor.py"/>
	<include name="Tree.py"/>
      </fileset>
    </copy>
  </target>
	
  <target name="clean">
    <delete>
      <fileset dir="${ccg2xml.dir}">
        <include name="ccg2xml.py"/>
      </fileset>
      <fileset dir="${bin.dir}">
        <include name="ccg2xml.py"/>
        <include name="lex.py"/>
        <include name="yacc.py"/>
      </fileset>
    </delete>
  </target>

</project>

