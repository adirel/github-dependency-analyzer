<?xml version="1.0" encoding="utf-8" ?>
<project name="FlickrUploader-Appengine" default="build"
	basedir=".">
	<property file="config.properties" />
	<!-- linux or mac -->
	<!-- Arguments to gwtc and devmode targets -->


	<!-- Configure path to GWT SDK -->
	<!--<property name="eclipse.gwtsdk" location="/home/emerix/Softwares/gwt-2.3.0-m1/" 
		/> -->
	<path id="project.class.path">
		<pathelement location="build/classes" />
		<pathelement location="war/WEB-INF/classes" />
		<pathelement location="war/WEB-INF/lib/LIB-commons-codec-1.4.jar" />
		<pathelement location="${eclipse.gwtsdk}/gwt-user.jar" />
		<pathelement location="${eclipse.gwtsdk}/gwt-dev.jar" />
		<pathelement location="${eclipse.gaesdk}/lib/appengine-tools-api.jar" />
		<pathelement location="${eclipse.gaesdk}/lib/appengine-remote-api.jar" />

		<!-- Add any additional non-server libs (such as JUnit) -->
		<fileset dir="war/WEB-INF/lib" includes="**/*.jar" />
		<fileset dir="lib" includes="**/*.jar" />
	</path>
	<property name="appengine.tools.classpath" location="${eclipse.gaesdk}/lib/appengine-tools-api.jar" />

	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="lib/LIB-tool-ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<target name="javac">
		<mkdir dir="war/WEB-INF/classes" />
		<javac srcdir="src:src_shared" includes="**" encoding="utf-8"
			destdir="war/WEB-INF/classes" source="1.6" target="1.6" nowarn="true"
			debug="true" debuglevel="lines,vars,source">
			<classpath refid="project.class.path" />
		</javac>
	</target>

	<macrodef name="notify">
		<attribute name="message" description="The message that will be displayed" />
		<sequential>
			<echo>@{message}</echo>
			<exec executable="scripts/finished.${os}.sh">
				<arg value="scripts/notification.wav" />
				<arg value="@{message}" />
			</exec>
		</sequential>
	</macrodef>

	<macrodef name="notifyfail">
		<attribute name="message" description="The message that will be displayed" />
		<sequential>
			<echo>@{message}</echo>
			<exec executable="scripts/finished.${os}.sh">
				<arg value="scripts/fail.wav" />
				<arg value="@{message}" />
			</exec>
		</sequential>
	</macrodef>

	<macrodef name="appcfg">
		<attribute name="war"
			description="The exploded war directory containing the application" />
		<attribute name="action"
			description="One of (update, rollback, update_indexes, request_logs)" />
		<element name="options" optional="true"
			description="Options for appcfg (such as --server, --num_days, etc...)" />
		<element name="args" optional="true"
			description="Additional arguments for the java task" />

		<sequential>
			<java classname="com.google.appengine.tools.admin.AppCfg"
				classpath="${eclipse.gaesdk}/lib/appengine-tools-api.jar" fork="true"
				failonerror="true">
				<arg value="--oauth2" />
				<options />
				<arg value="@{action}" />
				<arg value="@{war}" />
				<args />
			</java>
		</sequential>
	</macrodef>

	<target name="testGitRevision">
		<exec executable="scripts/gitrevision.sh" outputproperty='git.revision'>
		</exec>
		<echo message="git.revision : ${git.revision}" />
	</target>

	<target name="build" depends="javac" description="Build this project" />

	<target name="war" depends="build">
		<zip destfile="Showcase.war" basedir="war" />
	</target>

	<target name="clean">
		<delete dir="war/WEB-INF/classes" failonerror="false" />
		<delete dir="war/showcase" failonerror="false" />
	</target>

	<target name="copyGAEjars">
		<copy todir="war/WEB-INF/lib" flatten="true">
			<fileset dir="${eclipse.gaesdk}/lib/user">
				<include name="**/*.jar" />
			</fileset>
		</copy>
	</target>
	<target name="copyGWTjars">
		<copy todir="war/WEB-INF/lib" flatten="true">
			<fileset dir="${eclipse.gwtsdk}">
				<include name="gwt-servlet.jar" />
			</fileset>
		</copy>
	</target>
	<target name="copyJars" depends="copyGWTjars,copyGAEjars" />
	<taskdef name="enhance" classpath="${appengine.tools.classpath}"
		classname="com.google.appengine.tools.enhancer.EnhancerTask" />
	<macrodef name="enhance_war" description="Run the ORM enhancer on an exploded war">
		<attribute name="war"
			description="The exploded war directory containing the application" />
		<element name="args" optional="true"
			description="Additional arguments to the enhancer" />
		<sequential>
			<enhance failonerror="true">
				<args />
				<classpath>
					<pathelement path="${appengine.tools.classpath}" />
					<pathelement path="@{war}/WEB-INF/classes" />
					<fileset dir="@{war}/WEB-INF/lib" includes="*.jar" />
				</classpath>
				<fileset dir="@{war}/WEB-INF/classes/" includes="**/*.class" />
			</enhance>
		</sequential>
	</macrodef>

	<target name="datanucleusenhance" depends="javac"
		description="Performs JDO enhancement on compiled data classes.">
		<enhance_war war="war" />
	</target>
</project>
<?xml version="1.0" encoding="UTF-8"?>
<project
    name="FlickrUploader"
    default="help" >

    <!--
         The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems.
    -->

    <property file="local.properties" />

    <!--
         The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.
    -->

    <property file="ant.properties" />

    <!--
         if sdk.dir was not set from one of the property file, then
         get it from the ANDROID_HOME env var.
         This must be done before we load project.properties since
         the proguard config can use sdk.dir
    -->

    <property environment="env" />

    <condition
        property="sdk.dir"
        value="${env.ANDROID_HOME}" >

        <isset property="env.ANDROID_HOME" />
    </condition>

    <!--
         The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.
    -->

    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->

    <fail
        message="sdk.dir is missing. Make sure to generate local.properties using &apos;android update project&apos; or to inject it through the ANDROID_HOME environment variable."
        unless="sdk.dir" />

    <!--
        Import per project custom build rules if present at the root of the project.
        This is the place to put custom intermediary targets such as:
            -pre-build
            -pre-compile
            -post-compile (This is typically used for code obfuscation.
                           Compiled code location: ${out.classes.absolute.dir}
                           If this is not done in place, override ${out.dex.input.absolute.dir})
            -post-package
            -post-build
            -pre-clean
    -->

    <import
        file="custom_rules.xml"
        optional="true" />

    <!--
         Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->

    <import file="${sdk.dir}/tools/ant/build.xml" />

    <xmlproperty
        collapseAttributes="true"
        file="AndroidManifest.xml"
        prefix="mymanifest" />

    <target
        name="releaseProduction"
        description="Builds the application in release mode." >

        <antcall target="release" />

        <mkdir dir="${release.build.dir}" />

        <copy
            file="bin/FlickrUploader-release.apk"
            overwrite="true"
            tofile="${release.build.dir}/FlickrUploader-${mymanifest.manifest.android:versionName}_${mymanifest.manifest.android:versionCode}.apk" />

        <echo
            level="warning"
            message="##### SUCCESS ###### ${mymanifest.manifest.android:versionName} ${mymanifest.manifest.android:versionCode}" />

        <sleep seconds="4" />
    </target>

</project><?xml version="1.0" encoding="UTF-8"?>
<project name="Sprinkles" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property file="local.properties" />

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />

    <!-- if sdk.dir was not set from one of the property file, then
         get it from the ANDROID_HOME env var.
         This must be done before we load project.properties since
         the proguard config can use sdk.dir -->
    <property environment="env" />
    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
        <isset property="env.ANDROID_HOME" />
    </condition>

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
            unless="sdk.dir"
    />

    <!--
        Import per project custom build rules if present at the root of the project.
        This is the place to put custom intermediary targets such as:
            -pre-build
            -pre-compile
            -post-compile (This is typically used for code obfuscation.
                           Compiled code location: ${out.classes.absolute.dir}
                           If this is not done in place, override ${out.dex.input.absolute.dir})
            -post-package
            -post-build
            -pre-clean
    -->
    <import file="custom_rules.xml" optional="true" />

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->
    <import file="${sdk.dir}/tools/ant/build.xml" />

</project>
