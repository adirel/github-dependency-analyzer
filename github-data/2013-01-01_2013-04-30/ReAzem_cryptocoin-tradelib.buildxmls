<project name="Java tradeLib meta build file" default="dist" basedir=".">
  <description>
    Ant build file to build the core and all the modules.
  </description>

  <fileset id="buildFiles" dir="." includes="core/build.xml modules/*/build.xml"/>
  <fileset id="module-dist-files" dir="." includes="modules/*/dist/lib/*"/>

  <property name="core.dist.lib" location="core/dist/lib"/>
  <property name="core.dist.lib.ext" location="${core.dist.lib}/ext"/>

  <target name="dist">
    <!-- Build the core and modules distribution -->
    <subant target="dist">
      <fileset refid="buildFiles"/>
      <property name="debug" value="true" />
    </subant>

    <antcall target="copy-modules" />
    <!-- Copy the modules to the core ext dir -->

  </target>

  <target name="copy-modules">
    <!-- Copy all the files from the modules to the ext/ of the core dist/lib/ dir -->
    
    <!-- create the ext dir, if it does not exist yet. -->
    <mkdir dir="${core.dist.lib.ext}" />

    <!-- Now copy all the jars from the modules dist lib directories. -->
    <copy todir="${core.dist.lib.ext}" flatten="true">
      <fileset refid="module-dist-files" />
    </copy>
  </target>

  <target name="clean">
    <!-- Clean the core and modules -->
    <subant target="clean">
      <fileset refid="buildFiles"/>
    </subant>
  </target>

</project>
<project name="Java tradeLib core" default="dist" basedir=".">
    <description>
        Java tradelib core build file
    </description>
  <!-- set global properties for this build -->

  <property name="version" value="0.1.0"/>

  <property name="src"   location="src"/>
  <property name="lib"   location="lib/"/>
  <property name="build" location="build"/>
  <property name="dist"  location="dist"/>
  <property name="docs"  location="docs"/>

  <target name="init">
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
  </target>

  <target name="compile" depends="init" description="compile the source " >

    <!-- create the lib dir, just in case it is empty -->
    <mkdir dir="${lib}" />

    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}" debug="${debug}">
      <classpath>
	<fileset dir="${lib}">
	  <include name="**/*.jar" />
	</fileset>
      </classpath>
    </javac>
  </target>

  <target name="dist" depends="compile" description="generate the distribution" >
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}/lib"/>

    <!-- Put everything in ${build} into the <projectname>-${version}.jar file -->
    <jar jarfile="${dist}/lib/cryptocoin-tradelib-${version}.jar" basedir="${build}">
      <manifest>
	<attribute name="Class-Path" value="json-lib-2.4-jdk15.jar log4j.jar"/>
      </manifest>
    </jar>

    <!-- copy the libs to the distribution for easier installation -->
    <copy todir="${dist}/lib">
      <fileset dir="${lib}">
	<include name="**/*.jar" />
      </fileset>
    </copy>
  </target>

  <!-- create the javadoc files -->
  <target name="docs" depends="compile">
    <javadoc packagenames="src" sourcepath="${src}" destdir="${docs}">
       <fileset dir="${src}">
                <include name="**" />
           </fileset>
    </javadoc>
  </target>

  <target name="clean" description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>
</project>
<project name="Java cryptocoin tradelib moving averages bot example" default="dist" basedir=".">
  <description>
    This bot demonstrates the use of the cryptocoin tradelib
  </description>


  <!-- set global properties for this build -->

  <property name="version" value="0.1.0"/>

  <property name="src"   location="src"/>
  <property name="lib"   location="lib"/>
  <property name="build" location="build"/>
  <property name="dist"  location="dist"/>
  <property name="docs"  location="docs"/>

  <property name="core.lib" location="../../core/dist/lib"/>
  <!-- end global properties -->


  <target name="init">

    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}" />

    <!-- create the lib dir, just in case it is empty -->
    <mkdir dir="${lib}" />    

  </target>

  <target name="compile" depends="init" description="compile the source " >



    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}">
      <classpath>
	<fileset dir="${lib}">
	  <include name="**/*.jar" />
	</fileset>
	<fileset dir="${core.lib}">
	  <include name="*.jar" />
	</fileset>
      </classpath>
    </javac>
  </target>

  <target name="dist" depends="compile" description="generate the distribution" >
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}/lib"/>

    <!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file -->
    <jar jarfile="${dist}/lib/ma_bot-${version}.jar" basedir="${build}">
      <manifest>
	<attribute name="Main-Class" value="de.andreas_rueckert.trade.bot.BotRunner"/>
	<attribute name="Class-Path" value="${core.lib}/cryptocoin-tradelib-0.1.0.jar"/>
      </manifest>
    </jar>
  </target>

  <target name="run" depends="dist">
    <java jar="${dist}/lib/ma_bot-${version}.jar" fork="true"/>
  </target>

  <target name="clean" description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>
</project><project name="Java tradeLib bitcurex implementation" default="dist" basedir=".">
    <description>
        Java tradelib bitcurex implementation build file
    </description>
  <!-- set global properties for this build -->

  <property name="version" value="0.1.0"/>

  <property name="src"           location="src"/>
  <property name="lib"           location="lib/"/>
  <property name="build"         location="build"/>
  <property name="dist"          location="dist"/>
  <property name="docs"          location="docs"/>
  <property name="core-dist-lib" location="../../core/dist/lib"/>

  <path id="build-classpath">
    <fileset dir="${core-dist-lib}">
      <include name="**/*.jar"/>
    </fileset>
  </path>
  
  <target name="init">
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
    <!-- Create a lib dir, in case it is empty for this module -->
    <mkdir dir="${lib}"/>
  </target>

  <target name="compile" depends="init" description="compile the source " >

    <!-- The core has to be compile for this module -->
    <ant antfile="build.xml" dir="../../core" target="dist" inheritAll="false"/>

    <property name="build-classpath" refid="build-classpath"/>
    <echo message="Classpath = ${build-classpath}"/>

    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}" debug="${debug}">
      <classpath>
	<fileset dir="${lib}">
	  <include name="**/*.jar" />
	</fileset>
	<fileset dir="${core-dist-lib}">
	  <include name="**/*.jar" />
	</fileset>
      </classpath>
    </javac>
  </target>

  <target name="dist" depends="compile" description="generate the distribution" >
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}/lib"/>

    <!-- Put everything in ${build} into the <projectname>-${version}.jar file -->
    <jar jarfile="${dist}/lib/cryptocoin-tradelib-bitcurex-${version}.jar" basedir="${build}">
      <manifest>
	<attribute name="Class-Path" value="cryptocoin-tradelib-0.1.0.jar json-lib-2.4-jdk15.jar log4j.jar"/>
      </manifest>
    </jar>

    <!-- copy the libs to the distribution for easier installation -->
    <copy todir="${dist}/lib">
      <fileset dir="${lib}">
	<include name="**/*.jar" />
      </fileset>
    </copy>
  </target>

  <!-- create the javadoc files -->
  <target name="docs" depends="compile">
    <javadoc packagenames="src" sourcepath="${src}" destdir="${docs}">
       <fileset dir="${src}">
                <include name="**" />
           </fileset>
    </javadoc>
  </target>

  <target name="clean" description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>
</project>
<project name="Java tradeLib bitparking implementation" default="dist" basedir=".">
    <description>
        Java tradelib bitparking implementation build file
    </description>
  <!-- set global properties for this build -->

  <property name="version" value="0.1.0"/>

  <property name="src"           location="src"/>
  <property name="lib"           location="lib/"/>
  <property name="build"         location="build"/>
  <property name="dist"          location="dist"/>
  <property name="docs"          location="docs"/>
  <property name="core-dist-lib" location="../../core/dist/lib"/>

  <path id="build-classpath">
    <fileset dir="${core-dist-lib}">
      <include name="**/*.jar"/>
    </fileset>
  </path>
  
  <target name="init">
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
    <!-- Create a lib dir, in case it is empty for this module -->
    <mkdir dir="${lib}"/>
  </target>

  <target name="compile" depends="init" description="compile the source " >

    <!-- The core has to be compile for this module -->
    <ant antfile="build.xml" dir="../../core" target="dist" inheritAll="false"/>

    <property name="build-classpath" refid="build-classpath"/>
    <echo message="Classpath = ${build-classpath}"/>

    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}" debug="${debug}">
      <classpath>
	<fileset dir="${lib}">
	  <include name="**/*.jar" />
	</fileset>
	<fileset dir="${core-dist-lib}">
	  <include name="**/*.jar" />
	</fileset>
      </classpath>
    </javac>
  </target>

  <target name="dist" depends="compile" description="generate the distribution" >
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}/lib"/>

    <!-- Put everything in ${build} into the <projectname>-${version}.jar file -->
    <jar jarfile="${dist}/lib/cryptocoin-tradelib-bitparking-${version}.jar" basedir="${build}">
      <manifest>
	<attribute name="Class-Path" value="cryptocoin-tradelib-0.1.0.jar json-lib-2.4-jdk15.jar log4j.jar"/>
      </manifest>
    </jar>

    <!-- copy the libs to the distribution for easier installation -->
    <copy todir="${dist}/lib">
      <fileset dir="${lib}">
	<include name="**/*.jar" />
      </fileset>
    </copy>
  </target>

  <!-- create the javadoc files -->
  <target name="docs" depends="compile">
    <javadoc packagenames="src" sourcepath="${src}" destdir="${docs}">
       <fileset dir="${src}">
                <include name="**" />
           </fileset>
    </javadoc>
  </target>

  <target name="clean" description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>
</project>
<project name="Java tradeLib bitstamp implementation" default="dist" basedir=".">
    <description>
        Java tradelib bitstamp implementation build file
    </description>
  <!-- set global properties for this build -->

  <property name="version" value="0.1.0"/>

  <property name="src"           location="src"/>
  <property name="lib"           location="lib/"/>
  <property name="build"         location="build"/>
  <property name="dist"          location="dist"/>
  <property name="docs"          location="docs"/>
  <property name="core-dist-lib" location="../../core/dist/lib"/>

  <path id="build-classpath">
    <fileset dir="${core-dist-lib}">
      <include name="**/*.jar"/>
    </fileset>
  </path>
  
  <target name="init">
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
    <!-- Create a lib dir, in case it is empty for this module -->
    <mkdir dir="${lib}"/>
  </target>

  <target name="compile" depends="init" description="compile the source " >

    <!-- The core has to be compile for this module -->
    <ant antfile="build.xml" dir="../../core" target="dist" inheritAll="false"/>

    <property name="build-classpath" refid="build-classpath"/>
    <echo message="Classpath = ${build-classpath}"/>

    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}" debug="${debug}">
      <classpath>
	<fileset dir="${lib}">
	  <include name="**/*.jar" />
	</fileset>
	<fileset dir="${core-dist-lib}">
	  <include name="**/*.jar" />
	</fileset>
      </classpath>
    </javac>
  </target>

  <target name="dist" depends="compile" description="generate the distribution" >
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}/lib"/>

    <!-- Put everything in ${build} into the <projectname>-${version}.jar file -->
    <jar jarfile="${dist}/lib/cryptocoin-tradelib-bitstamp-${version}.jar" basedir="${build}">
      <manifest>
	<attribute name="Class-Path" value="cryptocoin-tradelib-0.1.0.jar json-lib-2.4-jdk15.jar log4j.jar"/>
      </manifest>
    </jar>

    <!-- copy the libs to the distribution for easier installation -->
    <copy todir="${dist}/lib">
      <fileset dir="${lib}">
	<include name="**/*.jar" />
      </fileset>
    </copy>
  </target>

  <!-- create the javadoc files -->
  <target name="docs" depends="compile">
    <javadoc packagenames="src" sourcepath="${src}" destdir="${docs}">
       <fileset dir="${src}">
                <include name="**" />
           </fileset>
    </javadoc>
  </target>

  <target name="clean" description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>
</project>
<project name="Java tradeLib btc-china implementation" default="dist" basedir=".">
    <description>
        Java tradelib btc-china implementation build file
    </description>
  <!-- set global properties for this build -->

  <property name="version" value="0.1.0"/>

  <property name="src"           location="src"/>
  <property name="lib"           location="lib/"/>
  <property name="build"         location="build"/>
  <property name="dist"          location="dist"/>
  <property name="docs"          location="docs"/>
  <property name="core-dist-lib" location="../../core/dist/lib"/>

  <path id="build-classpath">
    <fileset dir="${core-dist-lib}">
      <include name="**/*.jar"/>
    </fileset>
  </path>
  
  <target name="init">
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
    <!-- Create a lib dir, in case it is empty for this module -->
    <mkdir dir="${lib}"/>
  </target>

  <target name="compile" depends="init" description="compile the source " >

    <!-- The core has to be compile for this module -->
    <ant antfile="build.xml" dir="../../core" target="dist" inheritAll="false"/>

    <property name="build-classpath" refid="build-classpath"/>
    <echo message="Classpath = ${build-classpath}"/>

    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}" debug="${debug}">
      <classpath>
	<fileset dir="${lib}">
	  <include name="**/*.jar" />
	</fileset>
	<fileset dir="${core-dist-lib}">
	  <include name="**/*.jar" />
	</fileset>
      </classpath>
    </javac>
  </target>

  <target name="dist" depends="compile" description="generate the distribution" >
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}/lib"/>

    <!-- Put everything in ${build} into the <projectname>-${version}.jar file -->
    <jar jarfile="${dist}/lib/cryptocoin-tradelib-btc_china-${version}.jar" basedir="${build}">
      <manifest>
	<attribute name="Class-Path" value="cryptocoin-tradelib-0.1.0.jar json-lib-2.4-jdk15.jar log4j.jar"/>
      </manifest>
    </jar>

    <!-- copy the libs to the distribution for easier installation -->
    <copy todir="${dist}/lib">
      <fileset dir="${lib}">
	<include name="**/*.jar" />
      </fileset>
    </copy>
  </target>

  <!-- create the javadoc files -->
  <target name="docs" depends="compile">
    <javadoc packagenames="src" sourcepath="${src}" destdir="${docs}">
       <fileset dir="${src}">
                <include name="**" />
           </fileset>
    </javadoc>
  </target>

  <target name="clean" description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>
</project>
<project name="Java tradeLib btc-e implementation" default="dist" basedir=".">
    <description>
        Java tradelib btc-e implementation build file
    </description>
  <!-- set global properties for this build -->

  <property name="version" value="0.1.0"/>

  <property name="src"           location="src"/>
  <property name="lib"           location="lib/"/>
  <property name="build"         location="build"/>
  <property name="dist"          location="dist"/>
  <property name="docs"          location="docs"/>
  <property name="core-dist-lib" location="../../core/dist/lib"/>

  <path id="build-classpath">
    <fileset dir="${core-dist-lib}">
      <include name="**/*.jar"/>
    </fileset>
  </path>
  
  <target name="init">
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
    <!-- Create a lib dir, in case it is empty for this module -->
    <mkdir dir="${lib}"/>
  </target>

  <target name="compile" depends="init" description="compile the source " >

    <!-- The core has to be compile for this module -->
    <ant antfile="build.xml" dir="../../core" target="dist" inheritAll="false"/>

    <property name="build-classpath" refid="build-classpath"/>
    <echo message="Classpath = ${build-classpath}"/>

    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}" debug="${debug}">
      <classpath>
	<fileset dir="${lib}">
	  <include name="**/*.jar" />
	</fileset>
	<fileset dir="${core-dist-lib}">
	  <include name="**/*.jar" />
	</fileset>
      </classpath>
    </javac>
  </target>

  <target name="dist" depends="compile" description="generate the distribution" >
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}/lib"/>

    <!-- Put everything in ${build} into the <projectname>-${version}.jar file -->
    <jar jarfile="${dist}/lib/cryptocoin-tradelib-btc_e-${version}.jar" basedir="${build}">
      <manifest>
	<attribute name="Class-Path" value="cryptocoin-tradelib-0.1.0.jar json-lib-2.4-jdk15.jar log4j.jar"/>
      </manifest>
    </jar>

    <!-- copy the libs to the distribution for easier installation -->
    <copy todir="${dist}/lib">
      <fileset dir="${lib}">
	<include name="**/*.jar" />
      </fileset>
    </copy>
  </target>

  <!-- create the javadoc files -->
  <target name="docs" depends="compile">
    <javadoc packagenames="src" sourcepath="${src}" destdir="${docs}">
       <fileset dir="${src}">
                <include name="**" />
           </fileset>
    </javadoc>
  </target>

  <target name="clean" description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>
</project>
<project name="Java tradeLib cex.io implementation" default="dist" basedir=".">
    <description>
        Java tradelib cex.io implementation build file
    </description>
  <!-- set global properties for this build -->

  <property name="version" value="0.1.0"/>

  <property name="src"           location="src"/>
  <property name="lib"           location="lib/"/>
  <property name="build"         location="build"/>
  <property name="dist"          location="dist"/>
  <property name="docs"          location="docs"/>
  <property name="core-dist-lib" location="../../core/dist/lib"/>

  <path id="build-classpath">
    <fileset dir="${core-dist-lib}">
      <include name="**/*.jar"/>
    </fileset>
  </path>
  
  <target name="init">
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
    <!-- Create a lib dir, in case it is empty for this module -->
    <mkdir dir="${lib}"/>
  </target>

  <target name="compile" depends="init" description="compile the source " >

    <!-- The core has to be compile for this module -->
    <ant antfile="build.xml" dir="../../core" target="dist" inheritAll="false"/>

    <property name="build-classpath" refid="build-classpath"/>
    <echo message="Classpath = ${build-classpath}"/>

    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}" debug="${debug}">
      <classpath>
	<fileset dir="${lib}">
	  <include name="**/*.jar" />
	</fileset>
	<fileset dir="${core-dist-lib}">
	  <include name="**/*.jar" />
	</fileset>
      </classpath>
    </javac>
  </target>

  <target name="dist" depends="compile" description="generate the distribution" >
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}/lib"/>

    <!-- Put everything in ${build} into the <projectname>-${version}.jar file -->
    <jar jarfile="${dist}/lib/cryptocoin-tradelib-cex_io-${version}.jar" basedir="${build}">
      <manifest>
	<attribute name="Class-Path" value="cryptocoin-tradelib-0.1.0.jar json-lib-2.4-jdk15.jar log4j.jar"/>
      </manifest>
    </jar>

    <!-- copy the libs to the distribution for easier installation -->
    <copy todir="${dist}/lib">
      <fileset dir="${lib}">
	<include name="**/*.jar" />
      </fileset>
    </copy>
  </target>

  <!-- create the javadoc files -->
  <target name="docs" depends="compile">
    <javadoc packagenames="src" sourcepath="${src}" destdir="${docs}">
       <fileset dir="${src}">
                <include name="**" />
           </fileset>
    </javadoc>
  </target>

  <target name="clean" description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>
</project>
<project name="Java tradeLib coins-e implementation" default="dist" basedir=".">
    <description>
        Java tradelib coins-e implementation build file
    </description>
  <!-- set global properties for this build -->

  <property name="version" value="0.1.0"/>

  <property name="src"           location="src"/>
  <property name="lib"           location="lib/"/>
  <property name="build"         location="build"/>
  <property name="dist"          location="dist"/>
  <property name="docs"          location="docs"/>
  <property name="core-dist-lib" location="../../core/dist/lib"/>

  <path id="build-classpath">
    <fileset dir="${core-dist-lib}">
      <include name="**/*.jar"/>
    </fileset>
  </path>
  
  <target name="init">
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
    <!-- Create a lib dir, in case it is empty for this module -->
    <mkdir dir="${lib}"/>
  </target>

  <target name="compile" depends="init" description="compile the source " >

    <!-- The core has to be compile for this module -->
    <ant antfile="build.xml" dir="../../core" target="dist" inheritAll="false"/>

    <property name="build-classpath" refid="build-classpath"/>
    <echo message="Classpath = ${build-classpath}"/>

    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}" debug="${debug}">
      <classpath>
	<fileset dir="${lib}">
	  <include name="**/*.jar" />
	</fileset>
	<fileset dir="${core-dist-lib}">
	  <include name="**/*.jar" />
	</fileset>
      </classpath>
    </javac>
  </target>

  <target name="dist" depends="compile" description="generate the distribution" >
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}/lib"/>

    <!-- Put everything in ${build} into the <projectname>-${version}.jar file -->
    <jar jarfile="${dist}/lib/cryptocoin-tradelib-coins_e-${version}.jar" basedir="${build}">
      <manifest>
	<attribute name="Class-Path" value="cryptocoin-tradelib-0.1.0.jar json-lib-2.4-jdk15.jar log4j.jar"/>
      </manifest>
    </jar>

    <!-- copy the libs to the distribution for easier installation -->
    <copy todir="${dist}/lib">
      <fileset dir="${lib}">
	<include name="**/*.jar" />
      </fileset>
    </copy>
  </target>

  <!-- create the javadoc files -->
  <target name="docs" depends="compile">
    <javadoc packagenames="src" sourcepath="${src}" destdir="${docs}">
       <fileset dir="${src}">
                <include name="**" />
           </fileset>
    </javadoc>
  </target>

  <target name="clean" description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>
</project>
<project name="Java tradeLib cryptsy implementation" default="dist" basedir=".">
    <description>
        Java tradelib cryptsy implementation build file
    </description>
  <!-- set global properties for this build -->

  <property name="version" value="0.1.0"/>

  <property name="src"           location="src"/>
  <property name="lib"           location="lib/"/>
  <property name="build"         location="build"/>
  <property name="dist"          location="dist"/>
  <property name="docs"          location="docs"/>
  <property name="core-dist-lib" location="../../core/dist/lib"/>

  <path id="build-classpath">
    <fileset dir="${core-dist-lib}">
      <include name="**/*.jar"/>
    </fileset>
  </path>
  
  <target name="init">
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
    <!-- Create a lib dir, in case it is empty for this module -->
    <mkdir dir="${lib}"/>
  </target>

  <target name="compile" depends="init" description="compile the source " >

    <!-- The core has to be compile for this module -->
    <ant antfile="build.xml" dir="../../core" target="dist" inheritAll="false"/>

    <property name="build-classpath" refid="build-classpath"/>
    <echo message="Classpath = ${build-classpath}"/>

    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}" debug="${debug}">
      <classpath>
	<fileset dir="${lib}">
	  <include name="**/*.jar" />
	</fileset>
	<fileset dir="${core-dist-lib}">
	  <include name="**/*.jar" />
	</fileset>
      </classpath>
    </javac>
  </target>

  <target name="dist" depends="compile" description="generate the distribution" >
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}/lib"/>

    <!-- Put everything in ${build} into the <projectname>-${version}.jar file -->
    <jar jarfile="${dist}/lib/cryptocoin-tradelib-cryptsy-${version}.jar" basedir="${build}">
      <manifest>
	<attribute name="Class-Path" value="cryptocoin-tradelib-0.1.0.jar json-lib-2.4-jdk15.jar log4j.jar"/>
      </manifest>
    </jar>

    <!-- copy the libs to the distribution for easier installation -->
    <copy todir="${dist}/lib">
      <fileset dir="${lib}">
	<include name="**/*.jar" />
      </fileset>
    </copy>
  </target>

  <!-- create the javadoc files -->
  <target name="docs" depends="compile">
    <javadoc packagenames="src" sourcepath="${src}" destdir="${docs}">
       <fileset dir="${src}">
                <include name="**" />
           </fileset>
    </javadoc>
  </target>

  <target name="clean" description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>
</project>
<project name="Java tradeLib intersango implementation" default="dist" basedir=".">
    <description>
        Java tradelib intersango implementation build file
    </description>
  <!-- set global properties for this build -->

  <property name="version" value="0.1.0"/>

  <property name="src"           location="src"/>
  <property name="lib"           location="lib/"/>
  <property name="build"         location="build"/>
  <property name="dist"          location="dist"/>
  <property name="docs"          location="docs"/>
  <property name="core-dist-lib" location="../../core/dist/lib"/>

  <path id="build-classpath">
    <fileset dir="${core-dist-lib}">
      <include name="**/*.jar"/>
    </fileset>
  </path>
  
  <target name="init">
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
    <!-- Create a lib dir, in case it is empty for this module -->
    <mkdir dir="${lib}"/>
  </target>

  <target name="compile" depends="init" description="compile the source " >

    <!-- The core has to be compile for this module -->
    <ant antfile="build.xml" dir="../../core" target="dist" inheritAll="false"/>

    <property name="build-classpath" refid="build-classpath"/>
    <echo message="Classpath = ${build-classpath}"/>

    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}" debug="${debug}">
      <classpath>
	<fileset dir="${lib}">
	  <include name="**/*.jar" />
	</fileset>
	<fileset dir="${core-dist-lib}">
	  <include name="**/*.jar" />
	</fileset>
      </classpath>
    </javac>
  </target>

  <target name="dist" depends="compile" description="generate the distribution" >
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}/lib"/>

    <!-- Put everything in ${build} into the <projectname>-${version}.jar file -->
    <jar jarfile="${dist}/lib/cryptocoin-tradelib-intersango-${version}.jar" basedir="${build}">
      <manifest>
	<attribute name="Class-Path" value="cryptocoin-tradelib-0.1.0.jar json-lib-2.4-jdk15.jar log4j.jar"/>
      </manifest>
    </jar>

    <!-- copy the libs to the distribution for easier installation -->
    <copy todir="${dist}/lib">
      <fileset dir="${lib}">
	<include name="**/*.jar" />
      </fileset>
    </copy>
  </target>

  <!-- create the javadoc files -->
  <target name="docs" depends="compile">
    <javadoc packagenames="src" sourcepath="${src}" destdir="${docs}">
       <fileset dir="${src}">
                <include name="**" />
           </fileset>
    </javadoc>
  </target>

  <target name="clean" description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>
</project>
<project name="Java tradeLib kraken implementation" default="dist" basedir=".">
    <description>
        Java tradelib kraken implementation build file
    </description>
  <!-- set global properties for this build -->

  <property name="version" value="0.1.0"/>

  <property name="src"           location="src"/>
  <property name="lib"           location="lib/"/>
  <property name="build"         location="build"/>
  <property name="dist"          location="dist"/>
  <property name="docs"          location="docs"/>
  <property name="core-dist-lib" location="../../core/dist/lib"/>

  <path id="build-classpath">
    <fileset dir="${core-dist-lib}">
      <include name="**/*.jar"/>
    </fileset>
  </path>
  
  <target name="init">
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
    <!-- Create a lib dir, in case it is empty for this module -->
    <mkdir dir="${lib}"/>
  </target>

  <target name="compile" depends="init" description="compile the source " >

    <!-- The core has to be compile for this module -->
    <ant antfile="build.xml" dir="../../core" target="dist" inheritAll="false"/>

    <property name="build-classpath" refid="build-classpath"/>
    <echo message="Classpath = ${build-classpath}"/>

    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}" debug="${debug}">
      <classpath>
	<fileset dir="${lib}">
	  <include name="**/*.jar" />
	</fileset>
	<fileset dir="${core-dist-lib}">
	  <include name="**/*.jar" />
	</fileset>
      </classpath>
    </javac>
  </target>

  <target name="dist" depends="compile" description="generate the distribution" >
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}/lib"/>

    <!-- Put everything in ${build} into the <projectname>-${version}.jar file -->
    <jar jarfile="${dist}/lib/cryptocoin-tradelib-kraken-${version}.jar" basedir="${build}">
      <manifest>
	<attribute name="Class-Path" value="cryptocoin-tradelib-0.1.0.jar json-lib-2.4-jdk15.jar log4j.jar"/>
      </manifest>
    </jar>

    <!-- copy the libs to the distribution for easier installation -->
    <copy todir="${dist}/lib">
      <fileset dir="${lib}">
	<include name="**/*.jar" />
      </fileset>
    </copy>
  </target>

  <!-- create the javadoc files -->
  <target name="docs" depends="compile">
    <javadoc packagenames="src" sourcepath="${src}" destdir="${docs}">
       <fileset dir="${src}">
                <include name="**" />
           </fileset>
    </javadoc>
  </target>

  <target name="clean" description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>
</project>
<project name="Java tradeLib mtgox implementation" default="dist" basedir=".">
    <description>
        Java tradelib mtgox implementation build file
    </description>
  <!-- set global properties for this build -->

  <property name="version" value="0.1.0"/>

  <property name="src"           location="src"/>
  <property name="lib"           location="lib/"/>
  <property name="build"         location="build"/>
  <property name="dist"          location="dist"/>
  <property name="docs"          location="docs"/>
  <property name="core-dist-lib" location="../../core/dist/lib"/>

  <path id="build-classpath">
    <fileset dir="${core-dist-lib}">
      <include name="**/*.jar"/>
    </fileset>
  </path>
  
  <target name="init">
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
    <!-- Create a lib dir, in case it is empty for this module -->
    <mkdir dir="${lib}"/>
  </target>

  <target name="compile" depends="init" description="compile the source " >

    <!-- The core has to be compile for this module -->
    <ant antfile="build.xml" dir="../../core" target="dist" inheritAll="false"/>

    <property name="build-classpath" refid="build-classpath"/>
    <echo message="Classpath = ${build-classpath}"/>

    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}" debug="${debug}">
      <classpath>
	<fileset dir="${lib}">
	  <include name="**/*.jar" />
	</fileset>
	<fileset dir="${core-dist-lib}">
	  <include name="**/*.jar" />
	</fileset>
      </classpath>
    </javac>
  </target>

  <target name="dist" depends="compile" description="generate the distribution" >
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}/lib"/>

    <!-- Put everything in ${build} into the <projectname>-${version}.jar file -->
    <jar jarfile="${dist}/lib/cryptocoin-tradelib-mtgox-${version}.jar" basedir="${build}">
      <manifest>
	<attribute name="Class-Path" value="cryptocoin-tradelib-0.1.0.jar json-lib-2.4-jdk15.jar log4j.jar"/>
      </manifest>
    </jar>

    <!-- copy the libs to the distribution for easier installation -->
    <copy todir="${dist}/lib">
      <fileset dir="${lib}">
	<include name="**/*.jar" />
      </fileset>
    </copy>
  </target>

  <!-- create the javadoc files -->
  <target name="docs" depends="compile">
    <javadoc packagenames="src" sourcepath="${src}" destdir="${docs}">
       <fileset dir="${src}">
                <include name="**" />
           </fileset>
    </javadoc>
  </target>

  <target name="clean" description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>
</project>
<project name="Java tradeLib vircurex implementation" default="dist" basedir=".">
    <description>
        Java tradelib vircurex implementation build file
    </description>
  <!-- set global properties for this build -->

  <property name="version" value="0.1.0"/>

  <property name="src"           location="src"/>
  <property name="lib"           location="lib/"/>
  <property name="build"         location="build"/>
  <property name="dist"          location="dist"/>
  <property name="docs"          location="docs"/>
  <property name="core-dist-lib" location="../../core/dist/lib"/>

  <path id="build-classpath">
    <fileset dir="${core-dist-lib}">
      <include name="**/*.jar"/>
    </fileset>
  </path>
  
  <target name="init">
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
    <!-- Create a lib dir, in case it is empty for this module -->
    <mkdir dir="${lib}"/>
  </target>

  <target name="compile" depends="init" description="compile the source " >

    <!-- The core has to be compile for this module -->
    <ant antfile="build.xml" dir="../../core" target="dist" inheritAll="false"/>

    <property name="build-classpath" refid="build-classpath"/>
    <echo message="Classpath = ${build-classpath}"/>

    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}" debug="${debug}">
      <classpath>
	<fileset dir="${lib}">
	  <include name="**/*.jar" />
	</fileset>
	<fileset dir="${core-dist-lib}">
	  <include name="**/*.jar" />
	</fileset>
      </classpath>
    </javac>
  </target>

  <target name="dist" depends="compile" description="generate the distribution" >
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}/lib"/>

    <!-- Put everything in ${build} into the <projectname>-${version}.jar file -->
    <jar jarfile="${dist}/lib/cryptocoin-tradelib-vircurex-${version}.jar" basedir="${build}">
      <manifest>
	<attribute name="Class-Path" value="cryptocoin-tradelib-0.1.0.jar json-lib-2.4-jdk15.jar log4j.jar"/>
      </manifest>
    </jar>

    <!-- copy the libs to the distribution for easier installation -->
    <copy todir="${dist}/lib">
      <fileset dir="${lib}">
	<include name="**/*.jar" />
      </fileset>
    </copy>
  </target>

  <!-- create the javadoc files -->
  <target name="docs" depends="compile">
    <javadoc packagenames="src" sourcepath="${src}" destdir="${docs}">
       <fileset dir="${src}">
                <include name="**" />
           </fileset>
    </javadoc>
  </target>

  <target name="clean" description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>
</project>
<project name="Java tradeLib user interface components for j2ee" default="dist" basedir=".">
    <description>
        Java 2 dialogs for the cryptocoin tradelib
    </description>
  <!-- set global properties for this build -->

  <property name="version" value="0.1.0"/>

  <property name="src"           location="src"/>
  <property name="lib"           location="lib/"/>
  <property name="build"         location="build"/>
  <property name="dist"          location="dist"/>
  <property name="docs"          location="docs"/>
  <property name="core-dist-lib" location="../core/dist/lib"/>

  <path id="build-classpath">
    <fileset dir="${core-dist-lib}">
      <include name="**/*.jar"/>
    </fileset>
  </path>
  
  <target name="init">
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
    <!-- Create a lib dir, in case it is empty for this module -->
    <mkdir dir="${lib}"/>
  </target>

  <target name="compile" depends="init" description="compile the source " >

    <!-- The core has to be compile for this module -->
    <ant antfile="build.xml" dir="../core" target="dist" inheritAll="false"/>

    <property name="build-classpath" refid="build-classpath"/>
    <echo message="Classpath = ${build-classpath}"/>

    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}">
      <classpath>
	<fileset dir="${lib}">
	  <include name="**/*.jar" />
	</fileset>
	<fileset dir="${core-dist-lib}">
	  <include name="**/*.jar" />
	</fileset>
      </classpath>
    </javac>
  </target>

  <target name="dist" depends="compile" description="generate the distribution" >
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}/lib"/>

    <!-- Put everything in ${build} into the <projectname>-${version}.jar file -->
    <jar jarfile="${dist}/lib/cryptocoin-tradelib-ui-j2ee-${version}.jar" basedir="${build}">
      <manifest>
	<attribute name="Class-Path" value="cryptocoin-tradelib-0.1.0.jar log4j.jar"/>
      </manifest>
    </jar>

    <!-- copy the libs to the distribution for easier installation -->
    <copy todir="${dist}/lib">
      <fileset dir="${lib}">
	<include name="**/*.jar" />
      </fileset>
    </copy>
  </target>

  <!-- create the javadoc files -->
  <target name="docs" depends="compile">
    <javadoc packagenames="src" sourcepath="${src}" destdir="${docs}">
       <fileset dir="${src}">
                <include name="**" />
           </fileset>
    </javadoc>
  </target>

  <target name="clean" description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>
</project>
