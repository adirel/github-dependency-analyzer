<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project name="Automated builds" default="build_all">
	<property file="src/project.properties"/>
	
	<target name="build_all" depends="build_osx_app, build_windows_app, build_linux32_app">
	</target>
	
	
	<!-- Build OSX application -->
    <target name="build_osx_app">
    	<delete dir="build/macosx/Photoduino Remote.app/Contents/Resources/Java"/>
    	<mkdir dir="build/macosx/Photoduino Remote.app/Contents/Resources/Java"/>
        <jar destfile="build/macosx/Photoduino Remote.app/Contents/Resources/Java/PhotoduinoRemote.jar">
            <manifest>
                <attribute name="Main-Class" value="com.photoduino.remote.AppWindow"/>
            	<attribute name="Created-By" value="kalanda.com"/>
            	<attribute name="Implementation-Version" value="${app.version}"/>
                <attribute name="Class-Path" value=". RXTXcomm.jar swt.jar log4j-1.2.16.jar"/>
            </manifest>
            <fileset dir="bin"/>
        </jar>
        <copy file="lib/swt/swt-3.7.2-cocoa-macosx/swt.jar" todir="build/macosx/Photoduino Remote.app/Contents/Resources/Java"/>
    	<copy file="lib/log4j-1.2.16.jar" todir="build/macosx/Photoduino Remote.app/Contents/Resources/Java"/>
		<copy file="lib/rxtx/RXTXcomm.jar" todir="build/macosx/Photoduino Remote.app/Contents/Resources/Java"/>
    	<copy file="lib/rxtx/native/librxtxSerial.jnilib" todir="build/macosx/Photoduino Remote.app/Contents/Resources/Java"/> 
    	<copy file="LICENSE.txt" todir="build/macosx/"/>
    </target>
	
	
	<!-- Build windows application -->
	<target name="build_windows_app">
		<delete dir="build/windows/lib"/>
		<mkdir dir="build/windows/lib"/>
	    <jar destfile="build/windows/lib/PhotoduinoRemote.jar">
	        <manifest>
	            <attribute name="Main-Class" value="com.photoduino.remote.AppWindow"/>
	        	<attribute name="Created-By" value="kalanda.com"/>
	        	<attribute name="Implementation-Version" value="${app.version}"/>
	            <attribute name="Class-Path" value=". RXTXcomm.jar swt.jar log4j-1.2.16.jar"/>
	        </manifest>
	        <fileset dir="bin"/>
	    </jar>
		<copy file="lib/swt/swt-3.7.2-win32-win32-x86/swt.jar" todir="build/windows/lib"/>
		<copy file="lib/log4j-1.2.16.jar" todir="build/windows/lib"/>
	    <copy file="lib/rxtx/RXTXcomm.jar" todir="build/windows/lib"/>	    
		<copy file="lib/rxtx/native/rxtxSerial.dll" todir="build/windows/lib"/> 
		<copy file="LICENSE.txt" todir="build/windows/"/>
	</target>
	
	
	<!-- Build Linux32 application -->
	<target name="build_linux32_app">
    
		<delete dir="build/linux32/lib"/>
		<mkdir dir="build/linux32/lib"/>
		<jar destfile="build/linux32/lib/PhotoduinoRemote.jar">
            <manifest>
                <attribute name="Main-Class" value="com.photoduino.remote.AppWindow"/>
            	<attribute name="Created-By" value="kalanda.com"/>
            	<attribute name="Implementation-Version" value="${app.version}"/>
                <attribute name="Class-Path" value=". RXTXcomm.jar swt.jar log4j-1.2.16.jar"/>
            </manifest>
            <fileset dir="bin"/>
        </jar>
		<copy file="lib/swt/swt-3.7.2-gtk-linux-x86/swt.jar" todir="build/linux32/lib"/>
    	<copy file="lib/log4j-1.2.16.jar" todir="build/linux32/lib"/>
    	<copy file="lib/rxtx/native/librxtxSerial.so" todir="build/linux32/lib"/> 
		<copy file="lib/rxtx/RXTXcomm.jar" todir="build/linux32/lib"/>
		<copy file="LICENSE.txt" todir="build/linux32/"/>
    </target>
	
	<!-- Build Linux64 application -->
		<target name="build_linux64_app">
	    
			<delete dir="build/linux64/lib"/>
			<mkdir dir="build/linux64/lib"/>
			<jar destfile="build/linux64/lib/PhotoduinoRemote.jar">
	            <manifest>
	                <attribute name="Main-Class" value="com.photoduino.remote.AppWindow"/>
	            	<attribute name="Created-By" value="kalanda.com"/>
	            	<attribute name="Implementation-Version" value="${app.version}"/>
	                <attribute name="Class-Path" value=". RXTXcomm.jar swt.jar log4j-1.2.16.jar"/>
	            </manifest>
	            <fileset dir="bin"/>
	        </jar>
			<copy file="lib/swt/swt-3.7.2-gtk-linux-x86_64/swt.jar" todir="build/linux64/lib"/>
	    	<copy file="lib/log4j-1.2.16.jar" todir="build/linux64/lib"/>
	    	<copy file="lib/rxtx/native/librxtxSerial64.so" tofile="build/linux64/lib/librxtxSerial.so"/> 
			<copy file="lib/rxtx/RXTXcomm.jar" todir="build/linux64/lib"/>
			<copy file="LICENSE.txt" todir="build/linux64/"/>
	    </target>

	
	
</project>
<project name="launch4j" default="compile" basedir=".">
	<property name="src" location="src" />
	<property name="lib" location="lib" />
	<property name="build" location="build" />
	<property name="jar" location="./${ant.project.name}.jar" />
	<property name="launch4j.dir" location="." />

	<path id="dist.classpath">
		<pathelement path="${build}" />
		<fileset dir="${lib}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<target name="init">
		<tstamp />
		<mkdir dir="${build}" />
	</target>

	<target name="compile" depends="init" description="compile the source">
		<javac srcdir="${src}" destdir="${build}" classpathref="dist.classpath" source="1.4" debug="on" />
		<copy todir="${build}/images">
			<fileset dir="${src}/images">
				<include name="**/*" />
			</fileset>
		</copy>
		<copy todir="${build}">
			<fileset dir="${src}">
				<include name="**/*.properties" />
			</fileset>
		</copy>
	</target>

	<target name="jar" depends="compile" description="create jar">
		<fileset dir="${lib}" id="lib.dist.fileset">
			<include name="**/*.jar" />
		</fileset>
		<pathconvert pathsep=" " property="dist.classpath" refid="lib.dist.fileset">
			<map from="${lib}" to="./lib" />
		</pathconvert>
		<!-- Put everything in ${build} into a jar file -->
		<jar jarfile="${jar}">
			<fileset dir="${build}" excludes="**/messages_es.properties" />
			<manifest>
				<attribute name="Main-Class" value="net.sf.launch4j.Main" />
				<attribute name="Class-Path" value=". ${dist.classpath}" />
			</manifest>
		</jar>
	</target>

	<target name="demo" depends="jar" description="build the demos">
		<ant dir="./demo/ConsoleApp" inheritAll="false" />
		<ant dir="./demo/SimpleApp" inheritAll="false" />
	</target>

	<target name="clean" description="clean up">
		<delete dir="${build}" />
		<delete file="${jar}" />
		<ant dir="./demo/ConsoleApp" target="clean" inheritAll="false" />
		<ant dir="./demo/SimpleApp" target="clean" inheritAll="false" />
	</target>
</project>
<project name="ConsoleApp" default="exe" basedir=".">
	<property name="src" location="src" />
	<property name="lib" location="lib" />
	<property name="build" location="build" />
	<property name="launch4j.dir" location="../.." />

	<path id="dist.classpath">
		<pathelement path="${build}" />
		<fileset dir="${lib}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<target name="init">
		<tstamp />
		<mkdir dir="${build}" />
	</target>

	<target name="compile" depends="init" description="compile the source">
		<javac srcdir="${src}" destdir="${build}" classpathref="dist.classpath" source="1.4" debug="on" />
	</target>

	<target name="jar" depends="compile" description="create the jar">
		<fileset dir="${lib}" id="lib.dist.fileset">
			<include name="**/*.jar" />
		</fileset>
		<pathconvert pathsep=" " property="dist.classpath" refid="lib.dist.fileset">
			<map from="${lib}" to=".\lib" />
		</pathconvert>
		<!-- Put everything in ${build} into a jar file -->
		<jar jarfile="${ant.project.name}.jar">
			<fileset dir="${build}" includes="**/*" />
			<manifest>
				<!-- SET YOUR MAIN CLASS HERE -->
				<attribute name="Main-Class" value="net.sf.launch4j.example.ConsoleApp" />
				<attribute name="Class-Path" value=". ${dist.classpath}" />
			</manifest>
		</jar>
	</target>

	<target name="exe" depends="jar">
		<taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask" classpath="${launch4j.dir}/launch4j.jar
		    :${launch4j.dir}/lib/xstream.jar" />
		<launch4j>
			<config headerType="console" jar="ConsoleApp.jar" outfile="ConsoleApp.exe" errTitle="ConsoleApp" chdir="." customProcName="true" icon="l4j/ConsoleApp.ico">
				<singleInstance mutexName="net.sf.launch4j.example.ConsoleApp" />
				<jre minVersion="1.4.0" />
			</config>
		</launch4j>
	</target>

	<target name="clean" description="clean up">
		<delete dir="${build}" />
		<delete file="${ant.project.name}.jar" />
		<delete file="${ant.project.name}.exe" />
	</target>
</project>
<project name="SimpleApp" default="exe" basedir=".">
	<property name="src" location="src" />
	<property name="lib" location="lib" />
	<property name="build" location="build" />
	<property name="launch4j.dir" location="../.." />

	<path id="dist.classpath">
		<pathelement path="${build}" />
		<fileset dir="${lib}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<target name="init">
		<tstamp />
		<mkdir dir="${build}" />
	</target>

	<target name="compile" depends="init" description="compile the source">
		<javac srcdir="${src}" destdir="${build}" classpathref="dist.classpath" source="1.4" debug="on" />
	</target>

	<target name="jar" depends="compile" description="create the jar">
		<fileset dir="${lib}" id="lib.dist.fileset">
			<include name="**/*.jar" />
		</fileset>
		<pathconvert pathsep=" " property="dist.classpath" refid="lib.dist.fileset">
			<map from="${lib}" to=".\lib" />
		</pathconvert>
		<!-- Put everything in ${build} into a jar file -->
		<jar jarfile="${ant.project.name}.jar">
			<fileset dir="${build}" includes="**/*" />
			<manifest>
				<!-- SET YOUR MAIN CLASS HERE -->
				<attribute name="Main-Class" value="net.sf.launch4j.example.SimpleApp" />
				<attribute name="Class-Path" value=". ${dist.classpath}" />
			</manifest>
		</jar>
	</target>

	<target name="exe" depends="jar">
		<taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask" classpath="${launch4j.dir}/launch4j.jar
		    :${launch4j.dir}/lib/xstream.jar" />
		<launch4j configFile="./l4j/SimpleApp.xml" />
	</target>

	<target name="clean" description="clean up">
		<delete dir="${build}" />
		<delete file="${ant.project.name}.jar" />
		<delete file="${ant.project.name}.exe" />
	</target>
</project>
