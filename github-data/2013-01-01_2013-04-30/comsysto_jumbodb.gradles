defaultTasks 'build'

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'project-reports'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'groovy'


sourceCompatibility = 1.7
targetCompatibility = 1.7

group = 'org.jumbodb.benchmark.generator'
archivesBaseName = 'jumbodb-benchmark-generator'

repositories {
    mavenCentral()
}


configurations {
    // this scope extracts the files and copies it into he same jar file, because ou can just use one jar file in emr
}

dependencies {
    compile "org.codehaus.jackson:jackson-mapper-asl:1.9.12"
    compile "org.springframework:spring-context:$springVersion"
//    compile "org.apache.hadoop:hadoop-core:1.0.3"
    compile 'commons-io:commons-io:2.3'
    compile 'commons-lang:commons-lang:2.5'
    compile 'commons-collections:commons-collections:3.2.1'
    compile 'com.google.guava:guava:13.0'
    compile 'org.xerial.snappy:snappy-java:1.0.5-M4'
    compile project(':commons:data')
    compile project(':commons:util')
//    compile 'net.minidev:json-smart:2.0-RC2'


    testCompile "org.mockito:mockito-core:1.9.5"
    testCompile "org.codehaus.groovy:groovy-all:2.0.8"
    testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
}

mainClassName = "org.jumbodb.benchmark.generator.job.DataDeliveryGenerator"

eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = false
    }
}


idea {
    module {
        downloadSources = true
    }
}
defaultTasks 'build'

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'project-reports'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'groovy'

sourceCompatibility = 1.7
targetCompatibility = 1.7

group = 'org.jumbodb.benchmark.suite'
archivesBaseName = 'jumbodb-benchmark-suite'

repositories {
    mavenCentral()
}


configurations {
    // this scope extracts the files and copies it into he same jar file, because ou can just use one jar file in emr
}

dependencies {
    compile "org.codehaus.jackson:jackson-mapper-asl:1.9.12"
//    compile "org.apache.hadoop:hadoop-core:1.0.3"
    compile 'commons-io:commons-io:2.3'
    compile 'commons-lang:commons-lang:2.5'
    compile 'commons-collections:commons-collections:3.2.1'
    compile 'com.google.guava:guava:13.0'
    compile 'org.xerial.snappy:snappy-java:1.0.5-M4'
//    compile 'net.minidev:json-smart:2.0-RC2'
    compile project(':commons:util')
    compile project(':commons:data')


    testCompile "org.codehaus.groovy:groovy-all:2.0.8"
    testCompile "junit:junit:4.10"
    testCompile "org.mockito:mockito-core:1.9.0"
    testCompile 'cglib:cglib:2.2.2'
    testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
}

mainClassName = "org.jumbodb.benchmark.suite.BenchmarkSuiteRunner"

eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = false
    }
}

idea {
    module {
        downloadSources = true
    }
}group = 'org.jumbodb'

repositories {
    mavenCentral()
    maven{ url "http://repository-comsysto.forge.cloudbees.com/release" }
    maven{ url "http://repository-comsysto.forge.cloudbees.com/snapshot/" }
    maven{ url "http://maven.springframework.org/release" }
    maven{ url "http://maven.springframework.org/milestone" }
}

allprojects {
    apply plugin: 'idea'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'project-reports'
    apply plugin: 'eclipse'
  
    group = 'org.jumbodb'
    version = '0.0.21-SNAPSHOT'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    repositories {
        mavenCentral()
    }
}

//def findbugsProjects() {
//    subprojects.findAll{ project ->
//        !['test', 'evaluation', 'integration', 'testdata'].contains(project.name)
//    }
//}
//
//configure(findbugsProjects()){
//    apply plugin: 'findbugs'
//
//    findbugs {
//        ignoreFailures = true
//    }
//}


idea {
    module {
        downloadSources = true
    }
}

// generate gradle bootstrapping
// run gradle createWrapper
task createWrapper(type: Wrapper) {
  gradleVersion = '1.8'
}//import org.gradle.api.tasks.application.CreateStartScripts

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'

sourceCompatibility = 1.7
targetCompatibility = 1.7

archivesBaseName = 'jumbodb-starter'
applicationName = 'jumbodb'

sourceSets {
    main {
        resources {
            srcDir 'src/main/resources'
            srcDir 'src/main/java'
        }
    }
    test {
        resources {
            srcDir 'src/test/resources'
            srcDir 'src/test/java'
        }
    }
}

mainClassName = "org.jumbodb.starter.JumboDBStarter"
applicationDefaultJvmArgs = ["-Xmx2G"]

dependencies {
//    compile 'javax.servlet:servlet-api:2.5'
    compile 'commons-lang:commons-lang:2.6'
    compile "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}"
    compile "org.apache.tomcat.embed:tomcat-embed-logging-log4j:${tomcatVersion}"
    compile "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
    compile "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}"
    compile "org.eclipse.jdt.core.compiler:ecj:3.6"
}

applicationDistribution.from('../README.md'){
    into "/"
}

applicationDistribution.from('../database/LICENSE'){
    into "/"
}

def retrieveWarFileName() {
    def p = project(':database')
    'jumbodb-' + p.version + '.war'
}

def retrieveImportFileFileName() {
    def p = project(':importer:hadoop-json')
    p.applicationName + '-' + p.version
}

def retrieveJarFileName() {
    archivesBaseName + '-' + version + '.jar'
}

def retrieveTargetWarPath() {
    '/war/' + retrieveWarFileName()
}

def retrieveTargetJarPath() {
    '/lib/' + retrieveJarFileName()
}

def locateWarPath() {
    def p = project(':database')
    new File(p.libsDir.path + '/' + retrieveWarFileName())
}

def locateImporterPath() {
    def p = project(':importer:hadoop-json')
    new File(p.buildDir.path + '/distributions/' + retrieveImportFileFileName() + '.zip')
}

def locateHadoopJarPath() {
    def p = project(':importer:hadoop-json')
    p.libsDir
}


task copyWar(dependsOn: ':database:war') {
    doLast {
        def path = locateWarPath()
        println("Copying WAR File " + path)
        applicationDistribution.from(path) {
            into "war"
        }
    }
}
jar.dependsOn copyWar

task copyImporter(dependsOn: ':importer:hadoop-json:distZip') {
    doLast {
        def path = locateImporterPath()
        println("Copying Importer " + path)
        def zipPath = zipTree(path)
        def extractionPath = buildDir.path + '/tmp.extracted/';
        copy {
            from zipPath
            into extractionPath
        }

        applicationDistribution.from(extractionPath + retrieveImportFileFileName() + "/") {
            into 'tools/import-cli/'
        }

        applicationDistribution.from(locateHadoopJarPath()) {
            into 'tools/import-hadoop/'
        }
    }
}
jar.dependsOn copyImporter

jar {
    manifest {
        attributes("warPath": retrieveTargetWarPath())
        attributes("jarPath": retrieveTargetJarPath())
    }
}

eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = false
    }
}


idea {
    module {
        downloadSources = true
    }
}defaultTasks 'build'

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'project-reports'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: "groovy"

sourceCompatibility = 1.7
targetCompatibility = 1.7

group = 'org.jumbodb.common.data'
archivesBaseName = 'jumbodb-data'

repositories {
    mavenCentral()
}


configurations {
    compile.exclude group: "commons-logging", module: "commons-logging"
    compile.exclude group: "log4j", module: "log4j"
    // this scope extracts the files and copies it into he same jar file, because ou can just use one jar file in emr
}

dependencies {
    compile "org.codehaus.jackson:jackson-mapper-asl:1.9.12"
    compile 'commons-io:commons-io:2.3'
    compile 'commons-lang:commons-lang:2.5'
    compile 'commons-collections:commons-collections:3.2.1'
    compile 'com.google.guava:guava:13.0'
    compile 'org.xerial.snappy:snappy-java:1.0.5-M4'
    compile 'org.slf4j:slf4j-api:1.7.5'
    compile 'org.slf4j:jcl-over-slf4j:1.7.5'
    compile 'org.slf4j:log4j-over-slf4j:1.7.5'
    compile 'commons-codec:commons-codec:1.8'
//    testCompile "junit:junit:4.10"
    testCompile "org.mockito:mockito-core:1.9.5"
    testCompile "org.codehaus.groovy:groovy-all:2.0.8"
    testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
}

task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
    from javadoc.destinationDir
    classifier = 'javadoc'
}
task packageSources(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}
artifacts {
    archives(packageJavadoc) {
        type = 'javadoc'
        extension = 'jar'
    }
    archives(packageSources)
}

eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = false
    }
}

idea {
    module {
        downloadSources = true
    }
}defaultTasks 'build'

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'project-reports'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: "groovy"

sourceCompatibility = 1.7
targetCompatibility = 1.7

group = 'org.jumbodb.common.geo'
archivesBaseName = 'jumbodb-geo'

repositories {
    mavenCentral()
}


configurations {
    // this scope extracts the files and copies it into he same jar file, because ou can just use one jar file in emr
    deployerJars
}

dependencies {
    deployerJars ("org.apache.maven.wagon:wagon-webdav:1.0-beta-2")
    testCompile "org.mockito:mockito-core:1.9.5"
    testCompile "org.codehaus.groovy:groovy-all:2.0.8"
    testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
}

task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
    from javadoc.destinationDir
    classifier = 'javadoc'
}
task packageSources(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}
artifacts {
    archives(packageJavadoc) {
        type = 'javadoc'
        extension = 'jar'
    }
    archives(packageSources)
}


uploadArchives {
    repositories {
        mavenDeployer {
            configuration = configurations.deployerJars
            snapshotRepository(id: 'cloudbees', url: uri("dav:https://repository-${project.cloudbeesAccountName}.forge.cloudbees.com/snapshot/")) {
                authentication(userName: project.cloudbeesUsername, password: project.cloudbeesPassword)
            }
            repository(id: 'cloudbees', url: uri("dav:https://repository-${project.cloudbeesAccountName}.forge.cloudbees.com/release/")) {
                authentication(userName: project.cloudbeesUsername, password: project.cloudbeesPassword)
            }

            pom.project {
                name 'jumboDB commons geo'
                packaging 'jar'
                description 'jumboDB commons geo'
                url 'http://www.jumbodb.org'
                inceptionYear '2013'

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'chufe'
                        name 'Carsten Hufe'
                        email 'carsten.hufe@comsysto.com    '
                        roles {
                            role 'Developer'
                        }
                    }
                }
            }
        }
    }
}

eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = false
    }
}

idea {
    module {
        downloadSources = true
    }
}defaultTasks 'build'

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'project-reports'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: "groovy"


sourceCompatibility = 1.7
targetCompatibility = 1.7

group = 'org.jumbodb.common.query'
archivesBaseName = 'jumbodb-query'

repositories {
    mavenCentral()
}


configurations {
    deployerJars
}

dependencies {
    deployerJars ("org.apache.maven.wagon:wagon-webdav:1.0-beta-2")
    compile "org.codehaus.jackson:jackson-mapper-asl:1.9.12"
    testCompile "org.mockito:mockito-core:1.9.5"
    testCompile "org.codehaus.groovy:groovy-all:2.0.8"
    testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
}

task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
    from javadoc.destinationDir
    classifier = 'javadoc'
}
task packageSources(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}
artifacts {
    archives(packageJavadoc) {
        type = 'javadoc'
        extension = 'jar'
    }
    archives(packageSources)
}


uploadArchives {
    repositories {
        mavenDeployer {
            configuration = configurations.deployerJars
            snapshotRepository(id: 'cloudbees', url: uri("dav:https://repository-${project.cloudbeesAccountName}.forge.cloudbees.com/snapshot/")) {
                authentication(userName: project.cloudbeesUsername, password: project.cloudbeesPassword)
            }
            repository(id: 'cloudbees', url: uri("dav:https://repository-${project.cloudbeesAccountName}.forge.cloudbees.com/release/")) {
                authentication(userName: project.cloudbeesUsername, password: project.cloudbeesPassword)
            }

            pom.project {
                name 'jumboDB commons query'
                packaging 'jar'
                description 'jumboDB commons query'
                url 'http://www.jumbodb.org'
                inceptionYear '2013'

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'chufe'
                        name 'Carsten Hufe'
                        email 'carsten.hufe@comsysto.com    '
                        roles {
                            role 'Developer'
                        }
                    }
                }
            }
        }
    }
}

eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = false
    }
}

idea {
    module {
        downloadSources = true
    }
}defaultTasks 'build'

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'project-reports'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: "groovy"

sourceCompatibility = 1.7
targetCompatibility = 1.7

group = 'org.jumbodb.common.util'
archivesBaseName = 'jumbodb-util'

repositories {
    mavenCentral()
}


configurations {
    compile.exclude group: "commons-logging", module: "commons-logging"
    compile.exclude group: "log4j", module: "log4j"
    // this scope extracts the files and copies it into he same jar file, because ou can just use one jar file in emr
}

dependencies {
    compile "org.codehaus.jackson:jackson-mapper-asl:1.9.12"
    compile 'commons-io:commons-io:2.3'
    compile 'commons-lang:commons-lang:2.5'
    compile 'commons-collections:commons-collections:3.2.1'
    compile 'com.google.guava:guava:13.0'
    compile 'org.xerial.snappy:snappy-java:1.0.5-M4'
    compile 'org.slf4j:slf4j-api:1.7.5'
    compile 'org.slf4j:jcl-over-slf4j:1.7.5'
    compile 'org.slf4j:log4j-over-slf4j:1.7.5'
//    testCompile "junit:junit:4.10"
    testCompile "org.codehaus.groovy:groovy-all:2.0.8"
    testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
}

task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
    from javadoc.destinationDir
    classifier = 'javadoc'
}
task packageSources(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}
artifacts {
    archives(packageJavadoc) {
        type = 'javadoc'
        extension = 'jar'
    }
    archives(packageSources)
}
idea {
    module {
        downloadSources = true
    }
}subprojects {
    group = 'org.jumbodb.connector'
}defaultTasks 'build'

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: "groovy"

archivesBaseName = 'jumbodb-hadoop-connector'

configurations {
    deployerJars
}

sourceSets {
    main {
        resources {
            srcDir 'src/main/resources'
            srcDir 'src/main/java'
        }
    }
    test {
        resources {
            srcDir 'src/test/resources'
            srcDir 'src/test/java'
            srcDir 'src/test/groovy'
        }
    }
}

dependencies {
    deployerJars ("org.apache.maven.wagon:wagon-webdav:1.0-beta-2")
    compile project(':connectors:jumbodb-java-connector')
    compile project(':commons:query')
    compile project(':commons:geo')

    compile ("org.apache.hadoop:hadoop-core:1.0.3") {
        exclude group: 'org.mortbay.jetty'
        exclude group: 'tomcat'
    }
    compile 'commons-io:commons-io:2.3'
    testCompile "junit:junit:4.10"
    testCompile "org.mockito:mockito-core:1.9.5"
    testCompile "org.codehaus.groovy:groovy-all:2.0.8"
    testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
}

task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
    from javadoc.destinationDir
    classifier = 'javadoc'
}
task packageSources(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}
artifacts {
    archives(packageJavadoc) {
        type = 'javadoc'
        extension = 'jar'
    }
    archives(packageSources)
}

uploadArchives {
    repositories {
        mavenDeployer {
            configuration = configurations.deployerJars
            snapshotRepository(id: 'cloudbees', url: uri("dav:https://repository-${project.cloudbeesAccountName}.forge.cloudbees.com/snapshot/")) {
                authentication(userName: project.cloudbeesUsername, password: project.cloudbeesPassword)
            }
            repository(id: 'cloudbees', url: uri("dav:https://repository-${project.cloudbeesAccountName}.forge.cloudbees.com/release/")) {
                authentication(userName: project.cloudbeesUsername, password: project.cloudbeesPassword)
            }

            pom.project {
                name 'jumboDB hadoop connector'
                packaging 'jar'
                description 'jumboDB hadoop connector'
                url 'http://www.jumbodb.org'
                inceptionYear '2013'

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'chufe'
                        name 'Carsten Hufe'
                        email 'carsten.hufe@comsysto.com    '
                        roles {
                            role 'Developer'
                        }
                    }
                }
            }
        }
    }
}

eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = false
    }
}


idea {
    module {
        downloadSources = true
    }
}apply plugin: 'java'
apply plugin: 'maven'
apply plugin: "groovy"

sourceCompatibility = 1.7
targetCompatibility = 1.7

archivesBaseName = 'jumbodb-java-connector'

sourceSets {
    main {
        resources {
            srcDir 'src/main/resources'
            srcDir 'src/main/java'
        }
    }
    test {
        resources {
            srcDir 'src/test/resources'
            srcDir 'src/test/java'
            srcDir 'src/test/groovy'
        }
    }
}


configurations {
    deployerJars
}

dependencies {
    deployerJars ("org.apache.maven.wagon:wagon-webdav:1.0-beta-2")
    compile project(':commons:query')
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.7'
    compile 'commons-lang:commons-lang:2.5'
    compile 'commons-io:commons-io:2.3'
    compile 'commons-collections:commons-collections:3.2.1'
    compile 'com.google.guava:guava:13.0'
    compile 'org.xerial.snappy:snappy-java:1.0.5-M4'
    compile 'org.slf4j:slf4j-api:1.7.5'
    testCompile "org.mockito:mockito-core:1.9.5"
    testCompile "org.codehaus.groovy:groovy-all:2.0.8"
    testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
}


task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
    from javadoc.destinationDir
    classifier = 'javadoc'
}
task packageSources(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}
artifacts {
    archives(packageJavadoc) {
        type = 'javadoc'
        extension = 'jar'
    }
    archives(packageSources)
}


uploadArchives {
    repositories {
        mavenDeployer {
            configuration = configurations.deployerJars
            snapshotRepository(id: 'cloudbees', url: uri("dav:https://repository-${project.cloudbeesAccountName}.forge.cloudbees.com/snapshot/")) {
                authentication(userName: project.cloudbeesUsername, password: project.cloudbeesPassword)
            }
            repository(id: 'cloudbees', url: uri("dav:https://repository-${project.cloudbeesAccountName}.forge.cloudbees.com/release/")) {
                authentication(userName: project.cloudbeesUsername, password: project.cloudbeesPassword)
            }

            pom.project {
                name 'jumboDB java connector'
                packaging 'jar'
                description 'jumboDB java connector'
                url 'http://www.jumbodb.org'
                inceptionYear '2013'

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'chufe'
                        name 'Carsten Hufe'
                        email 'carsten.hufe@comsysto.com    '
                        roles {
                            role 'Developer'
                        }
                    }
                }
            }
        }
    }
}

// https://github.com/ari/gradle-release-plugin/blob/master/build.gradle


eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = false
    }
}

idea {
    module {
        downloadSources = true
    }
}
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'tomcat'
apply plugin: 'cargo'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'
apply plugin: "groovy"


sourceCompatibility = 1.7
targetCompatibility = 1.7

archivesBaseName = 'jumbodb'

sourceSets {
    main {
        resources {
            srcDir 'src/main/resources'
            srcDir 'src/main/java'
        }
    }
    test {
        resources {
            srcDir 'src/test/resources'
            srcDir 'src/test/java'
            srcDir 'src/test/groovy'
        }
    }
}

configurations {
    compile.exclude group: "commons-logging", module: "commons-logging"
    compile.exclude group: "log4j", module: "log4j"
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:0.9.9'
        classpath 'org.gradle.api.plugins:gradle-cargo-plugin:0.6.1'
    }
}

dependencies {
    compile "org.springframework:spring-context:$springVersion"
    compile "org.springframework:spring-context-support:$springVersion"  // ehcache support
    compile "org.springframework:spring-test:$springVersion"
    compile "org.springframework:spring-web:$springVersion"
    compile "org.springframework:spring-webmvc:$springVersion"
    compile "org.springframework:spring-test:$springVersion"
    compile "org.springframework:spring-jmx:2.0.8"
    compile 'org.springframework:spring-mock:2.0.8'
    compile 'cglib:cglib:2.2.2'
    compile ('net.sf.ehcache:ehcache:2.7.2') {
        exclude module: 'ehcache-terracotta'
    }

    compile 'commons-io:commons-io:2.4'
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.12'
    compile 'commons-lang:commons-lang:2.6'
    compile 'commons-collections:commons-collections:3.2.1'
    compile 'com.google.guava:guava:13.0'
    compile 'joda-time:joda-time:2.1'
    compile 'org.freemarker:freemarker:2.3.19'
    compile 'commons-lang:commons-lang:2.6'
    compile "org.xerial.snappy:snappy-java:1.0.5-M4"
    compile "net.minidev:json-smart:2.0-RC2"
    compile 'org.slf4j:slf4j-api:1.7.5'
    compile 'org.slf4j:jcl-over-slf4j:1.7.5'
    compile 'org.slf4j:log4j-over-slf4j:1.7.5'
    compile 'commons-codec:commons-codec:1.8'
//    compile 'org.slf4j:slf4j-jdk14:1.7.5'
//    compile 'org.slf4j:slf4j-log4j12:1.7.5'
    compile 'ch.qos.logback:logback-classic:1.0.13'
    compile 'javax.servlet:jstl:1.2'
    compile 'commons-fileupload:commons-fileupload:1.2.2'
    compile project(':commons:data')
    compile project(':commons:query')
    compile project(':commons:geo')
    compile project(':connectors:jumbodb-java-connector')

//    providedCompile 'javax.servlet:servlet-api:2.5'

    compile "org.webjars:jquery:1.9.1"
    compile "org.webjars:jquery-ui:1.9.2"
    compile "org.webjars:bootstrap:3.0.2"
    compile 'org.webjars:requirejs:2.1.8'
    compile "org.webjars:angularjs:1.1.3"
    compile 'org.webjars:angular-ui-bootstrap:0.6.0-1'


    testCompile "org.codehaus.groovy:groovy-all:2.0.8"
    testCompile "org.spockframework:spock-core:0.7-groovy-2.0"

    testCompile "org.mockito:mockito-core:1.9.5"

//    providedCompile 'javax.servlet:jsp-api:2.0'
    providedCompile "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}"
//    providedCompile "org.apache.tomcat.embed:tomcat-embed-logging-log4j:${tomcatVersion}"
    providedCompile "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
    providedCompile "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}"
    providedCompile "org.eclipse.jdt.core.compiler:ecj:3.6"

    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}"
    tomcat "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
    tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
        exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
    }

    cargo "org.codehaus.cargo:cargo-core-uberjar:$cargoVersion"
    cargo "org.codehaus.cargo:cargo-ant:$cargoVersion"

}

tomcatRun {
    httpPort = 9000
    httpsPort = 9443
    enableSSL = false
}

cargo {
    containerId = 'tomcat7x'
    port = Integer.valueOf(jumboCargoPort)

    deployable {
        context = jumboCargoContext
    }

    remote {
        hostname = jumboCargoHostname
        username = jumboCargoUsername
        password = jumboCargoPassword
    }
}

eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = false
    }
}

idea {
    module {
        downloadSources = true
    }
}defaultTasks 'build'

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'project-reports'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: "groovy"


sourceCompatibility = 1.7
targetCompatibility = 1.7

group = 'org.jumbodb.importer'
archivesBaseName = 'hadoop-json'

repositories {
    mavenCentral()
}


configurations {
    // this scope extracts the files and copies it into he same jar file, because ou can just use one jar file in emr
    bundle {
        transitive = false
    }
}
sourceSets {
    main {
        resources {
            srcDir 'src/main/resources'
            srcDir 'src/main/java'
        }
    }
    test {
        resources {
            srcDir 'src/test/resources'
            srcDir 'src/test/java'
            srcDir 'src/test/groovy'
        }
    }
}

dependencies {
    compile project(':connectors:jumbodb-hadoop-connector')

    bundle project(':connectors:jumbodb-hadoop-connector')
    bundle project(':connectors:jumbodb-java-connector')
    bundle project(':commons:query')
    bundle project(':commons:geo')
    bundle 'org.xerial.snappy:snappy-java:1.0.5-M4'
    bundle 'commons-io:commons-io:2.3'
    testCompile "org.codehaus.groovy:groovy-all:1.8.6"
    testCompile "org.spockframework:spock-core:0.6-groovy-1.8"
}


mainClassName = "org.jumbodb.importer.hadoop.json.JsonImporterJob"
applicationDefaultJvmArgs = ["-Xmx2G"]
applicationName = "jumboimport"

jar {
    from configurations.bundle.collect {
        it.isDirectory() ? it : zipTree(it)
    }
    manifest {
        attributes("Main-Class": "org.jumbodb.importer.hadoop.json.JsonImporterJob")
    }
}

eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = false
    }
}


idea {
    module {
        downloadSources = true
    }
}
defaultTasks 'build'

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'project-reports'
apply plugin: 'eclipse'

sourceCompatibility = 1.7
targetCompatibility = 1.7

group = 'org.jumbodb.test.evaluation'
archivesBaseName = 'jumbodb-evalution'

repositories {
    mavenCentral()
}


configurations {
    // this scope extracts the files and copies it into he same jar file, because ou can just use one jar file in emr
    bundle {
        transitive = false
    }
}
sourceSets {
    main {
        resources {
            srcDir 'src/main/resources'
            srcDir 'src/main/java'
        }
    }
    test {
        resources {
            srcDir 'src/test/resources'
            srcDir 'src/test/java'
        }
    }
}

dependencies {
    compile 'com.esotericsoftware.kryo:kryo:2.20'
    compile "org.codehaus.jackson:jackson-mapper-asl:1.9.12"
    compile "org.apache.hadoop:hadoop-core:1.0.3"
    compile 'com.google.guava:guava:r09'
    compile 'commons-io:commons-io:2.3'
    compile 'commons-lang:commons-lang:2.5'
    compile 'commons-collections:commons-collections:3.2.1'
    compile 'com.google.guava:guava:13.0'
    compile 'org.xerial.snappy:snappy-java:1.0.5-M4'
    compile 'org.msgpack:msgpack:0.6.7'
    compile 'net.minidev:json-smart:2.0-RC2'
    compile project(':connectors:jumbodb-java-connector')

//    compile 'de.undercouch:bson4jackson:2.0.0'
    testCompile "junit:junit:4.10"
    testCompile "org.mockito:mockito-core:1.9.0"
}


eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = false
    }
}
defaultTasks 'build'

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'project-reports'
apply plugin: 'eclipse'

sourceCompatibility = 1.7
targetCompatibility = 1.7

group = 'org.jumbodb.test.integration'
archivesBaseName = 'jumbodb-integration'

repositories {
    mavenCentral()
}


configurations {
    // this scope extracts the files and copies it into he same jar file, because ou can just use one jar file in emr
    bundle {
        transitive = false
    }
}
sourceSets {
    main {
        resources {
            srcDir 'src/main/resources'
            srcDir 'src/main/java'
        }
    }
    test {
        resources {
            srcDir 'src/test/resources'
            srcDir 'src/test/java'
        }
    }
}

dependencies {
    testCompile "junit:junit:4.10"
    testCompile "org.mockito:mockito-core:1.9.0"
}


eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = false
    }
}
defaultTasks 'build'

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'project-reports'
apply plugin: 'eclipse'

sourceCompatibility = 1.7
targetCompatibility = 1.7

group = 'org.jumbodb.test.testdata'
archivesBaseName = 'jumbodb-testdata'

repositories {
    mavenCentral()
}


configurations {
    // this scope extracts the files and copies it into he same jar file, because ou can just use one jar file in emr
    bundle {
        transitive = false
    }
}
sourceSets {
    main {
        resources {
            srcDir 'src/main/resources'
            srcDir 'src/main/java'
        }
    }
    test {
        resources {
            srcDir 'src/test/resources'
            srcDir 'src/test/java'
        }
    }
}

dependencies {
    compile 'com.esotericsoftware.kryo:kryo:2.20'
    compile "org.codehaus.jackson:jackson-mapper-asl:1.9.12"
    compile "org.apache.hadoop:hadoop-core:1.0.3"
    compile 'com.google.guava:guava:r09'
    compile 'commons-io:commons-io:2.3'
    compile 'commons-lang:commons-lang:2.5'
    compile 'commons-collections:commons-collections:3.2.1'
    compile 'com.google.guava:guava:13.0'
    compile 'org.xerial.snappy:snappy-java:1.0.5-M4'
    compile 'org.msgpack:msgpack:0.6.7'
    compile 'net.minidev:json-smart:2.0-RC2'
//    compile 'de.undercouch:bson4jackson:2.0.0'
    testCompile "junit:junit:4.10"
    testCompile "org.mockito:mockito-core:1.9.0"
}



eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = false
    }
}
