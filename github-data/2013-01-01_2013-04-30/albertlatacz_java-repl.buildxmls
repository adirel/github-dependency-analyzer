<?xml version="1.0" encoding="UTF-8"?>
<project name="javarepl" default="build">
    <property environment="env"/>

    <condition property="build.number" value="${env.JAVAREPL_BUILD_NUMBER}" else="dev.build">
        <isset property="env.JAVAREPL_BUILD_NUMBER"/>
    </condition>

    <property name="build" value="${basedir}/build"/>
    <property name="artifacts" value="${build}/artifacts"/>
    <property name="reports" value="${artifacts}/reports"/>
    <property name="src" value="${basedir}/src"/>
    <property name="test" value="${basedir}/test"/>
    <property name="release.version" value="${build.number}"/>
    <property name="plugin.src" value="${basedir}/intellij-plugin/src"/>
    <property name="release.install.script" value="ec2-install.sh"/>
    <property name="release.install.script.path" value="${basedir}/bin/${release.install.script}"/>
    <property name="release.plugin.jar" value="${ant.project.name}-${release.version}-intellij.jar"/>
    <property name="release.plugin.zip" value="${ant.project.name}-${release.version}-intellij.zip"/>
    <property name="release.name" value="${ant.project.name}-${release.version}"/>
    <property name="release.jar" value="${release.name}.jar"/>
    <property name="release.jar.path" value="${artifacts}/${release.jar}"/>
    <property name="release.pom" value="${release.name}.pom"/>
    <property name="release.pom.path" value="${artifacts}/${release.pom}"/>
    <property name="release.manifest" value="MANIFEST.MF"/>
    <property name="release.src" value="${release.name}-sources.jar"/>
    <property name="release.src.path" value="${artifacts}/${release.src}"/>
    <property name="release.manifest.path" value="${artifacts}/${release.manifest}"/>
    <property name="release.plugin.jar.path" value="${artifacts}/${release.plugin.jar}"/>
    <property name="release.plugin.zip.path" value="${artifacts}/${release.plugin.zip}"/>

    <property name="s3.repo.path"
              value="s3://albertlatacz.published/repo/${ant.project.name}/${ant.project.name}/${release.version}"/>
    <property name="s3.download.path" value="s3://albertlatacz.published/${ant.project.name}"/>

    <property name="tests.jar" value="${release.name}-tests.jar"/>
    <property name="tests.src" value="${release.name}-test-sources.jar"/>
    <property name="tests.jar.path" value="${artifacts}/${tests.jar}"/>

    <property name="build.dependencies.dir" value="lib/build"/>
    <property name="runtime.dependencies.dir" value="lib/runtime"/>
    <property name="packaged.dependencies.dir" value="lib/packaged"/>
    <property name="optional.dependencies.dir" value="lib/optional"/>
    <property name="manual.dependencies.dir" value="lib/manual"/>

    <import file="${build}/macros.xml"/>
    <import file="${build}/shavenmaven.xml"/>

    <path id="all.dependancies">
        <fileset dir="${build.dependencies.dir}" includes="**/*.jar"/>
        <fileset dir="${runtime.dependencies.dir}" includes="**/*.jar"/>
        <fileset dir="${packaged.dependencies.dir}" includes="**/*.jar"/>
        <fileset dir="${optional.dependencies.dir}" includes="**/*.jar"/>
        <fileset dir="${manual.dependencies.dir}" includes="**/*.jar"/>
    </path>

    <path id="all.jars">
        <path refid="all.dependancies"/>
        <path path="${release.jar.path}"/>
        <path path="${tests.jar.path}"/>
    </path>

    <target name="update" description="Update library dependencies">
        <!--<install version="57"/>-->
        <parallel>
            <update dependencies="build/build.dependencies"
                    directory="${build.dependencies.dir}"/>
            <update dependencies="build/runtime.dependencies"
                    directory="${runtime.dependencies.dir}"/>
            <update dependencies="build/packaged.dependencies"
                    directory="${packaged.dependencies.dir}"/>
            <update dependencies="build/optional.dependencies"
                    directory="${optional.dependencies.dir}"/>
        </parallel>
    </target>

    <target name="clean" description="cleanup all">
        <delete dir="${artifacts}"/>
    </target>

    <target name="plugin">
        <copy file="${plugin.src}/META-INF/plugin.xml" tofile="${artifacts}/plugin.xml.original"/>
        <replace file="${plugin.src}/META-INF/plugin.xml" token="dev.build" value="${build.number}"/>

        <compile.and.jar src="${plugin.src}" jar="${release.plugin.jar.path}" classpathref="all.jars"
                         version="${release.version}"/>

        <move file="${artifacts}/plugin.xml.original" tofile="${plugin.src}/META-INF/plugin.xml"/>

        <zip destfile="${release.plugin.zip.path}">
            <zipfileset file="${release.jar.path}" prefix="java-repl/lib"/>
            <zipfileset file="${release.plugin.jar.path}" prefix="java-repl/lib"/>
        </zip>
    </target>

    <target name="compile">
        <compile.and.jar src="${src}" jar="${release.jar.path}" classpathref="all.dependancies"
                         version="${release.version}"/>

        <compile.and.jar src="${test}" jar="${tests.jar.path}" classpathref="all.jars" version="${release.version}"/>

        <antcall target="plugin"/>
    </target>

    <target name="test">
        <test jar="${tests.jar.path}" classpathref="all.jars" reports="${reports}"/>
    </target>


    <target name="package">
        <mkdir dir="${artifacts}"/>

        <zip destfile="${artifacts}/${release.src}" basedir="src"/>

        <zip destfile="${artifacts}/${tests.src}" basedir="test"/>

        <exec executable="git" output="${artifacts}/git.properties">
            <arg line="log -1 --pretty=format:summary:%s%nchangeset:%H%nuser:%cn"/>
        </exec>
        <property file="${artifacts}/git.properties" prefix="git"/>

        <generate.pom artifact.uri="mvn:${ant.project.name}:${ant.project.name}:jar:${release.version}"
                      dependencies="build/runtime.dependencies"
                      directory="${artifacts}"/>
    </target>

    <target name="embed">
        <embed.libs jar="${release.jar.path}"/>
    </target>

    <target name="deploy" if="${deploy}">
        <property name="s3.config" value="~/.s3cfg"/>

        <echo file="${s3.config}">[default]
            access_key = ${env.AWS_KEY}
            secret_key = ${env.AWS_SECRET}
        </echo>

        <deploy-to-s3
                config="${s3.config}"
                source="${release.plugin.zip.path}"
                destination="${s3.download.path}/javarepl-intellij.zip"/>

        <deploy-to-s3
                config="${s3.config}"
                source="${release.jar.path}"
                destination="${s3.download.path}/javarepl.jar"/>

        <deploy-to-s3
                config="${s3.config}"
                source="${release.install.script.path}"
                destination="${s3.download.path}/${release.install.script}"/>

        <deploy-to-s3-maven-repository
                config="${s3.config}"
                source="${release.jar.path}"
                destination="${s3.repo.path}/${release.jar}"/>

        <deploy-to-s3-maven-repository
                config="${s3.config}"
                source="${release.src.path}"
                destination="${s3.repo.path}/${release.src}"/>

        <deploy-to-s3-maven-repository
                config="${s3.config}"
                source="${release.pom.path}"
                destination="${s3.repo.path}/${release.pom}"/>

        <deploy-to-s3-maven-repository
                config="${s3.config}"
                source="${release.plugin.zip.path}"
                destination="${s3.repo.path}/${release.plugin.zip}"/>

        <delete file="${s3.config}" quiet="true"/>
    </target>


    <target name="build" description="build all">
        <parallel>
            <antcall target="update"/>
            <antcall target="clean"/>
        </parallel>
        <antcall target="compile"/>
        <parallel>
            <antcall target="test"/>
            <antcall target="package"/>
        </parallel>

        <antcall target="embed"/>
        <antcall target="plugin"/>
        <antcall target="deploy"/>
    </target>

    <target name="fast" description="build all">
        <parallel>
            <antcall target="update"/>
            <antcall target="clean"/>
        </parallel>
        <antcall target="compile"/>
        <parallel>
            <antcall target="package"/>
        </parallel>

        <antcall target="embed"/>
    </target>

</project>
