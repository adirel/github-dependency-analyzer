<project name="GWT" default="dist" basedir=".">
  <property name="gwt.root" location="."/>
  <property name="project.tail" value=""/>
  <import file="${gwt.root}/common.ant.xml"/>

  <!-- "build" is the default when subprojects are directly targetted  -->
  <property name="target" value="build"/>
  <property name="emma.merged.out" value="${project.build}/emma-coverage"/>

  <!--
     Convenience for the lateral calls we make.  Use gwt.ant to
     descend into another directory, and this to call in the same build.xml.
     NOTE THE USE OF $TARGET, here and in common's gwt.ant.  This has the
     effect of dividing rules into subdirectory rules (using gwt.ant and
     sensitive to $target) and action rules (using call-subproject and
     setting $target)... but it is Bad for a subdirectory rule to depend
     on another one, as they are both sensitive to $target, but you probably
     mean that subdirB needed subdirA to be _built_, not $target'ed (tested,
     etc.)

     In other words, DO NOT USE DEPENDS=... IN A TARGET WITH GWT.ANT.
    -->
  <macrodef name="call-subproject">
    <attribute name="subproject"/>
    <attribute name="subtarget"/>
    <sequential>
      <antcall target="@{subproject}">
        <param name="target" value="@{subtarget}"/>
      </antcall>
    </sequential>
  </macrodef>

  <property name="gwt.apicheck.config"
            location="tools/api-checker/config/gwt26_27userApi.conf"/>
  <property name="gwt.apicheck.referencelibs"
            value="${gwt.tools}/api-checker-reference/2.6.0/gwt-dev-modified.jar:${gwt.tools}/api-checker-reference/2.6.0/gwt-user-modified.jar"/>

  <target name="buildonly"
          description="[action] Minimal one-platform devel build, without distro packaging">
    <call-subproject subproject="dev" subtarget="build"/>
    <call-subproject subproject="codeserver" subtarget="build"/>
    <call-subproject subproject="user" subtarget="build"/>
    <call-subproject subproject="requestfactory" subtarget="build"/>
    <call-subproject subproject="servlet" subtarget="build"/>
    <call-subproject subproject="jni" subtarget="build"/>
  </target>

  <target name="dist" depends="build, doc" description="[action] Make all the distributions">
    <gwt.ant dir="distro-source"/>
  </target>

  <target name="dist-dev" depends="buildonly"
          description="[action] Make this platform's distribution, minus doc and samples">
    <gwt.ant dir="distro-source" target="build"/>
  </target>

  <target name="dev" description="[subdir] Builds (or runs ${target} if set) all the dev libraries">
    <call-subproject subproject="buildtools" subtarget="build"/>
    <gwt.ant dir="dev"/>
  </target>

  <target name="codeserver"
          description="[subdir] Builds (or runs ${target} if set) only the SuperDevMode">
    <call-subproject subproject="dev" subtarget="build"/>
    <gwt.ant dir="dev/codeserver"/>
  </target>

  <target name="user"
          description="[subdir] Builds (or runs ${target} if set) only the user library">
    <call-subproject subproject="dev" subtarget="build"/>
    <gwt.ant dir="user"/>
  </target>

  <target name="elemental"
          description="[subdir] Builds (or runs ${target} if set) only the elemental library">
    <call-subproject subproject="user" subtarget="build"/>
    <gwt.ant dir="elemental"/>
  </target>

  <target name="soyc"
          description="[subdir] Builds (or runs ${target} if set) only the soyc library">
    <call-subproject subproject="dev" subtarget="build"/>
    <call-subproject subproject="user" subtarget="build"/>
    <gwt.ant dir="tools/soyc-vis"/>
  </target>

  <target name="tools" description="[subdir] Builds (or runs ${target} if set) only the tools">
    <call-subproject subproject="user" subtarget="build"/>
    <gwt.ant dir="tools"/>
  </target>

  <target name="requestfactory"
          description="[subdir] Builds (or runs ${target} if set) only the requestfactory jars">
    <call-subproject subproject="user" subtarget="build"/>
    <gwt.ant dir="requestfactory"/>
  </target>

  <target name="servlet"
          description="[subdir] Builds (or runs ${target} if set) only the servlet jar">
    <call-subproject subproject="user" subtarget="build"/>
    <gwt.ant dir="servlet"/>
  </target>

  <target name="jni" description="[subdir] Builds (or runs ${target} if set) jni for all platforms">
    <gwt.ant dir="jni"/>
  </target>

  <target name="doc" description="[subdir] Builds (or runs ${target} if set) the doc">
    <call-subproject subproject="user" subtarget="build"/>
    <gwt.ant dir="doc"/>
  </target>

  <target name="samples" description="[subdir] Builds (or runs ${target} if set) the samples">
    <call-subproject subproject="user" subtarget="build"/>
    <call-subproject subproject="codeserver" subtarget="build"/>
    <gwt.ant dir="samples"/>
  </target>

  <target name="buildtools" description="[subdir] Build (or runs ${target} if set) the build tools">
    <gwt.ant dir="build_tools"/>
  </target>

  <target name="build"
          description="[action] Builds GWT, including samples, but without distro packaging">
    <call-subproject subproject="dev" subtarget="build"/>
    <call-subproject subproject="codeserver" subtarget="build"/>
    <call-subproject subproject="user" subtarget="build"/>
    <call-subproject subproject="requestfactory" subtarget="build"/>
    <call-subproject subproject="servlet" subtarget="build"/>
    <call-subproject subproject="tools" subtarget="build"/>
    <call-subproject subproject="jni" subtarget="build"/>
    <call-subproject subproject="samples" subtarget="build"/>
  </target>

  <target name="checkstyle" description="[action] Does static analysis of GWT source">
    <call-subproject subproject="buildtools" subtarget="checkstyle"/>
    <call-subproject subproject="dev" subtarget="checkstyle"/>
    <call-subproject subproject="codeserver" subtarget="checkstyle"/>
    <call-subproject subproject="user" subtarget="checkstyle"/>
    <call-subproject subproject="requestfactory" subtarget="checkstyle"/>
    <call-subproject subproject="servlet" subtarget="checkstyle"/>
    <!-- servlet needed for tools/benchmark-viewer -->
    <call-subproject subproject="servlet" subtarget="build"/>
    <call-subproject subproject="tools" subtarget="checkstyle"/>
    <call-subproject subproject="samples" subtarget="checkstyle"/>
  </target>

  <target name="test" depends="dist-dev,apicheck,checkstyle"
          description="[action] Runs all the GWT tests, including checkstyle and apicheck">
    <call-subproject subproject="buildtools" subtarget="test"/>
    <call-subproject subproject="dev" subtarget="test"/>
    <call-subproject subproject="codeserver" subtarget="test"/>
    <call-subproject subproject="user" subtarget="test"/>
    <call-subproject subproject="requestfactory" subtarget="test"/>
    <call-subproject subproject="servlet" subtarget="test"/>
    <call-subproject subproject="tools" subtarget="test"/>
  </target>

  <target name="testrf" depends="dist-dev"
          description="[action] Runs the GWT RequestFactory tests">
    <call-subproject subproject="dev" subtarget="compile.tests"/>
    <call-subproject subproject="user" subtarget="compile.tests"/>
    <call-subproject subproject="requestfactory" subtarget="test"/>
  </target>

  <path id="emma.classpath.src">
    <pathelement location="${gwt.root}/user/src"/>
    <pathelement location="${gwt.root}/dev/**/src/com/google"/>
    <pathelement location="${gwt.root}/build_tools/**/src/com/google"/>
    <pathelement location="${gwt.root}/tools/**/src/com/google"/>
  </path>

  <target name="emma.merge" description="Merges coverage data for all projects">
    <delete dir="${emma.merged.out}"/>
    <mkdir dir="${emma.merged.out}"/>
    <emma>
      <merge outfile="${emma.merged.out}/merged.emma">
        <fileset dir="${project.build}">
          <include name="**/*.emma"/>
          <exclude name="**/merged.emma"/>
        </fileset>
      </merge>
    </emma>
    <emma>
      <report sourcepath="${emma.classpath.src}">
        <fileset dir="${project.build}">
          <patternset>
            <include name="**/metadata.emma"/>
          </patternset>
        </fileset>
        <fileset file="${emma.merged.out}/merged.emma"/>
        <txt outfile="${emma.merged.out}/coverage.txt"/>
        <html outfile="${emma.merged.out}/coverage.html"/>
        <xml outfile="${emma.merged.out}/coverage.xml"/>
      </report>
    </emma>
  </target>

  <target name="clean" description="[action] Cleans the entire GWT build">
    <delete dir="${gwt.build}"/>
    <delete file="${gwt.root}/doc/packages.properties"/>
  </target>

  <target name="presubmit"
          description="[action] Deprecated for test, which now does checkstyle and apicheck"
          depends="test">
  </target>

  <target name="apicheck-nobuild"
          description="[action] Checks API compatibility to prior GWT revision">
    <java failonerror="true" fork="true"
          classname="com.google.gwt.tools.apichecker.ApiCompatibilityChecker">
      <jvmarg line="-Xmx512m"/>
      <classpath>
        <pathelement location="${gwt.build.out}/tools/api-checker/bin"/>
        <fileset dir="${gwt.build.lib}" includes="gwt-user.jar,gwt-dev.jar"/>
        <pathelement path="${java.class.path}"/>
        <pathelement location="${gwt.tools.lib}/apache/ant-1.6.5.jar"/>
      </classpath>
      <arg value="-refJar"/>
      <arg path="${gwt.apicheck.referencelibs}"/>
      <arg value="-configFile"/>
      <arg file="${gwt.apicheck.config}"/>
      <arg value="-logLevel"/>
      <arg value="ERROR"/>
      <!-- Needed for checking types that include validation APIs -->
      <arg value="-validationSourceJars"/>
      <arg path="${gwt.tools.lib}/javax/validation/validation-api-1.0.0.GA-sources.jar"/>
    </java>
  </target>

  <target name="apicheck" depends="buildonly,tools,apicheck-nobuild"
          description="[action] Builds GWT and checks API compatiblity to prior release"/>

</project>
<project name="ant-gwt" default="build" basedir=".">
  <property name="gwt.root" location="../.." />
  <property name="project.tail" value="build_tools/ant_gwt" />
  <import file="${gwt.root}/common.ant.xml" />

  <property name="gwt.junit.testcase.antgwt.includes" value="**/*Test.class" />
  <property name="gwt.junit.testcase.antgwt.excludes" value="" />

  <target name="compile" description="Compiles this project">
    <mkdir dir="${javac.out}" />
    <gwt.javac>
      <classpath>
        <pathelement location="${gwt.tools.lib}/apache/ant-1.6.5.jar" />
      </classpath>
    </gwt.javac>
  </target>

  <target name="compile.tests" depends="build, compile.emma.if.enabled" description="Compiles the test code for this project">
    <mkdir dir="${javac.junit.out}" />
    <gwt.javac srcdir="test" destdir="${javac.junit.out}" includeantruntime="true">
      <classpath>
        <pathelement location="${javac.out}" />
        <pathelement location="${gwt.tools.lib}/junit/junit-4.8.2.jar" />
      </classpath>
    </gwt.javac>
  </target>

  <target name="build" depends="compile" description="Packages this project into a jar">
    <mkdir dir="${gwt.build.lib}" />
    <!-- we can't use the gwt.jar macro, as it needs the gwt-ant.jar being packaged here -->
    <jar destfile="${gwt.build.lib}/${ant.project.name}.jar" duplicate="fail" filesonly="true" 
         index="true" update="true">
      <fileset dir="${javac.out}" />
      <fileset dir="src" />
    </jar>
  </target>

  <target name="test" depends="build, compile.tests" description="Run unit tests for this project.">
    <fileset id="tests.antgwt" dir="${javac.junit.out}" includes="${gwt.junit.testcase.antgwt.includes}" excludes="${gwt.junit.testcase.antgwt.excludes}" />
    <gwt.junit test.name="ant-gwt" test.out="${junit.out}"
        test.cases="tests.antgwt" />
  </target>

  <target name="checkstyle" description="Static analysis of source">
    <gwt.checkstyle>
      <fileset dir="src" />
    </gwt.checkstyle>
  </target>

  <target name="clean" description="Cleans this project's intermediate and output files">
    <delete dir="${project.build}" />
    <delete file="${project.lib}" />
  </target>

</project>
<project name="buildtools" default="build" basedir=".">
  <property name="gwt.root" location=".." />
  <property name="project.tail" value="build_tools" />
  <import file="${gwt.root}/common.ant.xml" />

  <!-- "build" is the default when subprojects are directly targetted -->
  <property name="target" value="build" />

  <target name="ant_gwt" description="Builds GWT specific Ant extensions">
    <gwt.ant dir="ant_gwt" />
  </target>

  <target name="doctool" description="Build the doctool">
    <gwt.ant dir="doctool" />
  </target>

  <target name="-do" depends="ant_gwt, doctool" description="Run all subprojects"/>
  
  <target name="build" description="Builds GWT">
    <antcall target="-do">
      <param name="target" value="build" />
    </antcall>
  </target>

  <target name="checkstyle" depends="build" description="Static analysis of GWT source">
    <antcall target="-do">
      <param name="target" value="checkstyle" />
    </antcall>
  </target>

  <target name="test" depends="build" description="Test GWT">
    <antcall target="-do">
      <param name="target" value="test" />
    </antcall>
  </target>
</project>
<project name="doctool" default="build" basedir=".">
  <property name="gwt.root" location="../.." />
  <property name="project.tail" value="build_tools/doctool" />
  <import file="${gwt.root}/common.ant.xml" />

  <property.ensure name="java.tools.path" location="${java.home}/../lib/tools.jar" unless="build.host.ismac" message="Cannot find ${java.home}/../lib/tools.jar; please use a JDK when building doc rather than a JRE." />

  <target name="compile" description="Compiles this project">
    <mkdir dir="${javac.out}" />
    <gwt.javac>
      <classpath>
        <pathelement location="${java.tools.path}" />
      </classpath>
    </gwt.javac>
  </target>

  <target name="build" depends="compile" description="Packages this project into a jar">
    <mkdir dir="${gwt.build.lib}" />
    <gwt.jar>
      <fileset dir="src" />
      <fileset dir="${javac.out}" />
    </gwt.jar>
  </target>

  <target name="checkstyle" description="Static analysis of source">
    <gwt.checkstyle>
      <fileset dir="src" />
    </gwt.checkstyle>
  </target>

  <target name="clean" description="Cleans this project's intermediate and output files">
    <delete dir="${project.build}" />
    <delete file="${project.lib}" />
  </target>

</project>
<project name="dev-ext" default="build" basedir=".">
  <property name="gwt.root" location=".." />
  <property name="project.tail" value="dev-ext" />
  <import file="${gwt.root}/common.ant.xml" />

  <property.ensure name="gwt.dev.src" location="${gwt.root}/dev/core/src" />
  <property.ensure name="gwt.dev.bin" location="${gwt.build.out}/dev/core/bin" />

  <target name="build" description="Packages this project into a jar">
    <mkdir dir="${gwt.build.lib}" />
    <gwt.jar>
      <fileset dir="${gwt.dev.src}">
        <include name="com/google/gwt/core/ext/*.java" />
      </fileset>
      <fileset dir="${gwt.dev.bin}">
        <include name="com/google/gwt/core/ext/*.class" />
      </fileset>
    </gwt.jar>
  </target>

  <target name="clean" description="Cleans this project's intermediate and output files">
    <delete file="${project.lib}" />
  </target>
</project>
<project name="dev" default="build" basedir=".">
  <property name="gwt.root" location=".."/>
  <property name="project.tail" value="dev"/>
  <property name="test.args" value="-ea"/>
  <property name="test.jvmargs" value="-ea"/>
  <import file="${gwt.root}/platforms.ant.xml"/>
  <import file="${gwt.root}/common.ant.xml"/>

  <property name="alldeps.jar" location="${project.build}/alldeps.jar"/>
  <property name="gwt.junit.testcase.dev.core.includes" value="**/com/google/**/*Test.class"/>
  <!-- BrowserManagerTest is brought in from user and is not instantiable. -->
  <property name="gwt.junit.testcase.dev.core.excludes" value="**/BrowserManagerTest.class"/>

  <target name="clean" description="Cleans this project's intermediate and output files">
    <delete dir="${project.build}" failonerror="false"/>
    <delete file="${project.lib}" failonerror="false"/>
    <delete failonerror="false">
      <fileset dir="${gwt.build.lib}" includes="gwt-dev.jar"/>
    </delete>
  </target>

  <target name="compile.tests" depends="build, compile.emma.if.enabled, build.alldeps.jar"
          description="Compiles the test code for this project">
    <mkdir dir="${javac.junit.out}"/>
    <gwt.javac srcdir="" destdir="${javac.junit.out}">
      <src path="core/src"/>
      <src path="core/test"/>
      <classpath>
        <pathelement location="${javac.out}"/>
        <pathelement location="${alldeps.jar}"/>
        <pathelement location="${gwt.tools.lib}/junit/junit-4.8.2.jar"/>
      </classpath>
    </gwt.javac>
    <gwt.javac srcdir="${gwt.root}/user/src" destdir="${javac.junit.out}"
               excludes="**/super/**">
      <classpath>
        <pathelement location="${javac.out}"/>
        <pathelement location="${gwt.tools.lib}/junit/junit-4.8.2.jar"/>
        <pathelement location="${gwt.tools.lib}/selenium/selenium-java-client-driver.jar"/>
        <pathelement location="${gwt.tools.lib}/w3c/sac/sac-1.3.jar"/>
        <pathelement location="${gwt.tools.lib}/w3c/flute/flute-1.3-gg2.jar"/>
        <pathelement
            location="${gwt.tools.lib}/hibernate/validator/hibernate-validator-4.1.0.Final.jar"/>
        <pathelement
            location="${gwt.tools.lib}/javax/validation/validation-api-1.0.0.GA.jar"/>
        <pathelement
            location="${gwt.tools.lib}/streamhtmlparser/streamhtmlparser-jsilver-r10/streamhtmlparser-jsilver-r10-1.5-rebased.jar"/>
        <pathelement location="${gwt.build.lib}/gwt-dev-${build.host.platform}.jar"/>
        <pathelement location="${alldeps.jar}"/>
      </classpath>
    </gwt.javac>

  </target>

  <target name="build.alldeps.jar" description="Merges all dependency jars into a single jar">
    <mkdir dir="${project.build}"/>
    <outofdate> <!-- saves rescanning all the source jars' contents -->
      <sourcefiles>
        <fileset dir="${gwt.tools.lib}">
          <include name="apache/tapestry-util-text-4.0.2.jar"/>
          <include name="apache/ant-1.6.5.jar"/>
          <include name="eclipse/org.eclipse.jdt.core_3.8.3.v20130121-145325.jar"/>
          <include name="eclipse/jdtCompilerAdapter-3.8.3.v20130121-145325.jar"/>
          <include name="guava/guava-16.0.1/guava-16.0.1-rebased.jar"/>
          <include name="icu4j/50.1.1/icu4j.jar"/>
          <include name="jetty/jetty-8.1.12.v20130726/jetty-8.1.12.v20130726.jar"/>
          <include name="jetty/jetty-8.1.12.v20130726/servlet-api-3.0-NoMetaInf.jar"/>
          <include name="jscomp/20131118/compiler-rebased.jar"/>
          <include name="jscomp/20131118/sourcemap-rebased.jar"/>
          <include name="jsr305/jsr305.jar"/>
          <include name="protobuf/protobuf-2.5.0/protobuf-java-rebased-2.5.0.jar"/>
          <!-- dependencies needed for JSP support in DevMode: BEGIN -->
          <include name="tomcat/commons-el-1.0.jar"/>
          <include name="tomcat/jasper-compiler-1.0.jar"/>
          <include name="tomcat/jasper-runtime-1.0.jar"/>
          <include name="tomcat/jsp-api-2.0.jar"/>
          <!-- dependencies needed for JSP support in DevMode: END -->
          <include name="apache/commons/commons-collections-3.2.1.jar"/>
          <!-- htmlunit dependencies not already included: BEGIN -->
          <include name="apache/http/httpclient-4.3.1.jar"/>
          <include name="apache/http/httpcore-4.3.jar"/>
          <include name="apache/http/httpmime-4.3.1.jar"/>
          <include name="apache/james/apache-mime4j-0.6.jar"/>
          <include name="apache/commons/commons-codec-1.8.jar"/>
          <include name="apache/commons/commons-io-2.4.jar"/>
          <include name="apache/commons/commons-lang3-3.1.jar"/>
          <include name="apache/commons/commons-logging-1.1.3.jar"/>
          <include name="cssparser/cssparser-0.9.11.jar"/>
          <include name="htmlunit/htmlunit-2.13/htmlunit-2.13.jar"/>
          <include name="htmlunit/htmlunit-2.13/htmlunit-core-js-2.13.jar"/>
          <include name="nekohtml/nekohtml-1.9.19.jar"/>
          <include name="cup/java-cup-11a.jar"/>
          <include name="xalan/xalan-2.7.1-nocup.jar"/>
          <include name="xerces/xerces-2_11_0/serializer-2.7.1.jar"/>
          <include name="xerces/xerces-2_11_0/xercesImpl-2.11.0.jar"/>
          <include name="xerces/xerces-2_11_0/xml-apis-1.4.01.jar"/>
          <include name="w3c/sac/sac-1.3.jar"/>
          <!-- htmlunit dependencies not already included: END -->
          <include name="json/android-sdk-19.1/json-android.jar"/>
        </fileset>
        <fileset file="build.xml"/>
      </sourcefiles>
      <targetfiles>
        <fileset file="${alldeps.jar}"/>
      </targetfiles>
      <sequential>
        <gwt.jar destfile="${alldeps.jar}">
          <zipfileset src="${gwt.tools.lib}/apache/tapestry-util-text-4.0.2.jar"/>
          <zipfileset src="${gwt.tools.lib}/apache/ant-1.6.5.jar"/>
          <zipfileset
              src="${gwt.tools.lib}/eclipse/org.eclipse.jdt.core_3.8.3.v20130121-145325.jar"/>
          <zipfileset
              src="${gwt.tools.lib}/eclipse/jdtCompilerAdapter-3.8.3.v20130121-145325.jar"/>
          <zipfileset src="${gwt.tools.lib}/guava/guava-16.0.1/guava-16.0.1-rebased.jar"/>
          <zipfileset src="${gwt.tools.lib}/icu4j/50.1.1/icu4j.jar"/>
          <zipfileset
              src="${gwt.tools.lib}/jetty/jetty-8.1.12.v20130726/jetty-8.1.12.v20130726.jar"/>
          <zipfileset
              src="${gwt.tools.lib}/jetty/jetty-8.1.12.v20130726/servlet-api-3.0-NoMetaInf.jar"/>
          <zipfileset src="${gwt.tools.lib}/jscomp/20131118/compiler-rebased.jar"/>
          <zipfileset src="${gwt.tools.lib}/jscomp/20131118/sourcemap-rebased.jar"/>
          <zipfileset src="${gwt.tools.lib}/jsr305/jsr305.jar"/>
          <zipfileset
              src="${gwt.tools.lib}/protobuf/protobuf-2.5.0/protobuf-java-rebased-2.5.0.jar"/>
          <!-- dependencies needed for JSP support in DevMode: BEGIN -->
          <zipfileset src="${gwt.tools.lib}/tomcat/commons-el-1.0.jar"/>
          <zipfileset src="${gwt.tools.lib}/tomcat/jasper-compiler-1.0.jar"/>
          <zipfileset src="${gwt.tools.lib}/tomcat/jasper-runtime-1.0.jar"/>
          <zipfileset src="${gwt.tools.lib}/tomcat/jsp-api-2.0.jar"/>
          <!-- dependencies needed for JSP support in DevMode: END -->
          <zipfileset
              src="${gwt.tools.lib}/apache/commons/commons-collections-3.2.1.jar"/>
          <!-- htmlunit dependencies not already included: BEGIN -->
          <zipfileset src="${gwt.tools.lib}/apache/http/httpclient-4.3.1.jar"/>
          <zipfileset src="${gwt.tools.lib}/apache/http/httpcore-4.3.jar"/>
          <zipfileset src="${gwt.tools.lib}/apache/http/httpmime-4.3.1.jar"/>
          <zipfileset src="${gwt.tools.lib}/apache/james/apache-mime4j-0.6.jar"/>
          <zipfileset src="${gwt.tools.lib}/apache/commons/commons-codec-1.8.jar"/>
          <zipfileset src="${gwt.tools.lib}/apache/commons/commons-io-2.4.jar"/>
          <zipfileset src="${gwt.tools.lib}/apache/commons/commons-lang3-3.1.jar"/>
          <zipfileset src="${gwt.tools.lib}/apache/commons/commons-logging-1.1.3.jar"/>
          <zipfileset src="${gwt.tools.lib}/cssparser/cssparser-0.9.11.jar"/>
          <zipfileset src="${gwt.tools.lib}/htmlunit/htmlunit-2.13/htmlunit-2.13.jar"/>
          <zipfileset
              src="${gwt.tools.lib}/htmlunit/htmlunit-2.13/htmlunit-core-js-2.13.jar"/>
          <zipfileset src="${gwt.tools.lib}/nekohtml/nekohtml-1.9.19.jar"/>
          <zipfileset src="${gwt.tools.lib}/cup/java-cup-11a.jar"/>
          <zipfileset src="${gwt.tools.lib}/xalan/xalan-2.7.1-nocup.jar"/>
          <zipfileset src="${gwt.tools.lib}/xerces/xerces-2_11_0/serializer-2.7.1.jar"/>
          <zipfileset src="${gwt.tools.lib}/xerces/xerces-2_11_0/xercesImpl-2.11.0.jar"/>
          <zipfileset src="${gwt.tools.lib}/xerces/xerces-2_11_0/xml-apis-1.4.01.jar"/>
          <zipfileset src="${gwt.tools.lib}/w3c/sac/sac-1.3.jar"/>
          <!-- htmlunit dependencies not already included: END -->
          <zipfileset src="${gwt.tools.lib}/json/android-sdk-19.1/json-android.jar"/>
        </gwt.jar>
      </sequential>
    </outofdate>
  </target>

  <property name="filter.pattern" value="com/google/gwt/dev/About.properties"/>

  <target name="-filter.props" description="Creates filtered About.properties with version info"
          unless="filter.uptodate">
    <gwt.revfilter todir="${javac.out}">
      <fileset dir="core/src" includes="${filter.pattern}"/>
    </gwt.revfilter>
    <touch file="${filter.sentinel}"/>
  </target>

  <target name="compiler.standalone"
          description="Validates that the standalone gwt-compiler project can build.">
    <mkdir dir="${javac.out}"/>
    <gwt.javac srcdir="core/super" excludes="com/google/gwt/dev/jjs/intrinsic/"/>
    <gwt.javac srcdir="core/src">
      <include name="com/google/gwt/core/ext/**"/>
      <include name="com/google/gwt/core/linker/**"/>
      <include name="com/google/gwt/dev/About.java"/>
      <include name="com/google/gwt/dev/GwtVersion.java"/>
      <include name="com/google/gwt/dev/Permutation.java"/>
      <include name="com/google/gwt/dev/asm/**"/>
      <include name="com/google/gwt/dev/cfg/**"/>
      <include name="com/google/gwt/dev/javac/**"/>
      <include name="com/google/gwt/dev/jdt/**"/>
      <include name="com/google/gwt/dev/jjs/**"/>
      <include name="com/google/gwt/dev/js/**"/>
      <include name="com/google/gwt/dev/json/**"/>
      <include name="com/google/gwt/dev/resource/**"/>
      <include name="com/google/gwt/dev/util/**"/>
      <include name="com/google/gwt/soyc/**"/>
      <include name="com/google/gwt/util/**"/>
      <include name="org/eclipse/jdt/**"/>
      <classpath>
        <pathelement location="${gwt.tools.lib}/apache/ant-1.6.5.jar"/>
        <pathelement
            location="${gwt.tools.lib}/apache/commons/commons-collections-3.2.1.jar"/>
        <pathelement
            location="${gwt.tools.lib}/eclipse/org.eclipse.jdt.core_3.8.3.v20130121-145325.jar"/>
        <pathelement
            location="${gwt.tools.lib}/eclipse/jdtCompilerAdapter-3.8.3.v20130121-145325.jar"/>
        <pathelement
            location="${gwt.tools.lib}/guava/guava-16.0.1/guava-16.0.1-rebased.jar"/>
        <pathelement location="${gwt.tools.lib}/jscomp/20131118/compiler-rebased.jar"/>
        <pathelement location="${gwt.tools.lib}/jscomp/20131118/sourcemap-rebased.jar"/>
        <pathelement location="${gwt.tools.lib}/json/android-sdk-19.1/json-android.jar"/>
        <pathelement location="${gwt.tools.lib}/jsr305/jsr305.jar"/>
        <pathelement
            location="${gwt.tools.lib}/protobuf/protobuf-2.5.0/protobuf-java-rebased-2.5.0.jar"/>
      </classpath>
    </gwt.javac>
  </target>

  <target name="compile" depends="compiler.standalone, build.alldeps.jar"
          description="Compiles this project">
    <gwt.javac srcdir="" excludes="${filter.pattern}">
      <src path="core/src"/>
      <classpath>
        <pathelement location="${alldeps.jar}"/>
      </classpath>
    </gwt.javac>
    <copy todir="${javac.out}">
      <fileset dir="core/src" includes="**/*.properties" excludes="${filter.pattern}"/>
    </copy>

    <!-- Files with hardcoded version information must be filtered -->
    <gwt.getgitinfo/>
    <condition property="filter.uptodate">
      <and>
        <available file="${filter.sentinel}"/>
        <uptodate>
          <srcfiles dir="core/src" includes="${filter.pattern}"/>
          <globmapper from="*" to="${javac.out}/*"/>
        </uptodate>
      </and>
    </condition>
    <antcall target="-filter.props"/>
  </target>

  <target name="generate.remotemessageproto.java">
    <!-- Generate the java code -->
    <exec executable="protoc" failonerror="true">
      <arg value="--java_out=core/src"/>
      <arg value="./core/src/com/google/gwt/dev/shell/remoteui/remotemessage.proto"/>
    </exec>

    <!-- Rebase the java code to match the rebased protobuf library -->
    <replace file="./core/src/com/google/gwt/dev/shell/remoteui/RemoteMessageProto.java">
      <replacefilter token="com.google.protobuf" value="com.google.gwt.dev.protobuf"/>
    </replace>
  </target>

  <target name="checkstyle-source" description="Static analysis of source">
    <gwt.checkstyle>
      <fileset dir="core/src">
        <filename name="com/google/gwt/dev/shell/remoteui/RemoteMessageProto.java"
                  negate="yes"/>
        <filename name="com/google/gwt/dev/asm/**/*.java" negate="yes"/>
        <filename name="com/google/gwt/dev/js/rhino/**/*.java" negate="yes"/>
        <filename name="org/eclipse/**/*.java" negate="yes"/>
        <filename name="org/apache/**/*.java" negate="yes"/>
      </fileset>
      <fileset dir="core/super"/>
    </gwt.checkstyle>
  </target>

  <target name="checkstyle-tests" description="Static analysis of tests">
    <gwt.checkstyle.tests>
      <fileset dir="core/test">
        <filename name="com/google/gwt/dev/asm/**/*.java" negate="yes"/>
        <filename name="com/google/gwt/dev/js/rhino/**/*.java" negate="yes"/>
        <filename name="org/eclipse/**/*.java" negate="yes"/>
        <filename name="org/apache/**/*.java" negate="yes"/>
      </fileset>
    </gwt.checkstyle.tests>
  </target>

  <target name="checkstyle" description="Static analysis of source"
          depends="checkstyle-tests,checkstyle-source">
  </target>

  <target name="test" depends="build, compile.tests"
          description="Run unit tests for this project.">
    <fileset id="tests.dev.core" dir="${javac.junit.out}"
             includes="${gwt.junit.testcase.dev.core.includes}"
             excludes="${gwt.junit.testcase.dev.core.excludes}"/>
    <gwt.junit test.name="dev" test.out="${junit.out}"
               test.args="${test.args}"
               test.jvmargs="${test.jvmargs}"
               test.cases="tests.dev.core">
      <extraclasspaths>
        <pathelement location="${alldeps.jar}"/>
        <!-- TODO: the following six items are needed because dev (alone) does
            not adhere to the .../{src,super,test} convention, having a split
            between core and (historically) oophm and the OS platforms.  When
            that unifies, these should go away. -->
        <pathelement location="${gwt.root}/${project.tail}/core/src"/>
        <pathelement location="${gwt.root}/${project.tail}/core/super"/>
        <pathelement location="${gwt.root}/${project.tail}/core/test"/>
        <!-- Pull in gwt-dev and gwt-user sources for .gwt.xml files -->
        <pathelement location="${gwt.root}/user/src/"/>
        <pathelement location="${gwt.root}/user/super/"/>
        <!-- CompilerTest compiles the hello sample. -->
        <pathelement location="${gwt.root}/samples/hello/src/"/>
      </extraclasspaths>
    </gwt.junit>
  </target>

  <property.ensure name="gwt.tools.soyc" location="${gwt.root}/tools/soyc-vis"/>
  <target name="build" depends="compile" description="Build and package this project">
    <mkdir dir="${gwt.build.lib}"/>
    <outofdate>
      <sourcefiles>
        <fileset dir="core/src">
          <exclude name="**/package.html"/>
          <exclude name="**/*.properties"/>
          <!-- copied and/or filtered into bin -->
        </fileset>
        <fileset dir="core/super" excludes="**/package.html"/>
        <fileset dir="${javac.out}"/>
        <fileset dir="${project.build}/bin"/>
        <fileset file="${project.build}/alldeps.jar"/>
        <fileset file="${gwt.tools.soyc}/classLevel.css"/>
        <fileset file="${gwt.tools.soyc}/roundedCorners.css"/>
      </sourcefiles>
      <targetfiles>
        <fileset file="${project.lib}"/>
      </targetfiles>
      <sequential>
        <gwt.jar>
          <fileset dir="core/src">
            <exclude name="**/package.html"/>
            <exclude name="**/*.properties"/>
            <!-- copied and/or filtered into bin -->
          </fileset>
          <fileset dir="core/super" excludes="**/package.html"/>
          <fileset dir="${javac.out}"/>
          <zipfileset src="${alldeps.jar}"/>

          <zipfileset file="${gwt.tools.soyc}/classLevel.css"
                      prefix="com/google/gwt/soyc/resources/"/>
          <zipfileset file="${gwt.tools.soyc}/roundedCorners.css"
                      prefix="com/google/gwt/soyc/resources/"/>

          <manifest>
            <attribute name="Main-Class" value="com.google.gwt.dev.GWTMain"/>
          </manifest>
        </gwt.jar>
      </sequential>
    </outofdate>
  </target>
</project>
<project name="codeserver" default="build" basedir=".">
  <property name="gwt.root" location="../.." />
  <property name="project.tail" value="dev/codeserver" />
  <import file="${gwt.root}/common.ant.xml" />

  <property.ensure name="gwt.dev.jar" location="${gwt.build.lib}/gwt-dev.jar" />

  <!-- location of preprocessed source -->
  <property name="src" value="${project.build}/src" />

  <!--
    Nasty hack to fix the source code for the open source build.
    Constraint: the code in the "java/" directory is how we want it inside Google.
    But outside Google, Jetty is not repackaged, so we need to fix the import statements.
    (The right way to do this is probably to repackage Jetty.)
  -->
  <target name="preprocess">
    <delete dir="${src}"/>
    <mkdir dir="${src}"/>
    <copy todir="${src}">
      <fileset dir="java">
        <include name="**/*.java"/>
      </fileset>
    </copy>
    <replace dir="${src}" token="com.google.gwt.thirdparty.org.eclipse.jetty."
             value="org.eclipse.jetty."/>
  </target>

  <target name="compile" depends="preprocess">
    <mkdir dir="${javac.out}" />
    <gwt.javac srcdir="${src}">
      <classpath>
        <pathelement location="${gwt.dev.jar}" />
      </classpath>
    </gwt.javac>
  </target>

  <target name="build" depends="compile" description="builds gwt-codeserver.jar">
    <gwt.jar>
      <fileset dir="${src}" />
      <fileset dir="${javac.out}"/>
      <fileset dir="java">
        <include name="**/*.html"/>
        <include name="**/*.ico"/>
        <include name="**/*.js"/>
      </fileset>

      <manifest>
        <!-- why doesn't this work?
        <attribute name="Class-Path" value="gwt-dev.jar gwt.user.jar" />
        -->
        <attribute name="Main-Class" value="com.google.gwt.dev.codeserver.CodeServer" />
      </manifest>
    </gwt.jar>
  </target>

  <!-- no-op for now -->
  <target name="verify"/>

  <target name="demo" depends="build" description="starts the code server with a sample app">

    <property.ensure name="gwt.user.jar" location="${gwt.build.lib}/gwt-user.jar" />
    <property.ensure name="sample-src" location="${gwt.root}/samples/hello/src" />

    <java fork="true" failonerror="true" classname="com.google.gwt.dev.codeserver.CodeServer">
      <classpath>
        <pathelement location="${project.lib}"/>
        <pathelement location="${gwt.dev.jar}"/>
        <pathelement location="${gwt.user.jar}"/>
      </classpath>
      <arg value="-src"/>
      <arg value="${sample-src}"/>
      <arg value="com.google.gwt.sample.hello.Hello"/>
    </java>
  </target>

</project>
<project name="dist" default="build" basedir=".">
  <property name="gwt.root" location=".." />
  <property name="project.tail" value="distro-source" />
  <import file="${gwt.root}/platforms.ant.xml" />

  <import file="common.ant.xml" />

  <property name="project.dist" location="${gwt.build.dist}/${project.distname}.zip" />

  <target name="clean" description="Cleans this project's intermediate and output files">
    <delete dir="${gwt.build.dist}" failonerror="false" />
    <delete dir="${gwt.build.staging}" failonerror="false" />
    <delete file="${project.dist}" failonerror="false" />
  </target>

  <target name="build" depends="filter" description="Packages the distro">
    <!-- TODO: figure out how to share most of this across platforms -->
    <mkdir dir="${gwt.build.dist}" />
    <mkdir dir="${gwt.build.out}/samples-scripts"/>
    <if>
      <not>
        <available file="${gwt.build.lib}/gwt-elemental.jar" type="file" />
      </not>
      <then>
        <echo message="Building SDK without Elemental - did you forget to call 'ant elemental' before 'ant dist'?" />
      </then>
    </if>
    <zip destfile="${project.dist}">
      <!-- jars -->
      <zipfileset file="${gwt.build.lib}/gwt-dev.jar" prefix="${project.distname}" />
      <zipfileset file="${gwt.build.lib}/gwt-user.jar" prefix="${project.distname}" />
      <zipfileset file="${gwt.build.lib}/gwt-servlet.jar" prefix="${project.distname}" />
      <zipfileset file="${gwt.build.lib}/gwt-codeserver.jar" prefix="${project.distname}" />
      <zipfileset file="${gwt.build.lib}/gwt-servlet-deps.jar" prefix="${project.distname}" />
      <zipfileset file="${gwt.build.lib}/gwt-soyc-vis.jar" prefix="${project.distname}" />
      <zipfileset file="${gwt.build.lib}/gwt-api-checker.jar" prefix="${project.distname}" />
      <zipfileset file="${gwt.build.lib}/requestfactory*.jar" prefix="${project.distname}" />
      <zipfileset file="${gwt.build.lib}/gwt-elemental.jar" prefix="${project.distname}" />
      <!-- jni libs-->
      <zipfileset dir="${gwt.build.jni}/windows" prefix="${project.distname}" />

      <!-- external libs -->
      <zipfileset file="${gwt.tools}/lib/javax/validation/validation-api-1.0.0.GA.jar" prefix="${project.distname}" />
      <zipfileset file="${gwt.tools}/lib/javax/validation/validation-api-1.0.0.GA-sources.jar" prefix="${project.distname}" />

      <!-- raw files -->
      <zipfileset dir="${dist.resources}" prefix="${project.distname}" />
      <zipfileset filemode="755" dir="src" prefix="${project.distname}" />

      <!-- doc -->
      <zipfileset dir="${gwt.build.out}" prefix="${project.distname}">
        <include name="doc" />
        <include name="doc/html/**" />
        <include name="doc/css/**" />
        <include name="doc/javadoc/**" />
      </zipfileset>

      <!-- samples -->
      <zipfileset dir="${gwt.build.out}" prefix="${project.distname}">
        <include name="samples" />
        <include name="samples/*" />
        <include name="samples/*/build.xml" />
        <include name="samples/*/pom.xml" />
        <include name="samples/*/README-MAVEN.txt" />
        <include name="samples/*/src/**" />
        <include name="samples/*/war/**" />
      </zipfileset>
      <zipfileset dir="${gwt.build.out}/samples-scripts" prefix="${project.distname}/samples">
        <include name="*/*" />
      </zipfileset>
    </zip>

    <!--
      Unzip distro into the staging directory.
    -->
    <mkdir dir="${gwt.build.staging}" />
    <unzip src="${project.dist}" dest="${gwt.build.staging}" />
    <!-- cute.  zipinfo says the zip has good perms, unzip gets it right, but
         ant <unzip> leaves the perms as non-executable... go figure. -->
    <chmod perm="uga+rx">
      <fileset dir="${gwt.build.staging}/gwt-${gwt.version}">
        <patternset refid="chmod.executables"/>
      </fileset>
    </chmod>
  </target>
</project>
<project name="samples" default="build" basedir=".">

  <target name="-do">
    <ant target="${target}" dir="DynaTable"/>
    <ant target="${target}" dir="Hello"/>
    <ant target="${target}" dir="JSON"/>
    <ant target="${target}" dir="LogExample"/>
    <ant target="${target}" dir="Mail"/>
    <ant target="${target}" dir="Showcase"/>
  </target>

  <target name="build" description="Build all samples">
    <antcall target="-do">
      <param name="target" value="build" />
    </antcall>
  </target>

  <target name="eclipse.generate" description="Generate eclipse projects for all samples">
    <antcall target="-do">
      <param name="target" value="eclipse.generate" />
    </antcall>
  </target>

  <target name="clean" description="Clean all samples">
    <antcall target="-do">
      <param name="target" value="clean" />
    </antcall>
  </target>
</project>
<project name="doc" default="all" basedir=".">
  <property name="gwt.root" location=".." />
  <property name="project.tail" value="doc" />
  <import file="${gwt.root}/common.ant.xml" />

  <property.ensure name="java.tools.path" location="${java.home}/../lib/tools.jar" unless="build.host.ismac" message="Cannot find ${java.home}/../lib/tools.jar; please use a JDK when building doc rather than a JRE." />

  <property.ensure name="gwt.user.jar" location="${gwt.build.lib}/gwt-user.jar" />
  <!-- Platform shouldn't matter here, just picking one -->
  <property.ensure name="gwt.dev.jar" location="${gwt.build.lib}/gwt-dev.jar" />

  <!--
    *** Note that if the USER_SOURCE_PATH paths are updated,
    the fileset dependencies in the outofdate tags in the
    javadoc target must be updated as well.
  -->
  <path id="USER_SOURCE_PATH">
    <pathelement location="${gwt.root}/user/src" />
    <pathelement location="${gwt.root}/user/javadoc" />
    <pathelement location="${gwt.root}/user/super" />
    <pathelement location="${gwt.root}/dev/core/src" />
    <pathelement location="${gwt.root}/dev/core/super" />
  </path>

  <path id="USER_CLASS_PATH">
    <pathelement location="${gwt.dev.jar}" />
    <pathelement location="${gwt.user.jar}" />
    <pathelement location="${gwt.tools.lib}/lib/json/android-sdk-19.1/json-android.jar" />
    <pathelement location="${gwt.tools.lib}/junit/junit-4.8.2.jar" />
    <pathelement location="${gwt.tools.lib}/javax/validation/validation-api-1.0.0.GA.jar" />
    <pathelement location="${gwt.tools.lib}/javax/validation/validation-api-1.0.0.GA-sources.jar" />
    <pathelement location="${gwt.tools.lib}/selenium/selenium-java-client-driver.jar" />
  </path>

  <path id="DOC_PATH">
    <pathelement location="./src" />
    <pathelement location="${gwt.build.lib}/gwt-doctool.jar" />
    <path path="${java.tools.path}" />
    <path refid="USER_SOURCE_PATH" />
  </path>

  <!-- Rebuild the javadoc if a source file is newer than the index-->
  <target name="javadoc">
    <outofdate>
      <sourcefiles>
        <fileset file="./src/gwt-user.html" />
        <fileset dir="${gwt.root}/user/src">
          <include name="**/*.java" />
        </fileset>
        <fileset dir="${gwt.root}/user/javadoc">
          <include name="**/*.java" />
        </fileset>
        <fileset dir="${gwt.root}/user/super">
          <include name="**/*.java" />
        </fileset>
        <fileset dir="${gwt.root}/dev/core/src">
          <include name="**/*.java" />
        </fileset>
        <fileset dir="${gwt.root}/dev/core/super">
          <include name="**/*.java" />
        </fileset>
      </sourcefiles>
      <targetfiles>
        <!--
          only checks one output file, will not rebuild other
          files if this one is up to date
        -->
        <pathelement path="${project.build}/javadoc/index.html" />
      </targetfiles>
      <sequential>
        <echo>Building javadoc</echo>
        <antcall target="makeJavadoc" />
      </sequential>
    </outofdate>
  </target>

  <!-- Really rebuild the javadoc -->
  <target name="makeJavadoc">
    <java classpathref="DOC_PATH" classname="com.google.doctool.custom.FindPackages" fork="yes" failonerror="true">
      <arg value="${gwt.root}" />
    </java>
    <property file="${gwt.root}/build/out/packages.properties" />
    <java classpathref="DOC_PATH" classname="com.google.doctool.custom.GWTJavaDoclet" fork="yes" failonerror="true">
      <jvmarg value="-Xmx1024m" />
      <arg value="-noindex" />
      <arg value="-notree" />
      <arg value="-quiet" />
      <arg value="-notimestamp" />
      <arg value="-use" />
      <arg value="-source" />
      <arg value="${javac.source}" />
      <arg value="-windowtitle" />
      <arg value="GWT Javadoc" />
      <arg value="-doctitle" />
      <arg value="GWT API Reference" />
      <arg value="-header" />
      <arg value="GWT ${gwt.version}" />
      <arg value="-package" />
      <arg value="-encoding"/>
      <arg value="UTF-8"/>
      <arg value="-d" />
      <arg value="${project.build}/javadoc" />
      <arg value="-linkoffline" />
      <arg value="http://download.oracle.com/javaee/6/api/" />
      <arg value="validation-package-list" />
      <arg value="-linkoffline" />
      <arg value="http://www.json.org/javadoc" />
      <arg value="json-package-list" />
      <arg value="-classpath" />
      <arg pathref="USER_CLASS_PATH" />
      <arg value="-sourcepath" />
      <arg pathref="USER_SOURCE_PATH" />
      <arg value="-examplepackages" />
      <arg value="com.google.gwt.examples;com.google.gwt.examples.i18n;com.google.gwt.examples.http.client;com.google.gwt.examples.rpc.server;com.google.gwt.examples.benchmarks;com.google.gwt.examples.cell;com.google.gwt.examples.cellview;com.google.gwt.examples.view;com.google.gwt.examples.cellview;com.google.gwt.examples.dom.builder" />
      <arg value="-packages" />
      <arg value="${USER_PKGS};${USER_CLASSES}" />
    </java>
  </target>

  <target name="emul-ezt">
    <outofdate>
      <sourcefiles>
        <fileset dir="${gwt.root}/user/super/com/google/gwt/emul">
          <include name="**/*.java" />
        </fileset>
      </sourcefiles>
      <targetfiles>
        <pathelement path="${project.build}/emul-ezt/fragment.html" />
      </targetfiles>
      <sequential>
        <echo>Building JRE emulation EZT</echo>
        <java classpathref="DOC_PATH" classname="com.google.doctool.custom.FindPackages" fork="yes" failonerror="true">
          <arg value="${gwt.root}" />
        </java>
        <property file="${gwt.root}/build/out/packages.properties" />
        <java classpathref="DOC_PATH" classname="com.google.doctool.JreDocTool" fork="yes" failonerror="true">
          <arg value="-out" />
          <arg value="${project.build}/emul-ezt/fragment.html" />
          <arg value="-classpath" />
          <arg pathref="USER_CLASS_PATH" />
          <arg value="-sourcepath" />
          <arg path="${gwt.root}/user/super/com/google/gwt/emul:${gwt.root}/dev/core/super/com/google/gwt/dev/jjs/intrinsic" />
          <arg value="-packages" />
          <arg value="${JAVA_PKGS}" />
        </java>
      </sequential>
    </outofdate>
  </target>

  <target name="build" depends="javadoc, emul-ezt" />
</project>
<project name="elemental" default="build" basedir=".">
  <property name="gwt.root" location=".." />
  <property name="project.tail" value="elemental" />
  <property name="test.args" value="-ea" />
  <property name="test.jvmargs" value="-ea" />

  <import file="${gwt.root}/common.ant.xml" />

  <!-- Platform shouldn't matter here, just picking one -->
  <property.ensure name="gwt.dev.jar" location="${gwt.build.lib}/gwt-dev.jar" />
  <property.ensure name="gwt.user.jar" location="${gwt.build.lib}/gwt-user.jar" />

  <target name="generate" description="Generate Elemental bindings from IDL">
    <exec executable="idl/build" dir="." failonerror="true"/>
  </target>

  <target name="compile" description="Compile all class files">
    <mkdir dir="${javac.out}" />
    <gwt.javac srcdir="src:idl/generated/src" excludes="**/super/**">
      <classpath>
        <pathelement location="${gwt.dev.jar}" />
        <pathelement location="${gwt.user.jar}" />
      </classpath>
    </gwt.javac>
  </target>

  <target name="build" depends="generate, compile"
      description="Creates gwt-elemental.jar">
    <mkdir dir="${gwt.build.lib}" />
    <gwt.jar>
      <fileset dir="src" excludes="**/package.html" />
      <fileset dir="idl/generated/src"/>
      <fileset dir="${javac.out}" />
    </gwt.jar>
  </target>

    <macrodef name="compileModule">
      <element name="module" />
      <sequential>
        <gwt.timer name="Pre-compile module">
          <java classname="com.google.gwt.dev.CompileModule" fork="yes" failonerror="true">
            <classpath>
              <pathelement location="${gwt.root}/elemental/src" />
              <pathelement location="${gwt.root}/elemental/idl/generated/src" />
              <pathelement location="${gwt.dev.jar}" />
              <pathelement location="${gwt.user.jar}" />
            </classpath>
            <jvmarg value="-Xmx512M" />
            <module />
            <arg value="-strict" />
            <arg value="-sourceLevel" />
            <arg value="${javac.source}" />
            <arg value="-out" />
            <arg value="${project.build}/bin" />
          </java>
        </gwt.timer>
      </sequential>
    </macrodef>

  <target name="clean"
      description="Cleans this project's intermediate and output files">
    <delete dir="idl/generated" />
    <delete dir="idl/database" />
    <delete dir="${project.build}" />
    <delete file="${project.lib}" />
  </target>
</project>
<!-- Demo of elemental implementing search and visualization of marathon runner times (json data) -->
<project name="silvercomet" default="build" basedir=".">
  <property name="gwt.root" location="../../.." />
  <property name="project.tail" value="elemental/examples/silvercomet" />
  <import file="${gwt.root}/common.ant.xml" />

  <property.ensure name="gwt.dev.jar" location="${gwt.build.lib}/gwt-dev.jar" />
  <property.ensure name="gwt.codeserver.jar" location="${gwt.build.lib}/gwt-codeserver.jar" />
  <property.ensure name="gwt.elemental.jar" location="${gwt.build.lib}/gwt-elemental.jar" />

  <target name="demo" depends="build" description="starts the code server with a sample app">

    <!-- hack to make sourcemaps generation work in the compiler -->
    <!-- See: http://code.google.com/p/google-web-toolkit/issues/detail?id=7397 -->
    <property.ensure name="json.jar"
                     location="${gwt.tools}/redist/json/r2_20080312/json-1.5.jar" />

    <property.ensure name="gwt.user.jar" location="${gwt.build.lib}/gwt-user.jar" />
    <property.ensure name="sample-src" location="${gwt.root}/elemental/examples/silvercomet/src" />


    <java fork="true" failonerror="true" classname="com.google.gwt.dev.codeserver.CodeServer">
      <classpath>
        <pathelement location="${project.lib}"/>
        <pathelement location="${gwt.dev.jar}"/>
        <pathelement location="${json.jar}" />
        <pathelement location="${gwt.user.jar}"/>
        <pathelement location="${gwt.codeserver.jar}"/>
        <pathelement location="${gwt.elemental.jar}"/>
      </classpath>
      <arg value="-src"/>
      <arg value="${sample-src}"/>
      <arg value="com.google.silvercomet.SilverComet"/>
    </java>
  </target>

</project>
<project name="jni" default="build" basedir=".">
  <property name="gwt.root" location=".." />
  <property name="project.tail" value="jni" />
  <import file="${gwt.root}/common.ant.xml" />

  <target name="build" description="Build each platforms">
    <gwt.ant dir="windows" target="build"/>
  </target>
</project>
<project name="jni-linux" default="build" basedir=".">
  <property name="gwt.root" location="../.." />
  <property name="project.tail" value="jni/linux" />
  <import file="${gwt.root}/common.ant.xml" />

  <target name="build" description="Builds a JNI lib">
    <mkdir dir="${project.jni}" />
    <!-- TODO: Actually build this from source! -->
    <copy todir="${project.jni}">
      <fileset dir="prebuilt" />
    </copy>
  </target>

  <target name="clean" description="Cleans this project's intermediate and output files">
    <delete dir="${project.build}" failonerror="false" />
    <delete dir="${project.jni}" failonerror="false" />
  </target>
</project>
<project name="jni-mac" default="build" basedir=".">
  <property name="gwt.root" location="../.." />
  <property name="project.tail" value="jni/mac" />
  <import file="${gwt.root}/common.ant.xml" />

  <target name="build" description="Builds a JNI lib">
    <mkdir dir="${project.jni}" />
    <!-- TODO: Actually build this from source! -->
    <copy todir="${project.jni}">
      <fileset dir="prebuilt" />
    </copy>
  </target>

  <target name="clean" description="Cleans this project's intermediate and output files">
    <delete dir="${project.build}" failonerror="false" />
    <delete dir="${project.jni}" failonerror="false" />
  </target>
</project>
<project name="jni-windows" default="build" basedir=".">
  <property name="gwt.root" location="../.." />
  <property name="project.tail" value="jni/windows" />
  <import file="${gwt.root}/common.ant.xml" />

  <target name="build" description="Builds a JNI lib">
    <mkdir dir="${project.jni}" />
    <!-- TODO: Actually build this from source! -->
    <copy todir="${project.jni}">
      <fileset dir="prebuilt" />
    </copy>
  </target>

  <target name="clean" description="Cleans this project's intermediate and output files">
    <delete dir="${project.build}" failonerror="false" />
    <delete dir="${project.jni}" failonerror="false" />
  </target>
</project>
<project name="requestfactory" default="build" basedir=".">
  <property name="gwt.root" location=".." />
  <property name="project.tail" value="requestfactory" />
  <import file="${gwt.root}/common.ant.xml" />

  <!-- Remove all output files -->
  <target name="clean" description="Cleans this project's output files">
    <delete file="${gwt.build.lib}/requestfactory-apt.jar" />
    <delete file="${gwt.build.lib}/requestfactory-apt-src.jar" />
    <delete file="${gwt.build.lib}/requestfactory-client.jar" />
    <delete file="${gwt.build.lib}/requestfactory-client-src.jar" />
    <delete file="${gwt.build.lib}/requestfactory-client+src.jar" />
    <delete file="${gwt.build.lib}/requestfactory-server.jar" />
    <delete file="${gwt.build.lib}/requestfactory-server-src.jar" />
    <delete file="${gwt.build.lib}/requestfactory-server+src.jar" />
    <delete file="${gwt.build.lib}/requestfactory-test.jar" />
    <delete file="${gwt.build.lib}/requestfactory-test-src.jar" />
    <delete file="${gwt.build.lib}/requestfactory-test-validated.jar" />
  </target>

  <!-- Build a jar file containing a subset of requestfactory -->
  <macrodef name="requestfactory-jar">
    <!--
         "target" should be one of {client,server,all}[(+|-)src] or test[-src].
         -src includes .java files only, +src includes .java and .class files
    -->
    <attribute name="target" default="client"/>
    <sequential>
      <java failonerror="true" fork="true"
            classname="com.google.web.bindery.requestfactory.server.RequestFactoryJarExtractor">
        <classpath>
          <fileset dir="${gwt.build.lib}" includes="gwt-user.jar,gwt-dev.jar" />
          <fileset dir="${gwt.tools.lib}" includes="json/android-sdk-19.1/json-android.jar" />
          <pathelement location="${gwt.tools.lib}/junit/junit-4.8.2.jar" />
          <pathelement path="${gwt.build.out}/user/bin" />
          <pathelement path="${gwt.build.out}/dev/bin-test" />
          <pathelement path="${gwt.build.out}/user/bin-test" />
        </classpath>
        <jvmarg value="-ea"/>
        <arg value="@{target}"/>
        <arg file="${gwt.build.lib}/requestfactory-@{target}.jar"/>
      </java>
    </sequential>
  </macrodef>

  <!-- Targets for individual jars -->
  <target name="requestfactory-apt" description="Build RequestFactory apt jar">
    <requestfactory-jar target="apt"/>
  </target>

  <!-- Targets for individual jars -->
  <target name="requestfactory-apt-src" description="Build RequestFactory apt source jar">
    <requestfactory-jar target="apt-src"/>
  </target>

  <!-- Useful for Android testing -->
  <target name="requestfactory-all" description="Build RequestFactory all jar">
    <requestfactory-jar target="all"/>
  </target>

  <target name="requestfactory-client" description="Build RequestFactory client jar">
    <requestfactory-jar target="client"/>
  </target>

  <target name="requestfactory-client-src" description="Build RequestFactory client source jar">
    <requestfactory-jar target="client-src"/>
  </target>

  <target name="requestfactory-client+src" description="Build RequestFactory client source/class jar">
    <requestfactory-jar target="client+src"/>
  </target>

  <target name="requestfactory-server" description="Build RequestFactory server jar">
    <requestfactory-jar target="server"/>
  </target>

  <target name="requestfactory-server-src" description="Build RequestFactory server source jar">
    <requestfactory-jar target="server-src"/>
  </target>

  <target name="requestfactory-server+src" description="Build RequestFactory server source/class jar">
    <requestfactory-jar target="server+src"/>
  </target>

  <!-- This target requires classes from ../build/{dev,user}/bin-test -->
  <target name="requestfactory-test" description="Build RequestFactory test source/class jar">
    <requestfactory-jar target="test" />
    <requestfactory-jar target="test-src" />
  </target>

  <!-- Build all client jars -->
  <target name="clientjars" depends="requestfactory-apt,requestfactory-apt-src,requestfactory-client,requestfactory-client-src,requestfactory-client+src" description="Build requestfactory client jars" />

  <!-- Build all server jars -->
  <target name="serverjars" depends="requestfactory-server,requestfactory-server-src,requestfactory-server+src" description="Build requestfactory server jars" />

  <!-- Default target, build client and server jars.
       Assumes the 'user' target has been built in the trunk directory
  -->
  <target name="build" depends="clientjars,serverjars" />

  <!-- Run RequestFactoryJreSuite from the requestfactory-test+src jar.
       Assumes test classes have been built in the trunk directory
  -->
  <target name="test" depends="requestfactory-test" description="Run RequestFactoryJreSuite">
    <!-- There's no direct dependency on the Deobfuscator builders, so this gives us an opportunity
         to test the post-compilation ValidationTool to generate the metadata from the precompiled
         class files. If a new RequestFactory types is added without the argument list below being
         updated, a runtime error will occur giving the name of the RequestFactory that needs to
         be validated.
    -->
    <java failonerror="true" fork="true"
      classname="com.google.web.bindery.requestfactory.apt.ValidationTool" >
      <classpath>
        <fileset dir="${gwt.build.lib}" includes="requestfactory-apt.jar" />
        <fileset dir="${gwt.build.lib}" includes="requestfactory-client.jar" />
        <fileset dir="${gwt.build.lib}" includes="requestfactory-test.jar" />
      </classpath>
      <arg path="${gwt.build.lib}/requestfactory-test-validated.jar" />
      <arg value="com.google.web.bindery.requestfactory.gwt.client.RequestFactoryChainedContextTest.Factory" />
      <arg value="com.google.web.bindery.requestfactory.gwt.client.RequestFactoryPolymorphicTest.Factory" />
      <arg value="com.google.web.bindery.requestfactory.shared.BoxesAndPrimitivesTest.Factory" />
      <arg value="com.google.web.bindery.requestfactory.shared.ComplexKeysTest.Factory" />
      <arg value="com.google.web.bindery.requestfactory.shared.LocatorTest.Factory" />
      <arg value="com.google.web.bindery.requestfactory.shared.MultipleFactoriesTest.Factory1" />
      <arg value="com.google.web.bindery.requestfactory.shared.MultipleFactoriesTest.Factory2" />
      <arg value="com.google.web.bindery.requestfactory.shared.ServiceInheritanceTest$Factory" />
      <arg value="com.google.web.bindery.requestfactory.shared.SimpleJsonRpcRequestFactory" />
      <arg value="com.google.web.bindery.requestfactory.shared.SimpleRequestFactory" />
    </java>
    <java failonerror="true" fork="true"
      classname="com.google.web.bindery.requestfactory.vm.RequestFactoryJreSuite">
      <jvmarg value="-Xss8m" />
      <classpath>
        <fileset dir="${gwt.tools.lib}" includes="jetty/jetty-8.1.12.v20130726/servlet-api-3.0-NoMetaInf.jar" />
        <fileset dir="${gwt.tools.lib}" includes="apache/log4j/log4j-1.2.16.jar" />
        <fileset dir="${gwt.tools.lib}" includes="slf4j/slf4j-api/slf4j-api-1.6.1.jar" />
        <fileset dir="${gwt.tools.lib}" includes="slf4j/slf4j-log4j12/slf4j-log4j12-1.6.1.jar" />
        <fileset dir="${gwt.tools.lib}" includes="hibernate/validator/hibernate-validator-4.1.0.Final.jar" />
        <fileset dir="${gwt.tools.lib}" includes="javax/validation/validation-api-1.0.0.GA.jar" />
        <fileset dir="${gwt.tools.lib}" includes="javax/xml/bind/jaxb-api-2.1.jar" />
        <fileset dir="${gwt.build.lib}" includes="requestfactory-test.jar" />
        <fileset dir="${gwt.build.lib}" includes="requestfactory-test-src.jar" />
        <fileset dir="${gwt.build.lib}" includes="requestfactory-test-validated.jar" />
      </classpath>
    </java>
  </target>

</project>
<project name="samples" default="build" basedir=".">
  <property name="gwt.root" location=".." />
  <property name="project.tail" value="samples" />
  <import file="${gwt.root}/common.ant.xml" />

  <!-- "build" is the default when subprojects are directly targetted -->
  <property name="target" value="build" />

  <target name="dynatable" description="Build dynatable">
    <gwt.ant dir="dynatable" />
  </target>

  <target name="dynatablerf" description="Build dynatablerf">
    <gwt.ant dir="dynatablerf" target="source" />
  </target>

  <target name="hello" description="Build hello">
    <gwt.ant dir="hello" />
  </target>

  <target name="json" description="Build json">
    <gwt.ant dir="json" />
  </target>

  <target name="logexample" description="Build logexample">
    <gwt.ant dir="logexample" />
  </target>

  <target name="mail" description="Build mail">
    <gwt.ant dir="mail" />
  </target>

  <target name="mobilewebapp" description="Build mobile web app">
    <gwt.ant dir="mobilewebapp" target="source" />
  </target>

  <target name="showcase" description="Build showcase">
    <gwt.ant dir="showcase" />
  </target>

  <target name="validation" description="Build validation">
    <gwt.ant dir="validation" target="source" />
  </target>

  <target name="validationtck" description="Build validation TCK">
    <gwt.ant dir="validationtck" />
  </target>

  <target name="-do" description="Run all subprojects" >
    <antcall target="dynatable" />
    <antcall target="dynatablerf" />
    <antcall target="hello" />
    <antcall target="json" />
    <antcall target="logexample" />
    <antcall target="mail" />
    <antcall target="mobilewebapp" />
    <antcall target="showcase" />
    <antcall target="validation" />
    <!-- don't include validationtck, it is not really a sample -->
  </target>

  <target name="build" description="Builds GWT">
    <gwt.timer name="all">
      <antcall target="-do">
        <param name="target" value="build" />
      </antcall>
    </gwt.timer>
    <length property="gwt.sample.length">
      <fileset dir="${gwt.build.out}/samples" includes="*/war/*/*.cache.html,*/war/*/*.cache.js"/>
    </length>
    <echo message="compiled size of all samples is ${gwt.sample.length} bytes." level="info"/>
  </target>

  <target name="checkstyle" description="Static analysis of GWT source">
    <antcall target="-do">
      <param name="target" value="checkstyle" />
    </antcall>
  </target>

  <target name="source" description="Copy source to the output folder">
    <antcall target="-do">
      <param name="target" value="source" />
    </antcall>
  </target>

  <target name="test" description="Test GWT">
    <antcall target="-do">
      <param name="target" value="test" />
    </antcall>
  </target>

  <target name="clean" description="Cleans this project's intermediate and output files">
    <delete dir="${project.build}" />
    <delete dir="${gwt.build.out}/samples-scripts" />
  </target>
</project>
<project name="dynatable" default="build" basedir=".">
  <property name="sample.root" value="dynatable" />
  <property name="sample.module" value="DynaTable" />
  <property name="sample.path" value="src" />
  <import file="../common.ant.xml" />
  <!-- these are after the common.ant.xml so they have gwt.tools etc -->
  <path id="sample.extraclasspath">
    <pathelement location="${gwt.tools.lib}/javax/validation/validation-api-1.0.0.GA.jar" />
  </path>
</project>
<project name="dynatablerf" default="source" basedir=".">
  <property name="sample.root" value="dynatablerf" />
  <property name="sample.module" value="DynaTableRf" />
  <property name="sample.path" value="src/main/java" />
  <import file="../common.ant.xml" />
  <!-- these are after the common.ant.xml so they have gwt.tools etc -->
  <path id="sample.extraclasspath">
  </path>
  <fileset id="sample.server.libs" dir="${gwt.tools.lib}">
  </fileset>
</project>
<project name="hello" default="build" basedir=".">
  <property name="sample.root" value="hello" />
  <property name="sample.module" value="Hello" />
  <property name="sample.path" value="src" />
  <import file="../common.ant.xml" />
  <!-- these are after the common.ant.xml so they have gwt.tools... -->
  <path id="sample.extraclasspath">
  </path>
</project>
<project name="json" default="build" basedir=".">
  <property name="sample.root" value="json" />
  <property name="sample.module" value="JSON" />
  <property name="sample.path" value="src" />
  <import file="../common.ant.xml" />
  <!-- these are after the common.ant.xml so they have gwt.tools... -->
  <path id="sample.extraclasspath">
  </path>
</project>
<project name="logexample" default="build" basedir=".">
  <property name="sample.root" value="logexample" />
  <property name="sample.module" value="LogExample" />
  <property name="sample.path" value="src" />
  <import file="../common.ant.xml" />
  <!-- these are after the common.ant.xml so they have gwt.tools... -->
  <path id="sample.extraclasspath">
  </path>
</project>
<project name="mail" default="build" basedir=".">
  <property name="sample.root" value="mail" />
  <property name="sample.module" value="Mail" />
  <property name="sample.path" value="src" />
  <import file="../common.ant.xml" />
  <!-- these are after the common.ant.xml so they have gwt.tools... -->
  <path id="sample.extraclasspath">
  </path>
</project>
<project name="mobilewebapp" default="source" basedir=".">
  <property name="sample.root" value="mobilewebapp" />
  <property name="sample.module" value="MobileWebApp" />
  <property name="sample.path" value="src/main/java" />
  <import file="../common.ant.xml" />
  <!-- these are after the common.ant.xml so they have gwt.tools... -->
  <path id="sample.extraclasspath">
  </path>
  <fileset id="sample.server.libs" dir="${gwt.tools.lib}">
  </fileset>
</project>
<project name="showcase" default="build" basedir=".">
  <property name="sample.root" value="showcase" />
  <property name="sample.module" value="Showcase" />
  <property name="sample.path" value="src" />
  <import file="../common.ant.xml" />
  <!-- these are after the common.ant.xml so they have gwt.tools... -->
  <path id="sample.extraclasspath">
  </path>
</project>
<project name="validation" default="source" basedir=".">
  <property name="sample.root" value="validation" />
  <property name="sample.module" value="Validation" />
  <property name="sample.path" value="src" />
  <import file="../common.ant.xml" />
  <!-- these are after the common.ant.xml so they have gwt.tools etc -->
  <path id="sample.extraclasspath">
  </path>
  <fileset id="sample.server.libs" dir="${gwt.tools.lib}">
  </fileset>
</project>
<project name="servlet" default="build" basedir=".">
  <property name="gwt.root" location=".." />
  <property name="project.tail" value="servlet" />
  <import file="${gwt.root}/common.ant.xml" />

  <property.ensure name="gwt.user.root" location="${gwt.root}/user" />
  <property.ensure name="gwt.dev.build" location="${gwt.build.out}/dev" />
  <property.ensure name="gwt.user.build" location="${gwt.build.out}/user" />
  <property.ensure name="gwt.dev.bin" location="${gwt.dev.build}/bin" />
  <property.ensure name="gwt.user.bin" location="${gwt.user.build}/bin" />

  <property name="project.lib.deps"
      location="${gwt.build.lib}/gwt-${ant.project.name}-deps.jar" />

  <target name="build" description="Packages this project into a jar"
      depends="-servlet, -deps" />

  <target name="clean" description="Cleans this project's intermediate and output files">
    <delete file="${project.lib}" />
    <delete file="${project.lib.deps}" />
  </target>

  <target name="-servlet" description="Packages this project into a jar">
    <mkdir dir="${gwt.build.lib}" />
    <gwt.jar>
      <!-- Rebased dependencies go in gwt-servlet too -->
      <zipfileset src="${gwt.tools.lib}/guava/guava-16.0.1/guava-16.0.1-rebased.jar" />
      <zipfileset src="${gwt.tools.lib}/jscomp/20131118/sourcemap-rebased.jar" />
      <zipfileset src="${gwt.tools.lib}/streamhtmlparser/streamhtmlparser-jsilver-r10/streamhtmlparser-jsilver-r10-1.5-rebased.jar" />
      <zipfileset src="${gwt.tools.lib}/protobuf/protobuf-2.5.0/protobuf-java-rebased-2.5.0.jar" />
      <fileset dir="${gwt.dev.bin}">
        <include name="com/google/gwt/dev/asm/**" />
        <include name="com/google/gwt/dev/util/Name*.class" />
        <include name="com/google/gwt/dev/util/StringKey.class" />
        <include name="com/google/gwt/util/tools/shared/**" />
        <include name="com/google/gwt/core/shared/**" />
      </fileset>
      <fileset dir="${gwt.user.bin}">
        <exclude name="**/rebind/**" />
        <exclude name="**/tools/**" />
        <exclude name="**/super/**" />
        <exclude name="com/google/gwt/json/**" />
        <exclude name="com/google/gwt/junit/*" />
        <exclude name="com/google/gwt/junit/client/GWTTestCase.*" />
        <exclude name="com/google/gwt/junit/remote/**" />
        <exclude name="com/google/gwt/junit/server/**" />
        <exclude name="com/google/gwt/benchmarks/*" />
        <exclude name="**/*.gwtar" />
      </fileset>

      <!-- additional dependencies (used by scripts). -->
    </gwt.jar>
  </target>

  <target name="-deps" description="Packages this project's dependencies into a jar">
    <mkdir dir="${gwt.build.lib}" />
    <gwt.jar destfile="${project.lib.deps}">
      <!-- The following two jars satisfy RequestFactory dependencies. -->
      <zipfileset src="${gwt.tools.lib}/json/android-sdk-19.1/json-android.jar" />
      <zipfileset src="${gwt.tools.lib}/javax/validation/validation-api-1.0.0.GA.jar" />
    </gwt.jar>
  </target>
</project>
<project name="api-checker" default="build" basedir=".">

  <property name="gwt.root" location="../.." />
  <property name="project.tail" value="tools/api-checker" />
  <import file="${gwt.root}/common.ant.xml" />

  <property name="tools.build" value="${gwt.build.out}/${project.tail}" />
  <property name="gwt.junit.testcase.apichecker.includes" value="**/*Test.class" />
  <property name="gwt.junit.testcase.apichecker.excludes" value="" />

  <property.ensure name="gwt.dev.jar" location="${gwt.build.lib}/gwt-dev.jar" />
  <property.ensure name="gwt.user.jar" location="${gwt.build.lib}/gwt-user.jar" />

  <target name="compile" description="Compile all class files">
    <mkdir dir="${javac.out}" />
    <gwt.javac>
      <classpath>
        <pathelement location="${gwt.dev.jar}" />
        <pathelement location="${gwt.user.jar}" />
      </classpath>
    </gwt.javac>
  </target>

  <!--
    Compiles test dependencies in dev/core
  -->
  <target name="compile.dev.tests">
    <gwt.ant dir="../../dev" target="compile.tests" />
  </target>

  <target name="compile.tests"
      depends="compile.dev.tests, compile.emma.if.enabled"
      description="Compiles the test code for this project">
    <mkdir dir="${javac.junit.out}" />
    <gwt.javac srcdir="test" destdir="${javac.junit.out}">
      <classpath>
        <pathelement location="${javac.out}" />
        <pathelement location="${gwt.tools.lib}/junit/junit-4.8.2.jar" />
        <pathelement location="${gwt.dev.staging.jar}" />
        <pathelement location="${gwt.dev.jar}" />
        <pathelement location="${gwt.build.out}/dev/bin-test" />
        <pathelement location="${gwt.user.jar}" />
      </classpath>
    </gwt.javac>
  </target>
        
  <target name="build" depends="compile" description="Build and package this project">
    <mkdir dir="${gwt.build.lib}" />
                    
    <gwt.jar>
      <fileset dir="${javac.out}" />
    </gwt.jar>
  </target>

  <target name="test" depends="build, compile.tests" description="Run unit tests for this project.">
    <fileset id="tests.apichecker" dir="${javac.junit.out}" includes="${gwt.junit.testcase.apichecker.includes}" excludes="${gwt.junit.testcase.apichecker.excludes}" />
    <gwt.junit test.name="api-checker" test.out="${junit.out}"
        test.cases="tests.apichecker" >
      <extraclasspaths>
        <pathelement location="${gwt.build.out}/tools/api-checker/bin"/>
        <pathelement location="${gwt.dev.jar}" />
        <pathelement location="${gwt.build.out}/dev/bin-test" />
      </extraclasspaths>
    </gwt.junit>
  </target>

  <target name="checkstyle" description="Static analysis of source">
    <gwt.checkstyle>
      <fileset dir="src"/>
    </gwt.checkstyle>
  </target>

  <target name="clean" description="Cleans this project's intermediate and output files">
    <delete dir="${project.build}" />
    <delete file="${project.lib}" />
  </target>
</project>

<project name="tools" default="build" basedir=".">
  <property name="gwt.root" location=".." />
  <property name="project.tail" value="tools" />
  <import file="${gwt.root}/common.ant.xml" />

        <!-- "build" is the default when subprojects are directly targeted -->
        <property name="target" value="build" />

        <target name="api-checker" depends=""
          description="Compile api-checker">
                <gwt.ant dir="api-checker" />
        </target>

        <target name="soyc-vis" depends="" description="Compile SOYC dashboard">
                <gwt.ant dir="soyc-vis" />
        </target>

        <target name="cldr-import" depends="" description="Compile CLDR import">
                <gwt.ant dir="cldr-import" />
        </target>

  <target name="-do" depends="api-checker,soyc-vis,cldr-import"
    description="Run all subfolders that don't have additional dependencies" />

  <target name="build" description="Build each subfolder">
    <antcall target="-do">
      <param name="target" value="build" />
    </antcall>
  </target>

  <target name="checkstyle"
    description="Static analysis of source for each subfolder">
    <antcall target="-do">
      <param name="target" value="checkstyle" />
    </antcall>
  </target>

  <target name="test" depends="build" description="Test each subfolder">
    <antcall target="-do">
      <param name="target" value="test" />
    </antcall>
  </target>
</project>

<project name="cldr-import" default="build" basedir=".">

  <property name="gwt.root" location="../.." />
  <property name="project.tail" value="tools/cldr-import" />
  <import file="${gwt.root}/common.ant.xml" />

  <property.ensure name="gwt.dev.jar" location="${gwt.build.lib}/gwt-dev.jar" />
  <property.ensure name="gwt.user.jar" location="${gwt.build.lib}/gwt-user.jar" />
  <property.ensure name="gwt.servlet.jar" location="${gwt.build.lib}/gwt-servlet.jar" />

  <condition property="CLDR_TOOLS" value="${env.CLDR_ROOT}/tools/java"
      else="${gwt.tools}/lib/cldr/21">
    <isset property="env.CLDR_ROOT" />
  </condition>

  <condition property="ICU" value="${env.CLDR_ROOT}/tools/java/libs"
      else="${gwt.tools}/lib/cldr/21">
    <isset property="env.CLDR_ROOT" />
  </condition>

  <property.ensure name="ICU_CORE_PATH" location="${ICU}/icu4j.jar" />

  <condition property="cldr.root" value="${env.CLDR_ROOT}"
      else="${gwt.root}/../CLDR">
    <isset property="env.CLDR_ROOT" />
  </condition>

  <condition property="cldr.locales" value="--restrictLocales ${env.LOCALES}"
      else="">
    <isset property="env.LOCALES" />
  </condition>

  <condition property="tmpdir" value="${env.CLDR_TEMP}"
      else="/tmp/cldr-import">
    <isset property="env.CLDR_TEMP" />
  </condition>

  <path id="project.class.path">
    <pathelement location="${CLDR_TOOLS}/cldr.jar"/>
    <pathelement location="${ICU}/icu4j.jar"/>
    <pathelement location="${ICU}/utilities.jar"/>
    <pathelement location="${gwt.user.jar}"/>
    <pathelement location="${gwt.dev.jar}"/>
  </path>

  <target name="compile" description="Compile java source">
    <mkdir dir="${javac.out}" />
    <javac srcdir="src" destdir="${javac.out}"
        debug="${javac.debug}" debuglevel="${javac.debuglevel}"
        source="${javac.source}" target="${javac.target}"
        nowarn="${javac.nowarn}" encoding="${javac.encoding}"
        includeantruntime="false">
      <classpath refid="project.class.path"/>
    </javac>
    <copy todir="${javac.out}">
      <fileset dir="src" excludes="**/*.java"/>
    </copy>
  </target>

  <target name="compile.tests" description="Compile java source">
    <mkdir dir="${javac.junit.out}" />
    <javac srcdir="test" destdir="${javac.junit.out}"
        debug="${javac.debug}" debuglevel="${javac.debuglevel}"
        source="${javac.source}" target="${javac.target}"
        nowarn="${javac.nowarn}" encoding="${javac.encoding}">
      <classpath>
        <pathelement location="${javac.out}"/>
      <path refid="project.class.path"/>
        <pathelement location="${gwt.tools.lib}/junit/junit-4.8.2.jar" />
      </classpath>
    </javac>
    <copy todir="${javac.junit.out}">
      <fileset dir="src" excludes="**/*.java"/>
    </copy>
  </target>

  <target name="build" depends="compile" description="Build this project" />

  <target name="clean" description="Cleans this project">
    <delete dir="${javac.out}" failonerror="false" />
    <delete dir="${javac.junit.out}" failonerror="false" />
  </target>

  <target name="checkstyle" description="Static analysis of source">
    <gwt.checkstyle>
      <fileset dir="src"/>
    </gwt.checkstyle>
  </target>

  <target name="test" depends="build, compile.tests" description="Run tests">
    <mkdir dir="${junit.out}/tools-cldr-import" />
    <fileset id="tests" dir="${javac.junit.out}"
        includes="**/*Test.class" />
    <gwt.junit test.name="test"
        test.args=""
        test.jvmargs="-ea"
        test.out="${junit.out}/tools-cldr-import"
        test.cases="tests">
      <extraclasspaths>
        <pathelement location="${gwt.dev.jar}" />
        <pathelement location="${gwt.user.jar}" />
      </extraclasspaths>
    </gwt.junit>
  </target>

  <target name="cldrdata" description="Verifies CLDR data is present">
    <property.ensure name="cldr.data" location="${cldr.root}/common/main"
      message="common/main missing under ${cldr.root} (set using CLDR_ROOT)" />
  </target>

  <target name="cldrjar" description="Verifies CLDR has been compiled">
    <property.ensure name="cldr.jar" location="${CLDR_TOOLS}/cldr.jar"
      message="${CLDR_TOOLS}/cldr.jar missing (maybe you should run 'ant jar' on ${CLDR_TOOLS})" />
  </target>

  <target name="gen.temp" depends="cldrjar, cldrdata, clean, build"
    description="Generate GWT classes/property files in a temporary directory">
    <delete dir="${tmpdir}" quiet="true"/>
    <mkdir dir="${tmpdir}"/>
    <java classname="com.google.gwt.tools.cldr.GenerateGwtCldrData"
      fork="true" maxmemory="2048m" failonerror="true">
      <arg line="--sourcedir ${cldr.data} --outdir ${tmpdir} ${cldr.locales}"/>
      <sysproperty key="CLDR_DIR" value="${cldr.root}"/>
      <classpath>
        <pathelement location="${javac.out}"/>
        <path refid="project.class.path"/>
      </classpath>
    </java>
  </target>

  <target name="gen" depends="cldrjar, cldrdata, clean, build"
      description="Generate GWT classes/property files">
    <java classname="com.google.gwt.tools.cldr.GenerateGwtCldrData"
      fork="true" maxmemory="2048m" failonerror="true">
      <arg line="--sourcedir ${cldr.data} --outdir ${gwt.root} ${cldr.locales}"/>
      <sysproperty key="CLDR_DIR" value="${cldr.root}"/>
      <classpath>
        <pathelement location="${javac.out}"/>
        <path refid="project.class.path"/>
      </classpath>
    </java>
  </target>
</project>
<?xml version="1.0"?>

<project name="soyc-vis" default="build" basedir=".">

  <property name="gwt.root" location="../.." />
  <property name="project.tail" value="tools/soyc-vis" />
  <import file="${gwt.root}/common.ant.xml" />
  
  <property.ensure name="gwt.dev.jar" location="${gwt.build.lib}/gwt-dev.jar" />

  <target name="clean">
    <delete dir="build"/>
  </target>

  <target name="compile">
    <copy todir="${javac.out}/com/google/gwt/soyc/resources">
        <fileset dir="${gwt.root}/dev/core/src/com/google/gwt/soyc/resources"/>
    </copy>
  </target>

  <target name="build" depends="compile">
    <!-- Build a transitional jar that is good enough for
         passing as -resources to SoycDashboard.  This jar
         is being phased out in favor of gwt-dev-platform.jar
         holding all the SOYC bits.  -->
    <jar destfile="${project.lib}">
      <fileset dir="${javac.out}" />
    </jar>
  </target>

  <target name="test"/>

  <target name="checkstyle"/>

</project>
<project name="user" default="build" basedir=".">
  <property name="gwt.root" location=".."/>
  <property name="project.tail" value="user"/>
  <property name="test.args" value="-ea"/>
  <property name="test.jvmargs" value="-ea"/>

  <!-- support old variables names -->
  <condition property="gwt.hosts.web.remote" value="${gwt.remote.browsers}">
    <isset property="gwt.remote.browsers"/>
  </condition>
  <condition property="gwt.hosts.web.selenium" value="${gwt.selenium.hosts}">
    <isset property="gwt.selenium.hosts"/>
  </condition>

  <!--
    BrowserManagerServer_Stub compiled using rmic, which doesn't generate
    full source code
  -->
  <property name="emma.filter.exclude" value="*BrowserManagerServer_Stub*"/>

  <import file="${gwt.root}/common.ant.xml"/>

  <property name="test.timeout" value="5"/>
  <property name="emma.merged.out" value="${junit.out}/emma-coverage"/>
  <property name="gwt.junit.testcase.web.includes" value="${gwt.junit.testcase.includes}"/>
  <property name="gwt.junit.testcase.web.excludes" value="**/*JreSuite.class"/>

  <property name="gwt.junit.testcase.dev.includes" value="${gwt.junit.testcase.includes}"/>
  <property name="gwt.junit.testcase.dev.excludes" value="**/*JreSuite.class"/>

  <property name="gwt.tck.testcase.dev.includes"
            value="com/google/gwt/validation/tck/**/*GwtSuite.class"/>
  <property name="gwt.tct.testcase.dev.excludes" value=""/>

  <property name="gwt.nongwt.testcase.includes" value="**/*JreSuite.class"/>
  <property name="gwt.nongwt.testcase.excludes" value=""/>

  <!--
    Test args can be specified per test target type.
  -->
  <property name="test.args.dev.remote"
            value="${test.args} -out www -standardsMode -runStyle RemoteWeb:${gwt.hosts.dev.remote}"/>
  <property name="test.args.dev.selenium"
            value='${test.args} -out www -standardsMode -runStyle "Selenium:${gwt.hosts.dev.selenium}"'/>
  <property name="test.args.web.remote"
            value="${test.args} -out www -prod -standardsMode -runStyle RemoteWeb:${gwt.hosts.web.remote}"/>
  <property name="test.args.web.selenium"
            value='${test.args} -prod -standardsMode -out www -runStyle "Selenium:${gwt.hosts.web.selenium}"'/>

  <!--
    Whether I18NSuite should test e.g. Foo$InnerMsgs_fr.properties (if the
    value is "dollar") or Foo_Inner_fr.properties (for "bar")
   -->
  <property name="gwt.i18n.test.InnerClassChar" value="dollar"/>

  <!-- Platform shouldn't matter here, just picking one -->
  <property.ensure name="gwt.dev.jar" location="${gwt.build.lib}/gwt-dev.jar"/>

  <!--
    Classpaths added for test cases
  -->
  <path id="test.extraclasspath">
    <pathelement location="${gwt.build}/out/dev/bin-test"/>
    <pathelement location="test-super"/>
    <pathelement location="test_i18n_${gwt.i18n.test.InnerClassChar}"/>
    <pathelement location="${gwt.tools.lib}/apache/log4j/log4j-1.2.16.jar"/>
    <pathelement location="${gwt.tools.lib}/cglib/cglib-2.2.jar"/>
    <pathelement location="${gwt.tools.lib}/objenesis/objenesis-1.2.jar"/>
    <pathelement location="${gwt.tools.lib}/easymock/easymock-3.0.jar"/>
    <pathelement location="${gwt.tools.lib}/objectweb/asm-3.1.jar"/>
    <pathelement location="${gwt.tools.lib}/javax/validation/validation-api-1.0.0.GA.jar"/>
    <pathelement location="${gwt.tools.lib}/javax/validation/validation-api-1.0.0.GA-sources.jar"/>
    <pathelement
        location="${gwt.tools.lib}/hibernate/validator/hibernate-validator-4.1.0.Final.jar"/>
    <pathelement
        location="${gwt.tools.lib}/hibernate/validator/hibernate-validator-4.1.0.Final-sources.jar"/>
    <pathelement location="${gwt.tools.lib}/slf4j/slf4j-api/slf4j-api-1.6.1.jar"/>
    <pathelement location="${gwt.tools.lib}/slf4j/slf4j-log4j12/slf4j-log4j12-1.6.1.jar"/>
    <pathelement location="${gwt.tools.lib}/json/android-sdk-19.1/json-android.jar"/>
    <pathelement
        location="${gwt.tools.lib}/streamhtmlparser/streamhtmlparser-jsilver-r10/streamhtmlparser-jsilver-r10-1.5-rebased.jar"/>
    <!-- TCK jars -->
    <pathelement
        location="${gwt.tools.lib}/hibernate/validator/tck/jsr303-tck-1.0.3.GA-sources.jar"/>
    <pathelement location="${gwt.tools.lib}/hibernate/validator/tck/jsr303-tck-1.0.3.GA.jar"/>
    <pathelement
        location="${gwt.tools.lib}/jboss/test-audit/jboss-test-audit-api-1.0.0-sources.jar"/>
    <pathelement location="${gwt.tools.lib}/jboss/test-audit/jboss-test-audit-api-1.0.0.jar"/>
    <pathelement
        location="${gwt.tools.lib}/jboss/test-harness/jboss-test-harness-1.0.0-sources.jar"/>
    <pathelement location="${gwt.tools.lib}/jboss/test-harness/jboss-test-harness-1.0.0.jar"/>
    <pathelement
        location="${gwt.tools.lib}/jboss/test-harness/jboss-test-harness-api-1.0.0-sources.jar"/>
    <pathelement location="${gwt.tools.lib}/jboss/test-harness/jboss-test-harness-api-1.0.0.jar"/>
    <pathelement location="${gwt.tools.lib}/testng/testng-5.14.1-sources.jar"/>
    <pathelement location="${gwt.tools.lib}/testng/testng-5.14.1-nojunit.jar"/>
    <pathelement location="${gwt.dev.jar}"/>
  </path>

  <target name="compile" description="Compile all class files"
          unless="compile.complete">
    <mkdir dir="${javac.out}"/>
    <gwt.javac excludes="**/super/**">
      <classpath>
        <pathelement
            location="${gwt.tools.lib}/jetty/jetty-8.1.12.v20130726/servlet-api-3.0-NoMetaInf.jar"/>
        <pathelement location="${gwt.tools.lib}/junit/junit-4.8.2.jar"/>
        <pathelement location="${gwt.tools.lib}/selenium/selenium-java-client-driver.jar"/>
        <pathelement location="${gwt.tools.lib}/w3c/sac/sac-1.3.jar"/>
        <pathelement location="${gwt.tools.lib}/w3c/flute/flute-1.3-gg2.jar"/>
        <pathelement location="${gwt.tools.lib}/json/android-sdk-19.1/json-android.jar"/>
        <pathelement location="${gwt.tools.lib}/javax/validation/validation-api-1.0.0.GA.jar"/>
        <!-- The source is included so validation is available from client code -->
        <pathelement
            location="${gwt.tools.lib}/javax/validation/validation-api-1.0.0.GA-sources.jar"/>
        <!-- Hibernate is included until we can provide the super source as an third party jar" -->
        <pathelement
            location="${gwt.tools.lib}/hibernate/validator/hibernate-validator-4.1.0.Final.jar"/>
        <pathelement
            location="${gwt.tools.lib}/hibernate/validator/hibernate-validator-4.1.0.Final-sources.jar"/>
        <!-- Bootstrap support needed for obfuscated type tokens for JRE runtime -->
        <pathelement location="${gwt.tools.lib}/requestfactory/requestfactory-apt.jar"/>
        <pathelement
            location="${gwt.tools.lib}/streamhtmlparser/streamhtmlparser-jsilver-r10/streamhtmlparser-jsilver-r10-1.5-rebased.jar"/>
        <pathelement location="${gwt.dev.jar}"/>
      </classpath>
    </gwt.javac>

    <!-- Build the BrowserManagerServer_Stub to allow remote browser testing -->
    <rmic base="${javac.out}"
          classname="com.google.gwt.junit.remote.BrowserManagerServer"
          stubversion="1.2"/>
  </target>

  <!--
    Compile test code for dev to pick up TypeOracleTestUtils and others.
    Compiles test dependencies in dev/core
  -->
  <target name="compile.dev.tests">
    <gwt.ant dir="../dev" target="compile.tests"/>
  </target>

  <!--
      Compiles the test code for this project
  -->
  <target name="compile.tests"
          depends="compile.dev.tests, compile.emma.if.enabled"
          unless="compile.tests.complete">
    <mkdir dir="${javac.junit.out}"/>
    <gwt.javac srcdir="test" excludes="com/google/gwt/langtest/**" destdir="${javac.junit.out}">
      <classpath>
        <pathelement location="${javac.out}"/>
        <pathelement location="${gwt.tools.lib}/junit/junit-4.8.2.jar"/>
        <pathelement location="${gwt.tools.lib}/selenium/selenium-java-client-driver.jar"/>
        <!-- Bootstrap support needed for obfuscated type tokens for JRE runtime -->
        <pathelement location="${gwt.tools.lib}/requestfactory/requestfactory-apt.jar"/>
        <path refid="test.extraclasspath"/>
      </classpath>
    </gwt.javac>
  </target>

  <!-- Precompile some GWT modules to speed up end-user builds   -->
  <!-- TODO(zundel): Find a way to precompile  all modules       -->
  <!--               without tedious manual specification        -->
  <target name="precompile.modules" depends="compile">
    <outofdate>
      <sourcefiles>
        <fileset dir="${gwt.root}/user/src">
          <exclude name="com/google/web/bindery/requestfactory/apt/**"/>
        </fileset>
        <fileset dir="${gwt.root}/user/super"/>
        <fileset dir="${gwt.root}/dev/core/src"/>
        <fileset dir="${gwt.root}/dev/core/super"/>
        <fileset file="${gwt.dev.jar}"/>
      </sourcefiles>
      <targetfiles>
        <!-- TODO(zundel): this is a mechanical transform        -->
        <!-- from module name.  There must be a better way.      -->
        <pathelement location="${project.build}/bin/com/google/gwt/core/Core.gwtar"/>
        <pathelement location="${project.build}/bin/com/google/gwt/json/JSON.gwtar"/>
        <pathelement location="${project.build}/bin/com/google/gwt/regexp/RegExp.gwtar"/>
        <pathelement location="${project.build}/bin/com/google/gwt/user/User.gwtar"/>
        <pathelement location="${project.build}/bin/com/google/gwt/xml/XML.gwtar"/>
        <pathelement location="${project.build}/bin/com/google/gwt/rpc/RPC.gwtar"/>
        <pathelement location="${project.build}/bin/com/google/gwt/debug/Debug.gwtar"/>
        <pathelement location="${project.build}/bin/com/google/gwt/place/Place.gwtar"/>
        <pathelement location="${project.build}/bin/com/google/gwt/activity/Activity.gwtar"/>
        <pathelement location="${project.build}/bin/com/google/web/bindery/event/Event.gwtar"/>
        <pathelement
            location="${project.build}/bin/com/google/web/bindery/autobean/AutoBean.gwtar"/>
        <pathelement
            location="${project.build}/bin/com/google/web/bindery/requestfactory/RequestFactory.gwtar"/>
        <pathelement location="${project.build}/bin/com/google/gwt/logging/Logging.gwtar"/>
      </targetfiles>
      <sequential>
        <compileModule>
          <module>
            <!-- Order is important!  Modules that inherit from  -->
            <!-- others should come later in the list.           -->
            <!-- All modules depend on Core                      -->
            <arg value="com.google.gwt.core.Core"/>
            <arg value="com.google.gwt.json.JSON"/>
            <arg value="com.google.gwt.regexp.RegExp"/>
            <arg value="com.google.gwt.user.User"/>

            <!-- Below are modules that depend on User           -->
            <arg value="com.google.gwt.xml.XML"/>
            <arg value="com.google.gwt.rpc.RPC"/>
            <arg value="com.google.gwt.debug.Debug"/>
            <arg value="com.google.gwt.logging.Logging"/>

            <arg value="com.google.gwt.place.Place"/>
            <arg value="com.google.gwt.activity.Activity"/>

            <arg value="com.google.web.bindery.event.Event"/>
            <arg value="com.google.web.bindery.autobean.AutoBean"/>
            <arg value="com.google.web.bindery.requestfactory.RequestFactory"/>
          </module>
        </compileModule>
      </sequential>
    </outofdate>
  </target>

  <target name="build" depends="precompile.modules"
          description="Build and package this project">
    <mkdir dir="${gwt.build.lib}"/>
    <gwt.jar>
      <fileset dir="src" excludes="**/package.html"/>
      <fileset dir="super" excludes="**/package.html"/>
      <fileset dir="${javac.out}"/>
      <zipfileset src="${gwt.tools.lib}/jetty/jetty-8.1.12.v20130726/servlet-api-3.0-NoMetaInf.jar"
                  excludes="**/*.java"/>
      <zipfileset src="${gwt.tools.lib}/w3c/sac/sac-1.3.jar"/>
      <zipfileset src="${gwt.tools.lib}/w3c/flute/flute-1.3-gg2.jar"/>
      <zipfileset
          src="${gwt.tools.lib}/streamhtmlparser/streamhtmlparser-jsilver-r10/streamhtmlparser-jsilver-r10-1.5-rebased.jar"/>
    </gwt.jar>
  </target>

  <target name="checkstyle-source" description="Static analysis of source">
    <gwt.checkstyle>
      <fileset dir="src">
        <exclude name="javax/validation/super/javax/validation/constraints/Pattern.java"/>
        <exclude name="javax/validation/super/javax/validation/spi/ConfigurationState.java"/>
        <exclude name="javax/validation/super/javax/validation/MessageInterpolator.java"/>
        <exclude name="javax/validation/super/javax/validation/Configuration.java"/>
        <exclude name="javax/validation/super/javax/validation/Validation.java"/>
        <exclude name="org/hibernate/validator/super/org/hibernate/validator/**/*.java"/>
        <exclude name="org/hibernate/validator/ValidationMessages.java"/>
      </fileset>
      <fileset dir="super/com/google/gwt/emul"/>
      <fileset dir="super/com/google/gwt/junit/translatable"/>
    </gwt.checkstyle>
  </target>
  <target name="checkstyle-tests" description="Static analysis of source">
    <gwt.checkstyle.tests>
      <fileset dir="test">
        <include name="com/google/**/*.java"/>
        <include name="test/**"/>
      </fileset>
    </gwt.checkstyle.tests>
  </target>

  <target name="checkstyle" description="Static analysis of source"
          depends="checkstyle-tests,checkstyle-source">
  </target>

  <target name="test.remoteweb" depends="test.web.remote">
    <echo message="DEPRECATED: test.remoteweb has been renamed test.web.remote"/>
  </target>

  <target name="test.web.remote"
          description="Run web test with remote browsers"
          if="gwt.hosts.web.remote"
          unless="test.web.remote.disable">
    <echo message="Performing web remote testing at ${gwt.hosts.web.remote}"/>
    <property name="test.web.remote.args" value="${test.args.web.remote}"/>
    <fileset id="test.web.remote.tests" dir="${javac.junit.out}"
             includes="${gwt.junit.testcase.web.includes}"
             excludes="${gwt.junit.testcase.web.excludes}"/>
    <gwt.junit test.name="test.web.remote"
               test.args="${test.web.remote.args}"
               test.jvmargs="${test.jvmargs}"
               test.out="${junit.out}/web-remote"
               test.cases="test.web.remote.tests">
      <extraclasspaths>
        <path refid="test.extraclasspath"/>
      </extraclasspaths>
    </gwt.junit>
  </target>

  <target name="test.dev.remote"
          depends="compile, compile.tests"
          description="Run dev-mode tests with remote browsers"
          if="gwt.hosts.dev.remote"
          unless="test.dev.remote.disable">
    <echo message="Performing dev-mode remote testing at ${gwt.remote.browsers}"/>
    <property name="test.dev.remote.args" value="${test.args.dev.remote}"/>
    <fileset id="test.dev.remote.tests" dir="${javac.junit.out}"
             includes="${gwt.junit.testcase.dev.includes}"
             excludes="${gwt.junit.testcase.dev.excludes}"/>
    <gwt.junit test.name="test.dev.remote"
               test.args="${test.dev.remote.args}"
               test.jvmargs="${test.jvmargs}"
               test.out="${junit.out}/dev-remote" test.cases="test.dev.remote.tests">
      <extraclasspaths>
        <path refid="test.extraclasspath"/>
      </extraclasspaths>
    </gwt.junit>
  </target>

  <target name="test.emma.remote"
          depends="compile, compile.tests"
          description="Run emma tests with remote browsers"
          if="gwt.hosts.dev.remote"
          unless="test.emma.remote.disable">
    <echo message="Performing emma remote testing at ${gwt.hosts.dev.remote}"/>
    <property name="test.emma.remote.args" value="${test.args.dev.remote}"/>
    <fileset id="test.emma.remote.tests" dir="${javac.junit.out}"
             includes="${gwt.junit.testcase.dev.includes}"
             excludes="${gwt.junit.testcase.dev.excludes}"/>
    <gwt.junit test.name="test.emma.remote"
               test.args="${test.emma.remote.args}"
               test.jvmargs="${test.jvmargs}"
               test.out="${junit.out}/emma-remote"
               test.cases="test.emma.remote.tests">
      <extraclasspaths>
        <path refid="test.extraclasspath"/>
        <pathelement location="${gwt.tools.redist}/emma/emma.jar"/>
      </extraclasspaths>
    </gwt.junit>
  </target>

  <target name="test.emma.selenium"
          depends="compile, compile.tests"
          description="Run emma tests with Selenium-RC servers"
          if="gwt.hosts.dev.selenium"
          unless="test.emma.selenium.disable">
    <echo message="Performing emma selenium testing at ${gwt.hosts.dev.selenium}"/>
    <property name="test.emma.selenium.args" value="${test.args.dev.selenium}"/>
    <fileset id="test.emma.selenium.tests" dir="${javac.junit.out}"
             includes="${gwt.junit.testcase.dev.includes}"
             excludes="${gwt.junit.testcase.dev.excludes}"/>
    <gwt.junit test.name="test.emma.selenium"
               test.args='${test.emma.selenium.args}'
               test.jvmargs="${test.jvmargs}"
               test.out="${junit.out}/emma-selenium"
               test.cases="test.emma.selenium.tests">
      <extraclasspaths>
        <path refid="test.extraclasspath"/>
        <pathelement location="${gwt.tools.redist}/emma/emma.jar"/>
      </extraclasspaths>
    </gwt.junit>
  </target>

  <target name="test.draft.remote"
          depends="compile, compile.tests"
          description="Run draft compiled tests with remote browsers"
          if="gwt.hosts.web.remote"
          unless="test.draft.remote.disable">
    <echo message="Performing draft remote testing at ${gwt.hosts.web.remote}"/>
    <property name="test.draft.remote.args" value="${test.args.web.remote} -draftCompile"/>
    <fileset id="test.draft.remote.tests" dir="${javac.junit.out}"
             includes="${gwt.junit.testcase.web.includes}"
             excludes="${gwt.junit.testcase.web.excludes}"/>
    <gwt.junit test.name="test.draft.remote"
               test.args="${test.draft.remote.args}"
               test.jvmargs="${test.jvmargs}"
               test.out="${junit.out}/draft-remote"
               test.cases="test.draft.remote.tests">
      <extraclasspaths>
        <path refid="test.extraclasspath"/>
      </extraclasspaths>
    </gwt.junit>
  </target>

  <target name="test.nometa.remote"
          description="Run -XdisableClassMetadata tests with remote browsers"
          if="gwt.hosts.web.remote"
          unless="test.nometa.remote.disable">
    <echo message="Performing nometa remote testing at ${gwt.hosts.web.remote}"/>
    <property name="test.nometa.remote.args"
              value="${test.args.web.remote} -XdisableClassMetadata"/>
    <fileset id="test.nometa.remote.tests" dir="${javac.junit.out}"
             includes="${gwt.junit.testcase.web.includes}"
             excludes="${gwt.junit.testcase.web.excludes}"/>
    <gwt.junit test.name="test.nometa.remote"
               test.args="${test.nometa.remote.args}"
               test.jvmargs="${test.jvmargs}"
               test.out="${junit.out}/nometa-remote"
               test.cases="test.nometa.remote.tests">
      <extraclasspaths>
        <path refid="test.extraclasspath"/>
      </extraclasspaths>
    </gwt.junit>
  </target>

  <target name="test.selenium" depends="test.web.selenium">
    <echo message="DEPRECATED: test.selenium has been renamed test.web.selenium"/>
  </target>

  <target name="test.web.selenium"
          depends="compile, compile.tests"
          description="Run web tests using Selenium RC"
          if="gwt.hosts.web.selenium"
          unless="test.web.selenium.disable">
    <echo message="Performing web testing using Selenium RC at ${gwt.hosts.web.selenium}"/>
    <property name="test.web.selenium.args" value="${test.args.web.selenium}"/>
    <fileset id="test.web.selenium.tests" dir="${javac.junit.out}"
             includes="${gwt.junit.testcase.web.includes}"
             excludes="${gwt.junit.testcase.web.excludes}"/>
    <gwt.junit test.name="test.web.selenium"
               test.args='${test.web.selenium.args}'
               test.jvmargs="${test.jvmargs}"
               test.out="${junit.out}/web-selenium"
               test.cases="test.web.selenium.tests">
      <extraclasspaths>
        <path refid="test.extraclasspath"/>
      </extraclasspaths>
    </gwt.junit>
  </target>

  <target name="test.dev.selenium"
          depends="compile, compile.tests"
          description="Run dev-mode tests using Selenium RC servers"
          if="gwt.hosts.dev.selenium"
          unless="test.dev.selenium.disable">
    <echo message="Performing dev-mode testing using Selenium RC at ${gwt.hosts.dev.selenium}"/>
    <property name="test.dev.selenium.args" value="${test.args.dev.selenium}"/>
    <fileset id="test.dev.selenium.tests" dir="${javac.junit.out}"
             includes="${gwt.junit.testcase.dev.includes}"
             excludes="${gwt.junit.testcase.dev.excludes}"/>
    <gwt.junit test.name="test.dev.selenium"
               test.args='${test.dev.selenium.args}'
               test.jvmargs="${test.jvmargs}"
               test.out="${junit.out}/dev-selenium"
               test.cases="test.dev.selenium.tests">
      <extraclasspaths>
        <path refid="test.extraclasspath"/>
      </extraclasspaths>
    </gwt.junit>
  </target>

  <target name="test.nometa.selenium"
          description="Run nometa tests using Selenium RC"
          if="gwt.hosts.web.selenium"
          unless="test.nometa.selenium.disable">
    <echo message="Performing nometa testing using Selenium RC at ${gwt.hosts.web.selenium}"/>
    <property name="test.nometa.selenium.args"
              value="${test.args.web.selenium} -XdisableClassMetadata"/>
    <fileset id="test.nometa.selenium.tests" dir="${javac.junit.out}"
             includes="${gwt.junit.testcase.web.includes}"
             excludes="${gwt.junit.testcase.web.excludes}"/>
    <gwt.junit test.name="test.nometa.selenium"
               test.args='${test.nometa.selenium.args}'
               test.jvmargs="${test.jvmargs}"
               test.out="${junit.out}/nometa-selenium"
               test.cases="test.nometa.selenium.tests">
      <extraclasspaths>
        <path refid="test.extraclasspath"/>
      </extraclasspaths>
    </gwt.junit>
  </target>

  <target name="test.draft.selenium"
          description="Run draft compiled tests using Selenium RC"
          if="gwt.hosts.web.selenium"
          unless="test.draft.selenium.disable">
    <echo message="Performing draft testing using Selenium RC at ${gwt.hosts.web.selenium}"/>
    <property name="test.draft.selenium.args"
              value="${test.args.web.selenium} -draftCompile"/>
    <fileset id="test.draft.selenium.tests" dir="${javac.junit.out}"
             includes="${gwt.junit.testcase.web.includes}"
             excludes="${gwt.junit.testcase.web.excludes}"/>
    <gwt.junit test.name="test.draft.selenium"
               test.args='${test.draft.selenium.args}'
               test.jvmargs="${test.jvmargs}"
               test.out="${junit.out}/draft-selenium"
               test.cases="test.draft.selenium.tests">
      <extraclasspaths>
        <path refid="test.extraclasspath"/>
      </extraclasspaths>
    </gwt.junit>
  </target>

  <target name="test.emma.htmlunit"
          depends="compile, compile.tests"
          description="Run emma tests with HtmlUnit"
          unless="test.emma.htmlunit.disable">
    <fileset id="test.emma.htmlunit.tests" dir="${javac.junit.out}"
             includes="${gwt.junit.testcase.dev.includes}"
             excludes="${gwt.junit.testcase.dev.excludes}"/>
    <gwt.junit test.name="test.emma.htmlunit"
               test.args="${test.args} -standardsMode "
               test.jvmargs="${test.jvmargs}"
               test.out="${junit.out}/emma-htmlunit"
               test.cases="test.emma.htmlunit.tests">
      <extraclasspaths>
        <path refid="test.extraclasspath"/>
        <pathelement location="${gwt.tools.redist}/emma/emma.jar"/>
      </extraclasspaths>
    </gwt.junit>
  </target>

  <target name="test.dev.htmlunit"
          depends="compile, compile.tests"
          description="Run dev-mode tests with HtmlUnit."
          unless="test.dev.htmlunit.disable">
    <fileset id="test.dev.htmlunit.tests" dir="${javac.junit.out}"
             includes="${gwt.junit.testcase.dev.includes}"
             excludes="${gwt.junit.testcase.dev.excludes}"/>
    <gwt.junit test.name="test.dev.htmlunit"
               test.args="${test.args} -standardsMode "
               test.jvmargs="${test.jvmargs}"
               test.out="${junit.out}/dev-htmlunit"
               test.cases="test.dev.htmlunit.tests">
      <extraclasspaths>
        <path refid="test.extraclasspath"/>
      </extraclasspaths>
    </gwt.junit>
  </target>

  <target name="test.hosted.emma" depends="test.emma">
    <echo message="DEPRECATED: test.hosted.emma has been renamed test.emma"/>
  </target>

  <target name="test.hosted" depends="test.dev">
    <echo message="DEPRECATED: test.hosted has been renamed test.dev"/>
  </target>

  <target name="test.web.htmlunit"
          depends="compile, compile.tests"
          description="Run web-mode tests with HtmlUnit."
          unless="test.web.htmlunit.disable">
    <fileset id="test.web.htmlunit.tests" dir="${javac.junit.out}"
             includes="${gwt.junit.testcase.web.includes}"
             excludes="${gwt.junit.testcase.web.excludes}"/>
    <gwt.junit test.name="test.web.htmlunit"
               test.args="${test.args} -out www -prod -standardsMode"
               test.jvmargs="${test.jvmargs}"
               test.out="${junit.out}/web-htmlunit"
               test.cases="test.web.htmlunit.tests">
      <extraclasspaths>
        <path refid="test.extraclasspath"/>
      </extraclasspaths>
    </gwt.junit>
  </target>

  <target name="test.nometa.htmlunit"
          depends="compile, compile.tests"
          description="Run -XdisableClassMetadata tests with HtmlUnit."
          unless="test.nometa.htmlunit.disable">
    <fileset id="test.nometa.htmlunit.tests" dir="${javac.junit.out}"
             includes="${gwt.junit.testcase.web.includes}"
             excludes="${gwt.junit.testcase.web.excludes}"/>
    <gwt.junit test.name="test.nometa.htmlunit"
               test.args="${test.args} -XdisableClassMetadata -out www -prod -standardsMode"
               test.jvmargs="${test.jvmargs}"
               test.out="${junit.out}/nometa-htmlunit"
               test.cases="test.nometa.htmlunit.tests">
      <extraclasspaths>
        <path refid="test.extraclasspath"/>
      </extraclasspaths>
    </gwt.junit>
  </target>

  <target name="test.draft.htmlunit"
          depends="compile, compile.tests"
          description="Run draft compiled HtmlUnit tests (no batching on purpose)"
          unless="test.draft.htmlunit.disable">
    <fileset id="test.draft.htmlunit.tests" dir="${javac.junit.out}"
             includes="${gwt.junit.testcase.web.includes}"
             excludes="${gwt.junit.testcase.web.excludes}"/>
    <gwt.junit test.name="test.draft.htmlunit"
               test.args="${test.args} -draftCompile -out www -prod -standardsMode"
               test.jvmargs="${test.jvmargs}"
               test.out="${junit.out}/draft-htmlunit"
               test.cases="test.draft.htmlunit.tests">
      <extraclasspaths>
        <path refid="test.extraclasspath"/>
      </extraclasspaths>
    </gwt.junit>
  </target>

  <target name="test.coverage.htmlunit"
          depends="compile, compile.tests"
          description="Run tests for coverage support">
    <fileset id="test.coverage.htmlunit.tests" dir="${javac.junit.out}"
             includes="com/google/gwt/dev/js/client/CoverageTest.class"
             excludes=""/>
    <gwt.junit test.name="test.coverage.htmlunit"
               test.args="${test.args} -draftCompile -out www -prod"
               test.jvmargs="${test.jvmargs} -Dgwt.coverage=com/google/gwt/dev/js/client/CoverageTestModule.java,"
               test.out="${junit.out}/coverage-htmlunit"
               test.cases="test.coverage.htmlunit.tests">
      <extraclasspaths>
        <path refid="test.extraclasspath"/>
      </extraclasspaths>
    </gwt.junit>
  </target>

  <target name="test"
          depends="compile, compile.tests"
          description="Run all tests for this project.">
    <!-- Prevent compilation for every target. -->
    <property name="compile.complete" value="true"/>
    <property name="compile.tests.complete" value="true"/>

    <property.ensure name="distro.built" location="${gwt.dev.staging.jar}"
                     message="GWT must be built before performing any tests.  This can be fixed by running ant in the ${gwt.root} directory."/>
    <limit failonerror="true" hours="${test.timeout}">
      <parallel threadsPerProcessor="${gwt.threadsPerProcessor}"
                threadCount="${gwt.threadCount}">
        <!--
          The remote targets must be run sequentially or BrowserManager will queue
          requests, which will cause some tests to timeout while waiting.
        -->
        <sequential>
          <antcall target="test.dev.remote"/>
          <antcall target="test.emma.remote"/>
          <antcall target="test.web.remote"/>
          <antcall target="test.draft.remote"/>
          <antcall target="test.nometa.remote"/>
        </sequential>
        <antcall target="test.dev.selenium"/>
        <antcall target="test.emma.selenium"/>
        <antcall target="test.web.selenium"/>
        <antcall target="test.draft.selenium"/>
        <antcall target="test.nometa.selenium"/>
        <antcall target="test.dev.htmlunit"/>
        <antcall target="test.emma.htmlunit"/>
        <antcall target="test.web.htmlunit"/>
        <antcall target="test.draft.htmlunit"/>
        <antcall target="test.nometa.htmlunit"/>
        <antcall target="test.nongwt"/>
        <antcall target="test.coverage.htmlunit"/>
      </parallel>
    </limit>
  </target>

  <target name="test.htmlunit"
          depends="compile, compile.tests"
          description="Run all HtmlUnit tests">
    <!-- Prevent compilation for every target. -->
    <property name="compile.complete" value="true"/>
    <property name="compile.tests.complete" value="true"/>

    <property.ensure name="distro.built" location="${gwt.dev.staging.jar}"
                     message="GWT must be built before performing any tests.  This can be fixed by running ant in the ${gwt.root} directory."/>
    <limit failonerror="true" hours="${test.timeout}">
      <parallel threadsPerProcessor="${gwt.threadsPerProcessor}"
                threadCount="${gwt.threadCount}">
        <antcall target="test.dev.htmlunit"/>
        <antcall target="test.emma.htmlunit"/>
        <antcall target="test.web.htmlunit"/>
        <antcall target="test.draft.htmlunit"/>
        <antcall target="test.nometa.htmlunit"/>
        <antcall target="test.coverage.htmlunit"/>
      </parallel>
    </limit>
  </target>

  <target name="test.nongwt"
          depends="compile, compile.tests"
          description="Run JRE-only tests."
          unless="test.nongwt.disable">
    <fileset id="test.nongwt.tests" dir="${javac.junit.out}"
             includes="${gwt.nongwt.testcase.includes}"
             excludes="${gwt.nongwt.testcase.excludes}"/>
    <gwt.junit test.name="test.nongwt"
               test.args="${test.args}"
               test.jvmargs="${test.jvmargs}"
               test.out="${junit.out}/nongwt"
               test.cases="test.nongwt.tests">
      <extraclasspaths>
        <path refid="test.extraclasspath"/>
      </extraclasspaths>
    </gwt.junit>
  </target>

  <target name="test.dev"
          depends="compile, compile.tests"
          description="Run dev-mode tests for this project.">
    <!-- Prevent compilation for every target. -->
    <property name="compile.complete" value="true"/>
    <property name="compile.tests.complete" value="true"/>

    <limit failonerror="true" hours="${test.timeout}">
      <parallel threadsPerProcessor="${gwt.threadsPerProcessor}"
                threadCount="${gwt.threadCount}">
        <antcall target="test.dev.htmlunit"/>
        <!-- no-op unless gwt.hosts.dev.remote is defined -->
        <antcall target="test.dev.remote"/>
        <!-- no-op unless gwt.hosts.dev.selenium is defined -->
        <antcall target="test.dev.selenium"/>
      </parallel>
    </limit>
  </target>

  <target name="test.web"
          depends="compile, compile.tests"
          description="Run web-mode tests for this project.">
    <!-- Prevent compilation for every target. -->
    <property name="compile.complete" value="true"/>
    <property name="compile.tests.complete" value="true"/>

    <limit failonerror="true" hours="${test.timeout}">
      <parallel threadsPerProcessor="${gwt.threadsPerProcessor}"
                threadCount="${gwt.threadCount}">
        <antcall target="test.web.htmlunit"/>
        <!-- no-op unless gwt.hosts.web.remote is defined -->
        <antcall target="test.web.remote"/>
        <!-- no-op unless gwt.hosts.web.selenium is defined -->
        <antcall target="test.web.selenium"/>
      </parallel>
    </limit>
  </target>

  <target name="test.emma"
          depends="compile, compile.tests"
          description="Run emma tests for this project.">
    <!-- Prevent compilation for every target. -->
    <property name="compile.complete" value="true"/>
    <property name="compile.tests.complete" value="true"/>

    <limit failonerror="true" hours="${test.timeout}">
      <parallel threadsPerProcessor="${gwt.threadsPerProcessor}"
                threadCount="${gwt.threadCount}">
        <antcall target="test.emma.htmlunit"/>
        <!-- no-op unless gwt.hosts.dev.remote is defined -->
        <antcall target="test.emma.remote"/>
        <!-- no-op unless gwt.hosts.dev.selenium is defined -->
        <antcall target="test.emma.selenium"/>
      </parallel>
    </limit>
  </target>

  <target name="test.draft"
          depends="compile, compile.tests"
          description="Run draft compiled tests for this project.">
    <!-- Prevent compilation for every target. -->
    <property name="compile.complete" value="true"/>
    <property name="compile.tests.complete" value="true"/>

    <limit failonerror="true" hours="${test.timeout}">
      <parallel threadsPerProcessor="${gwt.threadsPerProcessor}"
                threadCount="${gwt.threadCount}">
        <antcall target="test.draft.htmlunit"/>
        <!-- no-op unless gwt.hosts.web.remote is defined -->
        <antcall target="test.draft.remote"/>
        <!-- no-op unless gwt.hosts.web.selenium is defined -->
        <antcall target="test.draft.selenium"/>
      </parallel>
    </limit>
  </target>

  <target name="test.nometa"
          depends="compile, compile.tests"
          description="Run -XdisableClassMetadata tests for this project.">
    <!-- Prevent compilation for every target. -->
    <property name="compile.complete" value="true"/>
    <property name="compile.tests.complete" value="true"/>

    <limit failonerror="true" hours="${test.timeout}">
      <parallel threadsPerProcessor="${gwt.threadsPerProcessor}"
                threadCount="${gwt.threadCount}">
        <antcall target="test.web.htmlunit"/>
        <!-- no-op unless gwt.hosts.web.remote is defined -->
        <antcall target="test.nometa.remote"/>
        <!-- no-op unless gwt.hosts.web.selenium is defined -->
        <antcall target="test.nometa.selenium"/>
      </parallel>
    </limit>
  </target>


  <!-- Validation TCK test and reports -->

  <!-- TODO(nchalko) move the tck target to user/build.xml and then delete
         all of samples/validaitontck -->
  <target name="tck"
          depends="tck.run,tck.report"
          description="Run all tests for this project.">
    <fail
        message="One or more junit tests failed for target: @{test.name} @{test.args}"
        if="junit.failure" status="2"/>
  </target>

  <target name="tck.run"
          depends="compile, compile.tests"
          description="Run all tests for this project.">
    <!-- Prevent compilation for every target. -->
    <property name="compile.complete" value="true"/>
    <property name="compile.tests.complete" value="true"/>

    <property.ensure name="distro.built" location="${gwt.dev.staging.jar}"
                     message="GWT must be built before performing any tests.  This can be fixed by running ant in the ${gwt.root} directory."/>
    <limit failonerror="true" hours="${test.timeout}">

      <antcall target="tck.dev.htmlunit"/>
    </limit>

    <fail
        message="One or more tck tests failed for target: @{test.name} @{test.args}"
        if="junit.failure" status="2"/>
  </target>

  <macrodef name="countMarkedTests">
    <attribute name="annotation" default="NOT SET"/>
    <attribute name="outputproperty" default="jsr303.marked.@{annotation}"/>
    <sequential>

    </sequential>
  </macrodef>

  <macrodef name="compileModule">
    <element name="module"/>
    <sequential>
      <gwt.timer name="Pre-compile module">
        <java classname="com.google.gwt.dev.CompileModule" fork="yes" failonerror="true">
          <classpath>
            <pathelement location="${gwt.root}/user/src"/>
            <pathelement location="${gwt.root}/user/super"/>
            <pathelement location="${gwt.root}/dev/core/src"/>
            <pathelement location="${gwt.root}/dev/core/super"/>
            <pathelement location="${gwt.tools.lib}/javax/validation/validation-api-1.0.0.GA.jar"/>
            <pathelement
                location="${gwt.tools.lib}/javax/validation/validation-api-1.0.0.GA-sources.jar"/>
            <pathelement location="${gwt.root}/build/out/user/bin"/>
            <pathelement location="${gwt.dev.jar}"/>
          </classpath>
          <jvmarg value="-Xmx512M"/>
          <module/>
          <arg value="-strict"/>
          <arg value="-sourceLevel"/>
          <arg value="${javac.source}"/>
          <arg value="-out"/>
          <arg value="${project.build}/bin"/>
        </java>
      </gwt.timer>
    </sequential>
  </macrodef>

  <target name="tck.report">
    <mkdir dir="${junit.out}/tck-report"/>
    <mkdir dir="${junit.out}/tck-report/text"/>

    <scan>
      <fileset dir="test/org/hibernate/jsr303/tck/tests" id="id"/>
      <filterchain>
        <countfilter match="@Failing" property="jsr303.marked.Failing" init="0"/>
        <countfilter match="@NonTckTest" property="jsr303.marked.NonTckTest" init="0"/>
        <countfilter match="@NotSupported" property="jsr303.marked.NotSupported" init="0"/>
        <countfilter match="@TestNotCompatible" property="jsr303.marked.TestNotCompatible"
                     init="0"/>
      </filterchain>
    </scan>

    <!-- force to zero if not set above -->
    <property name="jsr303.marked.Failing" value="0"/>
    <property name="jsr303.marked.NonTckTest" value="0"/>
    <property name="jsr303.marked.NotSupported" value="0"/>
    <property name="jsr303.marked.TestNotCompatible" value="0"/>

    <echo message="Marked Failing = ${jsr303.marked.Failing}"/>
    <echo message="Marked NonTckTest = ${jsr303.marked.NonTckTest}"/>
    <echo message="Marked NotSupported = ${jsr303.marked.NotSupported}"/>
    <echo message="Marked TestNotCompatible = ${jsr303.marked.TestNotCompatible}"/>

    <junitreport todir="${junit.out}/tck-report">
      <fileset dir="${junit.out}/tck-dev-htmlunit">
        <include name="reports/TEST-*.xml"/>
      </fileset>
      <report format="noframes" todir="${junit.out}/tck-report" styledir="style/html">
        <param name="markedFailing" expression="${jsr303.marked.Failing}"/>
        <param name="markedNonTckTest" expression="${jsr303.marked.NonTckTest}"/>
        <param name="markedNotSupported" expression="${jsr303.marked.NotSupported}"/>
        <param name="markedTestNotCompatible" expression="${jsr303.marked.TestNotCompatible}"/>
      </report>
      <report format="noframes" todir="${junit.out}/tck-report/text" styledir="style/text">
        <param name="markedFailing" expression="${jsr303.marked.Failing}"/>
        <param name="markedNonTckTest" expression="${jsr303.marked.NonTckTest}"/>
        <param name="markedNotSupported" expression="${jsr303.marked.NotSupported}"/>
        <param name="markedTestNotCompatible" expression="${jsr303.marked.TestNotCompatible}"/>
      </report>
    </junitreport>

    <concat taskname="JSR 303 TCK Result">
      <filelist>
        <file name="${junit.out}/tck-report/text/junit-noframes.html"/>
      </filelist>
    </concat>

  </target>

  <target name="tck.dev.htmlunit"
          depends="compile, compile.tests"
          description="Run dev-mode tests with HtmlUnit."
          unless="test.dev.htmlunit.disable">
    <fileset id="tck.dev.htmlunit.tests" dir="${javac.junit.out}"
             includes="${gwt.tck.testcase.dev.includes}"
             excludes="${gwt.tck.testcase.dev.excludes}"/>
    <gwt.junit test.name="test.dev.htmlunit"
               test.args="${test.args} -standardsMode "
               test.jvmargs="-ea -Dcom.google.gwt.sample.validationtck.util.Failing.include=true"
               test.out="${junit.out}/tck-dev-htmlunit"
               test.cases="tck.dev.htmlunit.tests"
               haltonfailure="false"
        >
      <extraclasspaths>
        <path refid="test.extraclasspath"/>
      </extraclasspaths>
    </gwt.junit>
  </target>

  <!--
      Merges coverage data for the entire project
  -->
  <target name="emma.merge">
    <delete dir="${emma.merged.out}"/>
    <mkdir dir="${emma.merged.out}"/>
    <emma>
      <merge outfile="${emma.merged.out}/merged.emma">
        <fileset dir="${junit.out}">
          <include name="**/*.emma"/>
          <exclude name="${emma.merged.out}/merged.emma"/>
        </fileset>
      </merge>
    </emma>
    <emma>
      <report sourcepath="${project.classpath.src}">
        <fileset file="${javac.emma.out}/metadata.emma"/>
        <fileset file="${emma.merged.out}/merged.emma"/>
        <txt outfile="${emma.merged.out}/coverage.txt"/>
        <html outfile="${emma.merged.out}/coverage.html"/>
        <xml outfile="${emma.merged.out}/coverage.xml"/>
      </report>
    </emma>
  </target>

  <target name="clean"
          description="Cleans this project's intermediate and output files">
    <delete dir="${project.build}"/>
    <delete file="${project.lib}"/>
  </target>

  <target name="presubmit" depends="test, checkstyle"
          description="runs the gwt api checker, user checkstyle, and user tests">
    <gwt.ant dir=".." target="apicheck-nobuild"/>
  </target>
</project>
Not Found