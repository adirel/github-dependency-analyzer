<?xml version="1.0" standalone="yes"?>
<!--
  Copyright 2004 Sun Microsystems, Inc. All rights reserved.
-->
<project basedir="." default="run">
  <description>
        This example demonstrates how to use the "-catalog"
        compiler switch to handle references to schemas
        in external web sites.
    </description>
  <property name="jaxb.home" value="../.." />
  <path id="classpath">
    <pathelement path="src" />
    <pathelement path="classes" />
    <pathelement path="schemas" />
    <fileset dir="${jaxb.home}" includes="lib/*.jar" />
  </path>
  <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
    <classpath refid="classpath" />
  </taskdef>

  <!--compile Java source files-->
  <target name="compile" description="Compile all Java source files">
    <echo message="Compiling the schema..." />
    <mkdir dir="gen-src" />
    <xjc schema="test.xsd" catalog="catalog.cat" destdir="gen-src">
      <produces dir="gen-src" includes="**/*.java" />
    </xjc>
    <echo message="Compiling the java source files..." />
    <mkdir dir="classes" />
    <javac destdir="classes" debug="on">
      <src path="gen-src" />
      <classpath refid="classpath" />
    </javac>
  </target>

  <target name="run" depends="compile" description="Run the sample app">
    <echo message="done" />
  </target>

  <target name="javadoc" description="Generates javadoc" depends="compile">
    <echo message="Generating javadoc..." />
    <mkdir dir="docs/api" />
    <javadoc sourcepath="gen-src" destdir="docs/api" windowtitle="catalog resolver" useexternalfile="yes">
      <fileset dir="." includes="gen-src/**/*.java" excludes="**/impl/**/*.java" />
    </javadoc>
  </target>

  <target name="clean" description="Deletes all the generated artifacts.">
    <delete dir="docs/api" />
    <delete dir="gen-src" />
    <delete dir="schemas" />
    <delete dir="classes" />
  </target>
</project>

<?xml version="1.0" standalone="yes"?>
<!--
  Copyright 2004 Sun Microsystems, Inc. All rights reserved.
-->
<project basedir="." default="run">
  <description>This example shows how you can use the new JAXB RI Marshaller 
        property "com.sun.xml.bind.characterEscapeHandler" to change 
        the default character escaping behavior.</description>
  <property name="jaxb.home" value="../.." />
  <path id="classpath">
    <pathelement path="src" />
    <pathelement path="classes" />
    <pathelement path="schemas" />
    <fileset dir="${jaxb.home}" includes="lib/*.jar" />
  </path>
  <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
    <classpath refid="classpath" />
  </taskdef>

  <!--compile Java source files-->
  <target name="compile" description="Compile all Java source files">
    <echo message="Compiling the schema..." />
    <mkdir dir="gen-src" />
    <xjc schema="simple.xsd" package="simple" destdir="gen-src">
      <produces dir="gen-src/simple" includes="**/*.java" />
    </xjc>
    <echo message="Compiling the java source files..." />
    <mkdir dir="classes" />
    <javac destdir="classes" debug="on">
      <src path="src" />
      <src path="gen-src" />
      <classpath refid="classpath" />
    </javac>
  </target>

  <target name="run" depends="compile" description="Run the sample app">
    <echo message="Running the sample application..." />
    <java classname="Main" fork="true">
      <classpath refid="classpath" />
      <arg value="test.xml" />
    </java>
  </target>

  <target name="javadoc" description="Generates javadoc" depends="compile">
    <echo message="Generating javadoc..." />
    <mkdir dir="docs/api" />
    <javadoc sourcepath="gen-src" destdir="docs/api" windowtitle="character-escape" useexternalfile="yes">
      <fileset dir="." includes="gen-src/**/*.java" excludes="**/impl/**/*.java" />
    </javadoc>
  </target>

  <target name="clean" description="Deletes all the generated artifacts.">
    <delete dir="docs/api" />
    <delete dir="gen-src" />
    <delete dir="schemas" />
    <delete dir="classes" />
  </target>
</project>

<?xml version="1.0" standalone="yes"?>
<!--
  Copyright 2004 Sun Microsystems, Inc. All rights reserved.
-->
<project basedir="." default="run">
  <description>
      This little DI-container-by-JAXB example demonstrates how one can avoid
      passing in a list of classes upfront, and instead load classes lazily.
    </description>
  <property name="jaxb.home" value="../.." />
  <path id="classpath">
    <pathelement path="src" />
    <pathelement path="classes" />
    <pathelement path="schemas" />
    <fileset dir="${jaxb.home}" includes="lib/*.jar" />
  </path>
  <!--compile Java source files-->
  <target name="compile" description="Compile all Java source files">
    <echo message="Compiling the java source files..." />
    <mkdir dir="classes" />
    <javac destdir="classes" debug="on">
      <src path="src" />
      <classpath refid="classpath" />
    </javac>
  </target>

  <target name="run" depends="compile" description="Run the sample app">
    <echo message="Running the sample application..." />
    <java classname="Main" fork="true">
      <classpath refid="classpath" />
    </java>
  </target>

  <target name="javadoc" description="Generates javadoc" depends="compile">
    <echo message="Generating javadoc..." />
    <mkdir dir="docs/api" />
    <javadoc sourcepath="gen-src" destdir="docs/api" windowtitle="ClassResolver" useexternalfile="yes">
      <fileset dir="." includes="gen-src/**/*.java" excludes="**/impl/**/*.java" />
    </javadoc>
  </target>

  <target name="clean" description="Deletes all the generated artifacts.">
    <delete dir="docs/api" />
    <delete dir="gen-src" />
    <delete dir="schemas" />
    <delete dir="classes" />
  </target>
</project>

<?xml version="1.0" standalone="yes"?>
<!--
  Copyright 2004 Sun Microsystems, Inc. All rights reserved.
-->
<project basedir="." default="run">
  <description>
        This sample application demonstrates how to use the ObjectFactory 
        class to create a Java content tree from scratch and marshal it to 
        XML data. It also demonstrates how to add content to a JAXB List 
        property.
    </description>
  <property name="jaxb.home" value="../.." />
  <path id="classpath">
    <pathelement path="src" />
    <pathelement path="classes" />
    <pathelement path="schemas" />
    <fileset dir="${jaxb.home}" includes="lib/*.jar" />
  </path>
  <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
    <classpath refid="classpath" />
  </taskdef>

  <!--compile Java source files-->
  <target name="compile" description="Compile all Java source files">
    <echo message="Compiling the schema..." />
    <mkdir dir="gen-src" />
    <xjc schema="po.xsd" package="primer.po" destdir="gen-src">
      <produces dir="gen-src/primer.po" includes="**/*.java" />
    </xjc>
    <echo message="Compiling the java source files..." />
    <mkdir dir="classes" />
    <javac destdir="classes" debug="on">
      <src path="src" />
      <src path="gen-src" />
      <classpath refid="classpath" />
    </javac>
  </target>

  <target name="run" depends="compile" description="Run the sample app">
    <echo message="Running the sample application..." />
    <java classname="Main" fork="true">
      <classpath refid="classpath" />
    </java>
  </target>

  <target name="javadoc" description="Generates javadoc" depends="compile">
    <echo message="Generating javadoc..." />
    <mkdir dir="docs/api" />
    <javadoc sourcepath="gen-src" destdir="docs/api" windowtitle="create-marshal (formerly SampleApp3)" useexternalfile="yes">
      <fileset dir="." includes="gen-src/**/*.java" excludes="**/impl/**/*.java" />
    </javadoc>
  </target>

  <target name="clean" description="Deletes all the generated artifacts.">
    <delete dir="docs/api" />
    <delete dir="gen-src" />
    <delete dir="schemas" />
    <delete dir="classes" />
  </target>
</project>

<?xml version="1.0" standalone="yes"?>
<!--
  Copyright 2004 Sun Microsystems, Inc. All rights reserved.
-->
<project basedir="." default="run">
  <description>
      JAXB RI's vendor extension "CycleRecoverable" provides application a hook to handle
      cycles in the object graph. Advanced.
    </description>
  <property name="jaxb.home" value="../.." />
  <path id="classpath">
    <pathelement path="src" />
    <pathelement path="classes" />
    <pathelement path="schemas" />
    <fileset dir="${jaxb.home}" includes="lib/*.jar" />
  </path>
  <!--compile Java source files-->
  <target name="compile" description="Compile all Java source files">
    <echo message="Compiling the java source files..." />
    <mkdir dir="classes" />
    <javac destdir="classes" debug="on">
      <src path="src" />
      <classpath refid="classpath" />
    </javac>
  </target>

  <target name="run" depends="compile" description="Run the sample app">
    <echo message="Running the sample application..." />
    <java classname="Main" fork="true">
      <classpath refid="classpath" />
    </java>
  </target>

  <target name="javadoc" description="Generates javadoc" depends="compile">
    <echo message="Generating javadoc..." />
    <mkdir dir="docs/api" />
    <javadoc sourcepath="gen-src" destdir="docs/api" windowtitle="Application-driven cycle handling" useexternalfile="yes">
      <fileset dir="." includes="gen-src/**/*.java" excludes="**/impl/**/*.java" />
    </javadoc>
  </target>

  <target name="clean" description="Deletes all the generated artifacts.">
    <delete dir="docs/api" />
    <delete dir="gen-src" />
    <delete dir="schemas" />
    <delete dir="classes" />
  </target>
</project>

<?xml version="1.0" standalone="yes"?>
<!--
  Copyright 2004 Sun Microsystems, Inc. All rights reserved.
-->
<project basedir="." default="run">
  <description>
        This sample application is very similar to the inline-customize sample 
        application (formerly SampleApp6), but illustrates an easier, but not 
        as robust, &lt;jaxb:javaType&gt; customization.
    </description>
  <property name="jaxb.home" value="../.." />
  <path id="classpath">
    <pathelement path="src" />
    <pathelement path="classes" />
    <pathelement path="schemas" />
    <fileset dir="${jaxb.home}" includes="lib/*.jar" />
  </path>
  <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
    <classpath refid="classpath" />
  </taskdef>

  <!--compile Java source files-->
  <target name="compile" description="Compile all Java source files">
    <echo message="Compiling the schema..." />
    <mkdir dir="gen-src" />
    <xjc schema="po.xsd" destdir="gen-src">
      <produces dir="gen-src" includes="**/*.java" />
    </xjc>
    <echo message="Compiling the java source files..." />
    <mkdir dir="classes" />
    <javac destdir="classes" debug="on">
      <src path="src" />
      <src path="gen-src" />
      <classpath refid="classpath" />
    </javac>
  </target>

  <target name="run" depends="compile" description="Run the sample app">
    <echo message="Running the sample application..." />
    <java classname="Main" fork="true">
      <classpath refid="classpath" />
    </java>
  </target>

  <target name="javadoc" description="Generates javadoc" depends="compile">
    <echo message="Generating javadoc..." />
    <mkdir dir="docs/api" />
    <javadoc sourcepath="gen-src" destdir="docs/api" windowtitle="datatypeconverter (formerly SampleApp7)" useexternalfile="yes">
      <fileset dir="." includes="gen-src/**/*.java" excludes="**/impl/**/*.java" />
    </javadoc>
  </target>

  <target name="clean" description="Deletes all the generated artifacts.">
    <delete dir="docs/api" />
    <delete dir="gen-src" />
    <delete dir="schemas" />
    <delete dir="classes" />
  </target>
</project>

<?xml version="1.0" standalone="yes"?>
<!--
  Copyright 2004 Sun Microsystems, Inc. All rights reserved.
-->
<project basedir="." default="run">
  <description>
        This sample application illustrate some of the DTD support available in 
        the JAXB RI's extension mode. Please refer to the &lt;a href="vendor.html&gt;
        Vendor Extensions&lt;/a&gt; page for more detail.
    </description>
  <property name="jaxb.home" value="../.." />
  <path id="classpath">
    <pathelement path="src" />
    <pathelement path="classes" />
    <pathelement path="schemas" />
    <fileset dir="${jaxb.home}" includes="lib/*.jar" />
  </path>
  <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
    <classpath refid="classpath" />
  </taskdef>

  <!--compile Java source files-->
  <target name="compile" description="Compile all Java source files">
    <echo message="Compiling the schema..." />
    <mkdir dir="gen-src" />
    <xjc schema="nameCard.dtd" binding="nameCard.jaxb" destdir="gen-src">
      <arg value="-dtd" />
      <produces dir="gen-src" includes="**/*.java" />
    </xjc>
    <echo message="Compiling the java source files..." />
    <mkdir dir="classes" />
    <javac destdir="classes" debug="on">
      <src path="src" />
      <src path="gen-src" />
      <classpath refid="classpath" />
    </javac>
  </target>

  <target name="run" depends="compile" description="Run the sample app">
    <echo message="Running the sample application..." />
    <java classname="DTDSample" fork="true">
      <classpath refid="classpath" />
      <arg path="test.xml" />
    </java>
  </target>

  <target name="javadoc" description="Generates javadoc" depends="compile">
    <echo message="Generating javadoc..." />
    <mkdir dir="docs/api" />
    <javadoc sourcepath="gen-src" destdir="docs/api" windowtitle="dtd" useexternalfile="yes">
      <fileset dir="." includes="gen-src/**/*.java" excludes="**/impl/**/*.java" />
    </javadoc>
  </target>

  <target name="clean" description="Deletes all the generated artifacts.">
    <delete dir="docs/api" />
    <delete dir="gen-src" />
    <delete dir="schemas" />
    <delete dir="classes" />
  </target>
</project>

<?xml version="1.0" standalone="yes"?>
<!--
  Copyright 2004 Sun Microsystems, Inc. All rights reserved.
-->
<project basedir="." default="run">
  <description>
        This sample application illustrates how W3C XML Schema substitution 
        groups are supported in JAXB RI's extension mode. Please refer to the 
        &lt;a href="vendor.html"&gt;Vendor Extensions&lt;/a&gt; page for more detail.
    </description>
  <property name="jaxb.home" value="../.." />
  <path id="classpath">
    <pathelement path="src" />
    <pathelement path="classes" />
    <pathelement path="schemas" />
    <fileset dir="${jaxb.home}" includes="lib/*.jar" />
  </path>
  <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
    <classpath refid="classpath" />
  </taskdef>

  <!--compile Java source files-->
  <target name="compile" description="Compile all Java source files">
    <echo message="Compiling the schema..." />
    <mkdir dir="gen-src" />
    <xjc schema="folder.xsd" package="org.example" destdir="gen-src">
      <produces dir="gen-src/org.example" includes="**/*.java" />
    </xjc>
    <echo message="Compiling the java source files..." />
    <mkdir dir="classes" />
    <javac destdir="classes" debug="on">
      <src path="src" />
      <src path="gen-src" />
      <classpath refid="classpath" />
    </javac>
  </target>

  <target name="run" depends="compile" description="Run the sample app">
    <echo message="Running the sample application..." />
    <java classname="Main" fork="true">
      <classpath refid="classpath" />
    </java>
  </target>

  <target name="javadoc" description="Generates javadoc" depends="compile">
    <echo message="Generating javadoc..." />
    <mkdir dir="docs/api" />
    <javadoc sourcepath="gen-src" destdir="docs/api" windowtitle="element-substitution" useexternalfile="yes">
      <fileset dir="." includes="gen-src/**/*.java" excludes="**/impl/**/*.java" />
    </javadoc>
  </target>

  <target name="clean" description="Deletes all the generated artifacts.">
    <delete dir="docs/api" />
    <delete dir="gen-src" />
    <delete dir="schemas" />
    <delete dir="classes" />
  </target>
</project>

<?xml version="1.0" standalone="yes"?>
<!--
  Copyright 2004 Sun Microsystems, Inc. All rights reserved.
-->
<project basedir="." default="run">
  <description>
        This sample application is identical to the datatypeconverter sample 
        application (formerly SampleApp7) except that the binding customizations 
        are contained in an external binding file.
    </description>
  <property name="jaxb.home" value="../.." />
  <path id="classpath">
    <pathelement path="src" />
    <pathelement path="classes" />
    <pathelement path="schemas" />
    <fileset dir="${jaxb.home}" includes="lib/*.jar" />
  </path>
  <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
    <classpath refid="classpath" />
  </taskdef>

  <!--compile Java source files-->
  <target name="compile" description="Compile all Java source files">
    <echo message="Compiling the schema..." />
    <mkdir dir="gen-src" />
    <xjc schema="po.xsd" binding="binding.xjb" destdir="gen-src">
      <produces dir="gen-src" includes="**/*.java" />
    </xjc>
    <echo message="Compiling the java source files..." />
    <mkdir dir="classes" />
    <javac destdir="classes" debug="on">
      <src path="src" />
      <src path="gen-src" />
      <classpath refid="classpath" />
    </javac>
  </target>

  <target name="run" depends="compile" description="Run the sample app">
    <echo message="Running the sample application..." />
    <java classname="Main" fork="true">
      <classpath refid="classpath" />
    </java>
  </target>

  <target name="javadoc" description="Generates javadoc" depends="compile">
    <echo message="Generating javadoc..." />
    <mkdir dir="docs/api" />
    <javadoc sourcepath="gen-src" destdir="docs/api" windowtitle="external-customize (formerly SampleApp8)" useexternalfile="yes">
      <fileset dir="." includes="gen-src/**/*.java" excludes="**/impl/**/*.java" />
    </javadoc>
  </target>

  <target name="clean" description="Deletes all the generated artifacts.">
    <delete dir="docs/api" />
    <delete dir="gen-src" />
    <delete dir="schemas" />
    <delete dir="classes" />
  </target>
</project>

<?xml version="1.0" standalone="yes"?>
<!--
  Copyright 2004 Sun Microsystems, Inc. All rights reserved.
-->
<project basedir="." default="run">
  <description>
        Another binding customization example that illustrates how to resolve 
        name conflicts. Running this sample without the binding file will
        result in name collisions (see readme.txt) . Running "ant" will use 
        the binding customizations to resolve the name conflicts while 
        compiling the schema.
    </description>
  <property name="jaxb.home" value="../.." />
  <path id="classpath">
    <pathelement path="src" />
    <pathelement path="classes" />
    <pathelement path="schemas" />
    <fileset dir="${jaxb.home}" includes="lib/*.jar" />
  </path>
  <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
    <classpath refid="classpath" />
  </taskdef>

  <!--compile Java source files-->
  <target name="compile" description="Compile all Java source files">
    <echo message="Compiling the schema..." />
    <mkdir dir="gen-src" />
    <xjc schema="example.xsd" binding="binding.xjb" destdir="gen-src">
      <produces dir="gen-src" includes="**/*.java" />
    </xjc>
    <echo message="Compiling the java source files..." />
    <mkdir dir="classes" />
    <javac destdir="classes" debug="on">
      <src path="src" />
      <src path="gen-src" />
      <classpath refid="classpath" />
    </javac>
  </target>

  <target name="run" depends="compile" description="Run the sample app">
    <echo message="Running the sample application..." />
    <java classname="Main" fork="true">
      <classpath refid="classpath" />
    </java>
  </target>

  <target name="javadoc" description="Generates javadoc" depends="compile">
    <echo message="Generating javadoc..." />
    <mkdir dir="docs/api" />
    <javadoc sourcepath="gen-src" destdir="docs/api" windowtitle="fix-collides (formerly part of SampleApp9)" useexternalfile="yes">
      <fileset dir="." includes="gen-src/**/*.java" excludes="**/impl/**/*.java" />
    </javadoc>
  </target>

  <target name="clean" description="Deletes all the generated artifacts.">
    <delete dir="docs/api" />
    <delete dir="gen-src" />
    <delete dir="schemas" />
    <delete dir="classes" />
  </target>
</project>

<?xml version="1.0" standalone="yes"?>
<!--
  Copyright 2004 Sun Microsystems, Inc. All rights reserved.
-->
<project basedir="." default="run">
  <description>
        This sample application demonstrates how to customize the default 
        binding produced by the XJC binding compiler.
    </description>
  <property name="jaxb.home" value="../.." />
  <path id="classpath">
    <pathelement path="src" />
    <pathelement path="classes" />
    <pathelement path="schemas" />
    <fileset dir="${jaxb.home}" includes="lib/*.jar" />
  </path>
  <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
    <classpath refid="classpath" />
  </taskdef>

  <!--compile Java source files-->
  <target name="compile" description="Compile all Java source files">
    <mkdir dir="classes" />
    <javac destdir="classes" debug="on" srcdir="src">
      <include name="**/MyDatatypeConverter.java" />
      <classpath refid="classpath" />
    </javac>
    <echo message="Compiling the schema..." />
    <mkdir dir="gen-src" />
    <xjc schema="po.xsd" destdir="gen-src">
      <produces dir="gen-src" includes="**/*.java" />
      <classpath>
        <!--XJC needs to read compiled datatype converters-->
        <pathelement path="classes" />
      </classpath>
    </xjc>
    <echo message="Compiling the java source files..." />
    <mkdir dir="classes" />
    <javac destdir="classes" debug="on">
      <src path="src" />
      <src path="gen-src" />
      <classpath refid="classpath" />
    </javac>
  </target>

  <target name="run" depends="compile" description="Run the sample app">
    <echo message="Running the sample application..." />
    <java classname="Main" fork="true">
      <classpath refid="classpath" />
    </java>
  </target>

  <target name="javadoc" description="Generates javadoc" depends="compile">
    <echo message="Generating javadoc..." />
    <mkdir dir="docs/api" />
    <javadoc sourcepath="gen-src" destdir="docs/api" windowtitle="inline-customize (formerly SampleApp6)" useexternalfile="yes">
      <fileset dir="." includes="gen-src/**/*.java" excludes="**/impl/**/*.java" />
    </javadoc>
  </target>

  <target name="clean" description="Deletes all the generated artifacts.">
    <delete dir="docs/api" />
    <delete dir="gen-src" />
    <delete dir="schemas" />
    <delete dir="classes" />
  </target>
</project>

<?xml version="1.0" standalone="yes"?>
<!--
  Copyright 2004 Sun Microsystems, Inc. All rights reserved.
-->
<project basedir="." default="run">
  <description>
      This sample application demonstrates marshalling, unmarshalling and
      unmarshal validation with existing Java classes annotated with 
      JAXB annotations.
    </description>
  <property name="jaxb.home" value="../.." />
  <path id="classpath">
    <pathelement path="src" />
    <pathelement path="classes" />
    <pathelement path="schemas" />
    <fileset dir="${jaxb.home}" includes="lib/*.jar" />
  </path>
  <taskdef name="schemagen" classname="com.sun.tools.jxc.SchemaGenTask">
    <classpath refid="classpath" />
  </taskdef>

  <!--compile Java source files-->
  <target name="compile" description="Compile all Java source files">
    <echo message="Generating schemas..." />
    <mkdir dir="schemas" />
    <schemagen destdir="schemas">
      <src path="src" />
      <classpath refid="classpath" />
    </schemagen>
    <echo message="Compiling the java source files..." />
    <mkdir dir="classes" />
    <javac destdir="classes" debug="on">
      <src path="src" />
      <classpath refid="classpath" />
    </javac>
  </target>

  <target name="run" depends="compile" description="Run the sample app">
    <echo message="Running the sample application..." />
    <java classname="Main" fork="true">
      <classpath refid="classpath" />
    </java>
  </target>

  <target name="javadoc" description="Generates javadoc" depends="compile">
    <echo message="Generating javadoc..." />
    <mkdir dir="docs/api" />
    <javadoc sourcepath="gen-src" destdir="docs/api" windowtitle="Java to Schema Binding" useexternalfile="yes">
      <fileset dir="." includes="gen-src/**/*.java" excludes="**/impl/**/*.java" />
    </javadoc>
  </target>

  <target name="clean" description="Deletes all the generated artifacts.">
    <delete dir="docs/api" />
    <delete dir="gen-src" />
    <delete dir="schemas" />
    <delete dir="classes" />
  </target>
</project>

<?xml version="1.0" standalone="yes"?>
<!--
  Copyright 2004 Sun Microsystems, Inc. All rights reserved.
-->
<project basedir="." default="run">
  <description>
      This sample application demonstrates the use of mapping annotations
      @XmlAccessorOrder and @XmlType.propOrder in Java classes for ordering 
      properties and fields in Java to schema bindings.
    </description>
  <property name="jaxb.home" value="../.." />
  <path id="classpath">
    <pathelement path="src" />
    <pathelement path="classes" />
    <pathelement path="schemas" />
    <fileset dir="${jaxb.home}" includes="lib/*.jar" />
  </path>
  <taskdef name="schemagen" classname="com.sun.tools.jxc.SchemaGenTask">
    <classpath refid="classpath" />
  </taskdef>

  <!--compile Java source files-->
  <target name="compile" description="Compile all Java source files">
    <echo message="Generating schemas..." />
    <mkdir dir="schemas" />
    <schemagen destdir="schemas">
      <src path="src" />
      <exclude name="Main.java" />
      <classpath refid="classpath" />
    </schemagen>
    <echo message="Compiling the java source files..." />
    <mkdir dir="classes" />
    <javac destdir="classes" debug="on">
      <src path="src" />
      <classpath refid="classpath" />
    </javac>
  </target>

  <target name="run" depends="compile" description="Run the sample app">
    <echo message="Running the sample application..." />
    <java classname="Main" fork="true">
      <classpath refid="classpath" />
    </java>
  </target>

  <target name="javadoc" description="Generates javadoc" depends="compile">
    <echo message="Generating javadoc..." />
    <mkdir dir="docs/api" />
    <javadoc sourcepath="gen-src" destdir="docs/api" windowtitle="Ordering Properties and Fieldes in Java to Schema Bindings" useexternalfile="yes">
      <fileset dir="." includes="gen-src/**/*.java" excludes="**/impl/**/*.java" />
    </javadoc>
  </target>

  <target name="clean" description="Deletes all the generated artifacts.">
    <delete dir="docs/api" />
    <delete dir="gen-src" />
    <delete dir="schemas" />
    <delete dir="classes" />
  </target>
</project>

<?xml version="1.0" standalone="yes"?>
<!--
  Copyright 2004 Sun Microsystems, Inc. All rights reserved.
-->
<project basedir="." default="run">
  <description>
      This sample application demonstrates the use of interface XmlAdapter 
      and annotation XmlJavaTypeAdapter for custom marshaling/unmarshaling 
      XML content into/out of a Java type.
    </description>
  <property name="jaxb.home" value="../.." />
  <path id="classpath">
    <pathelement path="src" />
    <pathelement path="classes" />
    <pathelement path="schemas" />
    <fileset dir="${jaxb.home}" includes="lib/*.jar" />
  </path>
  <taskdef name="schemagen" classname="com.sun.tools.jxc.SchemaGenTask">
    <classpath refid="classpath" />
  </taskdef>

  <!--compile Java source files-->
  <target name="compile" description="Compile all Java source files">
    <echo message="Generating schemas..." />
    <mkdir dir="schemas" />
    <schemagen destdir="schemas">
      <src path="src" />
      <exclude name="Main.java" />
      <exclude name="shoppingCart/AdapterPurchaseListToHashMap.java" />
      <classpath refid="classpath" />
    </schemagen>
    <echo message="Compiling the java source files..." />
    <mkdir dir="classes" />
    <javac destdir="classes" debug="on">
      <src path="src" />
      <classpath refid="classpath" />
    </javac>
  </target>

  <target name="run" depends="compile" description="Run the sample app">
    <echo message="Running the sample application..." />
    <java classname="Main" fork="true">
      <classpath refid="classpath" />
    </java>
  </target>

  <target name="javadoc" description="Generates javadoc" depends="compile">
    <echo message="Generating javadoc..." />
    <mkdir dir="docs/api" />
    <javadoc sourcepath="gen-src" destdir="docs/api" windowtitle="Adapters for custom marshaling/unmarshaling XML content" useexternalfile="yes">
      <fileset dir="." includes="gen-src/**/*.java" excludes="**/impl/**/*.java" />
    </javadoc>
  </target>

  <target name="clean" description="Deletes all the generated artifacts.">
    <delete dir="docs/api" />
    <delete dir="gen-src" />
    <delete dir="schemas" />
    <delete dir="classes" />
  </target>
</project>

<?xml version="1.0" standalone="yes"?>
<!--
  Copyright 2004 Sun Microsystems, Inc. All rights reserved.
-->
<project basedir="." default="run">
  <description>
      This sample application demonstrates the use of annotation
      @XmlAttribute for defining Java properties and fields as
      XML attributes.
    </description>
  <property name="jaxb.home" value="../.." />
  <path id="classpath">
    <pathelement path="src" />
    <pathelement path="classes" />
    <pathelement path="schemas" />
    <fileset dir="${jaxb.home}" includes="lib/*.jar" />
  </path>
  <taskdef name="schemagen" classname="com.sun.tools.jxc.SchemaGenTask">
    <classpath refid="classpath" />
  </taskdef>

  <!--compile Java source files-->
  <target name="compile" description="Compile all Java source files">
    <echo message="Generating schemas..." />
    <mkdir dir="schemas" />
    <schemagen destdir="schemas">
      <src path="src" />
      <exclude name="Main.java" />
      <classpath refid="classpath" />
    </schemagen>
    <echo message="Compiling the java source files..." />
    <mkdir dir="classes" />
    <javac destdir="classes" debug="on">
      <src path="src" />
      <classpath refid="classpath" />
    </javac>
  </target>

  <target name="run" depends="compile" description="Run the sample app">
    <echo message="Running the sample application..." />
    <java classname="Main" fork="true">
      <classpath refid="classpath" />
    </java>
  </target>

  <target name="javadoc" description="Generates javadoc" depends="compile">
    <echo message="Generating javadoc..." />
    <mkdir dir="docs/api" />
    <javadoc sourcepath="gen-src" destdir="docs/api" windowtitle="@XmlAttribute used to define properties and fields as XML Attributes" useexternalfile="yes">
      <fileset dir="." includes="gen-src/**/*.java" excludes="**/impl/**/*.java" />
    </javadoc>
  </target>

  <target name="clean" description="Deletes all the generated artifacts.">
    <delete dir="docs/api" />
    <delete dir="gen-src" />
    <delete dir="schemas" />
    <delete dir="classes" />
  </target>
</project>

<?xml version="1.0" standalone="yes"?>
<!--
  Copyright 2004 Sun Microsystems, Inc. All rights reserved.
-->
<project basedir="." default="run">
  <description>
      This sample application demonstrates the use of annotation
      @XmlRootElement to define a class to be an XML element.
    </description>
  <property name="jaxb.home" value="../.." />
  <path id="classpath">
    <pathelement path="src" />
    <pathelement path="classes" />
    <pathelement path="schemas" />
    <fileset dir="${jaxb.home}" includes="lib/*.jar" />
  </path>
  <taskdef name="schemagen" classname="com.sun.tools.jxc.SchemaGenTask">
    <classpath refid="classpath" />
  </taskdef>

  <!--compile Java source files-->
  <target name="compile" description="Compile all Java source files">
    <echo message="Generating schemas..." />
    <mkdir dir="schemas" />
    <schemagen destdir="schemas">
      <src path="src" />
      <exclude name="Main.java" />
      <classpath refid="classpath" />
    </schemagen>
    <echo message="Compiling the java source files..." />
    <mkdir dir="classes" />
    <javac destdir="classes" debug="on">
      <src path="src" />
      <classpath refid="classpath" />
    </javac>
  </target>

  <target name="run" depends="compile" description="Run the sample app">
    <echo message="Running the sample application..." />
    <java classname="Main" fork="true">
      <classpath refid="classpath" />
    </java>
  </target>

  <target name="javadoc" description="Generates javadoc" depends="compile">
    <echo message="Generating javadoc..." />
    <mkdir dir="docs/api" />
    <javadoc sourcepath="gen-src" destdir="docs/api" windowtitle="Defining XML elements via @XmlRootElement" useexternalfile="yes">
      <fileset dir="." includes="gen-src/**/*.java" excludes="**/impl/**/*.java" />
    </javadoc>
  </target>

  <target name="clean" description="Deletes all the generated artifacts.">
    <delete dir="docs/api" />
    <delete dir="gen-src" />
    <delete dir="schemas" />
    <delete dir="classes" />
  </target>
</project>

<?xml version="1.0" standalone="yes"?>
<!--
  Copyright 2004 Sun Microsystems, Inc. All rights reserved.
-->
<project basedir="." default="run">
  <description>
      This sample application demonstrates the use of annotation
      @XmlSchemaType to customize the mapping of a property or field to 
      an XML built-in type.
    </description>
  <property name="jaxb.home" value="../.." />
  <path id="classpath">
    <pathelement path="src" />
    <pathelement path="classes" />
    <pathelement path="schemas" />
    <fileset dir="${jaxb.home}" includes="lib/*.jar" />
  </path>
  <taskdef name="schemagen" classname="com.sun.tools.jxc.SchemaGenTask">
    <classpath refid="classpath" />
  </taskdef>

  <!--compile Java source files-->
  <target name="compile" description="Compile all Java source files">
    <echo message="Generating schemas..." />
    <mkdir dir="schemas" />
    <schemagen destdir="schemas">
      <src path="src" />
      <exclude name="Main.java" />
      <classpath refid="classpath" />
    </schemagen>
    <echo message="Compiling the java source files..." />
    <mkdir dir="classes" />
    <javac destdir="classes" debug="on">
      <src path="src" />
      <classpath refid="classpath" />
    </javac>
  </target>

  <target name="run" depends="compile" description="Run the sample app">
    <echo message="Running the sample application..." />
    <java classname="Main" fork="true">
      <classpath refid="classpath" />
    </java>
  </target>

  <target name="javadoc" description="Generates javadoc" depends="compile">
    <echo message="Generating javadoc..." />
    <mkdir dir="docs/api" />
    <javadoc sourcepath="gen-src" destdir="docs/api" windowtitle="Annotation @XmlSchemaType is used to customize the mapping of a 
	property or field to an XML built-in type." useexternalfile="yes">
      <fileset dir="." includes="gen-src/**/*.java" excludes="**/impl/**/*.java" />
    </javadoc>
  </target>

  <target name="clean" description="Deletes all the generated artifacts.">
    <delete dir="docs/api" />
    <delete dir="gen-src" />
    <delete dir="schemas" />
    <delete dir="classes" />
  </target>
</project>

<?xml version="1.0" standalone="yes"?>
<!--
  Copyright 2004 Sun Microsystems, Inc. All rights reserved.
-->
<project basedir="." default="run">
  <description>
      This sample application demonstrates the use of mapping annotations
      @XmlAccessorOrder and @XmlType.propOrder in Java classes for ordering 
      properties and fields in Java to schema bindings.
    </description>
  <property name="jaxb.home" value="../.." />
  <path id="classpath">
    <pathelement path="src" />
    <pathelement path="classes" />
    <pathelement path="schemas" />
    <fileset dir="${jaxb.home}" includes="lib/*.jar" />
  </path>
  <taskdef name="schemagen" classname="com.sun.tools.jxc.SchemaGenTask">
    <classpath refid="classpath" />
  </taskdef>

  <!--compile Java source files-->
  <target name="compile" description="Compile all Java source files">
    <echo message="Generating schemas..." />
    <mkdir dir="schemas" />
    <schemagen destdir="schemas">
      <src path="src" />
      <exclude name="Main.java" />
      <classpath refid="classpath" />
    </schemagen>
    <echo message="Compiling the java source files..." />
    <mkdir dir="classes" />
    <javac destdir="classes" debug="on">
      <src path="src" />
      <classpath refid="classpath" />
    </javac>
  </target>

  <target name="run" depends="compile" description="Run the sample app">
    <echo message="Running the sample application..." />
    <java classname="Main" fork="true">
      <classpath refid="classpath" />
    </java>
  </target>

  <target name="javadoc" description="Generates javadoc" depends="compile">
    <echo message="Generating javadoc..." />
    <mkdir dir="docs/api" />
    <javadoc sourcepath="gen-src" destdir="docs/api" windowtitle="Ordering Properties and Fieldes in Java to Schema Bindings" useexternalfile="yes">
      <fileset dir="." includes="gen-src/**/*.java" excludes="**/impl/**/*.java" />
    </javadoc>
  </target>

  <target name="clean" description="Deletes all the generated artifacts.">
    <delete dir="docs/api" />
    <delete dir="gen-src" />
    <delete dir="schemas" />
    <delete dir="classes" />
  </target>
</project>

<?xml version="1.0" standalone="yes"?>
<!--
  Copyright 2004 Sun Microsystems, Inc. All rights reserved.
-->
<project basedir="." default="run">
  <description>
        This sample shows how to use the new non-standard locator support.  By 
        following the instructions in the readme.txt file, you can cause all of 
        the generated impl classes to implement a new interface that provides 
        more information about error locations.  When a ValidationEvent happens 
        on your content tree, simply retrieve the object and cast it down to 
        &lt;tt&gt;com.sun.xml.bind.extra.Locatable&lt;/tt&gt;.
    </description>
  <property name="jaxb.home" value="../.." />
  <path id="classpath">
    <pathelement path="src" />
    <pathelement path="classes" />
    <pathelement path="schemas" />
    <fileset dir="${jaxb.home}" includes="lib/*.jar" />
  </path>
  <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
    <classpath refid="classpath" />
  </taskdef>

  <!--compile Java source files-->
  <target name="compile" description="Compile all Java source files">
    <echo message="Compiling the schema..." />
    <mkdir dir="gen-src" />
    <xjc extension="true" schema="po.xsd" package="primer.myPo" destdir="gen-src">
      <arg value="-Xlocator" />
      <produces dir="gen-src/primer.myPo" includes="**/*.java" />
    </xjc>
    <echo message="Compiling the java source files..." />
    <mkdir dir="classes" />
    <javac destdir="classes" debug="on">
      <src path="gen-src" />
      <classpath refid="classpath" />
    </javac>
  </target>

  <target name="run" depends="compile" description="Run the sample app">
    <echo message="done" />
  </target>

  <target name="clean" description="Deletes all the generated artifacts.">
    <delete dir="gen-src" />
    <delete dir="schemas" />
    <delete dir="classes" />
  </target>
</project>

<?xml version="1.0" standalone="yes"?>
<!--
  Copyright 2004 Sun Microsystems, Inc. All rights reserved.
-->
<project basedir="." default="run">
  <description>
        This sample application demonstrates how to modify a java content tree 
        and marshal it back to XML data.
    </description>
  <property name="jaxb.home" value="../.." />
  <path id="classpath">
    <pathelement path="src" />
    <pathelement path="classes" />
    <pathelement path="schemas" />
    <fileset dir="${jaxb.home}" includes="lib/*.jar" />
  </path>
  <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
    <classpath refid="classpath" />
  </taskdef>

  <!--compile Java source files-->
  <target name="compile" description="Compile all Java source files">
    <echo message="Compiling the schema..." />
    <mkdir dir="gen-src" />
    <xjc schema="po.xsd" package="primer.po" destdir="gen-src">
      <produces dir="gen-src/primer.po" includes="**/*.java" />
    </xjc>
    <echo message="Compiling the java source files..." />
    <mkdir dir="classes" />
    <javac destdir="classes" debug="on">
      <src path="src" />
      <src path="gen-src" />
      <classpath refid="classpath" />
    </javac>
  </target>

  <target name="run" depends="compile" description="Run the sample app">
    <echo message="Running the sample application..." />
    <java classname="Main" fork="true">
      <classpath refid="classpath" />
    </java>
  </target>

  <target name="javadoc" description="Generates javadoc" depends="compile">
    <echo message="Generating javadoc..." />
    <mkdir dir="docs/api" />
    <javadoc sourcepath="gen-src" destdir="docs/api" windowtitle="modify-marshal (formerly SampleApp2)" useexternalfile="yes">
      <fileset dir="." includes="gen-src/**/*.java" excludes="**/impl/**/*.java" />
    </javadoc>
  </target>

  <target name="clean" description="Deletes all the generated artifacts.">
    <delete dir="docs/api" />
    <delete dir="gen-src" />
    <delete dir="schemas" />
    <delete dir="classes" />
  </target>
</project>

<?xml version="1.0" standalone="yes"?>
<!--
  Copyright 2004 Sun Microsystems, Inc. All rights reserved.
-->
<project basedir="." default="run">
  <description>
        This sample application demonstrates how to use the new JAXB RI 
        Marshaller property "com.sun.xml.bind.namespacePrefixMapper" to 
        customize the namespace prefixes generated during marshalling.
    </description>
  <property name="jaxb.home" value="../.." />
  <path id="classpath">
    <pathelement path="src" />
    <pathelement path="classes" />
    <pathelement path="schemas" />
    <fileset dir="${jaxb.home}" includes="lib/*.jar" />
  </path>
  <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
    <classpath refid="classpath" />
  </taskdef>

  <!--compile Java source files-->
  <target name="compile" description="Compile all Java source files">
    <echo message="Compiling the schema..." />
    <mkdir dir="gen-src" />
    <xjc schema="foo.xsd" package="foo" destdir="gen-src">
      <produces dir="gen-src/foo" includes="**/*.java" />
    </xjc>
    <xjc schema="bar.xsd" package="bar" destdir="gen-src">
      <produces dir="gen-src/bar" includes="**/*.java" />
    </xjc>
    <echo message="Compiling the java source files..." />
    <mkdir dir="classes" />
    <javac destdir="classes" debug="on">
      <src path="src" />
      <src path="gen-src" />
      <classpath refid="classpath" />
    </javac>
  </target>

  <target name="run" depends="compile" description="Run the sample app">
    <echo message="Running the sample application..." />
    <java classname="PrefixExample" fork="true">
      <classpath refid="classpath" />
      <arg path="test1.xml" />
      <arg path="test2.xml" />
      <arg path="test3.xml" />
    </java>
  </target>

  <target name="javadoc" description="Generates javadoc" depends="compile">
    <echo message="Generating javadoc..." />
    <mkdir dir="docs/api" />
    <javadoc sourcepath="gen-src" destdir="docs/api" windowtitle="namespace-prefix" useexternalfile="yes">
      <fileset dir="." includes="gen-src/**/*.java" excludes="**/impl/**/*.java" />
    </javadoc>
  </target>

  <target name="clean" description="Deletes all the generated artifacts.">
    <delete dir="docs/api" />
    <delete dir="gen-src" />
    <delete dir="schemas" />
    <delete dir="classes" />
  </target>
</project>

<?xml version="1.0" standalone="yes"?>
<!--
  Copyright 2004 Sun Microsystems, Inc. All rights reserved.
-->
<project basedir="." default="run">
  <description>
        In this example, the input document will be unmarshalled a small chunk 
        at a time, instead of unmarshalling the whole document at once.
    </description>
  <property name="jaxb.home" value="../.." />
  <path id="classpath">
    <pathelement path="src" />
    <pathelement path="classes" />
    <pathelement path="schemas" />
    <fileset dir="${jaxb.home}" includes="lib/*.jar" />
  </path>
  <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
    <classpath refid="classpath" />
  </taskdef>

  <!--compile Java source files-->
  <target name="compile" description="Compile all Java source files">
    <echo message="Compiling the schema..." />
    <mkdir dir="gen-src" />
    <xjc schema="Primer.xsd" package="primer" destdir="gen-src">
      <produces dir="gen-src/primer" includes="**/*.java" />
    </xjc>
    <echo message="Compiling the java source files..." />
    <mkdir dir="classes" />
    <javac destdir="classes" debug="on">
      <src path="src" />
      <src path="gen-src" />
      <classpath refid="classpath" />
    </javac>
  </target>

  <target name="run" depends="compile" description="Run the sample app">
    <echo message="Running the sample application..." />
    <java classname="Main" fork="true">
      <classpath refid="classpath" />
      <arg value="test.xml" />
    </java>
  </target>

  <target name="javadoc" description="Generates javadoc" depends="compile">
    <echo message="Generating javadoc..." />
    <mkdir dir="docs/api" />
    <javadoc sourcepath="gen-src" destdir="docs/api" windowtitle="partial-unmarshalling" useexternalfile="yes">
      <fileset dir="." includes="gen-src/**/*.java" excludes="**/impl/**/*.java" />
    </javadoc>
  </target>

  <target name="clean" description="Deletes all the generated artifacts.">
    <delete dir="docs/api" />
    <delete dir="gen-src" />
    <delete dir="schemas" />
    <delete dir="classes" />
  </target>
</project>

<?xml version="1.0" standalone="yes"?>
<!--
  Copyright 2004 Sun Microsystems, Inc. All rights reserved.
-->
<project basedir="." default="run">
  <description>
      This sample app demonstrates how a pull-parser can
      be used with JAXB to increase the flexibility of processing.
    </description>
  <property name="jaxb.home" value="../.." />
  <path id="classpath">
    <pathelement path="src" />
    <pathelement path="classes" />
    <pathelement path="schemas" />
    <!--additional jar files for this sample-->
    <fileset dir="lib" includes="*.jar" />
    <fileset dir="${jaxb.home}" includes="lib/*.jar" />
  </path>
  <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
    <classpath refid="classpath" />
  </taskdef>

  <!--
    Check if the necessary jar files are properly installed.
  -->
  <target name="jar-check">
    <available file="lib/sjsxp.jar" property="sjsxp.jar-present" />
    <fail unless="sjsxp.jar-present">
              Please download sjsxp.jar from the web and place it in the lib directory.
            </fail>
  </target>

  <!--compile Java source files-->
  <target name="compile" description="Compile all Java source files" depends="jar-check">
    <echo message="Compiling the schema..." />
    <mkdir dir="gen-src" />
    <xjc schema="contact.xsd" package="contact" destdir="gen-src">
      <produces dir="gen-src/contact" includes="**/*.java" />
    </xjc>
    <echo message="Compiling the java source files..." />
    <mkdir dir="classes" />
    <javac destdir="classes" debug="on">
      <src path="src" />
      <src path="gen-src" />
      <classpath refid="classpath" />
    </javac>
  </target>

  <target name="run" depends="compile" description="Run the sample app">
    <echo message="Running the sample application..." />
    <java classname="Main" fork="true">
      <classpath refid="classpath" />
      <arg value="Jane Smith" />
    </java>
  </target>

  <target name="javadoc" description="Generates javadoc" depends="compile">
    <echo message="Generating javadoc..." />
    <mkdir dir="docs/api" />
    <javadoc sourcepath="gen-src" destdir="docs/api" windowtitle="pull parser based unmarshalling" useexternalfile="yes">
      <fileset dir="." includes="gen-src/**/*.java" excludes="**/impl/**/*.java" />
    </javadoc>
  </target>

  <target name="clean" description="Deletes all the generated artifacts.">
    <delete dir="docs/api" />
    <delete dir="gen-src" />
    <delete dir="schemas" />
    <delete dir="classes" />
  </target>
</project>

<?xml version="1.0" standalone="yes"?>
<!--
  Copyright 2004 Sun Microsystems, Inc. All rights reserved.
-->
<project basedir="." default="run">
  <description>
        This example illustrates a different approach to the streaming unmarshalling,
        which is suitable for processing a large document.
    </description>
  <property name="jaxb.home" value="../.." />
  <path id="classpath">
    <pathelement path="src" />
    <pathelement path="classes" />
    <pathelement path="schemas" />
    <fileset dir="${jaxb.home}" includes="lib/*.jar" />
  </path>
  <!--compile Java source files-->
  <target name="compile" description="Compile all Java source files">
    <echo message="Compiling the java source files..." />
    <mkdir dir="classes" />
    <javac destdir="classes" debug="on">
      <src path="src" />
      <classpath refid="classpath" />
    </javac>
  </target>

  <target name="run" depends="compile" description="Run the sample app">
    <echo message="Running the sample application..." />
    <java classname="Main" fork="true">
      <classpath refid="classpath" />
      <arg value="test.xml" />
    </java>
  </target>

  <target name="javadoc" description="Generates javadoc" depends="compile">
    <echo message="Generating javadoc..." />
    <mkdir dir="docs/api" />
    <javadoc sourcepath="gen-src" destdir="docs/api" windowtitle="Streaming Unmarshalling w/o StAX" useexternalfile="yes">
      <fileset dir="." includes="gen-src/**/*.java" excludes="**/impl/**/*.java" />
    </javadoc>
  </target>

  <target name="clean" description="Deletes all the generated artifacts.">
    <delete dir="docs/api" />
    <delete dir="gen-src" />
    <delete dir="schemas" />
    <delete dir="classes" />
  </target>
</project>

<?xml version="1.0" standalone="yes"?>
<!--
  Copyright 2004 Sun Microsystems, Inc. All rights reserved.
-->
<project basedir="." default="run">
  <description>
      This sample shows how to use the new non-standard synchronized
      method support. By following the instructions in the readme.txt,
      you can cause all of the generated impl class methods signatures
      to contain the "synchronized" keyword.
    </description>
  <property name="jaxb.home" value="../.." />
  <path id="classpath">
    <pathelement path="src" />
    <pathelement path="classes" />
    <pathelement path="schemas" />
    <fileset dir="${jaxb.home}" includes="lib/*.jar" />
  </path>
  <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
    <classpath refid="classpath" />
  </taskdef>

  <!--compile Java source files-->
  <target name="compile" description="Compile all Java source files">
    <echo message="Compiling the schema..." />
    <mkdir dir="gen-src" />
    <xjc extension="true" schema="po.xsd" package="primer.myPo" destdir="gen-src">
      <arg value="-Xsync-methods" />
      <produces dir="gen-src/primer.myPo" includes="**/*.java" />
    </xjc>
    <echo message="Compiling the java source files..." />
    <mkdir dir="classes" />
    <javac destdir="classes" debug="on">
      <src path="gen-src" />
      <classpath refid="classpath" />
    </javac>
  </target>

  <target name="run" depends="compile" description="Run the sample app">
    <echo message="done" />
  </target>

  <target name="javadoc" description="Generates javadoc" depends="compile">
    <echo message="Generating javadoc..." />
    <mkdir dir="docs/api" />
    <javadoc sourcepath="gen-src" destdir="docs/api" windowtitle="Generating synchronized methods" useexternalfile="yes">
      <fileset dir="." includes="gen-src/**/*.java" excludes="**/impl/**/*.java" />
    </javadoc>
  </target>

  <target name="clean" description="Deletes all the generated artifacts.">
    <delete dir="docs/api" />
    <delete dir="gen-src" />
    <delete dir="schemas" />
    <delete dir="classes" />
  </target>
</project>

<?xml version="1.0" standalone="yes"?>
<!--
  Copyright 2004 Sun Microsystems, Inc. All rights reserved.
-->
<project basedir="." default="run">
  <description>
      This sample app demonstrates type substitution using
      the W3C XML Schema Part 0: Primer international purchase order schema.
    </description>
  <property name="jaxb.home" value="../.." />
  <path id="classpath">
    <pathelement path="src" />
    <pathelement path="classes" />
    <pathelement path="schemas" />
    <fileset dir="${jaxb.home}" includes="lib/*.jar" />
  </path>
  <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
    <classpath refid="classpath" />
  </taskdef>

  <!--compile Java source files-->
  <target name="compile" description="Compile all Java source files">
    <echo message="Compiling the schema..." />
    <mkdir dir="gen-src" />
    <xjc catalog="catalog.cat" destdir="gen-src">
      <schema dir=".">
        <include name="ipo.xsd" />
        <include name="ustaxexemptpo.xsd" />
      </schema>
      <produces dir="gen-src" includes="**/*.java" />
    </xjc>
    <echo message="Compiling the java source files..." />
    <mkdir dir="classes" />
    <javac destdir="classes" debug="on">
      <src path="src" />
      <src path="gen-src" />
      <classpath refid="classpath" />
    </javac>
  </target>

  <target name="run" depends="compile" description="Run the sample app">
    <echo message="Running the sample application..." />
    <java classname="Main" fork="true">
      <classpath refid="classpath" />
    </java>
  </target>

  <target name="javadoc" description="Generates javadoc" depends="compile">
    <echo message="Generating javadoc..." />
    <mkdir dir="docs/api" />
    <javadoc sourcepath="gen-src" destdir="docs/api" windowtitle="Type substitutoin support" useexternalfile="yes">
      <fileset dir="." includes="gen-src/**/*.java" excludes="**/impl/**/*.java" />
    </javadoc>
  </target>

  <target name="clean" description="Deletes all the generated artifacts.">
    <delete dir="docs/api" />
    <delete dir="gen-src" />
    <delete dir="schemas" />
    <delete dir="classes" />
  </target>
</project>

<?xml version="1.0" standalone="yes"?>
<!--
  Copyright 2004 Sun Microsystems, Inc. All rights reserved.
-->
<project basedir="." default="run">
  <description>
This project processes a UBL (Universal Business Language) order
instance and prints a report to the screen.</description>
  <property name="jaxb.home" value="../.." />
  <path id="classpath">
    <pathelement path="src" />
    <pathelement path="classes" />
    <pathelement path="schemas" />
    <fileset dir="${jaxb.home}" includes="lib/*.jar" />
  </path>
  <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
    <classpath refid="classpath" />
  </taskdef>

  <!--compile Java source files-->
  <target name="compile" description="Compile all Java source files">
    <echo message="Compiling the schema..." />
    <mkdir dir="gen-src" />
    <xjc binding="ubl.xjb" destdir="gen-src">
      <schema dir="cd-UBL-1.0/xsd" includes="**/*.xsd" />
      <produces dir="gen-src" includes="**/*.java" />
    </xjc>
    <echo message="Compiling the java source files..." />
    <mkdir dir="classes" />
    <javac destdir="classes" debug="on" fork="true" memoryInitialSize="100m" memoryMaximumSize="1000m">
      <src path="src" />
      <src path="gen-src" />
      <classpath refid="classpath" />
    </javac>
  </target>

  <target name="run" depends="compile" description="Run the sample app">
    <echo message="Running the sample application..." />
    <java classname="samples.ubl.report.PrintOrder" fork="true">
      <classpath refid="classpath" />
    </java>
  </target>

  <target name="javadoc" description="Generates javadoc" depends="compile">
    <echo message="Generating javadoc..." />
    <mkdir dir="docs/api" />
    <javadoc sourcepath="gen-src" destdir="docs/api" windowtitle="Universal Business Language (UBL)" useexternalfile="yes">
      <fileset dir="." includes="gen-src/**/*.java" excludes="**/impl/**/*.java" />
    </javadoc>
  </target>

  <target name="clean" description="Deletes all the generated artifacts.">
    <delete dir="docs/api" />
    <delete dir="gen-src" />
    <delete dir="schemas" />
    <delete dir="classes" />
  </target>
</project>

<?xml version="1.0" standalone="yes"?>
<!--
  Copyright 2004 Sun Microsystems, Inc. All rights reserved.
-->
<project basedir="." default="run">
  <description>
      This sample application demonstrates how to unmarshal an instance document
      into a Java content tree and access data contained within it.
    </description>
  <property name="jaxb.home" value="../.." />
  <path id="classpath">
    <pathelement path="src" />
    <pathelement path="classes" />
    <pathelement path="schemas" />
    <fileset dir="${jaxb.home}" includes="lib/*.jar" />
  </path>
  <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
    <classpath refid="classpath" />
  </taskdef>

  <!--compile Java source files-->
  <target name="compile" description="Compile all Java source files">
    <echo message="Compiling the schema..." />
    <mkdir dir="gen-src" />
    <xjc schema="po.xsd" package="primer.po" destdir="gen-src">
      <produces dir="gen-src/primer.po" includes="**/*.java" />
    </xjc>
    <echo message="Compiling the java source files..." />
    <mkdir dir="classes" />
    <javac destdir="classes" debug="on">
      <src path="src" />
      <src path="gen-src" />
      <classpath refid="classpath" />
    </javac>
  </target>

  <target name="run" depends="compile" description="Run the sample app">
    <echo message="Running the sample application..." />
    <java classname="Main" fork="true">
      <classpath refid="classpath" />
    </java>
  </target>

  <target name="javadoc" description="Generates javadoc" depends="compile">
    <echo message="Generating javadoc..." />
    <mkdir dir="docs/api" />
    <javadoc sourcepath="gen-src" destdir="docs/api" windowtitle="Using unmarshaller (formerly SampleApp1)" useexternalfile="yes">
      <fileset dir="." includes="gen-src/**/*.java" excludes="**/impl/**/*.java" />
    </javadoc>
  </target>

  <target name="clean" description="Deletes all the generated artifacts.">
    <delete dir="docs/api" />
    <delete dir="gen-src" />
    <delete dir="schemas" />
    <delete dir="classes" />
  </target>
</project>

<?xml version="1.0" standalone="yes"?>
<!--
  Copyright 2004 Sun Microsystems, Inc. All rights reserved.
-->
<project basedir="." default="run">
  <description>
			This sample application demonstrates how to enable
			validation during the unmarshal operations.
    </description>
  <property name="jaxb.home" value="../.." />
  <path id="classpath">
    <pathelement path="src" />
    <pathelement path="classes" />
    <pathelement path="schemas" />
    <fileset dir="${jaxb.home}" includes="lib/*.jar" />
  </path>
  <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
    <classpath refid="classpath" />
  </taskdef>

  <!--compile Java source files-->
  <target name="compile" description="Compile all Java source files">
    <echo message="Compiling the schema..." />
    <mkdir dir="gen-src" />
    <xjc schema="po.xsd" package="primer.po" destdir="gen-src">
      <produces dir="gen-src/primer.po" includes="**/*.java" />
    </xjc>
    <echo message="Compiling the java source files..." />
    <mkdir dir="classes" />
    <javac destdir="classes" debug="on">
      <src path="src" />
      <src path="gen-src" />
      <classpath refid="classpath" />
    </javac>
  </target>

  <target name="run" depends="compile" description="Run the sample app">
    <echo message="Running the sample application..." />
    <java classname="Main" fork="true">
      <classpath refid="classpath" />
    </java>
  </target>

  <target name="javadoc" description="Generates javadoc" depends="compile">
    <echo message="Generating javadoc..." />
    <mkdir dir="docs/api" />
    <javadoc sourcepath="gen-src" destdir="docs/api" windowtitle="validating unmarshaller (formerly SampleApp4)" useexternalfile="yes">
      <fileset dir="." includes="gen-src/**/*.java" excludes="**/impl/**/*.java" />
    </javadoc>
  </target>

  <target name="clean" description="Deletes all the generated artifacts.">
    <delete dir="docs/api" />
    <delete dir="gen-src" />
    <delete dir="schemas" />
    <delete dir="classes" />
  </target>
</project>

<?xml version="1.0" standalone="yes"?>
<!--
  Copyright 2004 Sun Microsystems, Inc. All rights reserved.
-->
<project basedir="." default="run">
  <description>
      This sample application demonstrates how to partially map a DOM tree
      to JAXB (using JAXP 1.3 XPath), modify JAXB mapped instance and then update modifications back to
      the DOM tree.
    </description>
  <property name="jaxb.home" value="../.." />
  <path id="classpath">
    <pathelement path="src" />
    <pathelement path="classes" />
    <pathelement path="schemas" />
    <fileset dir="${jaxb.home}" includes="lib/*.jar" />
  </path>
  <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
    <classpath refid="classpath" />
  </taskdef>

  <!--compile Java source files-->
  <target name="compile" description="Compile all Java source files">
    <echo message="Compiling the schema..." />
    <mkdir dir="gen-src" />
    <xjc schema="po.xsd" package="binder" destdir="gen-src">
      <produces dir="gen-src/binder" includes="**/*.java" />
    </xjc>
    <echo message="Compiling the java source files..." />
    <mkdir dir="classes" />
    <javac destdir="classes" debug="on">
      <src path="src" />
      <src path="gen-src" />
      <classpath refid="classpath" />
    </javac>
  </target>

  <target name="run" depends="compile" description="Run the sample app">
    <echo message="Running the sample application..." />
    <java classname="UpdateablePartialBinding" fork="true">
      <classpath refid="classpath" />
    </java>
  </target>

  <target name="javadoc" description="Generates javadoc" depends="compile">
    <echo message="Generating javadoc..." />
    <mkdir dir="docs/api" />
    <javadoc sourcepath="gen-src" destdir="docs/api" windowtitle="Updateable Partial Binding using Binder" useexternalfile="yes">
      <fileset dir="." includes="gen-src/**/*.java" excludes="**/impl/**/*.java" />
    </javadoc>
  </target>

  <target name="clean" description="Deletes all the generated artifacts.">
    <delete dir="docs/api" />
    <delete dir="gen-src" />
    <delete dir="schemas" />
    <delete dir="classes" />
  </target>
</project>

<?xml version="1.0" standalone="yes"?>
<!--
  Copyright 2004 Sun Microsystems, Inc. All rights reserved.
-->
<project basedir="." default="run">
  <description>
			This example demonstrates how to use 
			&lt;xjc:superClass&gt; vendor extensions provided by Sun's JAXB RI,
			as well as &lt;jaxb:serializable&gt; customization.
    </description>
  <property name="jaxb.home" value="../.." />
  <path id="classpath">
    <pathelement path="src" />
    <pathelement path="classes" />
    <pathelement path="schemas" />
    <fileset dir="${jaxb.home}" includes="lib/*.jar" />
  </path>
  <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
    <classpath refid="classpath" />
  </taskdef>

  <!--compile Java source files-->
  <target name="compile" description="Compile all Java source files">
    <echo message="Compiling the schema..." />
    <mkdir dir="gen-src" />
    <xjc extension="true" schema="po.xsd" package="primer.myPo" destdir="gen-src">
      <produces dir="gen-src/primer.myPo" includes="**/*.java" />
    </xjc>
    <echo message="Compiling the java source files..." />
    <mkdir dir="classes" />
    <javac destdir="classes" debug="on">
      <src path="src" />
      <src path="gen-src" />
      <classpath refid="classpath" />
    </javac>
  </target>

  <target name="run" depends="compile" description="Run the sample app">
    <echo message="Running the sample application..." />
    <java classname="Main" fork="true">
      <classpath refid="classpath" />
    </java>
  </target>

  <target name="javadoc" description="Generates javadoc" depends="compile">
    <echo message="Generating javadoc..." />
    <mkdir dir="docs/api" />
    <javadoc sourcepath="gen-src" destdir="docs/api" windowtitle="RI-specific customizations" useexternalfile="yes">
      <fileset dir="." includes="gen-src/**/*.java" excludes="**/impl/**/*.java" />
    </javadoc>
  </target>

  <target name="clean" description="Deletes all the generated artifacts.">
    <delete dir="docs/api" />
    <delete dir="gen-src" />
    <delete dir="schemas" />
    <delete dir="classes" />
  </target>
</project>

<?xml version="1.0" standalone="yes"?>
<!--
  Copyright 2004 Sun Microsystems, Inc. All rights reserved.
-->
<project basedir="." default="run">
  <description>
      This example demonstrates how one can use one communication channel
      (such as a socket) to send multiple XML messages, and how it can be
      combined with JAXB.
    </description>
  <property name="jaxb.home" value="../.." />
  <path id="classpath">
    <pathelement path="src" />
    <pathelement path="classes" />
    <pathelement path="schemas" />
    <!--additional jar files for this sample-->
    <fileset dir="lib" includes="*.jar" />
    <fileset dir="${jaxb.home}" includes="lib/*.jar" />
  </path>
  <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
    <classpath refid="classpath" />
  </taskdef>

  <!--
    Check if the necessary jar files are properly installed.
  -->
  <target name="jar-check">
    <available file="lib/sjsxp.jar" property="sjsxp.jar-present" />
    <fail unless="sjsxp.jar-present">
              Please download sjsxp.jar from the web and place it in the lib directory.
            </fail>
  </target>

  <!--compile Java source files-->
  <target name="compile" description="Compile all Java source files" depends="jar-check">
    <echo message="Compiling the schema..." />
    <mkdir dir="gen-src" />
    <xjc schema="message.xsd" package="message" destdir="gen-src">
      <produces dir="gen-src/message" includes="**/*.java" />
    </xjc>
    <echo message="Compiling the java source files..." />
    <mkdir dir="classes" />
    <javac destdir="classes" debug="on">
      <src path="src" />
      <src path="gen-src" />
      <classpath refid="classpath" />
    </javac>
  </target>

  <target name="run" depends="compile" description="Run the sample app">
    <echo message="Running the sample application..." />
    <java classname="Test" fork="true">
      <classpath refid="classpath" />
    </java>
  </target>

  <target name="javadoc" description="Generates javadoc" depends="compile">
    <echo message="Generating javadoc..." />
    <mkdir dir="docs/api" />
    <javadoc sourcepath="gen-src" destdir="docs/api" windowtitle="XML message passing via socket" useexternalfile="yes">
      <fileset dir="." includes="gen-src/**/*.java" excludes="**/impl/**/*.java" />
    </javadoc>
  </target>

  <target name="clean" description="Deletes all the generated artifacts.">
    <delete dir="docs/api" />
    <delete dir="gen-src" />
    <delete dir="schemas" />
    <delete dir="classes" />
  </target>
</project>

<?xml version="1.0" standalone="yes"?>
<!--
  Copyright 2004 Sun Microsystems, Inc. All rights reserved.
-->
<project basedir="." default="run">
  <description>
        A common customization need for the marshalling output is
        about introducing extra processing instruction and/or DOCTYPE declaration.
        This example demonstrates how such modification can be done easily.
    </description>
  <property name="jaxb.home" value="../.." />
  <path id="classpath">
    <pathelement path="src" />
    <pathelement path="classes" />
    <pathelement path="schemas" />
    <fileset dir="${jaxb.home}" includes="lib/*.jar" />
  </path>
  <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
    <classpath refid="classpath" />
  </taskdef>

  <!--compile Java source files-->
  <target name="compile" description="Compile all Java source files">
    <echo message="Compiling the schema..." />
    <mkdir dir="gen-src" />
    <xjc schema="Primer.xsd" package="primer" destdir="gen-src">
      <produces dir="gen-src/primer" includes="**/*.java" />
    </xjc>
    <echo message="Compiling the java source files..." />
    <mkdir dir="classes" />
    <javac destdir="classes" debug="on">
      <src path="src" />
      <src path="gen-src" />
      <classpath refid="classpath" />
    </javac>
  </target>

  <target name="run" depends="compile" description="Run the sample app">
    <echo message="Running the sample application..." />
    <java classname="Main" fork="true">
      <classpath refid="classpath" />
      <arg value="test.xml" />
    </java>
  </target>

  <target name="javadoc" description="Generates javadoc" depends="compile">
    <echo message="Generating javadoc..." />
    <mkdir dir="docs/api" />
    <javadoc sourcepath="gen-src" destdir="docs/api" windowtitle="Marshalling output customization" useexternalfile="yes">
      <fileset dir="." includes="gen-src/**/*.java" excludes="**/impl/**/*.java" />
    </javadoc>
  </target>

  <target name="clean" description="Deletes all the generated artifacts.">
    <delete dir="docs/api" />
    <delete dir="gen-src" />
    <delete dir="schemas" />
    <delete dir="classes" />
  </target>
</project>

<?xml version="1.0"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 1997-2011 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<project name="apgen" basedir="../../" default="deploy">

    <description>
      Annotation Proxy Generator
      ==========================

      Generates implementations of the Quick class for annotations.
      This is a tool used to build the runtime module.
    </description>

    <!-- import build properties -->
    <property file="${basedir}/build.properties" />

    <!-- compile Java source files -->
    <target name="compile"
           description="compile all classes">
        <mkdir dir="${apgen.classes}" />

        <javac srcdir="${apgen.src}" destdir="${apgen.classes}"
            debug="${compile.debug}" optimize="${compile.optimize}"
      		source="1.6" target="1.6"
            deprecation="${compile.deprecation}" >
            <compilerarg line="${runtime.compilerarg}"/>
            <classpath>
              <pathelement path="${cpath.fromsource}"/>
              <pathelement path="${jaxb.libs.compiler}/istack-commons-tools.jar"/>
              <pathelement path="${jaxb.libs.compiler}/codemodel.jar" />
              <fileset dir="${jaxb.libs.util}" includes="*.jar"/>
            </classpath>
        </javac>
    </target>

    <!-- remove all intermediate files -->
    <target name="clean">
        <parallel>
            <delete dir="/tools/apgen/build" />
        </parallel>
    </target>
</project>
<?xml version="1.0" encoding="UTF-8" ?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 1997-2011 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<project name="tools" basedir=".." default="compile">
    <!-- initialize build properties -->
    <property file="${basedir}/build.properties" />

    <target name="compile-for-source" description="build tools and deploy them into necessary locations" unless="from.source">
        <ant dir="${jaxb.root}/tools/source-tidy" target="compile" />
        <ant dir="${jaxb.root}/tools/xmllint" />
    </target>

    <target name="compile" depends="compile-for-source"
            description="build tools and deploy them into necessary locations">
        <ant dir="${jaxb.root}/tools/pretty-printer" />
        <ant dir="${jaxb.root}/tools/jing-rnc-driver"/>
    </target>
    
    <target name="clean">
        <ant dir="${jaxb.root}/tools/source-tidy"          target="clean"/>
        <ant dir="${jaxb.root}/tools/webapp-commons"       target="clean"/>
        <ant dir="${jaxb.root}/tools/pretty-printer"       target="clean"/>
        <ant dir="${jaxb.root}/tools/jing-rnc-driver"      target="clean"/>
        <ant dir="${jaxb.root}/tools/xmllint"              target="clean"/>
    </target>
</project>
<?xml version="1.0"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 1997-2011 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<project basedir="${basedir}" default="xjc" name="Java Architecture for XML Binding">
  <property environment="env"/>
  <property file="${env.JAXB_HOME}/etc/build.properties"/>
  <path id="jaxb.lib">
    <fileset dir="${env.JAXB_HOME}/lib">
      <include name="*.jar"/>
    </fileset>
  </path>
  <target name="xjc">
    <java classname="com.sun.tools.xjc.Driver" fork="yes" failonerror="true">
      <classpath refid="jaxb.lib"/>
      <jvmarg value="-Dhttp.proxyHost=${xjc.proxy}"/>
      <jvmarg value="-Dhttp.proxyPort=${xjc.port}"/>
      <arg line="${xjc.opts}"/>
    </java>
  </target>
</project>
<?xml version="1.0"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 1997-2010 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<!--
  base dir has to be jaxb-ri for this to be work correctly
  when it's called from the jaxb-ri/build.xml
-->
<project name="jing-rnc-driver" basedir="../.." default="jar">

    <!-- import build properties -->
    <property file="${basedir}/build.properties" />
    <property name="name" value="jing-rnc-driver" />
    <property name="root" value="${jaxb.root}/tools/${name}" />

    <target name="compile">
        <mkdir dir="${root}/build/classes" />
        <javac srcdir="${root}/src" destdir="${root}/build/classes"
            debug="${compile.debug}" optimize="${compile.optimize}"
        	source="1.6" target="1.6">
            <classpath>
      			<fileset dir="${jaxb.libs.redist}" includes="*.jar"/>
      			<fileset dir="${jaxb.libs.rebundle}" includes="**/*.jar"/>
      			<fileset dir="${jaxb.libs.util}" includes="*.jar"/>
            </classpath>
        </javac>
    </target>

    <target name="jar" depends="compile">
        <jar destfile="${root}/build/${name}.jar">
            <fileset dir="${root}/build/classes"/>
        </jar>
        <zip destfile="${root}/build/${name}.src.zip">
            <fileset dir="${root}/src"/>
        </zip>
        <copy todir="${jaxb.libs.util}"
              file="${root}/build/${name}.jar" />
    </target>

    <target name="clean">
        <delete dir="${root}/build" />
    </target>
</project>
<?xml version="1.0"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 1997-2010 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<!--
  base dir has to be jaxb-ri for this to be work correctly
  when it's called from the jaxb-ri/build.xml
-->
<project name="pretty-printer" basedir="../.." default="jar">

    <!-- import build properties -->
    <property file="${basedir}/build.properties" />
    <property name="name" value="pretty-printer" />
    <property name="root" value="${jaxb.root}/tools/${name}" />

    <target name="compile">
        <mkdir dir="${root}/build/classes" />
        <javac srcdir="${root}/src" destdir="${root}/build/classes"
            debug="${compile.debug}" optimize="${compile.optimize}" source="1.6" target="1.6" />
    </target>

    <target name="jar" depends="compile">
        <jar destfile="${root}/build/${name}.jar">
            <fileset dir="${root}/build/classes"/>
        </jar>
        <zip destfile="${root}/build/${name}.src.zip">
            <fileset dir="${root}/src"/>
        </zip>
        <copy todir="${jaxb.libs.util}"
              file="${root}/build/${name}.jar" />
    </target>

    <target name="clean">
        <delete dir="${root}/build" />
    </target>
</project>
<?xml version="1.0"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 1997-2011 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<project name="reflection" basedir="../../" default="compile">
  <description>
    Reflection Library Sub-Project

    The reflection library module provides a library to process
    JAXB annotations at runtime. We ship this in a different package
    to avoid class collisions and compatibility issues between the RI
    and this library.
  </description>

  <!-- import build properties -->
  <property file="build.properties" />
  <import file="${jaxb.root}/build-taskdefs.xml" />

  <target name="compile"
    description="creates a distribution bundle for the JAXB2 reflection library">

    <!-- this is very inefficient, but it builds everything we need -->
    <ant dir="${jaxb.root}" target="compile" />

    <macrodef name="rename">
      <attribute name="srcdir" />
      <sequential>
        <prename srcdir="@{srcdir}"
          destdir="${reflection.root}/build/src" excludes="com/sun/xml/bind/v2/package-info.java">

          <pattern from="com.sun.xml.bind.v2" to="org.jvnet.jaxb.reflection" />
          <pattern from="com.sun.xml.bind" to="org.jvnet.jaxb.reflection.impl" />
        </prename>
      </sequential>
    </macrodef>

    <!-- rename packages -->
    <rename srcdir="${runtime.src}"/>
    <rename srcdir="${runtime.root}/build/src" />
    <rename srcdir="${runtime.root}/arch-doc" />
    <rename srcdir="${reflection.src}" />

    <mkdir dir="${reflection.classes}"/>
    <javac srcdir="${reflection.root}/build/src" destdir="${reflection.classes}" debug="on" source="1.6" target="1.6">
      <classpath>
        <fileset dir="${jaxb.libs.redist}" includes="*.jar"/>
        <fileset dir="${jaxb.libs.runtime2}" includes="**/*.jar"/>
      </classpath>
    </javac>
  </target>

  <target name="javadoc" depends="compile" >
    <arch-doc destdir="${reflection.root}/build/javadoc" title="JAXB2 reflection library" access="public">
      <params>
        <packageset dir="${reflection.root}/build/src">
          <include name="org/jvnet/jaxb/reflection/**" />
          <exclude name="org/jvnet/jaxb/reflection/bytecode" />
          <exclude name="org/jvnet/jaxb/reflection/impl/**" />
          <exclude name="org/jvnet/jaxb/reflection/model/impl" />
          <exclude name="org/jvnet/jaxb/reflection/runtime/**" />
        </packageset>
      </params>
    </arch-doc>
  </target>

  <target name="jar" depends="compile">
    <jar jarfile="${reflection.root}/build/jaxb2-reflection.jar">
      <fileset dir="${reflection.root}/build/src" includes="**/*.properties" />
      <fileset dir="${reflection.classes}" />
      <zipgroupfileset dir="${jaxb.libs.runtime2}" includes="istack-commons-runtime.jar" />
    </jar>
  </target>

  <target name="dist" depends="javadoc, jar">
    <!-- build id can be overridden -->
    <tstamp />
    <property name="build.id" value="${DSTAMP}" />

    <zip file="${reflection.root}/build/src.zip">
      <fileset dir="${reflection.root}/build/src" />
    </zip>

    <zip file="${reflection.root}/build/jaxb2-reflection.zip">
      <zipfileset prefix="jaxb2-reflection"
        dir="${reflection.root}/build" includes="jaxb2-reflection.jar" />
      <zipfileset prefix="jaxb2-reflection"
        dir="${reflection.root}/build" includes="javadoc/**/*, src.zip"/>
      <zipfileset fullpath="jaxb2-reflection/license.html"
        dir="${jaxb.root}" includes="License.html"/>
    </zip>

    <ant dir="tools/installer-builder" />

    <taskdef name="installerBuilder" classname="com.sun.tools.xjc.installer.builder.BuilderTask">
        <classpath>
            <fileset dir="${jaxb.libs.util}" includes="*.jar"/>
        </classpath>
    </taskdef>

    <installerBuilder
      jarFile="${reflection.root}/build/jaxb2-reflection.${build.id}.jar"
      licenseFile="${jaxb.root}/License.txt"
      zipFile="${reflection.root}/build/jaxb2-reflection.zip" />
  </target>

  <target name="clean">
    <delete dir="${reflection.root}/build" />
  </target>

</project>
<?xml version="1.0"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 1997-2010 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<project name="XJC Servlet" default="deploy" basedir="../..">

    <!-- import build properties -->
    <property file="${basedir}/build.properties" />

    <property name="servlet.root" value="${jaxb.root}/tools/servlet"/>
    <property name="commons.root" value="${servlet.root}/../webapp-commons" />
<!--
  deploy.home          The name of the directory into which the
                       deployment hierarchy will be created, and into
                       which the build directory will be copied.
                       Defaults to "${catalina.home}/webapps/${app.name}".
-->
    <!-- this property needs to be defined externally -->
    <!--property name="catalina.home" value="${servlet.root}/catalina"/-->
    <property name="deploy.home"   value="${catalina.home}/webapps/xjc"/>

    <!-- determine the behavior of the servlet -->
    <property name="mode" value="jwsdp" /><!-- or "standalone" -->

    <!-- when deployed to JWSDP1.0_01, we can't have Xerces in our classpath. -->
    <property name="exclusion.lib" value="xercesImpl.jar" />


    <!-- libraries that are referenced when compiling Java source files -->
    <path id="javac.classpath">
      <pathelement path="${codemodel.classes}" />
      <pathelement path="${runtime.classes}" />
      <pathelement path="${xjc.classes}" />
      <pathelement path="${commons.root}/jaxb-webapp-commons.jar"/>
      <fileset dir="${jaxb.libs.redist}" includes="*.jar"/>
      <fileset dir="${jaxb.libs.rebundle}" includes="**/*.jar"/>
      <fileset dir="${jaxb.libs.util}" includes="*.jar"/>
    </path>





  <target name="all" depends="clean,compile"
   description="Clean build and dist, then compile"/>



  <target name="clean">
    <delete dir="${servlet.root}/build"/>
    <delete dir="${servlet.root}/boxed.jar"/>
    <delete dir="${deploy.home}"/>
  </target>


  <target name="compile">
    <ant target="jar" antfile="${commons.root}/build.xml" />


    <!-- Compile Java classes as necessary -->
    <mkdir    dir="${servlet.root}/build/classes"/>
    <javac srcdir="${servlet.root}/src" destdir="${servlet.root}/build/classes"
           debug="${compile.debug}" optimize="${compile.optimize}"
    	   source="1.6" target="1.6"
           deprecation="${compile.deprecation}" >
      <classpath refid="javac.classpath"/>
    </javac>

    <!-- Copy associated resource files -->
    <copy  todir="${servlet.root}/build/classes">
      <fileset dir="${servlet.root}/src" includes="**/*.properties"/>
    </copy>

    <!-- make boxed jar file -->
    <jar destfile="${servlet.root}/boxed.jar">
      <fileset dir="${servlet.root}/build/classes" includes="**/boxed/**/*" />
    </jar>

    <!-- make setting file -->
    <echo file="${servlet.root}/build/classes/com/sun/tools/xjc/servlet/Mode.properties">mode=${mode}</echo>
  </target>



  <target name="war" description="build a war file from jaxb-ri/dist" depends="compile">
    <delete file="${servlet.root}/xjc.war" />
    <war destfile="${servlet.root}/xjc.war" webxml="${servlet.root}/web.xml">
      <classes dir="${servlet.root}/build/classes"/>
      <classes dir="${servlet.root}/src" includes="**/package-list" />

      <lib dir="${jaxb.root}/dist/lib" includes="*.jar" excludes="${exclusion.lib}" />
      <lib dir="${jaxb.libs.util}" includes="mailapi.jar, smtp.jar, gsc.jar, antlr.jar"/>
      <lib dir="${servlet.root}" includes="boxed.jar"/>
      <lib dir="${commons.root}" includes="jaxb-webapp-commons.jar"/>

      <webinf dir="${servlet.root}" includes="taglib.tld"/>

      <!-- static contents -->
      <fileset dir="${servlet.root}/web"/>
    </war>
  </target>


  <target name="war-jwsdp" description="build a war file for JWSDP" depends="compile">
    <delete file="${servlet.root}/xjc.war" />
    <war destfile="${servlet.root}/xjc.war" webxml="${servlet.root}/web.xml">
      <classes dir="${servlet.root}/build/classes"/>
      <classes dir="${servlet.root}/src" includes="**/package-list" />

      <lib dir="${jaxb.libs.util}" includes="mailapi.jar, smtp.jar, gsc.jar, antlr.jar"/>
      <lib dir="${servlet.root}" includes="boxed.jar"/>
      <lib dir="${commons.root}" includes="jaxb-webapp-commons.jar"/>

      <webinf dir="${servlet.root}" includes="taglib.tld"/>

      <!-- static contents -->
      <fileset dir="${servlet.root}/web"/>
    </war>
  </target>


  <!-- make sure the deployment directory is available -->
  <target name="init-prepare">
    <available property="deploy.dir.available" file="${catalina.home}"/>
  </target>
  <target name="init" depends="init-prepare" unless="deploy.dir.available">
    <fail>
      Directory ${catalina.home} doesn't exist. Set the property
      catalina.home before launching ant.

      e.g.,  ant -Dcatalina.home=xxxxx
    </fail>
  </target>



  <target name="deploy" depends="init,compile"
   description="Deploy application to servlet container">


    <!-- Copy the contents of the build directory -->
    <mkdir     dir="${deploy.home}/WEB-INF/classes"/>
    <copy    todir="${deploy.home}/WEB-INF/classes">
      <fileset dir="${servlet.root}/build/classes"/>
      <fileset dir="${servlet.root}/src" includes="**/package-list" />
    </copy>

    <!-- Copy external dependencies as required -->
    <mkdir  dir="${deploy.home}/WEB-INF/lib"/>
    <copy todir="${deploy.home}/WEB-INF/lib">
      <fileset dir="${jaxb.root}/dist/lib" includes="*.jar" excludes="${exclusion.lib}"/>
      <fileset dir="${jaxb.libs.util}" includes="mailapi.jar, smtp.jar, gsc.jar, antlr.jar"/>
      <fileset dir="${commons.root}" includes="jaxb-webapp-commons.jar"/>
      <fileset dir="${servlet.root}" includes="boxed.jar"/>
    </copy>

    <copy todir="${deploy.home}/WEB-INF">
      <fileset dir="${servlet.root}" includes="web.xml, taglib.tld" />
    </copy>

    <!-- Copy static content -->
    <copy todir="${deploy.home}">
      <fileset dir="${servlet.root}/web"/>
    </copy>
  </target>



  <target name="reload" depends="init,deploy" description="Deploy and reload Tomcat">
    <taskdef name="reload" classname="org.apache.catalina.ant.ReloadTask">
      <classpath path="${catalina.home}/server/lib/catalina-ant.jar" />
    </taskdef>
    <reload url="http://localhost:8080/manager" username="tomcat" password="tomcat" path="/xjc" />
  </target>

</project>
<?xml version="1.0"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 1997-2010 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<!--
  base dir has to be jaxb-ri for this to be work correctly
  when it's called from the jaxb-ri/build.xml
-->
<project name="sourceTidy" basedir="../.." default="compile">

    <!-- import build properties -->
    <property file="${basedir}/build.properties" />

    <!-- compile Java source files -->
    <target name="compile">
        <javac srcdir="${jaxb.root}/tools/source-tidy" destdir="${jaxb.root}/tools/source-tidy"
            debug="${compile.debug}" optimize="${compile.optimize}" source="1.6" target="1.6" />
    </target>

    <target name="clean">
        <delete dir="${jaxb.root}/tools/source-tidy" includes="*.class" />
    </target>
</project>
<?xml version="1.0"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 1997-2010 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<project name="JAXB WebApp commons" default="dist" basedir="../..">

  <!-- import build properties -->
  <property file="${basedir}/build.properties" />


  <property name="commons.root" value="${jaxb.root}/tools/webapp-commons" />

  <!-- libraries that are referenced when compiling Java source files -->
  <path id="javac.classpath">
    <pathelement path="${codemodel.classes}" />
    <pathelement path="${runtime.classes}" />
    <pathelement path="${xjc.classes}" />
    <fileset dir="${jaxb.libs.redist}" includes="*.jar"/>
    <fileset dir="${jaxb.libs.rebundle}" includes="**/*.jar"/>
    <fileset dir="${jaxb.libs.util}" includes="*.jar"/>
  </path>





  <target name="dist" depends="clean,jar, src-zip" description="Clean build and dist" />



  <target name="clean">
    <delete dir="${commons.root}/build"/>
    <delete>
    	<fileset dir="${commons.root}" includes="jaxb-webapp-commons*.jar" />
    	<fileset dir="${commons.root}" includes="jaxb-webapp-commons*.src.zip" />
    </delete>
  </target>


  <target name="compile">
    <!-- Compile Java classes as necessary -->
    <mkdir    dir="${commons.root}/build/classes"/>
    <javac srcdir="${commons.root}/src" destdir="${commons.root}/build/classes"
           debug="${compile.debug}" optimize="${compile.optimize}"
    	     source="1.6" target="1.6"
           deprecation="${compile.deprecation}" >
      <classpath refid="javac.classpath"/>
    </javac>

    <!-- Copy associated resource files -->
    <copy  todir="${commons.root}/build/classes">
      <fileset dir="${commons.root}/src" includes="**/*.properties"/>
    </copy>
  </target>



  <target name="jar" description="build a jar file" depends="compile">
    <jar destfile="${commons.root}/jaxb-webapp-commons.jar">
      <fileset dir="${commons.root}/build/classes"/>
      <metainf dir="${commons.root}" includes="taglib.tld" />
    </jar>
    <jar destfile="${commons.root}/jaxb-webapp-commons-compact.jar">
      <fileset dir="${commons.root}/build/classes" excludes="**/multipart/**" />
      <metainf dir="${commons.root}" includes="taglib.tld" />
    </jar>
  </target>



  <target name="src-zip" description="build a source zip file" depends="compile">
    <zip destfile="${commons.root}/jaxb-webapp-commons.src.zip">
      <fileset dir="${commons.root}/src"/>
    </zip>
    <zip destfile="${commons.root}/jaxb-webapp-commons-compact.src.zip">
      <fileset dir="${commons.root}/src" excludes="**/multipart/**"/>
    </zip>
  </target>
</project>
<?xml version="1.0"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 1997-2010 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<!--
  base dir has to be jaxb-ri for this to be work correctly
  when it's called from the jaxb-ri/build.xml
-->
<project name="xmllint" basedir="../.." default="jar">

    <!-- import build properties -->
    <property file="${basedir}/build.properties" />

    <property name="name" value="xmllint" />
    <property name="root" value="${jaxb.root}/tools/${name}" />

    <target name="compile">
        <mkdir dir="${root}/build/classes" />
        <javac srcdir="${root}/src" destdir="${root}/build/classes"
            debug="${compile.debug}" optimize="${compile.optimize}" source="1.6" target="1.6" />
    </target>

    <target name="jar" depends="compile">
        <jar destfile="${root}/build/${name}.jar" manifest="${root}/MANIFEST.MF">
            <fileset dir="${root}/build/classes"/>
        </jar>
        <zip destfile="${root}/build/${name}.src.zip">
            <fileset dir="${root}/src"/>
        </zip>
    </target>

    <target name="clean">
        <delete dir="${root}/build" />
    </target>
</project>
