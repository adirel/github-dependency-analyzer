<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." default="build-all" name="PubnubApi">
    <property environment="env"/>
    <loadfile property="VERSION" srcFile="../VERSION"><filterchain><striplinebreaks/></filterchain></loadfile>
    <property name="pubnub_lib_jar" value="Pubnub-Android-${VERSION}.jar"/>
    <property name="pubnub_debug_lib_jar" value="Pubnub-Android-Debug-${VERSION}.jar"/>
    <property name="java_core_path" value="../java"/>
    <property name="src_pubnub_api_path" value="${java_core_path}/srcPubnubApi"/>
    <property name="src_java_path" value="${java_core_path}/src1"/>
    <property name="src_logging_path" value="./srcLogging"/>
    <property name="src_android_path" value="./src"/>
    <property name="android_jar_path" value="jars"/>
    <property name="target" value="1.5"/>
    <property name="source" value="1.5"/>
    <path id="classpath">
        <pathelement location="bin"/>
        <pathelement location="${java_core_path}/libs/bcprov-jdk15on-1.47.jar"/>
        <pathelement location="libs/android-8.jar"/>
    </path>
    <target name="test" />
    <target name="build-all" depends="debug-build, clean, build" />
    <target name="setDebugTrue" >
        <replace dir="${src_pubnub_api_path}" token="boolean LOGGING = false" value="boolean LOGGING = true">
            <include name="**/*.java"/>
        </replace>
    </target>
    <target name="unsetDebugTrue" >
        <replace dir="${src_pubnub_api_path}" token="boolean LOGGING = true" value="boolean LOGGING = false">
            <include name="**/*.java"/>
        </replace>
    </target>
    <target name="init">
        <mkdir dir="bin"/>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="${src_pubnub_api_path}">
                <exclude name="**/*.launch"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>
    <target name="clean">
        <delete dir="bin"/>
    </target>
    <target depends="clean" name="cleanall"/>
    <target depends="copy_jars_to_examples" name="build-jar"/>
    <target depends="create-jar" name="copy_jars_to_examples">
        <copy file="${pubnub_lib_jar}" todir="./examples/PubnubExample/libs/"/>
        <copy file="${pubnub_lib_jar}" todir="./examples/SubscribeAtBoot/libs/"/>
    </target>


    <target name="build" depends="clean">
        <delete file="${pubnub_lib_jar}"/>
        <antcall target="build-jar">
            <param name="jar_name" value="${pubnub_lib_jar}" />
            <param name="debug" value="false" />
        </antcall>
    </target>
    <target name="debug-build" depends="clean">
        <delete file="${pubnub_debug_lib_jar}"/>
        <antcall target="setDebugTrue" />
        <antcall target="build-jar">
            <param name="jar_name" value="${pubnub_debug_lib_jar}" />
            <param name="debug" value="true" />
        </antcall>
        <antcall target="unsetDebugTrue" />
    </target>

    <target depends="build-project" name="create-jar">
        <jar destfile="${jar_name}"
            basedir="bin"
            includes="**/**"
        />
    </target>

    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <replace dir="${src_pubnub_api_path}" token='static String VERSION = ""' value='static String VERSION = "${VERSION}"' >
            <include name="**/*.java"/>
        </replace>
        <javac debug="${debug}" destdir="bin" source="${source}" target="${target}">
            <src path="${src_pubnub_api_path}"/>
            <src path="${src_java_path}"/>
            <src path="${src_logging_path}"/>
            <src path="${src_android_path}"/>
            <classpath refid="classpath"/>
        </javac>
        <replace dir="${src_pubnub_api_path}" token='static String VERSION = "${VERSION}"' value='static String VERSION = ""'>
            <include name="**/*.java"/>
        </replace>
    </target>
</project>
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." default="build-all" name="PubnubApi">
    <property environment="env"/>
    <loadfile property="VERSION" srcFile="../VERSION"><filterchain><striplinebreaks/></filterchain></loadfile>
    <property name="pubnub_lib_jar" value="Pubnub-BlackBerry-${VERSION}.jar"/>
    <property name="pubnub_debug_lib_jar" value="Pubnub-BlackBerry-Debug-${VERSION}.jar"/>
    <property name="srcPubnubApi.link" value="../java/srcPubnubApi"/>
    <property name="j2me.link" value="../j2me"/>
    <property name="target" value="1.1"/>
    <property name="source" value="1.3"/>
    <path id="PubnubApi.classpath">
        <pathelement location="bin"/>
        <pathelement location="${j2me.link}/libs/cldc_1.1.jar"/>
        <pathelement location="${j2me.link}/libs/jsr177_1.0.jar"/>
        <pathelement location="${j2me.link}/libs/midp_2.0.jar"/>
        <pathelement location="${j2me.link}/libs/bouncycastle.jar"/>
        <pathelement location="${j2me.link}/libs/jsonme.jar"/>
        <pathelement location="${j2me.link}/libs/tinylinegzip.jar"/>
    </path>
    <target name="test" />
    <target name="build-all" depends="debug-build, build" />
    <target name="setJsonMeJar" >
        <replace dir="${srcPubnubApi.link}" token="org.json" value="org.json.me">
            <include name="**/*.java"/>
        </replace>
    </target>
    <target name="unsetJsonMeJar" >
        <replace dir="${srcPubnubApi.link}" token="org.json.me" value="org.json">
            <include name="**/*.java"/>
        </replace>
    </target>
    <target depends="setJsonMeJar" name="init">
        <mkdir dir="bin"/>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="${srcPubnubApi.link}">
                <exclude name="**/*.launch"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>
    <target depends="unsetJsonMeJar" name="clean">
        <delete dir="bin"/>
    </target>
    <target depends="clean" name="cleanall"/>
    <target name="setDebugTrue" >
        <replace dir="${srcPubnubApi.link}" token="boolean LOGGING = false" value="boolean LOGGING = true">
            <include name="**/*.java"/>
        </replace>
    </target>
    <target name="unsetDebugTrue" >
        <replace dir="${srcPubnubApi.link}" token="boolean LOGGING = true" value="boolean LOGGING = false">
            <include name="**/*.java"/>
        </replace>
    </target>
    <target name="build" depends="clean" >
        <antcall target="build-jar">
            <param name="jar_name" value="${pubnub_lib_jar}" />
            <param name="debug" value="false" />
        </antcall>
    </target>
    <target name="debug-build" depends="clean" >
        <antcall target="setDebugTrue" />
        <antcall target="build-jar">
            <param name="jar_name" value="${pubnub_debug_lib_jar}" />
            <param name="debug" value="true" />
        </antcall>
        <antcall target="unsetDebugTrue" />
    </target>
    <target depends="create-jar, clean" name="build-jar"/>
    <target depends="build-project" name="create-jar">
        <jar destfile="${jar_name}"
            basedir="bin"
            includes="**/**"
        />
        <exec failonerror="true" executable="tools/preverify">
            <arg line="-classpath libs/net_rim_api.jar:libs/bouncycastle.jar:../j2me/libs/tinylinegzip.jar"/>
            <arg line="-d output"/>
            <arg line="${jar_name}"/>
        </exec>
        <move verbose="true" file="output/${jar_name}" tofile="${jar_name}"/>
        <delete dir="output"/>
    </target>

    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <replace dir="${srcPubnubApi.link}" token='static String VERSION = ""' value='static String VERSION = "${VERSION}"' >
            <include name="**/*.java"/>
        </replace>
        <javac debug="${debug}" destdir="bin" source="${source}" target="${target}">
            <src path="${srcPubnubApi.link}"/>
            <src path="src"/>
            <src path="${j2me.link}/src1"/>
            <src path="${j2me.link}/srcLogging"/>
            <classpath refid="PubnubApi.classpath"/>
        </javac>
        <replace dir="${srcPubnubApi.link}" token='static String VERSION = "${VERSION}"' value='static String VERSION = ""'>
            <include name="**/*.java"/>
        </replace>
    </target>
</project>
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." default="build-all">
    <target name="build-all">
        <subant target="build-all" >
            <fileset dir="." includes="*/build.xml" />
        </subant>
    </target>
    <target name="build">
        <subant target="build" >
            <fileset dir="." includes="*/build.xml" />
        </subant>
    </target>
    <target name="debug-build">
        <subant target="debug-build" >
            <fileset dir="." includes="*/build.xml" />
        </subant>
    </target>
    <target name="test">
        <subant target="test" >
            <fileset dir="." includes="*/build.xml" />
        </subant>
    </target>
    <target name="clean" >
        <subant target="clean">
            <fileset dir="." includes="*/build.xml" />
        </subant>
    </target>
</project>
<?xml version="1.0" encoding="UTF-8"?>
    <!--build_version=1.3-->
    
    
<project name="PubnubClientSDK" default="build-all" basedir=".">
    <description>Builds, tests, and runs the project PubnubClientSDK.</description>
    <import file="nbproject/build-impl.xml"/>
    <loadfile property="VERSION" srcFile="../../VERSION"><filterchain><striplinebreaks/></filterchain></loadfile>
    <property name="pubnub_cn1lib_file_name" value="../Pubnub-CodeNameOne-${VERSION}.cn1lib"/>
    <property name="pubnub_debug_cn1lib_file_name" value="../Pubnub-CodeNameOne-Debug-${VERSION}.cn1lib"/>
    <property file="codenameone_settings.properties"/>

    <target name="create-src">
        <mkdir dir="src"/>
        <copy includeemptydirs="true" todir="src">
            <fileset dir="../../java/srcPubnubApi"/>
        </copy>
        <copy includeemptydirs="true" todir="src/com/codename1">
            <fileset dir="../src/com/codename1"/>
        </copy>
        <copy includeemptydirs="true" todir="src/com/pubnub/api">
            <fileset dir="../src/com/pubnub/api/"/>
        </copy>
    </target>
    <target name="delete-src">
        <delete dir="src"/>
    </target>
    <target name="copy-lib">
        <copy file="dist/PubnubClientSDK.cn1lib" tofile="${jar_name}"/>
    </target>

    <target name="setDebugTrue" >
        <replace dir="../../java/srcPubnubApi" token="boolean LOGGING = false" value="boolean LOGGING = true">
            <include name="**/*.java"/>
        </replace>
    </target>
    <target name="unsetDebugTrue" >
        <replace dir="../../java/srcPubnubApi" token="boolean LOGGING = true" value="boolean LOGGING = false">
            <include name="**/*.java"/>
        </replace>
    </target>

    <target name="debug-build" depends="clean">
        <delete file="${pubnub_debug_cn1lib_file_name}"/>
        <antcall target="build-lib">
            <param name="jar_name" value="${pubnub_debug_cn1lib_file_name}" />
        </antcall>
    </target>
    <target name="build" depends="clean">
        <delete file="${pubnub_cn1lib_file_name}"/>
        <antcall target="build-lib">
            <param name="jar_name" value="${pubnub_cn1lib_file_name}" />
        </antcall>
    </target>
    <target depends="create-src, default, delete-src, copy-lib, clean" name="build-lib">
    </target>
    
    <target depends="init,compile,jar" name="compile-test">
    </target>

    <target depends="compile-test" name="-do-test-run">        
    </target>
    
    <target depends="-do-test-run" description="Run unit tests." name="test">
        <echo>Currently testing a library project isn't supported</echo>
    </target>

    <target depends="create-src" name="-pre-compile">
        <echo>Compile is forcing compliance to the supported API's/features for maximum device compatibility. This allows smaller
        code size and wider device support</echo>
        <mkdir dir="build/tmp"/>
        <javac destdir="build/tmp"
            source="1.5"
            target="1.5"
            bootclasspath="lib/CLDC11.jar"
            classpath="${javac.classpath}:${build.classes.dir}">
            <src path="${src.dir}"/>
        </javac>        
    </target>

      
    <target name="-pre-init">
        <property name="javac.source" value="1.5" />
        <property name="javac.target" value="1.5" />
    </target>

    <target name="run">
        <echo>You can't run a library project</echo>
    </target>

    <target name="debug">
        <echo>You can't run a library project</echo>
    </target>

    <target name="Stubs">
        <delete dir="build/stubs"/>
        <javadoc sourcepath="src"
            classpath="lib/CodenameOne.jar:lib/CLDC11.jar:lib/bccn1/bouncycastle.zip:lib/json/json.zip"
            docletpath="Stubber.jar"
            doclet="com.codename1.build.client.StubGenerator"> 
            <fileset dir="${src.dir}" excludes="*.java,${excludes}" includes="${includes}">
                <filename name="**/*.java"/>
            </fileset>
         </javadoc>
    </target>

    <target name="jar" depends="compile, Stubs">
        <mkdir dir="build/lib" />
        <zip basedir="${build.classes.dir}" compress="false" destfile="build/lib/main.zip" />
        <zip basedir="build/stubs" compress="false" destfile="build/lib/stubs.zip" />
        <copy file="manifest.properties" todir="build/lib" />
        <!--<antcall target="buildNativeIOS" />        
        <antcall target="buildNativeRIM" />        
        <antcall target="buildNativeAND" />        
        <antcall target="buildNativeWIN" />        
        <antcall target="buildNativeME" />    -->   
        <mkdir dir="dist" />
        <zip basedir="build/lib" compress="true" destfile="dist/${application.title}.cn1lib" />
    </target>

</project>
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." default="build-all">
    <target name="build-all">
        <antcall target="build"/>
        <antcall target="clean"/>
        <antcall target="debug-build"/>
    </target>
    <target name="build">
        <subant target="build" >
            <fileset dir="." includes="*/build.xml" />
        </subant>
    </target>
    <target name="debug-build">
        <subant target="debug-build" >
            <fileset dir="." includes="*/build.xml" />
        </subant>
    </target>
    <target name="test">
        <subant target="test" >
            <fileset dir="." includes="*/build.xml" />
        </subant>
    </target>
    <target name="clean" >
        <subant target="clean">
            <fileset dir="." includes="*/build.xml" />
        </subant>
    </target>
</project>
<?xml version="1.0" encoding="UTF-8"?>
    <!--build_version=1.7-->
    
    <!-- IMPORTANT!!! When building for ios: if you don't supply the certificate/provisioning profile etc. you will not 
    be able to run on a regular device (only on jailbroken devices) in that case your package name MUST be: com.codename1.demos.lwuitdemo

    Required attributes for the task:

    jarFile - the application jar file resulting from the build

    displayName - display name for the application in the UI

    Either packageName and mainClassName or fullClassName:
    mainClassName - the name of the main class not including the package name

    packageName - the package in which the main class resides, this will also 
    be used to classify the application. It is recommended you give this some thought since
    package names are impossible to change later on some stores!

    fullClassName - combination of packageName.mainClassName

    icon - a 512x512 pixel icon in PNG format, it will be adjusted for the proper resolutions. 
    Notice that this icon SHOULDN'T include the iphone tint effect since that effect is overlayed 
    by the iphone build process

    targetType - the device target, one of the following: iphone, android, rim, me (for j2me support), 
    win (for Windows Phone 7 support - pending)

    vendor - the vendor name
    
    Optional attributes for iphone development these are REQUIRED if you want to distribute an application for
    any purpose. For details on obtaining these files please go to codenameone.com:
    certificate - optional for the iPhone project, the p12 certificate file for signing
    certPassword - required if the certificate is specified
    ProvisioningProfile - if the certificate is specified a mobile_provisioning file received from Apple must be supplied too

    userName - login information from codenameone.com

    password - the password matching your login from codenameone.com

    subtitle - iphone secondary title

    version - the version number for the application as a floating point value

    -->
    
    <project name="PubnubDevConsoleWithCn1lib" default="default" basedir=".">
    <description>Builds, tests, and runs the project PubnubDevConsoleWithCn1lib.</description>
    <import file="nbproject/build-impl.xml"/>
    <property file="codenameone_settings.properties"/>
    <taskdef name="codeNameOne" classname="com.codename1.build.client.CodeNameOneBuildTask" classpath="CodeNameOneBuildClient.jar"/>
    <taskdef name="prepareTests" classname="com.codename1.build.client.PrepareTestsTask" classpath="CodeNameOneBuildClient.jar"/>
    <taskdef name="installLibs" classname="com.codename1.build.client.InstallLibsTask" classpath="CodeNameOneBuildClient.jar"/>

    <target depends="init,compile,jar" name="compile-test">
        <mkdir dir="${build.test.classes.dir}" />
        <javac destdir="${build.test.classes.dir}"
            encoding="${source.encoding}"
            source="1.5"
            target="1.5"
            bootclasspath="CLDC11.jar"
            classpath="${javac.classpath}:${build.classes.dir}">
            <src path="${test.src.dir}"/>
        </javac>        
        <prepareTests classesDir="${build.classes.dir}" testClassesDir="${build.test.classes.dir}" seJar="JavaSE.jar" metaDataFile="${build.test.classes.dir}/tests.dat" />
        <jar jarfile="dist/unitTests.jar">
            <fileset dir="${build.classes.dir}"/>
            <fileset dir="${build.test.classes.dir}"/>
            <fileset dir="lib/impl/cls"/>
        </jar>
    </target>

    <target depends="compile-test" name="-do-test-run">        
        <!-- JavaSE.jar is added here since the test execution might fail otherwise for a pre-existing project -->
        <java classpath="dist/unitTests.jar:${javac.test.classpath}:${file.reference.JavaSE.jar}" classname="com.codename1.impl.javase.TestRunner">
            <arg value="${codename1.packageName}.${codename1.mainName}" />
        </java>
    </target>
    
    <target depends="-do-test-run" description="Run unit tests." name="test"/>

    <target name="-pre-compile">
        <echo>Compile is forcing compliance to the supported API's/features for maximum device compatibility. This allows smaller
        code size and wider device support</echo>
        <mkdir dir="build/tmp"/>
        <javac destdir="build/tmp"
            encoding="${source.encoding}"
            source="1.5"
            target="1.5"
            bootclasspath="lib/CLDC11.jar"
            classpath="${javac.classpath}:${build.classes.dir}">
            <src path="${src.dir}"/>
        </javac>        
    </target>

    <target name="-post-compile">
        <delete>
            <fileset dir="${build.classes.dir}" includes="**/package-info.class"/>
        </delete>
        <delete>
            <fileset dir="${build.classes.dir}" includes="**/package-info.class"/>
        </delete>
        <delete>
            <fileset dir="${build.classes.dir}" includes="**/Thumbs.db"/>
        </delete>
    </target>

    <target name="build-for-ios-device" depends="clean,copy-ios-override,copy-libs,jar,clean-override">
        <codeNameOne 
            jarFile="${dist.jar}"
            displayName="${codename1.displayName}"
            packageName = "${codename1.packageName}"
            mainClassName = "${codename1.mainName}"
            version="${codename1.version}"
            icon="${codename1.icon}"
            vendor="${codename1.vendor}"
            subtitle="${codename1.secondaryTitle}"
            
            targetType="iphone"
            certificate="${codename1.ios.debug.certificate}"
            certPassword="${codename1.ios.debug.certificatePassword}"
            provisioningProfile="${codename1.ios.debug.provision}"
            appid="${codename1.ios.appid}"
            />
    </target>

    <target name="test-for-ios-device" depends="clean,copy-ios-override,copy-libs,jar,clean-override">
        <codeNameOne 
            jarFile="${dist.jar}"
            displayName="${codename1.displayName}"
            packageName = "${codename1.packageName}"
            mainClassName = "${codename1.mainName}"
            version="${codename1.version}"
            icon="${codename1.icon}"
            vendor="${codename1.vendor}"
            subtitle="${codename1.secondaryTitle}"
            buildArgs="build.unitTest=1"
            targetType="iphone"
            certificate="${codename1.ios.debug.certificate}"
            certPassword="${codename1.ios.debug.certificatePassword}"
            provisioningProfile="${codename1.ios.debug.provision}"
            appid="${codename1.ios.appid}"
            />
    </target>

    <target name="test-for-android-device" depends="clean,copy-android-override,copy-libs,jar,clean-override">
        <codeNameOne 
            jarFile="${dist.jar}"
            displayName="${codename1.displayName}"
            packageName = "${codename1.packageName}"
            mainClassName = "${codename1.mainName}"
            version="${codename1.version}"
            icon="${codename1.icon}"
            vendor="${codename1.vendor}"
            subtitle="${codename1.secondaryTitle}"
            buildArgs="build.unitTest=1"
            targetType="android"
            keystoreAlias="${codename1.android.keystoreAlias}"
            keystore="${codename1.android.keystore}"
            certPassword="${codename1.android.keystorePassword}"
            />
    </target>

    <target name="test-for-rim-device" depends="clean,copy-rim-override,copy-libs,jar,clean-override">
        <codeNameOne 
            jarFile="${dist.jar}"
            displayName="${codename1.displayName}"
            packageName = "${codename1.packageName}"
            mainClassName = "${codename1.mainName}"
            version="${codename1.version}"
            icon="${codename1.icon}"
            vendor="${codename1.vendor}"
            subtitle="${codename1.secondaryTitle}"
            buildArgs="build.unitTest=1"
            targetType="rim"
            sigtoolDb="${codename1.rim.signtoolDb}"
            certPassword="${codename1.rim.certificatePassword}"
            sigtoolCsk="${codename1.rim.signtoolCsk}"
            />
        <delete>
            <fileset dir="${build.classes.dir}" includes="**/*.class"/>
        </delete>
    </target>

     <target name="test-for-j2me-device" depends="clean,j2me-native-theme-init,copy-j2me-native,copy-j2me-override,copy-libs,jar,clean-j2me-native,clean-override">
        <codeNameOne
            jarFile="${dist.jar}"
            displayName="${codename1.displayName}"
            packageName = "${codename1.packageName}"
            mainClassName = "${codename1.mainName}"
            version="${codename1.version}"
            icon="${codename1.icon}"
            vendor="${codename1.vendor}"
            subtitle="${codename1.secondaryTitle}"
            targetType="me"            
            buildArgs="build.unitTest=1"
            />
        <delete>
            <fileset dir="${build.classes.dir}" includes="**/*.class"/>
        </delete>
    </target>

    
    <target name="build-for-ios-device-release" depends="clean,copy-ios-override,copy-libs,jar,clean-override">
        <codeNameOne 
            jarFile="${dist.jar}"
            displayName="${codename1.displayName}"
            packageName = "${codename1.packageName}"
            mainClassName = "${codename1.mainName}"
            version="${codename1.version}"
            icon="${codename1.icon}"
            vendor="${codename1.vendor}"
            subtitle="${codename1.secondaryTitle}"
            appStoreBuild="true"
            production="true"
            targetType="iphone"
            certificate="${codename1.ios.release.certificate}"
            certPassword="${codename1.ios.release.certificatePassword}"
            provisioningProfile="${codename1.ios.release.provision}"
            appid="${codename1.ios.appid}"
            />
    </target>

    <target name="copy-libs" depends="init">
        <copy todir="${build.classes.dir}">
            <fileset dir="lib/impl/cls" />
        </copy>
    </target>

    <target name="copy-android-override">
        <mkdir dir="${build.classes.dir}" />
        <mkdir dir="override" />
        <copy todir="${build.classes.dir}">
            <fileset dir="override" includes="**/*_android.ovr"/>
            <fileset dir="override" includes="**/*_android-phone.ovr"/>
            <fileset dir="override" includes="**/*_android-tab.ovr"/>
            <fileset dir="override" includes="**/*_phone.ovr"/>
            <fileset dir="override" includes="**/*_tablet.ovr"/>
        </copy>
        <copy todir="${build.classes.dir}">
            <fileset dir="native/android" includes="**/*"/>
            <fileset dir="lib/impl/native/android" includes="**/*"/>
        </copy>
    </target>
    
    <target name="copy-ios-override">
        <mkdir dir="${build.classes.dir}" />
        <mkdir dir="override" />
        <copy todir="${build.classes.dir}">
            <fileset dir="override" includes="**/*_ios.ovr"/>
            <fileset dir="override" includes="**/*_iphone.ovr"/>
            <fileset dir="override" includes="**/*_ipad.ovr"/>
            <fileset dir="override" includes="**/*_phone.ovr"/>
            <fileset dir="override" includes="**/*_tablet.ovr"/>
        </copy>
        <copy todir="${build.classes.dir}">
            <fileset dir="native/ios" includes="**/*"/>
            <fileset dir="lib/impl/native/ios" includes="**/*"/>
        </copy>
    </target>
        
    <target name="copy-rim-override">
        <mkdir dir="${build.classes.dir}" />
        <mkdir dir="override" />
        <copy todir="${build.classes.dir}">
            <fileset dir="override" includes="**/*_rim.ovr"/>
            <fileset dir="override" includes="**/*_phone.ovr"/>
        </copy>
        <copy todir="${build.classes.dir}">
            <fileset dir="native/rim" includes="**/*"/>
            <fileset dir="lib/impl/native/rim" includes="**/*"/>
        </copy>
    </target>

    <target name="copy-j2me-override">
        <mkdir dir="${build.classes.dir}" />
        <mkdir dir="override" />
        <copy todir="${build.classes.dir}">
            <fileset dir="override" includes="**/*_me.ovr"/>
            <fileset dir="override" includes="**/*_phone.ovr"/>
        </copy>
        <copy todir="${build.classes.dir}">
            <fileset dir="native/j2me" includes="**/*"/>
            <fileset dir="lib/impl/native/j2me" includes="**/*"/>
        </copy>
    </target>

    <target name="clean-override">
        <delete>
            <fileset dir="${build.classes.dir}" includes="**/*.ovr"/>
            <fileset dir="${build.classes.dir}" includes="**/*.java"/>
            <fileset dir="${build.classes.dir}" includes="**/*.m"/>
            <fileset dir="${build.classes.dir}" includes="**/*.h"/>
        </delete>
    </target>
    
    <target name="build-for-android-device" depends="clean,copy-android-override,copy-libs,jar,clean-override">
        <codeNameOne 
            jarFile="${dist.jar}"
            displayName="${codename1.displayName}"
            packageName = "${codename1.packageName}"
            mainClassName = "${codename1.mainName}"
            version="${codename1.version}"
            icon="${codename1.icon}"
            vendor="${codename1.vendor}"
            subtitle="${codename1.secondaryTitle}"
            
            targetType="android"
            keystoreAlias="${codename1.android.keystoreAlias}"
            keystore="${codename1.android.keystore}"
            certPassword="${codename1.android.keystorePassword}"
            />
    </target>

    <target name="build-for-rim-device" depends="clean,copy-rim-override,copy-libs,jar,clean-override">
        <codeNameOne 
            jarFile="${dist.jar}"
            displayName="${codename1.displayName}"
            packageName = "${codename1.packageName}"
            mainClassName = "${codename1.mainName}"
            version="${codename1.version}"
            icon="${codename1.icon}"
            vendor="${codename1.vendor}"
            subtitle="${codename1.secondaryTitle}"

            targetType="rim"
            sigtoolDb="${codename1.rim.signtoolDb}"
            certPassword="${codename1.rim.certificatePassword}"
            sigtoolCsk="${codename1.rim.signtoolCsk}"
            />
        <delete>
            <fileset dir="${build.classes.dir}" includes="**/*.class"/>
        </delete>
    </target>

     <target name="build-for-j2me-device" depends="clean,j2me-native-theme-init,copy-j2me-native,copy-j2me-override,copy-libs,jar,clean-j2me-native,clean-override">
        <codeNameOne
            jarFile="${dist.jar}"
            displayName="${codename1.displayName}"
            packageName = "${codename1.packageName}"
            mainClassName = "${codename1.mainName}"
            version="${codename1.version}"
            icon="${codename1.icon}"
            vendor="${codename1.vendor}"
            subtitle="${codename1.secondaryTitle}"
            targetType="me"            
            />
        <delete>
            <fileset dir="${build.classes.dir}" includes="**/*.class"/>
        </delete>
    </target>
      
    <target name="j2me-native-theme-init">
        <available file="${codename1.j2me.nativeTheme}" property="j2me-native-theme.available" />
    </target>
    
    <target name="copy-j2me-native" if="j2me-native-theme.available">
        <copy file="${codename1.j2me.nativeTheme}" tofile="src/nativeJ2METheme.res" />
    </target>

    <target name="clean-j2me-native" if="j2me-native-theme.available">
        <delete file="src/nativeJ2METheme.res" />
    </target>
      
    <target name="-pre-init">
        <property name="application.args" value="${codename1.packageName}.${codename1.mainName}"/>
        <property name="javac.source" value="1.5" />
        <property name="javac.target" value="1.5" />
        <mkdir dir="native/android" />
        <mkdir dir="native/ios" />
        <mkdir dir="native/j2me" />
        <mkdir dir="native/rim" />
        <mkdir dir="native/win" />
        <mkdir dir="lib/impl/cls" />
        <mkdir dir="lib/impl/stubs" />
        <mkdir dir="lib/impl/native" />
        <mkdir dir="lib/impl/native/android" />
        <mkdir dir="lib/impl/native/ios" />
        <mkdir dir="lib/impl/native/j2me" />
        <mkdir dir="lib/impl/native/rim" />
        <mkdir dir="lib/impl/native/win" />
        <installLibs lib="lib" dest="lib/impl" />
    </target>

    <target name="-post-clean" depends="refresh-libs">
    </target>

    <target name="refresh-libs">
        <delete dir="lib/impl" />
        <installLibs lib="lib" dest="lib/impl" />        
    </target>

    <target name="copy-windows-override">
        <mkdir dir="${build.classes.dir}" />
        <mkdir dir="override" />
        <copy todir="${build.classes.dir}">
            <fileset dir="override" includes="**/*_win.ovr"/>
            <fileset dir="override" includes="**/*_win-phone.ovr"/>
            <fileset dir="override" includes="**/*_win-tab.ovr"/>
            <fileset dir="override" includes="**/*_phone.ovr"/>
            <fileset dir="override" includes="**/*_tablet.ovr"/>
        </copy>
        <mkdir dir="native/win" />
        <copy todir="${build.classes.dir}">
            <fileset dir="native/win" includes="**/*"/>
            <fileset dir="lib/impl/native/win" includes="**/*"/>
        </copy>
    </target>

    <target name="build-for-win-device" depends="clean,copy-windows-override,copy-libs,jar,clean-override">
        <codeNameOne 
            jarFile="${dist.jar}"
            displayName="${codename1.displayName}"
            packageName = "${codename1.packageName}"
            mainClassName = "${codename1.mainName}"
            version="${codename1.version}"
            icon="${codename1.icon}"
            vendor="${codename1.vendor}"
            subtitle="${codename1.secondaryTitle}"
            
            targetType="win"
            />
    </target>
        
</project>
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." default="build-all" name="PubnubApi">
    <property environment="env"/>
    <loadfile property="VERSION" srcFile="../VERSION"><filterchain><striplinebreaks/></filterchain></loadfile>
    <property name="pubnub_lib_jar" value="Pubnub-MicroEdition-${VERSION}.jar"/>
    <property name="pubnub_debug_lib_jar" value="Pubnub-MicroEdition-Debug-${VERSION}.jar"/>
    <property name="srcPubnubApi.link" value="../java/srcPubnubApi"/>
    <property name="target" value="1.1"/>
    <property name="source" value="1.3"/>
    <path id="PubnubApi.classpath">
        <pathelement location="bin"/>
        <pathelement location="libs/cldc_1.1.jar"/>
        <pathelement location="libs/jsr177_1.0.jar"/>
        <pathelement location="libs/midp_2.0.jar"/>
        <pathelement location="libs/bouncycastle.jar"/>
        <pathelement location="libs/jsonme.jar"/>
        <pathelement location="libs/tinylinegzip.jar"/>
    </path>
    <target name="test" />
    <target name="build-all" depends="debug-build, build" />
    <target name="setJsonMeJar" >
        <replace dir="${srcPubnubApi.link}" token="org.json" value="org.json.me">
            <include name="**/*.java"/>
        </replace>
    </target>
    <target name="unsetJsonMeJar" >
        <replace dir="${srcPubnubApi.link}" token="org.json.me" value="org.json">
            <include name="**/*.java"/>
        </replace>
    </target>
    <target depends="setJsonMeJar" name="init">
        <mkdir dir="bin"/>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="${srcPubnubApi.link}">
                <exclude name="**/*.launch"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>
    <target depends="unsetJsonMeJar" name="clean">
        <delete dir="bin"/>
    </target>
    <target depends="clean" name="cleanall"/>
    <target name="setDebugTrue" >
        <replace dir="${srcPubnubApi.link}" token="boolean LOGGING = false" value="boolean LOGGING = true">
            <include name="**/*.java"/>
        </replace>
    </target>
    <target name="unsetDebugTrue" >
        <replace dir="${srcPubnubApi.link}" token="boolean LOGGING = true" value="boolean LOGGING = false">
            <include name="**/*.java"/>
        </replace>
    </target>
    <target name="build" depends="clean">
        <delete file="${pubnub_lib_jar}"/>
        <antcall target="build-jar">
            <param name="jar_name" value="${pubnub_lib_jar}" />
            <param name="debug" value="false" />
        </antcall>
    </target>
    <target name="debug-build" depends="clean">
        <delete file="${pubnub_debug_lib_jar}"/>
        <antcall target="setDebugTrue" />
        <antcall target="build-jar">
            <param name="jar_name" value="${pubnub_debug_lib_jar}" />
            <param name="debug" value="true" />
        </antcall>
        <antcall target="unsetDebugTrue" />
    </target>
    <target depends="create-jar, clean" name="build-jar"/>
    <target depends="build-project" name="create-jar">
        <jar destfile="${jar_name}"
            basedir="bin"
            includes="**/**"
        />
    </target>

    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <replace dir="${srcPubnubApi.link}" token='static String VERSION = ""' value='static String VERSION = "${VERSION}"' >
            <include name="**/*.java"/>
        </replace>
        <javac debug="${debug}" destdir="bin" source="${source}" target="${target}">
            <src path="${srcPubnubApi.link}"/>
            <src path="src"/>
            <src path="src1"/>
            <src path="srcLogging"/>
            <classpath refid="PubnubApi.classpath"/>
        </javac>
        <replace dir="${srcPubnubApi.link}" token='static String VERSION = "${VERSION}"' value='static String VERSION = ""'>
            <include name="**/*.java"/>
        </replace>
    </target>
</project>
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." default="build-all" name="PubnubApi" xmlns:artifact="antlib:org.apache.maven.artifact.ant">
    <loadfile property="VERSION" srcFile="../VERSION"><filterchain><striplinebreaks/></filterchain></loadfile>
    <property environment="env"/>
    <property name="pubnub_jar_file_name" value="Pubnub-StandardEdition-${VERSION}.jar"/>
    <property name="pubnub_debug_jar_file_name" value="Pubnub-StandardEdition-Debug-${VERSION}.jar"/>
    <property name="pubnub_unittests_jar_file_name" value="Pubnub-UnitTests-${VERSION}.jar"/>
    <property name="srcPubnubApi.link" value="srcPubnubApi"/>
    <property name="sources_pubnub_api" value="${srcPubnubApi.link}/com/pubnub/api"/>
    <property name="sources_pubnub_logging" value="srcLogging/com/pubnub/api"/>
    <property name="sources_pubnub_java1" value="src1/com/pubnub/api"/>
    <property name="sources_pubnub_java" value="src/com/pubnub/api"/>
    <property name="target" value="1.5"/>
    <property name="source" value="1.5"/>
    <property name="debug" value="false"/>
    <path id="PubnubApi.classpath">
        <pathelement location="bin"/>
        <pathelement location="libs/bcprov-jdk15on-1.47.jar"/>
        <pathelement location="libs/json-20090211.jar"/>
        <pathelement location="libs/json-simple-1.1.1.jar"/>
        <pathelement location="libs/slf4j-api-1.7.5.jar"/>
        <pathelement location="libs/junit-4.11.jar"/>
        <pathelement location="jars/Pubnub-UnitTests-${VERSION}.jar"/>
    </path>
    <target name="build-all" depends="debug-build, build" />
    <path id="PubnubTests.classpath">
        <pathelement location="${pubnub_jar_file_name}"/>
        <pathelement location="libs/hamcrest-all-1.3.jar"/>
    </path>
    <target name="setDebugTrue" >
        <replace dir="${srcPubnubApi.link}" token="boolean LOGGING = false" value="boolean LOGGING = true">
            <include name="**/*.java"/>
        </replace>
    </target>
    <target name="unsetDebugTrue" >
        <replace dir="${srcPubnubApi.link}" token="boolean LOGGING = true" value="boolean LOGGING = false">
            <include name="**/*.java"/>
        </replace>
    </target>
    <target name="test" >
       <junit haltonfailure="yes" printsummary="yes" showoutput="true" >
            <classpath refid="PubnubApi.classpath" />
            <classpath refid="PubnubTests.classpath" />
            <formatter type="plain" usefile="false" />
            <batchtest>
                <zipfileset src="jars/${pubnub_unittests_jar_file_name}" includes="**/PubnubTest.class" />
            </batchtest>
       </junit>
    </target>
    <target name="init">
        <mkdir dir="bin"/>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="${srcPubnubApi.link}">
                <exclude name="**/*.launch"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>
    <target name="clean_bin">
        <delete dir="bin"/>
    </target>
    <target depends="clean_bin" name="clean">
        <!--<delete file="${pubnub_jar_file_name}"/>-->
        <delete>
            <fileset dir="jars" includes="**/*.jar"/>
        </delete>
    </target>
    <target name="build" depends="clean">
        <delete file="${pubnub_jar_file_name}"/>
        <antcall target="build-jar">
            <param name="jar_name" value="${pubnub_jar_file_name}" />
            <param name="debug" value="false" />
        </antcall>
    </target>
    <target name="debug-build" depends="clean">
        <delete file="${pubnub_debug_jar_file_name}"/>
        <antcall target="setDebugTrue" />
        <antcall target="build-jar">
            <param name="jar_name" value="${pubnub_debug_jar_file_name}" />
            <param name="debug" value="true" />
        </antcall>
        <antcall target="unsetDebugTrue" />
    </target>

    <target depends="create-jar, create-test-jar, create-examples-jar, create-demo-console-jar, create-presence-test-jar, clean_bin, doc" name="build-jar"/>
    <target depends="build-project" name="create-jar">
        <jar destfile="${jar_name}"
            basedir="bin"
            includes="**/**"
            excludes="**/*Test*.class"
        />
    </target>

    <target depends="build-project" name="create-test-jar">
        <jar destfile="jars/${pubnub_unittests_jar_file_name}"
            basedir="bin"
            includes="**/*Test*.class"
        />
    </target>

    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <replace dir="${srcPubnubApi.link}" token='static String VERSION = ""' value='static String VERSION = "${VERSION}"' >
            <include name="**/*.java"/>
        </replace>
        <javac destdir="bin" debug="${debug}" source="${source}" target="${target}">
            <src path="${srcPubnubApi.link}"/>
            <src path="src"/>
            <src path="src1"/>
            <src path="srcLogging"/>
            <src path="srcTest"/>
            <src path="examples/src"/>
            <classpath refid="PubnubApi.classpath"/>
        </javac>
        <replace dir="${srcPubnubApi.link}" token='static String VERSION = "${VERSION}"' value='static String VERSION = ""'>
            <include name="**/*.java"/>
        </replace>
    </target>

    <macrodef name="delete_old_jar">
        <attribute name="jar.filename" />
        <sequential>
            <delete file="@{jar.filename}">
            </delete>
        </sequential>
    </macrodef>

    <macrodef name="create_dirs">
        <sequential>
            <mkdir dir="jar_temp" />
            <mkdir dir="jar_temp/META-INF" />
        </sequential>
    </macrodef>

    <macrodef name="delete_temp_dirs">
        <sequential>
            <delete dir="jar_temp">
            </delete>
        </sequential>
    </macrodef>

    <macrodef name="create_manifest">
        <attribute name="jar.classname" />
        <sequential>
            <manifest file="jar_temp/META-INF/MANIFEST.MF">
                <attribute name="Manifest-Version" value="1.0" />
                <attribute name="Version" value="3.4" />
                <attribute name="Company" value="Pubnub" />
                <attribute name="Project" value="pubnub-api" />
                <attribute name="Java-Version" value="${java.version}" />
                <attribute name="Rsrc-Class-Path" value="./ bcprov-jdk15on-1.47.jar json-simple-1.1.1.jar json-20090211.jar slf4j-api-1.7.5.jar slf4j-simple-1.7.5.jar" />
                <attribute name="Class-Path" value="." />
                <attribute name="Rsrc-Main-Class" value="@{jar.classname}" />
                <attribute name="Main-Class" value="org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader" />
            </manifest>
        </sequential>
    </macrodef>

    <macrodef name="create_jar">
        <attribute name="jar.filename" />
        <sequential>
            <jar destfile="jars/@{jar.filename}" manifest="jar_temp/META-INF/MANIFEST.MF" basedir="jar_temp">
            </jar>
        </sequential>
    </macrodef>

    <macrodef name="copy_class_files">
        <sequential>
            <copy todir="jar_temp">
                <fileset dir="bin">
                    <include name="*/**" />
                </fileset>
                <fileset dir="libs">
                    <include name="*/**" />
                </fileset>
            </copy>
        </sequential>
    </macrodef>
    <macrodef name="create-jar">
        <attribute name="jar.type" />
        <attribute name="jar.classname" />
        <attribute name="jar.filename" />


        <sequential>
            <delete_old_jar jar.filename="@{jar.filename}" />
            <create_dirs />
            <create_manifest jar.classname="@{jar.classname}" />
            <copy_class_files />
            <create_jar jar.filename="@{jar.filename}" />
            <delete_temp_dirs  />
        </sequential>
    </macrodef>
    <target name="create-examples-jar">
        <create-jar jar.type="examples" jar.classname="com.pubnub.examples.PubnubExample" jar.filename="PubnubExample.jar" />
    </target>
    <target name="create-demo-console-jar">
        <create-jar jar.type="examples" jar.classname="com.pubnub.examples.PubnubDemoConsole" jar.filename="PubnubDemoConsole.jar" />
    </target>
    <target name="create-presence-test-jar">
        <create-jar jar.type="examples" jar.classname="com.pubnub.examples.PubnubPresenceTest" jar.filename="PubnubPresenceTest.jar" />
    </target>
    <target name="doc" depends="init" description="generate documentation">
        <javadoc access="public" sourcepath="srcPubnubApi:src:srcLogging:src1" destdir="doc" classpathref="PubnubApi.classpath"/>
      </target>

      <property name="src" location="src" />
      <property name="maven" location="maven" />
    <property name="build" location="build" />
    <property name="dist" location="dist" />

    <xmlproperty file="pom.xml" keepRoot="false" semanticAttributes="true"/>

    <property name="maven-jar" value="${dist}/lib/${artifactId}-${version}.jar" />
    <property name="maven-javadoc-jar" value="${dist}/lib/${artifactId}-${version}-javadoc.jar" />
    <property name="maven-sources-jar" value="${dist}/lib/${artifactId}-${version}-sources.jar" />

    <property name="maven-staging-repository-id" value="sonatype-nexus-staging" />
    <property name="maven-staging-repository-url" value="https://oss.sonatype.org/service/local/staging/deploy/maven2/" />

    <target name="debug-compile" description="compile the source with logging and debug">
        <replace dir="${maven}/src" token="boolean LOGGING = false" value="boolean LOGGING = true">
            <include name="**/*.java"/>
        </replace>
        <javac debug="${debug}" srcdir="${maven}/src" destdir="${build}" >
            <classpath refid="PubnubApi.classpath"/>
        </javac>
        <replace dir="${maven}/src" token="boolean LOGGING = true" value="boolean LOGGING = false">
            <include name="**/*.java"/>
        </replace>
    </target>
    <target name="compile" description="compile the source ">
        <javac debug="${debug}" srcdir="${maven}/src" destdir="${build}" >
            <classpath refid="PubnubApi.classpath"/>
        </javac>
    </target>

    <target name="dist" depends="compile" description="generate the distribution">

        <jar jarfile="${maven-jar}" basedir="${build}" />

        <javadoc sourcepath="${maven}/src" destdir="${dist}/javadoc" >
            <classpath refid="PubnubApi.classpath"/>
        </javadoc>
        <jar jarfile="${maven-javadoc-jar}">
            <fileset dir="${dist}/javadoc" />
        </jar>

        <jar jarfile="${maven-sources-jar}">
            <fileset dir="${maven}/src" />
        </jar>
    </target>

    <target name="stage" depends="dist" description="deploy release version to Maven staging repository">
        <artifact:mvn>
            <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
            <arg value="-Durl=${maven-staging-repository-url}" />
            <arg value="-DrepositoryId=${maven-staging-repository-id}" />
            <arg value="-DpomFile=pom.xml" />
            <arg value="-Dfile=${maven-jar}" />
                        <arg value="-Pgpg" />
        </artifact:mvn>

        <artifact:mvn>
            <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
            <arg value="-Durl=${maven-staging-repository-url}" />
            <arg value="-DrepositoryId=${maven-staging-repository-id}" />
            <arg value="-DpomFile=pom.xml" />
            <arg value="-Dfile=${maven-sources-jar}" />
            <arg value="-Dclassifier=sources" />
                        <arg value="-Pgpg" />
        </artifact:mvn>

        <artifact:mvn>
            <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
            <arg value="-Durl=${maven-staging-repository-url}" />
            <arg value="-DrepositoryId=${maven-staging-repository-id}" />
            <arg value="-DpomFile=pom.xml" />
            <arg value="-Dfile=${maven-javadoc-jar}" />
            <arg value="-Dclassifier=javadoc" />
                        <arg value="-Pgpg" />
        </artifact:mvn>
    </target>

    <target name="maven_clean" description="clean up">
        <delete dir="${build}" />
        <delete dir="${dist}" />
        <delete dir="${maven}" />
        <delete file="pom.xml.asc" />
    </target>

    <target name="push_to_maven_central" >
        <mkdir dir="${build}" />
        <mkdir dir="${maven}/src/com/pubnub/api" />
        <copy todir="${maven}/src/com/pubnub/api" >
            <fileset dir="${sources_pubnub_java}" />
            <fileset dir="${sources_pubnub_java1}" />
            <fileset dir="${sources_pubnub_logging}" />
            <fileset dir="${sources_pubnub_api}" />
        </copy>
        <mkdir dir="${dist}/lib" />
        <antcall target="stage"/>
        <antcall target="maven_clean"/>
    </target>

    <target name="push_debug_to_maven_central" >
        <mkdir dir="${build}" />
        <mkdir dir="${maven}/src/com/pubnub/api" />
        <copy todir="${maven}/src/com/pubnub/api" >
            <fileset dir="${sources_pubnub_java}" />
            <fileset dir="${sources_pubnub_java1}" />
            <fileset dir="${sources_pubnub_logging}" />
            <fileset dir="${sources_pubnub_api}" />
        </copy>
        <replace dir="${maven}/src" token="boolean LOGGING = false" value="boolean LOGGING = true">
            <include name="**/*.java"/>
        </replace>
        <replace dir="." token="artifactId>pubnub" value="artifactId>pubnub-debug">
            <include name="**/pom.xml"/>
        </replace>
        <mkdir dir="${dist}/lib" />
        <antcall target="stage">
            <param name="debug" value="true" />
        </antcall>
        <antcall target="maven_clean"/>
        <replace dir="." token="artifactId>pubnub-debug" value="artifactId>pubnub">
            <include name="**/pom.xml"/>
        </replace>
    </target>

</project>
