<!--For working with jparsec only. All dependency jar files should be in lib folder -->
<project name="jparsec" default="build" basedir=".">

  <!-- enviroment variables -->
  <property environment="env" />

  <!-- files -->

  <!-- directories -->
  <property name="src.dir" value="src" />
  <property name="build.dir" value="build" />
  <property name="tools.src.dir" value="tools/src" />
  <property name="tools.build.dir" value="tools/build" />
  <property name="examples.build.dir" value="examples/build" />
  <property name="test.dir" value="test" />
  <property name="examples.src.dir" value="examples/src" />
	<property name="examples.test.src.dir" value="examples/test/src"/>
  <property name="lib.dir" value="lib"/>
  <property name="test.lib.dir" value="lib"/>
  <property name="test.src.dir" value="${test.dir}/src" />
  <property name="test.build.dir" value="${test.dir}/build" />


  <!-- paths -->
  <path id="main.compile.classpath">
    <pathelement path="${java.class.path}"/>
    <pathelement location="${build.dir}"/>
    <pathelement location="${lib.dir}/cglib-nodep-2.1_3.jar"/>
  </path>
  <path id="tools.compile.classpath">
    <pathelement path="${java.class.path}"/>
    <pathelement location="${tools.build.dir}"/>
  </path>
	<path id="doc.classpath">
    <path refid="main.compile.classpath"/>
	</path>
  <path id="examples.compile.classpath">
    <pathelement path="${examples.src.dir}"/>
    <path refid="main.compile.classpath"/>
  </path>
  <path id="test.compile.classpath">
    <pathelement path="${test.src.dir}"/>
    <path refid="main.compile.classpath"/>
    <pathelement location="${test.lib.dir}/junit.jar"/>
    <pathelement location="${test.lib.dir}/easymock.jar"/>
    <pathelement location="${build.dir}"/>
  </path>
  <path id="examples.test.compile.classpath">
    <pathelement path="${examples.test.src.dir}"/>
    <path refid="examples.compile.classpath"/>
    <pathelement location="${test.lib.dir}/junit.jar"/>
    <pathelement location="${examples.build.dir}"/>
  </path>
  <path id="test.run.classpath">
    <path refid="test.compile.classpath"/>
    <pathelement location="${test.build.dir}"/>
  </path>
  <path id="examples.test.run.classpath">
    <path refid="examples.test.compile.classpath"/>
    <pathelement location="${test.build.dir}"/>
  </path>


  <!-- build task -->
  <target name="build" depends="build_dir">
		<javac srcdir="${src.dir}" destdir="${build.dir}" deprecation="on" debug="on" classpathref="main.compile.classpath"/>
		<echo message="message : all java source files compiled successful."/>
  </target>
	
  <target name="buildtools" depends="tools_build_dir">
		<javac srcdir="${tools.src.dir}" destdir="${tools.build.dir}"
			  deprecation="on" debug="on" classpathref="tools.compile.classpath"/>
		<echo message="message : all tools source files compiled successful."/>
  </target>

  <target name="buildtest" depends="build, test_build_dir">
		<javac srcdir="${test.src.dir}" destdir="${test.build.dir}" deprecation="on"
			 debug="on" classpathref="test.compile.classpath"
			excludes="org/codehaus/jparsec/AllTests.java"/>
  	<!-- AllTests uses jtc, which is an extra dependency that I don't want to upload. -->
		<echo message="message : all test source files compiled successful. "/>
  </target>

  <target name="buildexamples" depends="build, examples_build_dir">
		<javac srcdir="${examples.src.dir}" destdir="${examples.build.dir}" deprecation="on"
			 debug="on" classpathref="examples.compile.classpath"/>
  	<copy todir="#{examples.build.dir}">
  		<fileset dir="${examples.src.dir}"/>
  	</copy>
		<echo message="message : all sample source files compiled successful. "/>
  </target>

  <target name="buildexamplestest" depends="buildexamples, test_build_dir">
		<javac srcdir="${examples.test.src.dir}" destdir="${test.build.dir}" deprecation="on"
			 debug="on" classpathref="examples.test.compile.classpath"/>
		<echo message="message : all sample test source files compiled successful. "/>
  </target>

	<target name="test" depends="buildtest, buildexamplestest">
    <junit fork="yes" haltonfailure="yes" dir=".">
  	  <classpath>
  	  	<path refid="test.run.classpath"/>
  	  	<path refid="examples.test.run.classpath"/>
  	  </classpath>
    	<formatter type="plain" usefile="no"/>
      <batchtest fork="yes" todir="build/report">
        <fileset dir="test/build"
        	includes="org/codehaus/jparsec/**/*Test.class"
          excludes="org/codehaus/jparsec/easymock/BaseMockTest.class"/>
      </batchtest>
    </junit>  
	</target>

	<target name="testjavaparser" depends="buildtest, buildexamplestest">
    <junit fork="yes" haltonfailure="yes" dir=".">
  	  <classpath>
  	  	<path refid="test.run.classpath"/>
  	  	<path refid="examples.test.run.classpath"/>
  	  </classpath>
    	<formatter type="plain" usefile="no"/>
      <batchtest fork="yes" todir="build/report">
        <fileset dir="test/build"
        	includes="org/codehaus/jparsec/examples/java/parser/**/*Test.class"/>
      </batchtest>
    </junit>
	</target>
	
  <target name="clean">
    <delete dir="${build.dir}"/>
    <delete dir="${test.build.dir}"/>
    <delete dir="${examples.build.dir}"/>
  	<delete dir="${tools.build.dir}"/>
  	<delete dir="docs/parsec"/>
  </target>
	
  <target name="dist.prepare">
  	<delete dir="dist/parsec"/>
  	<mkdir dir="dist"/>
  	<mkdir dir="dist/parsec"/>
  </target>
	
  <!-- make the build directory -->
  <target name="build_dir">
    <mkdir dir="${build.dir}"/>
  </target>
	
  <target name="tools_build_dir">
    <mkdir dir="${tools.build.dir}"/>
  </target>

  <!-- make the tests build directory -->
  <target name="test_build_dir">
    <mkdir dir="${test.build.dir}"/>
  </target>
  <target name="examples_build_dir">
    <mkdir dir="${examples.build.dir}"/>
  </target>
	
	<target name="doc" depends="buildtools">
    <javadoc destdir="docs/parsec/api" access="protected" use="true" notree="false" nonavbar="false"
    	noindex="false" splitindex="true" author="true"
      version="true" nodeprecatedlist="false" nodeprecated="false"
    	packagenames="org.codehaus.jparsec,org.codehaus.jparsec.functors,
    	org.codehaus.jparsec.pattern,org.codehaus.jparsec.error,org.codehaus.jparsec.misc"
      sourcepath="src"
    	classpathref="main.compile.classpath" doctitle="Java Parser Combinator API Documentation (jparsec 2.0)"
      doclet="org.codehaus.jparsec.tools.doclet.MyDoclet" docletpathref="tools.compile.classpath"/>
	</target>
	
	<target name="jar" depends="dist.prepare, build">
  	<property file="project.properties"/>
	  <jar basedir="${build.dir}" destfile="dist/${project.name}-${project.version}.jar"/>
	</target>
  <target name="dist" depends="dist.prepare, jar">
  	<zip destfile="dist/${project.name}-${project.version}_src.zip"
 		 includes="build.xml, pom.xml, build.np, README.txt,
  		src/**/*.*, examples/src/**/*.*, examples/test/src/**/*.*, test/src/**/*.*,lib/*.jar"
 		 excludes="lib/junit.jar, test/build/**/*.*" basedir="."/>
  	<property file="project.properties"/>
  	<zip destfile="dist/${project.name}-${project.version}_doc.zip" basedir="." includes="docs/parsec/api/**/*.*"/>
  	<zip destfile="dist/${project.name}-${project.version}.zip" basedir="dist"
  		includes="${project.name}-${project.version}_src.zip, ${project.name}-${project.version}_doc.zip"/>
  </target>
</project>
