ext.jadxVersion = file('version').readLines().get(0)
version = jadxVersion

apply plugin: 'sonar-runner'

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'idea'
    apply plugin: 'eclipse'

    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    version = jadxVersion

    gradle.projectsEvaluated {
        tasks.withType(Compile) {
            if (!"${it}".contains(':jadx-samples:')) {
                options.compilerArgs << '-Xlint' << '-Xlint:unchecked' << '-Xlint:deprecation'
            }
        }
    }

    jar {
        version = jadxVersion
        manifest {
            mainAttributes('jadx-version': jadxVersion)
        }
    }

    dependencies {
        compile 'org.slf4j:slf4j-api:1.7.6'
        testCompile 'junit:junit:4.11'
        testCompile 'org.mockito:mockito-core:1.9.5'
        testCompile 'ch.qos.logback:logback-classic:1.1.1'
    }

    repositories {
        mavenCentral()
    }
}

task copyArtifacts(type: Sync, dependsOn: ['jadx-cli:installApp', 'jadx-gui:installApp']) {
    destinationDir file("$buildDir/jadx")
    ['jadx-cli', 'jadx-gui'].each {
        from tasks.getByPath(":${it}:installApp").destinationDir
    }
}

task pack(type: Zip, dependsOn: copyArtifacts) {
    destinationDir buildDir
    archiveName "jadx-${jadxVersion}.zip"
    from copyArtifacts.destinationDir
}

task dist(dependsOn: pack) {
    description = 'Build jadx distribution zip'
}

task samples(dependsOn: 'jadx-samples:samples') {
}

task build(dependsOn: [dist, samples]) {
}

task clean(type: Delete) {
    delete buildDir
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}
apply plugin: 'application'

mainClassName = 'jadx.cli.JadxCLI'
applicationName = 'jadx'

dependencies {
    compile(project(':jadx-core'))
    compile 'com.beust:jcommander:1.30'
    compile 'ch.qos.logback:logback-classic:1.1.1'
}

startScripts {
    doLast {
        // increase default max heap size
        String var = 'DEFAULT_JVM_OPTS='
        String args = '-Xmx1300M'
        unixScript.text = unixScript.text.replace(var + '""', var + '"' + args + '"')
        windowsScript.text = windowsScript.text.replace(var, var + args)
    }
}

applicationDistribution.with {
    into('') {
        from '../.'
        include 'README.md'
        include 'NOTICE'
    }
}

ext.jadxClasspath = 'clsp-data/android-4.3.jar'

dependencies {
    compile 'com.google.android.tools:dx:1.7'

    runtime files(jadxClasspath)
}

apply plugin: 'application'

mainClassName = "jadx.gui.JadxGUI"

dependencies {
    compile(project(":jadx-core"))
    compile(project(":jadx-cli"))
    compile 'com.fifesoft:rsyntaxtextarea:2.5.0'
}

startScripts {
    doLast {
        // increase default max heap size
        String var = 'DEFAULT_JVM_OPTS='
        String args = '-Xmx1300M'
        unixScript.text = unixScript.text.replace(var + '""', var + '"' + args + '"')
        windowsScript.text = windowsScript.text.replace(var, var + args)
    }
}

applicationDistribution.with {
    into('') {
        from '../'
        include 'README.md'
        include 'NOTICE'
    }
}

project.ext {
    mainSamplesClass = "jadx.samples.RunTests"  
    samplesJadxSrcDir = "${buildDir}/samples-jadx/src"
    samplesJadxOutDir = "${buildDir}/samples-jadx/output"
}

dependencies {
    compile(project(":jadx-core"))
    compile(project(":jadx-cli"))
}

compileJava {
    options.compilerArgs << '-g:none'
}

sonarRunner {
    skipProject = true
}

task samplesRun(type: JavaExec, dependsOn: compileJava) {  
    classpath = sourceSets.main.output
    main = mainSamplesClass  
}

task samplesJar(type: Jar, dependsOn: samplesRun) {
    baseName = 'samples'
    from sourceSets.main.output
}

task samplesJadxCreate(type: JavaExec, dependsOn: samplesJar) {  
    classpath = sourceSets.main.output + configurations.compile
    main = project(":jadx-cli").mainClassName 
    args = ['-d', samplesJadxSrcDir, samplesJar.archivePath]
}

task samplesJadxCompile(type: JavaCompile, dependsOn: samplesJadxCreate) {  
    classpath = configurations.compile
    destinationDir = file samplesJadxOutDir
    source = samplesJadxSrcDir
}

task samplesJadxRun(type: JavaExec, dependsOn: samplesJadxCompile) {  
    classpath = files samplesJadxOutDir
    main = mainSamplesClass  
}

task samples(dependsOn: samplesJadxRun) {
}

task cleanGeneratedFiles(type: Delete) {
    delete samplesJadxSrcDir
    delete samplesJadxOutDir
}

clean.dependsOn cleanGeneratedFiles
