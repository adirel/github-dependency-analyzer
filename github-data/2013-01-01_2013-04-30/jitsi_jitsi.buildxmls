<?xml version="1.0" encoding="UTF-8"?>
<!-- Created by Emil Ivov on Jul 6, 2005 8:30:22 PM-->

<project default="ant-usage" name="jitsi">

    <dirname property="sc.basedir" file="${ant.file.jitsi}"/>
    <property environment="system"/>
    <property name="jdk.home" value="/usr/java/java"/>
    <property name="dest" value="classes"/>
    <property name="bundles.dest" value="sc-bundles"/>
    <property name="bundles.dest.mac" value="${bundles.dest}/os-specific/macosx"/>
    <property name="bundles.dest.win" value="${bundles.dest}/os-specific/windows"/>
    <property name="bundles.dest.lin" value="${bundles.dest}/os-specific/linux"/>
    <property name="bundles.dest.sol" value="${bundles.dest}/os-specific/solaris"/>
    <property name="bundles.dest.freebsd" value="${bundles.dest}/os-specific/freebsd"/>
    <property name="bundles.dest.android" value="${bundles.dest}/os-specific/android"/>
    <property name="doc" value="doc"/>
    <property name="java.doc" value="${doc}/api"/>
    <property name="lib" value="${sc.basedir}/lib"/>
    <property name="lib.win" value="${lib}/os-specific/windows"/>
    <property name="lib.win.noinst" value="${lib}/os-specific/windows/installer-exclude"/>
    <property name="lib.lin" value="${lib}/os-specific/linux"/>
    <property name="lib.lin.noinst" value="${lib}/os-specific/linux/installer-exclude"/>
    <property name="lib.mac" value="${lib}/os-specific/mac"/>
    <property name="lib.mac.noinst" value="${lib}/os-specific/mac/installer-exclude"/>
    <property name="lib.sol" value="${lib}/os-specific/solaris"/>
    <property name="lib.sol.noinst" value="${lib}/os-specific/solaris/installer-exclude"/>
    <property name="lib.freebsd" value="${lib}/os-specific/freebsd"/>
    <property name="lib.freebsd.noinst" value="${lib}/os-specific/freebsd/installer-exclude"/>
    <property name="lib.noinst" value="${lib}/installer-exclude"/>
    <property name="native.libs" value="${lib}/native"/>
    <property name="src" value="${sc.basedir}/src"/>
    <property name="src2" value="${sc.basedir}/test"/>
    <property name="testsrc" value="${src2}"/>
    <property name="home" value="${system.HOME}"/>
    <property name="bin" value="sip-communicator.bin"/>
    <property name="utest.bin" value="sip-communicator.utest.bin"/>
    <property name="test.reports.dir" value="test-reports"/>
    <property name="test.html.reports.dir" value="${test.reports.dir}/html"/>
    <property name="test.local.properties.file" value="${lib}/testing.properties"/>
    <property name="test.accounts.properties.file" value="${lib}/accounts.properties"/>
    <property name="release" value="release"/>
    <property name="log" value="log"/>
    <property name="release.src" value="${release}/install"/>
    <property name="resources" value="${dest}/resources"/>
    <property name="inst.resrc" value="${sc.basedir}/resources/install"/>
    <property name='j2se_api' value='http://java.sun.com/j2se/1.5/docs/api' />
    <property name='maxwarns' value='10000' />
    <property name='java.net.preferIPv6Addresses' value='true' />

    <!-- set the build label property and make it take the cc bild into account -->
    <condition property="build.label"
               value="${label}">
        <isset property="label"/>
    </condition>

    <!-- windows specific properties -->
    <condition property="is.running.windows" value="${os.name}">
        <os family="windows"/>
    </condition>

    <condition property="os.lib.home" value="${lib.win}">
        <and>
            <isset property="is.running.windows"/>
            <available file="${lib.win}" type="dir"/>
        </and>
    </condition>

    <!-- Make sure we use the windows-64 natives if this is 64-bit Windows. Note
         that properties are case-sensitive even if the environment variables on
         the operating system are not. For example, Windows's system path
         variable may be set to an Ant property "system.Path" rather than
         "system.PATH". -->
    <condition property="path"
            value="${lib}/native/windows-64:${system.PATH}:${system.Path}">
        <and>
            <isset property="is.running.windows"/>
            <os arch="amd64" />
        </and>
    </condition>
    <!-- Otherwise and if this is still Windows, go for the windows natives
         (i.e. os.arch==i386) -->
    <condition property="path"
            value="${lib}/native/windows:${system.PATH}:${system.Path}">
        <isset property="is.running.windows"/>
    </condition>
    <!-- At last i.e. if this is not Windows, use the system PATH environment
         variable -->
    <property name="path" value="${system.PATH}"/>

    <condition property="bundles.dest.os" value="${bundles.dest.win}">
        <isset property="is.running.windows"/>
    </condition>

    <!-- linux specific properties -->
    <condition property="is.running.linux" value="${os.name}">
        <equals arg1="${os.name}" arg2="linux" casesensitive="false" trim="true"/>
    </condition>

    <condition property="os.lib.home" value="${lib.lin}">
        <and>
            <isset property="is.running.linux"/>
            <available file="${lib.lin}" type="dir"/>
        </and>
    </condition>

    <!-- make sure we use the linux-64 natives if this is a 64 bit system-->
    <condition property="ld.library.path"
            value="${lib}/native/linux-64:${system.LD_LIBRARY_PATH}">
        <and>
            <isset property="is.running.linux"/>
            <os arch="amd64" />
        </and>
    </condition>
    <!-- otherwise we go for the normal linuxnatives (i.e. os.arch==i386)-->
    <condition property="ld.library.path"
            value="${lib}/native/linux:${system.LD_LIBRARY_PATH}">
        <isset property="is.running.linux"/>
    </condition>

    <condition property="bundles.dest.os" value="${bundles.dest.lin}">
        <isset property="is.running.linux"/>
    </condition>

    <!-- solaris specific properties -->
    <condition property="is.running.solaris" value="${os.name}">
        <equals arg1="${os.name}" arg2="solaris" casesensitive="false" trim="true"/>
    </condition>

    <condition property="is.running.solaris" value="${os.name}">
        <equals arg1="${os.name}" arg2="SunOS" casesensitive="false" trim="true"/>
    </condition>

    <condition property="os.lib.home" value="${lib}/os-specific/solaris">
        <and>
            <isset property="is.running.solaris"/>
            <available file="${lib}/os-specific/solaris" type="dir"/>
        </and>
    </condition>

    <condition property="ld.library.path"
              value="${lib}/native/solaris:${system.LD_LIBRARY_PATH}">
        <isset property="is.running.solaris"/>
    </condition>

    <condition property="bundles.dest.os" value="${bundles.dest.sol}">
        <isset property="is.running.solaris"/>
    </condition>

    <!-- mac specific properties -->
    <condition property="is.running.macos" value="${os.name}">
        <os family="mac"/>
    </condition>

    <condition property="os.lib.home" value="${lib}/os-specific/mac">
        <and>
            <isset property="is.running.macos"/>
            <available file="${lib}/os-specific/mac" type="dir"/>
        </and>
    </condition>

    <condition property="dyld.library.path"
        value="${lib}/native/mac:${system.DYLD_LIBRARY_PATH}">
        <isset property="is.running.macos"/>
    </condition>

    <condition property="bundles.dest.os" value="${bundles.dest.mac}">
        <isset property="is.running.macos"/>
    </condition>

    <!-- FreeBSD specific properties -->
    <condition property="is.running.freebsd" value="${os.name}">
        <equals arg1="${os.name}" arg2="freebsd" casesensitive="false" trim="true"/>
    </condition>

    <!-- make sure we use the freebsd-64 natives if this is a 64 bit system-->
    <condition property="ld.library.path"
            value="${lib}/native/freebsd-64:${system.LD_LIBRARY_PATH}">
        <and>
            <isset property="is.running.freebsd"/>
            <os arch="amd64" />
        </and>
    </condition>
    <!-- otherwise we go for the normal freebsd natives (i.e. os.arch==i386)-->
    <condition property="ld.library.path"
            value="${lib}/native/freebsd:${system.LD_LIBRARY_PATH}">
        <isset property="is.running.freebsd"/>
    </condition>

    <condition property="os.lib.home" value="${lib}/os-specific/freebsd">
        <and>
            <isset property="is.running.freebsd"/>
            <available file="${lib}/os-specific/freebsd" type="dir"/>
        </and>
    </condition>

    <condition property="ld.library.path"
              value="${lib}/native/freebsd:${system.LD_LIBRARY_PATH}">
        <isset property="is.running.freebsd"/>
    </condition>

    <condition property="bundles.dest.os" value="${bundles.dest.freebsd}">
        <isset property="is.running.freebsd"/>
    </condition>

    <!-- set the os.lib.home here in case it was not set before -->
    <property name="os.lib.home" value="${lib}"/>

    <property name="profiler.args" value="" />
    <property name="profiler.bootdelegation" value="" />
    <property name="profiler.autostart" value="" />

    <tstamp>
        <format property="build.date" pattern="dd-MM-yyyy"/>
    </tstamp>

    <path id="project.source.path">
        <!-- refer to both main and test source files. -->
        <pathelement location="${src}"/>
        <pathelement location="${src2}"/>
    </path>

    <path id="project.class.path">
        <pathelement location="${lib}"/>

        <pathelement location="${bundles.dest}/sc-launcher.jar"/>
        <!-- Add this bundle to the global class path as we need
             the ScLogFormatter there-->
        <pathelement location="${bundles.dest}/util.jar"/>
        <!-- for mac specific plugins -->
        <pathelement location="/System/Library/Java"/>

        <!-- Include all JAR files found in lib and any of its subdirectories. -->
        <fileset dir="${lib}">
            <include name="*.jar"/>
            <include name="installer-exclude/*.jar"/>
            <include name="bundle/*.jar"/>
        </fileset>

        <fileset dir="${os.lib.home}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="compile.class.path">
        <path refid="project.class.path"/>
        <pathelement location="${dest}"/>
        <!-- Add all jmf's and jdic's to the compile class path to enable
             cross compilation. -->
        <fileset dir="${lib}">
            <include name="os-specific/**/*.jar"/>
        </fileset>
    </path>

    <path id="debug.class.path">
        <!-- used by netbeans but might be useful elsewhere. -->
        <path refid="project.class.path"/>

        <!-- Include all test JAR files . -->
        <fileset dir="${bundles.dest}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="simple.test.class.path">
        <!-- used for testing classes outside felix -->
        <path refid="debug.class.path"/>
        <!-- Include all test class files, even if they exist
             in a jar file already. -->
        <pathelement location="${dest}" />
    </path>

    <!-- Import installation build xml -->
    <import file="${inst.resrc}/build.xml"/>

    <!-- Import JNI build xml -->
    <import file="${src}/native/build.xml"/>

    <!-- default Ant target does nothing except print helpful options -->
    <!-- Ant-external target will appear in -projecthelp output       -->
    <target name="ant-usage"
       description="simply execute 'ant' to discover the most useful targets.">
       <echo message="Useful ant commands for the Jitsi Project..." />
       <echo message="'ant rebuild' for a safe clean/build sequence" />
       <echo message="'ant rebuild run' for a safe clean/build/run" />
       <echo message="'ant make run' for incremental build/run" />
       <echo message="'ant run' to run the last build (use with care!)" />
       <echo message="'ant test' to run the tests over the last build" />
       <echo message="'ant rebuild test' for safe clean/build/test sequence" />
       <echo message="'ant make test' for incremental build/test sequence" />
       <echo message="'ant -projecthelp' for other useful build targets" />
       <echo message="'ant -help' for Ant help" />
    </target>

    <!-- java compile -->
    <target name="compile" depends="init,version">
        <!--internal-target- compiles the entire project source tree -->
        <javac classpathref="compile.class.path" debug="true"
            deprecation="true" destdir="${dest}" nowarn="false"
            includeantruntime="false"
            source="1.6" target="1.6" memoryMaximumSize="400M" fork="true">
                <src path="${src}"/>
                <src path="${src2}"/>
                <include name="**/*.java" />
                <exclude name="net/java/sip/communicator/launcher/*.java" />
                <compilerarg line="-Xlint -Xlint:-serial -Xmaxwarns ${maxwarns}"/>
        </javac>
        <!--
            sc-launcher.jar needs to be compatible with 1.4 in order to enable
            notifying the user that a higher version of the jre is necessary.
        -->
        <javac classpathref="compile.class.path" debug="true"
            includeantruntime="false"
            deprecation="true" destdir="${dest}" nowarn="false"
            source="1.4" target="1.4" memoryMaximumSize="400M" fork="true">
                <src path="${src}"/>
                <src path="${src2}"/>
                <include name="net/java/sip/communicator/launcher/*.java" />
                <compilerarg line="-Xlint -Xmaxwarns ${maxwarns}"/>
        </javac>
    </target>

    <!-- clean -->
    <target name="clean" depends="clean-bundle-repositories,clean-test-reports,clean-macosx"
        description="Remove all generated files and prepare for a clean build.">
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${dest}"/>
            <fileset dir="${bundles.dest}"/>
            <fileset dir="${java.doc}"/>
            <fileset dir="${release}"/>
            <fileset dir="${log}"/>
        </delete>
    </target>

    <!-- clean-bundles -->
    <target name="clean-bundles"
        description="Remove all existing bundles">
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${bundles.dest}"/>
        </delete>
    </target>

    <!-- internal target - removes the current set of test reports, so
         residual data is not left to confuse a cached browser -->
    <target name="clean-test-reports">
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${test.reports.dir}"/>
        </delete>
    </target>

    <!-- internal target - removes the OSGI repositories, so that next run
         recreates them -->
    <target name="clean-bundle-repositories">
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${bin}" erroronmissingdir="false"/>
            <fileset dir="${utest.bin}" erroronmissingdir="false"/>
        </delete>
    </target>

    <!-- resource -->
    <target name="resource">
        <!--internal-target- Copies all resource file to the ${dest} dir -->
        <copy todir="${dest}">
            <fileset dir="${src}">
                <include name="**/*.jpeg"/>
                <include name="**/*.wav"/>
                <include name="**/*.au"/>
                <include name="**/*.gif"/>
                <include name="**/*.png"/>
                <include name="**/*.PNG"/>
                <include name="**/*.jpg"/>
                <include name="**/*.xml"/>
                <include name="**/*.themerc"/>
                <include name="**/gtkrc"/>
                <include name="**/*.css"/>
                <include name="**/*.properties"/>
            </fileset>
            <fileset dir="${src2}">
                <include name="**/*.jpeg"/>
                <include name="**/*.wav"/>
                <include name="**/*.au"/>
                <include name="**/*.gif"/>
                <include name="**/*.png"/>
                <include name="**/*.jpg"/>
                <include name="**/*.xml"/>
                <include name="**/*.properties"/>
            </fileset>
        </copy>
        <copy todir="${resources}">
           <fileset dir="${sc.basedir}/resources">
                <include name="**/*"/>
                <exclude name="**/languages/**"/>
                <exclude name="**/*.svg"/>
           </fileset>
        </copy>
    </target>

    <target name="native2ascii">
        <!-- internal target -
             convert language property files encoding from UTF-8 to ASCII,
             save converted files in ${resources}/languages dir -->
        <native2ascii
            src="${sc.basedir}/resources/languages"
            dest="${resources}/languages"
            encoding="UTF-8"
            includes="**/*.properties"/>
    </target>

    <!-- JAVADOC -->
    <target name="javadoc"
        description="Generates project javadoc.">
        <javadoc author="true" destdir="${java.doc}" package="true"
            version="true" use="true" windowtitle="Jitsi API"
            classpathref="compile.class.path" source="1.6+" maxmemory="256m">
            <packageset dir="${src}">
                <exclude name="net/java/sip/communicator/impl/version/**"/>
                <include name="**"/>
            </packageset>
            <tag name="todo" description="To do:"/>
            <tag name="note" description="Note:"/>
            <link href="${j2se_api}" />
            <header>
                <![CDATA[
                <b> Jitsi: the OpenSource Java VoIP and Instant Messaging client. </b>
                ]]>
            </header>
            <bottom>
                <![CDATA[
                <font size="-1">
                    <a href="http://jitsi.org"> Jitsi, the OpenSource Java VoIP and Instant Messaging client. </a>
                    <br>
                    <a href="http://gnu.org"> Distributable under LGPL license. </a>
                    <br>
                    </font>
                 ]]>
             </bottom>
          <!-- link to libjitsi and ice4j -->
          <link href="http://dev.jitsi.org/libjitsi/javadoc/"/>
          <link href="http://dev.jitsi.org/ice4j/javadoc/"/>
        </javadoc>
    </target>

    <!--PACKAGE-->
    <!--Copy resource files and update bundles jars. -->
    <target name="package" depends="resource,native2ascii,bundles"/>

    <!--MAKE-->
    <target name="make" depends="clean-bundle-repositories,compile,package"
        description="Incremental compile and package the project."/>

    <!--REBUILD-->
    <target name="rebuild" depends="clean,make"
        description="Clean and make the project (including bundles).">
        <echo message="ver=${sip-communicator.version}"/>
    </target>

    <!-- make and deploy target used in intellij idea -->
    <target name="make-and-deploy"
            depends="make,deploy-os-specific-bundles"
            description="make and deploy target used in intellij idea"/>

    <!-- Determines the Jitsi version if any-->
    <target name="-pre-version" if="build.label" >
        <!-- create a class that would contain our nightly build.id if any -->
        <copy file="${src}/net/java/sip/communicator/impl/version/NightlyBuildID.java.tmpl"
              tofile="${src}/net/java/sip/communicator/impl/version/NightlyBuildID.java"
              overwrite="true"/>

        <!-- set the build id according to the cruisecontrol property -->
        <replace file="${src}/net/java/sip/communicator/impl/version/NightlyBuildID.java"
            token="build.id" value="${build.label}"/>

        <!-- set the build id according to the cruisecontrol property -->
        <replace file="${src}/net/java/sip/communicator/impl/version/RevisionID.java"
            token="revision.id" value="${build.label}"/>
    </target>

    <!-- Jitsi Version -->
    <target name="version" depends="-pre-version">
        <!-- Recompile ant task classes-->
        <delete failonerror="false">
            <fileset dir="${dest}" includes="net/java/sip/communicator/impl/version/*.class"/>
        </delete>
        <javac
            classpathref="compile.class.path" includeantruntime="false"
            destdir="${dest}" source="1.6" target="1.6">
            <src path="${src}"/>
            <include name="net/java/sip/communicator/impl/version/NightlyBuildID.java" />
            <include name="net/java/sip/communicator/impl/version/VersionImpl.java" />
            <include name="net/java/sip/communicator/impl/version/SipCommunicatorVersionTask.java" />
        </javac>


        <taskdef
            name="sip-communicator-version"
            classname="net.java.sip.communicator.impl.version.SipCommunicatorVersionTask">

            <classpath>
                <pathelement path="${dest}"/>
                <pathelement location="${lib.noinst}/libjitsi.jar"/>
            </classpath>
        </taskdef>

        <sip-communicator-version property="sip-communicator.version" />

        <echo message="Jitsi version ${sip-communicator.version}" />
    </target>

    <!--INIT-->
    <target name="init" >
        <mkdir dir="${dest}"/>
        <mkdir dir="${doc}"/>
        <mkdir dir="${java.doc}"/>
        <mkdir dir="${bundles.dest}"/>

        <!-- create dirs for os specific bundles -->
        <mkdir dir="${bundles.dest}/os-specific"/>
        <mkdir dir="${bundles.dest.mac}"/>
        <mkdir dir="${bundles.dest.lin}"/>
        <mkdir dir="${bundles.dest.win}"/>
        <mkdir dir="${bundles.dest.freebsd}"/>
        <mkdir dir="${bundles.dest.sol}"/>
        <mkdir dir="${bundles.dest.android}"/>

        <mkdir dir="${test.reports.dir}"/>
        <mkdir dir="${test.reports.dir}/html"/>
        <mkdir dir="${release}"/>
        <mkdir dir="${log}"/>
    </target>


    <!-- - - - - - - - - - - - - - UNIT TESTING - - - - - - - - - - - - - - -->

    <!--PREPARE-TESTING-ACCOUNTS-->
    <target name="prepare-local-accounts">
        <!--internal-target- setup testing accounts properties -->
        <!-- The following local file should contain a list of protocol
             account initialization properties, such as SIP server addresses
             and usernames, ICQ uin-s and passwords, AIM screennames and etc.
             You should create the file based on lib/account.properties.template
             and set all the empty fields as indicated. -->
        <available property="accounts.properties.present"
                   file="${test.accounts.properties.file}"/>
        <fail unless="accounts.properties.present"
              message="${test.accounts.properties.file} not found - did you copy the template?"/>
        <property file="${test.accounts.properties.file}"/>
    </target>

    <!--PREPARE-TESTS-TO-BE-RUN-->
    <target name="identify-test">
        <!--internal-target- is a single slick defined to be run alone? -->
        <condition property="test.name.known">
            <!-- has a single test class has been defined?    -->
            <!-- e.g. ant test -Dtest.name=SlickName    -->
            <isset property="test.name"/>
        </condition>
    </target>

    <target name="prepare-single-test"
      depends="identify-test"
            if="test.name.known">
        <!--internal-target- prepare to run a single Service Impl Compatibility Kit -->
        <!-- extract the simple Test class name...
             Command prompt ant calls should define the property as the
             simple name (without the package hierarchy),
             e.g. -Dtest.name=GibberishProtocolProviderServiceLick
             netbeans must format the property using the relative-path-noext
             rule so that we can extract the simple name. The Felix
             slick runner ONLY works with unqualified class names. -->
        <basename property="short.test.name" file="${test.name}"/>
        <!-- Tell the slick runner which Test class to run. (This will prevent
             the default external list from being defined.) At this
             stage we don't know if it will run under felix or standalone-->
        <property name="net.java.sip.communicator.slick.runner.TEST_LIST"
                     value="${short.test.name}"/>
        <property name="net.java.sip.communicator.slick.runner.SLICKLESS_TEST_LIST"
                     value="${short.test.name}"/>
    </target>

    <target name="prepare-all-tests"
            depends="clean-test-reports,prepare-single-test">
        <!--internal-target- prepare to run all selected Service Impl Compatibility Kits -->
        <!-- load properties needed for running any/all automated tests.
             n.b. the local file will select what is meant on this system by
             "all tests" UNLESS a single test has already been selected. (This
             is because ant will not replace a property value once set.) -->
        <available property="test.properties.present"
                   file="${test.local.properties.file}"/>
        <fail unless="test.properties.present"
              message="${test.local.properties.file} not found - did you copy the template?"/>
        <property file="${test.local.properties.file}"/>
        <echo message="tests prepared: ${net.java.sip.communicator.slick.runner.TEST_LIST}" />
        <echo message="slickless tests prepared: ${net.java.sip.communicator.slick.runner.SLICKLESS_TEST_LIST}" />
    </target>

    <!--RUN-TESTS-->
    <target name="test"
        depends="prepare-all-tests,prepare-local-accounts,deploy-os-specific-bundles"
        description="Starts felix and runs selected Service Impl Compatibility Kits.">

        <!-- Do the testing itself. Note that we don't fail on error as we need
             to generate an html report before leaving this target.-->
        <java classname="org.apache.felix.main.Main"
            fork="true"
            failonerror="false"
            resultproperty="test.result.code"
            classpathref="project.class.path">

            <!-- Tell felix to run as a test environment-->
            <sysproperty key="felix.config.properties"
                         value="file:${lib}/felix.unit.test.properties"/>

            <!-- Tell the slick runner where to store test results. -->
            <sysproperty key="net.java.sip.communicator.slick.runner.OUTPUT_DIR"
                         value="${test.reports.dir}"/>
            <sysproperty key="net.java.sip.communicator.SC_HOME_DIR_LOCATION"
                value="${test.reports.dir}"/>
            <sysproperty key="net.java.sip.communicator.SC_HOME_DIR_NAME"
                value="schome"/>

            <!-- Tell the slick runner which Test classes to run. -->
            <sysproperty key="net.java.sip.communicator.slick.runner.TEST_LIST"
                         value="${net.java.sip.communicator.slick.runner.TEST_LIST}"/>

            <!-- Tell the slickless runner which Test classes to run. -->
            <sysproperty key="net.java.sip.communicator.slick.runner.SLICKLESS_TEST_LIST"
                         value="${net.java.sip.communicator.slick.runner.SLICKLESS_TEST_LIST}"/>

            <!-- use a meta contact list file different to normal client. -->
            <sysproperty key="net.java.sip.communicator.CONTACTLIST_FILE_NAME"
                         value="net.java.sip.communicator.CONTACTLIST_FILE_NAME"/>
            <!-- use a configuration file different to normal client. -->
            <sysproperty key="net.java.sip.communicator.CONFIGURATION_FILE_NAME"
                         value="net.java.sip.communicator.CONFIGURATION_FILE_NAME"/>

            <!-- Tell java.util.logging about our logging preferences -->
            <sysproperty key="java.util.logging.config.file"
                value="${lib}/logging.properties"/>

            <!-- Tell all protocol testers their account details. -->
            <syspropertyset id="accounts">
              <propertyref prefix="accounts"/>
              <propertyref prefix="net"/>
            </syspropertyset>

            <!-- Setting properties necessary for dependencies on native libs.-->
            <sysproperty key="java.library.path"
                path="${ld.library.path}:${path}:${dyld.library.path}"/>
            <sysproperty key="jna.library.path"
                path="${ld.library.path}:${path}:${dyld.library.path}"/>

            <env key="LD_LIBRARY_PATH" path="${ld.library.path}"/>
            <env key="PATH" path="${path}"/>
            <env key="DYLD_LIBRARY_PATH" path="${dyld.library.path}"/>
            <env key="DISPLAY" path=":0"/>

            <!-- Disable audio support when running test, audio is not used
                and the test machine has no audio device
            -->
            <sysproperty key="net.java.sip.communicator.service.media.DISABLE_AUDIO_SUPPORT"
                         value="true"/>

        </java>

        <!-- Generate the html report.
             Run it quietly (i.e. redirect the output) because we don't won't to
             see its "Build Successful" output line as users might confuse it
             for a general build success while this might not be the case.-->
        <echo message="Generating HTML test reports ..."/>
        <java fork="true"
              classname="org.apache.tools.ant.launch.Launcher"
              classpath="${java.class.path}:${lib.noinst}/xalan-2.6.0.jar.ant"
              failonerror="true"
              output="${test.html.reports.dir}/output.txt">
            <arg value="htmlreport"/>
        </java>
        <echo message="Done."/>
        <echo/><echo/>
        <echo message="Test results available in ./test-reports/html/index.html "/>
        <echo/>

        <!-- Check whether testing went alright and fail if not.-->
        <condition property="testing.failed">
          <not>
            <equals arg1="0"
            arg2="${test.result.code}"
            casesensitive="false" trim="true"/>
          </not>
        </condition>
        <fail if="testing.failed"/>
    </target>

    <!-- We use this target from within the test target in order to generate
         a human readable test report. We do not directly use the htmlreport
         target because we  need to include xalan in the classpath before we
         do.-->
    <target name="htmlreport">
      <junitreport todir="${test.reports.dir}">
        <fileset dir="${test.reports.dir}">
          <include name="SC-TEST-*.xml"/>
        </fileset>
        <report format="frames" todir="${test.html.reports.dir}"/>
      </junitreport>
    </target>


    <target name="run-simple-tests"
            depends="prepare-all-tests,prepare-local-accounts,deploy-os-specific-bundles"
            description="runs selected non-felix tests under junit.">

        <junit haltonfailure="true" fork="true">
            <formatter type="brief" usefile="false"/>
            <test name="net.java.sip.communicator.slick.slickless.SlicklessTests"/>
            <classpath refid="simple.test.class.path" />

            <!-- Tell the slickless runner which Test classes to run. -->
            <sysproperty key="net.java.sip.communicator.slick.runner.SLICKLESS_TEST_LIST"
                         value="${net.java.sip.communicator.slick.runner.SLICKLESS_TEST_LIST}"/>

            <!-- Tell the slick runner where to store test results. -->
            <sysproperty key="net.java.sip.communicator.slick.runner.OUTPUT_DIR"
                         value="${test.reports.dir}"/>
            <sysproperty key="net.java.sip.communicator.SC_HOME_DIR_LOCATION"
                value="${test.reports.dir}"/>
            <sysproperty key="net.java.sip.communicator.SC_HOME_DIR_NAME"
                value="schome"/>

            <!-- use a meta contact list file different to normal client. -->
            <sysproperty key="net.java.sip.communicator.CONTACTLIST_FILE_NAME"
                         value="net.java.sip.communicator.CONTACTLIST_FILE_NAME"/>
            <!-- use a configuration file different to normal client. -->
            <sysproperty key="net.java.sip.communicator.CONFIGURATION_FILE_NAME"
                         value="net.java.sip.communicator.CONFIGURATION_FILE_NAME"/>

            <!-- Tell java.util.logging about our logging preferences -->
            <sysproperty key="java.util.logging.config.file"
                value="${lib}/logging.properties"/>

            <!-- Tell all protocol testers their account details. -->
            <syspropertyset id="accounts">
              <propertyref prefix="accounts"/>
              <propertyref prefix="net"/>
            </syspropertyset>
        </junit>
    </target>

    <!--DEBUG-JITSI -->
    <target name="debug" depends="deploy-os-specific-bundles"
            description="Starts jitsi and wait for debugger to connect on port 5432">

        <!-- we allow users to pass command line args using the "args" system
             property. However we need to manually set tha prop to an empty
             string here or otherwise the application would get an argument with
             the value ${args}-->
        <property name="args" value=""/>

        <!-- Jitsi on Mac OS X uses a JVMTI agent to handle kAEGetURL
             AppleScript events. -->
        <condition property="jvmarg.line"
                   value="-agentlib:AEGetURLEventHandlerAgent -Xdock:name='Jitsi' -Xdock:icon='resources/images/logo/sc_logo_128x128.icns'"
                   else="">
            <isset property="is.running.macos"/>
        </condition>

        <condition property="jvm.maxheapsize"
                   value="-Xmx256m"
                   else="" >
            <os arch="i386" />
        </condition>

        <!-- forking prevents from debugging -->
        <java classname="net.java.sip.communicator.launcher.SIPCommunicator"
              fork="true"
              failonerror="true"
              classpathref="project.class.path">

            <!-- Sets the charset for the messages -->
            <!--sysproperty key="icq.custom.message.charset" value="windows-1252"/-->

            <!-- Tell felix to run Jitsi -->
            <sysproperty key="felix.config.properties"
                         value="file:${lib}/felix.client.run.properties"/>

            <!-- Tell java.util.logging about our logging preferences -->
            <sysproperty key="java.util.logging.config.file"
                         value="${lib}/logging.properties"/>

            <sysproperty key="java.net.preferIPv6Addresses"
                         value="${java.net.preferIPv6Addresses}"/>

            <!--sysproperty key="net.java.sip.communicator.SC_HOME_DIR_LOCATION"
                value="${user.home}"/>
            <sysproperty key="net.java.sip.communicator.SC_HOME_DIR_NAME"
                value="schome"/-->

            <sysproperty key="smack.debugEnabled"
                         value="${smack.debugEnabled}"/>
            <!--sysproperty key="smack.debuggerClass"
                value="org.jivesoftware.smack.debugger.ConsoleDebugger"/-->

            <!-- Setting properties necessary for dependencies on native libs.-->
            <sysproperty key="java.library.path"
                         path="${ld.library.path}:${path}:${dyld.library.path}"/>
            <sysproperty key="jna.library.path"
                         path="${ld.library.path}:${path}:${dyld.library.path}"/>

            <env key="LD_LIBRARY_PATH" path="${ld.library.path}"/>
            <env key="PATH" path="${path}"/>
            <env key="DYLD_LIBRARY_PATH" path="${dyld.library.path}"/>

            <!-- pass l10n properties from ant call for
                 easy translation debugging -->
            <sysproperty key="user.language" value="${user.language}" />
            <sysproperty key="user.country" value="${user.country}" />
            <sysproperty key="user.variant" value="${user.variant}" />

            <!-- make sure that we automatically enable system.out when running
                 Jitsi from Ant-->
            <arg line="--debug"/>
            <!-- pass to SC args that have been specified by the user -->
            <arg line="${args}"/>

            <sysproperty key="org.osgi.framework.bootdelegation"
                         value="${profiler.bootdelegation}" />
            <sysproperty key="felix.auto.start.68"
                         value="${profiler.autostart}" />

            <jvmarg value="-Xdebug" />
            <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5432" />


            <!-- add some eventual profiler args, prevent server-class
                 detection because -server uses much more memory for 32-bit OS
                 (64-bit always used -server) -->
            <jvmarg line="${profiler.args} ${jvmarg.line}
              -client ${jvm.maxheapsize}"/>

            <sysproperty key="apple.laf.useScreenMenuBar" value="true" />
        </java>
    </target>

    <!--RUN-JITSI -->
    <target name="run" depends="deploy-os-specific-bundles,load-properties"
        description="Starts felix and runs sip-comunicator gui (use latest build).">

        <!-- we allow users to pass command line args using the "args" system
             property. However we need to manually set tha prop to an empty
             string here or otherwise the application would get an argument with
             the value ${args}-->
        <property name="args" value=""/>

        <condition property="jvmarg.line"
                value="-Xdock:name='${application.name}' -Xdock:icon='resources/images/logo/sc_logo_128x128.icns'"
                else="">
            <isset property="is.running.macos"/>
        </condition>

        <condition property="jvmarg.splash"
            value="-splash:resources/install/resources/splash.gif"
            else="">
            <isset property="splashscreen.enable"/>
        </condition>

        <!-- Jitsi on Mac OS X uses a JVMTI agent to handle kAEGetURL
             AppleScript events. To enable it use jvmarg.aegeturl property -->
        <condition property="jvmarg.aegeturl"
            value="-agentlib:AEGetURLEventHandlerAgent"
            else="">
            <isset property="aegeturl.enable"/>
        </condition>

        <condition property="jvm.maxheapsize"
              value="-Xmx256m"
              else="" >
             <os arch="i386" />
        </condition>

        <!-- forking prevents from debugging -->
        <java classname="net.java.sip.communicator.launcher.SIPCommunicator"
            fork="true"
            failonerror="true"
            classpathref="project.class.path">

            <!-- Sets the charset for the messages -->
            <!--sysproperty key="icq.custom.message.charset" value="windows-1252"/-->

            <!-- Tell felix to run Jitsi -->
            <sysproperty key="felix.config.properties"
                value="file:${lib}/felix.client.run.properties"/>

            <!-- Tell java.util.logging about our logging preferences -->
            <sysproperty key="java.util.logging.config.file"
                value="${lib}/logging.properties"/>

            <sysproperty key="java.net.preferIPv6Addresses"
                value="${java.net.preferIPv6Addresses}"/>

            <!--sysproperty key="net.java.sip.communicator.SC_HOME_DIR_LOCATION"
                value="${user.home}"/>
            <sysproperty key="net.java.sip.communicator.SC_HOME_DIR_NAME"
                value="schome"/-->

            <sysproperty key="smack.debugEnabled"
                value="${smack.debugEnabled}"/>
            <!--sysproperty key="smack.debuggerClass"
                value="org.jivesoftware.smack.debugger.ConsoleDebugger"/-->

            <!-- Setting properties necessary for dependencies on native libs.-->
            <sysproperty key="java.library.path"
                path="${ld.library.path}:${path}:${dyld.library.path}"/>
            <sysproperty key="jna.library.path"
                path="${ld.library.path}:${path}:${dyld.library.path}"/>

            <env key="LD_LIBRARY_PATH" path="${ld.library.path}"/>
            <env key="PATH" path="${path}"/>
            <env key="DYLD_LIBRARY_PATH" path="${dyld.library.path}"/>

            <!-- pass l10n properties from ant call for
                 easy translation debugging -->
            <sysproperty key="user.language" value="${user.language}" />
            <sysproperty key="user.country" value="${user.country}" />
            <sysproperty key="user.variant" value="${user.variant}" />

            <!-- make sure that we automatically enable system.out when running
                 Jitsi from Ant-->
            <arg line="--debug"/>
            <!-- pass to SC args that have been specified by the user -->
            <arg line="${args}"/>

            <sysproperty key="org.osgi.framework.bootdelegation"
                value="${profiler.bootdelegation}" />
            <sysproperty key="felix.auto.start.68"
                value="${profiler.autostart}" />

            <!-- add some eventual profiler args, prevent server-class
                 detection because -server uses much more memory for 32-bit OS
                 (64-bit always used -server) -->
            <jvmarg line="${profiler.args} ${jvmarg.line}
              -client ${jvm.maxheapsize} ${jvmarg.splash} ${jvmarg.aegeturl}"/>

            <sysproperty key="apple.laf.useScreenMenuBar" value="true" />
        </java>
    </target>

    <!--RUN-JITSI-WITH-INTEGRATED-PROFILER -->
    <target name="run-with-profiler"
        description="Starts felix and runs sip-comunicator gui (use latest build) with the hooked classloader."
        depends="bundle-plugin-profiler4j">

        <antcall target="run">
            <param name="profiler.args"
                value="-Xmx128m -javaagent:${lib.noinst}/profiler4j-1.0-beta3-SC.jar" />
            <param name="profiler.bootdelegation"
                value="net.sf.profiler4j.agent.*" />
            <param name="profiler.autostart"
                value="reference:file:sc-bundles/profiler4j.jar" />
        </antcall>
    </target>

    <target name="run-v4" description="Starts SC with a preference for IPv4.">
        <ant target="run">
          <property name="java.net.preferIPv6Addresses" value="false"/>
        </ant>
    </target>

    <!--PROFILE-JITSI-IN-NETBEANS-IDE -->
    <target name="profile" depends="bundle-plugin-profiler4j,deploy-os-specific-bundles"
        description="Profile Project">
        <fail unless="netbeans.home">
            This target can only run inside the NetBeans IDE.
        </fail>

        <nbprofiledirect>
            <classpath> <pathelement location="${dest}"/> </classpath>
        </nbprofiledirect>

        <java classname="net.java.sip.communicator.launcher.SIPCommunicator"
            fork="true"
            failonerror="true"
            classpathref="project.class.path">

            <jvmarg value="${profiler.info.jvmargs.agent}"/>

            <!-- Tell felix to run Jitsi -->
            <sysproperty key="felix.config.properties"
                value="file:${lib}/felix.client.run.properties"/>

            <!-- Tell java.util.logging about our logging preferences -->
            <sysproperty key="java.util.logging.config.file"
                value="${lib}/logging.properties"/>

            <sysproperty key="java.net.preferIPv6Addresses"
                value="false"/>

            <sysproperty key="net.java.sip.communicator.SC_HOME_DIR_LOCATION"
                    value="${user.home}/schome"/>

            <!-- Setting properties necessary for dependencies on native libs-->
            <sysproperty key="java.library.path"
                path="${ld.library.path}:${path}:${dyld.library.path}"/>

            <!-- pass l10n properties from ant call for
                     easy translation debugging -->
            <sysproperty key="user.language" value="${user.language}" />
            <sysproperty key="user.country" value="${user.country}" />
            <sysproperty key="user.variant" value="${user.variant}" />

            <env key="LD_LIBRARY_PATH" path="${ld.library.path}"/>
            <env key="PATH" path="${path}"/>
            <env key="DYLD_LIBRARY_PATH" path="${dyld.library.path}"/>

        </java>

        <delete file="${bundles.dest}/profiler4j.jar"/>
    </target>

    <!-- we run this target before we run SC in order to copy os-specific
             bundles from sc-bundles/osname to its parent sc-bundles-->
    <target name="deploy-os-specific-bundles" if="bundles.dest.os">
        <copy todir="${bundles.dest}">
            <fileset dir="${bundles.dest.os}">
                <include name="**/*.jar"/>
            </fileset>
        </copy>
    </target>

    <!--CRUISE CONTROL BUILD LOOP target-->
    <target name="cc-buildloop" depends="rebuild,test"
            description="Comprehensive (paranoid) rebuild and test (used by Cruise Control)."/>


    <!-- - - - - - - - - - - - - - BUNDLE BUILDING TARGETS - - - - - - - -       -->
    <!--ALL BUNDLES-->
    <target name="bundles"
        depends="bundle-sc-launcher,bundle-util,bundle-service-dns,
        bundle-impl-dns,bundle-dns-config,
        bundle-splash-screen,
        bundle-configuration,bundle-configuration-slick,
        bundle-history,bundle-history-slick,bundle-messagehistory, bundle-msghistory-slick,
        bundle-callhistory, bundle-callhistory-slick, bundle-popupmessagehandler-slick,
        bundle-netaddr,bundle-netaddr-slick,bundle-slickless,
        bundle-slick-runner,bundle-sip,bundle-sip-slick,bundle-fileaccess,
        bundle-fileaccess-slick,bundle-neomedia,bundle-ldap,
        bundle-googlecontacts-service,bundle-googlecontacts,
        bundle-hid-service,bundle-hid,
        bundle-resource-manager,bundle-resources-defaultpack,
        bundle-protocol,bundle-protocol-media,bundle-icq,
        bundle-icq-slick,bundle-mock,bundle-smacklib,bundle-jmdnslib,
        bundle-jabber,bundle-jabber-slick,bundle-swing-ui,bundle-ui-service,
        bundle-jnalib,bundle-phonenumbers,
        bundle-msn,bundle-msn-slick,bundle-yahoo,bundle-yahoo-slick,
        bundle-contactlist,meta-contactlist,meta-contactlist-slick,
        bundle-plugin-icqaccregwizz,bundle-plugin-jabberaccregwizz,
        bundle-plugin-msnaccregwizz,bundle-plugin-sipaccregwizz,
        bundle-plugin-yahooaccregwizz,bundle-plugin-aimaccregwizz,
        bundle-commons-codec,bundle-commons-lang,bundle-httputil,bundle-plugin-spellcheck,
        bundle-version-impl,bundle-shutdown-timeout,bundle-windows-clean-shutdown,
        bundle-growlnotification,bundle-swingnotification,bundle-galagonotification,
        bundle-sparkle, bundle-plugin-branding,
        bundle-systemactivitynotifications,
        bundle-osdependent,bundle-browserlauncher,bundle-systray-service,
        bundle-pluginmanager,bundle-skinmanager,
        bundle-notification-service,bundle-notification-handlers,
        bundle-notification-wiring,bundle-notification-config,
        bundle-contacteventhandler,
        bundle-plugin-contactinfo,bundle-plugin-chatalerter, bundle-keybindings,
        bundle-plugin-keybindingChooser,bundle-plugin-globalproxyconfig,
        bundle-jfontchooserlib,bundle-update,bundle-plugin-update,
        bundle-plugin-simpleaccreg,bundle-plugin-generalconfig,
        bundle-plugin-googletalkaccregwizz,bundle-argdelegation-service,
        bundle-argdelegation,bundle-zrtp4j,bundle-sdes4j,bundle-json,
        bundle-filehistory,bundle-metahistory,bundle-metahistory-slick,
        bundle-plugin-facebookaccregwizz,bundle-plugin-ippiaccregwizz,
        bundle-bouncycastle,bundle-plugin-otr,bundle-plugin-iptelaccregwizz,
        bundle-contactsource,bundle-plugin-reconnect,bundle-plugin-securityconfig,
        bundle-plugin-advancedconfig,
        bundle-credentialsstorage,bundle-credentialsstorage-slick,
        bundle-plugin-nimbuzzavatar,bundle-custom-avatar,
        bundle-replacement,bundle-youtube,bundle-dailymotion,bundle-smiley,
        bundle-vimeo,bundle-vbox7,bundle-metacafe,bundle-flickr,bundle-hulu,
        bundle-twitpic,bundle-directimage,bundle-bliptv,bundle-viddler,
        bundle-plugin-chatconfig,bundle-certificate,bundle-packetlogging,
        bundle-plugin-loggingutils,
        bundle-provdisc,bundle-provdisc-dhcp,bundle-provdisc-mdns,
        bundle-provisioning,bundle-addrbook,bundle-plugin-ldap,
        bundle-thunderbird,
        bundle-plugin-contactsourceconfig,bundle-plugin-certconfig,
        bundle-globalshortcut,bundle-plugin-msofficecomm,bundle-libjitsi,
        bundle-customcontactactions, bundle-phonenumbercontactsource,
        bundle-demuxcontactsource, bundle-muc,
        bundle-desktoputil,bundle-globaldisplaydetails, 
    	bundle-usersearch,
        bundle-plugin-propertieseditor,bundle-plugin-accountinfo,
        bundle-guava,bundle-hsql"/>

    <!--BUNDLE-SC-LAUNCHER-->
    <target name="bundle-sc-launcher">
        <jar compress="false" destfile="${bundles.dest}/sc-launcher.jar">
            <zipfileset dir="${dest}/net/java/sip/communicator/launcher"
                prefix="net/java/sip/communicator/launcher"/>
        </jar>
    </target>

    <!--BUNDLE-SPLASH-SCREEN-->
    <target name="bundle-splash-screen">
        <jar compress="false"
             destfile="${bundles.dest}/splash-screen.jar"
             manifest="${src}/net/java/sip/communicator/impl/splashscreen/splashscreen.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/splashscreen"
                prefix="net/java/sip/communicator/impl/splashscreen"/>
        </jar>
    </target>

    <!--BUNDLE-HISTORY-->
    <target name="bundle-history">
        <jar compress="false" destfile="${bundles.dest}/history.jar"
            manifest="${src}/net/java/sip/communicator/impl/history/history.manifest.mf">

            <zipfileset dir="${dest}/net/java/sip/communicator/service/history"
                prefix="net/java/sip/communicator/service/history"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/history"
                prefix="net/java/sip/communicator/impl/history" />
        </jar>
    </target>

    <!--BUNDLE-HISTORY-SLICK-->
    <target name="bundle-history-slick">
        <jar compress="false" destfile="${bundles.dest}/history-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/history/history.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/history"
                prefix="net/java/sip/communicator/slick/history"/>
        </jar>
    </target>

    <!--BUNDLE-MESSAGEHISTORY-->
    <target name="bundle-messagehistory">
        <jar compress="false" destfile="${bundles.dest}/msghistory.jar"
            manifest="${src}/net/java/sip/communicator/impl/msghistory/msghistory.manifest.mf">

            <zipfileset dir="${dest}/net/java/sip/communicator/service/msghistory"
                prefix="net/java/sip/communicator/service/msghistory"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/msghistory"
                prefix="net/java/sip/communicator/impl/msghistory" />
        </jar>
    </target>

    <!--BUNDLE-MESSAGEHISTORY-SLICK-->
    <target name="bundle-msghistory-slick">
        <jar compress="false" destfile="${bundles.dest}/msghistory-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/msghistory/msghistory.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/msghistory"
                prefix="net/java/sip/communicator/slick/msghistory"/>
        </jar>
    </target>

    <!--BUNDLE-CALLHISTORY-->
    <target name="bundle-callhistory">
        <jar compress="false" destfile="${bundles.dest}/callhistory.jar"
            manifest="${src}/net/java/sip/communicator/impl/callhistory/callhistory.manifest.mf">

            <zipfileset dir="${dest}/net/java/sip/communicator/service/callhistory"
                prefix="net/java/sip/communicator/service/callhistory"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/callhistory"
                prefix="net/java/sip/communicator/impl/callhistory" />
        </jar>
    </target>

    <!--BUNDLE-CALLEHISTORY-SLICK-->
    <target name="bundle-callhistory-slick">
        <jar compress="false" destfile="${bundles.dest}/callhistory-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/callhistory/callhistory.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/callhistory"
                prefix="net/java/sip/communicator/slick/callhistory"/>
        </jar>
    </target>

    <!--BUNDLE-FILEACCESS-->
    <target name="bundle-fileaccess">
        <jar compress="false" destfile="${bundles.dest}/fileaccess.jar"
            manifest="${src}/net/java/sip/communicator/impl/fileaccess/fileaccess.manifest.mf">

            <zipfileset dir="${dest}/net/java/sip/communicator/impl/fileaccess"
                prefix="net/java/sip/communicator/impl/fileaccess" />
        </jar>
    </target>

    <!--BUNDLE-FILEACCESS-SLICK-->
    <target name="bundle-fileaccess-slick">
        <jar compress="false" destfile="${bundles.dest}/fileaccess-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/fileaccess/fileaccess.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/fileaccess"
                prefix="net/java/sip/communicator/slick/fileaccess"/>
        </jar>
    </target>

    <!--BUNDLE-UTIL
        load-properties target is from resources/install/build.xml
        loads the application name from the install settings.
     -->
    <target name="bundle-util" depends="version,load-properties">
        <!-- Create a properties file that the arg handler could use
        to determine SC's version -->
        <echo file="${dest}/net/java/sip/communicator/util/launchutils/version.properties"
              message="APPLICATION_NAME=${application.name}${line.separator}" />
        <echo file="${dest}/net/java/sip/communicator/util/launchutils/version.properties"
              message="PACKAGE_NAME=${package.name}${line.separator}"
              append="true"/>
        <echo file="${dest}/net/java/sip/communicator/util/launchutils/version.properties"
              message="APPLICATION_VERSION=${sip-communicator.version}${line.separator}"
              append="true"/>
        <!-- Create the util.jar-->
        <jar compress="false" destfile="${bundles.dest}/util.jar"
            manifest="${src}/net/java/sip/communicator/util/util.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/util"
                prefix="net/java/sip/communicator/util">
            </zipfileset>
            <zipfileset src="${lib.noinst}/dnsjava.jar" prefix=""/>
        </jar>
    </target>

    <!--BUNDLE-UTIL-DNS-->
    <target name="bundle-service-dns">
        <!-- Create the dns.jar-->
        <jar compress="true" destfile="${bundles.dest}/dnsservice.jar"
            manifest="${src}/net/java/sip/communicator/service/dns/dns.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/dns"
                prefix="net/java/sip/communicator/service/dns"/>
        </jar>
    </target>

    <!--BUNDLE-UTIL-DNS-->
    <target name="bundle-impl-dns">
        <!-- Create the dns.jar-->
        <jar compress="true" destfile="${bundles.dest}/dns.jar"
            manifest="${src}/net/java/sip/communicator/impl/dns/dns.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/dns"
                prefix="net/java/sip/communicator/impl/dns"/>
        </jar>
    </target>
    <!--BUNDLE-DNS-CONFIG-->
    <target name="bundle-dns-config">
        <!-- Create the dnsconfig.jar-->
        <jar compress="true" destfile="${bundles.dest}/dnsconfig.jar"
            manifest="${src}/net/java/sip/communicator/plugin/dnsconfig/dnsconfig.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/dnsconfig"
                prefix="net/java/sip/communicator/plugin/dnsconfig"/>
        </jar>
    </target>

    <!--BUNDLE-CONFIGURATION-->
    <target name="bundle-configuration">
        <jar
            compress="false"
            destfile="${bundles.dest}/configuration.jar"
            manifest="${src}/net/java/sip/communicator/impl/configuration/configuration.manifest.mf" >

            <zipfileset dir="${dest}/net/java/sip/communicator/impl/configuration"
                prefix="net/java/sip/communicator/impl/configuration" />
        </jar>
    </target>

    <!--BUNDLE-CONFIGURATION-SLICK-->
    <target name="bundle-configuration-slick">
        <jar compress="false" destfile="${bundles.dest}/configuration-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/configuration/configuration.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/configuration"
                prefix="net/java/sip/communicator/slick/configuration"/>
        </jar>
    </target>

    <!--BUNDLE-CREDENTIALSSTORAGE-->
    <target name="bundle-credentialsstorage">
        <jar
            compress="false"
            destfile="${bundles.dest}/credentialsstorage.jar"
            manifest="${src}/net/java/sip/communicator/impl/credentialsstorage/credentialsstorage.manifest.mf" >

            <zipfileset dir="${dest}/net/java/sip/communicator/service/credentialsstorage"
                prefix="net/java/sip/communicator/service/credentialsstorage"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/credentialsstorage"
                prefix="net/java/sip/communicator/impl/credentialsstorage" />
        </jar>
    </target>

    <!--BUNDLE-CREDENTIALSSTORAGE-SLICK-->
    <target name="bundle-credentialsstorage-slick">
        <jar compress="false" destfile="${bundles.dest}/credentialsstorage-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/credentialsstorage/credentialsstorage.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/credentialsstorage"
                prefix="net/java/sip/communicator/slick/credentialsstorage"/>
        </jar>
    </target>

    <!--BUNDLE-JUNIT -->
    <target name="bundle-junit">
        <jar compress="true" destfile="lib/bundle/junit.jar"
            manifest="${testsrc}/junit/junit.manifest.mf">
            <zipfileset src="${lib.noinst}/junit.jar" prefix=""/>
        </jar>
    </target>

    <!--BUNDLE-LIBJITSI -->
    <target name="bundle-libjitsi">
        <jar
            compress="false"
            destfile="${bundles.dest}/libjitsi.jar"
            manifest="${src}/net/java/sip/communicator/impl/libjitsi/libjitsi.manifest.mf">

            <zipfileset dir="${dest}/net/java/sip/communicator/impl/libjitsi"
                prefix="net/java/sip/communicator/impl/libjitsi"/>
            <zipfileset src="${lib.noinst}/bcpkix-jdk15on-150.jar" prefix=""
                excludes="META-INF/BCKEY.*"/>
            <zipfileset src="${lib.noinst}/fmj.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/libjitsi.jar" prefix=""/>
        </jar>
    </target>

    <!--BUNDLE-NEOMEDIA-->
    <target name="bundle-neomedia">
        <!-- Creates a bundle containing the impl of the neomedia package and
            FMJ. -->
        <jar
            compress="false"
            destfile="${bundles.dest}/neomedia.jar"
            manifest="${src}/net/java/sip/communicator/impl/neomedia/neomedia.manifest.mf">

            <zipfileset dir="${dest}/net/java/sip/communicator/impl/neomedia"
                prefix="net/java/sip/communicator/impl/neomedia"/>
            <zipfileset dir="${resources}/images/impl/media"
                prefix="resources/images/impl/media"/>
        </jar>
    </target>

    <!--BUNDLE-HID -->
    <target name="bundle-hid">
        <jar compress="false" destfile="${bundles.dest}/hid.jar"
            manifest="${src}/net/java/sip/communicator/impl/hid/hid.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/hid"
                prefix="net/java/sip/communicator/impl/hid" />
        </jar>
    </target>

    <!--BUNDLE-HID-SERVICE -->
    <target name="bundle-hid-service">
        <jar compress="false" destfile="${bundles.dest}/hid-service.jar"
            manifest="${src}/net/java/sip/communicator/service/hid/hid.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/hid"
                prefix="net/java/sip/communicator/service/hid"/>
        </jar>
    </target>

    <!--BUNDLE-LDAP-->
    <target name="bundle-ldap">
        <jar compress="false" destfile="${bundles.dest}/ldap.jar"
            manifest="${src}/net/java/sip/communicator/impl/ldap/ldap.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/ldap"
                prefix="net/java/sip/communicator/service/ldap"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/ldap"
                prefix="net/java/sip/communicator/impl/ldap" />
        </jar>
    </target>

    <!--BUNDLE-GOOGLECONTACTS-->
    <target name="bundle-googlecontacts">
        <jar compress="false" destfile="${bundles.dest}/googlecontacts.jar"
            manifest="${src}/net/java/sip/communicator/impl/googlecontacts/googlecontacts.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/googlecontacts"
                prefix="net/java/sip/communicator/service/googlecontacts"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/googlecontacts"
                prefix="net/java/sip/communicator/impl/googlecontacts" />
            <zipfileset src="${lib.noinst}/gdata-core-1.0.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/gdata-contacts-3.0.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/gdata-contacts-meta-3.0.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/gdata-client-1.0.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/gdata-client-meta-1.0.jar" prefix=""/>
        </jar>
    </target>

    <!--BUNDLE-GOOGLECONTACTS-SERVICE-->
    <target name="bundle-googlecontacts-service">
        <jar compress="false" destfile="${bundles.dest}/googlecontacts-service.jar"
            manifest="${src}/net/java/sip/communicator/service/googlecontacts/googlecontacts.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/googlecontacts"
                prefix="net/java/sip/communicator/service/googlecontacts"/>
        </jar>
    </target>

    <target name="bundle-guava">
        <copy file="${lib.noinst}/guava-15.0.jar" tofile="${bundles.dest}/guava.jar"/>
    </target>

    <target name="bundle-hsql">
        <copy file="${lib.noinst}/hsqldb.jar" tofile="${bundles.dest}/hsqldb.jar"/>
    </target>

    <!--BUNDLE-SERVICEBINDER -->
    <target name="bundle-servicebinder">
        <jar compress="true" destfile="lib/bundle/servicebinder.jar"
            filesetmanifest="merge">

            <zipfileset src="${lib}/servicebinder.jar" prefix=""/>
            <manifest>
                <attribute name="Import-Package" value="org.osgi.framework"/>
            </manifest>
        </jar>
    </target>

    <!--BUNDLE-ARCHITECTUREVIEWER -->
    <target name="bundle-architectureviewer">
        <jar compress="true" destfile="lib/bundle/architectureviewer1.1.jar"
            filesetmanifest="merge">

            <zipfileset src="${lib.noinst}/architectureviewer1.1.jar" prefix=""/>
            <manifest>
                <attribute name="Import-Package"
                    value="javax.swing, javax.swing.text,
org.ungoverned.gravity.servicebinder, org.ungoverned.gravity.servicebinder.architecture,
javax.accessibility, javax.swing.plaf, javax.swing.tree, javax.swing.undo,
javax.swing.event, javax.swing.border"/>
            </manifest>
        </jar>
    </target>

    <!--BUNDLE-NETADDR -->
    <target name="bundle-netaddr">
        <jar compress="false" destfile="${bundles.dest}/netaddr.jar"
            manifest="${src}/net/java/sip/communicator/impl/netaddr/netaddr.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/netaddr"
                prefix="net/java/sip/communicator/service/netaddr"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/netaddr"
                prefix="net/java/sip/communicator/impl/netaddr"/>
            <zipfileset src="${lib.noinst}/ice4j.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/weupnp-0.1.2-SNAPSHOT.jar" prefix=""/>
        </jar>
    </target>

    <!--BUNDLE-NETADDR-SLICK -->
    <target name="bundle-netaddr-slick">
        <jar compress="false" destfile="${bundles.dest}/netaddr-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/netaddr/netaddr.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/netaddr"
                prefix="net/java/sip/communicator/slick/netaddr"/>
        </jar>
    </target>

    <!--BUNDLE-SLICKLESS-->
    <target name="bundle-slickless">
        <!--internal-target- Runs all tests which do not belong to a service implementation and don't therefore need a running OSGI framework -->
        <jar compress="false" destfile="${bundles.dest}/slickless.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/slickless/slickless.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/slickless"
                prefix="net/java/sip/communicator/slick/slickless"/>
        </jar>
    </target>

    <!--BUNDLE-SLICK-RUNNER-->
    <target name="bundle-slick-runner">
        <!--internal-target- Creates a bundle that runs all SLICKs that currently exist in sip-com -->
        <jar compress="false" destfile="${bundles.dest}/slick-runner.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/runner/slick-runner.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/runner"
                prefix="net/java/sip/communicator/slick/runner"/>
        </jar>
    </target>

    <!--BUNDLE-SIP-->
    <target name="bundle-sip">
        <!--internal-target- Creates a bundle containing the sip implementation of the protocol provider package -->
        <jar compress="false" destfile="${bundles.dest}/protocol-sip.jar"
            manifest="${src}/net/java/sip/communicator/impl/protocol/sip/sip.provider.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/protocol/sip"
                prefix="net/java/sip/communicator/impl/protocol/sip"/>
            <zipfileset src="${lib.noinst}/jain-sip-ri.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/jain-sip-api.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/jain-sdp.jar" prefix=""/>
        </jar>
    </target>

    <target name="bundle-sip-slick">
        <!--internal-target- Creates a bundle containing the all tests for the
            sip implementation of the protocol provider package -->
        <jar compress="false" destfile="${bundles.dest}/protocol-sip-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/protocol/sip/sip.provider.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/protocol/sip"
                prefix="net/java/sip/communicator/slick/protocol/sip"/>
        </jar>
    </target>

    <!-- BUNDLE-PROTOCOL -->
    <target name="bundle-protocol">
        <!-- Creates a bundle containing the protocol provider interfaces.-->
        <jar compress="false" destfile="${bundles.dest}/protocol.jar"
            manifest="${src}/net/java/sip/communicator/service/protocol/protocol.provider.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/protocol"
                prefix="net/java/sip/communicator/service/protocol"/>
            <zipfileset dir="${resources}/images"
                prefix="resources/images">
                <include name="protocol/icq/**/*"/>
                <include name="protocol/googletalk/**/*"/>
                <include name="protocol/facebook/**/*"/>
                <include name="protocol/jabber/**/*"/>
                <include name="protocol/msn/**/*"/>
                <include name="protocol/yahoo/**/*"/>
                <!-- the media package lives in the protocol-media bundle -->
                <exclude name="protocol/media/**/*"/>
            </zipfileset>
        </jar>
    </target>

    <!-- BUNDLE-PROTOCOL -->
    <target name="bundle-protocol-media">
        <!-- Creates a bundle containing the media dependent
             protocol provider interfaces.-->
        <jar compress="false" destfile="${bundles.dest}/protocol-media.jar"
            manifest="${src}/net/java/sip/communicator/service/protocol/media/protocol.media.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/protocol/media"
                prefix="net/java/sip/communicator/service/protocol/media"/>
        </jar>
    </target>

    <target name="bundle-smacklib">
        <!-- Creates a bundle containing the smack lib.-->
        <jar compress="false" destfile="${bundles.dest}/smacklib.jar"
            manifest="${lib.noinst}/smack.manifest.mf">
            <zipfileset src="${lib.noinst}/smackx-debug.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/smack.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/smackx.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/jnsapi.jar" prefix=""/>
        </jar>
    </target>

    <!-- BUNDLE-PHONENUMBER-SERVICE -->
    <target name="bundle-phonenumbers">
        <!-- Creates a bundle containing the icq impl of the protocol provider.-->
        <jar compress="false" destfile="${bundles.dest}/phonenumbers.jar"
             manifest="${src}/net/java/sip/communicator/impl/phonenumbers/phonenumbers.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/phonenumbers"
                        prefix="net/java/sip/communicator/impl/phonenumbers"/>
            <zipfileset src="${lib.noinst}/libphonenumber-5.9.jar" prefix=""/>
        </jar>
    </target>

    <target name="bundle-jmdnslib">
        <!-- Creates a bundle containing the jmdns lib.-->
        <jar compress="false" destfile="${bundles.dest}/jmdnslib.jar"
            manifest="${lib.noinst}/jmdns.manifest.mf">
            <zipfileset src="${lib.noinst}/jmdns.jar" prefix=""/>
        </jar>
    </target>

    <target name="bundle-jnalib">
        <!-- Creates a bundle containing the win jna implementation.-->
        <jar
            compress="false" destfile="${bundles.dest}/jnalib.jar"
            manifest="${lib.noinst}/jna.manifest.mf">

            <zipfileset src="${lib.noinst}/jna.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/jna-platform.jar" prefix=""/>
        </jar>
    </target>

    <!-- BUNDLE-ICQ -->
    <target name="bundle-icq">
        <!-- Creates a bundle containing the icq impl of the protocol provider.-->
        <jar compress="false" destfile="${bundles.dest}/protocol-icq.jar"
            manifest="${src}/net/java/sip/communicator/impl/protocol/icq/icq.provider.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/protocol/icq"
                prefix="net/java/sip/communicator/impl/protocol/icq"/>
            <zipfileset src="${lib.noinst}/joscar-client.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/joscar-common.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/joscar-protocol.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/jsocks-klea.jar" prefix=""/>
        </jar>
    </target>

    <!-- BUNDLE-ICQ-SLICK -->
    <target name="bundle-icq-slick">
        <!-- Creates a bundle containing the slick for the ICQ protocol provider.-->
        <jar compress="false" destfile="${bundles.dest}/protocol-icq-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/protocol/icq/icq.provider.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/protocol/icq"
                prefix="net/java/sip/communicator/slick/protocol/icq"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/protocol/generic"
                prefix="net/java/sip/communicator/slick/protocol/generic"/>
            <zipfileset src="${lib.noinst}/joscar-client.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/joscar-common.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/joscar-protocol.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/jsocks-klea.jar" prefix=""/>
        </jar>
    </target>

     <!--BUNDLE-MOCK-PROVIDER-->
    <target name="bundle-mock">
        <!--internal-target- Creates a bundle containing the mock implementation of the protocol provider package -->
        <jar compress="false" destfile="${bundles.dest}/protocol-mock.jar"
            manifest="${src}/net/java/sip/communicator/impl/protocol/mock/mock.provider.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/protocol/mock"
                prefix="net/java/sip/communicator/impl/protocol/mock"/>
        </jar>
    </target>

    <!-- BUNDLE-JABBER -->
    <target name="bundle-jabber">
        <!-- Creates a bundle containing the jabber impl of the protocol provider.-->
        <jar compress="false" destfile="${bundles.dest}/protocol-jabber.jar"
            manifest="${src}/net/java/sip/communicator/impl/protocol/jabber/jabber.provider.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/protocol/jabber"
                prefix="net/java/sip/communicator/impl/protocol/jabber"/>
        </jar>
    </target>

    <!-- BUNDLE-JABBER-SLICK -->
    <!-- Creates a bundle containing the slick for the Jabber protocol provider.-->
    <target name="bundle-jabber-slick">

        <jar compress="false" destfile="${bundles.dest}/protocol-jabber-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/protocol/jabber/jabber.provider.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/protocol/jabber"
                prefix="net/java/sip/communicator/slick/protocol/jabber"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/protocol/generic"
                prefix="net/java/sip/communicator/slick/protocol/generic"/>
        </jar>
    </target>

    <!-- BUNDLE-MSN -->
    <target name="bundle-msn">
        <!-- Creates a bundle containing the msn impl of the protocol provider.-->
        <jar compress="false" destfile="${bundles.dest}/protocol-msn.jar"
            manifest="${src}/net/java/sip/communicator/impl/protocol/msn/msn.provider.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/protocol/msn"
                prefix="net/java/sip/communicator/impl/protocol/msn"/>
            <zipfileset src="${lib.noinst}/jml-1.0b5.jar" prefix=""/>
        </jar>
    </target>

    <!-- BUNDLE-MSN-SLICK -->
    <!-- Creates a bundle containing the slick for the Msn protocol provider.-->
    <target name="bundle-msn-slick">
        <jar compress="false" destfile="${bundles.dest}/protocol-msn-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/protocol/msn/msn.provider.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/protocol/msn"
                prefix="net/java/sip/communicator/slick/protocol/msn"/>
            <zipfileset src="${lib.noinst}/jml-1.0b5.jar" prefix=""/>
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/protocol/generic"
                prefix="net/java/sip/communicator/slick/protocol/generic"/>
        </jar>
    </target>

    <!-- BUNDLE-SSH -->
    <target name="bundle-ssh">
        <!-- Creates a bundle containing the SSH impl of the protocol provider.-->
        <jar compress="false" destfile="${bundles.dest}/protocol-ssh.jar"
            manifest="${src}/net/java/sip/communicator/impl/protocol/ssh/ssh.provider.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/protocol/ssh"
                prefix="net/java/sip/communicator/impl/protocol/ssh"/>
            <zipfileset src="${lib.noinst}/jsch-0.1.36.jar" prefix=""/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-SSHACCREGWIZZ -->
    <target name="bundle-plugin-sshaccregwizz">
        <!-- Creates a bundle for the plugin SSH Account Registration Wizard.-->
        <jar compress="false" destfile="${bundles.dest}/sshaccregwizz.jar"
            manifest="${src}/net/java/sip/communicator/plugin/sshaccregwizz/sshaccregwizz.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/sshaccregwizz"
                prefix="net/java/sip/communicator/plugin/sshaccregwizz"/>
        </jar>
    </target>

    <!-- BUNDLE-YAHOO -->
    <target name="bundle-yahoo">
        <!-- Creates a bundle containing the yahoo impl of the protocol provider.-->
        <jar compress="false" destfile="${bundles.dest}/protocol-yahoo.jar"
            manifest="${src}/net/java/sip/communicator/impl/protocol/yahoo/yahoo.provider.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/protocol/yahoo"
                prefix="net/java/sip/communicator/impl/protocol/yahoo"/>
            <zipfileset src="${lib.noinst}/ymsg_network_v0_67.jar" prefix=""/>
        </jar>
    </target>

    <!-- BUNDLE-YAHOO-SLICK -->
    <!-- Creates a bundle containing the slick for the Yahoo protocol provider.-->
    <target name="bundle-yahoo-slick">
        <jar compress="false" destfile="${bundles.dest}/protocol-yahoo-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/protocol/yahoo/yahoo.provider.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/protocol/yahoo"
                prefix="net/java/sip/communicator/slick/protocol/yahoo"/>
            <zipfileset src="${lib.noinst}/ymsg_network_v0_67.jar" prefix=""/>
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/protocol/generic"
                prefix="net/java/sip/communicator/slick/protocol/generic"/>
        </jar>
    </target>

    <!-- BUNDLE-GIBBERISH -->
    <target name="bundle-gibberish">
        <!-- Creates a bundle containing the Gibberish impl of the protocol provider.-->
        <jar compress="false" destfile="${bundles.dest}/protocol-gibberish.jar"
             manifest="${src}/net/java/sip/communicator/impl/protocol/gibberish/gibberish.provider.manifest.mf">
        <zipfileset dir="${dest}/net/java/sip/communicator/impl/protocol/gibberish"
                    prefix="net/java/sip/communicator/impl/protocol/gibberish"/>
        <!-- zipfileset src="${lib.noinst}/gibberish_stack.jar" prefix=""/-->
        </jar>
    </target>

    <!-- BUNDLE-GIBBERISH-SLICK -->
    <!-- Creates a bundle containing the slick for the Gibberish protocol
         provider.-->
    <target name="bundle-gibberish-slick">
        <jar compress="false" destfile="${bundles.dest}/protocol-gibberish-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/protocol/gibberish/gibberish.provider.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/protocol/gibberish"
                prefix="net/java/sip/communicator/slick/protocol/gibberish"/>
        </jar>
    </target>

    <!-- BUNDLE-UI-SERVICE -->
    <target name="bundle-ui-service">
        <!-- Bundle Jitsi's UI.-->
        <jar compress="false" destfile="${bundles.dest}/ui-service.jar"
            manifest="${src}/net/java/sip/communicator/service/gui/gui.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/gui"
                prefix="net/java/sip/communicator/service/gui"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/service/shutdown"
                prefix="net/java/sip/communicator/service/shutdown"/>
        </jar>
    </target>

    <!-- BUNDLE-SWING-UI -->
    <target name="bundle-swing-ui">
        <!-- Bundle Jitsi's UI.-->
        <jar compress="false" destfile="${bundles.dest}/swing-ui.jar"
            manifest="${src}/net/java/sip/communicator/impl/gui/swing.ui.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/gui"
                prefix="net/java/sip/communicator/impl/gui"/>
            <zipfileset src="${lib.noinst}/swing-worker-1.2.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/mac_widgets-0.9.5.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/forms-1.2.1.jar" prefix=""/>
        </jar>
    </target>

    <!-- BUNDLE-CONTACTLIST -->
    <target name="bundle-contactlist">
        <!-- Creates a bundle containing the contactlist interfaces.-->
        <jar compress="false" destfile="${bundles.dest}/contactlist.jar"
            manifest="${src}/net/java/sip/communicator/service/contactlist/contactlist.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/contactlist"
                prefix="net/java/sip/communicator/service/contactlist"/>
        </jar>
    </target>

    <!-- BUNDLE-META-CONTACTLIST -->
    <target name="meta-contactlist">
        <!-- Creates the meta contact list bundle.-->
        <jar compress="false" destfile="${bundles.dest}/meta-cl.jar"
            manifest="${src}/net/java/sip/communicator/impl/contactlist/meta.cl.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/contactlist"
                prefix="net/java/sip/communicator/impl/contactlist"/>
        </jar>
    </target>

    <!-- BUNDLE-META-CONTACTLIST-SLICK -->
    <target name="meta-contactlist-slick">
        <!-- Creates a bundle for the meta contact list SLICK.-->
        <jar compress="false" destfile="${bundles.dest}/meta-cl-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/contactlist/meta.cl.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/contactlist"
                prefix="net/java/sip/communicator/slick/contactlist"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-ICQACCREGWIZZ -->
    <target name="bundle-plugin-icqaccregwizz">
        <!-- Creates a bundle for the plugin Icq Account Registration Wizard.-->
        <jar compress="false" destfile="${bundles.dest}/icqaccregwizz.jar"
            manifest="${src}/net/java/sip/communicator/plugin/icqaccregwizz/icqaccregwizz.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/icqaccregwizz"
                prefix="net/java/sip/communicator/plugin/icqaccregwizz"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-AIMACCREGWIZZ -->
    <target name="bundle-plugin-aimaccregwizz">
        <!-- Creates a bundle for the plugin Aim Account Registration Wizard.-->
        <jar compress="false" destfile="${bundles.dest}/aimaccregwizz.jar"
            manifest="${src}/net/java/sip/communicator/plugin/aimaccregwizz/aimaccregwizz.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/aimaccregwizz"
                prefix="net/java/sip/communicator/plugin/aimaccregwizz"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-JABBERACCREGWIZZ -->
    <target name="bundle-plugin-jabberaccregwizz">
        <!-- Creates a bundle for the plugin Jabber Account Registration Wizard.-->
        <jar compress="false" destfile="${bundles.dest}/jabberaccregwizz.jar"
            manifest="${src}/net/java/sip/communicator/plugin/jabberaccregwizz/jabberaccregwizz.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/jabberaccregwizz"
                prefix="net/java/sip/communicator/plugin/jabberaccregwizz"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-GOOGLETALKACCREGWIZZ -->
    <target name="bundle-plugin-googletalkaccregwizz">
        <!-- Creates a bundle for the plugin Google Talk Account Registration Wizard.-->
        <jar compress="false" destfile="${bundles.dest}/googletalkaccregwizz.jar"
            manifest="${src}/net/java/sip/communicator/plugin/googletalkaccregwizz/googletalkaccregwizz.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/googletalkaccregwizz"
                prefix="net/java/sip/communicator/plugin/googletalkaccregwizz"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-MSNACCREGWIZZ -->
    <target name="bundle-plugin-msnaccregwizz">
        <!-- Creates a bundle for the plugin Msn Account Registration Wizard.-->
        <jar compress="false" destfile="${bundles.dest}/msnaccregwizz.jar"
            manifest="${src}/net/java/sip/communicator/plugin/msnaccregwizz/msnaccregwizz.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/msnaccregwizz"
                prefix="net/java/sip/communicator/plugin/msnaccregwizz"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-YAHOOACCREGWIZZ -->
    <target name="bundle-plugin-yahooaccregwizz">
        <!-- Creates a bundle for the plugin Yahoo Account Registration Wizard.-->
        <jar compress="false" destfile="${bundles.dest}/yahooaccregwizz.jar"
            manifest="${src}/net/java/sip/communicator/plugin/yahooaccregwizz/yahooaccregwizz.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/yahooaccregwizz"
                prefix="net/java/sip/communicator/plugin/yahooaccregwizz"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-SIPACCREGWIZZ -->
    <target name="bundle-plugin-sipaccregwizz">
        <!-- Creates a bundle for the plugin SIP Account Registration Wizard.-->
        <jar compress="false" destfile="${bundles.dest}/sipaccregwizz.jar"
            manifest="${src}/net/java/sip/communicator/plugin/sipaccregwizz/sipaccregwizz.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/sipaccregwizz"
                prefix="net/java/sip/communicator/plugin/sipaccregwizz"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-IPTELACCREGWIZZ -->
    <target name="bundle-plugin-iptelaccregwizz">
        <!-- Creates a bundle for the plugin IP Tel Account Registration Wizard.-->
        <jar compress="false" destfile="${bundles.dest}/iptelaccregwizz.jar"
            manifest="${src}/net/java/sip/communicator/plugin/iptelaccregwizz/iptelaccregwizz.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/iptelaccregwizz"
                prefix="net/java/sip/communicator/plugin/iptelaccregwizz"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-SIP2SIPACCREGWIZZ -->
    <target name="bundle-plugin-sip2sipaccregwizz">
        <!-- Creates a bundle for the plugin Sip2Sip Account Registration Wizard.-->
        <jar compress="false" destfile="${bundles.dest}/sip2sipaccregwizz.jar"
            manifest="${src}/net/java/sip/communicator/plugin/sip2sipaccregwizz/sip2sipaccregwizz.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/sip2sipaccregwizz"
                prefix="net/java/sip/communicator/plugin/sip2sipaccregwizz"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-IPPIACCREGWIZZ -->
    <target name="bundle-plugin-ippiaccregwizz">
        <!-- Creates a bundle for the plugin ippi Account Registration Wizard.-->
        <jar compress="false" destfile="${bundles.dest}/ippiaccregwizz.jar"
            manifest="${src}/net/java/sip/communicator/plugin/ippiaccregwizz/ippiaccregwizz.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/ippiaccregwizz"
                prefix="net/java/sip/communicator/plugin/ippiaccregwizz"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-GIBBERISHACCREGWIZZ -->
    <target name="bundle-plugin-gibberishaccregwizz">
        <!-- Creates a bundle for the plugin Gibberish Account Registration
             Wizard.-->
        <jar compress="false" destfile="${bundles.dest}/gibberishaccregwizz.jar"
            manifest="${src}/net/java/sip/communicator/plugin/gibberishaccregwizz/gibberishaccregwizz.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/gibberishaccregwizz"
                prefix="net/java/sip/communicator/plugin/gibberishaccregwizz"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-FACEBOOKACCREGWIZZ -->
    <target name="bundle-plugin-facebookaccregwizz">
        <!-- Creates a bundle for the plugin Facebook Account Registration
             Wizard.-->
        <jar compress="false" destfile="${bundles.dest}/facebookaccregwizz.jar"
                manifest="${src}/net/java/sip/communicator/plugin/facebookaccregwizz/facebookaccregwizz.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/facebookaccregwizz"
                    prefix="net/java/sip/communicator/plugin/facebookaccregwizz" />
        </jar>
    </target>

    <!-- BUNDLE-SERVICEIMPL-VERSION -->
    <target name="bundle-version-impl">
        <!-- Creates a bundle for the version service impl.-->
        <jar compress="false" destfile="${bundles.dest}/version-impl.jar"
            manifest="${src}/net/java/sip/communicator/impl/version/version.impl.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/version"
                prefix="net/java/sip/communicator/impl/version"/>
        </jar>
    </target>

    <!-- BUNDLE-SERVICELICK-VERSION -->
    <target name="bundle-version-slick">
        <!-- Creates a bundle for the version service slick.-->
        <jar compress="false" destfile="${bundles.dest}/version-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/version/version.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/version"
                prefix="net/java/sip/communicator/slick/version"/>
        </jar>
    </target>

    <!-- BUNDLE-SHUTDOWN-TIMEOUT -->
    <target name="bundle-shutdown-timeout">
        <!-- Creates a bundle for the shutdown-timeout plugin.-->
        <jar compress="false" destfile="${bundles.dest}/shutdown-timeout.jar"
            manifest="${src}/net/java/sip/communicator/impl/shutdowntimeout/shutdown.timeout.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/shutdowntimeout"
                prefix="net/java/sip/communicator/impl/shutdowntimeout"/>
        </jar>
    </target>

    <!-- BUNDLE-WINDOWS-CLEAN-SHUTDOWN -->
    <target name="bundle-windows-clean-shutdown">
        <!-- Creates a bundle for the windows-clean-shutdown plugin.-->
        <jar compress="false" destfile="${bundles.dest.win}/windows-clean-shutdown.jar"
             manifest="${src}/net/java/sip/communicator/plugin/windowscleanshutdown/cleanshutdown.manifest.mf">
             <zipfileset dir="${dest}/net/java/sip/communicator/plugin/windowscleanshutdown"
                 prefix="net/java/sip/communicator/plugin/windowscleanshutdown"/>
        </jar>
    </target>

    <!--BUNDLE-GROWLNOTIFICATION-->
    <target name="bundle-growlnotification" if="is.running.macos">
        <!-- Creates a bundle for the growlnotification plugin.-->
        <jar compress="false" destfile="${bundles.dest.mac}/growlnotification.jar"
            manifest="${src}/net/java/sip/communicator/impl/growlnotification/growlnotification.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/growlnotification"
                prefix="net/java/sip/communicator/impl/growlnotification" />
        </jar>
    </target>

    <!--BUNDLE-SWINGNOTIFICATION-->
    <target name="bundle-swingnotification">
        <!-- Creates a bundle for the swingnotification plugin.-->
        <jar compress="false" destfile="${bundles.dest}/swingnotification.jar"
            manifest="${src}/net/java/sip/communicator/impl/swingnotification/swingnotification.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/swingnotification"
                prefix="net/java/sip/communicator/impl/swingnotification" />
        </jar>
    </target>

    <!--BUNDLE-GALAGONOTIFICATION-->
    <target name="bundle-galagonotification">
        <!-- Creates a bundle for the galagonotification plugin. -->
        <jar compress="false" destfile="${bundles.dest.lin}/galagonotification.jar"
            manifest="${src}/net/java/sip/communicator/impl/galagonotification/galagonotification.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/galagonotification"
                prefix="net/java/sip/communicator/impl/galagonotification" />
        </jar>
    </target>

    <!--BUNDLE-POPUPMESSAGEHANDLER-SLICK-->
    <target name="bundle-popupmessagehandler-slick">
        <jar compress="false" destfile="${bundles.dest}/popupmessagehandler-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/popupmessagehandler/popupmessagehandler.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/popupmessagehandler"
                prefix="net/java/sip/communicator/slick/popupmessagehandler"/>
        </jar>
    </target>

    <!--BUNDLE-SPARKLE-->
    <target name="bundle-sparkle">
        <!-- Creates a bundle for the sparkle activator plugin.-->
        <jar compress="false" destfile="${bundles.dest.mac}/sparkle.jar"
            manifest="${src}/net/java/sip/communicator/impl/sparkle/sparkle.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/sparkle"
                prefix="net/java/sip/communicator/impl/sparkle" />
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-EXAMPLE PLUGIN -->
        <target name="bundle-plugin-exampleplugin">
            <!-- Creates a bundle for the plugin SIP Account Registration Wizard.-->
            <jar compress="false" destfile="${bundles.dest}/exampleplugin.jar"
                manifest="${src}/net/java/sip/communicator/plugin/exampleplugin/exampleplugin.manifest.mf">
                <zipfileset dir="${dest}/net/java/sip/communicator/plugin/exampleplugin"
                    prefix="net/java/sip/communicator/plugin/exampleplugin"/>
            </jar>
        </target>

    <!-- BUNDLE-PLUGIN-BRANDING -->
        <target name="bundle-plugin-branding">
            <!-- Creates a bundle for the Splash Screen plugin.-->
        <jar compress="false" destfile="${bundles.dest}/branding.jar"
            manifest="${src}/net/java/sip/communicator/plugin/branding/branding.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/branding"
                prefix="net/java/sip/communicator/plugin/branding"/>
            </jar>
        </target>

    <!--BUNDLE-OSDEPENDENT-->
    <target name="bundle-osdependent">
        <!-- Creates a bundle for the OS dependent packages like systray and desktop."-->
        <jar
            compress="false" destfile="${bundles.dest}/osdependent.jar"
            manifest="${src}/net/java/sip/communicator/impl/osdependent/osdependent.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/systray"
                prefix="net/java/sip/communicator/service/systray"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/service/desktop"
                prefix="net/java/sip/communicator/service/desktop"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/osdependent"
                prefix="net/java/sip/communicator/impl/osdependent"/>
        </jar>
    </target>

    <!--BUNDLE-OSDEPENDENT-->
    <target name="bundle-systray-service">
        <!-- Creates a bundle for the systray service."-->
        <jar
            compress="false" destfile="${bundles.dest}/systray-service.jar"
            manifest="${src}/net/java/sip/communicator/service/systray/systray.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/systray"
                prefix="net/java/sip/communicator/service/systray"/>
        </jar>
    </target>

    <!-- BUNDLE-BROWSER LAUNCHER -->
    <target name="bundle-browserlauncher">
        <!-- Creates a bundle for the browser launcher.-->
        <jar compress="false" destfile="${bundles.dest}/browserlauncher.jar"
            manifest="${src}/net/java/sip/communicator/impl/browserlauncher/browserlauncher.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/browserlauncher"
                prefix="net/java/sip/communicator/service/browserlauncher"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/browserlauncher"
                prefix="net/java/sip/communicator/impl/browserlauncher"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN MANAGER -->
    <target name="bundle-pluginmanager">
        <!-- Creates a bundle for the plugin manager plugin.-->
        <jar compress="false" destfile="${bundles.dest}/pluginmanager.jar"
            manifest="${src}/net/java/sip/communicator/plugin/pluginmanager/pluginmanager.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/pluginmanager"
                prefix="net/java/sip/communicator/plugin/pluginmanager"/>
        </jar>
    </target>

    <!-- BUNDLE-SKIN MANAGER -->
    <target name="bundle-skinmanager">
        <!-- Creates a bundle for the skin manager plugin.-->
        <jar compress="false" destfile="${bundles.dest}/skinmanager.jar"
            manifest="${src}/net/java/sip/communicator/plugin/skinmanager/skinmanager.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/skinmanager"
                prefix="net/java/sip/communicator/plugin/skinmanager"/>
        </jar>
    </target>

    <!-- BUNDLE-ZEROCONF -->
    <target name="bundle-zeroconf">
        <!-- Creates a bundle containing the Zeroconf impl of the protocol provider.-->
        <jar compress="false" destfile="${bundles.dest}/protocol-zeroconf.jar"
            manifest="${src}/net/java/sip/communicator/impl/protocol/zeroconf/zeroconf.provider.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/protocol/zeroconf"
                prefix="net/java/sip/communicator/impl/protocol/zeroconf"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-ZEROCONFACCREGWIZZ -->
    <target name="bundle-plugin-zeroconfaccregwizz">
        <!-- Creates a bundle for the plugin Zeroconf Account Registration Wizard.-->
        <jar compress="false" destfile="${bundles.dest}/zeroconfaccregwizz.jar"
            manifest="${src}/net/java/sip/communicator/plugin/zeroconfaccregwizz/zeroconfaccregwizz.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/zeroconfaccregwizz"
                prefix="net/java/sip/communicator/plugin/zeroconfaccregwizz"/>
        </jar>
    </target>

    <!-- BUNDLE-IRC -->
    <target name="bundle-irc">
        <!-- Creates a bundle containing the IRC impl of the protocol provider.-->
        <jar compress="false" destfile="${bundles.dest}/protocol-irc.jar"
         manifest="${src}/net/java/sip/communicator/impl/protocol/irc/irc.provider.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/protocol/irc"
                        prefix="net/java/sip/communicator/impl/protocol/irc"/>
            <zipfileset src="${lib.noinst}/pircbot.jar" prefix=""/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-IRCACCREGWIZZ -->
    <target name="bundle-plugin-ircaccregwizz">
            <!-- Creates a bundle for the plugin IRC Account Registration
                 Wizard.-->
            <jar compress="false" destfile="${bundles.dest}/ircaccregwizz.jar"
                manifest="${src}/net/java/sip/communicator/plugin/ircaccregwizz/ircaccregwizz.manifest.mf">
                <zipfileset dir="${dest}/net/java/sip/communicator/plugin/ircaccregwizz"
                    prefix="net/java/sip/communicator/plugin/ircaccregwizz"/>
            </jar>
    </target>

    <!--BUNDLE-COMMONS-CODEC -->
    <target name="bundle-commons-codec">
        <copy file="${lib.noinst}/commons-codec-1.4.jar"
            tofile="${bundles.dest}/commons-codec.jar"/>
    </target>

    <!--BUNDLE-COMMONS-LANG -->
    <target name="bundle-commons-lang">
        <copy file="${lib.noinst}/commons-lang3-3.1.jar"
            tofile="${bundles.dest}/commons-lang.jar"/>
    </target>

    <!--BUNDLE-HTTPUTIL -->
    <target name="bundle-httputil">
        <!-- Create the httputil.jar-->
        <jar compress="false" destfile="${bundles.dest}/httputil.jar"
            manifest="${src}/net/java/sip/communicator/service/httputil/httputil.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/httputil"
                prefix="net/java/sip/communicator/service/httputil"/>
        </jar>

        <copy file="${lib.noinst}/httpclient-osgi-4.2.3.jar"
            tofile="${bundles.dest}/httpclient.jar"/>
        <copy file="${lib.noinst}/httpcore-osgi-4.2.3.jar"
            tofile="${bundles.dest}/httpcore.jar"/>
    </target>

    <!-- BUNDLE-NOTIFICATION -->
    <target name="bundle-notification-service">
        <!-- Creates a bundle for the notifications.-->
        <jar compress="false" destfile="${bundles.dest}/notification-service.jar"
            manifest="${src}/net/java/sip/communicator/service/notification/notification.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/notification"
                prefix="net/java/sip/communicator/service/notification"/>
        </jar>
    </target>

    <!-- BUNDLE-NOTIFICATION-HANDLERS -->
    <target name="bundle-notification-handlers">
        <!-- Creates a bundle for the notifications.-->
        <jar compress="false" destfile="${bundles.dest}/notification-handlers.jar"
            manifest="${src}/net/java/sip/communicator/impl/notification/notification.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/notification"
                prefix="net/java/sip/communicator/impl/notification"/>
        </jar>
    </target>

    <!-- BUNDLE-NOTIFICATION-WIRING -->
    <target name="bundle-notification-wiring">
        <!-- Creates a bundle for the notifications.-->
        <jar compress="false" destfile="${bundles.dest}/notification-wiring.jar"
            manifest="${src}/net/java/sip/communicator/plugin/notificationwiring/notificationwiring.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/notificationwiring"
                prefix="net/java/sip/communicator/plugin/notificationwiring"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-WHITEBOARD -->
    <target name="bundle-plugin-whiteboard">
    <!-- Creates a bundle for the Whiteboard plugin.-->
        <jar compress="false" destfile="${bundles.dest}/whiteboard.jar"
            manifest="${src}/net/java/sip/communicator/plugin/whiteboard/whiteboard.manifest.mf">
                   <zipfileset dir="${dest}/net/java/sip/communicator/plugin/whiteboard"
                       prefix="net/java/sip/communicator/plugin/whiteboard"/>
       </jar>
   </target>

    <!-- BUNDLE-CONTACT-EVENT-HANDLER -->
    <target name="bundle-contacteventhandler">
    <!-- Creates a bundle for the ContactEventHandler service.-->
        <jar compress="false" destfile="${bundles.dest}/contacteventhandler.jar"
           manifest="${src}/net/java/sip/communicator/service/contacteventhandler/contact.event.handler.manifest.mf">
           <zipfileset dir="${dest}/net/java/sip/communicator/service/contacteventhandler"
               prefix="net/java/sip/communicator/service/contacteventhandler"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-CONTACTINFO -->
    <target name="bundle-plugin-contactinfo">
        <!-- Creates a bundle for the plugin Contact Info.-->
        <jar compress="false" destfile="${bundles.dest}/contactinfo.jar"
            manifest="${src}/net/java/sip/communicator/plugin/contactinfo/contactinfo.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/contactinfo"
                prefix="net/java/sip/communicator/plugin/contactinfo"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-CHATALERTER -->
    <target name="bundle-plugin-chatalerter">
        <!-- Creates a bundle for the plugin Chat Alerter.-->
        <jar compress="false" destfile="${bundles.dest}/chatalerter.jar"
            manifest="${src}/net/java/sip/communicator/plugin/chatalerter/chatalerter.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/chatalerter"
                prefix="net/java/sip/communicator/plugin/chatalerter"/>
            <zipfileset src="${lib.noinst}/jdic_misc.jar" prefix=""/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-ACCOUNTINFO -->
    <target name="bundle-plugin-accountinfo">
        <jar compress="false" destfile="${bundles.dest}/accountinfo.jar"
            manifest="${src}/net/java/sip/communicator/plugin/accountinfo/accountinfo.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/accountinfo"
                prefix="net/java/sip/communicator/plugin/accountinfo"/>
            <zipfileset src="${lib.noinst}/jcalendar-1.4.jar"/>
        </jar>
    </target>

    <!-- BUNDLE-DICT -->
    <target name="bundle-dict">
        <jar compress="false" destfile="${bundles.dest}/protocol-dict.jar"
             manifest="${src}/net/java/sip/communicator/impl/protocol/dict/dict.provider.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/protocol/dict"
                    prefix="net/java/sip/communicator/impl/protocol/dict"/>
            <zipfileset src="${lib.noinst}/dict4j.jar" prefix=""/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-DICTACCREGWIZZ -->
    <target name="bundle-plugin-dictaccregwizz">
        <!-- Creates a bundle for the plugin Dict Account Registration
             Wizard.-->
       <jar compress="false" destfile="${bundles.dest}/dictaccregwizz.jar"
            manifest="${src}/net/java/sip/communicator/plugin/dictaccregwizz/dictaccregwizz.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/dictaccregwizz"
                prefix="net/java/sip/communicator/plugin/dictaccregwizz"/>
        </jar>
    </target>

    <!-- BUNDLE-UPDATE-->
    <target name="bundle-update">
        <!-- Creates a bundle containing the provisioning discovery service.-->
        <jar compress="false" destfile="${bundles.dest}/updateservice.jar"
            manifest="${src}/net/java/sip/communicator/service/update/update.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/update"
                prefix="net/java/sip/communicator/service/update"/>
        </jar>
    </target>

    <!--BUNDLE-PLUGIN-WIN-UPDATE-->
    <target name="bundle-plugin-update">
        <jar compress="false" destfile="${bundles.dest}/update.jar"
            manifest="${src}/net/java/sip/communicator/plugin/update/update.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/update"
                prefix="net/java/sip/communicator/plugin/update" />
        </jar>
    </target>

   <!--BUNDLE-PLUGIN-PROFILER-->
   <target name="bundle-plugin-profiler4j">
        <jar compress="false" destfile="${bundles.dest}/profiler4j.jar"
            manifest="${src}/net/java/sip/communicator/plugin/profiler4j/profiler4j.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/profiler4j"
                prefix="net/java/sip/communicator/plugin/profiler4j" />
            <zipfileset src="${lib.noinst}/profiler4j-1.0-beta3-SC.jar"
                prefix=""/>
            <zipfileset src="${lib.noinst}/jdom.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/jcommon-1.0.0.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/jfreechart-1.0.1.jar" prefix=""/>
            <fileset file="${lib.noinst}/p4j-exclusions.txt"/>
        </jar>
    </target>

    <!--BUNDLE-SimpleAccRegPlugin-->
    <target name="bundle-plugin-simpleaccreg">
        <jar compress="false" destfile="${bundles.dest}/simpleaccreg.jar"
            manifest="${src}/net/java/sip/communicator/plugin/simpleaccreg/simpleaccreg.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/simpleaccreg"
                prefix="net/java/sip/communicator/plugin/simpleaccreg" />
        </jar>
    </target>

    <!--BUNDLE-General Config-->
    <target name="bundle-plugin-generalconfig">
        <jar compress="false" destfile="${bundles.dest}/generalconfig.jar"
            manifest="${src}/net/java/sip/communicator/plugin/generalconfig/generalconfig.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/generalconfig"
                prefix="net/java/sip/communicator/plugin/generalconfig" />
        </jar>
    </target>

    <!--BUNDLE-Keybindings-->
    <target name="bundle-keybindings">
        <jar compress="false" destfile="${bundles.dest}/keybindings.jar"
            manifest="${src}/net/java/sip/communicator/impl/keybindings/keybindings.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/keybindings"
                prefix="net/java/sip/communicator/service/keybindings"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/keybindings"
                prefix="net/java/sip/communicator/impl/keybindings"/>
            <zipfileset dir="${resources}/config/defaultkeybindings"
                prefix="resources/config/defaultkeybindings"/>
        </jar>
    </target>

    <!--BUNDLE-PLUGIN-KeybindingChooser-->
    <target name="bundle-plugin-keybindingChooser">
        <jar compress="false" destfile="${bundles.dest}/keybindingChooser.jar"
            manifest="${src}/net/java/sip/communicator/plugin/keybindingchooser/keybindingChooser.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/keybindingchooser"
                prefix="net/java/sip/communicator/plugin/keybindingchooser"/>
            <zipfileset dir="${resources}/images/plugin/keybindingchooser"
                prefix="resources/images/plugin/keybindingchooser"/>
        </jar>
    </target>

    <!--BUNDLE-RESOURCES-SKINPACK-->
    <target name="bundle-resources-skinpack">
        <!-- Copy manifest for skinresourcepack. -->
        <copy file="${src}/net/java/sip/communicator/plugin/skinresourcepack/skinresourcepack.manifest.mf"
              tofile="${dest}/net/java/sip/communicator/plugin/skinresourcepack/skinresourcepack.manifest.mf"/>
        <!-- Copy skinresourcepack folder. -->
        <copy todir="${resources}/skinresourcepack">
            <fileset dir="${dest}/net/java/sip/communicator/plugin/skinresourcepack">

            </fileset>
        </copy>
    </target>

    <!--BUNDLE-DEFAULT-RESOURCES-->
    <target name="bundle-resources-defaultpack" depends="bundle-resources-skinpack">
        <!-- Copy the default resources to english one, as our defualt
            language is English and without the resource we cannot excplictly set it.-->
        <copy file="${sc.basedir}/resources/languages/resources.properties"
              tofile="${resources}/languages/resources_en.properties"/>
        <!-- Creates a bundle for the default resource pack."-->
        <jar
            compress="false" destfile="${bundles.dest}/defaultresources.jar"
            manifest="${src}/net/java/sip/communicator/plugin/defaultresourcepack/defaultresourcepack.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/defaultresourcepack"
                    prefix="net/java/sip/communicator/plugin/defaultresourcepack"/>

            <zipfileset dir="${resources}/colors"
                    prefix="resources/colors"/>
            <zipfileset dir="${resources}/config"
                    prefix="resources/config" excludes="**/spellcheck/**"/>
            <zipfileset dir="${resources}/images"
                    prefix="resources/images" excludes="**/*.svg"/>
            <zipfileset dir="${resources}/languages"
                    prefix="resources/languages"/>
            <zipfileset dir="${resources}/sounds"
                    prefix="resources/sounds"/>
            <zipfileset dir="${resources}/styles"
                    prefix="resources/styles"/>

            <!-- Include skinresourcepack folder. -->
            <zipfileset dir="${resources}/skinresourcepack"
                    prefix="resources/skinresourcepack"/>
        </jar>
        <!-- Creates a bundle for the default resource pack classes.
            Used in android.-->
        <jar
            compress="false" destfile="${bundles.dest.android}/defaultresources.jar">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/defaultresourcepack"
                    prefix="net/java/sip/communicator/plugin/defaultresourcepack"/>
        </jar>
    </target>

     <!--BUNDLE-RESOURCE-MANAGER-->
    <target name="bundle-resource-manager">
        <!-- Creates a bundle for the Resource Management Service Impl."-->
        <jar
            compress="false" destfile="${bundles.dest}/resourcemanager.jar"
            manifest="${src}/net/java/sip/communicator/impl/resources/resourcemanagement.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/resources"
                prefix="net/java/sip/communicator/service/resources"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/resources"
                prefix="net/java/sip/communicator/impl/resources"/>
        </jar>
    </target>

    <!-- BUNDLE-NOTIFICATION-CONFIG -->
    <target name="bundle-notification-config">
        <!-- Creates a bundle for the notifications.-->
        <jar compress="false" destfile="${bundles.dest}/notificationconfig.jar"
            manifest="${src}/net/java/sip/communicator/plugin/notificationconfiguration/notificationconfiguration.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/notificationconfiguration"
                prefix="net/java/sip/communicator/plugin/notificationconfiguration"/>
        </jar>
    </target>

    <!-- BUNDLE-JFontChooser -->
    <target name="bundle-jfontchooserlib">
        <!-- Creates a bundle containing the jfontchooser lib.-->
        <jar compress="false" destfile="${bundles.dest}/jfontchooserlib.jar"
            manifest="${lib.noinst}/jfontchooser.manifest.mf">
            <zipfileset src="${lib.noinst}/jfontchooser-1.0.5.jar" prefix=""/>
        </jar>
    </target>

    <!-- BUNDLE Arg Delegation Service -->
    <target name="bundle-argdelegation-service">
        <!-- Creates a bundle for the notifications.-->
        <jar compress="false" destfile="${bundles.dest}/argdelegation-service.jar"
            manifest="${src}/net/java/sip/communicator/service/argdelegation/argdelegation.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/argdelegation/"
                prefix="net/java/sip/communicator/service/argdelegation"/>
        </jar>
    </target>

    <!-- BUNDLE Arg Delegation Implementation-->
    <target name="bundle-argdelegation">
        <!-- Creates a bundle for the notifications.-->
        <jar compress="false" destfile="${bundles.dest}/argdelegation.jar"
            manifest="${src}/net/java/sip/communicator/impl/argdelegation/argdelegation.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/argdelegation/"
                prefix="net/java/sip/communicator/impl/argdelegation/"/>
        </jar>
    </target>

    <!--BUNDLE-ZRTP4J -->
    <target name="bundle-zrtp4j">
        <jar compress="true" destfile="${bundles.dest}/zrtp4j.jar"
            filesetmanifest="merge">

            <zipfileset src="${lib.noinst}/zrtp4j-light.jar" prefix=""/>
            <manifest>
                <attribute name="Export-Package" value="
                    gnu.java.zrtp,
                    gnu.java.zrtp.packets,
                    gnu.java.zrtp.utils,
                    gnu.java.zrtp.zidfile"/>
                <attribute name="Import-Package" value="org.bouncycastle.asn1,
                    org.bouncycastle.asn1.nist,
                    org.bouncycastle.asn1.sec,
                    org.bouncycastle.asn1.x9,
                    org.bouncycastle.crypto,
                    org.bouncycastle.crypto.agreement,
                    org.bouncycastle.crypto.digests,
                    org.bouncycastle.crypto.engines,
                    org.bouncycastle.crypto.generators,
                    org.bouncycastle.crypto.macs,
                    org.bouncycastle.crypto.modes,
                    org.bouncycastle.crypto.params,
                    org.bouncycastle.crypto.prng,
                    org.jitsi.bccontrib.digests,
                    org.jitsi.bccontrib.engines,
                    org.jitsi.bccontrib.macs,
                    org.jitsi.bccontrib.params,
                    org.jitsi.bccontrib.prng,
                    org.bouncycastle.math.ec,
                    org.bouncycastle.util.encoders,
                    org.bouncycastle.util"/>
                <attribute name="Bundle-Name" value="ZRTP4J"/>
                <attribute name="Bundle-Description" value="ZRTP for Java library."/>
                <attribute name="Bundle-Version" value="1.4.5"/>
                <attribute name="Bundle-SymbolicName" value="gnu.java.zrtp4j"/>
            </manifest>
        </jar>
    </target>

    <!--BUNDLE-SDES4J -->
    <target name="bundle-sdes4j">
        <jar compress="true" destfile="${bundles.dest}/sdes4j.jar"
            filesetmanifest="merge">

            <zipfileset src="${lib.noinst}/sdes4j.jar" prefix=""/>
            <manifest>
                <attribute name="System-Bundle" value="yes"/>
            </manifest>
        </jar>
    </target>

    <!--BUNDLE-JSON -->
    <target name="bundle-json">
        <jar compress="true" destfile="${bundles.dest}/json.jar"
            filesetmanifest="merge">

            <zipfileset src="${lib.noinst}/json-simple-1.1.1.jar" prefix=""/>
            <manifest>
                <attribute name="System-Bundle" value="yes"/>
            </manifest>
        </jar>
    </target>

    <!--BUNDLE-FILEHISTORY-->
    <target name="bundle-filehistory">
        <jar compress="false" destfile="${bundles.dest}/filehistory.jar"
            manifest="${src}/net/java/sip/communicator/impl/filehistory/filehistory.manifest.mf">

            <zipfileset dir="${dest}/net/java/sip/communicator/service/filehistory"
                prefix="net/java/sip/communicator/service/filehistory"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/filehistory"
                prefix="net/java/sip/communicator/impl/filehistory" />
        </jar>
    </target>
    <!--BUNDLE-METAHISTORY-->
    <target name="bundle-metahistory">
        <jar compress="false" destfile="${bundles.dest}/metahistory.jar"
            manifest="${src}/net/java/sip/communicator/impl/metahistory/metahistory.manifest.mf">

            <zipfileset dir="${dest}/net/java/sip/communicator/service/metahistory"
                prefix="net/java/sip/communicator/service/metahistory"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/metahistory"
                prefix="net/java/sip/communicator/impl/metahistory" />
        </jar>
    </target>

    <!--BUNDLE-BOUNCYCASTLE -->
    <target name="bundle-bouncycastle">
        <copy file="${lib.noinst}/bcprov-jdk15on-150.jar" tofile="${bundles.dest}/bouncycastle.jar"/>
        <copy file="${lib.noinst}/bccontrib-1.0-SNAPSHOT.jar" tofile="${bundles.dest}/bccontrib.jar"/>
    </target>

    <!--BUNDLE-PLUGIN-OTR -->
    <target name="bundle-plugin-otr">
        <jar compress="false" destfile="${bundles.dest}/otr.jar" manifest="${src}/net/java/sip/communicator/plugin/otr/otr.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/otr"
                prefix="net/java/sip/communicator/plugin/otr"/>
            <zipfileset src="${lib.noinst}/otr4j.jar"/>
        </jar>
    </target>
    <!--BUNDLE-METAHISTORY-SLICK-->
    <target name="bundle-metahistory-slick">
        <jar compress="false" destfile="${bundles.dest}/metahistory-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/metahistory/metahistory.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/metahistory"
                prefix="net/java/sip/communicator/slick/metahistory"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-GLOBALPROXYCONFIG -->
    <target name="bundle-plugin-globalproxyconfig">
        <!-- Creates a bundle for the global proxy configuration plugin.-->
        <jar compress="false" destfile="${bundles.dest}/globalproxyconfig.jar"
            manifest="${src}/net/java/sip/communicator/plugin/globalproxyconfig/globalproxyconfig.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/globalproxyconfig"
                prefix="net/java/sip/communicator/plugin/globalproxyconfig"/>
        </jar>
    </target>

    <!-- BUNDLE-PROTOCOL -->
    <target name="bundle-contactsource">
        <!-- Creates a bundle containing the contact source interfaces.-->
        <jar compress="false" destfile="${bundles.dest}/contactsource.jar"
            manifest="${src}/net/java/sip/communicator/service/contactsource/contactsource.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/contactsource"
                prefix="net/java/sip/communicator/service/contactsource"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-RECONNECT -->
    <target name="bundle-plugin-reconnect">
        <!-- Creates a bundle for the reconnect plugin.-->
        <jar compress="false" destfile="${bundles.dest}/reconnectplugin.jar"
            manifest="${src}/net/java/sip/communicator/plugin/reconnectplugin/reconnectplugin.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/reconnectplugin"
                prefix="net/java/sip/communicator/plugin/reconnectplugin"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-SECURITYCONFIG -->
    <target name="bundle-plugin-securityconfig">
        <!-- Creates a bundle for the reconnect plugin.-->
        <jar compress="false" destfile="${bundles.dest}/securityconfig.jar"
            manifest="${src}/net/java/sip/communicator/plugin/securityconfig/securityconfig.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/securityconfig"
                prefix="net/java/sip/communicator/plugin/securityconfig"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-ADVANCEDCONFIG -->
    <target name="bundle-plugin-advancedconfig">
        <!-- Creates a bundle for the reconnect plugin.-->
        <jar compress="false" destfile="${bundles.dest}/advancedconfig.jar"
            manifest="${src}/net/java/sip/communicator/plugin/advancedconfig/advancedconfig.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/advancedconfig"
                prefix="net/java/sip/communicator/plugin/advancedconfig"/>
        </jar>
    </target>

    <!-- BUNDLE-NIMBUZZAVATAR -->
    <target name="bundle-plugin-nimbuzzavatar">
        <jar compress="false" destfile="${bundles.dest}/plugin-nimbuzzavatars.jar"
            manifest="${src}/net/java/sip/communicator/plugin/nimbuzzavatars/nimbuzzavatars.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/nimbuzzavatars"
                prefix="net/java/sip/communicator/plugin/nimbuzzavatars" />
        </jar>
    </target>

    <!-- BUNDLE-CUSTOM-AVATAR -->
    <target name="bundle-custom-avatar">
        <jar compress="false" destfile="${bundles.dest}/customavatar-service.jar"
            manifest="${src}/net/java/sip/communicator/service/customavatar/customavatar.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/customavatar"
                prefix="net/java/sip/communicator/service/customavatar" />
        </jar>
    </target>

    <!-- BUNDLE-REPLACEMENT -->
    <target name="bundle-replacement">
        <!-- Creates a bundle containing the replacement service.-->
        <jar compress="false" destfile="${bundles.dest}/replacement.jar"
            manifest="${src}/net/java/sip/communicator/service/replacement/replacement.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/replacement"
                prefix="net/java/sip/communicator/service/replacement"/>
        </jar>
    </target>

    <!-- BUNDLE-YOUTUBE -->
    <target name="bundle-youtube">
       <jar compress="false" destfile="${bundles.dest}/replacement-youtube.jar"
            manifest="${src}/net/java/sip/communicator/impl/replacement/youtube/youtube.source.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/replacement/youtube"
                   prefix="net/java/sip/communicator/impl/replacement/youtube"/>
       </jar>
    </target>

    <!-- BUNDLE-DAILYMOTION -->
    <target name="bundle-dailymotion">
        <jar compress="false" destfile="${bundles.dest}/replacement-dailymotion.jar"
             manifest="${src}/net/java/sip/communicator/impl/replacement/dailymotion/dailymotion.source.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/replacement/dailymotion"
                    prefix="net/java/sip/communicator/impl/replacement/dailymotion"/>
        </jar>
    </target>

    <!-- BUNDLE-SMILEY -->
    <target name="bundle-smiley">
        <jar compress="false" destfile="${bundles.dest}/replacement-smiley.jar"
             manifest="${src}/net/java/sip/communicator/impl/replacement/smiley/smiley.source.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/replacement/smiley"
                    prefix="net/java/sip/communicator/impl/replacement/smiley"/>
        </jar>
    </target>

    <!-- BUNDLE-VIMEO -->
    <target name="bundle-vimeo">
        <jar compress="false" destfile="${bundles.dest}/replacement-vimeo.jar"
             manifest="${src}/net/java/sip/communicator/impl/replacement/vimeo/vimeo.source.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/replacement/vimeo"
                    prefix="net/java/sip/communicator/impl/replacement/vimeo"/>
        </jar>
    </target>

     <!-- BUNDLE-VBOX7 -->
    <target name="bundle-vbox7">
        <jar compress="false" destfile="${bundles.dest}/replacement-vbox7.jar"
             manifest="${src}/net/java/sip/communicator/impl/replacement/vbox7/vbox7.source.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/replacement/vbox7"
                    prefix="net/java/sip/communicator/impl/replacement/vbox7"/>
        </jar>
    </target>

    <!-- BUNDLE-METACAFE -->
    <target name="bundle-metacafe">
        <jar compress="false" destfile="${bundles.dest}/replacement-metacafe.jar"
             manifest="${src}/net/java/sip/communicator/impl/replacement/metacafe/metacafe.source.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/replacement/metacafe"
                    prefix="net/java/sip/communicator/impl/replacement/metacafe"/>
        </jar>
    </target>

    <!-- BUNDLE-FLICKR -->
    <target name="bundle-flickr">
        <jar compress="false" destfile="${bundles.dest}/replacement-flickr.jar"
             manifest="${src}/net/java/sip/communicator/impl/replacement/flickr/flickr.source.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/replacement/flickr"
                    prefix="net/java/sip/communicator/impl/replacement/flickr"/>
        </jar>
    </target>

    <!-- BUNDLE-HULU -->
    <target name="bundle-hulu">
         <jar compress="false" destfile="${bundles.dest}/replacement-hulu.jar"
              manifest="${src}/net/java/sip/communicator/impl/replacement/hulu/hulu.source.manifest.mf">
             <zipfileset dir="${dest}/net/java/sip/communicator/impl/replacement/hulu"
                     prefix="net/java/sip/communicator/impl/replacement/hulu"/>
         </jar>
    </target>

    <!-- BUNDLE-TWITPIC -->
    <target name="bundle-twitpic">
        <jar compress="false" destfile="${bundles.dest}/replacement-twitpic.jar"
             manifest="${src}/net/java/sip/communicator/impl/replacement/twitpic/twitpic.source.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/replacement/twitpic"
                    prefix="net/java/sip/communicator/impl/replacement/twitpic"/>
        </jar>
    </target>

    <!-- BUNDLE-DIRECTIMAGE -->
    <target name="bundle-directimage">
        <jar compress="false" destfile="${bundles.dest}/replacement-directimage.jar"
             manifest="${src}/net/java/sip/communicator/impl/replacement/directimage/directimage.source.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/replacement/directimage"
                    prefix="net/java/sip/communicator/impl/replacement/directimage"/>
        </jar>
    </target>

    <!-- BUNDLE-BLIPTV -->
    <target name="bundle-bliptv">
         <jar compress="false" destfile="${bundles.dest}/replacement-bliptv.jar"
              manifest="${src}/net/java/sip/communicator/impl/replacement/bliptv/bliptv.source.manifest.mf">
             <zipfileset dir="${dest}/net/java/sip/communicator/impl/replacement/bliptv"
                     prefix="net/java/sip/communicator/impl/replacement/bliptv"/>
         </jar>
    </target>

     <!-- BUNDLE-VIDDLER -->
    <target name="bundle-viddler">
        <jar compress="false" destfile="${bundles.dest}/replacement-viddler.jar"
             manifest="${src}/net/java/sip/communicator/impl/replacement/viddler/viddler.source.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/replacement/viddler"
                    prefix="net/java/sip/communicator/impl/replacement/viddler"/>
        </jar>
    </target>

    <!--BUNDLE-Chat Config-->
    <target name="bundle-plugin-chatconfig">
        <jar compress="false" destfile="${bundles.dest}/chatconfig.jar"
            manifest="${src}/net/java/sip/communicator/plugin/chatconfig/chatconfig.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/chatconfig"
                prefix="net/java/sip/communicator/plugin/chatconfig" />
        </jar>
    </target>

    <!--BUNDLE-PLUGIN-SpellChecker-->
    <target name="bundle-plugin-spellcheck">
        <jar compress="false" destfile="${bundles.dest}/spellChecker.jar"
            manifest="${src}/net/java/sip/communicator/plugin/spellcheck/spellCheck.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/spellcheck"
                prefix="net/java/sip/communicator/plugin/spellcheck"/>
            <zipfileset dir="${resources}/config/spellcheck"
                prefix="resources/config/spellcheck"/>
            <zipfileset src="${lib.noinst}/jmyspell-core.jar" prefix=""/>
        </jar>
    </target>

    <!-- BUNDLE-PROVDISC-->
    <target name="bundle-provdisc">
        <!-- Creates a bundle containing the provisioning discovery service.-->
        <jar compress="false" destfile="${bundles.dest}/provdisc.jar"
            manifest="${src}/net/java/sip/communicator/service/provdisc/provdisc.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/provdisc"
                prefix="net/java/sip/communicator/service/provdisc"/>
        </jar>
    </target>

    <!--BUNDLE-PROVDISC-DHCP -->
    <target name="bundle-provdisc-dhcp">
        <jar compress="false" destfile="${bundles.dest}/provdisc-dhcp.jar"
            manifest="${src}/net/java/sip/communicator/impl/provdisc/dhcp/dhcp.provdisc.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/provdisc/dhcp"
                prefix="net/java/sip/communicator/impl/provdisc/dhcp" />
            <zipfileset src="${lib.noinst}/dhcp4java-1.00.jar"/>
        </jar>
    </target>

    <!--BUNDLE-PROVDISC-MDNS -->
    <target name="bundle-provdisc-mdns">
        <jar compress="false" destfile="${bundles.dest}/provdisc-mdns.jar"
            manifest="${src}/net/java/sip/communicator/impl/provdisc/mdns/mdns.provdisc.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/provdisc/mdns"
                prefix="net/java/sip/communicator/impl/provdisc/mdns" />
        </jar>
    </target>

    <!--BUNDLE-PROVISIONING -->
    <target name="bundle-provisioning">
        <jar compress="false" destfile="${bundles.dest}/provisioning.jar"
            manifest="${src}/net/java/sip/communicator/plugin/provisioning/provisioning.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/provisioning"
                prefix="net/java/sip/communicator/plugin/provisioning" />
            <zipfileset dir="${dest}/net/java/sip/communicator/service/provisioning"
                prefix="net/java/sip/communicator/service/provisioning" />
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-ADDRBOOK -->
    <target name="bundle-addrbook">
        <!-- Creates a bundle which provides support for the OS-specific Address Book. -->
        <jar compress="false" destfile="${bundles.dest}/addrbook.jar"
            manifest="${src}/net/java/sip/communicator/plugin/addrbook/addrbook.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/addrbook"
                prefix="net/java/sip/communicator/plugin/addrbook" />
            <zipfileset dir="${dest}/net/java/sip/communicator/service/calendar"
                prefix="net/java/sip/communicator/service/calendar" />
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-THUNDERBIRD -->
    <target name="bundle-thunderbird">
        <!-- Creates a bundle which provides support for the thunderbird Address Book. -->
        <jar compress="false" destfile="${bundles.dest}/thunderbook.jar"
            manifest="${src}/net/java/sip/communicator/plugin/thunderbird/thunderbird.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/thunderbird"
                prefix="net/java/sip/communicator/plugin/thunderbird" />
        </jar>
        <copy file="${lib.noinst}/jmork-1.0.5-SNAPSHOT.jar" tofile="${bundles.dest}/jmork.jar"/>
    </target>

    <target name="bundle-certificate">
        <jar compress="false" destfile="${bundles.dest}/certificate.jar"
            manifest="${src}/net/java/sip/communicator/impl/certificate/certificate.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/certificate"
                prefix="net/java/sip/communicator/service/certificate" />
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/certificate"
                prefix="net/java/sip/communicator/impl/certificate" />
        </jar>
    </target>


    <target name="bundle-packetlogging">
        <jar compress="false" destfile="${bundles.dest}/packetlogging.jar"
            manifest="${src}/net/java/sip/communicator/impl/packetlogging/packetlogging.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/packetlogging"
                prefix="net/java/sip/communicator/impl/packetlogging" />
        </jar>
    </target>
    <target name="bundle-plugin-loggingutils">
        <jar compress="false" destfile="${bundles.dest}/plugin-loggingutils.jar"
            manifest="${src}/net/java/sip/communicator/plugin/loggingutils/loggingutils.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/loggingutils"
                prefix="net/java/sip/communicator/plugin/loggingutils" />
        </jar>
    </target>

    <target name="bundle-plugin-ldap">
        <jar compress="false" destfile="${bundles.dest}/plugin-ldap.jar"
            manifest="${src}/net/java/sip/communicator/plugin/ldap/ldap.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/ldap"
            prefix="net/java/sip/communicator/plugin/ldap"/>
        </jar>
    </target>

    <target name="bundle-systemactivitynotifications">
        <jar compress="false" destfile="${bundles.dest}/sysactivitynotifications.jar"
            manifest="${src}/net/java/sip/communicator/impl/sysactivity/sysactivity.impl.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/sysactivity"
                prefix="net/java/sip/communicator/impl/sysactivity" />
            <zipfileset dir="${dest}/net/java/sip/communicator/service/sysactivity"
                prefix="net/java/sip/communicator/service/sysactivity"/>
            <zipfileset src="${lib.noinst}/libdbus-java-2.7.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/unix-0.5.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/hexdump-0.2.jar" prefix=""/>
        </jar>
    </target>

    <target name="bundle-plugin-contactsourceconfig">
        <jar compress="false" destfile="${bundles.dest}/plugin-contactsourceconfig.jar"
            manifest="${src}/net/java/sip/communicator/plugin/contactsourceconfig/contactsourceconfig.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/contactsourceconfig"
                prefix="net/java/sip/communicator/plugin/contactsourceconfig"/>
        </jar>
    </target>

    <target name="bundle-plugin-certconfig">
        <jar compress="false" destfile="${bundles.dest}/plugin-certconfig.jar"
            manifest="${src}/net/java/sip/communicator/plugin/certconfig/certconfig.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/certconfig"
                prefix="net/java/sip/communicator/plugin/certconfig" />
        </jar>
    </target>

    <target name="bundle-globalshortcut">
        <jar compress="false" destfile="${bundles.dest}/globalshortcut.jar"
            manifest="${src}/net/java/sip/communicator/impl/globalshortcut/globalshortcut.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/globalshortcut"
                prefix="net/java/sip/communicator/impl/globalshortcut" />
            <zipfileset dir="${dest}/net/java/sip/communicator/service/globalshortcut"
                prefix="net/java/sip/communicator/service/globalshortcut"/>
        </jar>
    </target>

    <target name="bundle-plugin-msofficecomm">
        <jar compress="false" destfile="${bundles.dest}/plugin-msofficecomm.jar"
                manifest="${src}/net/java/sip/communicator/plugin/msofficecomm/msofficecomm.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/msofficecomm"
                    prefix="net/java/sip/communicator/plugin/msofficecomm" />
        </jar>
    </target>

    <!-- BUNDLE-CUSTOM-CONTACT-ACTIONS -->
    <target name="bundle-customcontactactions">
        <!-- Creates a bundle containing the contact source interfaces.-->
        <jar compress="false" destfile="${bundles.dest}/customcontactactions.jar"
            manifest="${src}/net/java/sip/communicator/service/customcontactactions/customcontactactions.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/customcontactactions"
                prefix="net/java/sip/communicator/service/customcontactactions"/>
        </jar>
    </target>
	
    <!-- BUNDLE-PHONE-NUMBER-CONTACT-SOURCE -->
    <target name="bundle-phonenumbercontactsource">
        <!-- Creates a bundle containing the contact source interfaces.-->
        <jar compress="false" destfile="${bundles.dest}/phonenumbercontactsource.jar"
            manifest="${src}/net/java/sip/communicator/plugin/phonenumbercontactsource/phonenumbercontactsource.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/phonenumbercontactsource"
                prefix="net/java/sip/communicator/plugin/phonenumbercontactsource"/>
        </jar>
    </target>

	<!-- BUNDLE-PHONE-NUMBER-CONTACT-SOURCE -->
	<target name="bundle-usersearch">
	    <!-- Creates a bundle containing the contact source interfaces.-->
	    <jar compress="false" destfile="${bundles.dest}/usersearch.jar"
	         manifest="${src}/net/java/sip/communicator/plugin/usersearch/usersearch.manifest.mf">
	         <zipfileset dir="${dest}/net/java/sip/communicator/plugin/usersearch"
	            prefix="net/java/sip/communicator/plugin/usersearch"/>
	    </jar>
	</target>
    <!-- BUNDLE-PHONE-NUMBER-CONTACT-SOURCE -->
    <target name="bundle-demuxcontactsource">
        <!-- Creates a bundle containing the contact source interfaces.-->
        <jar compress="false" destfile="${bundles.dest}/demuxcontactsource.jar"
            manifest="${src}/net/java/sip/communicator/plugin/demuxcontactsource/demuxcontactsource.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/demuxcontactsource"
                prefix="net/java/sip/communicator/plugin/demuxcontactsource"/>
        </jar>
    </target>
	
	<!-- BUNDLE-CHAT-ROOM-CONTACT-SOURCE -->
    <target name="bundle-muc">
        <!-- Creates a bundle containing the contact source interfaces.-->
        <jar compress="false" destfile="${bundles.dest}/muc.jar"
            manifest="${src}/net/java/sip/communicator/impl/muc/muc.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/muc"
                prefix="net/java/sip/communicator/impl/muc"/>
        	<zipfileset dir="${dest}/net/java/sip/communicator/service/muc"
        	                prefix="net/java/sip/communicator/service/muc" />
        </jar>
    </target>

     <!-- BUNDLE-SWING-UTIL -->
    <target name="bundle-desktoputil">
        <!-- Creates a bundle containing the swing utility packages.-->
        <jar compress="false" destfile="${bundles.dest}/desktoputil.jar"
            manifest="${src}/net/java/sip/communicator/plugin/desktoputil/desktoputil.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/desktoputil"
                prefix="net/java/sip/communicator/plugin/desktoputil">
                <exclude name="dns/**"/>
            </zipfileset>
            <zipfileset src="${lib.noinst}/laf-widget.jar" prefix=""/>
        </jar>
    </target>

    <!--BUNDLE-GLOBALDISPLAYDETAILS-->
    <target name="bundle-globaldisplaydetails">
        <jar compress="false" destfile="${bundles.dest}/globaldisplaydetails.jar"
            manifest="${src}/net/java/sip/communicator/impl/globaldisplaydetails/globaldisplaydetails.manifest.mf">

            <zipfileset dir="${dest}/net/java/sip/communicator/service/globaldisplaydetails"
                prefix="net/java/sip/communicator/service/globaldisplaydetails"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/globaldisplaydetails"
                prefix="net/java/sip/communicator/impl/globaldisplaydetails" />
        </jar>
    </target>

    <!--BUNDLE-PLUGIN-PROPERTIESEDITOR-->
    <target name="bundle-plugin-propertieseditor">
        <!-- Creates a bundle for the plugin Configuration Properties Editor.-->
        <jar compress="false" destfile="${bundles.dest}/propertieseditor.jar"
            manifest="${src}/net/java/sip/communicator/plugin/propertieseditor/propertieseditor.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/propertieseditor"
                prefix="net/java/sip/communicator/plugin/propertieseditor"/>
        </jar>
    </target>
</project>
<?xml version="1.0"?>
<!--
   Installation procedure.
   The install scripts are located inside the resources/install directory . The
   files are separated in subdirectories according to distribution - generic,
   linux, windows, macosx.

    1. For building any of the distributions you must fill in the
    path to the installation of IzPack. For instructions on how to install
    izPack please referer to http://www.izforge.com/izpack/. And uncomment the
    taskdef of izpack in this file.

    2. When building the linux installation package you must set the
    linux.jre.path variable to point to a location containing an extracted jre
    so that it could be bundled inside the installation package.

    3. When building the windows installation package you must set the
    windows.jre.file variable. This is the path to an installation file of a
    jre (online or offline one). The 7zip software package
    (http://www.7-zip.org) must also be installed.

    4. When changing the application version things you must do:
    - generic
        - there is app-version variable in the izpack installer xml
    - linux
        - there is app-version variable in the izpack installer xml
    - windows
        - there is app-version variable in the izpack installer xml
        - you must change the installer jar name in the launcher.ini file
-->
<project name="jitsi-installer" basedir="." default="ant-usage">

    <import file="../../build.xml"/>

    <!-- Load installer properties -->
    <!-- USERS NEED TO UPDATE THIS FILE -->
    <property file="${inst.resrc}/installers.properties"/>

    <target name="load-properties">
        <!-- load properties on demand here so it can evaluate
        and sip-communicator.version property from property file-->
        <property file="${inst.resrc}/ant-build-config.properties"/>

        <!--
            Provide access to the environment variables via the prefix "env."
            because we will modify at least the PATH where is needed.
        -->
        <property environment="env" />

        <condition property="application.company.name" value="jitsi.org">
            <not>
                <isset property="application.company.name" />
            </not>
        </condition>
    </target>

    <!-- define the izpack task in a separate target so that we don't get an
         error when izpack properties are not set-->
    <target name="define-izpack-task">
        <taskdef name="izpack" classpath="${izpack.dir}/lib/compiler.jar"
                               classname="com.izforge.izpack.ant.IzPackTask"/>
    </target>

    <!-- include ant-contrib tasks-->
    <target name="define-ant-contrib-task">
        <taskdef resource="net/sf/antcontrib/antlib.xml"
            classpath="${inst.resrc}/lib/ant-contrib-1.0b3.jar"/>
    </target>

    <!-- Put here the Windows release directory -->
    <property name="windows.app.dir" value="${sc.basedir}/${release}/windows"/>
    <!-- Put here the Linux release directory -->
    <property name="linux.app.dir" value="${sc.basedir}/${release}/linux"/>
    <!-- Put here the Generic release directory -->
    <property name="generic.app.dir" value="${sc.basedir}/${release}/generic"/>

    <!-- The path to the dpkg-scanpackages tool -->
    <property name="dpkg-scanpackages" value="/usr/bin/dpkg-scanpackages"/>
    <!-- The path to the dpkg-buildpackage tool -->
    <property name="dpkg-buildpackage" value="/usr/bin/dpkg-buildpackage"/>
    <!-- The path to the dh_testdir tool -->
    <property name="dh_testdir" value="/usr/bin/dh_testdir"/>

    <!-- change the 7zip executable corresponding the OS
         7-zip is used to create windows self-extract installer binary
         In order to work 7-zip must be installed and tobe in the path
         For Debian linux use : apt-get install p7zip
         For other go to : http://www.7-zip.org/
    -->
    <condition property="7zip.executable" value="7z">
        <os family="windows"/>
    </condition>
    <condition property="7zip.executable" value="7z">
        <equals arg1="${os.name}" arg2="linux"
                casesensitive="false" trim="true"/>
    </condition>

    <!-- Put here the release directory -->
    <property name="macosx.app.dir" value="${release}/macosx"/>
    <!-- Put here the resource directory -->
    <property name="macosx.resrc.dir" value="${inst.resrc}/macosx"/>

    <!-- The release directory for Debian packages -->
    <property name="debian.dir" value="${release}/debian"/>
    <property name="debian.binary.dir" value="${debian.dir}/binary"/>
    <property name="debian.tmp.dir" value="${debian.dir}/tmp" />
    <!-- Can we build debian packages? -->
    <condition property="dpkg.build.present">
      <and>
        <available file="${dpkg-buildpackage}"/>
        <available file="${dh_testdir}"/>
      </and>
    </condition>
    <!-- Can we deploy debian packages? -->
    <condition property="dpkg.scan.present">
      <available file="${dpkg-scanpackages}"/>
    </condition>

    <!-- default Ant target does nothing except print helpful options -->
    <target name="ant-usage"
            description="simply execute 'ant' to discover the most useful targets.">
        <echo message="Useful ant commands for the Jitsi Build Installer..." />
        <echo message="'ant build-installation-generic' for building generic installator jar" />
        <echo message="'ant build-installation-linux' for building linux instalation file" />
        <echo message="'ant build-installation-wix' for building Windows MSI instalation file using WiX" />
        <echo message="'ant build-installation-wix-64' for building Windows x64 MSI instalation file using WiX" />
    </target>

    <target name="clean-install-generic">
        <delete dir="${generic.app.dir}"/>
        <mkdir dir="${generic.app.dir}"/>
    </target>

    <target name="build-installation-generic"
            depends="clean-install-generic,define-izpack-task,version,load-properties">

        <propertyfile file="${generic.app.dir}/versionupdate.properties"
            comment="Last Build Version">
            <entry  key="last_version" value="${sip-communicator.version}"/>
            <entry  key="download_link"
                    value="${link.download.generic}"/>
        </propertyfile>

        <filter token="VERSION" value="${sip-communicator.version}" />
        <filter token="BUILDDATE" value="${build.date}" />
        <filter token="PKG_NAME" value="${package.name}" />
        <filter token="APP_NAME" value="${application.name}" />
        <filter token="APP_EMAIL" value="${application.email}" />
        <filter token="APP_WEB" value="${application.web}" />
        <filter token="DEST_DIR" value="${release}" />
        <filter token="WelcomeText1" value="${installer.welcome.wtext1}" />
        <filter token="WelcomeText2" value="${installer.welcome.wtext2}" />
        <filter token="WelcomeText3" value="${installer.welcome.wtext3}" />

        <copy
            tofile="${generic.app.dir}/tmp-installer-generic.xml"
            file="${inst.resrc}/generic/installer-generic.xml"
            filtering="yes" />
        <copy
            tofile="${generic.app.dir}/tmp-linux_shortcut_specification.xml"
            file="${inst.resrc}/linux/linux_shortcut_specification.xml"
            filtering="yes" />

        <izpack
               input="${generic.app.dir}/tmp-installer-generic.xml"
               output="${generic.app.dir}/${package.name}-${sip-communicator.version}.jar"
               installerType="standard"
               izPackDir="${izpack.dir}/"
               basedir="${sc.basedir}"/>

        <delete quiet="yes" failonerror="false">
            <fileset dir="${generic.app.dir}">
                <include name="tmp-*"/>
            </fileset>
        </delete>
    </target>

    <target name="clean-install-linux">
        <delete dir="${linux.app.dir}"/>
        <mkdir dir="${linux.app.dir}"/>
        <mkdir dir="${linux.app.dir}/tmp"/>
    </target>

    <target name="build-installation-linux"
            depends="clean-install-linux,define-izpack-task,version,load-properties">

        <propertyfile file="${linux.app.dir}/versionupdate.properties"
            comment="Last Build Version">
            <entry  key="last_version" value="${sip-communicator.version}"/>
            <entry  key="download_link"
                    value="${link.download.linux}"/>
        </propertyfile>

        <filter token="VERSION" value="${sip-communicator.version}" />
        <filter token="BUILDDATE" value="${build.date}" />
        <filter token="PKG_NAME" value="${package.name}" />
        <filter token="APP_NAME" value="${application.name}" />
        <filter token="APP_EMAIL" value="${application.email}" />
        <filter token="APP_WEB" value="${application.web}" />
        <filter token="DEST_DIR" value="${release}" />
        <filter token="WelcomeText1" value="${installer.welcome.wtext1}" />
        <filter token="WelcomeText2" value="${installer.welcome.wtext2}" />
        <filter token="WelcomeText3" value="${installer.welcome.wtext3}" />

        <copy todir="${linux.app.dir}/tmp" filtering="yes" >
            <fileset dir="${inst.resrc}/linux">
                <include name="setup.sh"/>
                <include name="inst_path"/>
            </fileset>
        </copy>
        <!-- copy the jre -->
        <mkdir dir="${linux.app.dir}/tmp/jre" />
        <copy todir="${linux.app.dir}/tmp/jre">
            <fileset dir="${linux.jre.path}">
                <include name="**/*"/>
            </fileset>
        </copy>

        <copy
            tofile="${linux.app.dir}/tmp/tmp-installer-linux.xml"
            file="${inst.resrc}/linux/installer-linux.xml"
            filtering="yes" />
        <copy
            tofile="${linux.app.dir}/tmp-linux_shortcut_specification.xml"
            file="${inst.resrc}/linux/linux_shortcut_specification.xml"
            filtering="yes" />

        <!-- Prepare felix.client.run.properties and put some specific bundles -->
        <copy file="${lib}/felix.client.run.properties"
            tofile="${inst.resrc}/linux/felix.client.run.properties"
            overwrite="true"/>
        <replace file="${inst.resrc}/linux/felix.client.run.properties"
            token="reference:file:sc-bundles/swingnotification.jar \">
            <replacevalue><![CDATA[reference:file:sc-bundles/galagonotification.jar \
 reference:file:sc-bundles/swingnotification.jar \]]></replacevalue>
        </replace>

        <!-- create izpack installer jar file -->
        <izpack input="${linux.app.dir}/tmp/tmp-installer-linux.xml"
                output="${linux.app.dir}/tmp/${package.name}-${sip-communicator.version}-linux.jar"
                installerType="standard"
                basedir="${sc.basedir}"
                izPackDir="${izpack.dir}/"/>

        <!-- Create self extract linux binary-->
        <tar tarfile="${linux.app.dir}/tmp/install.tar"
             basedir="${linux.app.dir}/tmp"/>
        <gzip zipfile="${linux.app.dir}/tmp/install.tar.gz"
              src="${linux.app.dir}/tmp/install.tar"/>
        <concat destfile="${linux.app.dir}/${package.name}-${sip-communicator.version}-linux.bin"
                binary="true">
            <fileset dir="${inst.resrc}/linux/">
                <include name="sfx-header"/>
            </fileset>
            <fileset dir="${linux.app.dir}/tmp">
                <include name="install.tar.gz"/>
            </fileset>
        </concat>
        <chmod file="${linux.app.dir}/${package.name}-${sip-communicator.version}-linux.bin" perm="+x"/>

        <!-- Delete the temp directory-->
        <delete dir="${linux.app.dir}/tmp"/>
        <delete file="${inst.resrc}/linux/felix.client.run.properties"/>
        <delete quiet="yes" failonerror="false">
            <fileset dir="${linux.app.dir}">
                <include name="tmp-*"/>
            </fileset>
        </delete>
    </target>

    <target name="clean-install-windows">
        <delete dir="${windows.app.dir}"/>
        <mkdir dir="${windows.app.dir}"/>
        <mkdir dir="${windows.app.dir}/tmp"/>
    </target>

    <target name="build-installation-wix"
            depends="version,load-properties">
        <property name="windows_native_path" value="${sc.basedir}\lib\native\windows"/>
        <property name="windows.jre.arch.file" value="${windows.jre.file}"/>
        <condition property="windows.jre.arch.zip" value="${windows.jre.zip}">
            <isset property="windows.jre.zip" />
        </condition>
        <property name="windows.download.link" value="${link.download.windows32}"/>
        <property name="windows.package.name.suffix" value="x86.exe"/>
        <property name="windows.msi.package.name.suffix" value="x86.msi"/>
        <property name="windows.arch" value="32"/>
        <property name="mingw.home" value="C:/mingw/x86" />
        <antcall target="build-installation-wix-base" />
    </target>

    <target name="build-installation-wix-64"
            depends="version,load-properties">
        <property name="windows_native_path" value="${sc.basedir}\lib\native\windows-64"/>
        <property name="windows.jre.arch.file" value="${windows.jre64.file}"/>
        <condition property="windows.jre.arch.zip" value="${windows.jre64.zip}">
            <isset property="windows.jre64.zip" />
        </condition>
        <property name="windows.download.link" value="${link.download.windows64}"/>
        <property name="windows.package.name.suffix" value="x64.exe"/>
        <property name="windows.msi.package.name.suffix" value="x64.msi"/>
        <property name="windows.arch" value="64"/>
        <property name="mingw.home" value="C:/mingw/x64" />
        <antcall target="build-installation-wix-base" />
    </target>

    <target name="unzip-windows-jre" if="windows.jre.arch.zip.isset">
        <unzip
                src="${unzip.windows.jre.src}"
                dest="${unzip.windows.jre.dest}" />
        <property name="unzip.windows.jre.dir" value="" />
        <delete failonerror="false" includeemptydirs="true" quiet="true">
            <fileset
                    casesensitive="false"
                    defaultexcludes="false"
                    dir="${unzip.windows.jre.dest}/jre">
                <include name="bin/rmid.exe" />
                <include name="bin/rmiregistry.exe" />
                <include name="bin/tnameserv.exe" />
                <include name="bin/keytool.exe" />
                <include name="bin/kinit.exe" />
                <include name="bin/klist.exe" />
                <include name="bin/ktab.exe" />
                <include name="bin/policytool.exe" />
                <include name="bin/orbd.exe" />
                <include name="bin/servertool.exe" />
                <include name="bin/javaws.exe" />
                <include name="lib/javaws.jar" />
                <include name="lib/javaws/**" />
                <include name="bin/javacpl.exe" />
                <include name="bin/jucheck.exe" />
                <include name="bin/jusched.exe" />
                <include name="bin/wsdetect.dll" />
                <include name="bin/npjpi*.dll" />
                <include name="bin/npjava11.dll" />
                <include name="bin/npjava12.dll" />
                <include name="bin/npjava13.dll" />
                <include name="bin/npjava14.dll" />
                <include name="bin/npjava32.dll" />
                <include name="bin/npoji610.dll" />
                <include name="bin/regutils.dll" />
                <include name="bin/axbridge.dll" />
                <include name="bin/deploy.dll" />
                <include name="bin/jpicom.dll" />
                <include name="bin/javacpl.cpl" />
                <include name="bin/jpiexp.dll" />
                <include name="bin/jpinscp.dll" />
                <include name="bin/jpioji.dll" />
                <include name="bin/jpishare.dll" />
                <include name="lib/deploy.jar" />
                <include name="lib/plugin.jar" />

                <include name="bin/new_plugin/**" />
                <include name="bin/jp2*.exe" />
                <include name="lib/deploy/**" />
                <include name="bin/jqs*.exe" />
            </fileset>
        </delete>
    </target>

    <target name="build-installation-wix-base"
            depends="clean-install-windows,define-ant-contrib-task">
        <property name="windows.package.name"
            value="${package.name}-${sip-communicator.version}-${windows.package.name.suffix}"/>
        <property name="windows.msi.package.name"
            value="${package.name}-${sip-communicator.version}-${windows.msi.package.name.suffix}"/>

        <!--
            This versionupdate.properties file isn't of interest to the MSI but
            is necessary for the site.
        -->
        <propertyfile file="${windows.app.dir}/versionupdate.properties">
            <entry key="last_version" value="${sip-communicator.version}" />
            <entry key="download_link"
                   value="${windows.download.link}" />
            <entry key="changes_html" value="updates/index.html" />
        </propertyfile>

        <!-- removes spaces from application name if any -->
        <propertyregex property="app.exe.filename"
            input="${application.name}"
            regexp=" "
            replace=""
            override="true"
            global="true"
            defaultValue="${application.name}"/>
        <!-- removes -,_ from app.exe.filename if any -->
        <propertyregex property="app.exe.filename"
            input="${app.exe.filename}"
            regexp="[-_]"
            replace=""
            override="true"
            global="true"
            defaultValue="${app.exe.filename}"/>
        <!-- if wix.app.launcher.name is not set use app.exe.filename
            If using wix.app.launcher.name make sure not to use spaces,-,_
            in the name.
        -->
        <condition property="wix.app.launcher.name"
                   value="${app.exe.filename}">
            <not>
                <isset property="wix.app.launcher.name" />
            </not>
        </condition>

        <!--
            Prepare for the execution of heat.exe (which is part of the
            preparation for the execution of candle.exe).
        -->
        <property name="light.dir" value="${windows.app.dir}/tmp/light" />
        <mkdir dir="${light.dir}" />

        <!-- Build run.exe (which is the launcher of the application). -->
        <exec
                dir="${src}/native/windows/run"
                executable="make.exe"
                failonerror="true">
            <env key="PATH" path="${mingw.home}/bin;${env.PATH}" />
            <arg value="PRODUCTNAME=${application.name}" />
            <arg value="COMPANYNAME=${application.company.name}" />
            <arg value="MINGW_HOME=${mingw.home}" />
            <arg value="TARGET_DIR=${light.dir}" />
            <arg value="PRODUCTBUILDVERSION=${sip-communicator.version}" />
            <arg value="TARGET_BASENAME=${wix.app.launcher.name}" />
        </exec>
        <antcall target="wix-sign-file">
            <param name="file.to.sign" value="${light.dir}/${wix.app.launcher.name}.exe"/>
        </antcall>
        <delete>
            <fileset dir="${light.dir}">
                <include name="config.h" />
                <include name="run.res" />
            </fileset>
        </delete>

        <copy todir="${light.dir}" overwrite="true">
            <fileset dir="${inst.resrc}/windows">
                <include name="sc-logo.ico" />
            </fileset>
        </copy>

        <antcall target="enable-splash">
            <param name="target.dir" value="${light.dir}"/>
        </antcall>

        <mkdir dir="${light.dir}/lib" />
        <copy todir="${light.dir}/lib" overwrite="true">
            <fileset dir="${sc.basedir}/lib">
                <include name="*.jar" />
            </fileset>
            <fileset dir="${sc.basedir}/lib/os-specific/windows"
                     erroronmissingdir="false">
                <include name="*.jar" />
                <exclude name="jmf.jar"/>
                <exclude name="sound.jar"/>
            </fileset>
            <fileset dir="${sc.basedir}/lib">
                <include name="felix.client.run.properties" />
            </fileset>
            <fileset dir="${sc.basedir}/lib">
                <include name="jitsi-defaults.properties" />
                <include name="jitsi-default-overrides.properties" />
            </fileset>
            <fileset dir="${sc.basedir}/resources/install">
                <include name="logging.properties" />
            </fileset>
        </copy>

        <!-- Add the windows specific bundle path in the felix.client.run.properties file -->
        <echo file="${light.dir}/lib/felix.client.run.properties"
            append="true">felix.auto.start.14= reference:file:sc-bundles/windows-clean-shutdown.jar
        </echo>

        <mkdir dir="${light.dir}/lib/bundle" />
        <copy todir="${light.dir}/lib/bundle" overwrite="true">
            <fileset dir="${sc.basedir}/lib/bundle">
                <include name="*.jar" />
                <exclude name="junit.jar" />
            </fileset>
        </copy>
        <mkdir dir="${light.dir}/native" />
        <copy todir="${light.dir}/native" overwrite="true">
            <fileset dir="${windows_native_path}">
                <include name="*" />
            </fileset>
        </copy>
        <antcall target="wix-sign-dlls">
            <param name="folder.to.sign" value="${light.dir}/native"/>
        </antcall>
        <mkdir dir="${light.dir}/sc-bundles" />
        <copy todir="${light.dir}/sc-bundles" overwrite="true">
            <fileset dir="${sc.basedir}/sc-bundles">
                <include name="*.jar" />
                <exclude name="*slick.jar" />
            </fileset>
            <fileset dir="${sc.basedir}/sc-bundles/os-specific/windows">
                <include name="*.jar" />
                <exclude name="*slick.jar" />
            </fileset>
        </copy>

        <!--
            Include a private Java Runtime Environment if it has been specified.
        -->
        <condition property="windows.jre.arch.zip.isset">
            <and>
                <isset property="windows.jre.arch.zip" />
                <not>
                    <equals arg1="${windows.jre.arch.zip}" arg2="" />
                </not>
            </and>
        </condition>
        <antcall target="unzip-windows-jre">
            <param name="unzip.windows.jre.src" value="${windows.jre.arch.zip}" />
            <param name="unzip.windows.jre.dest" value="${light.dir}" />
        </antcall>
        <!-- Include any additional files if provided. -->
        <copy todir="${light.dir}">
            <fileset
                    casesensitive="false"
                    dir="${inst.resrc}/windows/installer-windows.wxs_FILES"
                    erroronmissingdir="false"
                    includes="**" />
        </copy>

        <!--
            This update-location.properties file is the only of interest to the
            MSI i.e. it gets installed on the user machine.
        -->
        <copy
                file="${inst.resrc}/windows/update-location.properties"
                todir="${light.dir}"
                overwrite="true" />

        <property name="wix.home" value="C:\Program Files\WiX" />

        <!-- Execute heat.exe -->
        <exec
                executable="${wix.home}\heat.exe"
                dir="${light.dir}"
                failonerror="true">
            <arg value="dir" />
            <arg value="." />
            <arg value="-nologo" />
            <arg value="-ag" />
            <arg value="-cg" />
            <arg value="ComponentGroup_HeatExe" />
            <arg value="-out" />
            <arg value="${windows.app.dir}\tmp\heat.wxs" />
            <arg value="-sfrag" />
            <arg value="-suid" />
            <!--
                Suppress SelfReg because we do not have files that need it and
                we do not want the private Java Runtime Environment to end up
                registering such files.
            -->
            <arg value="-scom" />
            <arg value="-sreg" />
            <arg value="-svb6" />
            <arg value="-var" />
            <arg value="var.SourceDir" />
        </exec>

        <xslt
                in="${windows.app.dir}/tmp/heat.wxs"
                out="${windows.app.dir}/tmp/component-defines.wxi"
                style="${inst.resrc}/windows/heat-component-defines.xsl" />
        <xslt
                in="${windows.app.dir}/tmp/heat.wxs"
                out="${windows.app.dir}/tmp/component-refs.wxi"
                style="${inst.resrc}/windows/heat-component-refs.xsl" />
        <xslt
                in="${windows.app.dir}/tmp/heat.wxs"
                out="${windows.app.dir}/tmp/lib-dir-id.properties"
                style="${inst.resrc}/windows/heat-component-libsearch.xsl" />

        <property file="${windows.app.dir}/tmp/lib-dir-id.properties"/>
        <copy
            file="${inst.resrc}/windows/DefaultOverridesProps.wxi.template"
            tofile="${windows.app.dir}/tmp/DefaultOverridesProps.wxi">
            <globmapper from="*.wxi.template" to="*.wxi" />
            <filterchain>
                <tokenfilter>
                    <replacestring from="@@lib" to="${wix.heat.jitsi.lib.dir}" />
                </tokenfilter>
            </filterchain>
        </copy>

        <condition property="windows.is.64" value="yes" else="no">
            <equals arg1="${windows.arch}" arg2="64" />
        </condition>

        <!--
          Build cleansweep.exe because it is to be included in the setup by
          candle.exe
        -->
        <exec
                dir="${src}/native/windows/setup/cleansweep"
                executable="make.exe"
                failonerror="true">
            <env key="PATH" path="${mingw.home}/bin;${env.PATH}" />
            <arg value="PRODUCTNAME=${application.name}" />
            <arg value="MINGW_HOME=${mingw.home}" />
            <arg value="TARGET_DIR=${light.dir}" />
        </exec>
        <antcall target="wix-sign-file">
            <param name="file.to.sign" value="${light.dir}/cleansweep.exe"/>
        </antcall>
        <delete>
            <fileset dir="${light.dir}">
                <include name="config.h" />
                <include name="cleansweep.res" />
            </fileset>
        </delete>

        <!-- prepare properties for executing candle.exe -->
        <condition property="candle.var.Platform" value="x64" else="x86">
            <equals arg1="${windows.arch}" arg2="64" />
        </condition>
        <condition
                property="candle.arg.var.JRESetup"
                value="-dJRESetup=${windows.jre.arch.file}"
                else="-nologo">
            <and>
                <isset property="windows.jre.arch.file" />
                <not>
                    <equals arg1="${windows.jre.arch.file}" arg2="" />
                </not>
                <not>
                    <isset property="windows.jre.arch.zip.isset" />
                </not>
            </and>
        </condition>

        <!-- should we create a separate msi target -->
        <condition property="msi.var.store" value="true" else="false">
            <equals arg1="${wix.store.msi}" arg2="true" />
        </condition>
        <antcall target="build-installation-wix-msi">
            <param name="msi.var.compress" value="high"/>
        </antcall>
        <move
                failonerror="false"
                file="${windows.app.dir}/tmp/setup.msi"
                preservelastmodified="true"
                tofile="${windows.app.dir}\${windows.msi.package.name}" />

        <!-- now build msi needed for the exe distribution without compression -->
        <antcall target="build-installation-wix-msi">
            <param name="msi.var.compress" value="none"/>
            <param name="wix.store.msi" value="true"/>
        </antcall>

        <!-- Bootstrap the MSI into an EXE. -->
        <exec
                dir="${windows.app.dir}/tmp"
                executable="${inst.resrc}/windows/xz.exe"
                failonerror="true">
            <arg value="-zk9ev" />
            <arg value="setup.msi" />
        </exec>
        <exec
                dir="${src}/native/windows/setup"
                executable="make.exe"
                failonerror="true">
            <env key="PATH" path="${mingw.home}/bin;${env.PATH}" />
            <arg value="MINGW_HOME=${mingw.home}" />
            <arg value="TARGET_DIR=${windows.app.dir}/tmp" />
            <arg value="PRODUCTBUILDVERSION=${sip-communicator.version}" />
        </exec>
        <antcall target="wix-sign-file">
            <param name="file.to.sign" value="${windows.app.dir}\tmp\setup.exe"/>
        </antcall>
        <move
                file="${windows.app.dir}/tmp/setup.exe"
                preservelastmodified="true"
                tofile="${windows.app.dir}\${windows.package.name}" />

        <!-- before deleting try building the deltas -->
        <antcall target="build-wix-delta-updates"/>

        <!-- Creates updates files -->
        <antcall target="build-wix-updates-files"/>

        <delete dir="${light.dir}" />
        <delete dir="${windows.app.dir}/tmp" />
    </target>

    <target name="build-installation-wix-msi" if="wix.store.msi">

        <!-- if application publisher is not set use application name -->
        <condition property="application.publisher"
                   value="${application.name}">
            <not>
                <isset property="application.publisher" />
            </not>
        </condition>

        <!-- Finish the preparation for the execution of candle.exe -->
        <filter token="APP_EMAIL" value="${application.email}" />
        <filter token="APP_NAME" value="${application.name}" />
        <filter token="APP_LAUNCHER_NAME" value="${wix.app.launcher.name}" />
        <filter token="APP_WEB" value="${application.web}" />
        <filter token="APP_PUBLISHER" value="${application.publisher}" />
        <filter token="PRODUCTBUILDVERSION" value="${sip-communicator.version}" />
        <filter token="WelcomeText1" value="${installer.welcome.wtext1}" />
        <filter token="WelcomeText2" value="${installer.welcome.wtext2}" />
        <filter token="WelcomeText3" value="${installer.welcome.wtext3}" />
        <filter token="WINDOWS_IS_64" value="${windows.is.64}" />
        <filter token="WIX_PRODUCT_ID" value="${wix.product.id}" />
        <filter token="WIX_UPGRADE_CODE" value="${wix.upgrade.code}" />
        <filter token="WIX_COMPRESS_LEVEL" value="${msi.var.compress}" />
        <copy
                todir="${windows.app.dir}/tmp"
                overwrite="true"
                filtering="yes">
            <fileset dir="${inst.resrc}/windows">
                <include name="*.wxl" />
                <include name="installer-windows.wxs" />
                <include name="SCRegistrySpec.wxi" />
                <include name="windows_shortcut_specification.wxi" />
            </fileset>
        </copy>

        <!-- Execute candle.exe -->
        <exec
                executable="${wix.home}\candle.exe"
                dir="${windows.app.dir}/tmp"
                failonerror="true">
            <arg value="-nologo" />
            <arg value="-dcodepage=1252" />
            <arg value="-dPlatform=${candle.var.Platform}" />
            <arg value="-ext" />
            <arg value="WixUIExtension" />
            <arg value="-ext" />
            <arg value="WixUtilExtension" />
            <arg value="-dSourceDir=light" />
            <arg value="${candle.arg.var.JRESetup}" />
            <arg value="installer-windows.wxs" />
        </exec>

        <!-- Finish the preparation for the execution of light.exe -->
        <copy todir="${light.dir}" overwrite="true">
            <fileset dir="${inst.resrc}/doc">
                <include name="License.rtf" />
            </fileset>
            <fileset dir="${inst.resrc}/windows">
                <include name="wix-*.jpg" />
            </fileset>
        </copy>

        <!-- Execute light.exe -->
        <exec
                executable="${wix.home}\light.exe"
                dir="${light.dir}"
                failonerror="true">
            <arg value="-nologo" />
            <arg value="-ext" />
            <arg value="WixUIExtension" />
            <arg value="-ext" />
            <arg value="WixUtilExtension" />
            <arg value="-cultures:en-us" />
            <arg value="-loc" />
            <arg value="${windows.app.dir}\tmp\en-us.wxl" />
            <arg value="-out" />
            <arg value="${windows.app.dir}\tmp\setup.msi" />
            <arg value="${windows.app.dir}\tmp\installer-windows.wixobj" />
        </exec>

        <!-- create transform files for the supported setup locales -->
        <antcall target="build-installation-wix-locale">
            <param name="locale.name" value="fr-fr"/>
            <param name="locale.codepage" value="1252"/>
        </antcall>
        <!--antcall target="build-installation-wix-locale">
            <property name="locale.name" value="bg-bg"/>
            <property name="locale.codepage" value="1251"/>
        </antcall-->

        <!-- After we have created all transform files for all locales,
            embed them into the setup msi one by one,
            the last param is the LCID in order language to be
            autoselected when msi is started
            LCID info at:
            http://msdn.microsoft.com/en-us/library/0h88fahh(v=vs.85).aspx

            Note(2011-09-16 damencho):
            every language added must be listed and in installer-windows.wxs
            in the language attribute in Package and UpgradeVersion.
            -->
        <exec
                executable="cscript.exe"
                dir="${light.dir}"
                failonerror="true">
            <arg value="${inst.resrc}\windows\WiSubStg.vbs" />
            <arg value="${windows.app.dir}\tmp\setup.msi" />
            <arg value="${windows.app.dir}\tmp\fr-fr.mst" />
            <arg value="1036" />
        </exec>
        <!--exec
                executable="cscript.exe"
                dir="${light.dir}"
                failonerror="true">
            <arg value="${inst.resrc}\windows\WiSubStg.vbs" />
            <arg value="${windows.app.dir}\tmp\setup.msi" />
            <arg value="${windows.app.dir}\tmp\bg-bg.mst" />
            <arg value="1026" />
        </exec-->

        <antcall target="wix-sign-file">
            <param name="file.to.sign" value="${windows.app.dir}\tmp\setup.msi"/>
        </antcall>

    </target>

    <!-- Creates localized msi installers and the resulting
        transform files-->
    <target name="build-installation-wix-locale">
        <!-- Execute candle.exe for locale.name-->
        <exec
                executable="${wix.home}\candle.exe"
                dir="${windows.app.dir}/tmp"
                failonerror="true">
            <arg value="-nologo" />
            <arg value="-dcodepage=${locale.codepage}" />
            <arg value="-dPlatform=${candle.var.Platform}" />
            <arg value="-ext" />
            <arg value="WixUIExtension" />
            <arg value="-ext" />
            <arg value="WixUtilExtension" />
            <arg value="-dSourceDir=light" />
            <arg value="${candle.arg.var.JRESetup}" />
            <arg value="installer-windows.wxs" />
        </exec>
        <!-- Execute light.exe for locale.name -->
        <exec
                executable="${wix.home}\light.exe"
                dir="${light.dir}"
                failonerror="true">
            <arg value="-nologo" />
            <arg value="-ext" />
            <arg value="WixUIExtension" />
            <arg value="-ext" />
            <arg value="WixUtilExtension" />
            <arg value="-cultures:${locale.name}" />
            <arg value="-loc" />
            <arg value="${windows.app.dir}\tmp\${locale.name}.wxl" />
            <arg value="-out" />
            <arg value="${windows.app.dir}\tmp\setup_${locale.name}.msi" />
            <arg value="${windows.app.dir}\tmp\installer-windows.wixobj" />
        </exec>
        
        <exec
                executable="${wix.home}\torch.exe"
                dir="${light.dir}"
                failonerror="true">
            <arg value="-p" />
            <arg value="-t" />
            <arg value="language" />
            <arg value="${windows.app.dir}\tmp\setup.msi" />
            <arg value="${windows.app.dir}\tmp\setup_${locale.name}.msi" />
            <arg value="-out" />
            <arg value="${windows.app.dir}\tmp\${locale.name}.mst" />
        </exec>
    </target>

    <target name="build-wix-delta-updates"
            if="delta.history.location"
            depends="define-ant-contrib-task">

        <!-- Find all previous builds we have to build deltas for them -->
        <foreach param="build-location" target="-make-wix-delta"
                 inheritall="true" inheritrefs="true">
            <path>
                <dirset dir="${delta.history.location}">
                    <include name="*"/>
                </dirset>
            </path>
        </foreach>

        <!-- copy data for next delta builds-->
        <mkdir dir="${delta.history.location}/${build.label}/${windows.arch}"/>
        <copy file="${windows.app.dir}\tmp\setup.msi"
              todir="${delta.history.location}/${build.label}/${windows.arch}"/>

        <!-- now delete old one -->
        <antcall target="-delete-oldest-delta-data"/>
    </target>

    <target name="-make-wix-delta">

        <basename property="old.wix.build" file="${build-location}"/>

        <!-- we must skip building deltas for current build
            and if the source setup file is missing
        -->
        <condition property="process.delta">
            <and>
                <not>
                    <equals arg1="${old.wix.build}" arg2="${build.label}"/>
                </not>
                <available file="${build-location}\${windows.arch}\setup.msi"/>
            </and>
        </condition>

        <antcall target="-make-wix-delta-msi"/>
    </target>

    <target name="-make-wix-delta-msi" if="process.delta">
        <echo message="Creating msi delta for ${old.wix.build}-${build.label}"/>

        <!-- make the actual diff -->
        <exec executable="${inst.resrc}\windows\bsdiff.exe" failonerror="true">
            <arg value="${build-location}\${windows.arch}\setup.msi"/>
            <arg value="${windows.app.dir}\tmp\setup.msi"/>
            <arg value="${windows.app.dir}\tmp\setup.bspatch"/>
        </exec>

        <exec
                executable="cscript.exe"
                dir="${light.dir}"
                outputproperty="old.packagecode"
                failonerror="true">
            <arg value="//NoLogo" />
            <arg value="${inst.resrc}\windows\WiSumInf.vbs" />
            <arg value="${build-location}\${windows.arch}\setup.msi" />
        </exec>
        <echo message="Old package code is: ${old.packagecode}"/>
    	<length
    	        file="${build-location}/${windows.arch}/setup.msi"
    	        property="old.packagesize" />
        <echo message="Old package size is: ${old.packagesize}"/>
        <exec
                dir="${src}/native/windows/setup"
                executable="make.exe"
                failonerror="true">
            <env key="PATH" path="${mingw.home}/bin;${env.PATH}" />
            <arg value="MINGW_HOME=${mingw.home}" />
            <arg value="TARGET_DIR=${windows.app.dir}/tmp" />
            <arg value="PACKAGECODE=${old.packagecode}" />
            <arg value="PACKAGESIZE=${old.packagesize}" />
            <arg value="PRODUCTBUILDVERSION=${sip-communicator.version}" />
        </exec>
        <antcall target="wix-sign-file">
            <param name="file.to.sign" value="${windows.app.dir}\tmp\setup.exe"/>
        </antcall>
        <move
                file="${windows.app.dir}/tmp/setup.exe"
                preservelastmodified="true"
                tofile="${windows.app.dir}\${package.name}-${sip-communicator.version}-delta-${old.wix.build}-${windows.package.name.suffix}" />
    </target>

    <target name="wix-sign-file" if="sign.cert.file">
        <exec executable="${inst.resrc}/windows/signtool.exe"
              failonerror="false">
            <arg value="sign" />
            <arg value="/d" />
            <arg value="${application.name}" />
            <arg value="/t" />
            <arg value="http://tsa.starfieldtech.com" />
            <arg value="/f" />
            <arg value="${sign.cert.file}" />
            <arg value="/p" />
            <arg value="${sign.cert.password}" />
            <arg value="${file.to.sign}" />
        </exec>
    </target>

    <!-- signs all dll files in folder - $folder.to.sign
        do it if $sign.cert.file is available -->
    <target name="wix-sign-dlls" depends="define-ant-contrib-task">
        <foreach param="file.to.sign" target="wix-sign-file"
                 inheritall="true" inheritrefs="true">
            <path>
                <fileset dir="${folder.to.sign}">
                    <include name="*.dll"/>
                </fileset>
            </path>
        </foreach>
    </target>

    <!-- creates updates file, will be shown in dialog when update is
     available -->
    <target name="build-wix-updates-files">
        <mkdir dir="${windows.app.dir}\updates"/>
        <copy file="${inst.resrc}\windows\updates\sc.png"
              todir="${windows.app.dir}\updates"/>
        <copy file="${inst.resrc}\windows\updates\index-bottom.html"
              todir="${windows.app.dir}\updates"/>
        <copy file="${inst.resrc}\windows\updates\index.css"
              todir="${windows.app.dir}\updates"/>

        <tstamp>
            <format property="current.tstamp" pattern="d MMM yyyy HH:mm:ss"
                    locale="en,US"/>
        </tstamp>

        <filter token="BUILD" value="${label}" />
        <filter token="DATE" value="${current.tstamp}" />
        <filter token="APP_NAME" value="${application.name}" />
        <copy file="${inst.resrc}\windows\updates\index-top.html"
              todir="${windows.app.dir}\updates"
              overwrite="true" filtering="yes"/>

        <get src="${link.update.changelog.prefix}/extended-changelog-${label}.html"
             dest="changelog-${label}.html"
             ignoreerrors="true"/>
        <loadfile property="latest.changelog"
                  srcFile="changelog-${label}.html"
                  failonerror="false"/>
        <!-- Load a default value if file with changelogs is missing -->
        <condition property="latest.changelog" value="Nightly builds">
            <not>
                <isset property="latest.changelog"/>
            </not>
        </condition>

        <concat destfile="${windows.app.dir}\updates\index.html">
            <fileset dir="${windows.app.dir}\updates">
                <include name="index-top.html"/>
            </fileset>
            <propertyset>
                <propertyref name="latest.changelog"/>
            </propertyset>
            <fileset dir="${windows.app.dir}\updates">
                <include name="index-bottom.html"/>
            </fileset>
        </concat>
        <delete file="${windows.app.dir}\updates\index-top.html"/>
        <delete file="${windows.app.dir}\updates\index-bottom.html"/>
        <delete file="changelog-${label}.html"/>
    </target>

    <!-- - - - - - - - - - - BUILDING RELEASE PACKAGES - - - - - - - - - - - -->
    <!-- Internal target called by the "clean target" - removes the macosx-specific file -->
    <!-- we only execute if at least one (in this case the first) of the links we are
         deleting exist as otherwise we see a bunch of warnings on every compile. -->
    <available file="${macosx.resrc.dir}/logging.properties" property="macResourcesExist"/>
    <target name="clean-macosx" if="macResourcesExist">

        <delete failonerror="false" file="${macosx.resrc.dir}/jitsi-defaults.properties"/>
        <delete failonerror="false" file="${macosx.resrc.dir}/logging.properties"/>
        <delete failonerror="false" file="${macosx.resrc.dir}/felix.client.run.properties"/>
        <symlink action="delete" failonerror="false"
                 link="${macosx.app.dir}/${application.name}.app/Contents/Resources/Java/libAEGetURLEventHandlerAgent.jnilib"/>

        <symlink action="delete" failonerror="false"
                 link="${macosx.app.dir}/${application.name}.app/Contents/Frameworks/GrowlFramework/Growl.framework/Headers"/>
        <symlink action="delete" failonerror="false"
                 link="${macosx.app.dir}/${application.name}.app/Contents/Frameworks/GrowlFramework/Growl.framework/Resources"/>
        <symlink action="delete" failonerror="false"
                 link="${macosx.app.dir}/${application.name}.app/Contents/Frameworks/GrowlFramework/Growl.framework/Growl"/>
        <symlink action="delete" failonerror="false"
                 link="${macosx.app.dir}/${application.name}.app/Contents/Frameworks/GrowlFramework/Growl.framework/Versions/Current"/>

        <symlink action="delete" failonerror="false"
                 link="${macosx.app.dir}/${application.name}.app/Contents/Frameworks/GrowlFramework/Legacy/Growl.framework/Headers"/>
        <symlink action="delete" failonerror="false"
                 link="${macosx.app.dir}/${application.name}.app/Contents/Frameworks/GrowlFramework/Legacy/Growl.framework/Resources"/>
        <symlink action="delete" failonerror="false"
                 link="${macosx.app.dir}/${application.name}.app/Contents/Frameworks/GrowlFramework/Legacy/Growl.framework/Growl"/>
        <symlink action="delete" failonerror="false"
                 link="${macosx.app.dir}/${application.name}.app/Contents/Frameworks/GrowlFramework/Legacy/Growl.framework/Versions/Current"/>

        <symlink action="delete" failonerror="false"
                 link="${macosx.app.dir}/${application.name}.app/Contents/Frameworks/Sparkle.framework/Headers"/>
        <symlink action="delete" failonerror="false"
                 link="${macosx.app.dir}/${application.name}.app/Contents/Frameworks/Sparkle.framework/Resources/fr_CA.lproj"/>
        <symlink action="delete" failonerror="false"
                 link="${macosx.app.dir}/${application.name}.app/Contents/Frameworks/Sparkle.framework/Resources"/>
        <symlink action="delete" failonerror="false"
                 link="${macosx.app.dir}/${application.name}.app/Contents/Frameworks/Sparkle.framework/Sparkle"/>
        <symlink action="delete" failonerror="false"
                 link="${macosx.app.dir}/${application.name}.app/Contents/Frameworks/Sparkle.framework/Versions/Current"/>
    </target>

    <target name="macosx" depends="version,load-properties,define-ant-contrib-task"
            description="Create an .app package for MACOSX">

      <taskdef name="jarbundler"
               classname="net.sourceforge.jarbundler.JarBundler"/>

      <mkdir dir="${macosx.app.dir}"/>

      <property name="macosx.stubfile"
                value="${macosx.resrc.dir}/JavaApplicationStub"/>
      <condition property="macosx.stubfile"
                 value="/System/Library/Frameworks/JavaVM.framework/Resources/MacOS/JavaApplicationStub">
        <equals arg1="${os.name}"
                arg2="Mac OS X"
                casesensitive="false"
                trim="true"/>
      </condition>

      <!-- We copy macosx-specific bundles from
           sc-bundles/os-specific/macosx to sc-bundles -->
      <copy todir="${bundles.dest}">
            <fileset dir="${bundles.dest.mac}">
                <include name="**/*.jar"/>
            </fileset>
      </copy>

      <!-- Delete the old .app if it exists -->
      <delete dir="${macosx.app.dir}/${application.name}.app"
              quiet="yes" failonerror="false"/>
      <!-- Delete the old tmp if it exists -->
      <delete dir="${macosx.app.dir}/tmp"
              quiet="yes" failonerror="false"/>
      <mkdir dir="${macosx.app.dir}/tmp"/>

      <!-- Sparkle needs the build number. If it is not
           available, we use the normal build label -->
      <condition property="sparkle.build"
                 value="${sparkle}"
                 else="${build.label}">
          <isset property="sparkle"/>
      </condition>

      <condition property="jvmarg"
            value="-client -Xmx256m"
            else="" >
           <os arch="i386" />
      </condition>

      <!-- removes any spaces from application name if any -->
      <propertyregex property="macosx.stub.filename"
            input="${application.name}"
            regexp=" "
            replace=""
            override="true"
            global="true"
            defaultValue="${application.name}"/>

      <copy file="${macosx.stubfile}"
            tofile="${macosx.app.dir}/tmp/${macosx.stub.filename}"/>

      <!-- This creates the .app for MacOSX -->
      <jarbundler dir="${macosx.app.dir}"
                  name="${application.name}"
                  shortname="${application.name}"
                  signature="sipc"
                  mainclass="net.java.sip.communicator.launcher.SIPCommunicator"
                  icon="resources/images/logo/sc_logo_128x128.icns"
                  jvmversion="1.6*"
                  version="${sip-communicator.version}"
                  build="${sparkle.build}"
                  infostring="${application.name}"
                  bundleid="org.${package.name}"
                  stubfile="${macosx.app.dir}/tmp/${macosx.stub.filename}"
                  extraclasspath="/System/Library/Java,$JAVAROOT"
                  workingdirectory="$APP_PACKAGE/Contents/Resources/Java"
                  splashfile="$JAVAROOT/splash.gif"
                  vmoptions="-agentlib:AEGetURLEventHandlerAgent ${jvmarg}">

        <javaproperty name="apple.laf.useScreenMenuBar" value="true"/>
        <javaproperty name="apple.awt.brushMetalRounded" value="true"/>
        <javaproperty name="apple.awt.showGrowBox" value="true"/>
        <javaproperty name="java.library.path"
                      value="$JAVAROOT/lib/native/mac:${system.DYLD_LIBRARY_PATH}"/>
        <javaproperty name="jna.library.path"
                          value="$JAVAROOT/lib/native/mac:${system.DYLD_LIBRARY_PATH}"/>

        <javaproperty name="net.java.sip.communicator.SC_HOME_DIR_NAME"
                      value="${application.name}"/>

        <!-- Tell felix to run sip-communicator -->
        <javaproperty name="felix.config.properties"
                      value="file:felix.client.run.properties"/>
        <!-- Tell java.util.logging about our logging preferences -->
        <javaproperty name="java.util.logging.config.file"
                      value="logging.properties"/>

        <jarfileset dir=".">
            <include name="lib/*.jar" />
            <include name="lib/os-specific/mac/*.jar" />
            <include name="lib/bundle/*.jar" />
            <exclude name="lib/bundle/junit.jar" />
            <include name="lib/native/mac/*.jnilib" />
            <include name="lib/native/mac/*.dylib" />
            <exclude name="lib/native/mac/libgrowl4j.dylib" />
            <exclude name="lib/native/mac/libsparkle_init.dylib" />
            <include name="${bundles.dest}/*.jar" />
            <exclude name="${bundles.dest}/*-slick.jar" />
            <exclude name="${bundles.dest}/sparkle.jar" />
            <exclude name="${bundles.dest}/update.jar" />
            <include name="resources/images/logo/sc_logo_128x128.icns" />
        </jarfileset>
        <javafilelist dir="${inst.resrc}"
                      files="logging.properties"/>
        <javafilelist dir="${lib}"
                      files="felix.client.run.properties"/>
        <javafilelist dir="${lib}"
                      files="jitsi-defaults.properties"/>
        <javafilelist dir="${lib}"
                      files="jitsi-default-overrides.properties"/>
      </jarbundler>

      <!-- -->
      <replace file="${macosx.app.dir}/${application.name}.app/Contents/Resources/Java/felix.client.run.properties"
               token="swingnotification.jar">
            <replacevalue><![CDATA[swingnotification.jar reference\:file\:sc-bundles/growlnotification.jar]]></replacevalue>
      </replace>

      <!-- Remove the reference to the update bundle -->
      <replace file="${macosx.app.dir}/${application.name}.app/Contents/Resources/Java/felix.client.run.properties"
               token="reference:file:sc-bundles/update.jar"
               value=""/>
      <!-- colons can be escaped after some modifications -->
      <replace file="${macosx.app.dir}/${application.name}.app/Contents/Resources/Java/felix.client.run.properties"
               token="reference\:file\:sc-bundles/update.jar"
               value=""/>
      <replaceregexp file="${macosx.app.dir}/${application.name}.app/Contents/Resources/Java/felix.client.run.properties"
                match="^org.osgi.framework.storage=\$\{user.home\}/.sip-communicator/sip-communicator.bin"
                replace="org.osgi.framework.storage=$\{user.home\}/Library/Application Support/${application.name}/sip-communicator.bin"
                flags="m"/>

      <!-- Install the Growl Framework in the application package -->
      <mkdir dir="${macosx.app.dir}/${application.name}.app/Contents/Frameworks"/>
      <unzip src="${macosx.resrc.dir}/GrowlFramework.zip"
             dest="${macosx.app.dir}/${application.name}.app/Contents/Frameworks"/>
      <!-- Ant unzip tasks does not preserve symlinks, so we recreate them -->
      <symlink link="${macosx.app.dir}/${application.name}.app/Contents/Frameworks/GrowlFramework/Growl.framework/Versions/Current"
               resource="./A"/>
      <symlink link="${macosx.app.dir}/${application.name}.app/Contents/Frameworks/GrowlFramework/Growl.framework/Headers"
               resource="./Versions/Current/Headers"/>
      <symlink link="${macosx.app.dir}/${application.name}.app/Contents/Frameworks/GrowlFramework/Growl.framework/Resources"
               resource="./Versions/Current/Resources"/>
      <symlink link="${macosx.app.dir}/${application.name}.app/Contents/Frameworks/GrowlFramework/Growl.framework/Growl"
               resource="./Versions/Current/Growl"/>

      <symlink link="${macosx.app.dir}/${application.name}.app/Contents/Frameworks/GrowlFramework/Legacy/Growl.framework/Versions/Current"
               resource="./A"/>
      <symlink link="${macosx.app.dir}/${application.name}.app/Contents/Frameworks/GrowlFramework/Legacy/Growl.framework/Headers"
               resource="./Versions/Current/Headers"/>
      <symlink link="${macosx.app.dir}/${application.name}.app/Contents/Frameworks/GrowlFramework/Legacy/Growl.framework/Resources"
               resource="./Versions/Current/Resources"/>
      <symlink link="${macosx.app.dir}/${application.name}.app/Contents/Frameworks/GrowlFramework/Legacy/Growl.framework/Growl"
               resource="./Versions/Current/Growl"/>

      <!-- Add the url types in the Info.plist file -->
      <replace file="${macosx.app.dir}/${application.name}.app/Contents/Info.plist">
        <replacetoken><![CDATA[<key>CFBundleName</key>]]></replacetoken>
        <replacevalue><![CDATA[<key>CFBundleURLTypes</key>
      <array>
        <dict>
            <key>CFBundleURLName</key>
            <string>sip URI</string>
            <key>CFBundleURLSchemes</key>
            <array>
                <string>sip</string>
            </array>
        </dict>
        <dict>
            <key>CFBundleURLName</key>
            <string>xmpp URI</string>
            <key>CFBundleURLSchemes</key>
            <array>
                <string>xmpp</string>
            </array>
        </dict>
      </array>
      <key>CFBundleName</key>]]></replacevalue>
      </replace>
      <!-- Add property for high resolution displays -->
      <replace file="${macosx.app.dir}/${application.name}.app/Contents/Info.plist">
        <replacetoken><![CDATA[<key>CFBundleName</key>]]></replacetoken>
        <replacevalue><![CDATA[<key>NSHighResolutionCapable</key>
      <true/>
      <key>CFBundleName</key>]]></replacevalue>
      </replace>
      <symlink resource="lib/native/mac/libAEGetURLEventHandlerAgent.jnilib"
               link="${macosx.app.dir}/${application.name}.app/Contents/Resources/Java/libAEGetURLEventHandlerAgent.jnilib"/>
      <symlink resource="lib/native/mac/libAEGetURLEventHandlerAgent.jnilib"
               link="${macosx.app.dir}/${application.name}.app/Contents/Resources/Java/libAEGetURLEventHandlerAgent.dylib"/>
      <symlink resource="libAEGetURLEventHandlerAgent.jnilib"
               link="${macosx.app.dir}/${application.name}.app/Contents/Resources/Java/lib/native/mac/libAEGetURLEventHandlerAgent.dylib"/>

      <copy file="${macosx.resrc.dir}/libgrowl4j.dylib"
            todir="${macosx.app.dir}/${application.name}.app/Contents/Resources/Java/lib/native/mac/"/>

      <antcall target="-macosx-include-jre"/>

      <antcall target="enable-splash">
          <param name="target.dir"
             value="${macosx.app.dir}/${application.name}.app/Contents/Resources/Java"/>
      </antcall>

      <!-- Delete the tmp if it exists -->
      <delete dir="${macosx.app.dir}/tmp"
              quiet="yes" failonerror="false"/>
    </target>

    <!-- if folder for a macosx jdk is supplied we embed it in the distributed
        dmg and provide info for it in Info.plist -->
    <target name="-macosx-include-jre"
            if="macosx.jre"
            unless="macosx.embed.jre.disabled">

        <basename property="jre.folder.name" file="${macosx.jre}"/>
        <dirname property="jre.parent.folder" file="${macosx.jre}"/>

        <mkdir dir="${macosx.app.dir}/${application.name}.app/Contents/PlugIns"/>
        <copy todir="${macosx.app.dir}/${application.name}.app/Contents/PlugIns">
              <fileset dir="${jre.parent.folder}">
                  <include name="${jre.folder.name}/Contents/Info.plist"/>
                  <include name="${jre.folder.name}/Contents/Home/jre/"/>
                  <exclude name="${jre.folder.name}/Contents/Home/bin/"/>
                  <exclude name="${jre.folder.name}/Contents/Home/jre/bin/"/>
                  <exclude name="${jre.folder.name}/Contents/Home/jre/lib/deploy/"/>
                  <exclude name="${jre.folder.name}/Contents/Home/jre/lib/deploy.jar"/>
                  <exclude name="${jre.folder.name}/Contents/Home/jre/lib/javaws.jar"/>
                  <exclude name="${jre.folder.name}/Contents/Home/jre/lib/libdeploy.dylib"/>
                  <exclude name="${jre.folder.name}/Contents/Home/jre/lib/libnpjp2.dylib"/>
                  <exclude name="${jre.folder.name}/Contents/Home/jre/lib/plugin.jar"/>
                  <exclude name="${jre.folder.name}/Contents/Home/jre/lib/security/javaws.policy"/>
              </fileset>
        </copy>

        <!-- and now the entry in Info.plist-->
        <replace file="${macosx.app.dir}/${application.name}.app/Contents/Info.plist">
            <replacetoken><![CDATA[<key>VMOptions</key>]]></replacetoken>
            <replacevalue><![CDATA[<key>JVMRuntime</key>
      <string>__jre.folder.name__</string>
      <key>VMOptions</key>]]></replacevalue>
        </replace>
        <replace file="${macosx.app.dir}/${application.name}.app/Contents/Info.plist">
            <replacefilter token="__jre.folder.name__" value="${jre.folder.name}"/>
        </replace>
    </target>

    <!-- Create a MacOSX application package with Sparkle support.
         Executed only if the sparkle label property is set, i.e. if the
         package is built from CruiseControl -->
    <target name="macosx-sparkle" depends="macosx"
            if="sparkle"
            description="Create an .app package for MACOSX with Sparkle support">

      <!-- Add the sparkle bundle path in the felix.client.run.properties file -->
      <echo file="${macosx.app.dir}/${application.name}.app/Contents/Resources/Java/felix.client.run.properties"
            append="true">felix.auto.start.71= reference:file:sc-bundles/sparkle.jar
      </echo>

      <!-- Add the Sparkle bundle and JNI to the application package -->
      <copy file="${bundles.dest}/sparkle.jar"
            todir="${macosx.app.dir}/${application.name}.app/Contents/Resources/Java/sc-bundles/"/>
      <copy file="lib/native/mac/libsparkle_init.dylib"
            todir="${macosx.app.dir}/${application.name}.app/Contents/Resources/Java/lib/native/mac/"/>

      <!-- Add public key file to the application bundle -->
      <copy file="${macosx.resrc.dir}/sparkle_dsa_pub.pem"
            todir="${macosx.app.dir}/${application.name}.app/Contents/Resources/"/>

      <!-- Add the Sparkle properties in the Info.plist file -->
      <replace file="${macosx.app.dir}/${application.name}.app/Contents/Info.plist">
        <replacetoken><![CDATA[<key>CFBundleName</key>]]></replacetoken>
        <replacevalue><![CDATA[<key>SUCheckAtStartup</key>
    <string>YES</string>
    <key>SUScheduledCheckInterval</key>
    <string>86400</string>
    <key>SUPublicDSAKeyFile</key>
    <string>sparkle_dsa_pub.pem</string>
    <key>SUFeedURL</key>
    <string>_DOWNLOAD_LINK_</string>
    <key>SUShowReleaseNotes</key>
    <string>YES</string>
    <key>CFBundleName</key>]]></replacevalue>
      </replace>

      <!-- Now replace the download link-->
      <replace file="${macosx.app.dir}/${application.name}.app/Contents/Info.plist">
        <replacefilter token="_DOWNLOAD_LINK_" value="${link.updates.macosx}"/>
      </replace>

      <!-- Install the Sparkle Framework in the application package -->
      <mkdir dir="${macosx.app.dir}/${application.name}.app/Contents/Frameworks"/>
      <unzip src="${macosx.resrc.dir}/Sparkle.framework.zip"
            dest="${macosx.app.dir}/${application.name}.app/Contents/Frameworks"/>
      <!-- Ant unzip tasks does not preserve symlinks, so we recreate them -->
      <symlink link="${macosx.app.dir}/${application.name}.app/Contents/Frameworks/Sparkle.framework/Versions/Current"
            resource="./A"/>
      <symlink link="${macosx.app.dir}/${application.name}.app/Contents/Frameworks/Sparkle.framework/Headers"
            resource="./Versions/Current/Headers"/>
      <symlink link="${macosx.app.dir}/${application.name}.app/Contents/Frameworks/Sparkle.framework/Resources"
            resource="./Versions/Current/Resources"/>
      <symlink link="${macosx.app.dir}/${application.name}.app/Contents/Frameworks/Sparkle.framework/Sparkle"
            resource="./Versions/Current/Sparkle"/>
      <symlink link="${macosx.app.dir}/${application.name}.app/Contents/Frameworks/Sparkle.framework/Resources/fr_CA.lproj"
            resource="./fr.lproj"/>
      <symlink link="${macosx.app.dir}/${application.name}.app/Contents/Frameworks/Sparkle.framework/Resources/pt.lproj"
            resource="./pt_BR.lproj" failonerror="false"/>

      <!-- Restore the file permissions to the Sparke relaunch tool -->
      <chmod file="${macosx.app.dir}/${application.name}.app/Contents/Frameworks/Sparkle.framework/Resources/relaunch"
               perm="ugo+rx"/>
      <chmod file="${macosx.app.dir}/${application.name}.app/Contents/Frameworks/Sparkle.framework/Versions/A/Sparkle"
               perm="ugo+rx"/>
      <chmod file="${macosx.app.dir}/${application.name}.app/Contents/Frameworks/Sparkle.framework/Versions/A/Resources/finish_installation.app/Contents/MacOS/finish_installation"
               perm="ugo+rx"/>
    </target>

    <!-- Creates empty folders in Contents/Resources for
          available languages, so macosx can switch languages -->
    <target name="dmg-create-language-folders"
            depends="define-ant-contrib-task">

        <foreach param="file.language.resource" target="dmg-language-folder"
                 inheritall="true" inheritrefs="true">
            <path>
                <fileset dir="${sc.basedir}/resources/languages">
                    <include name="*.properties"/>
                </fileset>
            </path>
        </foreach>
    </target>
    <target name="dmg-language-folder">
        <propertyregex property="jitsi.available.lang.resource"
                      input="${file.language.resource}"
                      regexp="resources_(.*)\.properties"
                      select="\1"
                      casesensitive="false"
                      defaultValue="en"/>
        <mkdir dir="${macosx.app.dir}/${application.name}.app/Contents/Resources/${jitsi.available.lang.resource}.lproj"/>
    </target>

    <!-- Create the DMG - This only works on MacOSX (need hdiutil) -->
    <target name="dmg" depends="macosx-sparkle"
            if="is.running.macos"
            description="Create a .dmg package for MACOSX (only works on MACOSX)">

      <property name="macosx.dmg.name"
                value="${package.name}-${sip-communicator.version}.dmg"/>
      <property name="macosx.dmg.tmpname"
                value="${package.name}-tmp.dmg"/>
      <delete file="${macosx.app.dir}/${macosx.dmg.name}"
              quiet="yes" failonerror="false"/>

      <!-- Creates empty folders in Contents/Resources for
      available languages, so macosx can switch languages -->
      <antcall target="dmg-create-language-folders" />

      <!-- sign before creating the image, so the signed app goes into it -->
      <antcall target="macosx-sign-app"/>

      <!-- Create a temporary Disk Image -->
      <exec executable="/usr/bin/hdiutil" os="Mac OS X" failonerror="true">
        <arg value="create"/>
        <arg value="-srcfolder"/>
        <arg value="${macosx.app.dir}/${application.name}.app"/>
        <arg value="-volname"/>
        <arg value="${application.name}"/>
        <arg value="-ov"/>
        <arg value="${macosx.app.dir}/${macosx.dmg.tmpname}"/>
        <arg value="-format"/>
        <arg value="UDRW"/>
      </exec>
      <!-- Attach the temporary image -->
      <exec executable="/usr/bin/hdiutil" os="Mac OS X" failonerror="true">
        <arg value="attach"/>
        <arg value="${macosx.app.dir}/${macosx.dmg.tmpname}"/>
        <arg value="-mountroot"/>
        <arg value="${release}/"/>
      </exec>
      <!-- Copy the background, icon and DS_Store files -->
      <mkdir dir="${release}/${application.name}/.background"/>
      <copy file="${macosx.resrc.dir}/dmg-background.png"
              tofile="${release}/${application.name}/.background/background.png"
              overwrite="true"/>
      <copy file="${macosx.resrc.dir}/dmg-VolumeIcon.icns"
              tofile="${release}/${application.name}/.VolumeIcon.icns"
              overwrite="true"/>
      <copy file="${macosx.resrc.dir}/dmg-DS_Store"
              tofile="${release}/${application.name}/.DS_Store"
              overwrite="true"/>
      <exec executable="/Developer/Tools/SetFile" os="Mac OS X">
        <arg value="-a"/>
        <arg value="C"/>
        <arg value="${release}/${application.name}"/>
      </exec>
      <!-- Add a symbolic link to the Applications directory -->
      <symlink link="${release}/${application.name}" resource="/Applications"/>

      <!-- Detach the temporary image -->
      <exec executable="/usr/bin/hdiutil" os="Mac OS X" failonerror="true">
        <arg value="detach"/>
        <arg value="${release}/${application.name}"/>
      </exec>
      <!-- Compress it to a new image -->
      <exec executable="/usr/bin/hdiutil" os="Mac OS X" failonerror="true">
        <arg value="convert"/>
        <arg value="${macosx.app.dir}/${macosx.dmg.tmpname}"/>
        <arg value="-format"/>
        <arg value="UDZO"/>
        <arg value="-o"/>
        <arg value="${macosx.app.dir}/${macosx.dmg.name}"/>
      </exec>
      <!-- Delete the temporary image -->
      <delete file="${macosx.app.dir}/${macosx.dmg.tmpname}"
              quiet="yes" failonerror="false"/>

      <!-- creates the sparkle xmls -->
      <antcall target="macosx-sparkle-files"/>
      <antcall target="macosx-sparkle-delta-updates"/>
      <antcall target="macosx-sparkle-files-finish"/>

      <!-- remove folder we are done -->
      <delete dir="${macosx.app.dir}/${application.name}.app"
              quiet="yes" failonerror="false"/>
    </target>

    <!--
        If there is a property enabling the keychain name
        we can sign.
     -->
    <target name="macosx-sign-app" if="macosx.sign.keychain">
        <echo message="Signing application!"/>

        <!-- unlocking the keychain -->
        <exec executable="/usr/bin/security" os="Mac OS X" failonerror="true">
            <arg value="unlock-keychain"/>
            <arg value="-p"/>
            <arg value=""/>
            <arg value="${macosx.sign.keychain}"/>
        </exec>

        <!-- signing -->
        <exec executable="/usr/bin/codesign" os="Mac OS X" failonerror="true">
            <arg value="-s"/>
            <arg value="${macosx.sign.certid}"/>
            <arg value="--keychain"/>
            <arg value="${macosx.sign.keychain}"/>
            <arg value="--requirements"/>
            <!-- the designated param value is taken after executing the command
            on already installed and signed application
            $ codesign -d -r- /Applications/Jitsi.app -->
            <arg value="=designated => identifier &quot;org.${package.name}&quot; and anchor apple generic and certificate 1[field.1.2.840.113635.100.6.2.6] /* exists */ and certificate leaf[field.1.2.840.113635.100.6.1.13] /* exists */ and certificate leaf[subject.OU] = &quot;BE8738ZVRM&quot;"/>
            <arg value="${macosx.app.dir}/${application.name}.app"/>
        </exec>

        <!-- just print sign info
            To test is sign accepted do $ sudo spctl -a -v -->
        <exec executable="/usr/bin/codesign" os="Mac OS X" failonerror="true">
            <arg value="-dvvv"/>
            <arg value="${macosx.app.dir}/${application.name}.app"/>
        </exec>

        <!-- locking again -->
        <exec executable="/usr/bin/security" os="Mac OS X" failonerror="true">
            <arg value="lock-keychain"/>
            <arg value="${macosx.sign.keychain}"/>
        </exec>

    </target>

    <!-- a set of targets to load the properties needed to execute
        just macosx-sparkle-files and macosx-sparkle-files-finish to
        re-generate files if we accidentally delete them :)
     -->
    <target name="macosx-sparkle-params"
            depends="version-params,load-props-params">
        <property   name="macosx.dmg.name"
                    value="${package.name}-${sip-communicator.version}.dmg"/>
    </target>
    <target name="version-params"
            unless="sip-communicator.version">
        <ant target="version"/>
    </target>
    <target name="load-props-params"
            unless="sparkle.signiture.location">

        <ant target="load-properties"/>
    </target>
    <!-- -->

    <target name="macosx-sparkle-files"
            depends="macosx-sparkle-params"
            if="sparkle.signiture.location">

        <exec executable="bash" os="Mac OS X" failonerror="true"
              outputproperty="signature.base64">
            <arg value="-c"/>
            <arg value="openssl dgst -sha1 -binary &lt; '${macosx.app.dir}/${macosx.dmg.name}' | openssl dgst -dss1 -sign ${sparkle.signiture.location} | openssl enc -base64"/>
        </exec>

        <length file="${macosx.app.dir}/${macosx.dmg.name}"
                property="dmg.file.length" />

        <copy todir="${macosx.app.dir}/sparkle">
            <fileset dir="${macosx.resrc.dir}/sparkle-files/sparkle"/>
        </copy>

        <tstamp>
            <format property="current.tstamp" pattern="d MMM yyyy HH:mm:ss"
                    locale="en,US"/>
        </tstamp>

        <filter token="BUILD" value="${sparkle.build}" />
        <filter token="DATE" value="${current.tstamp}" />
        <filter token="APP_NAME" value="${application.name}" />
        <filter token="SPARKLE_UPDATES" value="${link.updates.macosx}" />
        <filter token="SPARKLE_INDEX" value="${link.sparkle.updates.index}" />
        <filter token="LEN" value="${dmg.file.length}" />
        <filter token="SIGNATURE" value="${signature.base64}" />
        <filter token="DOWNLOAD_DMG_LINK" value="${link.download.macosx}" />
        <copy file="${macosx.resrc.dir}/sparkle-files/updates.xml"
                tofile="${macosx.app.dir}/sparkle/updates-tmp.xml"
                overwrite="true" filtering="yes"/>
        <copy file="${macosx.resrc.dir}/sparkle-files/index-top.html"
              todir="${macosx.app.dir}/sparkle"
                overwrite="true" filtering="yes"/>

        <get src="${link.update.changelog.prefix}/extended-changelog-${label}.html"
             dest="changelog-${label}.html"
             ignoreerrors="true"/>
        <loadfile property="latest.changelog"
                  srcFile="changelog-${label}.html"
                  failonerror="false"/>
        <!-- Load a default value if file with changelogs is missing -->
        <condition property="latest.changelog" value="Nightly builds">
            <not>
                <isset property="latest.changelog"/>
            </not>
        </condition>

        <concat destfile="${macosx.app.dir}/sparkle/index.html">
            <fileset dir="${macosx.app.dir}/sparkle/">
                <include name="index-top.html"/>
            </fileset>
            <propertyset>
                <propertyref name="latest.changelog"/>
            </propertyset>
            <fileset dir="${macosx.resrc.dir}/sparkle-files">
                <include name="index-bottom.html"/>
            </fileset>
        </concat>
        <delete file="${macosx.app.dir}/sparkle/index-top.html"/>
        <delete file="changelog-${label}.html"/>

    </target>

    <!-- task only finishes generating sparkle files if needed -->
    <target name="macosx-sparkle-files-finish"
            depends="macosx-sparkle-params"
            if="sparkle.signiture.location">
        <!-- To be able to insert deltas in the updates xml
            we use the token @SPARKLE_DELTAS@. And when finished
            puting deltas (no matter if there were any at all if option
            is not enabled) we must remove the SPARKLE_DELTAS token if left.
        -->
        <filter token="SPARKLE_DELTAS" value="" />
        <move file="${macosx.app.dir}/sparkle/updates-tmp.xml"
              tofile="${macosx.app.dir}/sparkle/updates.xml"
              overwrite="true" filtering="yes"/>
    </target>

    <target name="macosx-sparkle-delta-updates"
            if="delta.history.location"
            depends="define-ant-contrib-task">

        <!-- create temp dir for making delta diffs -->
        <mkdir dir="${macosx.app.dir}/tmp"/>

        <!-- Attach the current image -->
        <exec executable="/usr/bin/hdiutil" os="Mac OS X" failonerror="true">
            <arg value="attach"/>
            <arg value="${macosx.app.dir}/${macosx.dmg.name}"/>
            <arg value="-mountroot"/>
            <arg value="${macosx.app.dir}/tmp/"/>
        </exec>

        <unzip src="${macosx.resrc.dir}/Sparkle.framework.zip"
               dest="${macosx.app.dir}/tmp"/>
        <copy file="${macosx.resrc.dir}/BinaryDelta"
              todir="${macosx.app.dir}/tmp"/>
        <chmod file="${macosx.app.dir}/tmp/BinaryDelta"
               perm="ugo+rx"/>


        <!-- Find all previous builds we have to build deltas for them -->
        <foreach param="build-location" target="-make-sparkle-pre-delta"
                 inheritall="true" inheritrefs="true">
            <path>
                <dirset dir="${delta.history.location}">
                    <include name="*"/>
                </dirset>
            </path>
        </foreach>

        <!-- Detach the temporary image -->
        <exec executable="/usr/bin/hdiutil" os="Mac OS X" failonerror="true">
            <arg value="detach"/>
            <arg value="${macosx.app.dir}/tmp/${application.name}"/>
        </exec>

        <!-- delete the temp dir -->
        <delete dir="${macosx.app.dir}/tmp"/>

        <!-- copy data for next delta builds-->
        <mkdir dir="${delta.history.location}/${sparkle.build}"/>
        <copy file="${macosx.app.dir}/${macosx.dmg.name}"
              tofile="${delta.history.location}/${sparkle.build}/${package.name}.dmg"
              overwrite="true"/>

        <!-- now delete old one -->
        <antcall target="-delete-oldest-delta-data"/>
    </target>

    <!-- just checks if current build is the same number as the history build
     so we do not build delta against the same build -->
    <target name="-make-sparkle-pre-delta">

        <basename property="old.sparkle.build" file="${build-location}"/>

        <!-- we must skip building deltas for current build
            and if the source setup file is missing
        -->
        <condition property="process.delta">
            <and>
                <not>
                    <equals arg1="${old.sparkle.build}" arg2="${build.label}"/>
                </not>
                <available file="${build-location}\${package.name}.dmg"/>
            </and>
        </condition>

        <antcall target="-make-sparkle-delta"/>
    </target>

    <target name="-make-sparkle-delta"
            if="process.delta">

        <basename property="old.sparkle.build" file="${build-location}"/>
        <echo message="Creating dmg delta for ${old.sparkle.build}-${sparkle.build}"/>


        <!-- create temp dir for making delta diffs -->
        <mkdir dir="${macosx.app.dir}/tmp/${old.sparkle.build}"/>

        <!-- Attach the  image -->
        <exec executable="/usr/bin/hdiutil" os="Mac OS X" failonerror="true">
            <arg value="attach"/>
            <arg value="${build-location}/${package.name}.dmg"/>
            <arg value="-mountroot"/>
            <arg value="${macosx.app.dir}/tmp/${old.sparkle.build}/"/>
        </exec>

        <!-- make the actual diff -->
        <exec executable="${macosx.app.dir}/tmp/BinaryDelta"
              os="Mac OS X" failonerror="true">
            <arg value="create"/>
            <arg value="${macosx.app.dir}/tmp/${old.sparkle.build}/${application.name}/${application.name}.app"/>
            <arg value="${macosx.app.dir}/tmp/${application.name}/${application.name}.app"/>
            <arg value="${macosx.app.dir}/${application.name}-${old.sparkle.build}-to-${sparkle.build}.delta"/>
        </exec>

        <!-- Detach the temporary image -->
        <exec executable="/usr/bin/hdiutil" os="Mac OS X" failonerror="true">
            <arg value="detach"/>
            <arg value="${macosx.app.dir}/tmp/${old.sparkle.build}/${application.name}"/>
        </exec>

        <!-- delete the temp dir -->
        <delete dir="${macosx.app.dir}/tmp/${old.sparkle.build}"/>

        <exec executable="bash" os="Mac OS X" failonerror="true"
              outputproperty="delta.signature.base64">
            <arg value="-c"/>
            <arg value="openssl dgst -sha1 -binary &lt; '${macosx.app.dir}/${application.name}-${old.sparkle.build}-to-${sparkle.build}.delta' | openssl dgst -dss1 -sign ${sparkle.signiture.location} | openssl enc -base64"/>
        </exec>

        <length file="${macosx.app.dir}/${application.name}-${old.sparkle.build}-to-${sparkle.build}.delta"
                property="delta.file.length" />

        <copy file="${macosx.app.dir}/sparkle/updates-tmp.xml"
              tofile="${macosx.app.dir}/sparkle/updates-tmp1.xml"/>
        <move file="${macosx.app.dir}/sparkle/updates-tmp1.xml"
                tofile="${macosx.app.dir}/sparkle/updates-tmp.xml"
                overwrite="true" filtering="yes">

        <filterset recurse="false">
            <filter token="SPARKLE_DELTAS" value="

        &lt;enclosure type=&quot;application/octet-stream&quot;
      sparkle:version=&quot;${sparkle.build}&quot; length=&quot;${delta.file.length}&quot;
          sparkle:dsaSignature=&quot;${delta.signature.base64}&quot;
      sparkle:deltaFrom=&quot;${old.sparkle.build}&quot;
      url=&quot;${sparkle.delta.download.location}/${application.name}-${old.sparkle.build}-to-${sparkle.build}.delta&quot;/&gt;
          @SPARKLE_DELTAS@
        " />
        </filterset>
      </move>

    </target>

    <!-- Copies the splash to the ${target.dir} folder -->
    <target name="enable-splash"
            if="splashscreen.enable">
        <copy file="${inst.resrc}/resources/splash.gif" todir="${target.dir}"/>
    </target>

    <target name="-delete-oldest-delta-data">
        <resourcecount property="build.history.current.size">
            <dirset dir="${delta.history.location}">
                <include name="*"/>
            </dirset>
        </resourcecount>
        <math result="build.history.to.delete"
            operand1="${build.history.current.size}"
            operation="-"
            operand2="${delta.history.size}"
            datatype="int"/>

        <timestampselector outputsetid="oldest.builds"
                        count="${build.history.to.delete}"
                        age="eldest">
          <path>
             <dirset dir="${delta.history.location}">
               <include name="*" />
             </dirset>
          </path>
        </timestampselector>

        <foreach param="build.to.delete"
                 target="-delete-oldest-delta-data-folder">
            <path refid="oldest.builds"/>
        </foreach>
    </target>
    <target name="-delete-oldest-delta-data-folder">
        <echo message="!!! Deleting old data dir ${build.to.delete} !!! " />
        <delete dir="${build.to.delete}" failonerror="false"/>
    </target>

    <!-- Outputs a warning notifying the user that a dpkg tool is missing. -->
    <target name="dpkg-build-warning" unless="dpkg.build.present">
      <echo message="Either the ${dpkg-buildpackage} tool or the debhelper tools was not found on your system."/>
      <echo message="Try installing the 'dpkg-dev' and 'debhelper' packages"/>
    </target>

    <!-- Create a Debian package - This needs dpkg utilities
         The target uses the existing jni binaries

        For cross compiling i386 on amd64
        ln -s /usr/bin/strip /usr/bin/i486-linux-gnu-strip
        ln -s /usr/bin/objdump /usr/bin/i486-linux-gnu-objdump
        dpkg-cross
        dpkg -add-architecture i386 (the option is with two dashes!)
        apt-get update
        apt-get install libc6:i386 libpulse0:i386 libx11-6:i386 libxv1:i386 libstdc++6:i386 libasound2:i386
    -->
    <target name="-make-deb-package" depends="init,version,load-properties,dpkg-build-warning"
            if="dpkg.build.present"
            description="Create a .deb package for Debian (needs dpkg utilities)">

        <!-- create jitsi copy to work on it -->
        <property name="debian.target.dir"
                  value="${debian.tmp.dir}/${package.name}" />
        <mkdir dir="${debian.target.dir}"/>

        <antcall target="deb-copy-jitsi">
            <param name="target.dir" value="${debian.target.dir}"/>
        </antcall>

        <antcall target="deb-copy-jitsi-libs">
            <param name="target.dir" value="${debian.target.dir}"/>
        </antcall>

        <property name="debianize.dir" value="${debian.target.dir}/debian" />
        <!-- the target we will use to build the package,
            depends whether we are building source package or just a deb -->
        <property name="debianize.build.target" value="make-and-deploy" />

        <antcall target="dpkg-debianize" />

        <!-- Build binary .deb package -->
        <exec executable="${dpkg-buildpackage}" dir="${debian.target.dir}">
            <arg value="-tc"/>
            <arg value="-us"/>
            <arg value="-uc"/>
            <arg value="-b"/>
            <arg value="-d"/>
            <arg value="-a${deb-arch}"/>
        </exec>

        <move todir="${debian.dir}">
            <fileset dir="${debian.tmp.dir}">
                <include name="${package.name}*"/>
                <!-- exclude the source folder -->
                <exclude name="${package.name}"/>
            </fileset>
        </move>

        <!--
            Copy changelogs before deleting them, these changelogs are used by
            tools like Update Manager in Ubuntu distribution. -->
        <copy file="${debianize.dir}/changelog"
            tofile="${debian.dir}/${package.name}_${sip-communicator.version}_${deb-arch}.changelog"/>

        <delete dir="${debian.tmp.dir}"/>
    </target>
    
    <target name="deb-32">
        <antcall target="-make-deb-package">
            <param name="deb-arch" value="i386"/>
        </antcall>
    </target>

    <target name="deb-64">
        <antcall target="-make-deb-package">
            <param name="deb-arch" value="amd64"/>
        </antcall>
    </target>
    
    <target name="deb" depends="deb-32,deb-64"/>

    <!-- Outputs a warning notifying the user that dpkg-scanpackages is not installed. -->
    <target name="dpkg-scan-warning" unless="dpkg.scan.present">
        <echo message="The ${dpkg-scanpackages} tool was not found on your system."/>
        <echo message="Try installing the 'dpkg-dev' package "/>
    </target>

    <!-- Uses the templates to create necessary files for debian folder
        uses debianize.dir as destination folder
        used from deb-src and deb target. If property debianize.src.pkg is set
        means the target is used by deb-src, if not it is the deb target
        that is calling us.
    -->
    <target name="dpkg-debianize" depends="define-ant-contrib-task">

        <mkdir dir="${debianize.dir}"/>
        <mkdir dir="${debianize.dir}/../lib"/>
        <mkdir dir="${debianize.dir}/sh"/>

        <!-- Prepare felix.client.run.properties and put some specific bundles -->
        <copy file="${lib}/felix.client.run.properties"
              tofile="${debianize.dir}/../lib/felix.client.run.properties"
              overwrite="true"/>
        <replace file="${debianize.dir}/../lib/felix.client.run.properties"
                 token="reference:file:sc-bundles/swingnotification.jar \">
            <replacevalue><![CDATA[reference:file:sc-bundles/galagonotification.jar \
 reference:file:sc-bundles/swingnotification.jar \]]></replacevalue>
        </replace>
        <replace file="${debianize.dir}/../lib/felix.client.run.properties"
                 token=" reference:file:lib/bundle/org.apache.felix.bundlerepository-1.6.4.jar">
            <replacevalue></replacevalue>
        </replace>
        <replace file="${debianize.dir}/../lib/felix.client.run.properties"
                 token=" reference:file:sc-bundles/os-specific/macosx/growlnotification.jar \${line.separator}">
            <replacevalue></replacevalue>
        </replace>

        <copy file="${lib}/jitsi-defaults.properties"
              tofile="${debianize.dir}/../lib/jitsi-defaults.properties"
              overwrite="true"
              failonerror="false"/>

        <!-- Put correct version in the sip-communicator executable file -->
        <copy file="${inst.resrc}/debian/jitsi.sh.tmpl"
              tofile="${debianize.dir}/sh/${package.name}"
              overwrite="true"/>
        <replace file="${debianize.dir}/sh/${package.name}"
                 token="_PACKAGE_NAME_"
                 value="${package.name}"/>
        <antcall target="-deb-sh-update-homedir"/>

        <!-- only if called from deb target -->
        <antcall target="-deb-sh-file-update"/>

        <!-- Prepare the changelog file -->
        <copy file="${inst.resrc}/debian/changelog.tmpl"
              tofile="${debianize.dir}/changelog"
              overwrite="true"/>
        <replace file="${debianize.dir}/changelog"
                 token="_VERSION_"
                 value="${sip-communicator.version}-1"/>
        <replace file="${debianize.dir}/changelog"
                 token="_PACKAGE_NAME_"
                 value="${package.name}"/>

        <get src="${link.update.changelog.prefix}/extended-changelog-${label}.txt"
             dest="changelog-${label}.txt" ignoreerrors="true"/>
        <loadfile property="latest.changelog"
                  srcFile="changelog-${label}.txt" failonerror="false"/>
        <!-- Load a default value if file with changelogs is missing -->
        <condition property="latest.changelog" value="Nightly builds">
            <not>
                <isset property="latest.changelog"/>
            </not>
        </condition>
        <replace file="${debianize.dir}/changelog"
                 token="_CHANGES_"
                 value="${latest.changelog}"/>
        <delete file="changelog-${label}.txt"/>

        <!-- Prepare the control file -->
        <antcall target="-deb-control-file"/>

        <!-- Prepare the rules file -->
        <copy file="${inst.resrc}/debian/rules.tmpl"
              tofile="${debianize.dir}/rules"
              overwrite="true"/>

        <!-- makes some checks for custom set targets and sets build target -->
        <antcall target="-deb-build-target-replace"/>

        <replace file="${debianize.dir}/rules"
             token="_PACKAGE_NAME_"
             value="${package.name}"/>
        <chmod file="${debianize.dir}/rules" perm="+x"/>

        <!-- update the rules file if invoked from within deb target -->
        <antcall target="-deb-rules-file-update"/>

        <copy file="${inst.resrc}/debian/package.install.tmpl"
              tofile="${debianize.dir}/${package.name}.install"
              overwrite="true"/>
        <replace file="${debianize.dir}/${package.name}.install"
                 token="_PACKAGE_NAME_"
                 value="${package.name}"/>

        <available property="jitsi-default-overrides.exists"
                   file="${lib}/jitsi-default-overrides.properties"/>
        <antcall target="-deb-manage-jitsi-default-overrides"/>

        <!-- change the package.install file if used from deb target -->
        <antcall target="-deb-package.install-file-update"/>

        <!-- copies links file only if used in the context of deb-src target -->
        <antcall target="-deb-links-file"/>

        <copy file="${inst.resrc}/debian/README.embedded-libraries"
              tofile="${debianize.dir}/README.embedded-libraries"
              overwrite="true"/>

        <!-- Prepare man page file -->
        <copy file="${inst.resrc}/debian/jitsi.1.tmpl"
              tofile="${debianize.dir}/${package.name}.1"
              overwrite="true"/>
        <replace file="${debianize.dir}/${package.name}.1"
                 token="_PACKAGE_NAME_"
                 value="${package.name}"/>
        <replace file="${debianize.dir}/${package.name}.1"
                 token="_APP_NAME_"
                 value="${application.name}"/>
        <copy file="${inst.resrc}/debian/package.manpages.tmpl"
              tofile="${debianize.dir}/${package.name}.manpages"
              overwrite="true"/>
        <replace file="${debianize.dir}/${package.name}.manpages"
                 token="_PACKAGE_NAME_"
                 value="${package.name}"/>

        <!-- Prepare debian shortcuts -->
        <copy file="${inst.resrc}/debian/jitsi.desktop.tmpl"
              tofile="${debianize.dir}/${package.name}.desktop"
              overwrite="true"/>
        <replace file="${debianize.dir}/${package.name}.desktop"
                 token="_PACKAGE_NAME_"
                 value="${package.name}"/>
        <replace file="${debianize.dir}/${package.name}.desktop"
                 token="_APP_NAME_"
                 value="${application.name}"/>
        <copy file="${inst.resrc}/debian/jitsi.menu.tmpl"
              tofile="${debianize.dir}/${package.name}.menu"
              overwrite="true"/>
        <replace file="${debianize.dir}/${package.name}.menu"
                 token="_PACKAGE_NAME_"
                 value="${package.name}"/>
        <replace file="${debianize.dir}/${package.name}.menu"
                 token="_APP_NAME_"
                 value="${application.name}"/>
        <!-- Prepare icon files -->
        <copy file="${inst.resrc}/debian/jitsi-16.xpm"
              tofile="${debianize.dir}/${package.name}-16.xpm"
              overwrite="true"/>
        <copy file="${inst.resrc}/debian/jitsi-32.xpm"
              tofile="${debianize.dir}/${package.name}-32.xpm"
              overwrite="true"/>
        <copy file="${inst.resrc}/debian/jitsi.svg"
              tofile="${debianize.dir}/${package.name}.svg"
              overwrite="true"/>

        <!-- Put the current date in the changelog -->
        <tstamp>
            <format property="date"
                    pattern="EEE, d MMM yyyy HH:mm:ss Z"
                    locale="en,US"/>
        </tstamp>
        <replace file="${debianize.dir}/changelog"
                 token="_DATE_"
                 value="${date}"/>

        <copy file="${inst.resrc}/debian/compat"
              todir="${debianize.dir}"
              overwrite="true"/>
        <copy file="${inst.resrc}/debian/copyright"
              todir="${debianize.dir}"
              overwrite="true"/>
        <copy file="${inst.resrc}/debian/watch"
              todir="${debianize.dir}"
              overwrite="true"/>

        <!-- use postinst and postrm files only if used from deb target -->
        <antcall target="-deb-post-files-update"/>

        <copy todir="${debianize.dir}/source">
            <fileset dir="${inst.resrc}/debian/source"/>
        </copy>
        <copy todir="${debianize.dir}/patches">
            <fileset dir="${inst.resrc}/debian/patches"/>
        </copy>
    </target>

    <target name="-deb-manage-jitsi-default-overrides"
            if="${jitsi-default-overrides.exists}">
        <copy file="${lib}/jitsi-default-overrides.properties"
              tofile="${debianize.dir}/../lib/jitsi-default-overrides.properties"
              overwrite="true"
              failonerror="false"/>

        <!-- append to -->
        <concat destfile="${debianize.dir}/${package.name}.install"
            append="true"
            eol="lf"
            fixlastline="true">lib/jitsi-default-overrides.properties  usr/share/${package.name}/lib/&#010;</concat>

    </target>

    <!-- sets custom build target or a custom one -->
    <target name="-deb-build-target-replace"
            depends="-deb-build-replace-custom,-deb-build-replace"/>
    <!-- checks for custom target request by enabled property:
        debianize.build.target.custom -->
    <target name="-deb-build-replace-custom"
            if="debianize.build.target.custom">
        <replace file="${debianize.dir}/rules"
             token="_BUILD_TARGET_"
             value="copy-ready-scbundles -Dsc.basedir=${sc.basedir} -Dtarget.dir=${debian.target.dir}"/>
    </target>
    <!-- target that sets the build target that is in the property:
        -deb-build-replace -->
    <target name="-deb-build-replace">
        <replace file="${debianize.dir}/rules"
             token="_BUILD_TARGET_"
             value="${debianize.build.target}"/>
    </target>
    <!-- copies already build scbundles to the target.dir folder -->
    <target name="copy-ready-scbundles">
        <mkdir dir="${target.dir}/sc-bundles"/>
        <copy todir="${target.dir}/sc-bundles">
              <fileset dir="${sc.basedir}/sc-bundles">
                    <include name="**/*"/>
              </fileset>
        </copy>
    </target>

    <target name="-deb-sh-update-homedir"
            if="application.home.dirname">
        <replace file="${debianize.dir}/sh/${package.name}"
             token="net.java.sip.communicator.launcher.SIPCommunicator"
             value="-Dnet.java.sip.communicator.SC_HOME_DIR_NAME=${application.home.dirname} net.java.sip.communicator.launcher.SIPCommunicator"/>
    </target>

    <target name="-deb-control-file"
            depends="-deb-control-for-src,-deb-control-for-deb"/>
    <!-- when using target deb-src use and control-src file -->
    <target name="-deb-control-for-src"
            if="debianize.src.pkg">

        <copy file="${inst.resrc}/debian/control-src.tmpl"
              tofile="${debianize.dir}/control"
              overwrite="true"/>
        <replace file="${debianize.dir}/control"
                 token="_PACKAGE_NAME_"
                 value="${package.name}"/>
        <replace file="${debianize.dir}/control"
                 token="_APP_NAME_"
                 value="${application.name}"/>
        <replace file="${debianize.dir}/control"
                 token="_APP_WEB_"
                 value="${application.web}"/>
    </target>
    <!--
        when called from deb target use the control file (not control-src one)
    -->
    <target name="-deb-control-for-deb"
            unless="debianize.src.pkg">
        <copy file="${inst.resrc}/debian/control.tmpl"
              tofile="${debianize.dir}/control"
              overwrite="true"/>
        <replace file="${debianize.dir}/control"
                 token="_PACKAGE_NAME_"
                 value="${package.name}"/>
        <replace file="${debianize.dir}/control"
                 token="_APP_NAME_"
                 value="${application.name}"/>
        <replace file="${debianize.dir}/control"
                 token="_APP_WEB_"
                 value="${application.web}"/>
    </target>
    <!-- update the rules file if invoked from within deb target -->
    <target name="-deb-rules-file-update"
            unless="debianize.src.pkg">
        <!-- first comment current override_dh_install-indep: rule -->
        <replace file="${debianize.dir}/rules"
                 token="&#009;dh_install -p$(PACKAGE_NAME) "
                 value="#&#009;dh_install -p$(PACKAGE_NAME) "/>
        <replace file="${debianize.dir}/rules"
                 token="override_dh_install-indep:"
                 value="#override_dh_install-indep:"/>
        <replace file="${debianize.dir}/rules"
                 token="&#009;$(ANT) -file build.xml -Ddebian.bundles.dest"
                 value="#&#009;$(ANT) -file build.xml -Ddebian.bundles.dest"/>

        <!-- now convert the rule override_dh_install-arch into
            override_dh_install by adding the needed rules -->
        <replace file="${debianize.dir}/rules"
                 token="override_dh_install-arch:"
                 value="override_dh_install:"/>
        <replace file="${debianize.dir}/rules"
                 token="lib$(PACKAGE_NAME)-jni"
                 value="$(PACKAGE_NAME)"/>
        <replace file="${debianize.dir}/rules"
                 token=" usr/lib/jni/"
                 value=" usr/share/$(PACKAGE_NAME)/lib/native -Xslickless.jar -Xslick-runner.jar -X-slick.jar -X.svn"/>

        <!-- some libs are not found when adding libmozembed-linux-gtk1.2.so
            and libjdic.so to deb and i386 package fail to build -->
        <replace file="${debianize.dir}/rules"
                 token="get-orig-source:"
                 value="override_dh_shlibdeps:&#010;&#009;dh_shlibdeps -Xlibjunbound.so -Xlibsysactivitynotifications.so&#010;&#010;get-orig-source:"/>

        <!-- removes the rule override_dh_auto_clean -->
        <replace file="${debianize.dir}/rules"
                         token="override_dh_auto_clean"
                         value="#override_dh_auto_clean"/>
        <replace file="${debianize.dir}/rules"
                         token="&#009;dh_auto_clean --"
                         value="#&#009;dh_auto_clean --"/>

    </target>
    <!-- copies links file only if used in the context of deb-src target -->
    <target name="-deb-links-file"
            if="debianize.src.pkg">
        <copy file="${inst.resrc}/debian/package.links.tmpl"
              tofile="${debianize.dir}/${package.name}.links"
              overwrite="true"/>
        <replace file="${debianize.dir}/${package.name}.links"
                 token="_PACKAGE_NAME_"
                 value="${package.name}"/>
    </target>
    <!-- change the package.install file if used from deb target -->
    <target name="-deb-package.install-file-update">
        <antcall target="-deb-package.install-file-update-non-src"/>
        <antcall target="-deb-package.install-file-update-src"/>
    </target>
    <target name="-deb-package.install-file-update-non-src"
            unless="debianize.src.pkg">
        <concat destfile="${debianize.dir}/${package.name}.install"
                append="true"
                eol="lf"
                fixlastline="true">lib/*.jar usr/share/${package.name}/lib/&#010;</concat>
        <concat destfile="${debianize.dir}/${package.name}.install"
                append="true"
                eol="lf"
                fixlastline="true">lib/bundle/commons-logging.jar usr/share/${package.name}/lib/bundle/&#010;lib/bundle/log4j.jar usr/share/${package.name}/lib/bundle/&#010;</concat>
        <antcall target="-deb-package.install-file-update-splash"/>
    </target>
    <target name="-deb-package.install-file-update-splash"
            if="splashscreen.enable">
        <concat destfile="${debianize.dir}/${package.name}.install"
                append="true"
                eol="lf"
                fixlastline="true">resources/install/resources/splash.gif usr/share/${package.name}/&#010;</concat>
    </target>
    <target name="-deb-package.install-file-update-src"
            if="debianize.src.pkg">
        <property name="splashscreen.enable" value="true"/>
        <antcall target="-deb-package.install-file-update-splash"/>
    </target>

    <!-- updates the startup scritp only if called from deb target -->
    <target name="-deb-sh-file-update"
            unless="debianize.src.pkg">
        <replace file="${debianize.dir}/sh/${package.name}"
                 token="/usr/share/java/org.apache.felix.framework.jar:/usr/share/java/org.apache.felix.main.jar"
                 value="$LIBPATH/felix.jar"/>
        <replace file="${debianize.dir}/sh/${package.name}"
                 token="$SCDIR/sc-bundles/util.jar/launchutils.jar"
                 value="$SCDIR/sc-bundles/util.jar"/>
        <replace file="${debianize.dir}/sh/${package.name}"
                 token="/usr/lib/jni"
                 value="$SCDIR/lib/native"/>
    </target>
    <!-- use postinst and postrm files only if used from deb target -->
    <target name="-deb-post-files-update"
                unless="debianize.src.pkg">
        <copy file="${inst.resrc}/debian/postinst"
              tofile="${debianize.dir}/postinst"
              overwrite="true"/>
        <copy file="${inst.resrc}/debian/postrm"
              tofile="${debianize.dir}/postrm"
              overwrite="true"/>
    </target>

    <!-- Prepare to deploy the Debian package - This needs dpkg utilities -->
    <target name="deb-rel" depends="deb,dpkg-scan-warning"
            if="dpkg.scan.present"
            description="Prepare to deploy Debian package (needs dpkg utilities)">

      <mkdir dir="${debian.binary.dir}"/>
      <move todir="${debian.binary.dir}">
        <fileset dir="${debian.dir}">
          <include name="sip-communicator*386*"/>
        </fileset>
      </move>

      <exec executable="${dpkg-scanpackages}"
          dir="${debian.dir}"
          output="${debian.binary.dir}/dpkg-scanpackages.out"
          errorproperty="dpkg-scanpackages.err">
        <arg value="binary"/>
        <arg value="/dev/null"/>
      </exec>

      <exec executable="/bin/gzip"
          dir="${debian.dir}"
          input="${debian.binary.dir}/dpkg-scanpackages.out"
          output="${debian.binary.dir}/Packages.gz">
        <arg value="-9c"/>
      </exec>

      <!-- Delete the temporary file -->
      <delete file="${debian.binary.dir}/dpkg-scanpackages.out"
              quiet="yes" failonerror="false"/>

    </target>

    <!-- clean for deb-src -->
    <target name="clean-deb-src">
        <delete dir="${debian.tmp.dir}/${package.name}-${sip-communicator.version}" />
    </target>

    <!-- copies jitsi source to ${target.dir},
        the minimum source we need to build for debian using deb target -->
    <target name="deb-copy-jitsi">
        <copy todir="${target.dir}/resources">
            <fileset dir="${sc.basedir}/resources">
                <include name="**/*"/>
                <exclude name="install/**"/>
            </fileset>
            <fileset dir="${sc.basedir}/resources">
                <include name="install/build.xml"/>
                <include name="install/ant-build-config.properties"/>
                <include name="install/logging.properties"/>
                <include name="install/resources/**/*"/>
            </fileset>
        </copy>
        <copy todir="${target.dir}/src">
            <fileset dir="${src}">
                <include name="**/*"/>
                <exclude name="**/growlnotification/**"/>
                <exclude name="**/dict/**"/>
                <exclude name="**/dictaccregwizz/**"/>
                <exclude name="**/irc/**"/>
                <exclude name="**/ircaccregwizz/**"/>
                <exclude name="**/ssh/**"/>
                <exclude name="**/sshaccregwizz/**"/>
                <exclude name="**/profiler4j/**"/>
                <exclude name="**/windows/**"/>
                <exclude name="**/windows32/**"/>
                <exclude name="**/windows64/**"/>
                <exclude name="**/native/addrbook/macosx/**"/>
                <exclude name="**/native/macosx/**"/>
            </fileset>
        </copy>
        <copy todir="${target.dir}/lib">
            <fileset dir="${sc.basedir}/lib">
                <include name="installer-exclude/*.manifest.mf"/>
            </fileset>
        </copy>
        <copy todir="${target.dir}/test">
            <fileset dir="${src2}">
                <include name="**/*"/>
            </fileset>
        </copy>

        <copy todir="${target.dir}">
            <filelist dir="${sc.basedir}" files="build.xml"/>
        </copy>
    </target>

    <!-- copies jitsi libs to ${target.dir} -->
    <target name="deb-copy-jitsi-libs">
        <copy todir="${target.dir}/lib">
            <fileset dir="${sc.basedir}/lib">
                <include name="**/*"/>
            </fileset>
        </copy>
    </target>

    <!-- creates a source package for jitsi that can be used to build
        jitsi from sources including libraries and binaries. Intended to be used
        by debian package maintainer (and watch file).
        The target expects that the trunk of jitsi is in the same folder
        with libsrc and libjitsi as:
        /home/dev/debian-build:
            - trunk/
            - libsrc
            - libjitsi
     -->
    <target name="deb-src"
            depends="init,version,load-properties,clean-deb-src,dpkg-build-warning"
            if="dpkg.build.present"
            description="Create a .deb package for Debian (needs dpkg utilities)">

        <property name="debian.src.dir"
                  value="${debian.tmp.dir}/${package.name}-${sip-communicator.version}" />

        <mkdir dir="${debian.src.dir}"/>

        <antcall target="deb-copy-jitsi">
            <param name="target.dir" value="${debian.src.dir}"/>
        </antcall>

        <property name="debianize.dir" value="${debian.src.dir}/debian" />
        <!-- the target we will use to build the package,
            depends whether we are building source package or just a deb -->
        <property name="debianize.build.target"
                  value="init deb-src-rebuild" />

        <!-- property indicating we are building a debian source package -->
        <property name="debianize.src.pkg"
                  value="true" />
        <!--
            debianize the folder, using the files from resources/install/debian
        -->
        <antcall target="dpkg-debianize" />

        <!-- Now create some links -->
        <mkdir dir="${debian.src.dir}/lib/os-specific/linux"/>
        <mkdir dir="${debian.src.dir}/lib/installer-exclude"/>
        <mkdir dir="${debian.src.dir}/lib/src"/>

        <!-- and add some sources-->
        <!-- here we suppose jitsi is in the same folder with libjitsi
            and libsrc
        -->
        <!-- Libjitsi -->
        <mkdir dir="${debian.src.dir}/lib/src/libjitsi/lib"/>
        <copy todir="${debian.src.dir}/lib/src/libjitsi">
            <fileset dir="${sc.basedir}/../libjitsi">
                <include name="src/**"/>
                <include name="build.xml"/>
                <exclude name="**/macosx/**"/>
                <exclude name="**/windows/**"/>
            </fileset>
        </copy>

        <!-- weupnp -->
        <unzip src="${sc.basedir}/../libsrc/weupnp.zip"
               dest="${debian.src.dir}/lib/src"/>

        <!-- ice4j -->
        <unzip src="${sc.basedir}/../libsrc/ice4j.zip"
               dest="${debian.src.dir}/lib/src">
            <patternset>
                <exclude name="**/.svn/**"/>
                <exclude name="**/*.jar"/>
            </patternset>
        </unzip>
        <delete dir="${debian.src.dir}/lib/src/ice4j/lib" includes="*"/>

        <!-- sdes -->
        <unzip src="${sc.basedir}/../libsrc/sdes4j.zip"
               dest="${debian.src.dir}/lib/src">
            <patternset>
                <exclude name="**/.svn"/>
            </patternset>
        </unzip>

        <!-- jsip -->
        <unzip src="${sc.basedir}/../libsrc/jsip.zip"
               dest="${debian.src.dir}/lib/src/">
            <patternset>
                <exclude name="**/.svn/**"/>
                <exclude name="**/*.jar"/>
            </patternset>
        </unzip>

        <!-- jdic_misc -->
        <unzip src="${sc.basedir}/../libsrc/jdic_misc.zip"
               dest="${debian.src.dir}/lib/src/">
            <patternset>
                <exclude name="**/.svn/**"/>
            </patternset>
        </unzip>

        <!-- fmj -->
        <unzip src="${sc.basedir}/../libsrc/fmj.zip"
               dest="${debian.src.dir}/lib/src">
            <patternset>
                <exclude name="**/macosx/**"/>
                <exclude name="**/windows/**"/>
                <exclude name="**/lib/**"/>
                <exclude name="**/*.so"/>
                <exclude name="**/*.dll"/>
            </patternset>
        </unzip>

        <!-- zrtp4j -->
        <unzip src="${sc.basedir}/../libsrc/zrtp4j-src-3.2.0.zip"
               dest="${debian.src.dir}/lib/src"/>

        <!-- joscar -->
        <unzip src="${sc.basedir}/../libsrc/joscar.zip"
               dest="${debian.src.dir}/lib/src">
            <patternset>
                <exclude name="**/*.jar"/>
                <exclude name="**/*.class"/>
            </patternset>
        </unzip>
        <unzip src="${debian.src.dir}/lib/src/joscar/lib/annotations.zip"
               dest="${debian.src.dir}/lib/src/joscar/lib/annotations"/>
        <unzip src="${sc.basedir}/../libsrc/jsocks.zip"
               dest="${debian.src.dir}/lib/src"/>

        <!-- bccontrib -->
        <unzip src="${sc.basedir}/../libsrc/bccontrib.zip"
               dest="${debian.src.dir}/lib/src/">
            <patternset>
                <exclude name="**/*.jar"/>
                <exclude name="**/*.class"/>
            </patternset>
        </unzip>

        <!-- OrangeExtensions -->
        <unzip src="${sc.basedir}/../libsrc/OrangeExtensions.zip"
               dest="${debian.src.dir}/lib/src"/>

        <!-- swing worker -->
        <unzip src="${sc.basedir}/../libsrc/swing-worker-src.zip"
               dest="${debian.src.dir}/lib/src/swingworker"/>

        <!-- smack -->
        <unzip src="${sc.basedir}/../libsrc/smack/smack_src_3_2_2.zip"
               dest="${debian.src.dir}/lib/src">
            <patternset>
                <exclude name="**/*.jar"/>
                <exclude name="**/*.class"/>
            </patternset>
        </unzip>

        <!-- jingle nodes -->
        <unzip src="${sc.basedir}/../libsrc/jnsapi_src.zip"
               dest="${debian.src.dir}/lib/src/jnsapi"/>

        <!-- java-jml-->
        <unzip src="${sc.basedir}/../libsrc/java-jml.zip"
               dest="${debian.src.dir}/lib/src"/>

        <!-- jymsg -->
        <unzip src="${sc.basedir}/../libsrc/jymsg.zip"
               dest="${debian.src.dir}/lib/src"/>

        <!-- dhcp4j -->
        <unzip src="${sc.basedir}/../libsrc/dhcp4java-1.00.src.zip"
               dest="${debian.src.dir}/lib/src/dhcp4java"/>

        <!-- otr4j -->
        <mkdir dir="${debian.src.dir}/lib/src/otr4j/lib"/>
        <copy todir="${debian.src.dir}/lib/src/otr4j">
            <fileset dir="${sc.basedir}/../otr4j">
                <include name="src/main/**"/>
                <exclude name="**/.git/**"/>
            </fileset>
        </copy>

        <!-- myspell-->
        <unzip src="${sc.basedir}/../libsrc/jmyspell-core-src.zip"
               dest="${debian.src.dir}/lib/src/jmyspell"/>

        <!-- jfontchooser -->
        <unzip src="${sc.basedir}/../libsrc/jfontchooser-src.zip"
                       dest="${debian.src.dir}/lib/src/jfontchooser"/>

        <!-- gdata -->
        <unzip src="${sc.basedir}/../libsrc/gdata-src.java-1.43.0.zip"
               dest="${debian.src.dir}/lib/src">
                <patternset>
                    <exclude name="**/*.orig"/>
                    <exclude name="**/*.jar"/>
                </patternset>
        </unzip>

        <!-- jmork -->
        <unzip src="${sc.basedir}/../libsrc/jmork-1.0.5-SNAPSHOT-sources.jar"
               dest="${debian.src.dir}/lib/src/jmork"/>

        <!-- native -->
        <mkdir dir="${debian.src.dir}/lib/native/linux"/>
        <mkdir dir="${debian.src.dir}/lib/native/linux-64"/>

        <!-- portaudio -->
        <unzip src="${sc.basedir}/../libsrc/portaudio.zip"
               dest="${debian.src.dir}/lib/src/">
            <patternset>
                <exclude name="**/*.log"/>
                <exclude name="**/*.orig"/>
                <exclude name="**/bindings/**"/>
                <exclude name="**/macosx/**"/>
                <exclude name="**/windows/**"/>
            </patternset>
        </unzip>
        <exec   dir="${debian.src.dir}/lib/src/portaudio"
                executable="make"
                failonerror="true">
            <arg value="distclean" />
        </exec>

        <!-- pack as original sources -->
        <tar destfile="${debian.dir}/${package.name}_${sip-communicator.version}.orig.tar.gz"
             compression="gzip"
             basedir="${debian.src.dir}"/>
        <delete dir="${debian.tmp.dir}"/>
    </target>

    <!-- clean for debuild -->
    <target name="clean-debuild" depends="load-properties">
        <property name="debian.src.dir" value="." />

        <!-- libjitsi clean -->
        <ant dir="${debian.src.dir}/lib/src/weupnp"
             inheritAll="false"
             target="clean"/>
        <ant dir="${debian.src.dir}/lib/src/ice4j"
             inheritAll="false"
             target="clean"/>
        <ant dir="${debian.src.dir}/lib/src/sdes4j"
             inheritAll="false"
             target="clean"/>
        <ant dir="${debian.src.dir}/lib/src/jsip"
             inheritAll="false"
             target="clean"/>
        <delete dir="${debian.src.dir}/lib/src/bccontrib/target"
            failonerror="false"/>
        <ant dir="${debian.src.dir}/lib/src/fmj"
             inheritAll="false"
             target="clean"/>
        <ant dir="${debian.src.dir}/lib/src/zrtp4j"
             inheritAll="false"
             target="clean"/>
        <ant dir="${debian.src.dir}/lib/src/libjitsi"
             inheritAll="false"
             target="clean"/>

        <!-- main build of jitsi -->
        <ant dir="${debian.src.dir}/lib/src/swingworker"
             inheritAll="false"
             target="clean"/>
        <exec   dir="${debian.src.dir}/lib/src/joscar"
                executable="ant"
                failonerror="false">
            <arg value="clean" />
        </exec>
        <delete dir="${debian.src.dir}/lib/src/jsocks/classes"
                failonerror="false"/>
        <delete dir="${debian.src.dir}/lib/src/joscar/lib/annotations/classes"
                failonerror="false"/>
        <exec   dir="${debian.src.dir}/lib/src/smack_src_3_2_2/build"
                executable="ant"
                failonerror="false">
            <arg value="clean" />
        </exec>
        <delete dir="${debian.src.dir}/lib/src/jnsapi/classes"
                failonerror="false"/>
        <delete dir="${debian.src.dir}/lib/src/java-jml/classes"
                failonerror="false"/>
        <ant dir="${debian.src.dir}/lib/src/misc"
            inheritAll="true"
            inheritRefs="true"
            target="clean"/>
        <ant dir="${debian.src.dir}/lib/src/jymsg"
            inheritAll="false"
            target="clean"/>
        <delete dir="${debian.src.dir}/lib/src/dhcp4java/classes"
                failonerror="false"/>
        <delete dir="${debian.src.dir}/lib/src/otr4j/bin"
                failonerror="false"/>
        <delete dir="${debian.src.dir}/lib/src/jmyspell/classes"
                failonerror="false"/>
        <delete dir="${debian.src.dir}/lib/src/jfontchooser/classes"
                failonerror="false"/>
        <delete dir="${debian.src.dir}/lib/src/OrangeExtensions/classes"
                failonerror="false"/>
        <ant dir="${debian.src.dir}/lib/src/gdata-java-client/java"
            inheritAll="false"
            target="clean"
            antfile="build-src.xml"/>
        <delete dir="${debian.src.dir}/lib/src/gdata-java-client/java/classes"
                failonerror="false"/>
        <delete dir="${debian.src.dir}/lib/src/gdata-java-client/java/genfiles"
                failonerror="false"/>
        <delete dir="${debian.src.dir}/lib/src/jmork/classes"
                failonerror="false"/>

        <!-- delete all jars -->
        <delete failonerror="false">
            <fileset dir="${debian.src.dir}/lib">
                <include name="**/*.jar"/>
                <include name="**/*.so"/>
                <include name="**/*.zip"/>
                <include name="**/history.xml"/>
            </fileset>
        </delete>

        <!-- deletes the symbolic links left as delete target skips them
         if if removeNotFollowedSymlinks is set -->
        <exec   dir="${debian.src.dir}/lib"
                executable="find"
                failonerror="false">
            <arg value="." />
            <arg value="-name" />
            <arg value="*.jar" />
            <arg value="-delete" />
        </exec>

    </target>

    <!-- this target is dependent of deb-src-rebuild and
     both are normally invoked while building debian source package -->
    <target name="deb-src-build-libjitsi" depends="load-properties">

        <dirname property="current.basedir" file="${ant.file.jitsi}"/>
        <property name="debian.src.dir" value="${current.basedir}" />

        <mkdir dir="${debian.src.dir}/lib/src/libjitsi/lib"/>

        <!-- weupnp -->
        <ant dir="${debian.src.dir}/lib/src/weupnp"
             inheritAll="false"
             target="jar"/>
        <symlink resource="../src/weupnp/weupnp.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude/weupnp-0.1.2-SNAPSHOT.jar"/>
        <symlink resource="../../weupnp/weupnp.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/src/ice4j/lib/weupnp-0.1.2-SNAPSHOT.jar"/>

        <!-- sdes -->
        <mkdir dir="${debian.src.dir}/lib/src/sdes4j/lib"/>
        <symlink resource="/usr/share/java/commons-codec.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/src/sdes4j/lib/commons-codec.jar"/>
        <mkdir dir="${debian.src.dir}/lib/src/sdes4j/lib"/>
        <ant dir="${debian.src.dir}/lib/src/sdes4j"
             inheritAll="false"
             target="jar">
        </ant>
        <symlink resource="../../sdes4j/build/SDES4J-1.0.1.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/src/libjitsi/lib"/>

        <symlink resource="/usr/share/java/org.apache.felix.framework.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/src/libjitsi/lib/felix.jar"/>
        <symlink resource="/usr/share/java/json_simple.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/src/libjitsi/lib"/>

        <symlink resource="/usr/share/java/org.apache.felix.framework.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/felix.jar"/>
        <symlink resource="/usr/share/java/org.apache.felix.main.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/installer-exclude/"/>

        <!-- jsip -->
        <symlink resource="/usr/share/java/log4j-1.2.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/src/jsip/lib/log4j-1.2.15.jar"/>
        <ant dir="${debian.src.dir}/lib/src/jsip"
             inheritAll="false"
             target="dist">
        </ant>
        <symlink resource="../../jsip/jain-sip-sdp-1.2.159.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/src/libjitsi/lib/jain-sdp.jar"/>
         <symlink resource="../../jsip/jain-sip-sdp-1.2.159.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/src/ice4j/lib/jain-sdp.jar"/>  
                 
        <!-- ice4j -->
        <ant dir="${debian.src.dir}/lib/src/ice4j"
             inheritAll="false"
             target="jar">
            <property name="src2" value="src"/>
        </ant>
        <symlink resource="../../ice4j/ice4j.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/src/libjitsi/lib"/>

        <!-- compile and pack bccontrib -->
        <mkdir dir="${debian.src.dir}/lib/src/bccontrib/target/classes"/>
        <javac debug="false" optimize="true"
            destdir="${debian.src.dir}/lib/src/bccontrib/target/classes"
            nowarn="false"
            source="1.5" target="1.5" fork="true">
            <src path="${debian.src.dir}/lib/src/bccontrib/src/main/java"/>
            <classpath>
                <pathelement location="/usr/share/java/bcprov.jar"/>
            </classpath>
        </javac>
        <jar compress="true"
             destfile="${debian.src.dir}/lib/src/bccontrib/target/bccontrib-1.0-SNAPSHOT.jar">
            <fileset dir="${debian.src.dir}/lib/src/bccontrib/target/classes"/>
            <manifest>
                <attribute name="Bundle-Name" value="bccontrib"/>
                <attribute name="Bundle-SymbolicName"
                           value="org.jitsi.bccontrib"/>
                <attribute name="Bundle-Version" value="1.0.5.SNAPSHOT"/>

                <attribute name="Import-Package"
                    value="org.bouncycastle.crypto,
org.bouncycastle.crypto.digests,
org.bouncycastle.crypto.engines,
org.bouncycastle.crypto.params,
org.bouncycastle.crypto.prng"/>
                <attribute name="Export-Package"
                    value="org.jitsi.bccontrib.digests,
org.jitsi.bccontrib.engines,
org.jitsi.bccontrib.macs,
org.jitsi.bccontrib.params,
org.jitsi.bccontrib.prng,
org.jitsi.bccontrib.util"/>
            </manifest>
        </jar>
        <symlink resource="../../bccontrib/target/bccontrib-1.0-SNAPSHOT.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/src/libjitsi/lib"/>

        <!-- compile and pack fmj -->
        <property name="fmj.src.folder" value="${debian.src.dir}/lib/src/fmj"/>
        <mkdir dir="${fmj.src.folder}/build/classes" />
        <javac debug="false" optimize="true"
            destdir="${fmj.src.folder}/build/classes"
            nowarn="false"
            source="1.5" target="1.5" fork="true">
            <src path="${fmj.src.folder}/src"/>
            <src path="${fmj.src.folder}/src.capture"/>
            <src path="${fmj.src.folder}/src.ejmf"/>
            <src path="${fmj.src.folder}/src.apps"/>
            <src path="${fmj.src.folder}/src.ffmpeg-java"/>
            <src path="${fmj.src.folder}/src.fmjstudio"/>
            <src path="${fmj.src.folder}/src.gst"/>
            <src path="${fmj.src.folder}/src.rtp"/>
            <src path="${fmj.src.folder}/src.sip-communicator"/>
            <src path="${fmj.src.folder}/src.stubs"/>
            <src path="${fmj.src.folder}/src.sunibm.base"/>
            <src path="${fmj.src.folder}/src.sunibm.replace"/>
            <src path="${fmj.src.folder}/src.t4l"/>
            <src path="${fmj.src.folder}/src.theora-java"/>
            <src path="${fmj.src.folder}/src.utils"/>

            <exclude name="**/civil/**" />
            <exclude name="net/sf/fmj/media/cdp/GlobalCaptureDevicePlugger.java" />
            <exclude name="net/sf/fmj/ejmf/toolkit/gui/**"/>
            <exclude name="net/java/**" />
            <exclude name="net/sf/fmj/apps/**" />
            <exclude name="net/sf/fmj/capture/**" />
            <exclude name="net/sf/fmj/ds/**" />
            <exclude name="net/sf/fmj/ffmpeg_java/**" />
            <exclude name="net/sf/fmj/gst/**" />
            <exclude name="net/sf/fmj/gui/**" />
            <exclude name="net/sf/fmj/test/**" />
            <exclude name="net/sf/fmj/theora_java/**" />
            <exclude name="net/sf/fmj/qt/**" />
            <exclude name="net/sf/fmj/ui/**" />
            <exclude name="net/sf/jdshow/**" />
            <exclude name="fi/iki/elonen/nanohttpd/**" />

        </javac>
        <jar compress="true" destfile="${fmj.src.folder}/fmj.jar">
            <fileset dir="${fmj.src.folder}/build/classes">
                <exclude name="net/sf/fmj/test/*" />
            </fileset>
        </jar>
        <symlink resource="../../fmj/fmj.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/src/libjitsi/lib/fmj.jar"/>

        <!-- zrtp -->
        <mkdir dir="${debian.src.dir}/lib/src/zrtp4j/lib"/>
        <symlink resource="../../bccontrib/target/bccontrib-1.0-SNAPSHOT.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/src/zrtp4j/lib"/>
        <symlink resource="/usr/share/java/bcprov.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/src/zrtp4j/lib/bcprov-jdk15on-148.jar"/>
        <!-- its not error zrtp build expects jmf.jar -->
        <symlink resource="../../fmj/fmj.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/src/zrtp4j/lib/jmf.jar"/>
        <symlink resource="/usr/share/java/junit.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/src/zrtp4j/lib/junit.jar"/>
        <ant dir="${debian.src.dir}/lib/src/zrtp4j"
             inheritAll="false"
             target="jar">
        </ant>

        <!-- libjitsi -->
        <symlink resource="../../zrtp4j/dist/zrtp4j-light.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/src/libjitsi/lib"/>
        <symlink resource="../../bccontrib/target/bccontrib-1.0-SNAPSHOT.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/src/libjitsi/lib"/>
        <symlink resource="/usr/share/java/bcprov.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/src/libjitsi/lib"/>
        <symlink resource="/usr/share/java/bcpkix.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/src/libjitsi/lib"/>

        <symlink resource="/usr/share/java/jna.jar"
                 link="${debian.src.dir}/lib/src/libjitsi/lib"/>

        <ant dir="${debian.src.dir}/lib/src/libjitsi"
             inheritAll="false"
             target="jar">
        </ant>
        <symlink resource="../src/libjitsi/libjitsi.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/installer-exclude"/>

        <symlink resource="/usr/share/java/ant.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/installer-exclude"/>
    </target>

    <!-- Normally this target is invoked by debian source package -->
    <target name="deb-src-rebuild"
            depends="init,deb-src-build-libjitsi,version">

        <property name="debian.src.dir"
            value="${debian.tmp.dir}/${package.name}-${sip-communicator.version}" />

        <!-- swingworker -->
        <ant dir="${debian.src.dir}/lib/src/swingworker"
             inheritAll="false"
             target="bundles">
        </ant>
        <symlink resource="../src/swingworker/dist/bundles/swing-worker.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude/swing-worker-1.2.jar"/>

        <!-- joscar -->
        <mkdir dir="${debian.src.dir}/lib/src/jsocks/classes"/>
        <javac debug="true"
            deprecation="true" destdir="${debian.src.dir}/lib/src/jsocks/classes"
            nowarn="false"
            source="1.5" target="1.5" fork="true">
                <src path="${debian.src.dir}/lib/src/jsocks"/>
                <exclude name="test/**" />
                <include name="*.properties"/>
                <include name="*.java"/>
                <include name="*.gif"/>
        </javac>
        <jar compress="true" destfile="${debian.src.dir}/lib/src/jsocks/jsocks.jar">
            <zipfileset dir="${debian.src.dir}/lib/src/jsocks/classes"/>
        </jar>
        <symlink resource="../../jsocks/jsocks.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/src/joscar/lib/jsocks.jar"/>
        <mkdir dir="${debian.src.dir}/lib/src/joscar/lib/annotations/classes"/>
        <javac classpathref="compile.class.path" debug="true"
            deprecation="true" destdir="${debian.src.dir}/lib/src/joscar/lib/annotations/classes"
            nowarn="false"
            source="1.5" target="1.5" fork="true">
                <src path="${debian.src.dir}/lib/src/joscar/lib/annotations"/>
                <include name="**/*.java" />
        </javac>
        <symlink resource="/usr/share/java/bcpkix.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/src/joscar/lib"/>
        <symlink resource="/usr/share/java/bcprov.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/src/joscar/lib"/>
        <jar compress="true" destfile="${debian.src.dir}/lib/src/joscar/lib/annotations.jar">
            <zipfileset dir="${debian.src.dir}/lib/src/joscar/lib/annotations/classes"/>
        </jar>
        <ant dir="${debian.src.dir}/lib/src/joscar"
             inheritAll="false"
             target="jars">
        </ant>
        <!-- now make the links -->
        <symlink resource="../src/joscar/dist/joscar-client.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude"/>
        <symlink resource="../src/joscar/dist/joscar-common.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude"/>
        <symlink resource="../src/joscar/dist/joscar-protocol.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude"/>
        <symlink resource="../src/jsocks/jsocks.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude/jsocks-klea.jar"/>

        <!-- smack -->
        <symlink resource="/usr/share/java/ant-contrib.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/src/smack_src_3_2_2/build"/>
        <symlink resource="/usr/share/java/xpp3-min.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/src/smack_src_3_2_2/build/merge/xpp.jar"/>
        <symlink resource="/usr/share/java/jzlib.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/src/smack_src_3_2_2/build/merge/"/>
        <ant dir="${debian.src.dir}/lib/src/smack_src_3_2_2/build"
             useNativeBasedir="true"
             inheritAll="false"
             target="jar">
        </ant>
        <symlink resource="../src/smack_src_3_2_2/target/smack.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude"/>
        <symlink resource="../src/smack_src_3_2_2/target/smackx.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude"/>
        <!--symlink resource="../installer-exclude/smack.manifest.mf"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude"/-->
        <symlink resource="../src/smack_src_3_2_2/target/smackx-debug.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude"/>

        <!-- jinglenodes -->
        <mkdir dir="${debian.src.dir}/lib/src/jnsapi/lib"/>
        <symlink resource="../../smack_src_3_2_2/target/smack.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/src/jnsapi/lib"/>
        <symlink resource="../../smack_src_3_2_2/target/smackx.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/src/jnsapi/lib"/>
        <mkdir dir="${debian.src.dir}/lib/src/jnsapi/classes"/>
        <javac debug="true"
            deprecation="true" destdir="${debian.src.dir}/lib/src/jnsapi/classes"
            nowarn="false"
            source="1.5" target="1.5" fork="true">
                <src path="${debian.src.dir}/lib/src/jnsapi/src/main/java"/>
                <include name="**/*.java" />
            <classpath>
                  <fileset dir="${debian.src.dir}/lib/src/jnsapi/lib">
                    <include name="*.jar"/>
                  </fileset>
            </classpath>
        </javac>
        <jar compress="true" destfile="${debian.src.dir}/lib/src/jnsapi/jnsapi.jar">
            <zipfileset dir="${debian.src.dir}/lib/src/jnsapi/classes"/>
        </jar>
        <symlink resource="../src/jnsapi/jnsapi.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude"/>

        <symlink resource="/usr/share/java/dnsjava.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude/dnsjava.jar"/>

        <!-- java-jml needs libcommons-logging-java -->
        <mkdir dir="${debian.src.dir}/lib/src/java-jml/lib"/>
        <symlink resource="/usr/share/java/httpcore.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/src/java-jml/lib"/>
        <symlink resource="/usr/share/java/commons-logging.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/src/java-jml/lib"/>
        <mkdir dir="${debian.src.dir}/lib/src/java-jml/classes"/>
        <javac debug="true"
            deprecation="true" destdir="${debian.src.dir}/lib/src/java-jml/classes"
            nowarn="false"
            source="1.5" target="1.5" fork="true">
                <src path="${debian.src.dir}/lib/src/java-jml/src"/>
                <include name="**/*.java" />
            <classpath>
                  <fileset dir="${debian.src.dir}/lib/src/java-jml/lib">
                    <include name="*.jar"/>
                  </fileset>
            </classpath>
        </javac>
        <jar compress="true" destfile="${debian.src.dir}/lib/src/java-jml/java-jml.jar">
            <zipfileset dir="${debian.src.dir}/lib/src/java-jml/classes"/>
        </jar>
        <symlink resource="../src/java-jml/java-jml.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude/jml-1.0b5.jar"/>

        <!-- jdic misc -->
        <ant dir="${debian.src.dir}/lib/src/misc"
             inheritAll="true"
             inheritRefs="true"
             target="buildall"/>
        <symlink resource="../src/misc/dist/linux/jdic_misc.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude"/>
        <copy file="${debian.src.dir}/lib/src/misc/dist/linux/libjdic_misc-64.so"
              failonerror="false"
              tofile="${debian.src.dir}/lib/native/linux-64/libjdic_misc.so"/>
        <copy file="${debian.src.dir}/lib/src/misc/dist/linux/libjdic_misc-32.so"
              failonerror="false"
              tofile="${debian.src.dir}/lib/native/linux/libjdic_misc.so"/>

        <!-- json -->
        <symlink resource="/usr/share/java/json_simple.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude/json-simple-1.1.1.jar"/>

        <!-- jymsg -->
        <ant dir="${debian.src.dir}/lib/src/jymsg"
             inheritAll="false"
             target="jars">
        </ant>
        <symlink resource="../src/jymsg/classes/ymsg_network_v0_67.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/installer-exclude"/>

        <!-- dhcp4j -->
        <mkdir dir="${debian.src.dir}/lib/src/dhcp4java/classes"/>
        <javac debug="true"
            deprecation="true" destdir="${debian.src.dir}/lib/src/dhcp4java/classes"
            nowarn="false"
            source="1.5" target="1.5" fork="true">
                <src path="${debian.src.dir}/lib/src/dhcp4java/src"/>
                <include name="**/*.java" />
        </javac>
        <jar compress="true" destfile="${debian.src.dir}/lib/src/dhcp4java/dhcp4java-1.00.jar">
            <zipfileset dir="${debian.src.dir}/lib/src/dhcp4java/classes"/>
        </jar>
        <symlink resource="../src/dhcp4java/dhcp4java-1.00.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude"/>

        <!-- jmdns -->
        <symlink resource="/usr/share/java/jmdns.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/installer-exclude"/>

        <!-- otr4j -->
        <symlink resource="/usr/share/java/bcprov.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/src/otr4j/lib"/>
        
        <path id="otr4j-classpath">
            <fileset dir="${debian.src.dir}/lib/src/otr4j/lib" includes="**/*.jar" />
        </path>
        <mkdir dir="${debian.src.dir}/lib/src/otr4j/bin/classes" />
        <javac target="1.6" srcdir="${debian.src.dir}/lib/src/otr4j/src"
               destdir="${debian.src.dir}/lib/src/otr4j/bin/classes"
               classpathref="otr4j-classpath"
               debug="On" />
        <jar destfile="${debian.src.dir}/lib/src/otr4j/bin/otr4j.jar"
             basedir="${debian.src.dir}/lib/src/otr4j/bin/classes"/>
        <symlink resource="../src/otr4j/bin/otr4j.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/installer-exclude"/>

        <!-- jmyspell -->
        <mkdir dir="${debian.src.dir}/lib/src/jmyspell/classes"/>
        <javac debug="true"
            deprecation="true" destdir="${debian.src.dir}/lib/src/jmyspell/classes"
            nowarn="false"
            source="1.5" target="1.5" fork="true">
                <src path="${debian.src.dir}/lib/src/jmyspell/src/main/java"/>
                <src path="${debian.src.dir}/lib/src/jmyspell/src/main/resources"/>
                <include name="**/*.java" />
                <include name="**/*.properties" />
        </javac>
        <jar compress="true" destfile="${debian.src.dir}/lib/src/jmyspell/jmyspell-core.jar">
            <zipfileset dir="${debian.src.dir}/lib/src/jmyspell/classes"/>
        </jar>
        <symlink resource="../src/jmyspell/jmyspell-core.jar" overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude"/>

        <!-- jfontchooser -->
        <mkdir dir="${debian.src.dir}/lib/src/jfontchooser/classes"/>
        <javac debug="true"
            deprecation="true" destdir="${debian.src.dir}/lib/src/jfontchooser/classes"
            nowarn="false"
            source="1.5" target="1.5" fork="true">
                <src path="${debian.src.dir}/lib/src/jfontchooser/src"/>
                <include name="**/*.java" />
        </javac>
        <jar compress="true"
             destfile="${debian.src.dir}/lib/src/jfontchooser/jfontchooser-1.0.5.jar">
            <zipfileset dir="${debian.src.dir}/lib/src/jfontchooser/classes"/>
        </jar>
        <symlink resource="../src/jfontchooser/jfontchooser-1.0.5.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/installer-exclude"/>

        <!-- libcommons-codec-java -->
        <symlink resource="/usr/share/java/commons-codec.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/installer-exclude/commons-codec-1.4.jar"/>
        <!-- libcommons-lang-java -->
        <symlink resource="/usr/share/java/commons-lang3.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/installer-exclude/commons-lang3-3.1.jar"/>
        <!-- libcommons-logging-java -->
        <symlink resource="/usr/share/java/commons-logging.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/installer-exclude/commons-logging-1.1.2.jar"/>
        <!-- liblog4j1.2-java -->
        <symlink resource="/usr/share/java/log4j-1.2.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/installer-exclude"/>

        <!-- OrangeExtensions -->
        <ant dir="${debian.src.dir}/lib/src/OrangeExtensions"
             inheritAll="false"/>
        <mkdir dir="${debian.src.dir}/lib/os-specific/mac"/>
        <symlink resource="../../src/OrangeExtensions/dist/OrangeExtensions.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/os-specific/mac/"/>

        <symlink resource="../src/bccontrib/target/bccontrib-1.0-SNAPSHOT.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/installer-exclude"/>
        <symlink resource="/usr/share/java/bcprov.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/installer-exclude/bcprov-jdk15on-150.jar"/>
        <symlink resource="/usr/share/java/bcpkix.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/installer-exclude/bcpkix-jdk15on-150.jar"/>

        <!-- liblaf-widget-java -->
        <symlink resource="/usr/share/java/laf-widget.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/installer-exclude"/>

        <!-- gdata -->
        <ant dir="${debian.src.dir}/lib/src/gdata-java-client/java"
             inheritAll="false"
             target="build"
             antfile="build-src.xml"
             >
            <property name="google-collect.jar"
                      value="/usr/share/java/guava.jar"/>
            <property name="google-jsr305.jar"
                      value="/usr/share/java/jsr305.jar"/>
            <property name="activation.jar"
                      value="/usr/share/java/glassfish-activation.jar"/>
            <property name="mail.jar"
                      value="/usr/share/java/glassfish-mail.jar"/>
        </ant>
        <symlink
             resource="../src/gdata-java-client/java/lib/gdata-client-1.0.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude/"/>
        <symlink
             resource="../src/gdata-java-client/java/lib/gdata-client-meta-1.0.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude/"/>
        <symlink
             resource="../src/gdata-java-client/java/lib/gdata-contacts-3.0.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude/"/>
        <symlink
             resource="../src/gdata-java-client/java/lib/gdata-contacts-meta-3.0.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude/"/>
        <symlink
             resource="../src/gdata-java-client/java/lib/gdata-core-1.0.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude/"/>
        <symlink
             resource="/usr/share/java/guava.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude/guava-15.0.jar"/>
        <symlink
             resource="/usr/share/java/hsqldb.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude/hsqldb.jar"/>

        <!-- compile and pack jmork -->
        <property name="jmork.src.folder" value="${debian.src.dir}/lib/src/jmork"/>
        <mkdir dir="${jmork.src.folder}/classes" />
        <javac debug="false" optimize="true"
            destdir="${jmork.src.folder}/classes"
            nowarn="false"
            source="1.5" target="1.5" fork="true">
            <src path="${jmork.src.folder}"/>
        </javac>
        <jar compress="true" destfile="${jmork.src.folder}/jmork-1.0.5-SNAPSHOT.jar">
            <fileset dir="${jmork.src.folder}/classes">
            </fileset>
            <manifest>
                <attribute name="Bundle-Name" value="Java Mork"/>
                <attribute name="Bundle-Description"
                           value="A Java implementation of the Mork database format"/>
                <attribute name="Bundle-SymbolicName"
                           value="jmork"/>
                <attribute name="Bundle-Version" value="1.0.5.SNAPSHOT"/>

                <attribute name="Import-Package"
                    value="javax.swing,javax.swing.filechooser"/>
                <attribute name="Export-Package"
                    value="mork,mork.gui,mozilla.thunderbird"/>
            </manifest>
        </jar>
        <symlink resource="../src/jmork/jmork-1.0.5-SNAPSHOT.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/installer-exclude"/>

        <symlink resource="/usr/share/java/junit.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude"/>

        <!-- mac_widgets -->
        <symlink
             resource="/usr/share/java/mac_widgets.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude/mac_widgets-0.9.5.jar"/>
        <!-- forms -->
        <symlink
             resource="/usr/share/java/forms.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude/forms-1.2.1.jar"/>
        <!-- jna -->
        <symlink resource="/usr/share/java/jna.jar"
                 link="${debian.src.dir}/lib/installer-exclude/jna.jar"/>
        <symlink resource="/usr/share/java/jna-platform.jar"
                 overwrite="true"
                 link="${debian.src.dir}/lib/installer-exclude/"/>
        <!-- ice4j -->
        <symlink resource="../src/ice4j/ice4j.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude"/>
        <!-- fmj -->
        <symlink resource="../src/fmj/fmj.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude"/>
        <!-- zrtp -->
        <symlink resource="../src/zrtp4j/dist/zrtp4j-light.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude"/>
        <!-- sdes -->
        <symlink resource="../src/sdes4j/build/SDES4J-1.0.1.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude/sdes4j.jar"/>

        <!-- libhttpcore-java libhttpmime-java  libhttpclient-java -->
        <symlink resource="/usr/share/java/httpclient.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude/httpclient-osgi-4.2.3.jar"/>
        <symlink resource="/usr/share/java/httpcore.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude/httpcore-osgi-4.2.3.jar"/>
        <symlink resource="/usr/share/java/httpmime.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude/httpmime-4.1.2.jar"/>

        <!-- jsip -->
        <symlink resource="../src/jsip/jain-sdp-1.0.159.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude/jain-sdp.jar"/>
        <symlink resource="../src/jsip/jain-sip-api-1.2.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude/jain-sip-api.jar"/>
        <symlink resource="../src/jsip/jain-sip-ri-1.2.159.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude/jain-sip-ri.jar"/>

        <!-- libdbus java libdbus-java -->
        <symlink resource="/usr/share/java/dbus.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude/libdbus-java-2.7.jar"/>
        <symlink resource="/usr/share/java/hexdump-0.2.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude"/>
        <symlink resource="/usr/share/java/unix-0.5.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude"/>

        <!-- easymock libeasymock-java-->
        <symlink resource="/usr/share/java/easymock.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude"/>

        <!-- libjcalendar-java -->
        <symlink resource="/usr/share/java/jcalendar.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude/jcalendar-1.4.jar"/>

        <!-- now rebuild jitsi -->
        <antcall target="rebuild"/>
        <antcall target="make-and-deploy"/>

        <!-- will build native libs -->
        <symlink resource="/usr/share/java/ant-contrib-cpptasks.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/installer-exclude/cpptasks.jar"/>

        <antcall target="galagonotification"/>
        <antcall target="globalshortcut"/>
        <antcall target="hid"/>
        <antcall target="sysactivity"/>
        <antcall target="unbound"/>
        <antcall target="hwaddressretriever"/>

        <mkdir dir="${debian.src.dir}/lib/src/libjitsi/lib/installer-exclude"/>
        <mkdir dir="${debian.src.dir}/lib/src/libjitsi/lib/native/linux"/>
        <mkdir dir="${debian.src.dir}/lib/src/libjitsi/lib/native/linux-64"/>
        <symlink resource="/usr/share/java/ant-contrib-cpptasks.jar"
             overwrite="true"
             link="${debian.src.dir}/lib/src/libjitsi/lib/installer-exclude/cpptasks.jar"/>

        <antcall target="g722"/>

        <!-- opus -->
        <ant dir="${debian.src.dir}/lib/src/libjitsi" inheritAll="false"
             target="opus">
            <property name="opus" value=""/>
        </ant>

        <ant dir="${debian.src.dir}/lib/src/libjitsi" inheritAll="false"
             target="screencapture"/>

        <!-- jnspeex -->
        <antcall target="speex">
            <param name="speex.dynamic" value="true"/>
        </antcall>

        <chmod file="${debian.src.dir}/lib/src/portaudio/configure" perm="+x"/>
        <exec   dir="${debian.src.dir}/lib/src/portaudio"
                executable="configure"
                resolveexecutable="true"
                failonerror="true">
            <arg value="--disable-shared" />
            <arg value="--enable-static" />
            <arg value="--with-pic" />
            <arg value="--with-jack=no" />
        </exec>
        <exec   dir="${debian.src.dir}/lib/src/portaudio"
                executable="make"
                failonerror="true"/>
        <ant dir="${debian.src.dir}/lib/src/libjitsi" inheritAll="false"
             target="portaudio">
            <property name="portaudio" value="${debian.src.dir}/lib/src/portaudio"/>
            <property name="speex.dynamic" value="true"/>
        </ant>

        <!-- ffmpeg -->
        <ant dir="${debian.src.dir}/lib/src/libjitsi" inheritAll="false"
             target="ffmpeg">
            <property name="ffmpeg" value=""/>
            <property name="x264" value=""/>
            <property name="lame" value=""/>
            <property name="libvpx" value=""/>
            <property name="LIBAV" value=""/>
        </ant>

        <!-- video4linux -->
        <ant dir="${debian.src.dir}/lib/src/libjitsi" inheritAll="false"
             target="video4linux2"/>

        <!-- awtrenderer -->
        <ant dir="${debian.src.dir}/lib/src/libjitsi" inheritAll="false"
             target="jawtrenderer"/>

        <!--pulseaudio-->
        <ant dir="${debian.src.dir}/lib/src/libjitsi" inheritAll="false"
             target="pulseaudio"/>

        <!-- now copy the compiled native libs -->
        <copy todir="${debian.src.dir}/lib/native/linux">
            <fileset dir="${debian.src.dir}/lib/src/libjitsi/lib/native/linux">
                <include name="*.so"/>
            </fileset>
        </copy>
        <copy todir="${debian.src.dir}/lib/native/linux-64">
            <fileset dir="${debian.src.dir}/lib/src/libjitsi/lib/native/linux-64">
                <include name="*.so"/>
            </fileset>
        </copy>

        <!-- clean the native objects (no binaries in src package)-->
        <ant dir="${debian.src.dir}/lib/src/libjitsi" inheritAll="false"
             target="clean-native"/>
        <antcall target="clean-native"/>
        <!-- clean portaudio configure logs give warnings -->
        <exec   dir="${debian.src.dir}/lib/src/portaudio"
                executable="make"
                failonerror="true">
            <arg value="distclean" />
        </exec>
    </target>

    <!-- target to rebuild the jna bundle reusing debian package -->
    <target name="deb-bundle-jna">
        <!-- Creates a bundle containing the win jna implementation
            in debian dest folder debian.bundles.dest.-->
        <unzip src="${debian.bundles.dest}/jnalib.jar"
               dest="${debian.bundles.dest}">
          <patternset>
            <include name="META-INF/MANIFEST.MF"/>
          </patternset>
        </unzip>
        <delete file="${debian.bundles.dest}/jnalib.jar"/>
        <mkdir dir="${debian.bundles.dest}/jnalib.jar/META-INF"/>
        <symlink resource="../../../../share/java/jna.jar"
             link="${debian.bundles.dest}/jnalib.jar/jna.jar"/>
        <symlink resource="../../../../share/java/jna-platform.jar"
             link="${debian.bundles.dest}/jnalib.jar/jna-platform.jar"/>

        <move file="${debian.bundles.dest}/META-INF/MANIFEST.MF"
              todir="${debian.bundles.dest}/jnalib.jar/META-INF"/>
        <delete dir="${debian.bundles.dest}/META-INF"/>
        <!-- Removes the last empty line -->
        <replaceregexp
            file="${debian.bundles.dest}/jnalib.jar/META-INF/MANIFEST.MF"
            match="^\r\n$"
            flags="m"
            replace=""/>
        <concat
            destfile="${debian.bundles.dest}/jnalib.jar/META-INF/MANIFEST.MF"
            append="true"
            eol="crlf"
            fixlastline="true">Bundle-ClassPath: .,jna-platform.jar,jna.jar&#013;&#010;&#013;&#010;</concat>
    </target>

    <!-- target to rebuild the json bundle reusing debian package -->
    <target name="deb-bundle-json">
        <!-- Creates a bundle containing the json_simple implementation
            in debian dest folder debian.bundles.dest.-->
        <unzip src="${debian.bundles.dest}/json.jar"
               dest="${debian.bundles.dest}">
          <patternset>
            <include name="META-INF/MANIFEST.MF"/>
          </patternset>
        </unzip>
        <delete file="${debian.bundles.dest}/json.jar"/>
        <mkdir dir="${debian.bundles.dest}/json.jar/META-INF"/>
        <symlink resource="../../../../share/java/json_simple.jar"
             link="${debian.bundles.dest}/json.jar/json_simple.jar"/>
        <manifest
                file="${debian.bundles.dest}/json.jar/META-INF/MANIFEST.MF">
            <attribute name="Bundle-Name" value="JSON.simple"/>
            <attribute name="Bundle-Description"
                       value="A simple Java toolkit for JSON"/>
            <attribute name="Bundle-SymbolicName"
                       value="com.googlecode.json-simple"/>
            <attribute name="Bundle-Version" value="1.1.1"/>
            <attribute name="System-Bundle" value="yes"/>
            <attribute name="Export-Package"
                       value="org.json.simple,org.json.simple.parser"/>
            <attribute name="Bundle-ClassPath" value=".,json_simple.jar"/>
        </manifest>
        <delete dir="${debian.bundles.dest}/META-INF"/>
    </target>

    <!-- target to rebuild the util bundle reusing debian package -->
    <target name="deb-bundle-util" depends="version,load-properties">
        <!-- Create a properties file that the arg handler could use
        to determine SC's version -->
        <echo
            file="${dest}/net/java/sip/communicator/util/launchutils/version.properties"
            message="APPLICATION_NAME=${application.name}${line.separator}" />
        <echo
            file="${dest}/net/java/sip/communicator/util/launchutils/version.properties"
            message="PACKAGE_NAME=${package.name}${line.separator}"
            append="true"/>
        <echo file="${dest}/net/java/sip/communicator/util/launchutils/version.properties"
              message="APPLICATION_VERSION=${sip-communicator.version}${line.separator}"
              append="true"/>
        <unzip src="${debian.bundles.dest}/util.jar"
               dest="${debian.bundles.dest}">
          <patternset>
            <include name="META-INF/MANIFEST.MF"/>
          </patternset>
        </unzip>
        <delete file="${debian.bundles.dest}/util.jar"/>
        <mkdir dir="${debian.bundles.dest}/util.jar/META-INF"/>
        <symlink resource="../../../../share/java/dnsjava.jar"
                 link="${debian.bundles.dest}/util.jar/dnsjava.jar"/>

        <!-- Create the util.jar-->
        <jar compress="false"
             destfile="${debian.bundles.dest}/util.jar/util.jar">
            <zipfileset dir="${dest}/net/java/sip/communicator/util"
                prefix="net/java/sip/communicator/util">
                <exclude name="dns/**"/>
            </zipfileset>
        </jar>
        <!-- Create the launchutils.jar-->
        <jar compress="false"
             destfile="${debian.bundles.dest}/util.jar/launchutils.jar">
            <zipfileset
                dir="${dest}/net/java/sip/communicator/util/launchutils"
                prefix="net/java/sip/communicator/util/launchutils"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/util"
                prefix="net/java/sip/communicator/util">
                <include name="ScStdOut*"/>
                <include name="ScLogFormatter*"/>
                <include name="Logger*"/>
                <include name="FileHandler*"/>
            </zipfileset>
        </jar>
        <move file="${debian.bundles.dest}/META-INF/MANIFEST.MF"
              todir="${debian.bundles.dest}/util.jar/META-INF"/>
        <delete dir="${debian.bundles.dest}/META-INF"/>
        <!-- Removes the last empty line -->
        <replaceregexp
            file="${debian.bundles.dest}/util.jar/META-INF/MANIFEST.MF"
            match="^\r\n$"
            flags="m"
            replace=""/>
        <concat
            destfile="${debian.bundles.dest}/util.jar/META-INF/MANIFEST.MF"
            append="true"
            eol="crlf"
            fixlastline="true">Bundle-ClassPath: .,util.jar,dnsjava.jar&#013;&#010;&#013;&#010;</concat>

        <!-- Use the system installed dnsjava -->
        <echo file="${debian.bundles.dest}/../lib/felix.client.run.properties"
            append="true">felix.auto.start.14= reference:file:/usr/share/java/dnsjava.jar
        </echo>
    </target>

    <!-- target to rebuild the util bundle reusing debian package -->
    <target name="deb-bundle-desktoputil">
        <unzip src="${debian.bundles.dest}/desktoputil.jar"
               dest="${debian.bundles.dest}">
          <patternset>
            <include name="META-INF/MANIFEST.MF"/>
          </patternset>
        </unzip>
        <delete file="${debian.bundles.dest}/desktoputil.jar"/>
        <mkdir dir="${debian.bundles.dest}/desktoputil.jar/META-INF"/>
        <symlink resource="../../../../share/java/laf-widget.jar"
             link="${debian.bundles.dest}/desktoputil.jar/laf-widget.jar"/>

        <!-- Create the desktoputil.jar-->
        <jar compress="false"
             destfile="${debian.bundles.dest}/desktoputil.jar/desktoputil.jar">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/desktoputil"
                prefix="net/java/sip/communicator/plugin/desktoputil">
                <exclude name="dns/**"/>
            </zipfileset>
        </jar>
        <move file="${debian.bundles.dest}/META-INF/MANIFEST.MF"
              todir="${debian.bundles.dest}/desktoputil.jar/META-INF"/>
        <delete dir="${debian.bundles.dest}/META-INF"/>
        <!-- Removes the last empty line -->
        <replaceregexp
            file="${debian.bundles.dest}/desktoputil.jar/META-INF/MANIFEST.MF"
            match="^\r\n$"
            flags="m"
            replace=""/>
        <concat
            destfile="${debian.bundles.dest}/desktoputil.jar/META-INF/MANIFEST.MF"
            append="true"
            eol="crlf"
            fixlastline="true">Bundle-ClassPath: .,desktoputil.jar,laf-widget.jar&#013;&#010;&#013;&#010;</concat>
    </target>

    <!-- target to rebuild the sysactivitynotifications bundle reusing
        debian package -->
    <target name="deb-bundle-sysactivitynotifications">

        <unzip src="${debian.bundles.dest}/sysactivitynotifications.jar"
               dest="${debian.bundles.dest}">
          <patternset>
            <include name="META-INF/MANIFEST.MF"/>
          </patternset>
        </unzip>
        <delete file="${debian.bundles.dest}/sysactivitynotifications.jar"/>
        <mkdir dir="${debian.bundles.dest}/sysactivitynotifications.jar/META-INF"/>
        <symlink resource="../../../../share/java/dbus.jar"
             link="${debian.bundles.dest}/sysactivitynotifications.jar/dbus.jar"/>
        <symlink resource="../../../../share/java/unix.jar"
             link="${debian.bundles.dest}/sysactivitynotifications.jar/unix.jar"/>
        <symlink resource="../../../../share/java/hexdump.jar"
             link="${debian.bundles.dest}/sysactivitynotifications.jar/hexdump.jar"/>

        <!-- Create the sys .jar-->
        <jar compress="false"
             destfile="${debian.bundles.dest}/sysactivitynotifications.jar/sysactivitynotifications.jar">
            <zipfileset
                dir="${dest}/net/java/sip/communicator/impl/sysactivity"
                prefix="net/java/sip/communicator/impl/sysactivity" />
            <zipfileset
                dir="${dest}/net/java/sip/communicator/service/sysactivity"
                prefix="net/java/sip/communicator/service/sysactivity"/>
        </jar>
        <move file="${debian.bundles.dest}/META-INF/MANIFEST.MF"
              todir="${debian.bundles.dest}/sysactivitynotifications.jar/META-INF"/>
        <delete dir="${debian.bundles.dest}/META-INF"/>
        <!-- Removes the last empty line -->
        <replaceregexp
            file="${debian.bundles.dest}/sysactivitynotifications.jar/META-INF/MANIFEST.MF"
            match="^\r\n$"
            flags="m"
            replace=""/>
        <concat
            destfile="${debian.bundles.dest}/sysactivitynotifications.jar/META-INF/MANIFEST.MF"
            append="true"
            eol="crlf"
            fixlastline="true">Bundle-ClassPath: .,sysactivitynotifications.jar,dbus.jar,unix.jar,hexdump.jar&#013;&#010;&#013;&#010;</concat>
    </target>

    <!-- target to rebuild the swing-ui bundle reusing debian package -->
    <target name="deb-bundle-swing-ui">

        <unzip src="${debian.bundles.dest}/swing-ui.jar"
               dest="${debian.bundles.dest}">
          <patternset>
            <include name="META-INF/MANIFEST.MF"/>
          </patternset>
        </unzip>
        <delete file="${debian.bundles.dest}/swing-ui.jar"/>
        <mkdir dir="${debian.bundles.dest}/swing-ui.jar/META-INF"/>
        <symlink resource="../../../../share/java/forms.jar"
             link="${debian.bundles.dest}/swing-ui.jar/forms.jar"/>
        <symlink resource="../../../../share/java/mac_widgets.jar"
             link="${debian.bundles.dest}/swing-ui.jar/"/>

        <!-- Create the sys .jar-->
        <jar compress="false"
             destfile="${debian.bundles.dest}/swing-ui.jar/swing-ui.jar">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/gui"
                        prefix="net/java/sip/communicator/impl/gui"/>
            <zipfileset src="lib/installer-exclude/swing-worker-1.2.jar"
                        prefix=""/>
        </jar>
        <move file="${debian.bundles.dest}/META-INF/MANIFEST.MF"
              todir="${debian.bundles.dest}/swing-ui.jar/META-INF"/>
        <delete dir="${debian.bundles.dest}/META-INF"/>
        <!-- Removes the last empty line -->
        <replaceregexp
            file="${debian.bundles.dest}/swing-ui.jar/META-INF/MANIFEST.MF"
            match="^\r\n$"
            flags="m"
            replace=""/>
        <concat
            destfile="${debian.bundles.dest}/swing-ui.jar/META-INF/MANIFEST.MF"
            append="true"
            eol="crlf"
            fixlastline="true">Bundle-ClassPath: .,swing-ui.jar,mac_widgets.jar,forms.jar&#013;&#010;&#013;&#010;</concat>
    </target>

    <!-- target to rebuild the httputil bundle reusing debian package -->
    <target name="deb-bundle-httputil">

        <unzip src="${debian.bundles.dest}/httputil.jar"
               dest="${debian.bundles.dest}">
          <patternset>
            <include name="META-INF/MANIFEST.MF"/>
          </patternset>
        </unzip>
        <delete file="${debian.bundles.dest}/httputil.jar"/>
        <mkdir dir="${debian.bundles.dest}/httputil.jar/META-INF"/>
        <symlink resource="../../../../share/java/httpclient.jar"
             link="${debian.bundles.dest}/httputil.jar/httpclient.jar"/>
        <symlink resource="../../../../share/java/httpcore.jar"
             link="${debian.bundles.dest}/httputil.jar/httpcore.jar"/>
        <symlink resource="../../../../share/java/httpmime.jar"
             link="${debian.bundles.dest}/httputil.jar/httpmime.jar"/>

        <!-- Create the sys .jar-->
        <jar compress="false"
             destfile="${debian.bundles.dest}/httputil.jar/httputil.jar">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/httputil"
                        prefix="net/java/sip/communicator/service/httputil"/>
        </jar>
        <move file="${debian.bundles.dest}/META-INF/MANIFEST.MF"
              todir="${debian.bundles.dest}/httputil.jar/META-INF"/>
        <delete dir="${debian.bundles.dest}/META-INF"/>

        <!-- Removes the last empty line -->
        <replaceregexp
            file="${debian.bundles.dest}/httputil.jar/META-INF/MANIFEST.MF"
            match="^\r\n$"
            flags="m"
            replace=""/>
        <concat
            destfile="${debian.bundles.dest}/httputil.jar/META-INF/MANIFEST.MF"
            append="true"
            eol="crlf"
            fixlastline="true">Bundle-ClassPath: .,httputil.jar,httpclient.jar,httpcore.jar,httpmime.&#013;&#010; jar&#013;&#010;&#013;&#010;</concat>
    </target>

    <!-- target to rebuild the smacklib bundle reusing debian package -->
    <target name="deb-bundle-smacklib">

        <unzip src="${debian.bundles.dest}/smacklib.jar"
               dest="${debian.bundles.dest}">
          <patternset>
            <include name="META-INF/MANIFEST.MF"/>
          </patternset>
        </unzip>
        <delete file="${debian.bundles.dest}/smacklib.jar"/>
        <mkdir dir="${debian.bundles.dest}/smacklib.jar/META-INF"/>

        <symlink resource="../../../../share/java/xpp3-min.jar"
             link="${debian.bundles.dest}/smacklib.jar/xpp3.jar"/>
        <symlink resource="../../../../share/java/jzlib.jar"
             link="${debian.bundles.dest}/smacklib.jar/jzlib.jar"/>

        <!-- Create the smacklib .jar-->
        <jar compress="false"
            destfile="${debian.bundles.dest}/smacklib.jar/smacklib.jar"
            manifest="lib/installer-exclude/smack.manifest.mf">
            <zipfileset src="lib/installer-exclude/smackx-debug.jar" prefix=""/>
            <zipfileset src="lib/installer-exclude/smack.jar" prefix=""/>
            <zipfileset src="lib/installer-exclude/smackx.jar" prefix=""/>
            <zipfileset src="lib/installer-exclude/jnsapi.jar" prefix=""/>
        </jar>
        <move file="${debian.bundles.dest}/META-INF/MANIFEST.MF"
              todir="${debian.bundles.dest}/smacklib.jar/META-INF"/>
        <delete dir="${debian.bundles.dest}/META-INF"/>
        <!-- Removes the last empty line -->
        <replaceregexp
            file="${debian.bundles.dest}/smacklib.jar/META-INF/MANIFEST.MF"
            match="^\r\n$"
            flags="m"
            replace=""/>
        <concat
            destfile="${debian.bundles.dest}/smacklib.jar/META-INF/MANIFEST.MF"
            append="true"
            eol="crlf"
            fixlastline="true">Bundle-ClassPath: .,smacklib.jar,xpp3.jar,jzlib.jar&#013;&#010;&#013;&#010;</concat>
    </target>

    <!-- target to rebuild the jmdnslib bundle reusing debian package -->
    <target name="deb-bundle-jmdnslib">

        <unzip src="${debian.bundles.dest}/jmdnslib.jar"
               dest="${debian.bundles.dest}">
          <patternset>
            <include name="META-INF/MANIFEST.MF"/>
          </patternset>
        </unzip>
        <delete file="${debian.bundles.dest}/jmdnslib.jar"/>
        <mkdir dir="${debian.bundles.dest}/jmdnslib.jar/META-INF"/>

        <symlink resource="../../../../share/java/jmdns.jar"
             link="${debian.bundles.dest}/jmdnslib.jar/"/>

        <move file="${debian.bundles.dest}/META-INF/MANIFEST.MF"
              todir="${debian.bundles.dest}/jmdnslib.jar/META-INF"/>
        <delete dir="${debian.bundles.dest}/META-INF"/>
        <!-- Removes the last empty line -->
        <replaceregexp
            file="${debian.bundles.dest}/jmdnslib.jar/META-INF/MANIFEST.MF"
            match="^\r\n$"
            flags="m"
            replace=""/>
        <concat
            destfile="${debian.bundles.dest}/jmdnslib.jar/META-INF/MANIFEST.MF"
            append="true"
            eol="crlf"
            fixlastline="true">Bundle-ClassPath: .,jmdns.jar&#013;&#010;&#013;&#010;</concat>
    </target>

    <!-- target to rebuild the bouncycastle bundle reusing
        debian package adding it osgi manifest entries -->
    <target name="deb-bundle-bouncycastle">

        <delete file="${debian.bundles.dest}/bouncycastle.jar"/>
        <mkdir dir="${debian.bundles.dest}/bouncycastle.jar/META-INF"/>

        <copy file="${lib.noinst}/bcprov.manifest.mf"
              tofile="${debian.bundles.dest}/bouncycastle.jar/META-INF/MANIFEST.MF"/>
        <symlink resource="../../../../share/java/bcprov.jar"
             link="${debian.bundles.dest}/bouncycastle.jar/"/>

        <!-- Removes the last empty line -->
        <replaceregexp
            file="${debian.bundles.dest}/bouncycastle.jar/META-INF/MANIFEST.MF"
            match="^\r\n$"
            flags="m"
            replace=""/>
        <concat
            destfile="${debian.bundles.dest}/bouncycastle.jar/META-INF/MANIFEST.MF"
            append="true"
            eol="crlf"
            fixlastline="true">Bundle-ClassPath: .,bcprov.jar&#013;&#010;&#013;&#010;</concat>
    </target>
    
    <!-- target to rebuild the account info bundle reusing debian package -->
    <target name="deb-bundle-plugin-accountinfo">

        <unzip src="${debian.bundles.dest}/accountinfo.jar"
               dest="${debian.bundles.dest}">
          <patternset>
            <include name="META-INF/MANIFEST.MF"/>
          </patternset>
        </unzip>
        <delete file="${debian.bundles.dest}/accountinfo.jar"/>
        <mkdir dir="${debian.bundles.dest}/accountinfo.jar/META-INF"/>
        <symlink resource="../../../../share/java/jcalendar.jar"
             link="${debian.bundles.dest}/accountinfo.jar/"/>

        <!-- Create the sys .jar-->
        <jar compress="false"
             destfile="${debian.bundles.dest}/accountinfo.jar/accountinfo.jar">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/accountinfo"
                        prefix="net/java/sip/communicator/plugin/accountinfo"/>
        </jar>
        <move file="${debian.bundles.dest}/META-INF/MANIFEST.MF"
              todir="${debian.bundles.dest}/accountinfo.jar/META-INF"/>
        <delete dir="${debian.bundles.dest}/META-INF"/>

        <!-- Removes the last empty line -->
        <replaceregexp
            file="${debian.bundles.dest}/accountinfo.jar/META-INF/MANIFEST.MF"
            match="^\r\n$"
            flags="m"
            replace=""/>
        <concat
            destfile="${debian.bundles.dest}/accountinfo.jar/META-INF/MANIFEST.MF"
            append="true"
            eol="crlf"
            fixlastline="true">Bundle-ClassPath: .,accountinfo.jar,jcalendar.jar&#013;&#010;&#013;&#010;</concat>
    </target>

</project>
<project name="jitsi-native" default="help-native">
  <import file="../../build.xml"/>

  <!-- additionnal property -->
  <property name="obj" value="${src}/native/native_obj" />

  <!-- load cpptasks jar to have <cc /> tag -->
  <taskdef resource="cpptasks.tasks">
    <!-- load cpptasks jar -->
    <classpath>
      <pathelement location="${sc.basedir}/lib/installer-exclude/cpptasks.jar"/>
    </classpath>
  </taskdef>

  <condition property="arch" value="32">
    <or>
      <os arch="x86" />
      <os arch="i386" />
      <os arch="i486" />
      <os arch="i586" />
      <os arch="i686" />
    </or>
  </condition>
  <condition property="arch" value="64">
    <or>
      <os arch="amd64" />
      <os arch="x86_64" />
    </or>
  </condition>

  <!--
    Cross compilation. It is mainly used on Linux to cross-compile 32-bit
    binaries on a 64-bit host. It is also used to compile ffmpeg on Mac OS X for
    each architecture before creating an universal binary with the lipo tool. 
  -->
  <condition property="cross_32" value="y" >
    <equals arg1="${arch}" arg2="32" />
  </condition>

  <condition property="cross_64" value="y" >
    <equals arg1="${arch}" arg2="64" />
  </condition>
  
  <!-- Mac OS X only -->
  <condition property="cross_ppc" value="y" >
    <equals arg1="${arch}" arg2="ppc" />
  </condition>

  <!-- initialize destination directory -->
  <condition property="native_install_dir" value="${native.libs}/windows">
    <and>
      <isset property="is.running.windows"/>
      <equals arg1="${arch}" arg2="32" />
    </and>
  </condition>

  <condition property="native_install_dir" value="${native.libs}/windows-64">
    <and>
      <isset property="is.running.windows"/>
      <equals arg1="${arch}" arg2="64" />
    </and>                                    
  </condition>

  <condition property="native_install_dir" value="${native.libs}/linux">
    <and>   
      <isset property="is.running.linux"/>
      <equals arg1="${arch}" arg2="32" />
    </and>                                    
  </condition>

  <condition property="native_install_dir" value="${native.libs}/linux-64">
    <and>
      <isset property="is.running.linux"/>
      <equals arg1="${arch}" arg2="64" />
    </and>                                    
  </condition>

  <condition property="native_install_dir" value="${native.libs}/mac">
    <isset property="is.running.macos"/>
  </condition>

  <!-- The path to the dpkg-buildpackage tool -->
  <property name="dpkg-buildpackage" value="/usr/bin/dpkg-buildpackage"/>
  <!-- The path to the dh_testdir tool -->
  <property name="dh_testdir" value="/usr/bin/dh_testdir"/>
  <condition property="is.running.debian">
    <and>
        <isset property="is.running.linux"/>
        <available file="${dpkg-buildpackage}"/>
        <available file="${dh_testdir}"/>
    </and>
  </condition>

  <!--
  <echo message="ffmpeg library: ${ffmpeg}" />
  <echo message="x264 library: ${x264}" />
  <echo message="lame library: ${lame}" />
  <echo message="portaudio library: ${portaudio}" />
  <echo message="speex library: ${speex}" />
  <echo message="Install directory ${native_install_dir}" />
  <echo message="arch: ${arch}" />
  -->

  <target name="init-native" description="Initialize native stuff">
    <mkdir dir="${obj}" />
  </target>

  <!-- compile jnscreencapture library -->
  <target name="screencapture" description="Build screencapture shared library"
    depends="init-native">
    <cc outtype="shared" name="gcc" outfile="${native_install_dir}/jnscreencapture" objdir="${obj}">
      <!-- common compiler flags -->
      <compilerarg value="-std=c99" />
      <compilerarg value="-D_XOPEN_SOURCE=600" />
      <compilerarg value="-Wall" />
      <compilerarg value="-Wextra" />
      <compilerarg value="-O3" />

      <!-- Linux specific flags -->
      <compilerarg value="-m32" if="cross_32" unless="is.running.macos" />
      <compilerarg value="-m64" if="cross_64" unless="is.running.macos" />
      <compilerarg value="-I${system.JAVA_HOME}/include" if="is.running.linux" />
      <compilerarg value="-I${system.JAVA_HOME}/include/linux" if="is.running.linux" />
      <compilerarg value="-D_FORTIFY_SOURCE=2" if="is.running.debian"/>

      <linkerarg value="-m32" if="cross_32" unless="is.running.macos" />
      <linkerarg value="-m64" if="cross_64" unless="is.running.macos" />
      <linkerarg value="-Wl,-z,relro" if="is.running.debian"/>
      <linkerarg value="-lX11" location="end" if="is.running.linux" />

      <!-- Mac OS X specific flags -->
      <compilerarg value="-mmacosx-version-min=10.5" if="is.running.macos"/>
      <compilerarg value="-arch" if="is.running.macos" />
      <compilerarg value="x86_64" if="is.running.macos" />
      <compilerarg value="-arch" if="is.running.macos" />
      <compilerarg value="i386" if="is.running.macos" />
      <compilerarg value="-arch" if="is.running.macos" />
      <compilerarg value="ppc" if="is.running.macos" />
      <compilerarg value="-I/System/Library/Frameworks/ApplicationServices.framework/Headers" if="is.running.macos" />
      <compilerarg value="-I/System/Library/Frameworks/JavaVM.framework/Headers" if="is.running.macos" />
      
      <linkerarg value="-o" location="end" if="is.running.macos" />
      <linkerarg value="libjnscreencapture.jnilib" location="end" if="is.running.macos" />
      <linkerarg value="-arch" if="is.running.macos" />
      <linkerarg value="x86_64" if="is.running.macos" />
      <linkerarg value="-arch" if="is.running.macos" />
      <linkerarg value="i386" if="is.running.macos" />
      <linkerarg value="-arch" if="is.running.macos" />
      <linkerarg value="ppc" if="is.running.macos" />
      <linkerarg value="-framework" if="is.running.macos" />
      <linkerarg value="ApplicationServices" if="is.running.macos" />
      
      <!-- Windows specific flags -->
      <compilerarg value="-I${system.JAVA_HOME}/include" if="is.running.windows" />
      <compilerarg value="-I${system.JAVA_HOME}/include/win32" if="is.running.windows" />

      <linkerarg value="-lgdi32" location="end" if="is.running.windows" />
      <linkerarg value="-ojnscreencapture.dll" if="is.running.windows" />
      <linkerarg value="-Wl,--kill-at" if="is.running.windows" />

      <fileset dir="${src}/native/screencapture" includes="*.c"/>
    </cc>
  </target>

  <!-- compile hid library -->
  <target name="hid" description="Build hid shared library"
    depends="init-native">
    <cc outtype="shared" name="gcc" outfile="${native_install_dir}/hid" objdir="${obj}">
      <!-- common compiler flags -->
      <compilerarg value="-Wall" />
      <compilerarg value="-Wextra" />

      <!-- Linux specific flags -->
      <compilerarg value="-m32" if="cross_32" unless="is.running.macos" />
      <compilerarg value="-m64" if="cross_64" unless="is.running.macos" />
      <compilerarg value="-I${system.JAVA_HOME}/include" if="is.running.linux" />
      <compilerarg value="-I${system.JAVA_HOME}/include/linux" if="is.running.linux" />

      <linkerarg value="-m32" if="cross_32" unless="is.running.macos" />
      <linkerarg value="-m64" if="cross_64" unless="is.running.macos" />
      <linkerarg value="-lX11" location="end" if="is.running.linux" />
      <linkerarg value="-Wl,-z,relro" if="is.running.debian"/>

      <fileset dir="${src}/native/hid" includes="net*.c KeyboardUtil_unix.c" if="is.running.linux" />

      <!-- Mac OS X specific flags -->
      <compilerarg value="-mmacosx-version-min=10.5" if="is.running.macos"/>
      <compilerarg value="-arch" if="is.running.macos" />
      <compilerarg value="x86_64" if="is.running.macos" />
      <compilerarg value="-arch" if="is.running.macos" />
      <compilerarg value="i386" if="is.running.macos" />
      <compilerarg value="-arch" if="is.running.macos" />
      <compilerarg value="ppc" if="is.running.macos" />
      <compilerarg value="-I/System/Library/Frameworks/ApplicationServices.framework/Headers" if="is.running.macos" />
      <compilerarg value="-I/System/Library/Frameworks/JavaVM.framework/Headers" if="is.running.macos" />

      <linkerarg value="-arch" if="is.running.macos" />
      <linkerarg value="x86_64" if="is.running.macos" />
      <linkerarg value="-arch" if="is.running.macos" />
      <linkerarg value="i386" if="is.running.macos" />
      <linkerarg value="-arch" if="is.running.macos" />
      <linkerarg value="ppc" if="is.running.macos" />
      <linkerarg value="-framework" if="is.running.macos" />
      <linkerarg value="ApplicationServices" if="is.running.macos" />
      <linkerarg value="-framework" if="is.running.macos" />
      <linkerarg value="Carbon" if="is.running.macos" />
      <linkerarg value="-o" location="end" if="is.running.macos" />
      <linkerarg value="libhid.jnilib" location="end" if="is.running.macos" />
      
      <fileset dir="${src}/native/hid" includes="net*.c KeyboardUtil_mac.c" if="is.running.macos" />

      <!-- Windows specific flags -->
      <compilerarg value="-I${system.JAVA_HOME}/include" if="is.running.windows" />
      <compilerarg value="-I${system.JAVA_HOME}/include/win32" if="is.running.windows" />

      <linkerarg value="-lgdi32" location="end" if="is.running.windows" />
      <linkerarg value="-ohid.dll" if="is.running.windows" />
      <linkerarg value="-Wl,--kill-at" if="is.running.windows" />

      <fileset dir="${src}/native/hid" includes="net*.c KeyboardUtil_windows.c" if="is.running.windows" />
    </cc>
  </target>

  <!-- compile jspeex library -->
  <target name="speex" description="Build jspeex shared library" depends="init-native">

      <condition property="is.speex.set" value="true">
          <and>
              <isset property="speex"/>
              <not>
                  <isset property="speex.dynamic"/>
              </not>
          </and>
      </condition>
      <condition property="is.speex.set" value="true">
          <and>
              <isset property="speex.dynamic"/>
              <not>
                  <isset property="speex"/>
              </not>
          </and>
      </condition>

      <condition property="is.speex.dynamic.set" value="true">
          <and>
              <isset property="speex.dynamic"/>
              <isset property="is.running.linux"/>
          </and>
      </condition>

      <fail message="speex repository not set!" unless="is.speex.set" />

    <cc outtype="shared" name="gcc" outfile="${native_install_dir}/jnspeex" objdir="${obj}">
      <!-- common compiler flags -->
      <compilerarg value="-std=c99" />
      <compilerarg value="-Wall" />
      <compilerarg value="-O2" />
      <compilerarg value="-I${speex}/include" />
      <compilerarg value="-D_JNI_IMPLEMENTATION_" />

      <linkerarg value="-L${speex}/libspeex/.libs" />

      <!-- Linux specific flags -->
      <compilerarg value="-m32" if="cross_32" unless="is.running.macos" />
      <compilerarg value="-m64" if="cross_64" unless="is.running.macos" />
      <compilerarg value="-I${system.JAVA_HOME}/include" if="is.running.linux" />
      <compilerarg value="-I${system.JAVA_HOME}/include/linux" if="is.running.linux" />

      <linkerarg value="-m32" if="cross_32" unless="is.running.macos" />
      <linkerarg value="-m64" if="cross_64" unless="is.running.macos" />

      <!-- static libraries MUST be at the end otherwise
      they will not be added to shared library
      -->
      <linkerarg value="-Wl,-z,relro" if="is.running.debian"/>
      <linkerarg value="-Wl,-Bstatic" location="end" if="is.running.linux" unless="speex.dynamic"/>
      <linkerarg value="-lspeex" location="end" if="is.running.linux" unless="speex.dynamic"/>
      <linkerarg value="-lspeexdsp" location="end" if="is.running.linux" unless="speex.dynamic"/>
      <linkerarg value="-Wl,-Bdynamic" location="end" if="is.running.linux" />
      <linkerarg value="-lspeex" location="end" if="is.speex.dynamic.set"/>
      <linkerarg value="-lspeexdsp" location="end" if="is.speex.dynamic.set"/>
      <linkerarg value="-lm" location="end" if="is.running.linux" />

      <!-- Mac OS X specific flags -->
      <compilerarg value="-mmacosx-version-min=10.5" if="is.running.macos"/>
      <compilerarg value="-arch"  if="is.running.macos" />
      <compilerarg value="x86_64" if="is.running.macos" />
      <compilerarg value="-arch" if="is.running.macos" />
      <compilerarg value="i386" if="is.running.macos" />
      <compilerarg value="-I/System/Library/Frameworks/JavaVM.framework/Headers" if="is.running.macos" />

      <linkerarg value="-o" location="end" if="is.running.macos" />
      <linkerarg value="libjspeex.jnilib" location="end" if="is.running.macos" />
      <linkerarg value="-dynamiclib" if="is.running.macos" />
      <linkerarg value="-arch" if="is.running.macos" />
      <linkerarg value="x86_64" if="is.running.macos" />
      <linkerarg value="-arch" if="is.running.macos" />
      <linkerarg value="i386" if="is.running.macos" />
      <linkerarg value="-lspeex" location="end" if="is.running.macos" />
      <linkerarg value="-lspeexdsp" location="end" if="is.running.macos" />

      <!-- Windows specific flags -->
      <compilerarg value="-I${system.JAVA_HOME}/include" if="is.running.windows" />
      <compilerarg value="-I${system.JAVA_HOME}/include/win32" if="is.running.windows" />

      <linkerarg value="-ojspeex.dll" if="is.running.windows" />
      <linkerarg value="-Wl,--kill-at" if="is.running.windows" />
      <linkerarg value="-Wl,-Bstatic" location="end" if="is.running.windows" />
      <linkerarg value="-lspeex" location="end" if="is.running.windows" />
      <linkerarg value="-lspeexdsp" location="end" if="is.running.windows" />
      <linkerarg value="-Wl,-Bdynamic" location="end" if="is.running.windows" />
      <linkerarg value="-lm" location="end" if="is.running.windows" />

      <fileset dir="${src}/native/speex" includes="*.c"/>
    </cc>
  </target>

  <!-- compile jng722 library -->
  <target name="g722" description="Build jng722 shared library" depends="init-native">

    <cc outtype="shared" name="gcc" outfile="${native_install_dir}/jng722" objdir="${obj}">
      <!-- common compiler flags -->
      <compilerarg value="-std=c99" />
      <compilerarg value="-Wall" />
      <compilerarg value="-O2" />
      <compilerarg value="-D_JNI_IMPLEMENTATION_" />

      <!-- Linux specific flags -->
      <compilerarg value="-m32" if="cross_32" unless="is.running.macos" />
      <compilerarg value="-m64" if="cross_64" unless="is.running.macos" />
      <compilerarg value="-I${system.JAVA_HOME}/include" if="is.running.linux" />
      <compilerarg value="-I${system.JAVA_HOME}/include/linux" if="is.running.linux" />

      <linkerarg value="-m32" if="cross_32" unless="is.running.macos" />
      <linkerarg value="-m64" if="cross_64" unless="is.running.macos" />
      <linkerarg value="-Wl,-z,relro" if="is.running.debian"/>

      <!-- Mac OS X specific flags -->
      <compilerarg value="-mmacosx-version-min=10.5" if="is.running.macos"/>
      <compilerarg value="-arch"  if="is.running.macos" />
      <compilerarg value="x86_64" if="is.running.macos" />
      <compilerarg value="-arch" if="is.running.macos" />
      <compilerarg value="i386" if="is.running.macos" />
      <compilerarg value="-arch" if="is.running.macos" />
      <compilerarg value="ppc" if="is.running.macos" />
      <compilerarg value="-I/System/Library/Frameworks/JavaVM.framework/Headers" if="is.running.macos" />

      <linkerarg value="-o" location="end" if="is.running.macos" />
      <linkerarg value="libjng722.jnilib" location="end" if="is.running.macos" />
      <linkerarg value="-dynamiclib" if="is.running.macos" />
      <linkerarg value="-arch" if="is.running.macos" />
      <linkerarg value="x86_64" if="is.running.macos" />
      <linkerarg value="-arch" if="is.running.macos" />
      <linkerarg value="i386" if="is.running.macos" />
      <linkerarg value="-arch" if="is.running.macos" />
      <linkerarg value="ppc" if="is.running.macos" />

      <!-- Windows specific flags -->
      <compilerarg value="-I${system.JAVA_HOME}/include" if="is.running.windows" />
      <compilerarg value="-I${system.JAVA_HOME}/include/win32" if="is.running.windows" />

      <linkerarg value="-ojng722.dll" if="is.running.windows" />
      <linkerarg value="-Wl,--kill-at" if="is.running.windows" />

      <fileset dir="${src}/native/g722" includes="*.c"/>
    </cc>
  </target>

  <!-- compile hwaddressretriever library -->
  <target name="hwaddressretriever" description="Build hwaddressretriever shared library" depends="init-native,hwaddressretriever-windows"
    unless="is.running.windows">
    <cc outtype="shared" name="gcc" outfile="${native_install_dir}/hwaddressretriever" objdir="${obj}">
      <!-- common compiler flags -->
      <compilerarg value="-D_FORTIFY_SOURCE=2" if="is.running.debian"/>
      <compilerarg value="-Wall" />
      <compilerarg value="-O2" />
      <compilerarg value="-g" />
      <compilerarg value="-fstack-protector" if="is.running.debian"/>
      <compilerarg value="--param=ssp-buffer-size=4" if="is.running.debian"/>
      <compilerarg value="-Werror=format-security" if="is.running.debian"/>
      <compilerarg value="-Wformat" if="is.running.debian"/>

      <fileset dir="${src}/native/hwaddressretriever" includes="net*.c HardwareAddressRetriever_unix.c" />

      <!-- Linux specific flags -->
      <compilerarg value="-m32" if="cross_32" unless="is.running.macos" />
      <compilerarg value="-m64" if="cross_64" unless="is.running.macos" />
      <compilerarg value="-I${system.JAVA_HOME}/include" if="is.running.linux" />
      <compilerarg value="-I${system.JAVA_HOME}/include/linux" if="is.running.linux" />

      <linkerarg value="-m32" if="cross_32" unless="is.running.macos" />
      <linkerarg value="-m64" if="cross_64" unless="is.running.macos" />
      <linkerarg value="-Wl,-z,relro" if="is.running.debian"/>

      <!-- Mac OS X specific flags -->
      <compilerarg value="-mmacosx-version-min=10.5" if="is.running.macos"/>
      <compilerarg value="-arch" if="is.running.macos" />
      <compilerarg value="x86_64" if="is.running.macos" />
      <compilerarg value="-arch" if="is.running.macos" />
      <compilerarg value="i386" if="is.running.macos" />
      <compilerarg value="-arch" if="is.running.macos" />
      <compilerarg value="ppc" if="is.running.macos" />
      <compilerarg value="-I/System/Library/Frameworks/JavaVM.framework/Headers" if="is.running.macos" />

      <linkerarg value="-o" location="end" if="is.running.macos" />
      <linkerarg value="libhwaddressretriever.jnilib" location="end" if="is.running.macos" />
      <linkerarg value="-arch" if="is.running.macos" />
      <linkerarg value="x86_64" if="is.running.macos" />
      <linkerarg value="-arch" if="is.running.macos" />
      <linkerarg value="i386" if="is.running.macos" />
      <linkerarg value="-arch" if="is.running.macos" />
      <linkerarg value="ppc" if="is.running.macos" />
    </cc>
  </target>

  <!-- compile hwaddressretrieverr library for Windows-->
  <target name="hwaddressretriever-windows" description="Build hwaddressretriever shared library for Windows" if="is.running.windows"
    depends="init-native">
    <cc outtype="shared" name="msvc" outfile="${native_install_dir}/hwaddressretriever" objdir="${obj}">
      <compilerarg value="/O2" />
      <compilerarg value="/MT" location="end" />
      <compilerarg value="-I${system.JAVA_HOME}/include" />
      <compilerarg value="-I${system.JAVA_HOME}/include/win32" />

      <linkerarg value="iphlpapi.lib" location="end" />

      <fileset dir="${src}/native/hwaddressretriever" includes="net*.c HardwareAddressRetriever_win.c" />
    </cc>
  </target>

  <!-- compile galagonotification library -->
  <target name="galagonotification" description="Build galagonotification shared library" if="is.running.linux"
    depends="init-native">
    <cc outtype="shared" name="gcc" outfile="${native_install_dir}/galagonotification" objdir="${obj}">
      <compilerarg value="-std=c99" />
      <compilerarg value="-Wall" />
      <compilerarg value="-O2" />
      <compilerarg value="-I/usr/include/dbus-1.0" />
      <compilerarg value="-I/usr/lib/dbus-1.0/include" />
      <compilerarg value="-I/usr/lib/x86_64-linux-gnu/dbus-1.0/include" />
      <compilerarg value="-I/usr/lib/i386-linux-gnu/dbus-1.0/include" />
      <compilerarg value="-m32" if="cross_32" />
      <compilerarg value="-m64" if="cross_64" />
      <compilerarg value="-I${system.JAVA_HOME}/include" />
      <compilerarg value="-I${system.JAVA_HOME}/include/linux" />

      <linkerarg value="-m32" if="cross_32" />
      <linkerarg value="-m64" if="cross_64" />
      <linkerarg value="-ldbus-1" location="end" />
      <linkerarg value="-Wl,--as-needed" location="end" />
      <linkerarg value="-Wl,-z,defs" location="end" />
      <linkerarg value="-Wl,-z,relro" if="is.running.debian"/>

      <fileset dir="${src}/native/linux/galagonotification" includes="*.c"/>
    </cc>
  </target>

  <!-- compile LocalhostRetriever library -->
  <target name="localhostretriever" description="Build LocalhostRetriever shared library" if="is.running.windows"
    depends="init-native">
    <cc outtype="shared" name="msvc" outfile="${native_install_dir}/LocalhostRetriever" objdir="${obj}">
      <compilerarg value="/O2" />
      <compilerarg value="/MT" location="end" />
      <compilerarg value="-I${system.JAVA_HOME}/include" />
      <compilerarg value="-I${system.JAVA_HOME}/include/win32" />

      <linkerarg value="iphlpapi.lib" location="end" />

      <fileset dir="${src}/native/windows/LocalhostRetriever" includes="*.c"/>
    </cc>
  </target>

  <!-- compile AEGetURLEventHandler library for Mac OS X (32-bit/64-bit/ppc) -->
  <target name="aegeturleventhandler" description="Build AEGetURLEventHandler shared library for Mac OS X" if="is.running.macos"
    depends="init-native">
    <cc outtype="shared" name="gcc" outfile="${native_install_dir}/AEGetURLEventHandler" objdir="${obj}">
      <compilerarg value="-Wall" />
      <compilerarg value="-O2" />
      <compilerarg value="-arch" />
      <compilerarg value="x86_64" />
      <compilerarg value="-arch" />
      <compilerarg value="i386" />
      <compilerarg value="-arch" />
      <compilerarg value="ppc" />
      <compilerarg value="-I/System/Library/Frameworks/JavaVM.framework/Headers" />

      <linkerarg value="-o" location="end" />
      <linkerarg value="libAEGetURLEventHandlerAgent.jnilib" location="end" />
      <linkerarg value="-arch" />
      <linkerarg value="x86_64" />
      <linkerarg value="-arch" />
      <linkerarg value="i386" />
      <linkerarg value="-arch" />
      <linkerarg value="ppc" />
      <linkerarg value="-framework" />
      <linkerarg value="Foundation" />

      <fileset dir="${src}/native/macosx/launcharghandler" includes="*.m"/>
    </cc>
  </target>

  <!-- compile sparkle library for Mac OS X (32-bit/64-bit/ppc)
  make sure you do export MACOSX_DEPLOYMENT_TARGET=10.5
  and also:
  install_name_tool -change "@loader_path/../Frameworks/Sparkle.framework/Versions/A/Sparkle" "@executable_path/../Frameworks/Sparkle.framework/Versions/A/Sparkle" libsparkle_init.dylib
  -->
  <target name="sparkle" description="Build sparkle shared library for Mac OS X" if="is.running.macos"
    depends="init-native">
    <cc outtype="shared" name="gcc" outfile="${native_install_dir}/sparkle_init" objdir="${obj}">
      <compilerarg value="-Wall" />
      <compilerarg value="-O2" />
      <compilerarg value="-mmacosx-version-min=10.5" if="is.running.macos"/>
      <compilerarg value="-arch" />
      <compilerarg value="x86_64" />
      <compilerarg value="-arch" />
      <compilerarg value="i386" />
      <compilerarg value="-arch" />
      <compilerarg value="ppc" />
      <compilerarg value="-I/System/Library/Frameworks/JavaVM.framework/Headers" />
      <compilerarg value="-I/System/Library/Frameworks/Sparkle.framework/Versions/A/Headers/" />

      <linkerarg value="-arch" />
      <linkerarg value="x86_64" />
      <linkerarg value="-arch" />
      <linkerarg value="i386" />
      <linkerarg value="-arch" />
      <linkerarg value="ppc" />
      <linkerarg value="-framework" />
      <linkerarg value="AppKit" />
      <linkerarg value="-framework" />
      <linkerarg value="Foundation" />
      <linkerarg value="-framework" />
      <linkerarg value="Sparkle" />

      <fileset dir="${src}/native/macosx/sparkle" includes="*.m"/>
    </cc>
  </target>

  <!-- compile jnquicktime library for Mac OS X (32-bit/64-bit/ppc) -->
  <target name="quicktime" description="Build jnquicktime shared library for Mac OS X" if="is.running.macos"
    depends="init-native">
    <cc outtype="shared" name="gcc" outfile="${native_install_dir}/jnquicktime" objdir="${obj}">
      <compilerarg value="-Wall" />
      <compilerarg value="-O2" />
      <compilerarg value="-arch" />
      <compilerarg value="x86_64" />
      <compilerarg value="-arch" />
      <compilerarg value="i386" />
      <compilerarg value="-arch" />
      <compilerarg value="ppc" />
      <compilerarg value="-I/System/Library/Frameworks/JavaVM.framework/Headers" />

      <linkerarg value="-o" location="end" />
      <linkerarg value="libjnquicktime.jnilib" location="end" />
      <linkerarg value="-arch" />
      <linkerarg value="x86_64" />
      <linkerarg value="-arch" />
      <linkerarg value="i386" />
      <linkerarg value="-arch" />
      <linkerarg value="ppc" />
      <linkerarg value="-framework" />
      <linkerarg value="Foundation" />
      <linkerarg value="-framework" />
      <linkerarg value="QTKit" />
      <linkerarg value="-framework" />
      <linkerarg value="Quartz" />

      <fileset dir="${src}/native/macosx/quicktime" includes="*.c *.m"/>
    </cc>

    <delete dir="${obj}" failonerror="false" />
    <delete file="${native_install_dir}/history.xml" failonerror="false" />
  </target>

    <target name="sysactivity" description="Build sysactivity"
            depends="init-native">

    <cc outtype="shared" name="gcc" outfile="${native_install_dir}/sysactivitynotifications"
        objdir="${obj}">
        <!-- Common compiler flags -->
        <compilerarg value="-D_JNI_IMPLEMENTATION_" />
        <compilerarg value="-m32" if="cross_32" unless="is.running.macos" />
        <compilerarg value="-m64" if="cross_64" unless="is.running.macos" />
        <compilerarg value="-O2" />
        <compilerarg value="-Wall" />
        <compilerarg value="-Wextra" />

        <!-- Common linker flags -->
        <linkerarg value="-m32" if="cross_32" unless="is.running.macos" />
        <linkerarg value="-m64" if="cross_64" unless="is.running.macos" />

        <!-- Mac OS X-specific flags -->
        <compilerarg value="-mmacosx-version-min=10.5" if="is.running.macos"/>
        <compilerarg value="-arch" if="is.running.macos"/>
        <compilerarg value="x86_64" if="is.running.macos"/>
        <compilerarg value="-arch" if="is.running.macos"/>
        <compilerarg value="i386" if="is.running.macos"/>
        <compilerarg value="-arch" if="is.running.macos"/>
        <compilerarg value="ppc" if="is.running.macos"/>
        <compilerarg value="-I/System/Library/Frameworks/JavaVM.framework/Headers"
                   if="is.running.macos"/>

        <linkerarg value="-o" location="end" if="is.running.macos"/>
        <linkerarg value="libsysactivitynotifications.jnilib" location="end"
                   if="is.running.macos"/>
        <linkerarg value="-arch" if="is.running.macos"/>
        <linkerarg value="x86_64" if="is.running.macos"/>
        <linkerarg value="-arch" if="is.running.macos"/>
        <linkerarg value="i386" if="is.running.macos"/>
        <linkerarg value="-arch" if="is.running.macos"/>
        <linkerarg value="ppc" if="is.running.macos"/>
        <linkerarg value="-framework" if="is.running.macos"/>
        <linkerarg value="AppKit" if="is.running.macos"/>
        <linkerarg value="-framework" if="is.running.macos"/>
        <linkerarg value="Carbon" if="is.running.macos"/>
        <linkerarg value="-framework" if="is.running.macos"/>
        <linkerarg value="SystemConfiguration" if="is.running.macos"/>
        <linkerarg value="-framework" if="is.running.macos" />
        <linkerarg value="IOKit" if="is.running.macos" />

        <fileset dir="${src}/native/sysactivity" includes="*.m" if="is.running.macos"/>

        <!-- Linux-specific flags -->
        <compilerarg value="-I/usr/include/gtk-2.0" if="is.running.linux" />
        <compilerarg value="-I/usr/include/glib-2.0/" if="is.running.linux" />
        <compilerarg value="-I/usr/include/cairo/" if="is.running.linux" />
        <compilerarg value="-I/usr/include/pango-1.0/" if="is.running.linux" />
        <compilerarg value="-I/usr/include/gdk-pixbuf-2.0/" if="is.running.linux" />
        <compilerarg value="-I/usr/lib/glib-2.0/include/" if="is.running.linux" />
        <compilerarg value="-I/usr/lib/gtk-2.0/include/" if="is.running.linux" />
        <compilerarg value="-I/usr/lib/x86_64-linux-gnu/glib-2.0/include" if="is.running.linux" />
        <compilerarg value="-I/usr/lib/x86_64-linux-gnu/gtk-2.0/include" if="is.running.linux" />
        <compilerarg value="-I/usr/lib/i386-linux-gnu/glib-2.0/include" if="is.running.linux" />
        <compilerarg value="-I/usr/lib/i386-linux-gnu/gtk-2.0/include" if="is.running.linux" />

        <compilerarg value="-I${system.JAVA_HOME}/include" if="is.running.linux" />
        <compilerarg value="-I${system.JAVA_HOME}/include/linux" if="is.running.linux" />

        <linkerarg value="-lgdk-x11-2.0" if="is.running.linux" />
        <linkerarg value="-lXss" if="is.running.linux" />
        <linkerarg value="-Wl,-z,relro" if="is.running.debian"/>

        <fileset dir="${src}/native/sysactivity" includes="*.c" if="is.running.linux" />

        <!-- Windows-specific flags -->
        <compilerarg value="-D_WIN32_WINNT=0x0502" if="is.running.windows" />
        <compilerarg value="-DWINVER=0x0502" if="is.running.windows" />
        <compilerarg value="-I${system.JAVA_HOME}/include" if="is.running.windows" />
        <compilerarg value="-I${system.JAVA_HOME}/include/win32" if="is.running.windows" />

        <linkerarg value="-osysactivitynotifications.dll" if="is.running.windows" />
        <linkerarg value="-liphlpapi" location="end" if="is.running.windows" />
        <linkerarg value="-Wl,--kill-at" if="is.running.windows" />

        <fileset dir="${src}/native/sysactivity" includes="*.cpp" if="is.running.windows" />
    </cc>
  </target>
    <!-- compile sysactivity library for Windows
    "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.Cmd" /x86 /xp /Release
    -->
    <target name="sysactivity-windows"
            description="Build sysactivity shared library for Windows"
            if="is.running.windows"
            depends="init-native">
        <cc outtype="shared" name="msvc"
            outfile="${native_install_dir}/sysactivitynotifications"
            objdir="${obj}">
            <compilerarg value="/O2" />
            <compilerarg value="/GS" if="cross_64" />
            <compilerarg value="/MT" location="end" />
            <compilerarg value="-I${system.JAVA_HOME}/include" />
            <compilerarg value="-I${system.JAVA_HOME}/include/win32" />

            <linkerarg value="/LIBPATH:${system.JAVA_HOME}\\lib" />
            <linkerarg value="iphlpapi.lib" location="end" />
            <linkerarg value="user32.lib" location="end" />
            <linkerarg value="jawt.lib" location="end" />

            <fileset dir="${src}/native/sysactivity" includes="*.cpp" />
        </cc>
    </target>

    <target name="globalshortcut" description="Build globalshortcut"
            depends="init-native,globalshortcut-windows" unless="is.running.windows">

    <cc outtype="shared" name="gcc" outfile="${native_install_dir}/globalshortcut"
        objdir="${obj}">
        <!-- common compiler flags -->
        <compilerarg value="-Wall" />
        <compilerarg value="-Wextra" />

        <compilerarg value="-m32" if="cross_32" unless="is.running.macos" />
        <compilerarg value="-m64" if="cross_64" unless="is.running.macos" />
        <linkerarg value="-m32" if="cross_32" unless="is.running.macos" />
        <linkerarg value="-m64" if="cross_64" unless="is.running.macos" />

        <!-- Mac OS X specific flags -->
        <compilerarg value="-mmacosx-version-min=10.5" if="is.running.macos"/>
        <compilerarg value="-O2" if="is.running.macos"/>
        <compilerarg value="-arch" if="is.running.macos"/>
        <compilerarg value="x86_64" if="is.running.macos"/>
        <compilerarg value="-arch" if="is.running.macos"/>
        <compilerarg value="i386" if="is.running.macos"/>
        <compilerarg value="-I/System/Library/Frameworks/JavaVM.framework/Headers"
                   if="is.running.macos"/>

        <linkerarg value="-o" location="end" if="is.running.macos"/>
        <linkerarg value="libglobalshortcut.jnilib" location="end"
                   if="is.running.macos"/>
        <linkerarg value="-arch" if="is.running.macos"/>
        <linkerarg value="x86_64" if="is.running.macos"/>
        <linkerarg value="-arch" if="is.running.macos"/>
        <linkerarg value="i386" if="is.running.macos"/>
        <linkerarg value="-framework" if="is.running.macos"/>
        <linkerarg value="Foundation" if="is.running.macos"/>
        <linkerarg value="-framework" if="is.running.macos"/>
        <linkerarg value="Carbon" if="is.running.macos"/>
        <linkerarg value="-framework" if="is.running.macos"/>
        <linkerarg value="Cocoa" if="is.running.macos"/>

        <fileset dir="${src}/native/globalshortcut"
                 includes="*.m" if="is.running.macos"/>

        <!-- Linux specific flags -->
        <fileset dir="${src}/native/globalshortcut" includes="*.cc" if="is.running.linux" />

        <compilerarg value="-m32" if="cross_32" unless="is.running.macos" />
        <compilerarg value="-m64" if="cross_64" unless="is.running.macos" />
        <compilerarg value="-I${system.JAVA_HOME}/include" if="is.running.linux" />
        <compilerarg value="-I${system.JAVA_HOME}/include/linux" if="is.running.linux" />

        <linkerarg value="-m32" if="cross_32" unless="is.running.macos" />
        <linkerarg value="-m64" if="cross_64" unless="is.running.macos" />
        <linkerarg value="-lX11" if="is.running.linux" />
        <linkerarg value="-lstdc++" if="is.running.linux" />
        <linkerarg value="-Wl,-z,relro" if="is.running.debian"/>
    </cc>
  </target>

  <!-- compile globalshortcut library for Windows
  "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.Cmd" /x86 /xp /Release
  -->
  <target name="globalshortcut-windows"
          description="Build globalshortcut shared library for Windows"
          if="is.running.windows"
          depends="init-native">
      <cc outtype="shared" name="msvc"
          outfile="${native_install_dir}/globalshortcut"
          objdir="${obj}">
          <compilerarg value="/O2" />
          <compilerarg value="/GS" if="cross_64" />
          <compilerarg value="/EHsc" />
          <compilerarg value="/MT" location="end" />
          <compilerarg value="-I${system.JAVA_HOME}/include" />
          <compilerarg value="-I${system.JAVA_HOME}/include/win32" />

          <linkerarg value="/LIBPATH:${system.JAVA_HOME}\\lib" />
          <linkerarg value="iphlpapi.lib" location="end" />
          <linkerarg value="user32.lib" location="end" />
          <linkerarg value="jawt.lib" location="end" />

          <fileset dir="${src}/native/globalshortcut" includes="*.cpp" />
      </cc>
  </target>

    <target name="unbound"
            description="Build libjunbound"
            depends="init-native">

        <cc outtype="shared"
            name="g++"
            outfile="${native_install_dir}/junbound"
            objdir="${obj}">
                <!-- common compiler flags -->
                <compilerarg value="-Wall" />
                <compilerarg value="-Wreturn-type" />
                <compilerarg value="-fPIC"/>
                <compilerarg value="-D_JNI_IMPLEMENTATION_" />

                <compilerarg value="-I${system.JAVA_HOME}/include"
                             if="is.running.linux" />

                <linkerarg value="-Wl,-z,relro" if="is.running.debian"/>
                <linkerarg value="-shared"/>
                <linkerarg value="-lunbound" if="is.running.linux"/>

                <fileset dir="${src}/native/libjunbound/src"
                        includes="*.cpp"/>
        </cc>
    </target>

  <!-- Cleanup object file and shared libraries -->
  <target name="clean-native" description="Clean all object file and libraries.">
    <delete failonerror="false" includeemptydirs="true">
        <fileset dir="${obj}" />
        <fileset dir="${src}/native/" includes="*.dll *.so *.dyld *.jnilib *.manifest *.o *.obj *.lib *.exp history.xml" />
        <fileset dir="${sc.basedir}" includes="**.dll *.so *.dyld *.jnilib *.manifest *.o *.obj *.lib *.exp history.xml" />
    </delete>
  </target>

  <!-- Help, print useful targets -->
  <target name="help-native">
    <echo message="Targets available:" />
    <echo message="'ant screencapture' to compile screencapture shared library" />
    <echo message="'ant speex' to compile jspeex shared library" />
    <echo message="'ant g722' to compile jng722 shared library" />
    <echo message="'ant hid' to compile hid shared library" />
    <echo message="'ant hwaddressretriever' to compile hwaddressretriever shared library" />
    <echo message="'ant galagonotification (Linux only)' to compile galagonotification shared library" />
    <echo message="'ant localhostretriever (Windows only)' to compile LocalhostRetriever shared library" />
    <echo message="'ant aegeturleventhandler (Mac OS X only)' to compile AEGetURLEventHandler shared library" />
    <echo message="'ant sparkle (Mac OS X only)' to compile sparkle shared library" />
    <echo message="'ant quicktime (Mac OS X only)' to compile jquicktime shared library" />
    <echo message="" />
    <echo message="Options:" />
    <echo message="-Darch: cross-compile for 32-bit (-Darch=32), 64-bit (-Darch=64) or ppc (-Darch=ppc, Mac OS X only) targets. Windows users have to use gcc >= 4.5." />
    <echo message="" />
    <echo message="Please note that external libraries such as ffmpeg, x264, lame, portaudio and speex have to be compiled" />
    <echo message="(follow READMEs in relevant directory) before trying to compile libffmpeg and libjnportaudio"  />
    <echo message="When compiling libffmpeg you have to tell ant script the directory of ffmpeg and x264 with"  />
    <echo message="-Dffmpeg=/path/to/ffmpeg and -Dx264=/path/to/x264 -Dlame=/path/to/lame"  />
    <echo message="When compiling libjnportaudio you have to tell ant script the directory of portaudio and speex with"  />
    <echo message="-Dportaudio=/path/to/portaudio and -Dspeex=/path/to/speex"  />
  </target>

  <!-- compile jmsoutlookaddrbook library for Windows -->
  <!-- install tdm-gcc both 32 and 64 bit with command line tools and
       can directly use command prompt
       When changing idl file in visual studio console execute
       midl <idl file>.
  -->
  <target
      name="msoutlookaddrbook"
      description="Build jmsoutlookaddrbook shared library for Windows"
      if="is.running.windows"
      depends="init-native">
    <fail message="Outlook2010MAPIHeaders not set!"
        unless="Outlook2010MAPIHeaders" />
    <cc
        name="gcc"
        objdir="${obj}"
        outfile="${native_install_dir}/jmsoutlookaddrbook"
        outtype="shared">
      <compilerarg value="-D_JNI_IMPLEMENTATION_" />
      <compilerarg value="-D_WIN32_WINNT=0x0502" />
      <compilerarg value="-DWINVER=0x0502" />
      <compilerarg value="-I${system.JAVA_HOME}/include" />
      <compilerarg value="-I${system.JAVA_HOME}/include/win32" />
      <compilerarg value="-I${Outlook2010MAPIHeaders}" />
      <compilerarg value="-m32" if="cross_32" />
      <compilerarg value="-m64" if="cross_64" />
      <compilerarg value="-O2" />
      <compilerarg value="-Wall" />

      <linkerarg value="-ojmsoutlookaddrbook.dll" />
      <linkerarg value="-m32" if="cross_32" />
      <linkerarg value="-m64" if="cross_64" />
      <linkerarg value="-Wl,--kill-at" />
      <linkerarg value="-Wl,--subsystem,windows" />
      <linkerarg value="-Wl,-Bstatic" location="end" if="is.running.windows" />
      <libset libs="advapi32, uuid, ole32, oleaut32, msi, stdc++" />

      <fileset dir="${src}/native/addrbook" includes="*.c" />
      <fileset dir="${src}/native/addrbook/msoutlook" includes="*.cxx" />
      <fileset dir="${src}/native/addrbook/msoutlook/com/" includes="*.cxx" />
    </cc>
    <exec executable="strip">
      <arg value="-x"/>
      <arg value="${native_install_dir}/jmsoutlookaddrbook.dll"/>
    </exec>
  </target>

  <!-- compile msoutlookaddrbookserver executable for Windows -->
  <target
      name="msoutlookaddrbookcomserver"
      description="Build jmsoutlookaddrbookcomserver executable for Windows"
      if="is.running.windows"
      depends="init-native">
    <fail message="Outlook2010MAPIHeaders not set!"
        unless="Outlook2010MAPIHeaders" />
    <exec executable="cp">
      <arg value="${src}/native/addrbook/msoutlook/com/*.tlb"/>
      <arg value="${native_install_dir}/"/>
    </exec>
    <exec executable="windres">
      <arg value="--target=pe-i386"/>
      <arg value="${src}/native/addrbook/msoutlook/com/Resources32.rc" />
      <arg value="${obj}/Resources.o"/>
    </exec>
    <cc
        name="g++"
        objdir="${obj}"
        outfile="${native_install_dir}/jmsoutlookaddrbookcomserver32">
      <compilerarg value="-I${system.JAVA_HOME}/include" />
      <compilerarg value="-I${system.JAVA_HOME}/include/win32" />
      <compilerarg value="-I${Outlook2010MAPIHeaders}" />
      <compilerarg value="-m32" />
      <compilerarg value="-O2" />
      <compilerarg value="-Wall" />

      <linkerarg value="-ojmsoutlookaddrbookcomserver32.exe" />
      <linkerarg value="-m32" />
      <linkerarg value="${obj}/Resources.o" location="mid" />
      <linkerarg value="-Wl,-Bstatic" location="end" if="is.running.windows" />
      <libset libs="uuid, ole32, oleaut32, msi, stdc++" />

      <fileset dir="${src}/native/addrbook/msoutlook" includes="*.cxx" />
      <fileset dir="${src}/native/addrbook/msoutlook/com" includes="*.cxx" />
      <fileset dir="${src}/native/addrbook/msoutlook/com/server"
          includes="*.cxx" />
    </cc>
    <exec executable="strip">
      <arg value="-x"/>
      <arg value="${native_install_dir}/jmsoutlookaddrbookcomserver32.exe"/>
    </exec>

    <exec executable="windres">
      <arg value="--target=pe-x86-64"/>
      <arg value="${src}/native/addrbook/msoutlook/com/Resources64.rc" />
      <arg value="${obj}/Resources.o"/>
    </exec>
    <cc
        name="g++"
        objdir="${obj}"
        outfile="${native_install_dir}/jmsoutlookaddrbookcomserver64">
      <compilerarg value="-I${system.JAVA_HOME}/include" />
      <compilerarg value="-I${system.JAVA_HOME}/include/win32" />
      <compilerarg value="-I${Outlook2010MAPIHeaders}" />
      <compilerarg value="-m64" />
      <compilerarg value="-O2" />
      <compilerarg value="-Wall" />

      <linkerarg value="-ojmsoutlookaddrbookcomserver64.exe" />
      <linkerarg value="-m64" />
      <linkerarg value="${obj}/Resources.o" location="mid" />
      <linkerarg value="-Wl,-Bstatic" location="end" if="is.running.windows" />
      <libset libs="uuid, ole32, oleaut32, msi, stdc++" />

      <fileset dir="${src}/native/addrbook/msoutlook" includes="*.cxx" />
      <fileset dir="${src}/native/addrbook/msoutlook/com" includes="*.cxx" />
      <fileset dir="${src}/native/addrbook/msoutlook/com/server"
          includes="*.cxx" />
    </cc>
    <exec executable="strip">
      <arg value="-x"/>
      <arg value="${native_install_dir}/jmsoutlookaddrbookcomserver64.exe"/>
    </exec>
  </target>

  <!-- compile launcher for Mac OS X (32-bit/64-bit) -->
  <target name="macosx-launcher"
          description="Build macosx launcher shared library for Mac OS X"
          if="is.running.macos"
          depends="init-native">
    <cc name="gcc"
        outfile="${src}/native/macosx/launcher/JavaApplicationStub"
        objdir="${obj}">

        <compilerarg value="-Wall" />
        <compilerarg value="-O2" />
        <compilerarg value="-arch" />
        <compilerarg value="x86_64" />
        <compilerarg value="-arch" />
        <compilerarg value="i386" />
        <compilerarg value="-I${system.JAVA_HOME}/include" />
        <compilerarg value="-I${system.JAVA_HOME}/include/darwin" />
        <compilerarg value="-I/System/Library/Frameworks/JavaVM.framework/Versions/Current/Headers" />
        <compilerarg value="-mmacosx-version-min=10.6"/>

        <linkerarg value="-arch" />
        <linkerarg value="x86_64" />
        <linkerarg value="-arch" />
        <linkerarg value="i386" />
        <linkerarg value="-framework" />
        <linkerarg value="Cocoa" />

        <fileset dir="${src}/native/macosx/launcher" includes="*.m"/>
    </cc>

    <delete dir="${obj}" failonerror="false" />
    <delete file="${src}/native/macosx/launcher/history.xml" failonerror="false" />
  </target>
</project>
