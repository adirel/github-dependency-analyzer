apply plugin: 'android-library'
//apply plugin: 'hugo'
apply plugin: 'eclipse'


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    packagingOptions {
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/NOTICE.txt'
    }
    lintOptions {
        disable 'MissingTranslation'
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

    }
}
dependencies {
    compile project(':helper')
}

buildscript {
      dependencies {
        repositories {
            mavenCentral()
            maven {
                url "file:~/.m2/"
                artifactUrls "file:~/.m2/"
            }
        }
        classpath 'com.android.tools.build:gradle:0.9.+'
//        classpath 'com.jakewharton.hugo:hugo-plugin:1.0.+'
    }
}
dependencies {
      repositories {
        mavenCentral()

        // NOTE: This is only needed when developing the plugin!
        mavenLocal()
    }
}

gradle.projectsEvaluated {
    def projects=["custom_views","date-time-picker","widget"]
    for(String proj:projects){
        def res_dir=rootDir.toString()+"/"+proj+"/res"
        def res_v14_dir=rootDir.toString()+"/"+proj+"/res-v14"
        def script = (rootDir.toString()+"/build/scripts/generate_v14_compatible_resources.py --res-dir "+res_dir+" --res-v14-compatibility-dir "+res_v14_dir+"").execute()
        script.err.eachLine {line -> println "ERROR: " + line}
        script.waitFor()
        def res = fileTree(dir: res_dir)
        def res_v14 =fileTree(dir: res_v14_dir)
        def res_dest=fileTree(dir: rootDir.toString()+"/build/merged-res")
        copy{
            from (res_dir){
                include '**/*.xml'
            }
            from (res_v14_dir){
                include '**/*.xml'
            }
            into (rootDir.toString()+"/"+proj+"/merged-res") 
        }
    }
}
ext {
    compileSdkVersion = 19
    buildToolsVersion = "19.0.3"
    minSDKVersion = 8
}

configure(allprojects) {
    ext.androidSDKVersion = "19"
    ext.androidBuildToolsVersion = "19.0"
    ext.androidSupportVersion = "19.0.1"
    ext.androidPluginVersion ="0.9.+"
    ext.androidMinSDKVersion ="8"
    ext.jodaLibraryVersion = "2.2"
    ext.nineoldandroisVersion="2.4.0"
    ext.robotiumVersion = "5.1"
    ext.gsonVersion = "2.2.+"
    ext.commonLangVersion = "3.3"

}

allprojects {
    repositories {                   
        mavenCentral()
    }
}
buildscript {
      dependencies {
        repositories {
            mavenCentral()
            maven {
                url "file:~/.m2/"
                artifactUrls "file:~/.m2/"
            }
        }
        classpath 'com.android.tools.build:gradle:0.9.+'
//        classpath 'com.jakewharton.hugo:hugo-plugin:1.0.+'
    }
}
dependencies {
      repositories {
        mavenCentral()

        // NOTE: This is only needed when developing the plugin!
        mavenLocal()
    }
}

gradle.projectsEvaluated {
    def projects=["custom_views","date-time-picker","widget"]
    for(String proj:projects){
        def res_dir=rootDir.toString()+"/"+proj+"/res"
        def res_v14_dir=rootDir.toString()+"/"+proj+"/res-v14"
        def script = (rootDir.toString()+"/build/scripts/generate_v14_compatible_resources.py --res-dir "+res_dir+" --res-v14-compatibility-dir "+res_v14_dir+"").execute()
        script.err.eachLine {line -> println "ERROR: " + line}
        script.waitFor()
        def res = fileTree(dir: res_dir)
        def res_v14 =fileTree(dir: res_v14_dir)
        def res_dest=fileTree(dir: rootDir.toString()+"/build/merged-res")
        copy{
            from (res_dir){
                include '**/*.xml'
            }
            from (res_v14_dir){
                include '**/*.xml'
            }
            into (rootDir.toString()+"/"+proj+"/merged-res") 
        }
    }
}
ext {
    compileSdkVersion = 19
    buildToolsVersion = "19.0.3"
    minSDKVersion = 8
}

configure(allprojects) {
    ext.androidSDKVersion = "19"
    ext.androidBuildToolsVersion = "19.0"
    ext.androidSupportVersion = "19.0.1"
    ext.androidPluginVersion ="0.9.+"
    ext.androidMinSDKVersion ="8"
    ext.jodaLibraryVersion = "2.2"
    ext.nineoldandroisVersion="2.4.0"
    ext.robotiumVersion = "5.1"
    ext.gsonVersion = "2.2.+"
    ext.commonLangVersion = "3.3"

}

allprojects {
    repositories {                   
        mavenCentral()
    }
}
Not Foundapply plugin: 'android-library'
//apply plugin: 'hugo'
apply plugin: 'eclipse'


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion  
    packagingOptions {
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/NOTICE.txt'
    }
    lintOptions {
        disable 'MissingTranslation'
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

    }
}
dependencies {
    compile project(':helper')
}

apply plugin: 'android-library'
//apply plugin: 'hugo'
apply plugin: 'eclipse'


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion 
    packagingOptions {
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/NOTICE.txt'
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

    }
}


apply plugin: 'android-library'
//apply plugin: 'hugo'
apply plugin: 'eclipse'


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    packagingOptions {
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/NOTICE.txt'
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

    }
}
dependencies {
    compile project(':colorpicker')
    compile project(':helper')
}

apply plugin: 'android-library'
//apply plugin: 'hugo'
apply plugin: 'eclipse'


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion 
    packagingOptions {
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/NOTICE.txt'
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['merged-res']
            assets.srcDirs = ['assets']
        }

    }
}
dependencies {
    compile project(':model')
    compile project(':helper')
    compile project(':progresswheel')
    compile project(':date-time-picker')
}

apply plugin: 'android-library'
//apply plugin: 'hugo'
apply plugin: 'eclipse'


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion 
    packagingOptions {
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/NOTICE.txt'
    }
    lintOptions {
        disable 'MissingTranslation'
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['merged-res']
            assets.srcDirs = ['assets']
        }
    }
}


dependencies {
    compile project(':model')
    compile project(':helper')
    compile "com.nineoldandroids:library:$nineoldandroisVersion"
}

apply plugin: 'android-library'
//apply plugin: 'hugo'
apply plugin: 'eclipse'


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion  
    packagingOptions {
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/NOTICE.txt'
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }
}
dependencies {
    compile project(':helper')
}

apply plugin: 'android-library'
//apply plugin: 'hugo'
apply plugin: 'eclipse'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    packagingOptions {
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/NOTICE.txt'
    }
    lintOptions {
        disable 'MissingTranslation'
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

    }
}
dependencies {
    compile project(':helper')
}

apply plugin: 'android-library'
//apply plugin: 'hugo'
apply plugin: 'eclipse'


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion 
    packagingOptions {
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/NOTICE.txt'
    }
    lintOptions {
        disable 'MissingTranslation'
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

    }
}
dependencies {
    compile "com.android.support:appcompat-v7:$androidSupportVersion"
    compile "joda-time:joda-time:$jodaLibraryVersion"
}

apply plugin: 'android-library'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        minSdkVersion rootProject.ext.minSDKVersion
        targetSdkVersion rootProject.ext.compileSdkVersion
    }
    
    lintOptions {
        disable 'MissingTranslation'
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            aidl.srcDirs=['aild']
        }
    }
}
apply plugin: 'android'
//apply plugin: 'hugo'
apply plugin: 'eclipse'



android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    packagingOptions {
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/NOTICE.txt'
    }
    flavorGroups "stores"
    lintOptions {
        disable 'MissingTranslation'
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        androidTest.setRoot('tests')
        androidTest {
            manifest.srcFile 'tests/AndroidManifest.xml'
            java { srcDirs = ['tests/src']}
            res.srcDirs = ['tests/res']
            assets.srcDirs = ['tests/assets']
            resources.srcDirs = ['tests/src']
        }

    }
    defaultConfig {
            testPackageName "de.azapps.mirakelandroid.test"
            testInstrumentationRunner "android.test.InstrumentationTestRunner"
    }
    signingConfigs {
        release {
            storeFile file("debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            runProguard true
            proguardFile 'proguard-android.txt'
        }
	    debug {
            signingConfig signingConfigs.release
        }
    }
    productFlavors {
        google {
            flavorGroup "stores"
        }
        fdroid {
            flavorGroup "stores"
        }
    }
    android.sourceSets.google {
        manifest {
            srcFile "res-google/AndroidManifest.xml"
        }
        res{
            srcDir "res-google"
        }
    }
}

dependencies {
    compile project(':model')
    compile project(':helper')
    compile project(':widget')
    compile project(':tw_sync')
    compile project(':changelog')
    compile project(':settings')
    compile project(':ilovefs-android')
    compile project(':custom_views')
    compile project(':acra')
    compile project(':drag-sort-listview')

    //for tests
    androidTestCompile "com.jayway.android.robotium:robotium-solo:$robotiumVersion"
//    androidTestCompile 'junit:junit:4.8'
}


apply plugin: 'android-library'
//apply plugin: 'hugo'
apply plugin: 'eclipse'


android {
     compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    packagingOptions {
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/NOTICE.txt'
    }
    lintOptions {
        disable 'MissingTranslation'
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

    }
}
dependencies {
    compile project(':helper')
    compile "com.google.code.gson:gson:$gsonVersion"
    compile "org.apache.commons:commons-lang3:$commonLangVersion"
}

apply plugin: 'android-library'
//apply plugin: 'hugo'
apply plugin: 'eclipse'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    packagingOptions {
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/NOTICE.txt'
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

    }
}

apply plugin: 'android-library'
//apply plugin: 'hugo'
apply plugin: 'eclipse'



android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion 
    packagingOptions {
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/NOTICE.txt'
    }
    lintOptions{
        disable 'ExtraTranslation'
        enable 'RtlHardcoded','RtlCompat', 'RtlEnabled'
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

    }
}
dependencies {
    compile project(':model')
    compile project(':helper')
    compile project(':tw_sync')
    compile project(':changelog')
    compile project(':custom_views')
    compile project(':donationslib')
    compile project(':drag-sort-listview')
}

apply plugin: 'android-library'
//apply plugin: 'hugo'
apply plugin: 'eclipse'


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion  
    packagingOptions {
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/NOTICE.txt'
    }
    lintOptions {
        disable 'MissingTranslation'
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

    }
}
dependencies {
    compile project(':model')
    compile project(':helper')
}

apply plugin: 'android-library'
//apply plugin: 'hugo'
apply plugin: 'eclipse'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion 
    lintOptions{
        enable 'RtlHardcoded','RtlCompat', 'RtlEnabled'
    }
    packagingOptions {
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/NOTICE.txt'
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['merged-res']
            assets.srcDirs = ['assets']
        }
    }
}
dependencies {
    compile project(':model')
    compile project(':helper')
    compile project(':colorpickerpreference')
}

