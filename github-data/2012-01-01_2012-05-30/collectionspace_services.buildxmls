
<project name="3rdparty" default="package" basedir=".">
    <description>
        collectionspace 3rdparty
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value=".."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <property name="build" location="build"/>
    <property name="dist"  location="dist"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init">
    <!-- Create the time stamp -->
        <tstamp/>
    <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build}"/>
    </target>

    <target name="package" depends="package-unix,package-windows"
  		description="Package CollectionSpace Services" />  		
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="install" depends="package,install-unix,install-windows"
    	description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
    	description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="package"
    	description="deploy 3rdparty in ${jee.server.cspace}">
        <copy todir="${db.base.dir}/jdbc_drivers">
            <fileset dir="${basedir}/jdbc_drivers"/>
        </copy>

        <ant antfile="nuxeo/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
    	description="undeploy 3rdparty from ${jee.server.cspace}">
        <ant antfile="nuxeo/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist"
    	description="generate distribution for 3rdparty">
        <ant antfile="nuxeo/build.xml" target="dist" inheritall="false"/>
    </target>

</project>

<project name="nuxeo" default="package" basedir=".">
    <description>
        collectionspace nuxeo
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <property name="build" location="build"/>
    <property name="dist"  location="dist"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init">
    <!-- Create the time stamp -->
        <tstamp/>
    <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build}"/>

    </target>

    <target name="package" depends="package-unix,package-windows"
    	description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="package,install-unix,install-windows"
    	description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
    	description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="package"
    	description="deploy nuxeo server libs to ${jee.server.cspace}">
        <copy todir="${jee.server.cspace}/nuxeo-server">
           <fileset dir="${basedir}/nuxeo-server/${nuxeo.release}">
                <exclude name="**/config/*-repo-config.xml"/>
           </fileset>
        </copy>
        <echo message="Copying Nuxeo prototype repo config file ..."/>
        <copy todir="${jee.server.cspace}/cspace/config/services" overwrite="true">
            <fileset file="${basedir}/nuxeo-server/${nuxeo.release}/config/proto-repo-config.xml"/>
            <filterset>
		<filter token="DB_NUXEO_NAME" value="${db.nuxeo.name}" />
		<!-- The specific database name will be appended to the following JDBC URL during system -->
		<!-- startup, within each repository-specific config file that is 'cloned' from the -->
		<!-- prototype repo config file being written to here. -->
		<filter token="DB_URL" value="jdbc:${db}://${db.host}:${db.port}/"/>
            	<filter token="DB_SERVER_HOSTNAME" value="${db.host}"/>
		<filter token="XA_DATASOURCE" value="${db.xaDataSource}" />
                <filter token="NUXEO_USER" value="${db.nuxeo.user}" />
                <filter token="NUXEO_PW" value="${db.nuxeo.user.password}" />
            </filterset>
        </copy>
        <ant antfile="nuxeo-platform-collectionspace/build.xml" target="deploy" inheritall="false"/>
        <ant antfile="nuxeo-platform-listener/build.xml" target="deploy" inheritall="false"/>
				<!-- Disabled due to integration issues between ImageMagick and Ghostscript on Linux systems        
        <ant antfile="nuxeo-platform-thumbnail/build.xml" target="deploy" inheritall="false"/>
        -->
    </target>

    <target name="undeploy"
    	description="undeploy nuxeo server libs from ${jee.server.cspace}">
        <delete dir="${jee.server.cspace}/nuxeo-server/bundles"/>
        <delete dir="${jee.server.cspace}/nuxeo-server/config"/>
        <delete dir="${jee.server.cspace}/nuxeo-server/lib"/>
        <delete file="${jee.server.cspace}/cspace/config/services/proto-repo-config.xml" failonerror="false"/>
        <ant antfile="nuxeo-platform-collectionspace/build.xml" target="undeploy" inheritall="false"/>
        <ant antfile="nuxeo-platform-listener/build.xml" target="undeploy" inheritall="false"/>
		<ant antfile="nuxeo-platform-quote/build.xml" target="undeploy" inheritall="false"/>
		<ant antfile="nuxeo-platform-quote-api/build.xml" target="undeploy" inheritall="false"/>
		<!-- Disabled due to integration issues between ImageMagick and Ghostscript on Linux systems
		<ant antfile="nuxeo-platform-thumbnail/build.xml" target="undeploy" inheritall="false"/>
		-->
    </target>

    <target name="dist"
    	description="generate distribution for nuxeo server libs" depends="package">
        <copy todir="${services.trunk}/${dist.server.cspace}/nuxeo-server">
            <fileset dir="${basedir}/nuxeo-server"/>
        </copy>
    </target>

</project>
<project name="nuxeo-platform-cs-collectionspace_core" default="package" basedir=".">
  <description>
    CollectionSpace Core Nuxeo document type
  </description>
  <!-- set global properties for this build -->
  <property name="services.trunk" value="../../.."/>
  <!-- environment should be declared before reading build.properties -->
  <property environment="env" />
  <property file="${services.trunk}/build.properties" />
  <property name="mvn.opts" value="-V" />
  <property name="src" location="src"/>
  <property name="build" location="build"/>
  <property name="dist"  location="dist"/>
  <property name="nuxeo.collectionspace_core.jar"
    value="org.collectionspace.services.3rdparty.nuxeo.collectionspace_core-${cspace.release}.jar"/>
  <property name="nuxeo.collectionspace_core.jars.all"
    value="org.collectionspace.services.3rdparty.nuxeo.collectionspace_core-*.jar"/>
  
  <condition property="osfamily-unix">
    <os family="unix" />
  </condition>
  <condition property="osfamily-windows">
    <os family="windows" />
  </condition>
  
  <target name="init" >
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
  </target>
  
  <target name="package" depends="package-unix,package-windows"
    description="Package CollectionSpace Services" />
  <target name="package-unix" if="osfamily-unix">
    <exec executable="mvn" failonerror="true">
      <arg value="package" />
      <arg value="-Dmaven.test.skip=true" />
      <arg value="-f" />
      <arg value="${basedir}/pom.xml" />
      <arg value="-N" />
      <arg value="${mvn.opts}" />
    </exec>
  </target>
  <target name="package-windows" if="osfamily-windows">
    <exec executable="cmd" failonerror="true">
      <arg value="/c" />
      <arg value="mvn.bat" />
      <arg value="package" />
      <arg value="-Dmaven.test.skip=true" />
      <arg value="-f" />
      <arg value="${basedir}/pom.xml" />
      <arg value="-N" />
      <arg value="${mvn.opts}" />
    </exec>
  </target>
  
  <target name="install" depends="install-unix,install-windows"
    description="Install" />
  <target name="install-unix" if="osfamily-unix">
    <exec executable="mvn" failonerror="true">
      <arg value="install" />
      <arg value="-Dmaven.test.skip=true" />
      <arg value="-f" />
      <arg value="${basedir}/pom.xml" />
      <arg value="-N" />
      <arg value="${mvn.opts}" />
    </exec>
  </target>
  <target name="install-windows" if="osfamily-windows">
    <exec executable="cmd" failonerror="true">
      <arg value="/c" />
      <arg value="mvn.bat" />
      <arg value="install" />
      <arg value="-Dmaven.test.skip=true" />
      <arg value="-f" />
      <arg value="${basedir}/pom.xml" />
      <arg value="-N" />
      <arg value="${mvn.opts}" />
    </exec>
  </target>
  
  <target name="deploy" depends="install"
    description="deploy collectionspace core doctype in ${jee.server.nuxeo}">
    <copy file="${basedir}/target/${nuxeo.collectionspace_core.jar}"
      todir="${jee.deploy.nuxeo.plugins}"/>
  </target>
  
  <target name="undeploy"
    description="undeploy collectionspace core doctype from ${jee.server.nuxeo}">
    <delete>
      <fileset dir="${jee.deploy.nuxeo.plugins}">
        <include name="${nuxeo.collectionspace_core.jars.all}"/>		
      </fileset>	  
    </delete>
  </target>
  
</project>
<project name="nuxeo-listener" default="package" basedir=".">
    <description>
        CollectionSpace Nuxeo Listener buildfile.  This Ant buildfile
        builds modules containing services source code that relies on
        Nuxeo Event Listeners.
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <property name="build" location="build"/>
    <property name="dist"  location="dist"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init">
        <!-- Create the time stamp -->
        <tstamp/>
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build}"/>
    </target>

    <target name="package" depends="package-unix,package-windows"
            description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="package,install-unix,install-windows"
            description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
            description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="package"
            description="deploy nuxeo server libs to ${jee.server.cspace}">
        <ant antfile="updateobjectlocationonmove/build.xml" target="deploy" inheritall="false"/>
        <ant antfile="updaterelationsondelete/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
            description="undeploy nuxeo server libs from ${jee.server.cspace}">
        <ant antfile="updateobjectlocationonmove/build.xml" target="undeploy" inheritall="false"/>
        <ant antfile="updaterelationsondelete/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist"
            description="generate distribution for nuxeo server libs" depends="package">
        <ant antfile="updateobjectlocationonmove/build.xml" target="dist" inheritall="false"/>
        <ant antfile="updaterelationsondelete/build.xml" target="dist" inheritall="false"/>
    </target>

</project>
<project name="org.collectionspace.services.3rdparty.nuxeo.listener.updateobjectlocationonmove">
  <description>
    CollectionSpace Nuxeo listener component type
  </description>
  <!-- Set global properties for this build -->
  <property name="services.trunk" value="../../../.."/>
  <!-- Environment should be declared before reading build.properties -->
  <property environment="env" />
  <!-- Set global properties for this build -->
  <property file="${services.trunk}/build.properties" />
  <!-- Set local properties for this build -->
  <property file="build.properties" />
  <property name="mvn.opts" value="-V" />
  <property name="src" location="src"/>
  <property name="build" location="build"/>
  <property name="dist"  location="dist"/>

  <!-- module.name variable is set in the local properties file -->
  <property name="jar.name"
    value="org.collectionspace.services.listener.${listener.module.name}-${cspace.release}.jar"/>

  <property name="jar.all"
    value="org.collectionspace.services.listener.${listener.module.name}-*.jar"/>
  
  <condition property="osfamily-unix">
    <os family="unix" />
  </condition>
  <condition property="osfamily-windows">
    <os family="windows" />
  </condition>
  
  <target name="init" >
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
  </target>
  
  <target name="package" depends="package-unix,package-windows"
    description="Package CollectionSpace Services" />
  <target name="package-unix" if="osfamily-unix">
    <exec executable="mvn" failonerror="true">
      <arg value="package" />
      <arg value="-Dmaven.test.skip=true" />
      <arg value="-f" />
      <arg value="${basedir}/pom.xml" />
      <arg value="-N" />
      <arg value="${mvn.opts}" />
    </exec>
  </target>
  <target name="package-windows" if="osfamily-windows">
    <exec executable="cmd" failonerror="true">
      <arg value="/c" />
      <arg value="mvn.bat" />
      <arg value="package" />
      <arg value="-Dmaven.test.skip=true" />
      <arg value="-f" />
      <arg value="${basedir}/pom.xml" />
      <arg value="-N" />
      <arg value="${mvn.opts}" />
    </exec>
  </target>
  
  <target name="install" depends="install-unix,install-windows"
    description="Install" />
  <target name="install-unix" if="osfamily-unix">
    <exec executable="mvn" failonerror="true">
      <arg value="install" />
      <arg value="-Dmaven.test.skip=true" />
      <arg value="-f" />
      <arg value="${basedir}/pom.xml" />
      <arg value="-N" />
      <arg value="${mvn.opts}" />
    </exec>
  </target>
  <target name="install-windows" if="osfamily-windows">
    <exec executable="cmd" failonerror="true">
      <arg value="/c" />
      <arg value="mvn.bat" />
      <arg value="install" />
      <arg value="-Dmaven.test.skip=true" />
      <arg value="-f" />
      <arg value="${basedir}/pom.xml" />
      <arg value="-N" />
      <arg value="${mvn.opts}" />
    </exec>
  </target>
  
  <target name="deploy" depends="install"
    description="deploy collectionspace core doctype in ${jee.server.nuxeo}">
    <copy file="${basedir}/target/${jar.name}"
      todir="${jee.deploy.nuxeo.plugins}"/>
  </target>
  
  <target name="undeploy"
    description="undeploy collectionspace Thumbnail service from ${jee.server.nuxeo}">
    <delete>
      <fileset dir="${jee.deploy.nuxeo.plugins}">
        <include name="${jar.all}"/>
      </fileset>
    </delete>
  </target>
  
</project>
<project name="org.collectionspace.services.3rdparty.nuxeo.listener.updaterelationsondelete" default="package" basedir=".">
  <description>
    CollectionSpace Nuxeo listener component type
  </description>
  <!-- Set global properties for this build -->
  <property name="services.trunk" value="../../../.."/>
  <!-- Environment should be declared before reading build.properties -->
  <property environment="env" />
  <!-- Set global properties for this build -->
  <property file="${services.trunk}/build.properties" />
  <!-- Set local properties for this build -->
  <property file="build.properties" />
  <property name="mvn.opts" value="-V" />
  <property name="src" location="src"/>
  <property name="build" location="build"/>
  <property name="dist"  location="dist"/>

  <!-- The listener.module.name variable is set in a local properties file -->
  <property name="jar.name"
    value="org.collectionspace.services.listener.${listener.module.name}-${cspace.release}.jar"/>

  <property name="jar.all"
    value="org.collectionspace.services.listener.${listener.module.name}-*.jar"/>
  
  <condition property="osfamily-unix">
    <os family="unix" />
  </condition>
  <condition property="osfamily-windows">
    <os family="windows" />
  </condition>
  
  <target name="init" >
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
  </target>
  
  <target name="package" depends="package-unix,package-windows"
    description="Package CollectionSpace Services" />
  <target name="package-unix" if="osfamily-unix">
    <exec executable="mvn" failonerror="true">
      <arg value="package" />
      <arg value="-Dmaven.test.skip=true" />
      <arg value="-f" />
      <arg value="${basedir}/pom.xml" />
      <arg value="-N" />
      <arg value="${mvn.opts}" />
    </exec>
  </target>
  <target name="package-windows" if="osfamily-windows">
    <exec executable="cmd" failonerror="true">
      <arg value="/c" />
      <arg value="mvn.bat" />
      <arg value="package" />
      <arg value="-Dmaven.test.skip=true" />
      <arg value="-f" />
      <arg value="${basedir}/pom.xml" />
      <arg value="-N" />
      <arg value="${mvn.opts}" />
    </exec>
  </target>
  
  <target name="install" depends="install-unix,install-windows"
    description="Install" />
  <target name="install-unix" if="osfamily-unix">
    <exec executable="mvn" failonerror="true">
      <arg value="install" />
      <arg value="-Dmaven.test.skip=true" />
      <arg value="-f" />
      <arg value="${basedir}/pom.xml" />
      <arg value="-N" />
      <arg value="${mvn.opts}" />
    </exec>
  </target>
  <target name="install-windows" if="osfamily-windows">
    <exec executable="cmd" failonerror="true">
      <arg value="/c" />
      <arg value="mvn.bat" />
      <arg value="install" />
      <arg value="-Dmaven.test.skip=true" />
      <arg value="-f" />
      <arg value="${basedir}/pom.xml" />
      <arg value="-N" />
      <arg value="${mvn.opts}" />
    </exec>
  </target>
  
  <target name="deploy" depends="install"
    description="deploy doctype in ${jee.server.nuxeo}">
    <copy file="${basedir}/target/${jar.name}"
      todir="${jee.deploy.nuxeo.plugins}"/>
  </target>
  
  <target name="undeploy"
    description="undeploy doctype from ${jee.server.nuxeo}">
    <delete>
      <fileset dir="${jee.deploy.nuxeo.plugins}">
        <include name="${jar.all}"/>
      </fileset>
    </delete>
  </target>
  
</project>
<project name="org.collectionspace.services.3rdparty.nuxeo.quote-api" default="package" basedir=".">
  <description>
    CollectionSpace Nuxeo Quote component type
  </description>
  <!-- set global properties for this build -->
  <property name="services.trunk" value="../../.."/>
  <!-- environment should be declared before reading build.properties -->
  <property environment="env" />
  <property file="${services.trunk}/build.properties" />
  <property name="mvn.opts" value="-V" />
  <property name="src" location="src"/>
  <property name="build" location="build"/>
  <property name="dist"  location="dist"/>

  <property name="nuxeo.collectionspace.quote.jar"
    value="org.collectionspace.services.3rdparty.nuxeo.quote-api-${cspace.release}.jar"/>

  <property name="nuxeo.collectionspace.quote.jar.all"
    value="org.collectionspace.services.3rdparty.nuxeo.quote-api-*.jar"/>
  
  <condition property="osfamily-unix">
    <os family="unix" />
  </condition>
  <condition property="osfamily-windows">
    <os family="windows" />
  </condition>
  
  <target name="init" >
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
  </target>
  
  <target name="package" depends="package-unix,package-windows"
    description="Package CollectionSpace Services" />
  <target name="package-unix" if="osfamily-unix">
    <exec executable="mvn" failonerror="true">
      <arg value="package" />
      <arg value="-Dmaven.test.skip=true" />
      <arg value="-f" />
      <arg value="${basedir}/pom.xml" />
      <arg value="-N" />
      <arg value="${mvn.opts}" />
    </exec>
  </target>
  <target name="package-windows" if="osfamily-windows">
    <exec executable="cmd" failonerror="true">
      <arg value="/c" />
      <arg value="mvn.bat" />
      <arg value="package" />
      <arg value="-Dmaven.test.skip=true" />
      <arg value="-f" />
      <arg value="${basedir}/pom.xml" />
      <arg value="-N" />
      <arg value="${mvn.opts}" />
    </exec>
  </target>
  
  <target name="install" depends="install-unix,install-windows"
    description="Install" />
  <target name="install-unix" if="osfamily-unix">
    <exec executable="mvn" failonerror="true">
      <arg value="install" />
      <arg value="-Dmaven.test.skip=true" />
      <arg value="-f" />
      <arg value="${basedir}/pom.xml" />
      <arg value="-N" />
      <arg value="${mvn.opts}" />
    </exec>
  </target>
  <target name="install-windows" if="osfamily-windows">
    <exec executable="cmd" failonerror="true">
      <arg value="/c" />
      <arg value="mvn.bat" />
      <arg value="install" />
      <arg value="-Dmaven.test.skip=true" />
      <arg value="-f" />
      <arg value="${basedir}/pom.xml" />
      <arg value="-N" />
      <arg value="${mvn.opts}" />
    </exec>
  </target>
  
  <target name="deploy" depends="install"
    description="deploy collectionspace core doctype in ${jee.server.nuxeo}">
    <copy file="${basedir}/target/${nuxeo.collectionspace.quote.jar}"
      todir="${jee.deploy.nuxeo.plugins}"/>
  </target>
  
  <target name="undeploy"
    description="undeploy collectionspace Quote service from ${jee.server.nuxeo}">
    <delete>
      <fileset dir="${jee.deploy.nuxeo.plugins}">
        <include name="${nuxeo.collectionspace.quote.jar.all}"/>
      </fileset>
    </delete>
  </target>
  
</project>
<project name="org.collectionspace.services.3rdparty.nuxeo.quote" default="package" basedir=".">
  <description>
    CollectionSpace Nuxeo Quote component type
  </description>
  <!-- set global properties for this build -->
  <property name="services.trunk" value="../../.."/>
  <!-- environment should be declared before reading build.properties -->
  <property environment="env" />
  <property file="${services.trunk}/build.properties" />
  <property name="mvn.opts" value="-V" />
  <property name="src" location="src"/>
  <property name="build" location="build"/>
  <property name="dist"  location="dist"/>

  <property name="nuxeo.collectionspace.quote.jar"
    value="org.collectionspace.services.3rdparty.nuxeo.quote-${cspace.release}.jar"/>

  <property name="nuxeo.collectionspace.quote.jar.all"
    value="org.collectionspace.services.3rdparty.nuxeo.quote-*.jar"/>
  
  <condition property="osfamily-unix">
    <os family="unix" />
  </condition>
  <condition property="osfamily-windows">
    <os family="windows" />
  </condition>
  
  <target name="init" >
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
  </target>
  
  <target name="package" depends="package-unix,package-windows"
    description="Package CollectionSpace Services" />
  <target name="package-unix" if="osfamily-unix">
    <exec executable="mvn" failonerror="true">
      <arg value="package" />
      <arg value="-Dmaven.test.skip=true" />
      <arg value="-f" />
      <arg value="${basedir}/pom.xml" />
      <arg value="-N" />
      <arg value="${mvn.opts}" />
    </exec>
  </target>
  <target name="package-windows" if="osfamily-windows">
    <exec executable="cmd" failonerror="true">
      <arg value="/c" />
      <arg value="mvn.bat" />
      <arg value="package" />
      <arg value="-Dmaven.test.skip=true" />
      <arg value="-f" />
      <arg value="${basedir}/pom.xml" />
      <arg value="-N" />
      <arg value="${mvn.opts}" />
    </exec>
  </target>
  
  <target name="install" depends="install-unix,install-windows"
    description="Install" />
  <target name="install-unix" if="osfamily-unix">
    <exec executable="mvn" failonerror="true">
      <arg value="install" />
      <arg value="-Dmaven.test.skip=true" />
      <arg value="-f" />
      <arg value="${basedir}/pom.xml" />
      <arg value="-N" />
      <arg value="${mvn.opts}" />
    </exec>
  </target>
  <target name="install-windows" if="osfamily-windows">
    <exec executable="cmd" failonerror="true">
      <arg value="/c" />
      <arg value="mvn.bat" />
      <arg value="install" />
      <arg value="-Dmaven.test.skip=true" />
      <arg value="-f" />
      <arg value="${basedir}/pom.xml" />
      <arg value="-N" />
      <arg value="${mvn.opts}" />
    </exec>
  </target>
  
  <target name="deploy" depends="install"
    description="deploy collectionspace core doctype in ${jee.server.nuxeo}">
    <copy file="${basedir}/target/${nuxeo.collectionspace.quote.jar}"
      todir="${jee.deploy.nuxeo.plugins}"/>
  </target>
  
  <target name="undeploy"
    description="undeploy collectionspace Quote service from ${jee.server.nuxeo}">
    <delete>
      <fileset dir="${jee.deploy.nuxeo.plugins}">
        <include name="${nuxeo.collectionspace.quote.jar.all}"/>
      </fileset>
    </delete>
  </target>
  
</project>
<project name="org.collectionspace.services.3rdparty.nuxeo.thumbnail" default="package" basedir=".">
  <description>
    CollectionSpace Nuxeo Thumbnail component type
  </description>
  <!-- set global properties for this build -->
  <property name="services.trunk" value="../../.."/>
  <!-- environment should be declared before reading build.properties -->
  <property environment="env" />
  <property file="${services.trunk}/build.properties" />
  <property name="mvn.opts" value="-V" />
  <property name="src" location="src"/>
  <property name="build" location="build"/>
  <property name="dist"  location="dist"/>

  <property name="nuxeo.collectionspace.thumbnail.jar"
    value="org.collectionspace.services.3rdparty.nuxeo.thumbnail-${cspace.release}.jar"/>

  <property name="nuxeo.collectionspace.thumbnail.jar.all"
    value="org.collectionspace.services.3rdparty.nuxeo.thumbnail-*.jar"/>
  
  <condition property="osfamily-unix">
    <os family="unix" />
  </condition>
  <condition property="osfamily-windows">
    <os family="windows" />
  </condition>
  
  <target name="init" >
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
  </target>
  
  <target name="package" depends="package-unix,package-windows"
    description="Package CollectionSpace Services" />
  <target name="package-unix" if="osfamily-unix">
    <exec executable="mvn" failonerror="true">
      <arg value="package" />
      <arg value="-Dmaven.test.skip=true" />
      <arg value="-f" />
      <arg value="${basedir}/pom.xml" />
      <arg value="-N" />
      <arg value="${mvn.opts}" />
    </exec>
  </target>
  <target name="package-windows" if="osfamily-windows">
    <exec executable="cmd" failonerror="true">
      <arg value="/c" />
      <arg value="mvn.bat" />
      <arg value="package" />
      <arg value="-Dmaven.test.skip=true" />
      <arg value="-f" />
      <arg value="${basedir}/pom.xml" />
      <arg value="-N" />
      <arg value="${mvn.opts}" />
    </exec>
  </target>
  
  <target name="install" depends="install-unix,install-windows"
    description="Install" />
  <target name="install-unix" if="osfamily-unix">
    <exec executable="mvn" failonerror="true">
      <arg value="install" />
      <arg value="-Dmaven.test.skip=true" />
      <arg value="-f" />
      <arg value="${basedir}/pom.xml" />
      <arg value="-N" />
      <arg value="${mvn.opts}" />
    </exec>
  </target>
  <target name="install-windows" if="osfamily-windows">
    <exec executable="cmd" failonerror="true">
      <arg value="/c" />
      <arg value="mvn.bat" />
      <arg value="install" />
      <arg value="-Dmaven.test.skip=true" />
      <arg value="-f" />
      <arg value="${basedir}/pom.xml" />
      <arg value="-N" />
      <arg value="${mvn.opts}" />
    </exec>
  </target>
  
  <target name="deploy" depends="install"
    description="deploy collectionspace core doctype in ${jee.server.nuxeo}">
    <copy file="${basedir}/target/${nuxeo.collectionspace.thumbnail.jar}"
      todir="${jee.deploy.nuxeo.plugins}"/>
  </target>
  
  <target name="undeploy"
    description="undeploy collectionspace Thumbnail service from ${jee.server.nuxeo}">
    <delete>
      <fileset dir="${jee.deploy.nuxeo.plugins}">
        <include name="${nuxeo.collectionspace.thumbnail.jar.all}"/>
      </fileset>
    </delete>
  </target>
  
</project>
<project name="services-trunk" default="package" basedir=".">
	<description>Collectionspace Services</description>
	<!-- environment should be declared before reading build.properties -->
	<property environment="env" />
	<!-- set global properties for this build -->
	<property file="build.properties" />
	<property name="mvn.opts" value="-V" />
	<property name="src" location="src" />

	<condition property="osfamily-unix">
		<os family="unix" />
	</condition>
	<condition property="osfamily-windows">
		<os family="windows" />
	</condition>

	<target name="init">
		<!-- Create the time stamp -->
		<tstamp />
	</target>

	<target name="dist" depends="package" description="generate cspace service distribution">
		<!-- Create the distribution directory -->
		<mkdir dir="${basedir}/dist" />

		<!-- copy db scripts, etc. -->
		<copy todir="${basedir}/${dist.server.cspace}/cspace/services">
			<fileset dir="${src}/main/resources/scripts" />
		</copy>

		<!-- copy datasources -->
		<copy todir="${basedir}/${dist.deploy.cspace}">
			<fileset dir="${src}/main/resources/config/${db}" />
		</copy>
		<ant antfile="3rdparty/build.xml" target="dist" inheritAll="false" />
		<ant antfile="services/build.xml" target="dist" inheritAll="false" />

		<!-- bundle up everything -->
		<tar destfile="${basedir}/dist/${cspace.services.release}-${jee.release}.tar.gz" compression="gzip">
			<tarfileset dir="${basedir}/dist/cspace" preserveLeadingSlashes="true">
			</tarfileset>
		</tar>
	</target>

	<target name="dist-jee-domains" depends="init" description="create JEE distributions for cspace and nuxeo">
		<antcall target="dist-jee-cspace" />
		<antcall target="dist-jee-nuxeo" />
	</target>

	<target name="dist-jee-cspace" depends="dist" description="generate JEE distribution for cspace">
		<fail message="JEE container is not installed or ${jee.dir} not found">
			<condition>
				<not>
					<available file="${jee.dir}" type="dir" />
				</not>
			</condition>
		</fail>

		<fail message="CSpace is not deployed or ${jee.deploy.cspace.services} not found">
			<condition>
				<not>
					<available file="${jee.deploy.cspace.services}" type="file" />
				</not>
			</condition>
		</fail>

		<tar destfile="${basedir}/dist/${jee.release}-${domain.cspace}-${release.version}.tar.gz" compression="gzip">
			<tarfileset dir="${jee.dir}" prefix="${jee.release}" preserveLeadingSlashes="true">
				<exclude name="server/${jee.domain.nuxeo}/**" />
				<exclude name="server/${jee.domain.cspace}/log/**" />
				<exclude name="server/${jee.domain.cspace}/tmp/**" />
			</tarfileset>
		</tar>
	</target>

	<target name="dist-jee-nuxeo" depends="dist" description="generate nuxeo domain distribution">
		<fail message="JEE server is not installed or ${jee.dir} not found">
			<condition>
				<not>
					<available file="${jee.dir}" type="dir" />
				</not>
			</condition>
		</fail>

		<fail message="Nuxeo is not deployed or ${jee.deploy.nuxeo.plugins} not found">
			<condition>
				<not>
					<available file="${jee.deploy.nuxeo.plugins}" type="dir" />
				</not>
			</condition>
		</fail>

		<tar destfile="${basedir}/dist/${jee.release}-${domain.nuxeo}-${release.version}.tar.gz" compression="gzip">
			<tarfileset dir="${jee.dir}" prefix="${jee.release}" preserveLeadingSlashes="true">
				<exclude name="server/${jee.domain.cspace}/**" />
				<exclude name="server/${jee.domain.nuxeo}/log/**" />
				<exclude name="server/${jee.domain.nuxeo}/tmp/**" />
			</tarfileset>
		</tar>
	</target>

	<target name="package" depends="package-unix,package-windows" description="mvn package" />
	<target name="package-unix" if="osfamily-unix">
		<exec executable="mvn" failonerror="true">
			<arg value="package" />
			<arg value="-Dmaven.test.skip=true" />
			<arg value="-f" />
			<arg value="${basedir}/pom.xml" />
			<arg value="-N" />
			<arg value="${mvn.opts}" />
		</exec>
	</target>
	<target name="package-windows" if="osfamily-windows">
		<exec executable="cmd" failonerror="true">
			<arg value="/c" />
			<arg value="mvn.bat" />
			<arg value="package" />
			<arg value="-Dmaven.test.skip=true" />
			<arg value="-f" />
			<arg value="${basedir}/pom.xml" />
			<arg value="-N" />
			<arg value="${mvn.opts}" />
		</exec>
	</target>

	<target name="install" depends="install-unix,install-windows" description="mvn install" />
	<target name="install-unix" if="osfamily-unix">
		<exec executable="mvn" failonerror="true">
			<arg value="install" />
			<arg value="-Dmaven.test.skip=true" />
			<arg value="-f" />
			<arg value="${basedir}/pom.xml" />
			<arg value="-N" />
			<arg value="${mvn.opts}" />
		</exec>
	</target>
	<target name="install-windows" if="osfamily-windows">
		<exec executable="cmd" failonerror="true">
			<arg value="/c" />
			<arg value="mvn.bat" />
			<arg value="install" />
			<arg value="-Dmaven.test.skip=true" />
			<arg value="-f" />
			<arg value="${basedir}/pom.xml" />
			<arg value="-N" />
			<arg value="${mvn.opts}" />
		</exec>
	</target>

	<target name="clean" depends="clean-unix,clean-windows" description="Delete target directories">
		<delete dir="${basedir}/build" />
		<delete dir="${basedir}/dist" />
	</target>
	<target name="clean-unix" if="osfamily-unix">
		<exec executable="mvn" failonerror="true">
			<arg value="clean" />
			<arg value="${mvn.opts}" />
		</exec>
	</target>
	<target name="clean-windows" if="osfamily-windows">
		<exec executable="cmd" failonerror="true">
			<arg value="/c" />
			<arg value="mvn.bat" />
			<arg value="clean" />
			<arg value="${mvn.opts}" />
		</exec>
	</target>

	<target name="test" depends="test-unix,test-windows" description="Run tests" />
	<target name="test-unix" if="osfamily-unix">
		<exec executable="mvn" failonerror="true">
			<arg value="test" />
			<arg value="${mvn.opts}" />
		</exec>
	</target>
	<target name="test-windows" if="osfamily-windows">
		<exec executable="cmd" failonerror="true">
			<arg value="/c" />
			<arg value="mvn.bat" />
			<arg value="test" />
			<arg value="${mvn.opts}" />
		</exec>
	</target>

	<target name="doc" description="Build Java API docs">
		<ant antfile="services/build.xml" target="doc" inheritAll="false" />
	</target>

	<target name="gen_ddl" description="generate service-specific tables(s), indices, etc.">
		<ant antfile="services/build.xml" target="gen_ddl" inheritAll="false" />
	</target>

	<target name="create_db" depends="create_db-unix,create_db-windows" description="create database(s), invoke subtasks for indexes, etc.">
		<antcall target="create_nuxeo_db" />
		<antcall target="create_cspace_db" />
	</target>
	
	<target name="create_db-unix" if="osfamily-unix">
		<exec executable="mvn" failonerror="true">
			<arg value="validate" /> <!-- Ensure proper env vars are set -->
			<arg value="${mvn.opts}" />
		</exec>
	</target>
	<target name="create_db-windows" if="osfamily-windows">
		<exec executable="cmd" failonerror="true">
			<arg value="/c" />
			<arg value="mvn.bat" />
			<arg value="validate" /> <!-- Ensure proper env vars are set -->
			<arg value="${mvn.opts}" />
		</exec>
	</target>
	

	<target name="create_nuxeo_db" description="create nuxeo database">
		<sql driver="${db.jdbc.driver.class}" url="${db.jdbc.csadmin.url}" userid="${db.csadmin.user}" password="${db.csadmin.user.password}" autocommit="true" src="${db.script.dir}/init_nuxeo_db.sql">
			<classpath>
				<pathelement path="${db.driver.jar}" />
			</classpath>
		</sql>
		<ant antfile="services/build.xml" target="create_nuxeo_db" inheritAll="false" />
	</target>

	<target name="create_cspace_db" description="create cspace database">
		<sql driver="${db.jdbc.driver.class}" url="${db.jdbc.csadmin.url}" userid="${db.csadmin.user}" password="${db.csadmin.user.password}" autocommit="true" src="${db.script.dir}/init_cspace_db.sql">
			<classpath>
				<pathelement path="${db.driver.jar}" />
			</classpath>
		</sql>
		<ant antfile="services/build.xml" target="create_cspace_db" inheritAll="false" />
	</target>

	<target name="import" description="import default configuration">
		<ant antfile="services/build.xml" target="import" inheritAll="false" />
	</target>

	<target name="deploy" depends="install, setup_initdb.sql" description="deploy services in ${jee.server.cspace}">
		<!-- copy db scripts, etc. -->
		<copy todir="${jee.server.cspace}/cspace/services/scripts">
			<fileset dir="${src}/main/resources/scripts/" />
		</copy>
		<ant antfile="3rdparty/build.xml" target="deploy" inheritAll="false" />
		<ant antfile="services/build.xml" target="deploy" inheritAll="false" />
	</target>

	<target name="setup_initdb.sql" description="copy init_db scripts, replacing keywords">
		<copy todir="${jee.server.cspace}/cspace/services/db">
			<fileset dir="${src}/main/resources/db" />
			<filterset>
				<filter token="DB_CSADMIN_NAME" value="${db.csadmin.name}" />
				<filter token="DB_CSADMIN_USER" value="${db.csadmin.user}" />
				<filter token="DB_CSADMIN_PASSWORD" value="${env.DB_CSADMIN_PASSWORD}" />
				<!-- Note: double-subs from ${db.xyz.password} fail -->

				<filter token="DB_CSPACE_NAME" value="${db.cspace.name}" />
				<filter token="DB_CSPACE_USER" value="${db.cspace.user}" />
				<filter token="DB_CSPACE_PASSWORD" value="${env.DB_CSPACE_PASSWORD}" />
				<!-- Note: double-subs from ${db.xyz.password} fail -->

				<filter token="DB_NUXEO_NAME" value="${db.nuxeo.name}" />
				<filter token="DB_NUXEO_USER" value="${db.nuxeo.user}" />
				<filter token="DB_NUXEO_PASSWORD" value="${env.DB_NUXEO_PASSWORD}" />
				<!-- Note: double-subs from ${db.xyz.password} fail -->

				<filter token="DB_READER_USER" value="${db.reader.user}" />
				<filter token="DB_READER_PASSWORD" value="${env.DB_READER_PASSWORD}" />
				<!-- Note: double-subs from ${db.xyz.password} fail -->
			</filterset>
		</copy>
	</target>

	<target name="undeploy" description="undeploy services from ${jee.server.cspace}">
		<ant antfile="services/build.xml" target="undeploy" inheritAll="false" />
		<ant antfile="3rdparty/build.xml" target="undeploy" inheritAll="false" />
		<delete failonerror="false" dir="${jee.server.cspace}/cspace/services" />
		<delete failonerror="false" dir="${jee.server.cspace}/cspace/config/services" />
		<!-- Delete mysql-ds.xml to clean up pre-1.8 bundles -->
		<delete failonerror="false" file="${jee.deploy.cspace}/mysql-ds.xml" />
		<delete failonerror="false" file="${jee.deploy.cspace}/jee-ds.xml" />
		<delete failonerror="false" file="${jee.deploy.cspace}/cspace-ds.xml" />
	</target>

	<target name="hotdeploy" depends="install" description="deploy services in running ${jee.server.cspace}">
		<ant antfile="services/build.xml" target="hotdeploy" inheritAll="false" />
	</target>

	<target name="eclipse" depends="eclipse-unix,eclipse-windows" description="Generate Eclipse files" />
	<target name="eclipse-unix" if="osfamily-unix">
		<exec executable="mvn" failonerror="true">
			<arg value="eclipse:clean" />
			<arg value="eclipse:eclipse" />
			<arg value="${mvn.opts}" />
		</exec>
		<exec executable="fixeclipse" failonerror="true" />
	</target>
	<target name="eclipse-windows" if="osfamily-windows">
		<exec executable="cmd" failonerror="true">
			<arg value="/c" />
			<arg value="mvn.bat" />
			<arg value="eclipse:clean" />
			<arg value="eclipse:eclipse" />
			<arg value="${mvn.opts}" />
		</exec>
	</target>

</project>
<project name="trunk-install" default="package" basedir=".">
    <description>
        collectionspace services
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <property file="build.properties" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>
    
    <target name="install"
    	description="Installer: Copy artifacts for CollectionSpace Nuxeo doctypes">
        <!-- cspace\server\cspace -->     
        <copy todir="${jee.server.cspace}/cspace">
            <fileset dir="${services.trunk}/${dist.server.cspace}/cspace"/>
        </copy>
        <!-- cspace\server\cspace\deploy -->     
        <copy todir="${jee.server.cspace}/deploy">
            <fileset dir="${services.trunk}/${dist.server.cspace}/deploy">
            	<include name="*"/>
            </fileset>
        </copy>
        <!-- cspace\server\cspace\lib -->      
        <copy todir="${jee.server.cspace}/lib">
            <fileset dir="${services.trunk}/${dist.server.cspace}/lib"/>
        </copy>   
        <!-- cspace\server\cspace\nuxeo-client\lib -->     
        <copy todir="${jee.server.cspace}/nuxeo-client/lib">
            <fileset dir="${services.trunk}/${dist.server.cspace}/nuxeo-client/lib">
            	<include name="*.jar"/>
						</fileset>
        </copy>
        <!-- cspace\server\cspace\nuxeo-client\lib (5.2GA) -->      
        <copy todir="${jee.server.cspace}/nuxeo-client/lib">
            <fileset dir="${services.trunk}/${dist.server.cspace}/nuxeo-client/lib/${nuxeo.release}">
            	<include name="*.jar"/>
						</fileset>
        </copy>
        <!-- Now execute the "install" target on the services -->
				<ant antfile="services/build.xml" target="install" inheritAll="false"/>        
    </target>    
    
    <target name="config" description="" depends="install">
        <!-- Now execute the "install" target on the services -->
				<ant antfile="services/build.xml" target="config" inheritAll="false"/>        
    </target>    
    
    <target name="predeploy" depends="config, create_cspace_db, create_nuxeo_db">
				<!-- Now, invoke the "predeploy" target on each of the services' install directories -->
        <ant antfile="services/build.xml" target="predeploy" inheritAll="false"/>        	
    </target>

		<target name="create_nuxeo_db" 
							description="create nuxeo database">
			<sql driver="${db.jdbc.driver.class}"
							 url="${db.jdbc.baseurl}"
							 userid="${db.csadmin.user}"
							 password="${db.csadmin.user.password}"
							 autocommit="true"
							 src="${db.script.dir}/init_nuxeo_db.sql"
							 >
				<classpath>
					<pathelement path="${db.driver.jar}"/>
				</classpath>
			</sql>
		<ant antfile="services/build.xml" target="create_nuxeo_db" inheritAll="false"/>
		</target>

		<target name="create_cspace_db" 
			description="create cspace database">
			<sql driver="${db.jdbc.driver.class}"
							 url="${db.jdbc.baseurl}"
							 userid="${db.csadmin.user}"
							 password="${db.csadmin.user.password}"
							 autocommit="true"
							 src="${db.script.dir}/init_cspace_db.sql"
							 >
				<classpath>
					<pathelement path="${db.driver.jar}"/>
				</classpath>
			</sql>
		<ant antfile="services/build.xml" target="create_cspace_db" inheritAll="false"/>
		</target>


    
    <target name="deploy" description="">
				<!-- Now, invoke the "deploy" target on each of the services' install directories -->
        <ant antfile="services/build.xml" target="deploy" inheritAll="false"/>        	
    </target>     
    	
    <target name="postdeploy">
        <exec executable="echo">
        		<arg value="Installer: Executing installer's &apos;postdeploy&apos; target." />
				</exec>
				<!-- Now, invoke the "postdeploy" target on each of the services' install directories -->
        <ant antfile="services/build.xml" target="postdeploy" inheritAll="false"/>
    </target>

</project>

<project name="jaxrs.provider" default="package" basedir=".">
    <description>
        collectionspace services war
    </description>
	<!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
	<property name="application.trunk" location="${services.trunk}/../application" />
	<property name="cspace.tool.csmake" value="csmake" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init">
    <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>


    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="hotdeploy" depends="install,hotdeploy-unix,hotdeploy-windows"
  description="Hot deploy" />
    <target name="hotdeploy-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="properties:read-project-properties" />
            <arg value="cargo:deployer-undeploy" />
            <arg value="cargo:deployer-deploy" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="hotdeploy-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="properties:read-project-properties" />
            <arg value="cargo:deployer-undeploy" />
            <arg value="cargo:deployer-deploy" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="package,deploy_services_artifacts"
    description="deploy cspace services in ${jee.server.cspace}">
		<delete file="${catalina.context.cspace}"/> <!-- This is a Tomcat specific file that we seem to need to delete inorder for it to be replace with a more recent one during deployment -->
		<delete dir="${jee.deploy.cspace}/${cspace.services.context}"/>
        <copy file="${basedir}/target/${cspace.services.war}" todir="${jee.deploy.cspace}"/>
    </target>
	
	<!--
		This target attempts to generate a set of Service artifacts (Nuxeo bundles and tenant bindings) by using the
		Application layer's configuration files.
		
		This target has a dependency on the Application layer's source tree.  It assumes the Application layer's src tree root
		is a directory sibling of the Source layer's source tree root.  Also, it assumes the "csmake.jar" exists in the target
		directory of the Application layer's "tomcat-main" module.
		
		This target also assumes that the system environment variable 'CSPACE_JEESERVER_HOME' is set and pointing to the root
		JEE server (usually Apache Tomcat) where CollectionSpace is installed.  All generated Service artifacts wi
	-->
	<target name="deploy_services_artifacts"
		description="Generates and deploys the CollectionSpace Services' schema bundles, doctype bundles, and tenant bindings.">
		<exec executable="${env.JAVA_HOME}/bin/java" failonerror="true">
			<arg value="-Done-jar.silent=true" />
			<arg value="-Dcatalina.home=${env.CSPACE_JEESERVER_HOME}" />
			<arg value="-jar" />
			<arg value="${application.trunk}/tomcat-main/target/${cspace.tool.csmake}.jar" />
			<arg value="-ac" />
			<arg value="${application.trunk}/tomcat-main/src/main/resources" />
			<arg value="-sc" />
			<arg value="${services.trunk}/services/common/src/main" />
			<arg value="-o" />
			<arg value="${env.CSPACE_JEESERVER_HOME}" />
		</exec>
	</target>

    <target name="undeploy"
    description="undeploy cspace services from ${jee.server.cspace}">
		<delete file="${catalina.context.cspace}"/> <!-- This is a Tomcat specific file that we seem to need to delete inorder for it to be replace with a more recent one during deployment -->
		<delete dir="${jee.deploy.cspace}/${cspace.services.context}"/>
        <delete file="${jee.deploy.cspace}/${cspace.services.war}"/>
    </target>

    <target name="dist"
    description="generate distribution for cspace services" depends="package">
        <copy todir="${services.trunk}/${dist.deploy.cspace}">
            <fileset file="${basedir}/target/${cspace.services.war}"/>
        </copy>
    </target>

</project>

<project name="account" default="package" basedir=".">
    <description>
        collectionobject service
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <property name="build" location="build"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
            description="Package CollectionSpace Services" />

    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>


    <target name="install" depends="install-unix,install-windows"
            description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
            description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="gen_ddl"
            description="generate service-specific tables(s), indices, etc.">
        <ant antfile="pstore/build.xml" target="gen_ddl" inheritAll="false"/>
    </target>
    
    <target name="create_cspace_db"
            description="create tables(s), indices for account service">
        <ant antfile="pstore/build.xml" target="create_cspace_db" inheritAll="false"/>
    </target>

    <target name="deploy" depends="install"
            description="deploy collectionobject service">
        <ant antfile="pstore/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
            description="undeploy collectionobject service">
        <ant antfile="pstore/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist" depends="package"
            description="distribute collectionobject service}">
        <ant antfile="pstore/build.xml" target="dist" inheritall="false"/>
    </target>

</project>
<project name="account.client" default="package" basedir=".">
    <description>
        collectionspace account service
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init">
        <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
            description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
            description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
            description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="setup_hibernate.cfg" description="replace property keywords in hibernate.cfg.xml">
        <property name="src.hibernate.cfg" value="${basedir}/src/test/resources/hibernate.cfg.xml"/>
        <property name="dest.hibernate.cfg" value="${basedir}/target/test-classes/hibernate.cfg.xml"/>
        <delete file="${dest.hibernate.cfg}" verbose="true" />
        <filter token="DB_CSPACE_URL" value="${db.jdbc.cspace.url}" />
        <filter token="DB_DRIVER_CLASS" value="${db.jdbc.driver.class}" />
        <filter token="DB_CSPACE_USER" value="${db.cspace.user}" />
        <filter token="DB_CSPACE_PASSWORD" value="${env.DB_CSPACE_PASSWORD}" /> <!-- double-sub from ${db.cspace.user.password} fails -->
        <filter token="DB_DIALECT" value="${db.dialect}" />
        <copy todir="${basedir}/target/test-classes" filtering="true">
            <fileset dir="${basedir}/src/test/resources">
                <include name="hibernate.cfg.xml" />
            </fileset>
        </copy>
    </target>

    <target name="deploy" depends="install"
            description="deploy account service in ${jee.server.cspace}">
    </target>

    <target name="undeploy"
            description="undeploy account service from ${jee.server.cspace}">
    </target>

    <target name="dist"
            description="generate distribution for account service" depends="package">
    </target>

</project>
<project name="account.pstore" default="package" basedir=".">
    <description>
        collectionspace account service
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init">
        <!-- Create the time stamp -->
        <tstamp/>
    </target>


    <target name="package" depends="package-unix,package-windows"
            description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
            description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
            description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>


    <target name="setup_hibernate.cfg" description="replace property keywords in hibernate.cfg.xml">
        <property name="src.hibernate.cfg" value="${basedir}/src/test/resources/hibernate.cfg.xml"/>
        <property name="dest.hibernate.cfg" value="${basedir}/target/test-classes/hibernate.cfg.xml"/>
        <delete file="${dest.hibernate.cfg}" verbose="true" />
        <filter token="DB_CSPACE_URL" value="${db.jdbc.cspace.url}" />
        <filter token="DB_DRIVER_CLASS" value="${db.jdbc.driver.class}" />
        <filter token="DB_CSPACE_USER" value="${db.cspace.user}" />
        <filter token="DB_CSPACE_PASSWORD" value="${env.DB_CSPACE_PASSWORD}" /> <!-- double-sub from ${db.cspace.user.password} fails -->
        <filter token="DB_DIALECT" value="${db.dialect}" />
        <copy todir="${basedir}/target/test-classes" filtering="true">
            <fileset dir="${basedir}/src/test/resources">
                <include name="hibernate.cfg.xml" />
            </fileset>
        </copy>
    </target>

    <target name="gen_ddl" depends="gen_ddl-unix,gen_ddl-windows"
            description="geneate ddl" />
    <target name="gen_ddl-unix" if="osfamily-unix" depends="setup_hibernate.cfg">
        <exec executable="mvn" failonerror="true">
            <arg value="-Pddl" />
            <arg value="process-test-resources" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="gen_ddl-windows" if="osfamily-windows" depends="setup_hibernate.cfg">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="-Pddl" />
            <arg value="process-test-resources" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="create_cspace_db"
            description="create tables(s), indices for account service">
				<sql driver="${db.jdbc.driver.class}"
             url="${db.jdbc.cspace.url}"
             userid="${db.cspace.user}"
             password="${db.cspace.user.password}"
             src="${db.script.dir}/account.sql"
             onerror="continue" >
            <classpath>
                <pathelement path="${db.driver.jar}"/>
            </classpath>
        </sql>
						<sql driver="${db.jdbc.driver.class}"
             url="${db.jdbc.cspace.url}"
             userid="${db.cspace.user}"
             password="${db.cspace.user.password}"
             src="${db.script.dir}/account_index.sql" >
            <classpath>
                <pathelement path="${db.driver.jar}"/>
            </classpath>
					</sql>
    </target>
	
	<!-- We are copying only the scripts that are committed to the source tree.  We're *not* copying the ones that
	get generated in the target folder -->
    <target name="deploy" depends="install"
            description="deploy account service in ${jee.server.cspace}">
        <copy todir="${jee.server.cspace}/cspace/services">
            <fileset dir="${src}/main/resources/"/>
        </copy>
    </target>

    <target name="undeploy"
            description="undeploy account service from ${jee.server.cspace}"
            depends="check.db.scripts.deploy.dir" if="${db.scripts.deploy.dir.exists}">
        <delete>
            <fileset dir="${db.scripts.deploy.dir}"
                     includes="**account**.sql"/>
        </delete>
    </target>

    <target name="dist"
            description="generate distribution for account service" depends="package">
        <!-- copy db scripts, etc. -->
        <copy todir="${services.trunk}/${dist.server.cspace}/cspace/services">
            <fileset dir="${src}/main/resources/"/>
        </copy>
    </target>
    
    <target name="check.db.scripts.deploy.dir">
        <property name="db.scripts.deploy.dir" value="${jee.server.cspace}/cspace/services/db/${db}"/>
        <condition property="db.scripts.deploy.dir.exists">
            <available file="${db.scripts.deploy.dir}" type="dir"/>
        </condition>
    </target>

</project>

<project name="acquisition.3rdparty" default="package" basedir=".">
    <description>
        acquisition service 3rdparty
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
    <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy acquisition in ${jee.server.nuxeo}">
    	<!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        <ant antfile="nuxeo-platform-cs-acquisition/build.xml" target="deploy" inheritall="false"/>
        -->
    </target>

    <target name="undeploy"
        description="undeploy acquisition from ${jee.server.nuxeo}">
    	<!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
    	leaving this only for backwards compatibility reasons. -->
        <ant antfile="nuxeo-platform-cs-acquisition/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist"
        description="generate distribution for acquisition" depends="package">
        <ant antfile="nuxeo-platform-cs-acquisition/build.xml" target="dist" inheritall="false"/>
    </target>


</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="nuxeo-platform-cs-acquisition" default="package" basedir=".">
    <description>
        acquisition nuxeo document type
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <!-- JAR files used by CollectionSpace 4.0 and later -->
    <property name="nuxeo.acquisition.doctype.jars.all"
        value="collectionspace.acquisition.doctype.*.jar"/>
    <property name="nuxeo.acquisition.schema.jars.all"
        value="collectionspace.acquisition.schema.*.jar"/>
    <!-- Legacy JAR files used by CollectionSpace 3.3 and earlier --> 
    <property name="nuxeo.acquisition.legacy.jars.all"
        value="org.collectionspace.services.acquisition.3rdparty.nuxeo-*.jar"/>
    <property name="nuxeo.acquisition.legacy.jar"
        value="org.collectionspace.services.acquisition.3rdparty.nuxeo-${cspace.release}.jar"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
        <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
        description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
        description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
        description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy acquisition doctype in ${jee.server.nuxeo}">
        <!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        leaving this only for backwards compatibility reasons. -->  
        <copy file="${basedir}/target/${nuxeo.acquisition.legacy.jar}"
            todir="${jee.deploy.nuxeo.plugins}"/>
    </target>

    <target name="undeploy"
        description="undeploy acquisition doctype from ${jee.server.nuxeo}">
        <delete>
            <!-- Undeploy doctype and schema artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.acquisition.doctype.jars.all}"/>
            </fileset>
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.acquisition.schema.jars.all}"/>
            </fileset>
            <!-- Undeploy legacy artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.acquisition.legacy.jars.all}"/>
            </fileset>
        </delete>
        <!-- Undeploy legacy artifacts from old deployment location through release 0.6 -->
        <delete quiet="true">
            <fileset dir="${jee.deploy.nuxeo.system}">
                <include name="${nuxeo.acquisition.legacy.jars.all}"/>
            </fileset>
        </delete>
    </target>

    <target name="dist"
        description="generate distribution for acquisition doctype" depends="package">
        <copy todir="${services.trunk}/${dist.deploy.nuxeo.plugins}">
            <fileset file="${basedir}/target/${nuxeo.acquisition.legacy.jar}"/>
        </copy>
    </target>

</project>


<project name="acquisition" default="package" basedir=".">
    <description>
        acquisition service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
  
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>


    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy acquisition service">
        <ant antfile="3rdparty/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
        description="undeploy acquisition service">
        <ant antfile="3rdparty/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist" depends="package"
        description="distribute acquisition service">
        <ant antfile="3rdparty/build.xml" target="dist" inheritall="false"/>
    </target>

</project>

<project name="authentication" default="package" basedir=".">
    <description>
        authentication service
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <property name="build" location="build"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
            description="Package CollectionSpace Services" />

    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>


    <target name="install" depends="install-unix,install-windows"
            description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
            description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="gen_ddl"
            description="generate service-specific tables(s), indices, etc.">
        <ant antfile="pstore/build.xml" target="gen_ddl" inheritAll="false"/>
    </target>

    <target name="create_cspace_db"
            description="create tables(s), indices for authentication service">
        <ant antfile="pstore/build.xml" target="create_cspace_db" inheritAll="false"/>
    </target>

    <target name="deploy" depends="install"
            description="deploy authentication service">
        <ant antfile="pstore/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="service/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
            description="undeploy authentication service">
        <ant antfile="pstore/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="service/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist" depends="package"
            description="distribute authentication service}">
        <ant antfile="pstore/build.xml" target="dist" inheritall="false"/>
        <ant antfile="service/build.xml" target="dist" inheritall="false"/>
    </target>

</project>
<project name="authentication.client" default="package" basedir=".">
    <description>
        collectionspace authentication service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init">
    <!-- Create the time stamp -->
        <tstamp/>
    </target>


    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="setup_hibernate.cfg" description="replace property keywords in hibernate.cfg.xml">
        <property name="src.hibernate.cfg" value="${basedir}/src/test/resources/hibernate.cfg.xml"/>
        <property name="dest.hibernate.cfg" value="${basedir}/target/test-classes/hibernate.cfg.xml"/>
        <delete file="${dest.hibernate.cfg}" verbose="true" />
        <filter token="DB_CSPACE_URL" value="${db.jdbc.cspace.url}" />
        <filter token="DB_DRIVER_CLASS" value="${db.jdbc.driver.class}" />
        <filter token="DB_CSPACE_USER" value="${db.cspace.user}" />
        <filter token="DB_CSPACE_PASSWORD" value="${env.DB_CSPACE_PASSWORD}" /> <!-- double-sub from ${db.cspace.user.password} fails -->
        <filter token="DB_DIALECT" value="${db.dialect}" />
        <copy todir="${basedir}/target/test-classes" filtering="true">
            <fileset dir="${basedir}/src/test/resources">
                <include name="hibernate.cfg.xml" />
            </fileset>
        </copy>
    </target>
    
    <target name="deploy" depends="install"
    description="deploy authentication service in ${jee.server.cspace}">
    </target>

    <target name="undeploy"
    description="undeploy authentication service from ${jee.server.cspace}">
    </target>

    <target name="dist"
    description="generate distribution for authentication service" depends="package">
    </target>

</project>
<project name="authentication.pstore" default="package" basedir=".">
    <description>
        collectionspace authentication service
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init">
        <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
            description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
            description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
            description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="setup_hibernate.cfg" description="replace property keywords in hibernate.cfg.xml">
        <property name="src.hibernate.cfg" value="${basedir}/src/test/resources/hibernate.cfg.xml"/>
        <property name="dest.hibernate.cfg" value="${basedir}/target/test-classes/hibernate.cfg.xml"/>
        <delete file="${dest.hibernate.cfg}" verbose="true" />
        <filter token="DB_CSPACE_URL" value="${db.jdbc.cspace.url}" />
        <filter token="DB_DRIVER_CLASS" value="${db.jdbc.driver.class}" />
        <filter token="DB_CSPACE_USER" value="${db.cspace.user}" />
        <filter token="DB_CSPACE_PASSWORD" value="${env.DB_CSPACE_PASSWORD}" /> <!-- double-sub from ${db.cspace.user.password} fails -->
        <filter token="DB_DIALECT" value="${db.dialect}" />
        <copy todir="${basedir}/target/test-classes" filtering="true">
            <fileset dir="${basedir}/src/test/resources">
                <include name="hibernate.cfg.xml" />
            </fileset>
        </copy>
    </target>


    <target name="gen_ddl" depends="gen_ddl-unix,gen_ddl-windows"
            description="geneate ddl" />
    <target name="gen_ddl-unix" if="osfamily-unix" depends="setup_hibernate.cfg">
        <exec executable="mvn" failonerror="true">
            <arg value="-Pddl" />
            <arg value="process-test-resources" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="gen_ddl-windows" if="osfamily-windows" depends="setup_hibernate.cfg">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="-Pddl" />
            <arg value="process-test-resources" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="create_cspace_db"
            description="create tables(s), indices for authentication service">
				<sql driver="${db.jdbc.driver.class}"
             url="${db.jdbc.cspace.url}"
             userid="${db.cspace.user}"
             password="${db.cspace.user.password}"
             src="${db.script.dir}/authentication.sql" >
            <classpath>
                <pathelement path="${db.driver.jar}"/>
            </classpath>
        </sql>
				<!-- No longer used
				<sql driver="${db.jdbc.driver.class}"
             url="${db.jdbc.cspace.url}"
             userid="${db.cspace.user}"
             password="${db.cspace.user.password}"
             src="${db.script.dir}/authentication_index.sql" >
            <classpath>
                <pathelement path="${db.driver.jar}"/>
            </classpath>
        </sql>
				<sql driver="${db.jdbc.driver.class}"
             url="${db.jdbc.cspace.url}"
             userid="${db.cspace.user}"
             password="${db.cspace.user.password}"
             src="${db.script.dir}/test_authentication.sql" >
            <classpath>
                <pathelement path="${db.driver.jar}"/>
            </classpath>
					</sql> -->
    </target>

    <target name="deploy" depends="install"
            description="deploy authentication service in ${jee.server.cspace}">
        <copy todir="${jee.server.cspace}/cspace/services">
            <fileset dir="${src}/main/resources/"/>
        </copy>
    </target>

    <target name="undeploy"
            description="undeploy authentication service from ${jee.server.cspace}"
            depends="check.db.scripts.deploy.dir" if="${db.scripts.deploy.dir.exists}">
        <delete>
            <fileset dir="${db.scripts.deploy.dir}"
                     includes="**authentication**.sql"/>
        </delete>
    </target>

    <target name="dist"
            description="generate distribution for authentication service" depends="package">
        <!-- copy db scripts, etc. -->
        <copy todir="${services.trunk}/${dist.server.cspace}/cspace/services">
            <fileset dir="${src}/main/resources/"/>
        </copy>
    </target>
    
    <target name="check.db.scripts.deploy.dir">
        <property name="db.scripts.deploy.dir" value="${jee.server.cspace}/cspace/services/db/${db}"/>
        <condition property="db.scripts.deploy.dir.exists">
            <available file="${db.scripts.deploy.dir}" type="dir"/>
        </condition>
    </target>

</project>

<project name="authentication.service" default="package" basedir=".">
    <description>
        collectionspace authentication service
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <property name="authentication.jar" value="cspace-services-authn.jar"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init">
        <!-- Create the time stamp -->
        <tstamp/>
    </target>


    <target name="package" depends="package-unix,package-windows"
            description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
            description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
            description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
            description="deploy authentication service in ${jee.server.cspace}">
        <copy file="${basedir}/target/${authentication.jar}" todir="${jee.server.cspace}/lib"/>
        <!-- This is JBoss specific and no longer needed
		<copy tofile="${jee.server.cspace}/conf/login-config.xml.org"
              file="${jee.server.cspace}/conf/login-config.xml"
              overwrite="false"/> -->
        <!-- This is JBoss specific and no longer needed
        <copy tofile="${jee.server.cspace}/conf/login-config.xml"
              file="${src}/main/resources/config/login-config.xml"
              overwrite="true"/> -->
        <copy todir="${jee.server.cspace}/cspace/services">
            <fileset dir="${src}/main/resources/"/>
        </copy>
        <echo message="Check out Authentication Service Configuration Guide on wiki.collectionspace.org for more details" />
    </target>

    <target name="undeploy"
            description="undeploy authentication service from ${jee.server.cspace}">
        <delete file="${jee.server.cspace}/lib/${authentication.jar}"/>
		<!-- This is JBoss specific and no longer needed
        <copy tofile="${jee.server.cspace}/conf/login-config.xml"
              file="${jee.server.cspace}/conf/login-config.xml.org"
              overwrite="true" failonerror="false" /> -->
        <echo message="Check out Authentication Service Configuration Guide on wiki.collectionspace.org for more details"/>
    </target>

    <target name="dist"
            description="generate distribution for authentication service" depends="package">
        <copy todir="${services.trunk}/${dist.lib.cspace}">
            <fileset file="${basedir}/target/${authentication.jar}"/>
        </copy>
        <!-- copy db scripts, etc. -->
        <copy todir="${services.trunk}/${dist.server.cspace}/cspace/services">
            <fileset dir="${src}/main/resources/"/>
        </copy>
    </target>

</project>
<project name="common" default="package" basedir=".">
    <description>
        CollectionSpace Authority services common code
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />

    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <property name="build" location="build"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />

    </condition>

    <target name="init" >
        <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
            description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">

            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">

        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />

        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
            description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />

            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />

            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
            description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">

            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
            description="deploy common elements in ${jee.server.cspace}">    	
    </target>

    <target name="undeploy"
            description="undeploy common elements from ${jee.server.cspace}">
    </target>

    <target name="dist"
            description="generate distribution for common elements" depends="package">
    </target>

</project>

<project name="authorization.service" default="package" basedir=".">
    <description>
        Collectionspace's common authorization classes
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <property name="authorization-common.jar" value="cspace-services-authz-common.jar"/>
    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init">
        <!-- Create the time stamp -->
        <tstamp/>
    </target>


    <target name="package" depends="package-unix,package-windows"
            description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
            description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
            description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
            description="Deploy common authorization jar in ${jee.server.cspace}">
        <copy file="${basedir}/target/${authorization-common.jar}" todir="${jee.server.cspace}/lib"/>
        <echo message="Check out authorization Service Configuration Guide on wiki.collectionspace.org for more details" />
    </target>

    <target name="undeploy"
            description="undeploy authorization service from ${jee.server.cspace}">
        <delete file="${jee.server.cspace}/lib/${authorization-common.jar}"/>
        <echo message="Check out authorization Service Configuration Guide on wiki.collectionspace.org for more details"/>
    </target>

    <target name="dist"
            description="generate distribution for authorization service" depends="package">
        <!-- copy db scripts, etc. -->
        <copy todir="${services.trunk}/${dist.server.cspace}/cspace/services">
            <fileset dir="${src}/main/resources/"/>
        </copy>
    </target>

</project>

<project name="authorization-mgt" default="package" basedir=".">
    <description>
        authorization service
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <property name="build" location="build"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
            description="Package CollectionSpace Services" />

    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>


    <target name="install" depends="install-unix,install-windows"
            description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
            description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="gen_ddl"
            description="generate service-specific tables(s), indices, etc.">
    </target>

    <target name="create_cspace_db"
            description="create tables(s), indices for authorization service">
    </target>

    <target name="import"
            description="import default authorizations">
        <ant antfile="import/build.xml" target="import" inheritAll="false"/>
    </target>

    <target name="deploy" depends="install"
            description="deploy authorization service">
        <ant antfile="service/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
            description="undeploy authorization service">
        <ant antfile="service/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist" depends="package"
            description="distribute authorization service}">
        <ant antfile="service/build.xml" target="dist" inheritall="false"/>
    </target>

</project>

<project name="authorization-mgt.client" default="package" basedir=".">
    <description>
        collectionspace authorization-mgt client
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init">
        <!-- Create the time stamp -->
        <tstamp/>
    </target>


    <target name="package" depends="package-unix,package-windows"
            description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
            description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
            description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>



    <target name="deploy" depends="install"
            description="deploy authorization-mgt service in ${jee.server.cspace}">
    </target>

    <target name="undeploy"
            description="undeploy authorization-mgt service from ${jee.server.cspace}">
    </target>

    <target name="dist"
            description="generate distribution for authorization-mgt service" depends="package">
    </target>

</project>
<project name="authorization-mgt.import" default="package" basedir=".">
    <description>
        collectionspace authorization-mgt import
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init">
        <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
            description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
            description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
            description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>


    <target name="import" depends="import-unix,import-windows"
            description="import authorization" />
    <target name="import-unix" if="osfamily-unix" depends="setup_hibernate.cfg">
        <exec executable="mvn" failonerror="true">
            <arg value="exec:java" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="import-windows" if="osfamily-windows" depends="setup_hibernate.cfg">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" /> <!-- To debug, change command here to be 'mvnDebug.bat' -->
            <arg value="exec:java" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="setup_hibernate.cfg" description="replace property keywords in hibernate.cfg.xml" depends="install">
        <property name="src.hibernate.cfg" value="${basedir}/src/main/resources/hibernate.cfg.xml"/>
        <property name="dest.hibernate.cfg" value="${basedir}/target/classes/hibernate.cfg.xml"/>
        <property name="src.appContext.cfg" value="${basedir}/src/main/resources/applicationContext-authorization-test.xml"/>
        <property name="dest.appContext.cfg" value="${basedir}/target/classes/applicationContext-authorization-test.xml"/>
        <delete file="${dest.hibernate.cfg}" verbose="true" />
        <delete file="${dest.appContext.cfg}" verbose="true" />
        <filter token="DB_CSPACE_URL" value="${db.jdbc.cspace.url}" />
        <filter token="DB_DRIVER_CLASS" value="${db.jdbc.driver.class}" />
        <filter token="DB_CSPACE_USER" value="${db.cspace.user}" />
        <filter token="DB_CSPACE_PASSWORD" value="${env.DB_CSPACE_PASSWORD}" /> <!-- double-sub from ${db.cspace.user.password} fails -->
        <filter token="DB_DIALECT" value="${db.dialect}" />
        <filter token="CLASS_ID_QUERY" value="${db.spring.acl.classIdentityQuery}" />
        <filter token="SID_ID_QUERY" value="${db.spring.acl.sidIdentityQuery}" />
        <copy tofile="${dest.hibernate.cfg}" file="${src.hibernate.cfg}" filtering="true"/>
        <copy tofile="${dest.appContext.cfg}" file="${src.appContext.cfg}" filtering="true"/>
    </target>

    
    <target name="deploy" depends="install"
            description="deploy authorization-mgt import in ${jee.server.cspace}">
    </target>

    <target name="undeploy"
            description="undeploy authorization-mgt import from ${jee.server.cspace}">
    </target>

    <target name="dist"
            description="generate distribution for authorization-mgt import" depends="package">
    </target>

</project>

<project name="authorization-mgt.service" default="package" basedir=".">
    <description>
        collectionspace authorization service
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <property name="authorization.jar" value="collectionspace-services-authz-mgt.jar"/>
    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init">
        <!-- Create the time stamp -->
        <tstamp/>
    </target>


    <target name="package" depends="package-unix,package-windows"
            description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
            description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
            description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

<!--
    <target name="deploy" depends="install"
            description="deploy authorization service in ${jee.server.cspace}">
        <copy file="${basedir}/target/${authorization.jar}" todir="${jee.server.cspace}/lib"/>
        <echo message="Check out authorization Service Configuration Guide on wiki.collectionspace.org for more details" />
    </target>

    <target name="undeploy"
            description="undeploy authorization service from ${jee.server.cspace}">
        <delete file="${jee.server.cspace}/lib/${authorization.jar}"/>
        <echo message="Check out authorization Service Configuration Guide on wiki.collectionspace.org for more details"/>
    </target>
-->    

    <target name="dist"
            description="generate distribution for authorization service" depends="package">
        <!-- copy db scripts, etc. -->
        <copy todir="${services.trunk}/${dist.server.cspace}/cspace/services">
            <fileset dir="${src}/main/resources/"/>
        </copy>
    </target>

</project>

<project name="authorization" default="package" basedir=".">
    <description>
        authorization service
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <property name="build" location="build"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
            description="Package CollectionSpace Services" />

    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>


    <target name="install" depends="install-unix,install-windows"
            description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
            description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="gen_ddl"
            description="generate service-specific tables(s), indices, etc.">
        <ant antfile="pstore/build.xml" target="gen_ddl" inheritAll="false"/>
    </target>

    <target name="create_cspace_db"
            description="create tables(s), indices for authorization service">
        <ant antfile="pstore/build.xml" target="create_cspace_db" inheritAll="false"/>
    </target>

    <target name="deploy" depends="install"
            description="deploy authorization service">
        <ant antfile="pstore/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="service/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
            description="undeploy authorization service">
        <ant antfile="pstore/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="service/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist" depends="package"
            description="distribute authorization service}">
        <!--ant antfile="pstore/build.xml" target="dist" inheritall="false"/-->
        <ant antfile="service/build.xml" target="dist" inheritall="false"/>
    </target>

</project>
<project name="authorization.pstore" default="package" basedir=".">
    <description>
        collectionspace authorization service
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init">
        <!-- Create the time stamp -->
        <tstamp/>
    </target>


    <target name="package" depends="package-unix,package-windows"
            description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
            description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
            description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="setup_hibernate.cfg" description="replace property keywords in hibernate.cfg.xml">
        <property name="src.hibernate.cfg" value="${basedir}/src/test/resources/hibernate.cfg.xml"/>
        <property name="dest.hibernate.cfg" value="${basedir}/target/test-classes/hibernate.cfg.xml"/>
        <delete file="${dest.hibernate.cfg}" verbose="true" />
        <filter token="DB_CSPACE_URL" value="${db.jdbc.cspace.url}" />
        <filter token="DB_DRIVER_CLASS" value="${db.jdbc.driver.class}" />
        <filter token="DB_CSPACE_USER" value="${db.cspace.user}" />
        <filter token="DB_CSPACE_PASSWORD" value="${env.DB_CSPACE_PASSWORD}" /> <!-- double-sub from ${db.cspace.user.password} fails -->
        <filter token="DB_DIALECT" value="${db.dialect}" />
        <copy todir="${basedir}/target/test-classes" filtering="true">
            <fileset dir="${basedir}/src/test/resources">
                <include name="hibernate.cfg.xml" />
            </fileset>
        </copy>
    </target>


    <target name="gen_ddl" depends="gen_ddl-unix,gen_ddl-windows"
            description="geneate ddl" />
    <target name="gen_ddl-unix" if="osfamily-unix" depends="setup_hibernate.cfg">
        <exec executable="mvn" failonerror="true">
            <arg value="-Pddl" />
            <arg value="process-test-resources" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="gen_ddl-windows" if="osfamily-windows" depends="setup_hibernate.cfg">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="-Pddl" />
            <arg value="process-test-resources" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="create_cspace_db"
            description="create tables(s), indices for authorization service">
				<sql driver="${db.jdbc.driver.class}"
             url="${db.jdbc.cspace.url}"
             userid="${db.cspace.user}"
             password="${db.cspace.user.password}"
             src="${db.script.dir}/authorization.sql"
             onerror="continue" >
            <classpath>
                <pathelement path="${db.driver.jar}"/>
            </classpath>
        </sql>
				<sql driver="${db.jdbc.driver.class}"
						 url="${db.jdbc.cspace.url}"
             userid="${db.cspace.user}"
             password="${db.cspace.user.password}"
             src="${db.script.dir}/authorization_index.sql" >
            <classpath>
                <pathelement path="${db.driver.jar}"/>
            </classpath>
        </sql>
				<sql driver="${db.jdbc.driver.class}"
             url="${db.jdbc.cspace.url}"
             userid="${db.cspace.user}"
             password="${db.cspace.user.password}"
             src="${db.script.dir}/acl.sql" >
            <classpath>
                <pathelement path="${db.driver.jar}"/>
            </classpath>
        </sql>
				<!-- No longer used
        <sql driver="com.mysql.jdbc.Driver"
             url="jdbc:mysql://${db.host}:${db.port}/cspace"
             userid="${db.cspace.user}"
             password="${db.cspace.user.password}"
             src="${db.script.dir}/test_authorization.sql"
             >
            <classpath>
                <pathelement path="${db.driver.jar}"/>
            </classpath>
					</sql> -->
    </target>

    <target name="deploy" depends="install"
            description="deploy authorization service in ${jee.server.cspace}">
        <copy todir="${jee.server.cspace}/cspace/services">
            <fileset dir="${src}/main/resources/"/>
        </copy>
    </target>

    <target name="undeploy"
            description="undeploy authorization service from ${jee.server.cspace}"
            depends="check.db.scripts.deploy.dir" if="${db.scripts.deploy.dir.exists}">
        <delete>
            <fileset dir="${db.scripts.deploy.dir}"
                     includes="**authorization**.sql"/>
        </delete>
    </target>

    <target name="dist"
            description="generate distribution for authorization service" depends="package">
        <!-- copy db scripts, etc. -->
        <copy todir="${services.trunk}/${dist.server.cspace}/cspace/services">
            <fileset dir="${src}/main/resources/"/>
        </copy>
    </target>
    
    <target name="check.db.scripts.deploy.dir">
        <property name="db.scripts.deploy.dir" value="${jee.server.cspace}/cspace/services/db/${db}"/>
        <condition property="db.scripts.deploy.dir.exists">
            <available file="${db.scripts.deploy.dir}" type="dir"/>
        </condition>
    </target>

</project>

<project name="authorization.service" default="package" basedir=".">
    <description>
        collectionspace authorization service
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <property name="authorization.jar" value="cspace-services-authz.jar"/>
    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init">
        <!-- Create the time stamp -->
        <tstamp/>
    </target>


    <target name="package" depends="package-unix,package-windows"
            description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
            description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
            description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
            description="deploy authorization service in ${jee.server.cspace}">
        <copy file="${basedir}/target/${authorization.jar}" todir="${jee.server.cspace}/lib"/>
        <echo message="Check out authorization Service Configuration Guide on wiki.collectionspace.org for more details" />
    </target>

    <target name="undeploy"
            description="undeploy authorization service from ${jee.server.cspace}">
        <delete file="${jee.server.cspace}/lib/${authorization.jar}"/>
        <echo message="Check out authorization Service Configuration Guide on wiki.collectionspace.org for more details"/>
    </target>

    <target name="dist"
            description="generate distribution for authorization service" depends="package">
        <!-- copy db scripts, etc. -->
        <copy todir="${services.trunk}/${dist.server.cspace}/cspace/services">
            <fileset dir="${src}/main/resources/"/>
        </copy>
    </target>

</project>

<project name="batch.3rdparty" default="package" basedir=".">
    <description>
        batch service 3rdparty
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
    <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy batch in ${jee.server.nuxeo}">
        <ant antfile="nuxeo-platform-cs-batch/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
    description="undeploy batch from ${jee.server.nuxeo}">
        <ant antfile="nuxeo-platform-cs-batch/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist"
    description="generate distribution for batch" depends="package">
        <ant antfile="nuxeo-platform-cs-batch/build.xml" target="dist" inheritall="false"/>
    </target>


</project>

<project name="nuxeo-platform-cs-batch" default="package" basedir=".">
    <description>
        batch nuxeo document type
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <property name="nuxeo.batch.jar"
        value="org.collectionspace.services.batch.3rdparty.nuxeo-${cspace.release}.jar"/>
    <property name="nuxeo.batch.jars.all"
        value="org.collectionspace.services.batch.3rdparty.nuxeo-*.jar"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
        <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
        description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
        description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
        description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy batch doctype in ${jee.server.nuxeo}">
        <copy file="${basedir}/target/${nuxeo.batch.jar}"
        todir="${jee.deploy.nuxeo.plugins}"/>
    </target>

    <target name="undeploy"
        description="undeploy batch doctype from ${jee.server.nuxeo}">
        <delete>
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.batch.jars.all}"/>
            </fileset>
        </delete>
    </target>


    <target name="dist"
        description="generate distribution for batch doctype" depends="package">
        <copy todir="${services.trunk}/${dist.deploy.nuxeo.plugins}">
            <fileset file="${basedir}/target/${nuxeo.batch.jar}"/>
        </copy>
    </target>

</project>


<project name="batch" default="package" basedir=".">
    <description>
        batch service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
  
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>


    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy batch service">
        <ant antfile="3rdparty/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
    description="undeploy batch service">
        <ant antfile="3rdparty/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist" depends="package"
    description="distribute batch service">
        <ant antfile="3rdparty/build.xml" target="dist" inheritall="false"/>
    </target>

</project>

<project name="blob.3rdparty" default="package" basedir=".">
    <description>
        blob service 3rdparty
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
    <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy blob in ${jee.server.nuxeo}">
    	<!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        <ant antfile="nuxeo-platform-cs-blob/build.xml" target="deploy" inheritall="false"/>
        -->
    </target>

    <target name="undeploy"
    description="undeploy blob from ${jee.server.nuxeo}">
    	<!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
    	leaving this only for backwards compatibility reasons. -->
        <ant antfile="nuxeo-platform-cs-blob/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist"
    description="generate distribution for blob" depends="package">
        <ant antfile="nuxeo-platform-cs-blob/build.xml" target="dist" inheritall="false"/>
    </target>


</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="nuxeo-platform-cs-blob" default="package" basedir=".">
    <description>
        blob nuxeo document type
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <!-- JAR files used by CollectionSpace 4.0 and later -->
    <property name="nuxeo.blob.doctype.jars.all"
        value="collectionspace.blob.doctype.*.jar"/>
    <property name="nuxeo.blob.schema.jars.all"
        value="collectionspace.blob.schema.*.jar"/>
    <!-- Legacy JAR files used by CollectionSpace 3.3 and earlier --> 
    <property name="nuxeo.blob.legacy.jars.all"
        value="org.collectionspace.services.blob.3rdparty.nuxeo-*.jar"/>
    <property name="nuxeo.blob.legacy.jar"
        value="org.collectionspace.services.blob.3rdparty.nuxeo-${cspace.release}.jar"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
        <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
        description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
        description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
        description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy blob doctype in ${jee.server.nuxeo}">
        <!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        leaving this only for backwards compatibility reasons. -->  
        <copy file="${basedir}/target/${nuxeo.blob.legacy.jar}"
            todir="${jee.deploy.nuxeo.plugins}"/>
    </target>

    <target name="undeploy"
        description="undeploy blob doctype from ${jee.server.nuxeo}">
        <delete>
            <!-- Undeploy doctype and schema artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.blob.doctype.jars.all}"/>
            </fileset>
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.blob.schema.jars.all}"/>
            </fileset>
            <!-- Undeploy legacy artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.blob.legacy.jars.all}"/>
            </fileset>
        </delete>
        <!-- Undeploy legacy artifacts from old deployment location through release 0.6 -->
        <delete quiet="true">
            <fileset dir="${jee.deploy.nuxeo.system}">
                <include name="${nuxeo.blob.legacy.jars.all}"/>
            </fileset>
        </delete>
    </target>


    <target name="dist"
        description="generate distribution for blob doctype" depends="package">
        <copy todir="${services.trunk}/${dist.deploy.nuxeo.plugins}">
            <fileset file="${basedir}/target/${nuxeo.blob.legacy.jar}"/>
        </copy>
    </target>

</project>


<project name="blob" default="package" basedir=".">
    <description>
        blob service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
  
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>


    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy blob service">
        <ant antfile="3rdparty/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
    description="undeploy blob service">
        <ant antfile="3rdparty/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist" depends="package"
    description="distribute blob service">
        <ant antfile="3rdparty/build.xml" target="dist" inheritall="false"/>
    </target>

</project>
<project name="services-main" default="package" basedir=".">
    <description>
        collectionspace services main
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value=".."/>
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <property name="javadoc.jar" value="org.collectionspace.services-javadoc.jar"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
            description="Package CollectionSpace Services" />

    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>


    <target name="install" depends="install-unix,install-windows"
            description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
            description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="doc" depends="install,doc-unix,doc-windows" description="Build Java API docs">
        <jar destfile="${basedir}/target/${javadoc.jar}"
             basedir="${basedir}/target/site"
             />
    </target>
    <target name="doc-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="javadoc:aggregate" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="doc-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="javadoc:aggregate" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="gen_ddl"
            description="generate service-specific tables(s), indices, etc.">
        <ant antfile="authentication/build.xml" target="gen_ddl" inheritAll="false"/>
        <ant antfile="authorization/build.xml" target="gen_ddl" inheritAll="false"/>
        <ant antfile="account/build.xml" target="gen_ddl" inheritAll="false"/>
    </target>

    <target name="create_cspace_db"
            description="create service-specific tables(s), indices, etc.">
        <ant antfile="authentication/build.xml" target="create_cspace_db" inheritAll="false"/>
        <ant antfile="authorization/build.xml" target="create_cspace_db" inheritAll="false"/>
        <ant antfile="account/build.xml" target="create_cspace_db" inheritAll="false"/>
    </target>

    <target name="create_nuxeo_db"
            description="create service-specific tables(s), indices, etc.">
        <ant antfile="id/build.xml" target="create_nuxeo_db" inheritAll="false"/>
    </target>

    <target name="import"
            description="import default configuration">
        <ant antfile="authorization-mgt/build.xml" target="import" inheritAll="false"/>
    </target>

    <!-- this target is called in order based on the dependencies between the services -->
    <target name="deploy" depends="install"
            description="deploy services in ${jee.server.cspace}">
        <ant antfile="authentication/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="authorization/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="authority/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="blob/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="workflow/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="common/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="account/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="relation/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="id/build.xml" target="deploy" inheritAll="false"/>
    	<!--
        <ant antfile="note/build.xml" target="deploy" inheritAll="false"/>
        -->
        <ant antfile="collectionobject/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="servicegroup/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="group/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="intake/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="imports/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="loanin/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="loanout/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="objectexit/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="batch/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="location/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="place/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="work/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="concept/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="taxonomy/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="media/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="movement/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="report/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="vocabulary/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="organization/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="person/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="citation/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="acquisition/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="dimension/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="contact/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="publicitem/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="JaxRsServiceProvider/build.xml" target="deploy" inheritAll="false"/>
    </target>

    <!-- this target is called in reverse order of deploy targets -->
    <target name="undeploy"
            description="undeploy services from ${jee.server.cspace}">
        <ant antfile="JaxRsServiceProvider/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="vocabulary/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="citation/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="organization/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="person/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="publicitem/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="contact/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="dimension/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="acquisition/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="taxonomy/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="concept/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="work/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="place/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="location/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="objectexit/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="batch/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="report/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="movement/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="loanout/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="loanin/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="media/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="intake/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="imports/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="group/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="servicegroup/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="collectionobject/build.xml" target="undeploy" inheritAll="false"/>
    	<!--
        <ant antfile="note/build.xml" target="undeploy" inheritAll="false"/>
        -->
        <ant antfile="id/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="relation/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="account/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="common/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="media/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="blob/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="workflow/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="authority/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="authorization/build.xml" target="undeploy" inheritAll="false"/>
        <ant antfile="authentication/build.xml" target="undeploy" inheritAll="false"/>
    </target>

    <target name="hotdeploy" depends="install"
            description="deploy services in running ${jee.server.cspace}">
        <ant antfile="JaxRsServiceProvider/build.xml" target="hotdeploy" inheritAll="false"/>
    </target>

    <!-- this target is called in order based on the dependencies between the services -->
    <target name="dist" depends="doc"
            description="create distribution for services">
        <ant antfile="authentication/build.xml" target="dist" inheritAll="false"/>
        <ant antfile="authorization/build.xml" target="dist" inheritAll="false"/>
        <ant antfile="authority/build.xml" target="dist" inheritAll="false"/>
        <ant antfile="account/build.xml" target="dist" inheritAll="false"/>
        <ant antfile="blob/build.xml" target="dist" inheritAll="false"/>
        <ant antfile="workflow/build.xml" target="dist" inheritAll="false"/>
        <ant antfile="common/build.xml" target="dist" inheritAll="false"/>
        <ant antfile="relation/build.xml" target="dist" inheritAll="false"/>
        <ant antfile="id/build.xml" target="dist" inheritAll="false"/>
        <ant antfile="collectionobject/build.xml" target="dist" inheritAll="false"/>
        <ant antfile="servicegroup/build.xml" target="deploy" inheritAll="false"/>
        <ant antfile="group/build.xml" target="dist" inheritAll="false"/>
        <ant antfile="intake/build.xml" target="dist" inheritAll="false"/>
        <ant antfile="loanin/build.xml" target="dist" inheritAll="false"/>
        <ant antfile="loanout/build.xml" target="dist" inheritAll="false"/>
        <ant antfile="location/build.xml" target="dist" inheritAll="false"/>
        <ant antfile="place/build.xml" target="dist" inheritAll="false"/>
        <ant antfile="work/build.xml" target="dist" inheritAll="false"/>
        <ant antfile="concept/build.xml" target="dist" inheritAll="false"/>
        <ant antfile="taxonomy/build.xml" target="dist" inheritAll="false"/>
        <ant antfile="objectexit/build.xml" target="dist" inheritAll="false"/>
        <ant antfile="batch/build.xml" target="dist" inheritAll="false"/>
        <ant antfile="media/build.xml" target="dist" inheritAll="false"/>
        <ant antfile="movement/build.xml" target="dist" inheritAll="false"/>
        <ant antfile="report/build.xml" target="dist" inheritAll="false"/>
        <ant antfile="vocabulary/build.xml" target="dist" inheritAll="false"/>
        <ant antfile="organization/build.xml" target="dist" inheritAll="false"/>
        <ant antfile="person/build.xml" target="dist" inheritAll="false"/>
        <ant antfile="citation/build.xml" target="dist" inheritAll="false"/>
        <ant antfile="acquisition/build.xml" target="dist" inheritAll="false"/>
        <ant antfile="JaxRsServiceProvider/build.xml" target="dist" inheritAll="false"/>
        <copy file="${basedir}/target/${javadoc.jar}"
              todir="${services.trunk}/${dist.server.cspace}/cspace/services/docs"/>
    </target>

    <!-- this target is called in order based on the dependencies between the services -->
    <target name="dist_installer"
            description="create distribution for CollectionSpace installer">

        <!-- copy install scripts, etc. -->
        <copy todir="${services.trunk}/${dist.installer.services}">
            <fileset dir="./installer"/>
        </copy>
        <ant antfile="id/build.xml" target="dist_installer" inheritAll="false"/>
        <ant antfile="collectionobject/build.xml" target="dist_installer" inheritAll="false"/>
        <ant antfile="vocabulary/build.xml" target="dist_installer" inheritAll="false"/>
        <ant antfile="organization/build.xml" target="dist_installer" inheritAll="false"/>
        <ant antfile="person/build.xml" target="dist_installer" inheritAll="false"/>
        <!--
        <ant antfile="account/build.xml" target="dist_installer" inheritAll="false"/>
        <ant antfile="common/build.xml" target="dist_installer" inheritAll="false"/>
        <ant antfile="authorization/build.xml" target="dist_installer" inheritAll="false"/>
        <ant antfile="authentication/build.xml" target="dist_installer" inheritAll="false"/>
        <ant antfile="relation/build.xml" target="dist_installer" inheritAll="false"/>
        <ant antfile="intake/build.xml" target="dist_installer" inheritAll="false"/>
        <ant antfile="loanin/build.xml" target="dist_installer" inheritAll="false"/>
        <ant antfile="acquisition/build.xml" target="dist_installer" inheritAll="false"/>
        <ant antfile="JaxRsServiceProvider/build.xml" target="dist_installer" inheritAll="false"/>
-->        
    </target>
    
   <target name="generate-dependencies-reports"
            description="Generate a report of dependencies, including their licensing information.">
        <exec executable="mvn" failonerror="true">
            <arg value="project-info-reports:dependencies"/>
            <arg value="-Ddependency.locations.enabled=false" />
        </exec>
    </target>

    <target name="copy-dependencies-reports" 
            description="Copy dependencies reports to a single directory.">
        <property name="dependencies-reports-dir" value="${basedir}/target/dependencies"/>
        <mkdir dir="${dependencies-reports-dir}"/>
        <!-- Copy the top-level services dependencies report -->
        <copy todir="${dependencies-reports-dir}"
             file="${basedir}/target/site/dependencies.html"/>
        <!-- Copy the dependencies reports from each module, flattening -->
        <!-- report names by substituting dot notation for full module paths -->
        <copy todir="${dependencies-reports-dir}">
            <fileset
                id="dependency-report-files"
                dir="${basedir}">
                <include name="**/dependencies.html"/>
            </fileset>
            <chainedmapper>
                <regexpmapper
                     handledirsep="true"
                     from="(.*?)/target/site/(.*)"
                     to="\1${file.separator}\2"/>
                <filtermapper>
                    <replacestring from="${file.separator}" to="."/>
                </filtermapper>
            </chainedmapper>
        </copy>
    </target>

</project>

<project name="citation.3rdparty" default="package" basedir=".">
    <description>
        citation service 3rdparty
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
    <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy citation in ${jee.server.nuxeo}">
        <!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool 
            <ant antfile="nuxeo-platform-cs-citation/build.xml" target="deploy" inheritall="false"/>
        -->
    </target>

    <target name="undeploy"
    description="undeploy citation from ${jee.server.nuxeo}">
        <!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        leaving this only for backwards compatibility reasons. --> 
        <ant antfile="nuxeo-platform-cs-citation/build.xml" target="undeploy" inheritall="false"/>
   </target>

    <target name="dist"
    description="generate distribution for citation" depends="package">
        <ant antfile="nuxeo-platform-cs-citation/build.xml" target="dist" inheritall="false"/>
    </target>
    
    <target name="dist_installer"
    description="generate distribution for collectionobject" depends="package">
        <ant antfile="nuxeo-platform-cs-citation/build.xml" target="dist_installer" inheritall="false"/>
   </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="nuxeo-platform-cs-citation" default="package" basedir=".">
    <description>
        citation nuxeo document type
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <!-- JAR files used by CollectionSpace 4.0 and later -->
    <property name="nuxeo.citation.doctype.jars.all"
        value="collectionspace.citation.doctype.*.jar"/>
    <property name="nuxeo.citation.schema.jars.all"
        value="collectionspace.citation.schema.*.jar"/>
    <!-- Legacy JAR files used by CollectionSpace 3.3 and earlier --> 
    <property name="nuxeo.citation.legacy.jars.all"
        value="org.collectionspace.services.citation.3rdparty.nuxeo-*.jar"/>
    <property name="nuxeo.citation.legacy.jar"
        value="org.collectionspace.services.citation.3rdparty.nuxeo-${cspace.release}.jar"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
        <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
        description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
        description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
        description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy citation doctype in ${jee.server.nuxeo}">
        <!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        leaving this only for backwards compatibility reasons. --> 
        <copy file="${basedir}/target/${nuxeo.citation.legacy.jar}"
            todir="${jee.deploy.nuxeo.plugins}"/>
    </target>

    <target name="undeploy"
        description="undeploy citation doctype from ${jee.server.nuxeo}">
        <delete>
            <!-- Undeploy doctype and schema artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.citation.doctype.jars.all}"/>
            </fileset>
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.citation.schema.jars.all}"/>
            </fileset>
            <!-- Undeploy legacy artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.citation.legacy.jars.all}"/>
            </fileset>
        </delete>
        <!-- Undeploy legacy artifacts from old deployment location through release 0.6 -->
        <delete quiet="true">
            <fileset dir="${jee.deploy.nuxeo.system}">
                <include name="${nuxeo.citation.legacy.jars.all}"/>
            </fileset>
        </delete>
    </target>

    <target name="dist"
        description="generate distribution for citation doctype" depends="package">
        <copy todir="${services.trunk}/${dist.deploy.nuxeo.plugins}">
            <fileset file="${basedir}/target/${nuxeo.citation.legacy.jar}"/>
        </copy>
    </target>

    <target name="dist_installer"
    	description="Creates an installer distribution for citation doctype" depends="package">
        <copy todir="${services.trunk}/${dist.installer.services}/citation/nuxeo">
            <fileset file="${basedir}/target/${nuxeo.citation.legacy.jar}"/>
        </copy>
    </target>

</project>


<project name="citation" default="package" basedir=".">
    <description>
        citation service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
        <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
  
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy citation service">
        <ant antfile="3rdparty/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
        description="undeploy citation service">
        <ant antfile="3rdparty/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist" depends="package"
        description="distribute citation service">
        <ant antfile="3rdparty/build.xml" target="dist" inheritall="false"/>
    </target>

    <target name="dist_installer" depends="package"
        description="distribute citation service">        
        <!-- copy install scripts, etc. -->
        <copy todir="${services.trunk}/${dist.installer.services}/citation">
            <fileset dir="${basedir}/installer/"/>
        </copy>
        <ant antfile="3rdparty/build.xml" target="dist_installer" inheritall="false"/>
    </target>

</project>

<project name="citation" default="package" basedir=".">
    <description>
        citation service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>
    
    <target name="install" description="">
        <exec executable="echo">
        		<arg value="Installer: Executing citation Service's &apos;install&apos; target." />
				</exec>
				<!-- Copy the Nuxeo DocType jar files to the Nuxeo app server domain -->
        <copy todir="${jee.deploy.nuxeo.plugins}">
            <fileset file="nuxeo/*.jar"/>
        </copy>				
    </target>    

    <target name="config" description="" depends="install">
        <exec executable="echo">
        		<arg value="Installer: Executing Citation Service's &apos;config&apos; target." />
				</exec>
    </target>
    
    <target name="predeploy" description="" depends="config">
        <exec executable="echo">
        		<arg value="Installer: Executing Citation Service's &apos;predeploy&apos; target." />
				</exec>
    </target>    
    
    <target name="deploy" description="">
        <exec executable="echo">
        		<arg value="Installer: Executing Citation Service's &apos;deploy&apos; target." />
				</exec>
    </target>
    
    <target name="postdeploy">
        <exec executable="echo">
        		<arg value="Installer: Executing installer's &apos;postdeploy&apos; target for the Citation Service." />
				</exec>		
        <exec executable="echo">
        		<arg value="Importing necessary citationauthorities." />
				</exec>				
        <java jar="./postdeploy/collectionspace-services-citation-importer-jar-with-dependencies.jar"
        	fork="true"
        	failonerror="true">
				</java>	
    </target>
    

</project>

<project name="collectionobject.3rdparty" default="package" basedir=".">
    <description>
        collectionobject service 3rd party
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
     <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
	<property name="nuxeo-platform-collectionobject" value="nuxeo-platform-cs-collectionobject"/>
	<property name="nuxeo-platform-collectionobject-lifesci" value="nuxeo-platform-collectionobject-lifesci"/>
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <property name="build" location="build"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
    <!-- Create the time stamp -->
        <tstamp/>

    </target>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy collectionobject in ${jee.server.nuxeo}">
    	<!-- These targets are obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool    	
        <ant antfile="${nuxeo-platform-collectionobject}/build.xml" target="deploy" inheritall="false"/>
        <ant antfile="${nuxeo-platform-collectionobject-lifesci}/build.xml" target="deploy" inheritall="false"/>
        -->
    </target>

    <target name="undeploy"
    description="undeploy collectionobject from ${jee.server.nuxeo}">
    	<!-- These targets are obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
    	leaving this only for backwards compatibility reasons. -->    	
        <ant antfile="${nuxeo-platform-collectionobject}/build.xml" target="undeploy" inheritall="false"/>
        <ant antfile="${nuxeo-platform-collectionobject-lifesci}/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist"
    description="generate distribution for collectionobject" depends="package">
        <ant antfile="${nuxeo-platform-collectionobject}/build.xml" target="dist" inheritall="false"/>
        <ant antfile="${nuxeo-platform-collectionobject-lifesci}/build.xml" target="dist" inheritall="false"/>
    </target>

    <target name="dist_installer"
    description="generate distribution for collectionobject" depends="package">
        <ant antfile="${nuxeo-platform-collectionobject}/build.xml" target="dist_installer" inheritall="false"/>
        <ant antfile="${nuxeo-platform-collectionobject-lifesci}/build.xml" target="dist_installer" inheritall="false"/>
    </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="nuxeo-platform-collectionobject-lifesci" default="package" basedir=".">
    <description>
        Collectionobject nuxeo document type for the lifesci tenant
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <property name="build" location="build"/>
    <property name="dist"  location="dist"/>
    <!-- JAR files used by CollectionSpace 4.0 and later -->
    <!-- Both doctype and schema JAR(s) are removed via the 'undeploy' target -->
    <!-- in another Ant buildfile, in a peer module to this module -->
    <!-- Legacy JAR files used by CollectionSpace 3.3 and earlier --> 
    <!-- Additional legacy JAR(s) are removed via the 'undeploy' target in the -->
    <!-- Ant buildfile for the common schema -->
    <property name="nuxeo.collectionobject.lifesci.legacy.jars.all"
        value="org.collectionspace.services.collectionobject.3rdparty.lifesci.nuxeo-*.jar"/>
    <property name="nuxeo.collectionobject.lifesci.legacy.jar"
        value="org.collectionspace.services.collectionobject.3rdparty.lifesci.nuxeo-${cspace.release}.jar"/>
    
    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
        <!-- Create the time stamp -->
        <tstamp/>
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build}"/>
    </target>

    <target name="package" depends="package-unix,package-windows"
        description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
        description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy collectionobject doctype in ${jee.server.nuxeo}">
        <!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        leaving this only for backwards compatibility reasons. -->  
        <copy file="${basedir}/target/${nuxeo.collectionobject.lifesci.legacy.jar}"
            todir="${jee.deploy.nuxeo.plugins}"/>
    </target>

    <target name="undeploy"
        description="undeploy collectionobject doctype from ${jee.server.nuxeo}">
        <delete>
            <!-- Both doctype and schema JAR(s) are removed via the 'undeploy' target -->
            <!-- in another Ant buildfile, in a peer module to this module -->
            <!-- Undeploy legacy artifacts -->
            <!-- Additional legacy JAR(s) are removed via the 'undeploy' target in the -->
            <!-- Ant buildfile for the common schema -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.collectionobject.lifesci.legacy.jars.all}"/>
            </fileset>
        </delete>
        <!-- Undeploy legacy artifacts from old deployment location through release 0.6 -->
        <delete quiet="true">
            <fileset dir="${jee.deploy.nuxeo.system}">
                <include name="${nuxeo.collectionobject.lifesci.legacy.jars.all}"/>
            </fileset>
        </delete>
    </target>

    <target name="dist"
    	description="generate distribution for collectionobject doctype" depends="package">
        <copy todir="${services.trunk}/${dist.deploy.nuxeo.plugins}">
            <fileset file="${basedir}/target/${nuxeo.collectionobject.lifesci.legacy.jar}"/>
        </copy>
    </target>

    <target name="dist_installer"
    	description="Creates an installer distribution for CollectionObject doctype" depends="package">
        <copy todir="${services.trunk}/${dist.installer.services}/collectionobject/nuxeo">
            <fileset file="${basedir}/target/${nuxeo.collectionobject.lifesci.legacy.jar}"/>
        </copy>
    </target>
</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="nuxeo-platform-collectionobjects_common" default="package" basedir=".">
    <description>
        CollectionobjectsCommon Nuxeo document type
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <property name="build" location="build"/>
    <property name="dist"  location="dist"/>
    <!-- JAR files used by CollectionSpace 4.0 and later -->
    <property name="nuxeo.collectionobject.doctype.jars.all"
        value="collectionspace.collectionobject.doctype.*.jar"/>
    <property name="nuxeo.collectionobject.schema.jars.all"
        value="collectionspace.collectionobject.schema.*.jar"/>
    <!-- Legacy JAR files used by CollectionSpace 3.3 and earlier --> 
    <property name="nuxeo.collectionobject.legacy.jars.all"
        value="org.collectionspace.services.collectionobject.3rdparty.nuxeo-*.jar"/>
    <property name="nuxeo.collectionobject.legacy.jar"
        value="org.collectionspace.services.collectionobject.3rdparty.nuxeo-${cspace.release}.jar"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
        <!-- Create the time stamp -->
        <tstamp/>
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build}"/>
    </target>

    <target name="package" depends="package-unix,package-windows"
        description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
        description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="Deploy CollectionObjectsCommon doctype in ${jee.server.nuxeo}">
        <!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        leaving this only for backwards compatibility reasons. -->  
        <copy file="${basedir}/target/${nuxeo.collectionobject.legacy.jar}"
            todir="${jee.deploy.nuxeo.plugins}"/>
    </target>

    <target name="undeploy"
        description="Undeploy CollectionObjectsCommon doctype from ${jee.server.nuxeo}">
        <delete>
            <!-- Undeploy doctype and schema artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.collectionobject.doctype.jars.all}"/>
            </fileset>
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.collectionobject.schema.jars.all}"/>
            </fileset>
            <!-- Undeploy legacy artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.collectionobject.legacy.jars.all}"/>
            </fileset>
        </delete>
        <!-- Undeploy legacy artifacts from old deployment location through release 0.6 -->
        <delete quiet="true">
            <fileset dir="${jee.deploy.nuxeo.system}">
                <include name="${nuxeo.collectionobject.legacy.jars.all}"/>
            </fileset>
        </delete>
    </target>

    <target name="dist"
    	description="generate distribution for collectionobject doctype" depends="package">
        <copy todir="${services.trunk}/${dist.deploy.nuxeo.plugins}">
            <fileset file="${basedir}/target/${nuxeo.collectionobject.legacy.jar}"/>
        </copy>
    </target>

    <target name="dist_installer"
    	description="Creates an installer distribution for CollectionObjectsCommon doctype" depends="package">
        <copy todir="${services.trunk}/${dist.installer.services}/collectionobject/nuxeo">
            <fileset file="${basedir}/target/${nuxeo.collectionobject.legacy.jar}"/>
        </copy>
    </target>
</project>

<project name="collectionobject" default="package" basedir=".">
    <description>
        collectionobject service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <property name="build" location="build"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
  
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>


    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy collectionobject service">
        <ant antfile="3rdparty/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
    description="undeploy collectionobject service">
        <ant antfile="3rdparty/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist" depends="package"
    	description="distribute collectionobject service}">
        <ant antfile="3rdparty/build.xml" target="dist" inheritall="false"/>
    </target>
        
		<!-- Creates a distribution of artifacts for the installer. -->        
    <target name="dist_installer" depends="package"
    	description="Creates a distribution of artifacts for the installer.">

        <!-- copy install scripts, etc. -->
        <copy todir="${services.trunk}/${dist.installer.services}/collectionobject">
            <fileset dir="./installer"/>
        </copy>
        <ant antfile="3rdparty/build.xml" target="dist_installer" inheritall="false"/>
    </target>

</project>

<project name="collectionobject-install" default="install" basedir=".">
    <description>
        collectionobject service install
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <property name="build" location="build"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="install" description="">
        <exec executable="echo">
        		<arg value="Installer: Executing CollectionObject Service's &apos;install&apos; target." />
				</exec>
        <copy todir="${jee.deploy.nuxeo.plugins}">
            <fileset file="nuxeo/*.jar"/>
        </copy>
    </target>

    <target name="config" description="" depends="install">
        <exec executable="echo">
        		<arg value="Installer: Executing CollectionObject Service's &apos;config&apos; target." />
				</exec>
    </target>

    <target name="predeploy" description="" depends="config">
        <exec executable="echo">
        		<arg value="Installer: Executing CollectionObject Service's &apos;predeploy&apos; target." />
				</exec>
    </target>

    <target name="deploy" description="">
        <exec executable="echo">
        		<arg value="Installer: Executing CollectionObject Service's &apos;deploy&apos; target." />
				</exec>
    </target>
    
    <target name="postdeploy" description="">
        <exec executable="echo">
        		<arg value="Installer: Executing CollectionObject Service's &apos;init&apos; target." />
				</exec>    	
    </target>
    

</project>
<project name="common" default="package" basedir=".">
    <description>
        Collectionspace Services common module
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />

    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <property name="build" location="build"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />

    </condition>

    <target name="init" >
        <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
            description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">

            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">

        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />

        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
            description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />

            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />

            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
            description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">

            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy_spring"
            description="deploy spring binaries in ${jee.server.cspace}">
        <copy todir="${jee.server.cspace}/lib">
            <fileset dir="${basedir}/lib/spring"/>
        </copy>
    </target>

    <target name="deploy_slf4j"
            description="deploy spring binaries in ${jee.server.cspace}">
        <copy todir="${jee.server.cspace}/lib">
            <fileset dir="${basedir}/lib/slf4j"/>
        </copy>
    </target>
	
    <target name="deploy_xmlmerge"
            description="deploy XMLMerge binaries in ${jee.server.cspace}">
        <copy todir="${jee.server.cspace}/lib">
            <fileset dir="${basedir}/lib/xmlmerge"/>
        </copy>
    </target>
	
    <target name="deploy_tenantconfig"
            description="deploy tenant configuration">
        <copy todir="${jee.server.cspace}/cspace/config/services">
            <fileset dir="${basedir}/src/main/cspace/config/services"/>
			<filterset>
				<filter token="CSPACE_INSTANCE_ID" value="${cspace.instance.id}" />
				<filter token="DB_CSADMIN_NAME" value="${db.csadmin.name}" />
				<filter token="DB_NUXEO_NAME" value="${db.nuxeo.name}" />
				<filter token="DB_CSPACE_NAME" value="${db.cspace.name}" />
			</filterset>
        </copy>
    </target>

    <target name="deploy" depends="install"
            description="deploy common elements in ${jee.server.cspace}">
		<!--
        <copy tofile="${jee.server.cspace}/conf/jboss-log4j.xml.org"
              file="${jee.server.cspace}/conf/jboss-log4j.xml"
              overwrite="false"/>
        <copy tofile="${jee.server.cspace}/conf/jboss-log4j.xml"
              file="${src}/main/cspace/config/log/jboss-log4j.xml"
              overwrite="true"/>
        <copy todir="${jee.server.cspace}/conf"
              file="${src}/main/cspace/config/log/jboss-log4j-release.xml"/>
		-->
        <antcall target="deploy_spring" />
        <antcall target="deploy_slf4j" />
        <antcall target="deploy_xmlmerge" />
        <antcall target="deploy_tenantconfig" />
    </target>

    <target name="undeploy"
            description="undeploy common elements from ${jee.server.cspace}">
        <antcall target="undeploy_spring" />
		<antcall target="undeploy_slf4j" />
		<antcall target="undeploy_xmlmerge" />
		<!--
        <copy tofile="${jee.server.cspace}/conf/jboss-log4j.xml"
              file="${jee.server.cspace}/conf/jboss-log4j.xml.org"
              overwrite="true" failonerror="false" />
		-->
		<!--
        <delete failonerror="false" file="${jee.server.cspace}/conf/jboss-log4j-release.xml"/>
		-->
        <delete failonerror="false" dir="${jee.server.cspace}/cspace/config/services"/>
    </target>

    <target name="undeploy_spring"
            description="undeploy spring binaries from ${jee.server.cspace}">
        <delete>
            <fileset dir="${jee.server.cspace}/lib" includes="org.springframework.*.jar"/>
            <fileset dir="${jee.server.cspace}/lib" includes="spring-security*.jar"/>
        </delete>
    </target>
	
    <target name="undeploy_slf4j"
            description="undeploy SLF4J binaries from ${jee.server.cspace}">
        <delete>
            <fileset dir="${jee.server.cspace}/lib" includes="slf4j*.jar"/>
        </delete>
    </target>
	
    <target name="undeploy_xmlmerge"
            description="undeploy XMLMerge binaries from ${jee.server.cspace}">
        <delete>
            <fileset dir="${jee.server.cspace}/lib" includes="module-xml_merge*.jar"/>
        </delete>
    </target>
	
    <target name="dist_spring"
            description="dist spring binaries in ${dist.server.cspace}">
        <copy todir="${services.trunk}/${dist.server.cspace}/lib">
            <fileset dir="${basedir}/lib/spring"/>
        </copy>
    </target>

    <target name="dist"
            description="generate distribution for common elements" depends="package">
        <antcall target="dist_spring" />
        <copy todir="${services.trunk}/${dist.server.cspace}/cspace/config/services">
            <fileset dir="${basedir}/src/main/cspace/config/services"/>
        </copy>		
    </target>

</project>

<project name="concept.3rdparty" default="package" basedir=".">
    <description>
        concept service 3rdparty
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
    <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install" description="deploy concept in ${jee.server.nuxeo}">
    	<!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        <ant antfile="nuxeo-platform-cs-concept/build.xml" target="deploy" inheritall="false"/>
        -->
    </target>

    <target name="undeploy" description="undeploy concept from ${jee.server.nuxeo}">
    	<!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
    	leaving this only for backwards compatibility reasons. -->
        <ant antfile="nuxeo-platform-cs-concept/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist"
    description="generate distribution for concept" depends="package">
        <ant antfile="nuxeo-platform-cs-concept/build.xml" target="dist" inheritall="false"/>
    </target>
    
    <target name="dist_installer"
    description="generate distribution for collectionobject" depends="package">
        <ant antfile="nuxeo-platform-cs-concept/build.xml" target="dist_installer" inheritall="false"/>
    </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="nuxeo-platform-cs-concept" default="package" basedir=".">
    <description>
        concept nuxeo document type
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <!-- JAR files used by CollectionSpace 4.0 and later -->
    <property name="nuxeo.concept.doctype.jars.all"
        value="collectionspace.concept.doctype.*.jar"/>
    <property name="nuxeo.concept.schema.jars.all"
        value="collectionspace.concept.schema.*.jar"/>
    <!-- Legacy JAR files used by CollectionSpace 3.3 and earlier --> 
    <property name="nuxeo.concept.legacy.jars.all"
        value="org.collectionspace.services.concept.3rdparty.nuxeo-*.jar"/>
    <property name="nuxeo.concept.legacy.jar"
        value="org.collectionspace.services.concept.3rdparty.nuxeo-${cspace.release}.jar"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
        <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
        description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
        description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
        description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy concept doctype in ${jee.server.nuxeo}">
        <!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        leaving this only for backwards compatibility reasons. -->  
        <copy file="${basedir}/target/${nuxeo.concept.legacy.jar}"
            todir="${jee.deploy.nuxeo.plugins}"/>
    </target>

    <target name="undeploy"
        description="undeploy concept doctype from ${jee.server.nuxeo}">
        <delete>
            <!-- Undeploy doctype and schema artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.concept.doctype.jars.all}"/>
            </fileset>
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.concept.schema.jars.all}"/>
            </fileset>
            <!-- Undeploy legacy artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.concept.legacy.jars.all}"/>
            </fileset>
        </delete>
        <!-- Undeploy legacy artifacts from old deployment location through release 0.6 -->
        <delete quiet="true">
            <fileset dir="${jee.deploy.nuxeo.system}">
                <include name="${nuxeo.concept.legacy.jars.all}"/>
            </fileset>
        </delete>
    </target>

    <target name="dist"
        description="generate distribution for concept doctype" depends="package">
        <copy todir="${services.trunk}/${dist.deploy.nuxeo.plugins}">
            <fileset file="${basedir}/target/${nuxeo.concept.legacy.jar}"/>
        </copy>
    </target>

    <target name="dist_installer"
    	description="Creates an installer distribution for concept doctype" depends="package">
        <copy todir="${services.trunk}/${dist.installer.services}/concept/nuxeo">
            <fileset file="${basedir}/target/${nuxeo.concept.legacy.jar}"/>
        </copy>
    </target>

</project>


<project name="concept" default="package" basedir=".">
    <description>
        Concept Authority service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
        <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
  
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy concept service">
        <ant antfile="3rdparty/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
        description="undeploy concept service">
        <ant antfile="3rdparty/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist" depends="package"
        description="distribute concept service">
        <ant antfile="3rdparty/build.xml" target="dist" inheritall="false"/>
    </target>

    <target name="dist_installer" depends="package"
        description="distribute concept service">        
        <!-- copy install scripts, etc. -->
        <copy todir="${services.trunk}/${dist.installer.services}/concept">
            <fileset dir="${basedir}/installer/"/>
        </copy>
        <ant antfile="3rdparty/build.xml" target="dist_installer" inheritall="false"/>
    </target>

</project>

<project name="concept" default="package" basedir=".">
    <description>
        concept service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>
    
    <target name="install" description="">
        <exec executable="echo">
        		<arg value="Installer: Executing concept Service's &apos;install&apos; target." />
				</exec>
				<!-- Copy the Nuxeo DocType jar files to the Nuxeo app server domain -->
        <copy todir="${jee.deploy.nuxeo.plugins}">
            <fileset file="nuxeo/*.jar"/>
        </copy>				
    </target>    

    <target name="config" description="" depends="install">
        <exec executable="echo">
        		<arg value="Installer: Executing Concept Service's &apos;config&apos; target." />
				</exec>
    </target>
    
    <target name="predeploy" description="" depends="config">
        <exec executable="echo">
        		<arg value="Installer: Executing Concept Service's &apos;predeploy&apos; target." />
				</exec>
    </target>    
    
    <target name="deploy" description="">
        <exec executable="echo">
        		<arg value="Installer: Executing Concept Service's &apos;deploy&apos; target." />
				</exec>
    </target>
    
    <target name="postdeploy">
        <exec executable="echo">
        		<arg value="Installer: Executing installer's &apos;postdeploy&apos; target for the Concept Service." />
				</exec>		
        <exec executable="echo">
        		<arg value="Importing necessary conceptauthorities." />
				</exec>				
        <java jar="./postdeploy/collectionspace-services-concept-importer-jar-with-dependencies.jar"
        	fork="true"
        	failonerror="true">
				</java>	
    </target>
    

</project>

<project name="contact.3rdparty" default="package" basedir=".">
    <description>
        contact service 3rdparty
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
    <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy contact in ${jee.server.nuxeo}">
    	<!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        <ant antfile="nuxeo-platform-cs-contact/build.xml" target="deploy" inheritall="false"/>
        -->
    </target>

    <target name="undeploy"
    description="undeploy contact from ${jee.server.nuxeo}">
    	<!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
    	leaving this only for backwards compatibility reasons. -->    	
        <ant antfile="nuxeo-platform-cs-contact/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist"
    description="generate distribution for contact" depends="package">
        <ant antfile="nuxeo-platform-cs-contact/build.xml" target="dist" inheritall="false"/>
    </target>


</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="nuxeo-platform-cs-contact" default="package" basedir=".">
    <description>
        contact nuxeo document type
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <property name="build" location="build"/>
    <property name="dist"  location="dist"/>
    <!-- JAR files used by CollectionSpace 4.0 and later -->
    <property name="nuxeo.contact.doctype.jars.all"
        value="collectionspace.contact.doctype.*.jar"/>
    <property name="nuxeo.contact.schema.jars.all"
        value="collectionspace.contact.schema.*.jar"/>
    <!-- Legacy JAR files used by CollectionSpace 3.3 and earlier --> 
    <property name="nuxeo.contact.legacy.jars.all"
        value="org.collectionspace.services.contact.3rdparty.nuxeo-*.jar"/>
    <property name="nuxeo.contact.legacy.jar"
        value="org.collectionspace.services.contact.3rdparty.nuxeo-${cspace.release}.jar"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
        <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
        description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
        description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
        description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy contact doctype in ${jee.server.nuxeo}">
        <!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        leaving this only for backwards compatibility reasons. -->
        <copy file="${basedir}/target/${nuxeo.contact.legacy.jar}"
            todir="${jee.deploy.nuxeo.plugins}"/>
    </target>

    <target name="undeploy"
        description="undeploy contact doctype from ${jee.server.nuxeo}">
        <delete>
            <!-- Undeploy doctype and schema artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.contact.doctype.jars.all}"/>
            </fileset>
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.contact.schema.jars.all}"/>
            </fileset>
            <!-- Undeploy legacy artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.contact.legacy.jars.all}"/>
            </fileset>
        </delete>
        <!-- Undeploy legacy artifacts from old deployment location through release 0.6 -->
        <delete quiet="true">
            <fileset dir="${jee.deploy.nuxeo.system}">
                <include name="${nuxeo.contact.legacy.jars.all}"/>
            </fileset>
        </delete>
    </target>

    <target name="dist"
        description="generate distribution for contact doctype" depends="package">
        <copy todir="${services.trunk}/${dist.deploy.nuxeo.plugins}">
            <fileset file="${basedir}/target/${nuxeo.contact.legacy.jar}"/>
        </copy>
    </target>

</project>


<project name="contact" default="package" basedir=".">
    <description>
        contact service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
  
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>


    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy contact service">
        <ant antfile="3rdparty/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
    description="undeploy contact service">
        <ant antfile="3rdparty/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist" depends="package"
    description="distribute contact service">
        <ant antfile="3rdparty/build.xml" target="dist" inheritall="false"/>
    </target>

</project>

<project name="dimension.3rdparty" default="package" basedir=".">
    <description>
        dimension service 3rdparty
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
    <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy dimension in ${jee.server.nuxeo}">
        <ant antfile="nuxeo-platform-cs-dimension/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
    description="undeploy dimension from ${jee.server.nuxeo}">
        <ant antfile="nuxeo-platform-cs-dimension/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist"
    description="generate distribution for dimension" depends="package">
        <ant antfile="nuxeo-platform-cs-dimension/build.xml" target="dist" inheritall="false"/>
    </target>


</project>

<project name="nuxeo-platform-cs-dimension" default="package" basedir=".">
    <description>
        dimension nuxeo document type
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <property name="build" location="build"/>
    <property name="dist"  location="dist"/>
    <property name="nuxeo.dimension.jar"
        value="org.collectionspace.services.dimension.3rdparty.nuxeo-${cspace.release}.jar"/>
    <property name="nuxeo.dimension.jars.all"
        value="org.collectionspace.services.dimension.3rdparty.nuxeo-*.jar"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
        <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
        description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
        description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy dimension doctype in ${jee.server.nuxeo}">
        <copy file="${basedir}/target/${nuxeo.dimension.jar}"
        todir="${jee.deploy.nuxeo.plugins}"/>
    </target>

    <target name="undeploy"
        description="undeploy dimension doctype from ${jee.server.nuxeo}">
        <delete>
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.dimension.jars.all}"/>
            </fileset>
        </delete>
    </target>

    <target name="dist"
        description="generate distribution for dimension doctype" depends="package">
        <copy todir="${services.trunk}/${dist.deploy.nuxeo.plugins}">
            <fileset file="${basedir}/target/${nuxeo.dimension.jar}"/>
        </copy>
    </target>

</project>


<project name="dimension" default="package" basedir=".">
    <description>
        Dimension service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
  
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>


    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy dimension service">
        <ant antfile="3rdparty/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
    description="undeploy dimension service">
        <ant antfile="3rdparty/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist" depends="package"
    description="distribute dimension service">
        <ant antfile="3rdparty/build.xml" target="dist" inheritall="false"/>
    </target>

</project>

<project name="group.3rdparty" default="package" basedir=".">
    <description>
        group service 3rdparty
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
    <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy group in ${jee.server.nuxeo}">
    	<!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        <ant antfile="nuxeo-platform-cs-group/build.xml" target="deploy" inheritall="false"/>
        -->
    </target>

    <target name="undeploy"
    description="undeploy group from ${jee.server.nuxeo}">
    	<!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
    	leaving this only for backwards compatibility reasons. -->
        <ant antfile="nuxeo-platform-cs-group/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist"
    description="generate distribution for group" depends="package">
        <ant antfile="nuxeo-platform-cs-group/build.xml" target="dist" inheritall="false"/>
    </target>


</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="nuxeo-platform-cs-group" default="package" basedir=".">
    <description>
        group nuxeo document type
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <!-- JAR files used by CollectionSpace 4.0 and later -->
    <property name="nuxeo.group.doctype.jars.all"
        value="collectionspace.group.doctype.*.jar"/>
    <property name="nuxeo.group.schema.jars.all"
        value="collectionspace.group.schema.*.jar"/>
    <!-- Legacy JAR files used by CollectionSpace 3.3 and earlier --> 
    <property name="nuxeo.group.legacy.jars.all"
        value="org.collectionspace.services.group.3rdparty.nuxeo-*.jar"/>
    <property name="nuxeo.group.legacy.jar"
        value="org.collectionspace.services.group.3rdparty.nuxeo-${cspace.release}.jar"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
        <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
        description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
        description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
        description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy group doctype in ${jee.server.nuxeo}">
        <!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        leaving this only for backwards compatibility reasons. -->  
        <copy file="${basedir}/target/${nuxeo.group.legacy.jar}"
            todir="${jee.deploy.nuxeo.plugins}"/>
    </target>

    <target name="undeploy"
        description="undeploy group doctype from ${jee.server.nuxeo}">
        <delete>
            <!-- Undeploy doctype and schema artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.group.doctype.jars.all}"/>
            </fileset>
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.group.schema.jars.all}"/>
            </fileset>
            <!-- Undeploy legacy artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.group.legacy.jars.all}"/>
            </fileset>
        </delete>
        <!-- Undeploy legacy artifacts from old deployment location through release 0.6 -->
        <delete quiet="true">
            <fileset dir="${jee.deploy.nuxeo.system}">
                <include name="${nuxeo.group.legacy.jars.all}"/>
            </fileset>
        </delete>
    </target>


    <target name="dist"
        description="generate distribution for group doctype" depends="package">
        <copy todir="${services.trunk}/${dist.deploy.nuxeo.plugins}">
            <fileset file="${basedir}/target/${nuxeo.group.legacy.jar}"/>
        </copy>
    </target>

</project>


<project name="group" default="package" basedir=".">
    <description>
        group service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
  
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>


    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy group service">
        <ant antfile="3rdparty/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
    description="undeploy group service">
        <ant antfile="3rdparty/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist" depends="package"
    description="distribute group service">
        <ant antfile="3rdparty/build.xml" target="dist" inheritall="false"/>
    </target>

</project>

<project name="id" default="package" basedir=".">
    <description>
        id service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="service/src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
  
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>


    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="create_nuxeo_db"
    description="create tables(s), indices for id service">
        <ant antfile="service/build.xml" target="create_nuxeo_db" inheritAll="false"/>
    </target>

    <target name="deploy" depends="install"
    description="deploy id service">
        <ant antfile="service/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
    description="undeploy id service">
        <ant antfile="service/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist" depends="package"
    description="generate distribution for id service}">
        <ant antfile="service/build.xml" target="dist" inheritall="false"/>
    </target>

    <target name="dist_installer"
    	description="generate distribution for id" depends="package">        
        <!-- copy install scripts, etc. -->
        <copy todir="${services.trunk}/${dist.installer.services}/id">
            <fileset dir="${basedir}/installer/"/>
        </copy>
    </target>

</project>

<project name="id.service" default="package" basedir=".">
    <description>
        id service
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
  
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>


    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows"
      description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="create_nuxeo_db"
    description="create tables(s), indices for id service">
	<!-- No longer required since we are doing this work at system startup -->
    </target>

    <target name="deploy" depends="install"
    description="deploy id service">
    </target>

    <target name="undeploy"
    description="undeploy id service">
    </target>

    <target name="dist" depends="package"
    description="generate distribution for id">
    </target>

</project>

<project name="imports.3rdparty" default="package" basedir=".">
    <description>
        imports service 3rdparty
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
    <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy imports in ${jee.server.nuxeo}">
        <ant antfile="nuxeo-platform-cs-imports/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
    description="undeploy imports from ${jee.server.nuxeo}">
        <ant antfile="nuxeo-platform-cs-imports/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist"
    description="generate distribution for imports" depends="package">
        <ant antfile="nuxeo-platform-cs-imports/build.xml" target="dist" inheritall="false"/>
    </target>


</project>

<project name="nuxeo-platform-cs-imports" default="package" basedir=".">
    <description>
        imports nuxeo document type
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <property name="nuxeo.imports.jar"
        value="org.collectionspace.services.imports.3rdparty.nuxeo-${cspace.release}.jar"/>
    <property name="nuxeo.imports.jars.all"
        value="org.collectionspace.services.imports.3rdparty.nuxeo-*.jar"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
        <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
        description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
        description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
        description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy imports doctype in ${jee.server.nuxeo}">
        <copy file="${basedir}/target/${nuxeo.imports.jar}"
        todir="${jee.deploy.nuxeo.plugins}"/>
    </target>

    <target name="undeploy"
        description="undeploy imports doctype from ${jee.server.nuxeo}">
        <delete>
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.imports.jars.all}"/>
            </fileset>
        </delete>
    </target>


    <target name="dist"
        description="generate distribution for imports doctype" depends="package">
        <copy todir="${services.trunk}/${dist.deploy.nuxeo.plugins}">
            <fileset file="${basedir}/target/${nuxeo.imports.jar}"/>
        </copy>
    </target>

</project>


<project name="imports" default="package" basedir=".">
    <description>
        imports service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
  
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>


    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy imports service">
        <ant antfile="3rdparty/build.xml" target="deploy" inheritall="false"/>
    	<!-- REM - This logic should be pushed down into the "service" module -->
    	<copy todir="${jee.server.cspace}/cspace/config/services/resources/templates">
            <fileset dir="${basedir}/service/src/main/resources/templates"/>
        </copy>
    </target>

    <target name="undeploy"
    description="undeploy imports service">
        <ant antfile="3rdparty/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist" depends="package"
    description="distribute imports service">
        <ant antfile="3rdparty/build.xml" target="dist" inheritall="false"/>
    </target>

</project>

<project name="main-install" basedir=".">
    <description>
    </description>
  <!-- set global properties for this build -->
    <property name="installer.trunk" value=".."/>
    <property name="services.trunk" value="../../.."/>
    <property file="${installer.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>
    
    <target name="install"
    	description="Copy artifacts for CollectionSpace Nuxeo doctypes">
        <exec executable="echo">
        		<arg value="Installer: Executing CollectionSpace Service's &apos;install&apos; target." />
				</exec>
        <ant antfile="id/build.xml" target="install" inheritAll="false"/>
        <ant antfile="collectionobject/build.xml" target="install" inheritAll="false"/>
        <ant antfile="vocabulary/build.xml" target="install" inheritAll="false"/>
    </target>
    
    <target name="config" description="" depends="install">
        <exec executable="echo">
        		<arg value="Installer: Executing CollectionSpace Service's &apos;config&apos; target." />
				</exec>
    </target>    

    <!-- this target is called in order based on the dependencies between the services -->
    <target name="predeploy" description="" depends="config">
        <exec executable="echo">
        		<arg value="Installer: Executing services &apos;predeploy&apos; target." />
				</exec>    	
<!--
        <ant antfile="common/build.xml" target="setup" inheritAll="false"/>
        <ant antfile="authentication/build.xml" target="setup" inheritAll="false"/>
        <ant antfile="relation/build.xml" target="setup" inheritAll="false"/>
-->        
        <ant antfile="id/build.xml" target="predeploy" inheritAll="false"/>
        <ant antfile="collectionobject/build.xml" target="predeploy" inheritAll="false"/>
        <ant antfile="vocabulary/build.xml" target="predeploy" inheritAll="false"/>
<!--        
        <ant antfile="intake/build.xml" target="setup" inheritAll="false"/>
        <ant antfile="acquisition/build.xml" target="setup" inheritAll="false"/>
        <ant antfile="JaxRsServiceProvider/build.xml" target="setup" inheritAll="false"/>
-->        
    </target>

    <target name="deploy" description="">
        <exec executable="echo">
        		<arg value="Installer: Executing CollectionSpace Service's &apos;deploy&apos; target." />
				</exec>
    </target>

    <target name="postdeploy" description="">
        <exec executable="echo">
        		<arg value="Executing CollectionSpace Service's &apos;postdeploy&apos; target." />
				</exec>    	
<!--
        <ant antfile="common/build.xml" target="setup" inheritAll="false"/>
        <ant antfile="authentication/build.xml" target="setup" inheritAll="false"/>
        <ant antfile="relation/build.xml" target="setup" inheritAll="false"/>
-->        
        <ant antfile="id/build.xml" target="postdeploy" inheritAll="false"/>
        <ant antfile="collectionobject/build.xml" target="postdeploy" inheritAll="false"/>
        <ant antfile="vocabulary/build.xml" target="postdeploy" inheritAll="false"/>
<!--        
        <ant antfile="intake/build.xml" target="setup" inheritAll="false"/>
        <ant antfile="acquisition/build.xml" target="setup" inheritAll="false"/>
        <ant antfile="JaxRsServiceProvider/build.xml" target="setup" inheritAll="false"/>
-->        
    </target>    
</project>

<project name="intake.3rdparty" default="package" basedir=".">
    <description>
        intake service 3rdparty
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
    <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy intake in ${jee.server.nuxeo}">
    	<!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        <ant antfile="nuxeo-platform-cs-intake/build.xml" target="deploy" inheritall="false"/>
        -->
    </target>

    <target name="undeploy"
    description="undeploy intake from ${jee.server.nuxeo}">
    	<!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
    	leaving this only for backwards compatibility reasons. -->
        <ant antfile="nuxeo-platform-cs-intake/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist"
    description="generate distribution for intake" depends="package">
        <ant antfile="nuxeo-platform-cs-intake/build.xml" target="dist" inheritall="false"/>
    </target>
</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="nuxeo-platform-cs-intake" default="package" basedir=".">
    <description>
        intake nuxeo document type
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <!-- JAR files used by CollectionSpace 4.0 and later -->
    <property name="nuxeo.intake.doctype.jars.all"
        value="collectionspace.intake.doctype.*.jar"/>
    <property name="nuxeo.intake.schema.jars.all"
        value="collectionspace.intake.schema.*.jar"/>
    <!-- Legacy JAR files used by CollectionSpace 3.3 and earlier --> 
    <property name="nuxeo.intake.legacy.jars.all"
        value="org.collectionspace.services.intake.3rdparty.nuxeo-*.jar"/>
    <property name="nuxeo.intake.legacy.jar"
        value="org.collectionspace.services.intake.3rdparty.nuxeo-${cspace.release}.jar"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
        <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
        description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
        description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
        description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy intake doctype in ${jee.server.nuxeo}">
        <!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        leaving this only for backwards compatibility reasons. -->  
        <copy file="${basedir}/target/${nuxeo.intake.legacy.jar}"
            todir="${jee.deploy.nuxeo.plugins}"/>
    </target>

    <target name="undeploy"
        description="undeploy intake doctype from ${jee.server.nuxeo}">
        <delete>
            <!-- Undeploy doctype and schema artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.intake.doctype.jars.all}"/>
            </fileset>
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.intake.schema.jars.all}"/>
            </fileset>
            <!-- Undeploy legacy artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.intake.legacy.jars.all}"/>
            </fileset>
        </delete>
        <!-- Undeploy legacy artifacts from old deployment location through release 0.6 -->
        <delete quiet="true">
            <fileset dir="${jee.deploy.nuxeo.system}">
                <include name="${nuxeo.intake.legacy.jars.all}"/>
            </fileset>
        </delete>
    </target>

    <target name="dist"
        description="generate distribution for intake doctype" depends="package">
        <copy todir="${services.trunk}/${dist.deploy.nuxeo.plugins}">
            <fileset file="${basedir}/target/${nuxeo.intake.legacy.jar}"/>
        </copy>
    </target>

</project>


<project name="intake" default="package" basedir=".">
    <description>
        intake service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
  
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>


    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy intake service">
        <ant antfile="3rdparty/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
    description="undeploy intake service">
        <ant antfile="3rdparty/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist" depends="package"
    description="distribute intake service">
        <ant antfile="3rdparty/build.xml" target="dist" inheritall="false"/>
    </target>

</project>

<project name="loanin.3rdparty" default="package" basedir=".">
    <description>
        loanin service 3rdparty
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
    <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy loanin in ${jee.server.nuxeo}">
    	<!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        <ant antfile="nuxeo-platform-cs-loanin/build.xml" target="deploy" inheritall="false"/>
        -->
    </target>

    <target name="undeploy"
    description="undeploy loanin from ${jee.server.nuxeo}">
    	<!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
    	leaving this only for backwards compatibility reasons. -->
        <ant antfile="nuxeo-platform-cs-loanin/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist"
    description="generate distribution for loanin" depends="package">
        <ant antfile="nuxeo-platform-cs-loanin/build.xml" target="dist" inheritall="false"/>
    </target>


</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="nuxeo-platform-cs-loanin" default="package" basedir=".">
    <description>
        loanin nuxeo document type
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    
    <!-- JAR files used by CollectionSpace 4.0 and later -->
    <property name="nuxeo.loanin.doctype.jars.all"
        value="collectionspace.loanin.doctype.*.jar"/>
    <property name="nuxeo.loanin.schema.jars.all"
        value="collectionspace.loanin.schema.*.jar"/>
    <!-- Legacy JAR files used by CollectionSpace 3.3 and earlier --> 
    <property name="nuxeo.loanin.legacy.jars.all"
        value="org.collectionspace.services.loanin.3rdparty.nuxeo-*.jar"/>
    <property name="nuxeo.loanin.legacy.jar"
        value="org.collectionspace.services.loanin.3rdparty.nuxeo-${cspace.release}.jar"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
        <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
        description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
        description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
        description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy loanin doctype in ${jee.server.nuxeo}">
        <!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        leaving this only for backwards compatibility reasons. -->  
        <copy file="${basedir}/target/${nuxeo.loanin.legacy.jar}"
            todir="${jee.deploy.nuxeo.plugins}"/>
    </target>

    <target name="undeploy"
        description="undeploy loanin doctype from ${jee.server.nuxeo}">
        <delete>
            <!-- Undeploy doctype and schema artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.loanin.doctype.jars.all}"/>
            </fileset>
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.loanin.schema.jars.all}"/>
            </fileset>
            <!-- Undeploy legacy artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.loanin.legacy.jars.all}"/>
            </fileset>
        </delete>
        <!-- Undeploy legacy artifacts from old deployment location through release 0.6 -->
        <delete quiet="true">
            <fileset dir="${jee.deploy.nuxeo.system}">
                <include name="${nuxeo.loanin.legacy.jars.all}"/>
            </fileset>
        </delete>
    </target>

    <target name="dist"
        description="generate distribution for loanin doctype" depends="package">
        <copy todir="${services.trunk}/${dist.deploy.nuxeo.plugins}">
            <fileset file="${basedir}/target/${nuxeo.loanin.legacy.jar}"/>
        </copy>
    </target>

</project>


<project name="loanin" default="package" basedir=".">
    <description>
        loanin service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
  
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>


    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy loanin service">
        <ant antfile="3rdparty/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
    description="undeploy loanin service">
        <ant antfile="3rdparty/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist" depends="package"
    description="distribute loanin service">
        <ant antfile="3rdparty/build.xml" target="dist" inheritall="false"/>
    </target>

</project>

<project name="loanout.3rdparty" default="package" basedir=".">
    <description>
        loanout service 3rdparty
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
    <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy loanout in ${jee.server.nuxeo}">
    	<!-- This module is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        <ant antfile="nuxeo-platform-cs-loanout/build.xml" target="deploy" inheritall="false"/>
        -->
    </target>

    <target name="undeploy"
    description="undeploy loanout from ${jee.server.nuxeo}">
    	<!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
    	leaving this only for backwards compatibility reasons. -->
        <ant antfile="nuxeo-platform-cs-loanout/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist"
    description="generate distribution for loanout" depends="package">
        <ant antfile="nuxeo-platform-cs-loanout/build.xml" target="dist" inheritall="false"/>
    </target>


</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="nuxeo-platform-cs-loanout" default="package" basedir=".">
    <description>
        loanout nuxeo document type
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <!-- JAR files used by CollectionSpace 4.0 and later -->
    <property name="nuxeo.loanout.doctype.jars.all"
        value="collectionspace.loanout.doctype.*.jar"/>
    <property name="nuxeo.loanout.schema.jars.all"
        value="collectionspace.loanout.schema.*.jar"/>
    <!-- Legacy JAR files used by CollectionSpace 3.3 and earlier --> 
    <property name="nuxeo.loanout.legacy.jars.all"
        value="org.collectionspace.services.loanout.3rdparty.nuxeo-*.jar"/>
    <property name="nuxeo.loanout.legacy.jar"
        value="org.collectionspace.services.loanout.3rdparty.nuxeo-${cspace.release}.jar"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
        <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
        description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
        description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
        description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy loanout doctype in ${jee.server.nuxeo}">
        <!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        leaving this only for backwards compatibility reasons. --> 
        <copy file="${basedir}/target/${nuxeo.loanout.legacy.jar}"
            todir="${jee.deploy.nuxeo.plugins}"/>
    </target>

    <target name="undeploy"
        description="undeploy loanout doctype from ${jee.server.nuxeo}">
        <delete>
            <!-- Undeploy doctype and schema artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.loanout.doctype.jars.all}"/>
            </fileset>
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.loanout.schema.jars.all}"/>
            </fileset>
            <!-- Undeploy legacy artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.loanout.legacy.jars.all}"/>
            </fileset>
        </delete>
        <!-- Undeploy legacy artifacts from old deployment location through release 0.6 -->
        <delete quiet="true">
            <fileset dir="${jee.deploy.nuxeo.system}">
                <include name="${nuxeo.loanout.legacy.jars.all}"/>
            </fileset>
        </delete>
    </target>


    <target name="dist"
        description="generate distribution for loanout doctype" depends="package">
        <copy todir="${services.trunk}/${dist.deploy.nuxeo.plugins}">
            <fileset file="${basedir}/target/${nuxeo.loanout.legacy.jar}"/>
        </copy>
    </target>

</project>


<project name="loanout" default="package" basedir=".">
    <description>
        loanout service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
  
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>


    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy loanout service">
        <ant antfile="3rdparty/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
    description="undeploy loanout service">
        <ant antfile="3rdparty/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist" depends="package"
    description="distribute loanout service">
        <ant antfile="3rdparty/build.xml" target="dist" inheritall="false"/>
    </target>

</project>

<project name="location.3rdparty" default="package" basedir=".">
    <description>
        location service 3rdparty
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
    <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy location in ${jee.server.nuxeo}">
    	<!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        <ant antfile="nuxeo-platform-cs-location/build.xml" target="deploy" inheritall="false"/>
        -->
    </target>

    <target name="undeploy"
    description="undeploy location from ${jee.server.nuxeo}">
    	<!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
    	leaving this only for backwards compatibility reasons. -->
        <ant antfile="nuxeo-platform-cs-location/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist"
    description="generate distribution for location" depends="package">
        <ant antfile="nuxeo-platform-cs-location/build.xml" target="dist" inheritall="false"/>
    </target>
    
    <target name="dist_installer"
    description="generate distribution for collectionobject" depends="package">
        <ant antfile="nuxeo-platform-cs-location/build.xml" target="dist_installer" inheritall="false"/>
    </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="nuxeo-platform-cs-location" default="package" basedir=".">
    <description>
        location nuxeo document type
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <!-- JAR files used by CollectionSpace 4.0 and later -->
    <property name="nuxeo.location.doctype.jars.all"
        value="collectionspace.location.doctype.*.jar"/>
    <property name="nuxeo.location.schema.jars.all"
        value="collectionspace.location.schema.*.jar"/>
    <!-- Legacy JAR files used by CollectionSpace 3.3 and earlier --> 
    <property name="nuxeo.location.legacy.jars.all"
        value="org.collectionspace.services.location.3rdparty.nuxeo-*.jar"/>
    <property name="nuxeo.location.legacy.jar"
        value="org.collectionspace.services.location.3rdparty.nuxeo-${cspace.release}.jar"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
        <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
        description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
        description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
        description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy location doctype in ${jee.server.nuxeo}">
        <!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        leaving this only for backwards compatibility reasons. -->  
        <copy file="${basedir}/target/${nuxeo.location.legacy.jar}"
            todir="${jee.deploy.nuxeo.plugins}"/>
    </target>

    <target name="undeploy"
        description="undeploy location doctype from ${jee.server.nuxeo}">
        <delete>
            <!-- Undeploy doctype and schema artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.location.doctype.jars.all}"/>
            </fileset>
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.location.schema.jars.all}"/>
            </fileset>
            <!-- Undeploy legacy artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.location.legacy.jars.all}"/>
            </fileset>
        </delete>
        <!-- Undeploy legacy artifacts from old deployment location through release 0.6 -->
        <delete quiet="true">
            <fileset dir="${jee.deploy.nuxeo.system}">
                <include name="${nuxeo.location.legacy.jars.all}"/>
            </fileset>
        </delete>
    </target>

    <target name="dist"
        description="generate distribution for location doctype" depends="package">
        <copy todir="${services.trunk}/${dist.deploy.nuxeo.plugins}">
            <fileset file="${basedir}/target/${nuxeo.location.legacy.jar}"/>
        </copy>
    </target>

    <target name="dist_installer"
    	description="Creates an installer distribution for location doctype" depends="package">
        <copy todir="${services.trunk}/${dist.installer.services}/location/nuxeo">
            <fileset file="${basedir}/target/${nuxeo.location.legacy.jar}"/>
        </copy>
    </target>

</project>


<project name="location" default="package" basedir=".">
    <description>
        Location Authority service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
        <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
  
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy location service">
        <ant antfile="3rdparty/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
        description="undeploy location service">
        <ant antfile="3rdparty/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist" depends="package"
        description="distribute location service">
        <ant antfile="3rdparty/build.xml" target="dist" inheritall="false"/>
    </target>

    <target name="dist_installer" depends="package"
        description="distribute location service">        
        <!-- copy install scripts, etc. -->
        <copy todir="${services.trunk}/${dist.installer.services}/location">
            <fileset dir="${basedir}/installer/"/>
        </copy>
        <ant antfile="3rdparty/build.xml" target="dist_installer" inheritall="false"/>
    </target>

</project>

<project name="location" default="package" basedir=".">
    <description>
        location service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>
    
    <target name="install" description="">
        <exec executable="echo">
        		<arg value="Installer: Executing location Service's &apos;install&apos; target." />
				</exec>
				<!-- Copy the Nuxeo DocType jar files to the Nuxeo app server domain -->
        <copy todir="${jee.deploy.nuxeo.plugins}">
            <fileset file="nuxeo/*.jar"/>
        </copy>				
    </target>    

    <target name="config" description="" depends="install">
        <exec executable="echo">
        		<arg value="Installer: Executing Location Service's &apos;config&apos; target." />
				</exec>
    </target>
    
    <target name="predeploy" description="" depends="config">
        <exec executable="echo">
        		<arg value="Installer: Executing Location Service's &apos;predeploy&apos; target." />
				</exec>
    </target>    
    
    <target name="deploy" description="">
        <exec executable="echo">
        		<arg value="Installer: Executing Location Service's &apos;deploy&apos; target." />
				</exec>
    </target>
    
    <target name="postdeploy">
        <exec executable="echo">
        		<arg value="Installer: Executing installer's &apos;postdeploy&apos; target for the Location Service." />
				</exec>		
        <exec executable="echo">
        		<arg value="Importing necessary locationauthorities." />
				</exec>				
        <java jar="./postdeploy/collectionspace-services-location-importer-jar-with-dependencies.jar"
        	fork="true"
        	failonerror="true">
				</java>	
    </target>
    

</project>

<project name="media.3rdparty" default="package" basedir=".">
    <description>
        media service 3rdparty
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
    <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy media in ${jee.server.nuxeo}">
    	<!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        <ant antfile="nuxeo-platform-cs-media/build.xml" target="deploy" inheritall="false"/>
        -->
    </target>

    <target name="undeploy"
    description="undeploy media from ${jee.server.nuxeo}">
    	<!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
    	leaving this only for backwards compatibility reasons. -->
        <ant antfile="nuxeo-platform-cs-media/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist"
    description="generate distribution for media" depends="package">
        <ant antfile="nuxeo-platform-cs-media/build.xml" target="dist" inheritall="false"/>
    </target>
	
</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="nuxeo-platform-cs-media" default="package" basedir=".">
    <description>
        media nuxeo document type
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <!-- JAR files used by CollectionSpace 4.0 and later -->
    <property name="nuxeo.media.doctype.jars.all"
        value="collectionspace.media.doctype.*.jar"/>
    <property name="nuxeo.media.schema.jars.all"
        value="collectionspace.media.schema.*.jar"/>
    <!-- Legacy JAR files used by CollectionSpace 3.3 and earlier --> 
    <property name="nuxeo.media.legacy.jars.all"
        value="org.collectionspace.services.media.3rdparty.nuxeo-*.jar"/>
    <property name="nuxeo.media.legacy.jar"
        value="org.collectionspace.services.media.3rdparty.nuxeo-${cspace.release}.jar"/>
    
    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
        <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
        description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
        description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
        description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy media doctype in ${jee.server.nuxeo}">
        <!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        leaving this only for backwards compatibility reasons. -->  
        <copy file="${basedir}/target/${nuxeo.media.legacy.jar}"
            todir="${jee.deploy.nuxeo.plugins}"/>
    </target>

    <target name="undeploy"
        description="undeploy media doctype from ${jee.server.nuxeo}">
        <delete>
            <!-- Undeploy doctype and schema artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.media.doctype.jars.all}"/>
            </fileset>
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.media.schema.jars.all}"/>
            </fileset>
            <!-- Undeploy legacy artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.media.legacy.jars.all}"/>
            </fileset>
        </delete>
        <!-- Undeploy legacy artifacts from old deployment location through release 0.6 -->
        <delete quiet="true">
            <fileset dir="${jee.deploy.nuxeo.system}">
                <include name="${nuxeo.media.legacy.jars.all}"/>
            </fileset>
        </delete>
    </target>


    <target name="dist"
        description="generate distribution for media doctype" depends="package">
        <copy todir="${services.trunk}/${dist.deploy.nuxeo.plugins}">
            <fileset file="${basedir}/target/${nuxeo.media.legacy.jar}"/>
        </copy>
    </target>

</project>


<project name="media" default="package" basedir=".">
    <description>
        media service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
  
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>


    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy media service">
        <ant antfile="3rdparty/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
    description="undeploy media service">
        <ant antfile="3rdparty/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist" depends="package"
    description="distribute media service">
        <ant antfile="3rdparty/build.xml" target="dist" inheritall="false"/>
    </target>

</project>

<project name="movement.3rdparty" default="package" basedir=".">
    <description>
        movement service 3rdparty
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
    <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy movement in ${jee.server.nuxeo}">
    	<!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        <ant antfile="nuxeo-platform-cs-movement/build.xml" target="deploy" inheritall="false"/>
        -->
    </target>

    <target name="undeploy"
    description="undeploy movement from ${jee.server.nuxeo}">
    	<!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
    	leaving this only for backwards compatibility reasons. -->
        <ant antfile="nuxeo-platform-cs-movement/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist"
    description="generate distribution for movement" depends="package">
        <ant antfile="nuxeo-platform-cs-movement/build.xml" target="dist" inheritall="false"/>
    </target>


</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="nuxeo-platform-cs-movement" default="package" basedir=".">
    <description>
        movement nuxeo document type
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <!-- JAR files used by CollectionSpace 4.0 and later -->
    <property name="nuxeo.movement.doctype.jars.all"
        value="collectionspace.movement.doctype.*.jar"/>
    <property name="nuxeo.movement.schema.jars.all"
        value="collectionspace.movement.schema.*.jar"/>
    <!-- Legacy JAR files used by CollectionSpace 3.3 and earlier --> 
    <property name="nuxeo.movement.legacy.jars.all"
        value="org.collectionspace.services.movement.3rdparty.nuxeo-*.jar"/>
    <property name="nuxeo.movement.legacy.jar"
        value="org.collectionspace.services.movement.3rdparty.nuxeo-${cspace.release}.jar"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
        <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
        description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
        description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
        description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy movement doctype in ${jee.server.nuxeo}">
        <!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        leaving this only for backwards compatibility reasons. -->  
        <copy file="${basedir}/target/${nuxeo.movement.legacy.jar}"
            todir="${jee.deploy.nuxeo.plugins}"/>
    </target>

    <target name="undeploy"
        description="undeploy movement doctype from ${jee.server.nuxeo}">
        <delete>
            <!-- Undeploy doctype and schema artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.movement.doctype.jars.all}"/>
            </fileset>
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.movement.schema.jars.all}"/>
            </fileset>
            <!-- Undeploy legacy artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.movement.legacy.jars.all}"/>
            </fileset>
        </delete>
        <!-- Undeploy legacy artifacts from old deployment location through release 0.6 -->
        <delete quiet="true">
            <fileset dir="${jee.deploy.nuxeo.system}">
                <include name="${nuxeo.movement.legacy.jars.all}"/>
            </fileset>
        </delete>
    </target>


    <target name="dist"
        description="generate distribution for movement doctype" depends="package">
        <copy todir="${services.trunk}/${dist.deploy.nuxeo.plugins}">
            <fileset file="${basedir}/target/${nuxeo.movement.legacy.jar}"/>
        </copy>
    </target>

</project>


<project name="movement" default="package" basedir=".">
    <description>
        movement service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
  
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>


    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy movement service">
        <ant antfile="3rdparty/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
    description="undeploy movement service">
        <ant antfile="3rdparty/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist" depends="package"
    description="distribute movement service">
        <ant antfile="3rdparty/build.xml" target="dist" inheritall="false"/>
    </target>

</project>

<project name="note.3rdparty" default="package" basedir=".">
    <description>
        note service 3rdparty
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
    <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy note in ${jee.server.nuxeo}">
    	<!-- This is an unused and deprecated artifact from an unused Service
        <ant antfile="nuxeo-platform-cs-note/build.xml" target="deploy" inheritall="false"/>
        -->
    </target>

    <target name="undeploy"
    description="undeploy note from ${jee.server.nuxeo}">
    	<!-- This is an unused and deprecated artifact from an unused Service.  Leave this undeploy
    	target active only for backwards compatibility. -->
        <ant antfile="nuxeo-platform-cs-note/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist"
    description="generate distribution for note" depends="package">
        <ant antfile="nuxeo-platform-cs-note/build.xml" target="dist" inheritall="false"/>
    </target>


</project>

<project name="nuxeo-platform-cs-note" default="package" basedir=".">
    <description>
        note nuxeo document type
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <property name="build" location="build"/>
    <property name="dist"  location="dist"/>
    <property name="nuxeo.note.jar"
        value="org.collectionspace.services.note.3rdparty.nuxeo-${cspace.release}.jar"/>
    <property name="nuxeo.note.jars.all"
        value="org.collectionspace.services.note.3rdparty.nuxeo-*.jar"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
        <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
        description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
        description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
        description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy note doctype in ${jee.server.nuxeo}">
        <copy file="${basedir}/target/${nuxeo.note.jar}"
        todir="${jee.deploy.nuxeo.plugins}"/>
    </target>

    <target name="undeploy"
        description="undeploy note doctype from ${jee.server.nuxeo}">
        <delete>
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.note.jars.all}"/>
            </fileset>
        </delete>
    </target>

    <target name="dist"
        description="generate distribution for note doctype" depends="package">
        <copy todir="${services.trunk}/${dist.deploy.nuxeo.plugins}">
            <fileset file="${basedir}/target/${nuxeo.note.jar}"/>
        </copy>
    </target>

</project>


<project name="note" default="package" basedir=".">
    <description>
        note service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
  
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>


    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy note service">
        <ant antfile="3rdparty/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
    description="undeploy note service">
        <ant antfile="3rdparty/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist" depends="package"
    description="distribute note service">
        <ant antfile="3rdparty/build.xml" target="dist" inheritall="false"/>
    </target>

</project>

<project name="objectexit.3rdparty" default="package" basedir=".">
    <description>
        objectexit service 3rdparty
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
    <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy objectexit in ${jee.server.nuxeo}">
    	<!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        <ant antfile="nuxeo-platform-cs-objectexit/build.xml" target="deploy" inheritall="false"/>
        -->
    </target>

    <target name="undeploy"
    description="undeploy objectexit from ${jee.server.nuxeo}">
    	<!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
    	leaving this only for backwards compatibility reasons. -->
        <ant antfile="nuxeo-platform-cs-objectexit/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist"
    description="generate distribution for objectexit" depends="package">
        <ant antfile="nuxeo-platform-cs-objectexit/build.xml" target="dist" inheritall="false"/>
    </target>


</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="nuxeo-platform-cs-objectexit" default="package" basedir=".">
    <description>
        objectexit nuxeo document type
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <!-- JAR files used by CollectionSpace 4.0 and later -->
    <property name="nuxeo.objectexit.doctype.jars.all"
        value="collectionspace.objectexit.doctype.*.jar"/>
    <property name="nuxeo.objectexit.schema.jars.all"
        value="collectionspace.objectexit.schema.*.jar"/>
    <!-- Legacy JAR files used by CollectionSpace 3.3 and earlier --> 
    <property name="nuxeo.objectexit.legacy.jars.all"
        value="org.collectionspace.services.objectexit.3rdparty.nuxeo-*.jar"/>
    <property name="nuxeo.objectexit.legacy.jar"
        value="org.collectionspace.services.objectexit.3rdparty.nuxeo-${cspace.release}.jar"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
        <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
        description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
        description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
        description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy objectexit doctype in ${jee.server.nuxeo}">
        <!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        leaving this only for backwards compatibility reasons. --> 
        <copy file="${basedir}/target/${nuxeo.objectexit.legacy.jar}"
            todir="${jee.deploy.nuxeo.plugins}"/>
    </target>

    <target name="undeploy"
        description="undeploy objectexit doctype from ${jee.server.nuxeo}">
        <delete>
            <!-- Undeploy doctype and schema artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.objectexit.doctype.jars.all}"/>
            </fileset>
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.objectexit.schema.jars.all}"/>
            </fileset>
            <!-- Undeploy legacy artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.objectexit.legacy.jars.all}"/>
            </fileset>
        </delete>
        <!-- Undeploy legacy artifacts from old deployment location through release 0.6 -->
        <delete quiet="true">
            <fileset dir="${jee.deploy.nuxeo.system}">
                <include name="${nuxeo.objectexit.legacy.jars.all}"/>
            </fileset>
        </delete>
    </target>


    <target name="dist"
        description="generate distribution for objectexit doctype" depends="package">
        <copy todir="${services.trunk}/${dist.deploy.nuxeo.plugins}">
            <fileset file="${basedir}/target/${nuxeo.objectexit.legacy.jar}"/>
        </copy>
    </target>

</project>


<project name="objectexit" default="package" basedir=".">
    <description>
        objectexit service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
  
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>


    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy objectexit service">
        <ant antfile="3rdparty/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
    description="undeploy objectexit service">
        <ant antfile="3rdparty/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist" depends="package"
    description="distribute objectexit service">
        <ant antfile="3rdparty/build.xml" target="dist" inheritall="false"/>
    </target>

</project>

<project name="organization.3rdparty" default="package" basedir=".">
    <description>
        organization service 3rdparty
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
    <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy organization in ${jee.server.nuxeo}">
    	<!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        <ant antfile="nuxeo-platform-cs-organization/build.xml" target="deploy" inheritall="false"/>
        -->
    </target>

    <target name="undeploy"
    description="undeploy organization from ${jee.server.nuxeo}">
    	<!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
    	leaving this only for backwards compatibility reasons. -->
        <ant antfile="nuxeo-platform-cs-organization/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist"
    description="generate distribution for organization" depends="package">
        <ant antfile="nuxeo-platform-cs-organization/build.xml" target="dist" inheritall="false"/>
    </target>
    
    <target name="dist_installer"
    description="generate distribution for collectionobject" depends="package">
        <ant antfile="nuxeo-platform-cs-organization/build.xml" target="dist_installer" inheritall="false"/>
    </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="nuxeo-platform-cs-organization" default="package" basedir=".">
    <description>
        organization nuxeo document type
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <!-- JAR files used by CollectionSpace 4.0 and later -->
    <property name="nuxeo.organization.doctype.jars.all"
        value="collectionspace.organization.doctype.*.jar"/>
    <property name="nuxeo.organization.schema.jars.all"
        value="collectionspace.organization.schema.*.jar"/>
    <!-- Legacy JAR files used by CollectionSpace 3.3 and earlier --> 
    <property name="nuxeo.organization.legacy.jars.all"
        value="org.collectionspace.services.organization.3rdparty.nuxeo-*.jar"/>
    <property name="nuxeo.organization.legacy.jar"
        value="org.collectionspace.services.organization.3rdparty.nuxeo-${cspace.release}.jar"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
        <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
        description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
        description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
        description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy organization doctype in ${jee.server.nuxeo}">
         <!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        leaving this only for backwards compatibility reasons. --> 
        <copy file="${basedir}/target/${nuxeo.organization.legacy.jar}"
            todir="${jee.deploy.nuxeo.plugins}"/>
    </target>

    <target name="undeploy"
        description="undeploy organization doctype from ${jee.server.nuxeo}">
        <delete>
            <!-- Undeploy doctype and schema artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.organization.doctype.jars.all}"/>
            </fileset>
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.organization.schema.jars.all}"/>
            </fileset>
            <!-- Undeploy legacy artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.organization.legacy.jars.all}"/>
            </fileset>
        </delete>
        <!-- Undeploy legacy artifacts from old deployment location through release 0.6 -->
        <delete quiet="true">
            <fileset dir="${jee.deploy.nuxeo.system}">
                <include name="${nuxeo.organization.legacy.jars.all}"/>
            </fileset>
        </delete>
    </target>

    <target name="dist"
        description="generate distribution for organization doctype" depends="package">
        <copy todir="${services.trunk}/${dist.deploy.nuxeo.plugins}">
            <fileset file="${basedir}/target/${nuxeo.organization.legacy.jar}"/>
        </copy>
    </target>

    <target name="dist_installer"
    	description="Creates an installer distribution for organization doctype" depends="package">
        <copy todir="${services.trunk}/${dist.installer.services}/organization/nuxeo">
            <fileset file="${basedir}/target/${nuxeo.organization.legacy.jar}"/>
        </copy>
    </target>

</project>


<project name="organization" default="package" basedir=".">
    <description>
        organization service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
        <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
  
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy organization service">
        <ant antfile="3rdparty/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
        description="undeploy organization service">
        <ant antfile="3rdparty/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist" depends="package"
        description="distribute organization service">
        <ant antfile="3rdparty/build.xml" target="dist" inheritall="false"/>
    </target>

    <target name="dist_installer" depends="package"
        description="distribute organization service">        
        <!-- copy install scripts, etc. -->
        <copy todir="${services.trunk}/${dist.installer.services}/organization">
            <fileset dir="${basedir}/installer/"/>
        </copy>
        <ant antfile="3rdparty/build.xml" target="dist_installer" inheritall="false"/>
    </target>

</project>

<project name="organization" default="package" basedir=".">
    <description>
        organization service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>
    
    <target name="install" description="">
        <exec executable="echo">
        		<arg value="Installer: Executing Organization Service's &apos;install&apos; target." />
				</exec>
				<!-- Copy the Nuxeo DocType jar files to the Nuxeo app server domain -->
        <copy todir="${jee.deploy.nuxeo.plugins}">
            <fileset file="nuxeo/*.jar"/>
        </copy>				
    </target>    

    <target name="config" description="" depends="install">
        <exec executable="echo">
        		<arg value="Installer: Executing Organization Service's &apos;config&apos; target." />
				</exec>
    </target>
    
    <target name="predeploy" description="" depends="config">
        <exec executable="echo">
        		<arg value="Installer: Executing Organization Service's &apos;predeploy&apos; target." />
				</exec>
    </target>    
    
    <target name="deploy" description="">
        <exec executable="echo">
        		<arg value="Installer: Executing Organization Service's &apos;deploy&apos; target." />
				</exec>
    </target>
    
    <target name="postdeploy">
        <exec executable="echo">
        		<arg value="Installer: Executing installer's &apos;postdeploy&apos; target for the Organization Service." />
				</exec>		
        <exec executable="echo">
        		<arg value="Importing necessary orgauthorities." />
				</exec>				
        <java jar="./postdeploy/collectionspace-services-organization-importer-jar-with-dependencies.jar"
        	fork="true"
        	failonerror="true">
				</java>	
    </target>
    

</project>

<project name="person.3rdparty" default="package" basedir=".">
    <description>
        person service 3rdparty
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
    <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy person in ${jee.server.nuxeo}">
    	<!-- These targets are obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        <ant antfile="nuxeo-platform-cs-person/build.xml" target="deploy" inheritall="false"/>
        <ant antfile="nuxeo-platform-person-lifesci/build.xml" target="deploy" inheritall="false"/>
        -->
    </target>

    <target name="undeploy"
    description="undeploy person from ${jee.server.nuxeo}">
    	<!-- These targets are obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
    	leaving this only for backwards compatibility reasons. -->
        <ant antfile="nuxeo-platform-cs-person/build.xml" target="undeploy" inheritall="false"/>
        <ant antfile="nuxeo-platform-person-lifesci/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist"
    description="generate distribution for person" depends="package">
        <ant antfile="nuxeo-platform-cs-person/build.xml" target="dist" inheritall="false"/>
        <ant antfile="nuxeo-platform-person-lifesci/build.xml" target="dist" inheritall="false"/>
    </target>
    
    <target name="dist_installer"
    description="generate distribution for collectionobject" depends="package">
        <ant antfile="nuxeo-platform-cs-person/build.xml" target="dist_installer" inheritall="false"/>
        <ant antfile="nuxeo-platform-person-lifesci/build.xml" target="dist_installer" inheritall="false"/>
    </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="nuxeo-platform-cs-person" default="package" basedir=".">
    <description>
        person nuxeo document type
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <!-- JAR files used by CollectionSpace 4.0 and later -->
    <property name="nuxeo.person.doctype.jars.all"
        value="collectionspace.person.doctype.*.jar"/>
    <property name="nuxeo.person.schema.jars.all"
        value="collectionspace.person.schema.*.jar"/>
    <!-- Legacy JAR files used by CollectionSpace 3.3 and earlier --> 
    <property name="nuxeo.person.legacy.jars.all"
        value="org.collectionspace.services.person.3rdparty.nuxeo-*.jar"/>
    <property name="nuxeo.person.legacy.jar"
        value="org.collectionspace.services.person.3rdparty.nuxeo-${cspace.release}.jar"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
        <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
        description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
        description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
        description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy person doctype in ${jee.server.nuxeo}">
         <!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        leaving this only for backwards compatibility reasons. -->  
        <copy file="${basedir}/target/${nuxeo.person.legacy.jar}"
            todir="${jee.deploy.nuxeo.plugins}"/>
    </target>

    <target name="undeploy"
        description="undeploy person doctype from ${jee.server.nuxeo}">
        <delete>
            <!-- Undeploy doctype and schema artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.person.doctype.jars.all}"/>
            </fileset>
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.person.schema.jars.all}"/>
            </fileset>
            <!-- Undeploy legacy artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.person.legacy.jars.all}"/>
            </fileset>
        </delete>
        <!-- Undeploy legacy artifacts from old deployment location through release 0.6 -->
        <delete quiet="true">
            <fileset dir="${jee.deploy.nuxeo.system}">
                <include name="${nuxeo.person.legacy.jars.all}"/>
            </fileset>
        </delete>
    </target>

    <target name="dist"
        description="generate distribution for person doctype" depends="package">
        <copy todir="${services.trunk}/${dist.deploy.nuxeo.plugins}">
            <fileset file="${basedir}/target/${nuxeo.person.legacy.jar}"/>
        </copy>
    </target>

    <target name="dist_installer"
    	description="Creates an installer distribution for person doctype" depends="package">
        <copy todir="${services.trunk}/${dist.installer.services}/person/nuxeo">
            <fileset file="${basedir}/target/${nuxeo.person.legacy.jar}"/>
        </copy>
    </target>

</project>


<project name="nuxeo-platform-person-lifesci" default="package" basedir=".">
    <description>
        Person nuxeo document type for the lifesci tenant
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <property name="build" location="build"/>
    <property name="dist"  location="dist"/>
    <!-- JAR files used by CollectionSpace 4.0 and later -->
    <!-- Both doctype and schema JAR(s) are removed via the 'undeploy' target -->
    <!-- in another Ant buildfile, in a peer module to this module -->
    <!-- Legacy JAR files used by CollectionSpace 3.3 and earlier -->
    <property name="nuxeo.person.lifesci.legacy.jars.all"
        value="org.collectionspace.services.person.3rdparty.lifesci.nuxeo-*.jar"/>
    <property name="nuxeo.person.lifesci.legacy.jar"
        value="org.collectionspace.services.person.3rdparty.lifesci.nuxeo-${cspace.release}.jar"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
        <!-- Create the time stamp -->
        <tstamp/>
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build}"/>
    </target>

    <target name="package" depends="package-unix,package-windows"
        description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
        description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy person doctype in ${jee.server.nuxeo}">
        <!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        leaving this only for backwards compatibility reasons. -->  
        <copy file="${basedir}/target/${nuxeo.person.lifesci.legacy.jar}"
            todir="${jee.deploy.nuxeo.plugins}"/>
    </target>

    <target name="undeploy"
        description="undeploy person doctype from ${jee.server.nuxeo}">
        <delete>
            <!-- Both doctype and schema JAR(s) are removed via the 'undeploy' target -->
            <!-- in another Ant buildfile, in a peer module to this module -->
            <!-- Undeploy legacy artifacts -->
            <!-- Additional legacy JAR(s) are removed via the 'undeploy' target in the -->
            <!-- Ant buildfile for the common schema -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.person.lifesci.legacy.jars.all}"/>
            </fileset>
        </delete>
        <!-- Undeploy legacy artifacts from old deployment location through release 0.6 -->
        <delete quiet="true">
            <fileset dir="${jee.deploy.nuxeo.system}">
                <include name="${nuxeo.person.lifesci.legacy.jars.all}"/>
            </fileset>
        </delete>
    </target>

    <target name="dist"
    	description="generate distribution for person doctype" depends="package">
        <copy todir="${services.trunk}/${dist.deploy.nuxeo.plugins}">
            <fileset file="${basedir}/target/${nuxeo.person.jar}"/>
        </copy>
    </target>

    <target name="dist_installer"
    	description="Creates an installer distribution for Person doctype" depends="package">
        <copy todir="${services.trunk}/${dist.installer.services}/person/nuxeo">
            <fileset file="${basedir}/target/${nuxeo.person.jar}"/>
        </copy>
    </target>
</project>

<project name="person" default="package" basedir=".">
    <description>
        person service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
        <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
  
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy person service">
        <ant antfile="3rdparty/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
        description="undeploy person service">
        <ant antfile="3rdparty/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist" depends="package"
        description="distribute person service">
        <ant antfile="3rdparty/build.xml" target="dist" inheritall="false"/>
    </target>

    <target name="dist_installer" depends="package"
        description="distribute person service">        
        <!-- copy install scripts, etc. -->
        <copy todir="${services.trunk}/${dist.installer.services}/person">
            <fileset dir="${basedir}/installer/"/>
        </copy>
        <ant antfile="3rdparty/build.xml" target="dist_installer" inheritall="false"/>
    </target>

</project>

<project name="person" default="package" basedir=".">
    <description>
        person service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>
    
    <target name="install" description="">
        <exec executable="echo">
        		<arg value="Installer: Executing person Service's &apos;install&apos; target." />
				</exec>
				<!-- Copy the Nuxeo DocType jar files to the Nuxeo app server domain -->
        <copy todir="${jee.deploy.nuxeo.plugins}">
            <fileset file="nuxeo/*.jar"/>
        </copy>				
    </target>    

    <target name="config" description="" depends="install">
        <exec executable="echo">
        		<arg value="Installer: Executing Person Service's &apos;config&apos; target." />
				</exec>
    </target>
    
    <target name="predeploy" description="" depends="config">
        <exec executable="echo">
        		<arg value="Installer: Executing Person Service's &apos;predeploy&apos; target." />
				</exec>
    </target>    
    
    <target name="deploy" description="">
        <exec executable="echo">
        		<arg value="Installer: Executing Person Service's &apos;deploy&apos; target." />
				</exec>
    </target>
    
    <target name="postdeploy">
        <exec executable="echo">
        		<arg value="Installer: Executing installer's &apos;postdeploy&apos; target for the Person Service." />
				</exec>		
        <exec executable="echo">
        		<arg value="Importing necessary personauthorities." />
				</exec>				
        <java jar="./postdeploy/collectionspace-services-person-importer-jar-with-dependencies.jar"
        	fork="true"
        	failonerror="true">
				</java>	
    </target>
    

</project>

<project name="place.3rdparty" default="package" basedir=".">
    <description>
        place service 3rdparty
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
    <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy place in ${jee.server.nuxeo}">
    	<!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        <ant antfile="nuxeo-platform-cs-place/build.xml" target="deploy" inheritall="false"/>
        -->
    </target>

    <target name="undeploy"
    description="undeploy place from ${jee.server.nuxeo}">
    	<!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
    	leaving this only for backwards compatibility reasons. -->
        <ant antfile="nuxeo-platform-cs-place/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist"
    description="generate distribution for place" depends="package">
        <ant antfile="nuxeo-platform-cs-place/build.xml" target="dist" inheritall="false"/>
    </target>
    
    <target name="dist_installer"
    description="generate distribution for collectionobject" depends="package">
        <ant antfile="nuxeo-platform-cs-place/build.xml" target="dist_installer" inheritall="false"/>
    </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="nuxeo-platform-cs-place" default="package" basedir=".">
    <description>
        place nuxeo document type
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <!-- JAR files used by CollectionSpace 4.0 and later -->
    <property name="nuxeo.place.doctype.jars.all"
        value="collectionspace.place.doctype.*.jar"/>
    <property name="nuxeo.place.schema.jars.all"
        value="collectionspace.place.schema.*.jar"/>
    <!-- Legacy JAR files used by CollectionSpace 3.3 and earlier --> 
    <property name="nuxeo.place.legacy.jars.all"
        value="org.collectionspace.services.place.3rdparty.nuxeo-*.jar"/>
    <property name="nuxeo.place.legacy.jar"
        value="org.collectionspace.services.place.3rdparty.nuxeo-${cspace.release}.jar"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
        <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
        description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
        description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
        description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy place doctype in ${jee.server.nuxeo}">
        <!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        leaving this only for backwards compatibility reasons. -->  
        <copy file="${basedir}/target/${nuxeo.place.legacy.jar}"
            todir="${jee.deploy.nuxeo.plugins}"/>
    </target>

    <target name="undeploy"
        description="undeploy place doctype from ${jee.server.nuxeo}">
        <delete>
            <!-- Undeploy doctype and schema artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.place.doctype.jars.all}"/>
            </fileset>
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.place.schema.jars.all}"/>
            </fileset>
            <!-- Undeploy legacy artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.place.legacy.jars.all}"/>
            </fileset>
        </delete>
        <!-- Undeploy legacy artifacts from old deployment location through release 0.6 -->
        <delete quiet="true">
            <fileset dir="${jee.deploy.nuxeo.system}">
                <include name="${nuxeo.place.legacy.jars.all}"/>
            </fileset>
        </delete>
    </target>

    <target name="dist"
        description="generate distribution for place doctype" depends="package">
        <copy todir="${services.trunk}/${dist.deploy.nuxeo.plugins}">
            <fileset file="${basedir}/target/${nuxeo.place.legacy.jar}"/>
        </copy>
    </target>

    <target name="dist_installer"
    	description="Creates an installer distribution for place doctype" depends="package">
        <copy todir="${services.trunk}/${dist.installer.services}/place/nuxeo">
            <fileset file="${basedir}/target/${nuxeo.place.legacy.jar}"/>
        </copy>
    </target>

</project>

<project name="place" default="package" basedir=".">
    <description>
        Place Authority service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
        <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
  
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy place service">
        <ant antfile="3rdparty/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
        description="undeploy place service">
        <ant antfile="3rdparty/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist" depends="package"
        description="distribute place service">
        <ant antfile="3rdparty/build.xml" target="dist" inheritall="false"/>
    </target>

    <target name="dist_installer" depends="package"
        description="distribute place service">        
        <!-- copy install scripts, etc. -->
        <copy todir="${services.trunk}/${dist.installer.services}/place">
            <fileset dir="${basedir}/installer/"/>
        </copy>
        <ant antfile="3rdparty/build.xml" target="dist_installer" inheritall="false"/>
    </target>

</project>

<project name="place" default="package" basedir=".">
    <description>
        place service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>
    
    <target name="install" description="">
        <exec executable="echo">
        		<arg value="Installer: Executing place Service's &apos;install&apos; target." />
				</exec>
				<!-- Copy the Nuxeo DocType jar files to the Nuxeo app server domain -->
        <copy todir="${jee.deploy.nuxeo.plugins}">
            <fileset file="nuxeo/*.jar"/>
        </copy>				
    </target>    

    <target name="config" description="" depends="install">
        <exec executable="echo">
        		<arg value="Installer: Executing Place Service's &apos;config&apos; target." />
				</exec>
    </target>
    
    <target name="predeploy" description="" depends="config">
        <exec executable="echo">
        		<arg value="Installer: Executing Place Service's &apos;predeploy&apos; target." />
				</exec>
    </target>    
    
    <target name="deploy" description="">
        <exec executable="echo">
        		<arg value="Installer: Executing Place Service's &apos;deploy&apos; target." />
				</exec>
    </target>
    
    <target name="postdeploy">
        <exec executable="echo">
        		<arg value="Installer: Executing installer's &apos;postdeploy&apos; target for the Place Service." />
				</exec>		
        <exec executable="echo">
        		<arg value="Importing necessary placeauthorities." />
				</exec>				
        <java jar="./postdeploy/collectionspace-services-place-importer-jar-with-dependencies.jar"
        	fork="true"
        	failonerror="true">
				</java>	
    </target>
    

</project>

<project name="publicitem.3rdparty" default="package" basedir=".">
    <description>
        PublicItem service 3rdparty
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
    <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy publicitem in ${jee.server.nuxeo}">
        <ant antfile="nuxeo-platform-cs-publicitem/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
    description="undeploy publicitem from ${jee.server.nuxeo}">
        <ant antfile="nuxeo-platform-cs-publicitem/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist"
    description="generate distribution for publicitem" depends="package">
        <ant antfile="nuxeo-platform-cs-publicitem/build.xml" target="dist" inheritall="false"/>
    </target>


</project>

<project name="nuxeo-platform-cs-publicitem" default="package" basedir=".">
    <description>
        PublicItem's Nuxeo document type
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <property name="nuxeo.publicitem.jar"
        value="org.collectionspace.services.publicitem.3rdparty.nuxeo-${cspace.release}.jar"/>
    <property name="nuxeo.publicitem.jars.all"
        value="org.collectionspace.services.publicitem.3rdparty.nuxeo-*.jar"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
        <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
        description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
        description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
        description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy publicitem doctype in ${jee.server.nuxeo}">
        <copy file="${basedir}/target/${nuxeo.publicitem.jar}"
        todir="${jee.deploy.nuxeo.plugins}"/>
    </target>

    <target name="undeploy"
        description="undeploy publicitem doctype from ${jee.server.nuxeo}">
        <delete>
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.publicitem.jars.all}"/>
            </fileset>
        </delete>
    </target>

    <target name="dist"
        description="generate distribution for publicitem doctype" depends="package">
        <copy todir="${services.trunk}/${dist.deploy.nuxeo.plugins}">
            <fileset file="${basedir}/target/${nuxeo.publicitem.jar}"/>
        </copy>
    </target>

</project>


<project name="publicitem" default="package" basedir=".">
    <description>
        PublicItem service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
  
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>


    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy publicitem service">
        <ant antfile="3rdparty/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
    description="undeploy publicitem service">
        <ant antfile="3rdparty/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist" depends="package"
    description="distribute publicitem service">
        <ant antfile="3rdparty/build.xml" target="dist" inheritall="false"/>
    </target>

</project>

<project name="relation.3rdparty" default="package" basedir=".">
    <description>
        relation service 3rdparty
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
    <!-- Create the time stamp -->
        <tstamp/>

    </target>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy relation in ${jee.server.nuxeo}">
        <ant antfile="nuxeo-platform-cs-relation/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
    description="undeploy relation from ${jee.server.nuxeo}">
        <ant antfile="nuxeo-platform-cs-relation/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist"
    description="generate distribution for relation" depends="package">
        <ant antfile="nuxeo-platform-cs-relation/build.xml" target="dist" inheritall="false"/>
    </target>


</project>

<project name="nuxeo-platform-cs-relation" default="package" basedir=".">
    <description>
        relation nuxeo document type
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <property name="nuxeo.relation.jar"
        value="org.collectionspace.services.relation.3rdparty.nuxeo-${cspace.release}.jar"/>
    <property name="nuxeo.relation.jars.all"
        value="org.collectionspace.services.relation.3rdparty.nuxeo-*.jar"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
        <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
        description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
        description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
        description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy relation doctype in ${jee.server.cspace}">
        <copy file="${basedir}/target/${nuxeo.relation.jar}"
        todir="${jee.deploy.nuxeo.plugins}"/>
    </target>

    <target name="undeploy"
        description="undeploy relation doctype from ${jee.server.cspace}">
        <delete>
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.relation.jars.all}"/>
            </fileset>
        </delete>
    </target>

    <target name="dist"
        description="generate distribution for relation doctype" depends="package">
        <copy todir="${services.trunk}/${dist.deploy.nuxeo.plugins}">
            <fileset file="${basedir}/target/${nuxeo.relation.jar}"/>
        </copy>
    </target>

</project>

<project name="relation" default="package" basedir=".">
    <description>
        relationship service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
  
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>


    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy relation service">
        <ant antfile="3rdparty/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
    description="undeploy relation service">
        <ant antfile="3rdparty/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist"
    description="generate distribution for relation" depends="package">
        <ant antfile="3rdparty/build.xml" target="dist" inheritall="false"/>
    </target>


</project>
<project name="report.3rdparty" default="package" basedir=".">
    <description>
        report service 3rdparty
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
    <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <!-- Preserve the legacy name for this target -->
    <target name="deploy_jasper_samples" depends="deploy_report_files" />

    <target name="deploy_report_files" 
        description="Copy report files to ${jee.server.cspace}/cspace/reports">
        <copy todir="${jee.server.cspace}/cspace/reports" overwrite="true">
            <fileset dir="${basedir}/jasper-cs-report/src/main/resources"
                includes="*.jrxml"/>
        </copy>
    </target>

    <target name="deploy" depends="install"
        description="deploy report in ${jee.server.nuxeo}">
        <!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
            <ant antfile="nuxeo-platform-cs-report/build.xml" target="deploy" inheritall="false"/>
        -->
        <antcall target="deploy_report_files" />
    </target>

    <target name="undeploy"
    description="undeploy report from ${jee.server.nuxeo}">
    	<!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
    	leaving this only for backwards compatibility reasons. -->
        <ant antfile="nuxeo-platform-cs-report/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist"
    description="generate distribution for report" depends="package">
        <ant antfile="nuxeo-platform-cs-report/build.xml" target="dist" inheritall="false"/>
    </target>


</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="nuxeo-platform-cs-report" default="package" basedir=".">
    <description>
        report nuxeo document type
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <!-- JAR files used by CollectionSpace 4.0 and later -->
    <property name="nuxeo.report.doctype.jars.all"
        value="collectionspace.report.doctype.*.jar"/>
    <property name="nuxeo.report.schema.jars.all"
        value="collectionspace.report.schema.*.jar"/>
    <!-- Legacy JAR files used by CollectionSpace 3.3 and earlier --> 
    <property name="nuxeo.report.legacy.jars.all"
        value="org.collectionspace.services.report.3rdparty.nuxeo-*.jar"/>
    <property name="nuxeo.report.legacy.jar"
        value="org.collectionspace.services.report.3rdparty.nuxeo-${cspace.release}.jar"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
        <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
        description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
        description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
        description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy report doctype in ${jee.server.nuxeo}">
        <!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        leaving this only for backwards compatibility reasons. -->  
        <copy file="${basedir}/target/${nuxeo.report.legacy.jar}"
            todir="${jee.deploy.nuxeo.plugins}"/>
    </target>

    <target name="undeploy"
        description="undeploy report doctype from ${jee.server.nuxeo}">
        <delete>
            <!-- Undeploy doctype and schema artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.report.doctype.jars.all}"/>
            </fileset>
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.report.schema.jars.all}"/>
            </fileset>
            <!-- Undeploy legacy artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.report.legacy.jars.all}"/>
            </fileset>
        </delete>
        <!-- Undeploy legacy artifacts from old deployment location through release 0.6 -->
        <delete quiet="true">
            <fileset dir="${jee.deploy.nuxeo.system}">
                <include name="${nuxeo.report.legacy.jars.all}"/>
            </fileset>
        </delete>
    </target>

    <target name="dist"
        description="generate distribution for report doctype" depends="package">
        <copy todir="${services.trunk}/${dist.deploy.nuxeo.plugins}">
            <fileset file="${basedir}/target/${nuxeo.report.legacy.jar}"/>
        </copy>
    </target>

</project>


<project name="report" default="package" basedir=".">
    <description>
        report service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
  
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>


    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy report service">
        <ant antfile="3rdparty/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
    description="undeploy report service">
        <ant antfile="3rdparty/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist" depends="package"
    description="distribute report service">
        <ant antfile="3rdparty/build.xml" target="dist" inheritall="false"/>
    </target>

</project>

<project name="security" default="package" basedir=".">
    <description>
        security service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <property name="build" location="build"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
  
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>


    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>



    <target name="deploy" depends="install"
    description="deploy security service">
        
    </target>

    <target name="undeploy"
    description="undeploy security service">
        <
    </target>

    <target name="dist" depends="package"
    description="distribute security service}">

    </target>

</project>
<project name="security.client" default="package" basedir=".">
    <description>
        collectionspace security service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init">
    <!-- Create the time stamp -->
        <tstamp/>
    </target>


    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="setup_hibernate.cfg" description="replace property keywords in hibernate.cfg.xml">
        <property name="src.hibernate.cfg" value="${basedir}/src/test/resources/hibernate.cfg.xml"/>
        <property name="dest.hibernate.cfg" value="${basedir}/target/test-classes/hibernate.cfg.xml"/>
        <delete file="${dest.hibernate.cfg}" verbose="true" />
        <filter token="DB_CSPACE_URL" value="${db.jdbc.cspace.url}" />
        <filter token="DB_DRIVER_CLASS" value="${db.jdbc.driver.class}" />
        <filter token="DB_CSPACE_USER" value="${db.cspace.user}" />
        <filter token="DB_CSPACE_PASSWORD" value="${env.DB_CSPACE_PASSWORD}" /> <!-- double-sub from ${db.cspace.user.password} fails -->
        <filter token="DB_DIALECT" value="${db.dialect}" />
        <copy todir="${basedir}/target/test-classes" filtering="true">
            <fileset dir="${basedir}/src/test/resources">
                <include name="hibernate.cfg.xml" />
            </fileset>
        </copy>
    </target>

    <target name="deploy" depends="install"
    description="deploy security service in ${jee.server.cspace}">
        
    </target>

    <target name="undeploy"
    description="undeploy security service from ${jee.server.cspace}">
    </target>

    <target name="dist"
    description="generate distribution for security service" depends="package">
        
    </target>

</project>

<project name="servicegroup" default="package" basedir=".">
    <description>
        servicegroup service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
  
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>


    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install" description="deploy servicegroup service">
    </target>

    <target name="undeploy" description="undeploy servicegroup service">
    </target>

    <target name="dist" depends="package" description="distribute servicegroup service">
    </target>

</project>

<project name="taxonomy.3rdparty" default="package" basedir=".">
    <description>
        taxonomy service 3rdparty
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
    <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy taxonomy in ${jee.server.nuxeo}">
    	<!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        <ant antfile="nuxeo-platform-cs-taxonomy/build.xml" target="deploy" inheritall="false"/>
        -->
    </target>

    <target name="undeploy"
    description="undeploy taxonomy from ${jee.server.nuxeo}">
    	<!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
    	leaving this only for backwards compatibility reasons. -->
        <ant antfile="nuxeo-platform-cs-taxonomy/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist"
    description="generate distribution for taxonomy" depends="package">
        <ant antfile="nuxeo-platform-cs-taxonomy/build.xml" target="dist" inheritall="false"/>
    </target>
    
    <target name="dist_installer"
    description="generate distribution for taxonomy" depends="package">
        <ant antfile="nuxeo-platform-cs-taxonomy/build.xml" target="dist_installer" inheritall="false"/>
    </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="nuxeo-platform-cs-taxonomy" default="package" basedir=".">
    <description>
        taxonomy nuxeo document type
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <!-- JAR files used by CollectionSpace 4.0 and later -->
    <!-- Note: the names of these JAR files include the string 'taxon', while -->
    <!-- the names of the legacy JAR files, below, include the string 'taxonomy'. -->
    <property name="nuxeo.taxonomy.doctype.jars.all"
        value="collectionspace.taxon.doctype.*.jar"/>
    <property name="nuxeo.taxonomy.schema.jars.all"
        value="collectionspace.taxon.schema.*.jar"/>
    <!-- Legacy JAR files used by CollectionSpace 3.3 and earlier --> 
    <property name="nuxeo.taxonomy.legacy.jars.all"
        value="org.collectionspace.services.taxonomy.3rdparty.nuxeo-*.jar"/>
    <property name="nuxeo.taxonomy.legacy.jar"
        value="org.collectionspace.services.taxonomy.3rdparty.nuxeo-${cspace.release}.jar"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
        <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
        description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
        description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
        description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy taxonomy doctype in ${jee.server.nuxeo}">
        <!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        leaving this only for backwards compatibility reasons. -->  
        <copy file="${basedir}/target/${nuxeo.taxonomy.legacy.jar}"
            todir="${jee.deploy.nuxeo.plugins}"/>
    </target>

    <target name="undeploy"
        description="undeploy taxonomy doctype from ${jee.server.nuxeo}">
        <delete>
            <!-- Undeploy doctype and schema artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.taxonomy.doctype.jars.all}"/>
            </fileset>
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.taxonomy.schema.jars.all}"/>
            </fileset>
            <!-- Undeploy legacy artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.taxonomy.legacy.jars.all}"/>
            </fileset>
        </delete>
        <!-- Undeploy legacy artifacts from old deployment location through release 0.6 -->
        <delete quiet="true">
            <fileset dir="${jee.deploy.nuxeo.system}">
                <include name="${nuxeo.taxonomy.legacy.jars.all}"/>
            </fileset>
        </delete>
    </target>

    <target name="dist"
        description="generate distribution for taxonomy doctype" depends="package">
        <copy todir="${services.trunk}/${dist.deploy.nuxeo.plugins}">
            <fileset file="${basedir}/target/${nuxeo.taxonomy.legacy.jar}"/>
        </copy>
    </target>

    <target name="dist_installer"
    	description="Creates an installer distribution for taxonomy doctype" depends="package">
        <copy todir="${services.trunk}/${dist.installer.services}/taxonomy/nuxeo">
            <fileset file="${basedir}/target/${nuxeo.taxonomy.legacy.jar}"/>
        </copy>
    </target>

</project>

<project name="taxonomy" default="package" basedir=".">
    <description>
        Taxonomy Authority service
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
  
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy taxonomy service">
        <ant antfile="3rdparty/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
        description="undeploy taxonomy service">
        <ant antfile="3rdparty/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist" depends="package"
        description="distribute taxonomy service">
        <ant antfile="3rdparty/build.xml" target="dist" inheritall="false"/>
    </target>

    <target name="dist_installer" depends="package"
        description="distribute taxonomy service">        
        <!-- copy install scripts, etc. -->
        <copy todir="${services.trunk}/${dist.installer.services}/taxonomy">
            <fileset dir="${basedir}/installer/"/>
        </copy>
        <ant antfile="3rdparty/build.xml" target="dist_installer" inheritall="false"/>
    </target>

</project>

<project name="vocabulary.3rdparty" default="package" basedir=".">
    <description>
        vocabulary service 3rdparty
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
    <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy vocabulary in ${jee.server.nuxeo}">
    	<!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        <ant antfile="nuxeo-platform-cs-vocabulary/build.xml" target="deploy" inheritall="false"/>
        -->
    </target>

    <target name="undeploy"
    description="undeploy vocabulary from ${jee.server.nuxeo}">
    	<!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
    	leaving this only for backwards compatibility reasons. -->
        <ant antfile="nuxeo-platform-cs-vocabulary/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist"
    description="generate distribution for vocabulary" depends="package">
        <ant antfile="nuxeo-platform-cs-vocabulary/build.xml" target="dist" inheritall="false"/>
    </target>
    
    <target name="dist_installer"
    description="generate distribution for collectionobject" depends="package">
        <ant antfile="nuxeo-platform-cs-vocabulary/build.xml" target="dist_installer" inheritall="false"/>
    </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="nuxeo-platform-cs-vocabulary" default="package" basedir=".">
    <description>
        vocabulary nuxeo document type
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <!-- JAR files used by CollectionSpace 4.0 and later -->
    <!-- Note: the names of these JAR files include the string 'vocabularyitem', while -->
    <!-- the names of the legacy JAR files, below, include the string 'vocabulary'. -->
    <property name="nuxeo.vocabulary.doctype.jars.all"
        value="collectionspace.vocabularyitem.doctype.*.jar"/>
    <property name="nuxeo.vocabulary.schema.jars.all"
        value="collectionspace.vocabularyitem.schema.*.jar"/>
    <!-- Legacy JAR files used by CollectionSpace 3.3 and earlier --> 
    <property name="nuxeo.vocabulary.legacy.jars.all"
        value="org.collectionspace.services.vocabulary.3rdparty.nuxeo-*.jar"/>
    <property name="nuxeo.vocabulary.legacy.jar"
        value="org.collectionspace.services.vocabulary.3rdparty.nuxeo-${cspace.release}.jar"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
        <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
        description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
        description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
        description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy vocabulary doctype in ${jee.server.nuxeo}">
        <!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        leaving this only for backwards compatibility reasons. -->  
        <copy file="${basedir}/target/${nuxeo.vocabulary.legacy.jar}"
            todir="${jee.deploy.nuxeo.plugins}"/>
    </target>

    <target name="undeploy"
        description="undeploy vocabulary doctype from ${jee.server.nuxeo}">
        <delete>
            <!-- Undeploy doctype and schema artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.vocabulary.doctype.jars.all}"/>
            </fileset>
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.vocabulary.schema.jars.all}"/>
            </fileset>
            <!-- Undeploy legacy artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.vocabulary.legacy.jars.all}"/>
            </fileset>
        </delete>
        <!-- Undeploy legacy artifacts from old deployment location through release 0.6 -->
        <delete quiet="true">
            <fileset dir="${jee.deploy.nuxeo.system}">
                <include name="${nuxeo.vocabulary.legacy.jars.all}"/>
            </fileset>
        </delete>
    </target>

    <target name="dist"
        description="generate distribution for vocabulary doctype" depends="package">
        <copy todir="${services.trunk}/${dist.deploy.nuxeo.plugins}">
            <fileset file="${basedir}/target/${nuxeo.vocabulary.legacy.jar}"/>
        </copy>
    </target>

    <target name="dist_installer"
    	description="Creates an installer distribution for Vocabulary doctype" depends="package">
        <copy todir="${services.trunk}/${dist.installer.services}/vocabulary/nuxeo">
            <fileset file="${basedir}/target/${nuxeo.vocabulary.legacy.jar}"/>
        </copy>
    </target>

</project>


<project name="vocabulary" default="package" basedir=".">
    <description>
        vocabulary service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
        <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
  
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy vocabulary service">
        <ant antfile="3rdparty/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
        description="undeploy vocabulary service">
        <ant antfile="3rdparty/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist" depends="package"
        description="distribute vocabulary service">
        <ant antfile="3rdparty/build.xml" target="dist" inheritall="false"/>
    </target>

    <target name="dist_installer" depends="package"
        description="distribute vocabulary service">        
        <!-- copy install scripts, etc. -->
        <copy todir="${services.trunk}/${dist.installer.services}/vocabulary">
            <fileset dir="${basedir}/installer/"/>
        </copy>
        <ant antfile="3rdparty/build.xml" target="dist_installer" inheritall="false"/>
    </target>

</project>

<project name="vocabulary" default="package" basedir=".">
    <description>
        vocabulary service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>
    
    <target name="install" description="">
        <exec executable="echo">
        		<arg value="Installer: Executing Vocabulary Service's &apos;install&apos; target." />
				</exec>
				<!-- Copy the Nuxeo DocType jar files to the Nuxeo app server domain -->
        <copy todir="${jee.deploy.nuxeo.plugins}">
            <fileset file="nuxeo/*.jar"/>
        </copy>				
    </target>    

    <target name="config" description="" depends="install">
        <exec executable="echo">
        		<arg value="Installer: Executing Vocabulary Service's &apos;config&apos; target." />
				</exec>
    </target>
    
    <target name="predeploy" description="" depends="config">
        <exec executable="echo">
        		<arg value="Installer: Executing Vocabulary Service's &apos;predeploy&apos; target." />
				</exec>
    </target>    
    
    <target name="deploy" description="">
        <exec executable="echo">
        		<arg value="Installer: Executing Vocabulary Service's &apos;deploy&apos; target." />
				</exec>
    </target>
    
    <target name="postdeploy">
        <exec executable="echo">
        		<arg value="Installer: Executing installer's &apos;postdeploy&apos; target for the Vocabulary Service." />
				</exec>		
        <exec executable="echo">
        		<arg value="Importing necessary vocabularies." />
				</exec>				
        <java jar="./postdeploy/collectionspace-services-vocabulary-importer-jar-with-dependencies.jar"
        	fork="true"
        	failonerror="true">
				</java>	
    </target>
    

</project>

<project name="work.3rdparty" default="package" basedir=".">
    <description>
        work service 3rdparty
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
    <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy work in ${jee.server.nuxeo}">
        <!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool 
            <ant antfile="nuxeo-platform-cs-work/build.xml" target="deploy" inheritall="false"/>
        -->
    </target>

    <target name="undeploy"
    description="undeploy work from ${jee.server.nuxeo}">
        <!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
+      leaving this only for backwards compatibility reasons. --> 
        <ant antfile="nuxeo-platform-cs-work/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist"
    description="generate distribution for work" depends="package">
        <ant antfile="nuxeo-platform-cs-work/build.xml" target="dist" inheritall="false"/>
    </target>
    
    <target name="dist_installer"
    description="generate distribution for collectionobject" depends="package">
        <ant antfile="nuxeo-platform-cs-work/build.xml" target="dist_installer" inheritall="false"/>
    </target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="nuxeo-platform-cs-work" default="package" basedir=".">
    <description>
        work nuxeo document type
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <!-- JAR files used by CollectionSpace 4.0 and later -->
    <property name="nuxeo.work.doctype.jars.all"
        value="collectionspace.work.doctype.*.jar"/>
    <property name="nuxeo.work.schema.jars.all"
        value="collectionspace.work.schema.*.jar"/>
    <!-- Legacy JAR files used by CollectionSpace 3.3 and earlier --> 
    <property name="nuxeo.work.legacy.jars.all"
        value="org.collectionspace.services.work.3rdparty.nuxeo-*.jar"/>
    <property name="nuxeo.work.legacy.jar"
        value="org.collectionspace.services.work.3rdparty.nuxeo-${cspace.release}.jar"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
        <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
        description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
        description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
        description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy work doctype in ${jee.server.nuxeo}">
        <!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        leaving this only for backwards compatibility reasons. -->  
        <copy file="${basedir}/target/${nuxeo.work.legacy.jar}"
            todir="${jee.deploy.nuxeo.plugins}"/>
    </target>

    <target name="undeploy"
        description="undeploy work doctype from ${jee.server.nuxeo}">
        <delete>
            <!-- Undeploy doctype and schema artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.work.doctype.jars.all}"/>
            </fileset>
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.work.schema.jars.all}"/>
            </fileset>
            <!-- Undeploy legacy artifacts -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.work.legacy.jars.all}"/>
            </fileset>
        </delete>
        <!-- Undeploy legacy artifacts from old deployment location through release 0.6 -->
        <delete quiet="true">
            <fileset dir="${jee.deploy.nuxeo.system}">
                <include name="${nuxeo.work.legacy.jars.all}"/>
            </fileset>
        </delete>
    </target>

    <target name="dist"
        description="generate distribution for work doctype" depends="package">
        <copy todir="${services.trunk}/${dist.deploy.nuxeo.plugins}">
            <fileset file="${basedir}/target/${nuxeo.work.legacy.jar}"/>
        </copy>
    </target>

    <target name="dist_installer"
        description="Creates an installer distribution for work doctype" depends="package">
        <copy todir="${services.trunk}/${dist.installer.services}/work/nuxeo">
            <fileset file="${basedir}/target/${nuxeo.work.legacy.jar}"/>
        </copy>
    </target>

</project>

<project name="work" default="package" basedir=".">
    <description>
        Work Authority service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
        <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
  
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy work service">
        <ant antfile="3rdparty/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
        description="undeploy work service">
        <ant antfile="3rdparty/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist" depends="package"
        description="distribute work service">
        <ant antfile="3rdparty/build.xml" target="dist" inheritall="false"/>
    </target>

    <target name="dist_installer" depends="package"
        description="distribute work service">        
        <!-- copy install scripts, etc. -->
        <copy todir="${services.trunk}/${dist.installer.services}/work">
            <fileset dir="${basedir}/installer/"/>
        </copy>
        <ant antfile="3rdparty/build.xml" target="dist_installer" inheritall="false"/>
    </target>

</project>

<project name="work" default="package" basedir=".">
    <description>
        work service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>
    
    <target name="install" description="">
        <exec executable="echo">
                <arg value="Installer: Executing work Service's &apos;install&apos; target." />
                </exec>
                <!-- Copy the Nuxeo DocType jar files to the Nuxeo app server domain -->
        <copy todir="${jee.deploy.nuxeo.plugins}">
            <fileset file="nuxeo/*.jar"/>
        </copy>             
    </target>    

    <target name="config" description="" depends="install">
        <exec executable="echo">
                <arg value="Installer: Executing Work Service's &apos;config&apos; target." />
                </exec>
    </target>
    
    <target name="predeploy" description="" depends="config">
        <exec executable="echo">
                <arg value="Installer: Executing Work Service's &apos;predeploy&apos; target." />
                </exec>
    </target>    
    
    <target name="deploy" description="">
        <exec executable="echo">
                <arg value="Installer: Executing Work Service's &apos;deploy&apos; target." />
                </exec>
    </target>
    
    <target name="postdeploy">
        <exec executable="echo">
                <arg value="Installer: Executing installer's &apos;postdeploy&apos; target for the Work Service." />
                </exec>     
        <exec executable="echo">
                <arg value="Importing necessary workauthorities." />
                </exec>             
        <java jar="./postdeploy/collectionspace-services-work-importer-jar-with-dependencies.jar"
            fork="true"
            failonerror="true">
                </java> 
    </target>
    

</project>

<project name="workflow.3rdparty" default="package" basedir=".">
    <description>
        workflow service 3rdparty
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
    <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
    description="deploy workflow in ${jee.server.nuxeo}">
        <ant antfile="nuxeo-platform-cs-workflow/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
    description="undeploy workflow from ${jee.server.nuxeo}">
        <ant antfile="nuxeo-platform-cs-workflow/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist"
    description="generate distribution for workflow" depends="package">
        <ant antfile="nuxeo-platform-cs-workflow/build.xml" target="dist" inheritall="false"/>
    </target>


</project>

<project name="nuxeo-platform-cs-workflow" default="package" basedir=".">
    <description>
        workflow nuxeo document type
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <property name="nuxeo.workflow.jar"
        value="org.collectionspace.services.workflow.3rdparty.nuxeo-${cspace.release}.jar"/>
    <property name="nuxeo.workflow.jars.all"
        value="org.collectionspace.services.workflow.3rdparty.nuxeo-*.jar"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
        <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
        description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
        description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
        description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy workflow doctype in ${jee.server.nuxeo}">
        <copy file="${basedir}/target/${nuxeo.workflow.jar}"
        todir="${jee.deploy.nuxeo.plugins}"/>
    </target>

    <target name="undeploy"
        description="undeploy workflow doctype from ${jee.server.nuxeo}">
        <delete>
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.workflow.jars.all}"/>
            </fileset>
        </delete>
    </target>


    <target name="dist"
        description="generate distribution for workflow doctype" depends="package">
        <copy todir="${services.trunk}/${dist.deploy.nuxeo.plugins}">
            <fileset file="${basedir}/target/${nuxeo.workflow.jar}"/>
        </copy>
    </target>

</project>


<project name="workflow" default="package" basedir=".">
    <description>
        workflow service
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
  
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>


    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy workflow">
        <ant antfile="3rdparty/build.xml" target="deploy" inheritall="false"/>
    </target>

    <target name="undeploy"
        description="undeploy workflow service">
        <ant antfile="3rdparty/build.xml" target="undeploy" inheritall="false"/>
    </target>

    <target name="dist" depends="package"
        description="distribute workflow service">
        <ant antfile="3rdparty/build.xml" target="dist" inheritall="false"/>
    </target>
</project>
