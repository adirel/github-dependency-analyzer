<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.sonatype.oss</groupId>
        <artifactId>oss-parent</artifactId>
        <version>7</version>
    </parent>
    <groupId>com.thinkaurelius.titan</groupId>
    <artifactId>titan</artifactId>
    <version>0.4.3-SNAPSHOT</version>
    <packaging>pom</packaging>
    <prerequisites>
        <maven>2.2.1</maven>
    </prerequisites>
    <name>Titan: Distributed Graph Database</name>
    <url>http://thinkaurelius.github.com/titan/</url>

    <description>
        Titan is a distributed graph database optimized for processing massive-scale graphs represented over a machine
        cluster.
        Titan separates the concerns of graph processing and manipulation from storing the graph on disk,
        delegating that concern to an extensible set of persistence solutions.
    </description>
    <developers>
        <developer>
            <name>Matthias Broecheler</name>
            <email>me@matthiasb.com</email>
            <url>http://matthiasb.com</url>
        </developer>
        <developer>
            <name>Daniel LaRocque</name>
            <email>dalaro@hopcount.org</email>
        </developer>
        <developer>
            <name>Pavel Yaskevich</name>
            <email>povel.y@gmail.com</email>
            <url>http://github.com/xedin</url>
        </developer>
    </developers>
    <contributors>
        <contributor>
            <name>Marko A. Rodriguez</name>
            <email>marko@markorodriguez.com</email>
            <url>http://markorodriguez.com</url>
        </contributor>
    </contributors>
    <inceptionYear>2012</inceptionYear>
    <licenses>
        <license>
            <name>The Apache Software License, Version 2.0</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
        </license>
    </licenses>
    <scm>
        <connection>scm:git:git@github.com:thinkaurelius/titan.git</connection>
        <developerConnection>scm:git:git@github.com:thinkaurelius/titan.git</developerConnection>
        <url>git@github.com:thinkaurelius/titan.git</url>
        <tag>HEAD</tag>
    </scm>
    <properties>
        <titan.compatible.versions>0.4.0,0.4.1</titan.compatible.versions>
        <tinkerpop.version>2.4.0</tinkerpop.version>
        <junit.version>4.11</junit.version>
        <cassandra.version>1.2.2</cassandra.version>
        <metrics2.version>2.1.2</metrics2.version>
        <metrics3.version>3.0.1</metrics3.version>
        <slf4j.version>1.7.5</slf4j.version>
        <jackson1.version>1.9.2</jackson1.version>
        <jackson2.version>2.1.2</jackson2.version>
        <commons.beanutils.version>1.7.0</commons.beanutils.version>
        <asm3.version>3.1</asm3.version>
        <asm4.version>4.0</asm4.version>
        <jersey.version>1.17</jersey.version>
        <jna.version>3.2.7</jna.version>
        <kuali.s3.wagon.version>1.1.20</kuali.s3.wagon.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <titan.testdir>${project.build.directory}/titan-test</titan.testdir>
        <gpg.skip>false</gpg.skip>
        <perf.jvm.opts />
        <default.test.jvm.opts>-Xms256m -Xmx768m -XX:+HeapDumpOnOutOfMemoryError -ea ${test.extra.jvm.opts}</default.test.jvm.opts>
        <mem.jvm.opts>-Xms256m -Xmx256m -ea -XX:+HeapDumpOnOutOfMemoryError ${test.extra.jvm.opts}</mem.jvm.opts>
        <test.extra.jvm.opts />
        <test.skip.default>false</test.skip.default>
        <top.level.basedir>${basedir}</top.level.basedir>
        <compiler.source>1.6</compiler.source>
        <compiler.target>1.7</compiler.target>
        <compiler.args />
    </properties>
    <modules>
        <module>titan-core</module>
        <module>titan-test</module>
        <module>titan-berkeleyje</module>
        <module>titan-cassandra</module>
        <module>titan-hbase</module>
        <module>titan-es</module>
        <module>titan-lucene</module>
        <module>titan-persistit</module>
        <module>titan-rexster</module>
        <module>titan-all</module>
        <module>titan-site</module>
        <module>titan-dist</module>
    </modules>
    <build>
        <directory>${basedir}/target</directory>
        <plugins>
            <plugin>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>1.3.1</version>
                <executions>
                    <execution>
                        <id>enforce-dependency-convergence</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <DependencyConvergence />
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-release-plugin</artifactId>
                <configuration>
                    <!--
                      Only release:perform uses this configuration
                      setting; release:prepare doesn't care and always
                      runs "clean verify"
                    -->
                    <goals>javadoc:aggregate deploy</goals>

                    <!--
                      Tell the release plugin to never "git push".
                      When releasing, you have to manually issue "git
                      push" between release:prepare and
                      release:perform.  You'll have to push both the
                      branch you're releasing and the tag
                      release:prepare locally created.
                    -->
                    <pushChanges>false</pushChanges>

                    <!--
                      @{...} is a special variable interpolation
                      syntax that uses the target release version
                      instead of the pom's actual version, which is
                      usually a -SNAPSHOT version when this setting
                      gets evaluated.
                    -->
                    <tagNameFormat>@{project.version}</tagNameFormat>

                    <!--
                      The release:perform goal activates these
                      profiles when it invokes maven with the <goals>
                      listed above.  Release engineering specific to
                      release:perform and disabled during non-release
                      operation should be encapsulated with the
                      profile id listed below.
                    -->
                    <releaseProfiles>aurelius-release</releaseProfiles>

                    <!-- Keep all submodules at same version as parent -->
                    <autoVersionSubmodules>true</autoVersionSubmodules>

                    <!-- applies to both release:prepare and :perform -->
                    <arguments>-DskipTests=true -P!release-plugin-hack</arguments>
                </configuration>
            </plugin>

        </plugins>
        <pluginManagement>
            <plugins>
                <plugin>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>2.5.1</version>
                    <configuration>
                        <source>${compiler.source}</source>
                        <target>${compiler.target}</target>
                        <compilerArgument>${compiler.args}</compilerArgument>
                    </configuration>
                </plugin>
                <plugin>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>2.15</version>
                    <configuration>
                        <argLine>${default.test.jvm.opts}</argLine>
                        <runOrder>alphabetical</runOrder>
                        <failIfNoTests>false</failIfNoTests>
                        <excludes>
                            <exclude>**/External*.java</exclude>
                            <exclude>**/*PerformanceTest.java</exclude>
                            <exclude>**/*ConcurrentTest.java</exclude>
                        </excludes>
                        <excludedGroups>
                            com.thinkaurelius.titan.testcategory.MemoryTests,com.thinkaurelius.titan.testcategory.PerformanceTests
                        </excludedGroups>
                        <skip>${test.skip.default}</skip>
                    </configuration>
                </plugin>
                <plugin>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>2.15</version>
                </plugin>
                <plugin>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>3.3</version>
                    <executions>
                        <execution>
                            <id>default-site</id>
                            <phase>none</phase>
                        </execution>
                        <execution>
                            <id>default-deploy</id>
                            <phase>none</phase>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <artifactId>maven-scm-plugin</artifactId>
                    <version>1.9</version>
                </plugin>
                <plugin>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>2.7</version>
                </plugin>
                <plugin>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>2.4</version>
                </plugin>
                <plugin>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>2.6</version>
                </plugin>
                <plugin>
                    <artifactId>maven-release-plugin</artifactId>
                    <version>2.4.1</version>
                </plugin>
                <plugin>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>2.9.1</version>
                </plugin>
                <plugin>
                    <artifactId>maven-assembly-plugin</artifactId>
                    <version>2.4</version>
                </plugin>
                <plugin>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>2.4</version>
                </plugin>
                <plugin>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>2.2.1</version>
                </plugin>
                <plugin>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>2.5</version>
                </plugin>
                <plugin>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>2.8</version>
                </plugin>
                <plugin>
                    <artifactId>maven-gpg-plugin</artifactId>
                    <version>1.4</version>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>properties-maven-plugin</artifactId>
                    <version>1.0-alpha-2</version>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>sonar-maven-plugin</artifactId>
                    <version>2.1</version>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>wagon-maven-plugin</artifactId>
                    <version>1.0-beta-4</version>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <version>1.2.1</version>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>xml-maven-plugin</artifactId>
                    <version>1.0</version>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>cobertura-maven-plugin</artifactId>
                    <version>2.5.2</version>
                    <configuration>
                        <aggregate>true</aggregate>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>com.github.github</groupId>
                    <artifactId>site-maven-plugin</artifactId>
                    <version>0.8</version>
                    <configuration>
                        <!--
                          To push changes to gh-pages during
                          release:perform using this plugin, your
                          ~/.m2/settings.xml file must contain a
                          <server> stanza that matches the
                          <server>github</server> tag below.  Here's
                          an example settings.xml:

                          <settings>
                            ...
                            <servers>
                              ...
                              <server>
                                <id>github</id> << must match <username>dalaro</username>
                                <password>allmypasswordsareliterallypassword</password>
                              </server>
                            </servers>
                          </settings>
                        -->
                        <server>github</server>
                        <repositoryName>titan</repositoryName>
                        <repositoryOwner>thinkaurelius</repositoryOwner>
                    </configuration>
                </plugin>
                <plugin>
                    <artifactId>maven-antrun-plugin</artifactId>
                    <version>1.7</version>
                </plugin>
                <plugin>
                    <groupId>org.jacoco</groupId>
                    <artifactId>jacoco-maven-plugin</artifactId>
                    <version>0.6.3.201306030806</version>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
    <dependencyManagement>
        <dependencies>
            <!-- Jackson 2.x -->
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-core</artifactId>
                <version>${jackson2.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>${jackson2.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-datatype-json-org</artifactId>
                <version>${jackson2.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-annotations</artifactId>
                <version>${jackson2.version}</version>
            </dependency>
            <!-- Jackson 1.x -->
            <dependency>
                <groupId>org.codehaus.jackson</groupId>
                <artifactId>jackson-mapper-asl</artifactId>
                <version>${jackson1.version}</version>
            </dependency>
            <dependency>
                <groupId>org.codehaus.jackson</groupId>
                <artifactId>jackson-core-asl</artifactId>
                <version>${jackson1.version}</version>
            </dependency>
            <dependency>
                <groupId>org.codehaus.jackson</groupId>
                <artifactId>jackson-xc</artifactId>
                <version>${jackson1.version}</version>
            </dependency>
            <dependency>
                <groupId>org.codehaus.jackson</groupId>
                <artifactId>jackson-jaxrs</artifactId>
                <version>${jackson1.version}</version>
            </dependency>
            <dependency>
                <groupId>commons-collections</groupId>
                <artifactId>commons-collections</artifactId>
                <version>3.2.1</version>
            </dependency>
            <dependency>
                <groupId>commons-beanutils</groupId>
                <artifactId>commons-beanutils</artifactId>
                <version>${commons.beanutils.version}</version>
            </dependency>
            <dependency>
                <groupId>commons-beanutils</groupId>
                <artifactId>commons-beanutils-core</artifactId>
                <version>${commons.beanutils.version}</version>
            </dependency>
            <dependency>
                <groupId>commons-logging</groupId>
                <artifactId>commons-logging</artifactId>
                <version>1.1.1</version>
            </dependency>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-math</artifactId>
                <version>2.2</version>
            </dependency>
            <dependency>
                <groupId>org.apache.avro</groupId>
                <artifactId>avro</artifactId>
                <version>1.4.1</version>
            </dependency>
            <dependency>
                <artifactId>jboss-logging</artifactId>
                <groupId>org.jboss.logging</groupId>
                <version>3.1.2.GA</version>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>${slf4j.version}</version>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-log4j12</artifactId>
                <version>${slf4j.version}</version>
            </dependency>
            <dependency>
                <groupId>log4j</groupId>
                <artifactId>log4j</artifactId>
                <version>1.2.16</version>
            </dependency>
            <dependency>
                <groupId>org.codehaus.jettison</groupId>
                <artifactId>jettison</artifactId>
                <version>1.3.3</version>
            </dependency>
            <dependency>
                <groupId>org.mortbay.jetty</groupId>
                <artifactId>jetty</artifactId>
                <version>6.1.26</version>
            </dependency>
            <!-- asm 3.x -->
            <dependency>
                <groupId>asm</groupId>
                <artifactId>asm</artifactId>
                <version>${asm3.version}</version>
            </dependency>
            <dependency>
                <groupId>asm</groupId>
                <artifactId>asm-all</artifactId>
                <version>${asm3.version}</version>
            </dependency>
            <dependency>
                <groupId>asm</groupId>
                <artifactId>asm-analysis</artifactId>
                <version>${asm3.version}</version>
            </dependency>
            <dependency>
                <groupId>asm</groupId>
                <artifactId>asm-commons</artifactId>
                <version>${asm3.version}</version>
            </dependency>
            <dependency>
                <groupId>asm</groupId>
                <artifactId>asm-debug-all</artifactId>
                <version>${asm3.version}</version>
            </dependency>
            <dependency>
                <groupId>asm</groupId>
                <artifactId>asm-parent</artifactId>
                <version>${asm3.version}</version>
            </dependency>
            <dependency>
                <groupId>asm</groupId>
                <artifactId>asm-tree</artifactId>
                <version>${asm3.version}</version>
            </dependency>
            <dependency>
                <groupId>asm</groupId>
                <artifactId>asm-util</artifactId>
                <version>${asm3.version}</version>
            </dependency>
            <dependency>
                <groupId>asm</groupId>
                <artifactId>asm-xml</artifactId>
                <version>${asm3.version}</version>
            </dependency>
            <!-- asm 4.x; only used by kryo-shaded right now
            <dependency>
                <groupId>org.ow2.asm</groupId>
                <artifactId>asm</artifactId>
                <version>${asm4.version}</version>
            </dependency>
            <dependency>
                <groupId>org.ow2.asm</groupId>
                <artifactId>asm-analysis</artifactId>
                <version>${asm4.version}</version>
            </dependency>
            <dependency>
                <groupId>org.ow2.asm</groupId>
                <artifactId>asm-commons</artifactId>
                <version>${asm4.version}</version>
            </dependency>
            <dependency>
                <groupId>org.ow2.asm</groupId>
                <artifactId>asm-tree</artifactId>
                <version>${asm4.version}</version>
            </dependency>
            <dependency>
                <groupId>org.ow2.asm</groupId>
                <artifactId>asm-util</artifactId>
                <version>${asm4.version}</version>
            </dependency>
            -->
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.11</version>
            </dependency>
            <dependency>
                <groupId>jline</groupId>
                <artifactId>jline</artifactId>
                <version>1.0</version>
            </dependency>
            <!-- Force newer Snappy-java because 1.4.0.1 is broken on Mac OS X with JDK 7 -->
            <dependency>
                <groupId>org.xerial.snappy</groupId>
                <artifactId>snappy-java</artifactId>
                <version>1.0.5-M3</version>
            </dependency>
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>14.0.1</version>
            </dependency>
            <dependency>
                <groupId>commons-lang</groupId>
                <artifactId>commons-lang</artifactId>
                <version>2.5</version>
            </dependency>
            <dependency>
                <groupId>commons-codec</groupId>
                <artifactId>commons-codec</artifactId>
                <version>1.7</version>
            </dependency>
            <dependency>
                <groupId>commons-cli</groupId>
                <artifactId>commons-cli</artifactId>
                <version>1.2</version>
            </dependency>
            <dependency>
                <groupId>org.jboss.netty</groupId>
                <artifactId>netty</artifactId>
                <version>3.2.7.Final</version>
            </dependency>
            <!-- Package prefix is org.apache.commons.httpclient -->
            <dependency>
                <groupId>commons-httpclient</groupId>
                <artifactId>commons-httpclient</artifactId>
                <version>3.1</version>
            </dependency>
            <!-- Package prefix is org.apache.http -->
            <!--
            <dependency>
                <groupId>org.apache.httpcomponents</groupId>
                <artifactId>httpclient</artifactId>
                <version>4.0.1</version>
            </dependency>
            <dependency>
                <groupId>org.apache.httpcomponents</groupId>
                <artifactId>httpcore</artifactId>
                <version>4.0.1</version>
            </dependency>
            -->
            <dependency>
                <groupId>com.sun.jersey</groupId>
                <artifactId>jersey-json</artifactId>
                <version>${jersey.version}</version>
            </dependency>
            <dependency>
                <groupId>com.sun.jersey</groupId>
                <artifactId>jersey-server</artifactId>
                <version>${jersey.version}</version>
            </dependency>
            <dependency>
                <groupId>com.sun.jersey</groupId>
                <artifactId>jersey-core</artifactId>
                <version>${jersey.version}</version>
            </dependency>
            <dependency>
                <groupId>javax.xml.bind</groupId>
                <artifactId>jaxb-api</artifactId>
                <version>2.2.2</version>
            </dependency>
            <dependency>
                <groupId>commons-io</groupId>
                <artifactId>commons-io</artifactId>
                <version>2.1</version>
            </dependency>
            <dependency>
                <groupId>org.jacoco</groupId>
                <artifactId>org.jacoco.ant</artifactId>
                <version>0.6.2.201302030002</version>
            </dependency>
            <dependency>
                <groupId>com.yammer.metrics</groupId>
                <artifactId>metrics-core</artifactId>
                <version>${metrics2.version}</version>
            </dependency>
            <dependency>
                <groupId>com.codahale.metrics</groupId>
                <artifactId>metrics-core</artifactId>
                <version>${metrics3.version}</version>
            </dependency>
            <dependency>
                <groupId>com.codahale.metrics</groupId>
                <artifactId>metrics-ganglia</artifactId>
                <version>${metrics3.version}</version>
            </dependency>
            <dependency>
                <groupId>com.codahale.metrics</groupId>
                <artifactId>metrics-graphite</artifactId>
                <version>${metrics3.version}</version>
            </dependency>
            <dependency>
                <groupId>com.github.stephenc.high-scale-lib</groupId>
                <artifactId>high-scale-lib</artifactId>
                <version>1.1.2</version>
            </dependency>
            <dependency>
                <groupId>org.apache.thrift</groupId>
                <artifactId>libthrift</artifactId>
                <version>0.7.0</version>
            </dependency>
            <dependency>
                <groupId>org.apache.cassandra</groupId>
                <artifactId>cassandra-all</artifactId>
                <version>${cassandra.version}</version>
                <!-- Using avro-ipc 1.5.3 caused the following when opening the graphdb:
                     java.lang.NoSuchMethodError: org.apache.avro.io.DecoderFactory.configureDirectDecoder(Z)Lorg/apache/avro/io/DecoderFactory
    
                     Stock avro 1.4.0 or 1.4.1 might work, but I'd like to see
                     what customizations were made in the cassandra copy of avro
                     before trying to drop it for the stock artifact...
                <exclusions>
                    <exclusion>
                        <groupId>org.apache.cassandra.deps</groupId>
                        <artifactId>avro</artifactId>
                    </exclusion>
                </exclusions>
                -->
            </dependency>
            <dependency>
                <groupId>org.apache.cassandra</groupId>
                <artifactId>cassandra-thrift</artifactId>
                <version>${cassandra.version}</version>
            </dependency>
            <dependency>
                <groupId>org.javassist</groupId>
                <artifactId>javassist</artifactId>
                <version>3.18.0-GA</version>
            </dependency>
            <dependency>
                <groupId>com.carrotsearch</groupId>
                <artifactId>junit-benchmarks</artifactId>
                <version>0.7.0</version>
            </dependency>
            <dependency>
                <groupId>com.carrotsearch.randomizedtesting</groupId>
                <artifactId>randomizedtesting-runner</artifactId>
                <version>2.0.8</version>
            </dependency>
            <dependency>
                <groupId>com.google.protobuf</groupId>
                <artifactId>protobuf-java</artifactId>
                <version>2.5.0</version>
            </dependency>
            <dependency>
                <groupId>org.apache.velocity</groupId>
                <artifactId>velocity</artifactId>
                <version>1.7</version>
            </dependency>
            <dependency>
                <groupId>org.apache.ant</groupId>
                <artifactId>ant</artifactId>
                <version>1.8.3</version>
            </dependency>
            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>servlet-api</artifactId>
                <version>2.5</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- Logging -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
    </dependencies>

    <profiles>
        <profile>
            <id>sonatype-oss-release</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                        <version>2.1.2</version>
                        <executions>
                            <execution>
                                <id>attach-sources</id>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                        <version>2.7</version>
                        <executions>
                            <execution>
                                <id>attach-javadocs</id>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <artifactId>maven-gpg-plugin</artifactId>
                        <version>1.1</version>
                        <executions>
                            <execution>
                                <id>sign-artifacts</id>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>aurelius-release</id>
            <!--
              Sign artifacts artifacts only during release:perform
              when this profile is automatically activated or whenever
              else it is manually activated.
    
              Stolen from: http://blog.sonatype.com/people/2010/01/how-to-generate-pgp-signatures-with-maven/
            -->
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>attach-sources</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>jar-no-fork</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <artifactId>maven-javadoc-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>attach-javadocs</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>jar</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <artifactId>maven-gpg-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>sign-artifacts</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>sign</goal>
                                </goals>
                                <configuration>
                                    <useAgent>true</useAgent>
                                    <skip>${gpg.skip}</skip>
                                    <excludes>
                                        <exclude>*.asc</exclude>
                                    </excludes>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>sonar-upload</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <sonar.jacoco.reportPath>../target/jacoco-combined.exec</sonar.jacoco.reportPath>
                <sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
            </properties>
            <build>
                <plugins>
                    <!-- This binds no goals by default.  The user has to run the sonar:sonar goal for this plugin to do anything. -->
                    <plugin>
                        <groupId>org.codehaus.sonar</groupId>
                        <artifactId>sonar-maven-plugin</artifactId>
                        <version>3.7</version>
                        <inherited>false</inherited>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>coverage</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>

            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>default-test</id>
                                <configuration>
                                    <argLine>${default.test.jvm.opts} ${jacoco.opts}</argLine>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <artifactId>maven-resources-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>copy-sources-for-jacoco</id>
                                <phase>process-resources</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${project.build.directory}/jacoco-sources</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>${project.basedir}/src/main/java/</directory>
                                            <filtering>false</filtering>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                            <execution>
                                <id>copy-classes-for-jacoco</id>
                                <phase>process-classes</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${project.build.directory}/jacoco-classes</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>${project.build.directory}/classes/</directory>
                                            <filtering>false</filtering>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <!-- Unpack all dependency class and source files for use by JaCoCo -->
                            <execution>
                                <id>unpack-dependency-sources</id>
                                <phase>generate-resources</phase>
                                <goals>
                                    <goal>unpack-dependencies</goal>
                                </goals>
                                <configuration>
                                    <classifier>sources</classifier>
                                    <outputDirectory>${project.build.directory}/jacoco-sources</outputDirectory>
                                    <includeGroupIds>${project.groupId}</includeGroupIds>
                                    <excludeArtifactIds>titan-test</excludeArtifactIds>
                                </configuration>
                            </execution>
                            <execution>
                                <id>unpack-dependency-classes</id>
                                <phase>generate-resources</phase>
                                <goals>
                                    <goal>unpack-dependencies</goal>
                                </goals>
                                <configuration>
                                    <classifier />
                                    <!-- empty classifier requests the artifact containing classes -->
                                    <outputDirectory>${project.build.directory}/jacoco-classes</outputDirectory>
                                    <includeGroupIds>${project.groupId}</includeGroupIds>
                                    <excludeArtifactIds>titan-test</excludeArtifactIds>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.jacoco</groupId>
                        <artifactId>jacoco-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>prepare-jacoco-agent</id>
                                <phase>test-compile</phase>
                                <goals>
                                    <goal>prepare-agent</goal>
                                </goals>
                                <configuration>
                                    <destFile>../target/jacoco-combined.exec</destFile>
                                    <append>true</append>
                                    <propertyName>jacoco.opts</propertyName>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <!-- The Maven JaCoCo plugin doesn't allow
                             configuration of sourcefiles and destfiles
                             directories.  The Ant JaCoCo task does.  That's
                             why we use antrun here for JaCoCo instead of
                             JaCoCo's Maven plugin. -->
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>default-cli</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <taskdef name="report" classname="org.jacoco.ant.ReportTask" classpathref="maven.plugin.classpath" />
                                        <report>
                                            <executiondata>
                                                <file file="../target/jacoco-combined.exec" />
                                            </executiondata>
                                            <structure name="Integration test coverage">
                                                <classfiles>
                                                    <fileset dir="${project.build.directory}/jacoco-classes" />
                                                    u
                                                </classfiles>
                                                <sourcefiles encoding="UTF-8">
                                                    <fileset dir="${project.build.directory}/jacoco-sources" />
                                                </sourcefiles>
                                            </structure>
                                            <html destdir="${project.build.directory}/jacoco-report" />
                                        </report>
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                        <dependencies>
                            <dependency>
                                <groupId>org.jacoco</groupId>
                                <artifactId>org.jacoco.ant</artifactId>
                                <version>0.6.2.201302030002</version>
                            </dependency>
                        </dependencies>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>memory-test</id>
            <activation>
                <property>
                    <name>test.skip.mem</name>
                    <value>false</value>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>memory-test</id>
                                <goals>
                                    <goal>test</goal>
                                </goals>
                                <phase>test</phase>
                                <configuration combine.self="override">
                                    <argLine>${mem.jvm.opts}</argLine>
                                    <reuseForks>false</reuseForks>
                                    <forkCount>1</forkCount>
                                    <parallel>none</parallel>
                                    <threadCount>1</threadCount>
                                    <perCoreThreadCount>false</perCoreThreadCount>
                                    <runOrder>alphabetical</runOrder>
                                    <groups>com.thinkaurelius.titan.testcategory.MemoryTests</groups>
                                    <excludedGroups />
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>performance-test</id>
            <activation>
                <property>
                    <name>test.skip.perf</name>
                    <value>false</value>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>performance-test</id>
                                <goals>
                                    <goal>test</goal>
                                </goals>
                                <phase>test</phase>
                                <configuration combine.self="override">
                                    <argLine>${default.test.jvm.opts} ${perf.jvm.opts}</argLine>
                                    <reuseForks>false</reuseForks>
                                    <forkCount>1</forkCount>
                                    <parallel>none</parallel>
                                    <threadCount>1</threadCount>
                                    <perCoreThreadCount>false</perCoreThreadCount>
                                    <runOrder>alphabetical</runOrder>
                                    <groups>com.thinkaurelius.titan.testcategory.PerformanceTests</groups>
                                    <excludedGroups />
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>comprehensive-test</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <argLine>-Xms256m -Xmx1024m -ea</argLine>
                            <includes>
                                <include>**/*Test.java</include>
                            </includes>
                            <excludes>
                                <exclude>**/Internal*.java</exclude>
                                <exclude>**/*Suite.java</exclude>
                            </excludes>
                            <forkMode>always</forkMode>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>release-plugin-hack</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <modules>
                <module>titan-dist/titan-dist-parent</module>
            </modules>
        </profile>
        
        
        <profile>
            <id>target-jre6</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>xml-maven-plugin</artifactId>
                        <configuration>
                            <forceCreation>true</forceCreation>
                            <transformationSets>
                                <transformationSet>
                                    <dir>${basedir}</dir>
                                    <includes>
                                        <include>pom.xml</include>
                                    </includes>
                                    <stylesheet>${top.level.basedir}/jre6.xslt</stylesheet>
                                </transformationSet>
                            </transformationSets>
                        </configuration>
                        <dependencies>
                            <dependency>
                                <groupId>net.sourceforge.saxon</groupId>
                                <artifactId>saxon</artifactId>
                                <version>9.1.0.8</version>
                            </dependency>
                        </dependencies>
                    </plugin>
                    <plugin>
                        <artifactId>maven-resources-plugin</artifactId>
                        <configuration>
                            <outputDirectory>${basedir}</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${basedir}/target/generated-resources/xml/xslt/</directory>
                                    <includes>
                                        <include>pom.xml</include>
                                    </includes>
                                </resource>
                            </resources>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.thinkaurelius.titan</groupId>
        <artifactId>titan</artifactId>
        <version>0.4.3-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <artifactId>titan-all</artifactId>
    <name>Titan-All: Complete Titan Distribution</name>
    <url>http://thinkaurelius.github.com/titan/</url>

    <!--
      This project depends on the rest of Titan, so Maven users and
      users of tools that can parse Maven pom.xml dependencies can
      depend on this artifact and have the rest of the Titan artifacts
      pulled in automatically.  The JAR doesn't contain anything
      besides some redundant properties files.
    -->

    <properties>
        <top.level.basedir>${basedir}/..</top.level.basedir>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-core</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-cassandra</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-berkeleyje</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-hbase</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-es</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-lucene</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-persistit</artifactId>
            <version>${project.version}</version>
        </dependency>
    </dependencies>

    <build>
        <directory>${basedir}/target</directory>
        <resources>
            <resource>
                <directory>${basedir}/src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>

        <plugins>
            <!-- Disable unused plugins -->
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>default-testResources</id>
                        <phase>none</phase>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <executions>
                    <execution>
                        <id>default-test</id>
                        <phase>none</phase>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <executions>
                    <execution>
                        <id>default-compile</id>
                        <phase>none</phase>
                    </execution>
                    <execution>
                        <id>default-testCompile</id>
                        <phase>none</phase>
                    </execution>
                </executions>
            </plugin>
            <!-- Done disabling unnecessary plugins -->
        </plugins>
    </build>
</project>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.thinkaurelius.titan</groupId>
        <artifactId>titan</artifactId>
        <version>0.4.3-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <artifactId>titan-berkeleyje</artifactId>
    <name>Titan-BerkeleyJE: Distributed Graph Database</name>
    <url>http://thinkaurelius.github.com/titan/</url>
    <properties>
        <top.level.basedir>${basedir}/..</top.level.basedir>
    </properties>
    <repositories>
        <repository>
            <id>oracleReleases</id>
            <name>Oracle Released Java Packages</name>
            <url>http://download.oracle.com/maven</url>
            <layout>default</layout>
        </repository>
    </repositories>
    <dependencies>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-core</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-test</artifactId>
            <version>${project.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-es</artifactId>
            <version>${project.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.sleepycat</groupId>
            <artifactId>je</artifactId>
            <version>5.0.73</version>
        </dependency>
    </dependencies>
    <build>
        <resources>
            <resource>
                <directory>${basedir}/src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <testResources>
            <testResource>
                <directory>${basedir}/src/test/resources</directory>
            </testResource>
        </testResources>
    </build>
</project>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.thinkaurelius.titan</groupId>
        <artifactId>titan</artifactId>
        <version>0.4.3-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <artifactId>titan-cassandra</artifactId>
    <name>Titan-Cassandra: Distributed Graph Database</name>
    <url>http://thinkaurelius.github.com/titan/</url>
    <properties>
        <astyanax.version>1.56.37</astyanax.version>
        <jamm.version>0.2.5</jamm.version>
        <jamm.group>com.github.stephenc</jamm.group>
        <dependency.plugin.version>2.8</dependency.plugin.version>
        <test.extra.jvm.opts>-javaagent:${basedir}/target/jamm-${jamm.version}.jar</test.extra.jvm.opts>
        <default.test.jvm.opts>-Xms256m -Xmx1280m -XX:+HeapDumpOnOutOfMemoryError -ea ${test.extra.jvm.opts}</default.test.jvm.opts>
        <mem.jvm.opts>-Xms256m -Xmx768m -ea -XX:+HeapDumpOnOutOfMemoryError ${test.extra.jvm.opts}</mem.jvm.opts>
        <top.level.basedir>${basedir}/..</top.level.basedir>
    </properties>
    <!-- Libraries -->
    
    <dependencies>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-core</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-test</artifactId>
            <version>${project.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-es</artifactId>
            <version>${project.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.codahale.metrics</groupId>
            <artifactId>metrics-core</artifactId>
        </dependency>
        <dependency>
            <groupId>com.carrotsearch</groupId>
            <artifactId>junit-benchmarks</artifactId>
        </dependency>
        <dependency>
            <groupId>com.carrotsearch.randomizedtesting</groupId>
            <artifactId>randomizedtesting-runner</artifactId>
        </dependency>
        <!--
            JNA is not required to run Cassandra, but it improves
            efficiency of certain of Cassandra's filesystem and memory
            operations.  DataStax describes JNA as "required for
            production installations":

            http://www.datastax.com/docs/1.2/install/install_jre
        -->
        <dependency>
            <groupId>net.java.dev.jna</groupId>
            <artifactId>jna</artifactId>
            <version>${jna.version}</version>
            <optional>true</optional>
        </dependency>
        <!-- 
            Temporary hack to work around the outdated 12.0 Guava pom.xml
            dependency in Cassandra 1.2.2.  Cassandra 1.2.2 actually
            requires Guava 13.0.1, judging from the distro tarball
            and runtime NoClassDefFoundErrors looking for the class
            com/google/common/util/concurrent/RateLimiter.
        -->
        <dependency>
            <groupId>org.apache.cassandra</groupId>
            <artifactId>cassandra-all</artifactId>
            <!-- The version is controlled in <dependencyManagement> -->
            <!-- Using avro-ipc 1.5.3 caused the following when opening the graphdb:
                 java.lang.NoSuchMethodError: org.apache.avro.io.DecoderFactory.configureDirectDecoder(Z)Lorg/apache/avro/io/DecoderFactory

                 Stock avro 1.4.0 or 1.4.1 might work, but I'd like to see
                 what customizations were made in the cassandra copy of avro
                 before trying to drop it for the stock artifact...
            <exclusions>
                <exclusion>
                    <groupId>org.apache.cassandra.deps</groupId>
                    <artifactId>avro</artifactId>
                </exclusion>
            </exclusions>
            -->
        </dependency>
        <!--
        <dependency>
            <groupId>org.apache.avro</groupId>
            <artifactId>avro</artifactId>
            <version>1.4.0</version>
            <exclusions>
                <exclusion>
                    <artifactId>netty</artifactId>
                    <groupId>org.jboss.netty</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>paranamer</artifactId>
                    <groupId>com.thoughtworks.paranamer</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>paranamer-ant</artifactId>
                    <groupId>com.thoughtworks.paranamer</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>velocity</artifactId>
                    <groupId>org.apache.velocity</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        -->
        <dependency>
            <groupId>commons-pool</groupId>
            <artifactId>commons-pool</artifactId>
            <version>1.6</version>
        </dependency>
        <dependency>
            <groupId>org.jboss.netty</groupId>
            <artifactId>netty</artifactId>
        </dependency>
        <dependency>
            <groupId>com.netflix.astyanax</groupId>
            <artifactId>astyanax-core</artifactId>
            <version>${astyanax.version}</version>
        </dependency>
        <dependency>
            <groupId>com.netflix.astyanax</groupId>
            <artifactId>astyanax-thrift</artifactId>
            <version>${astyanax.version}</version>
        </dependency>
        <dependency>
            <groupId>com.netflix.astyanax</groupId>
            <artifactId>astyanax-cassandra</artifactId>
            <version>${astyanax.version}</version>
        </dependency>
        <dependency>
             <groupId>com.netflix.astyanax</groupId>
             <artifactId>astyanax-recipes</artifactId>
             <version>${astyanax.version}</version>
        </dependency>
        <dependency>
            <groupId>org.xerial.snappy</groupId>
            <artifactId>snappy-java</artifactId>
        </dependency>
    </dependencies>

    <profiles>
        <profile>
            <id>aurelius-release</id>
            
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-jar-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>pack-test-jar</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>test-jar</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
    
    <build>
    
        <resources>
            <resource>
                <directory>${basedir}/src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <testResources>
            <testResource>
                <directory>${basedir}/src/test/resources</directory>
            </testResource>
        </testResources>
        
        <plugins>
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>filter-cassandra-bop-config</id>
                        <phase>process-test-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/cassandra/conf/localhost-bop</outputDirectory>
                            <filters>
                                <filter>${basedir}/config/cassandra-filters/localhost-bop.properties</filter>
                            </filters>
                            <resources>
                                <resource>
                                    <directory>${basedir}/config/cassandra</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>filter-cassandra-rp-config</id>
                        <phase>process-test-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/cassandra/conf/localhost-rp</outputDirectory>
                            <filters>
                                <filter>${basedir}/config/cassandra-filters/localhost-rp.properties</filter>
                            </filters>
                            <resources>
                                <resource>
                                    <directory>${basedir}/config/cassandra</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <executions>
                    <execution>
                        <!-- Run by "mvn test" -->
                        <id>default-test</id>
                        <phase>none</phase>
                    </execution>
                    <execution>
                        <!-- Run by "mvn org.apache.maven.plugins:maven-surefire-plugin:test"
                
                            Sonar does this when running JaCoCo and
                            provides no configuration option to
                            change its behavior. Define a safe
                            configuration for JaCoCo to use when run
                            by Sonar. This doesn't have to be fast,
                            since it's only used for dynamic
                            analysis, but it does have to cover all
                            the tests.
                        -->
                        <id>default-cli</id>
                        <phase>none</phase>
                        <configuration>
                            <includes>
                                <include>Nope.java</include>
                            </includes>
                            <exclude>
                                <exclude>**/*</exclude>
                            </exclude>
                            <parallel />
                            <reuseForks>false</reuseForks>
                            <threadCount>1</threadCount>
                            <perCoreThreadCount>false</perCoreThreadCount>
                            <runOrder>random</runOrder>
                        </configuration>
                    </execution>
                    <execution>
                        <id>bop-test</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <phase>test</phase>
                        <configuration>
                            <argLine>${default.test.jvm.opts} -Dtest.cassandra.confdir=${project.build.directory}/cassandra/conf/localhost-bop -Dtest.cassandra.datadir=${project.build.directory}/cassandra/data/localhost-bop</argLine>
                            <excludedGroups>com.thinkaurelius.titan.testcategory.UnorderedKeyStoreTests,com.thinkaurelius.titan.testcategory.MemoryTests,com.thinkaurelius.titan.testcategory.PerformanceTests,com.thinkaurelius.titan.testcategory.SerialTests</excludedGroups>
                            <groups />
                            <forkCount>1</forkCount>
                            <reuseForks>true</reuseForks>
                            <parallel>classes</parallel>
                            <perCoreThreadCount>true</perCoreThreadCount>
                            <threadCount>2</threadCount>
                            <runOrder>random</runOrder>
                            <skip>${test.skip.ordered}</skip>
                        </configuration>
                    </execution>
                    <execution>
                        <id>rp-test</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <phase>test</phase>
                        <configuration>
                            <argLine>${default.test.jvm.opts} -Dtest.cassandra.confdir=${project.build.directory}/cassandra/conf/localhost-rp -Dtest.cassandra.datadir=${project.build.directory}/cassandra/data/localhost-rp</argLine>
                            <excludedGroups>com.thinkaurelius.titan.testcategory.OrderedKeyStoreTests,com.thinkaurelius.titan.testcategory.MemoryTests,com.thinkaurelius.titan.testcategory.PerformanceTests,com.thinkaurelius.titan.testcategory.SerialTests</excludedGroups>
                            <groups />
                            <forkCount>1</forkCount>
                            <reuseForks>true</reuseForks>
                            <parallel>classes</parallel>
                            <perCoreThreadCount>true</perCoreThreadCount>
                            <threadCount>2</threadCount>
                            <runOrder>random</runOrder>
                            <skip>${test.skip.unordered}</skip>
                        </configuration>
                    </execution>
                    <execution>
                        <id>serial-test</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <phase>test</phase>
                        <configuration>
                            <argLine>${default.test.jvm.opts} -Dtest.cassandra.confdir=${project.build.directory}/cassandra/conf/localhost-rp -Dtest.cassandra.datadir=${project.build.directory}/cassandra/data/localhost-rp</argLine>
                            <excludedGroups />
                            <groups>com.thinkaurelius.titan.testcategory.SerialTests</groups>
                            <forkCount>1</forkCount>
                            <reuseForks>false</reuseForks>
                            <parallel>none</parallel>
                            <perCoreThreadCount>false</perCoreThreadCount>
                            <threadCount>1</threadCount>
                            <runOrder>alphabetical</runOrder>
                            <skip>${test.skip.serial}</skip>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <!-- Provide Java Memory Meter for Cassandra. Cassandra logs warnings if JAMM 
                      is not available. Also, production Cassandra deployments will probably use JAMM, 
                      so we might as well include it in our test configuration. -->
                    <execution>
                        <id>copy</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>${jamm.group}</groupId>
                                    <artifactId>jamm</artifactId>
                                    <version>${jamm.version}</version>
                                    <outputDirectory>${project.build.directory}</outputDirectory>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.thinkaurelius.titan</groupId>
        <artifactId>titan</artifactId>
        <version>0.4.3-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <artifactId>titan-core</artifactId>
    <name>Titan-Core: Core Library for Titan</name>
    <url>http://thinkaurelius.github.com/titan/</url>
    
    <properties>
        <top.level.basedir>${basedir}/..</top.level.basedir>
    </properties>

    <dependencies>
        <!-- TinkerPop -->
        <dependency>
            <groupId>com.tinkerpop.blueprints</groupId>
            <artifactId>blueprints-core</artifactId>
            <version>${tinkerpop.version}</version>
        </dependency>
        <dependency>
            <groupId>com.tinkerpop.gremlin</groupId>
            <artifactId>gremlin-groovy</artifactId>
            <version>${tinkerpop.version}</version>
            <exclusions>
                <exclusion>
                    <artifactId>gossip</artifactId>
                    <groupId>org.sonatype.gossip</groupId>
                </exclusion>
            </exclusions>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.tinkerpop</groupId>
            <artifactId>frames</artifactId>
            <version>${tinkerpop.version}</version>
        </dependency>
        <!-- Utility -->
        <dependency>
            <groupId>com.codahale.metrics</groupId>
            <artifactId>metrics-core</artifactId>
        </dependency>
        <dependency>
            <groupId>com.codahale.metrics</groupId>
            <artifactId>metrics-ganglia</artifactId>
        </dependency>
        <dependency>
            <groupId>com.codahale.metrics</groupId>
            <artifactId>metrics-graphite</artifactId>
        </dependency>
        <dependency>
            <groupId>com.spatial4j</groupId>
            <artifactId>spatial4j</artifactId>
            <version>0.3</version>
        </dependency>
        <dependency>
            <groupId>commons-collections</groupId>
            <artifactId>commons-collections</artifactId>
            <version>3.2.1</version>
        </dependency>
        <dependency>
            <groupId>commons-configuration</groupId>
            <artifactId>commons-configuration</artifactId>
            <version>1.6</version>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>1.7</version>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>14.0.1</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>jsr305</artifactId>
            <version>1.3.9</version>
        </dependency>
        <dependency>
            <groupId>com.carrotsearch</groupId>
            <artifactId>hppc</artifactId>
            <version>0.4.2</version>
        </dependency>
        <dependency>
            <groupId>com.github.stephenc.high-scale-lib</groupId>
            <artifactId>high-scale-lib</artifactId>
            <version>1.1.4</version>
        </dependency>
        <dependency>
            <groupId>com.esotericsoftware.kryo</groupId>
            <artifactId>kryo</artifactId>
            <version>2.21</version>
            <classifier>shaded</classifier>
            
            <!--
            http://code.google.com/p/kryo/wiki/MavenShadedJAR
            
            Kryo normally depends on classes in these artifacts. The Kryo artifact 
            with the shaded classifier includes all the classes on which Kryo depends. 
            The shaded dependency classes also undergo bytecode rewriting to prefix their 
            normal packagenames with com.esotericsoftware. This appears to be recursive. 
            For example, kryo depends on reflectasm depends on asm (4.0). The normal 
            asm packagename is rewritten from
            org.ow2.asm to com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.
            
            Bottom line: these exclusions are harmless, because shaded kyro comes with
            its own copy of these deps and wouldn't use them anyway.
            -->
            <exclusions>
                <exclusion>
                    <groupId>com.esotericsoftware.reflectasm</groupId>
                    <artifactId>reflectasm</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.esotericsoftware.minlog</groupId>
                    <artifactId>minlog</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.objenesis</groupId>
                    <artifactId>objenesis</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>
    <build>
        <directory>${basedir}/target</directory>
        <resources>
            <resource>
                <directory>${basedir}/src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <testResources>
            <testResource>
                <directory>${basedir}/src/test/resources
                </directory>
            </testResource>
        </testResources>
    </build>
</project>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.thinkaurelius.titan</groupId>
        <artifactId>titan</artifactId>
        <version>0.4.3-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <packaging>pom</packaging>
    <artifactId>titan-dist</artifactId>
    <name>Titan-Dist: Supermodule for Tar and Zip Archives</name>
    <url>http://thinkaurelius.github.com/titan/</url>

    <!--
      I resorted to a submodule build after several misadventures.
      First, there's this:

      https://jira.codehaus.org/browse/MASSEMBLY-614

      I tried a single module build with multiple descriptors using
      <includes> filtering, but that led to odd dependency inclusion
      logic.  I might have made a mistake elsewhere, but it seemed
      like the assembly plugin was halting dependency traversal at
      titan artifacts.  My cassandra assembly would end up with all of
      titan-cassandra's dependencies except titan-core, titan-es, etc
      and their dependencies.

      I now tiptoe around that case with a combination of include and
      exclude filtering in each of the submodule descriptors.  There's
      a lot of duplicated descriptor and pom.xml text, and this could
      probably be folded back into a single submodule, but I'm loath
      to touch it again at the moment and potentially spend time
      trying to debug it again.
    -->
    <modules>
        <module>titan-dist-all</module>
        <module>titan-dist-berkeleyje</module>
        <module>titan-dist-cassandra</module>
        <module>titan-dist-hbase</module>
        <module>titan-dist-persistit</module>
        <module>titan-dist-server</module>
    </modules>

    <properties>
      <pkgtools.dir>${project.basedir}/..</pkgtools.dir>
      <top.level.basedir>${basedir}/..</top.level.basedir>
    </properties>

    <dependencies>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>titan-core</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
	    <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.velocity</groupId>
            <artifactId>velocity</artifactId>
            <version>1.7</version>
	    <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
	    <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <resources>
            <resource>
                <directory>src/util-scripts</directory>
                <filtering>true</filtering>
            </resource>
        </resources>

        <plugins>
            <!--
              Filter the shell scripts in src/util-scripts during the
              process-resources phase.  Disable default resource goal
              bindings because we have no main or test resources.
            -->
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <inherited>false</inherited>
                        <id>filter-util-script-resources</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/util-scripts</outputDirectory>
                            <useDefaultDelimiters>false</useDefaultDelimiters>
                            <delimiters>
                                <delimiter>$MAVEN{*}</delimiter>
                            </delimiters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>default-resources</id>
                        <phase>none</phase>
                    </execution>
                    <execution>
                        <id>default-testResources</id>
                        <phase>none</phase>
                    </execution>
                </executions>
            </plugin>

            <!--
              We use maven-resources-plugin to filter util-scripts,
              but that plugin has an open bug about the fact that it
              doesn't copy file permissions during filtering.  Make
              the script executable with chmod.  Not portable.
         
              Bug: http://jira.codehaus.org/browse/MRESOURCES-132
            -->
            <plugin>
                <inherited>false</inherited>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>fix-script-permissions</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>chmod</executable>
                            <arguments>
                                <argument>-R</argument>
                                <argument>ug+x</argument>
                                <argument>${project.build.directory}/util-scripts/</argument>
                            </arguments>
                            <workingDirectory>${project.parent.basedir}/doc</workingDirectory>
                        </configuration>
                    </execution>
                    
                    <execution>
                        <id>generate-titan-gremlin-imports</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>com.thinkaurelius.titan.tinkerpop.gremlin.ConsoleSetup</mainClass>
                            <arguments>
                                <argument>${project.build.directory}/imports.properties</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <executions>
                    <execution>
                        <id>compile-tests</id>
			<phase>test-compile</phase>
			<goals>
  			    <goal>testCompile</goal>
			</goals>
		    </execution>
		</executions>
	    </plugin>

            <plugin>
                <artifactId>maven-jar-plugin</artifactId>
                <executions>
                    <execution>
                        <id>pack-test-jar</id>
			<phase>package</phase>
			<goals>
  			    <goal>test-jar</goal>
			</goals>
		    </execution>
		</executions>
	    </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>pkg-tools</id>

            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                        <version>1.8</version>
                        <inherited>false</inherited>
                        <executions>
                            <execution>
                                <id>set-version-properties</id>
                                <phase>generate-resources</phase>
                                <goals>
                                    <goal>parse-version</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <artifactId>maven-assembly-plugin</artifactId>
                        <inherited>false</inherited>
                        <executions>
                            <execution>
                                <id>assemble-package-tools</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>single</goal>
                                </goals>
                                <configuration> 
                                    <attach>false</attach>
                                    <outputDirectory>${pkgtools.dir}/</outputDirectory>
                                    <finalName>/</finalName>
                                    <appendAssemblyId>false</appendAssemblyId>
                                    <descriptors>
                                        <descriptor>assembly-pkg.xml</descriptor>
                                    </descriptors>
                                </configuration>
                            </execution>
                            <execution>
                                <id>assemble-distribution-archive</id>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <artifactId>maven-clean-plugin</artifactId>
                        <inherited>false</inherited>
                        <executions>
                            <execution>
                                <id>clean-package-tools</id>
                                <phase>clean</phase>
                                <goals>
                                    <goal>clean</goal>
                                </goals>
                                <configuration> 
                                    <excludeDefaultDirectories>true</excludeDefaultDirectories>
                                    <filesets>
                                        <fileset>
                                            <directory>${pkgtools.dir}/debian/</directory>
                                        </fileset>
                                        <fileset>
                                            <directory>${pkgtools.dir}/pkgcommon/</directory>
                                        </fileset>
                                        <fileset>
                                            <directory>${pkgtools.dir}/redhat/</directory>
                                        </fileset>
                                    </filesets>
                                </configuration> 
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.thinkaurelius.titan</groupId>
        <artifactId>titan-dist-parent</artifactId>
        <version>0.4.3-SNAPSHOT</version>
        <relativePath>../titan-dist-parent/pom.xml</relativePath>
    </parent>
    <packaging>pom</packaging>
    <artifactId>titan-dist-all</artifactId>
    <name>Titan-Dist-All: Archives with Every Backend</name>
    <url>http://thinkaurelius.github.com/titan/</url>

    <properties>
        <distribution.assembly.descriptor>all.xml</distribution.assembly.descriptor>
        <distribution.assembly.name>all</distribution.assembly.name>
        <run.dir>${project.basedir}/../..</run.dir>
        <expect.graph.config>conf/titan-persistit.properties</expect.graph.config>
        <expect.graph.id>titangraph.persistit:.*conf/\.\./db/persistit</expect.graph.id>
        <test.zipfile.path>${project.build.directory}/${distribution.assembly.filebase}.zip</test.zipfile.path>
        <top.level.basedir>${basedir}/../..</top.level.basedir>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-berkeleyje</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-cassandra</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-core</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-es</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-hbase</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-lucene</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-persistit</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>net.java.dev.jna</groupId>
            <artifactId>jna</artifactId>
            <version>${jna.version}</version>
        </dependency>
        <dependency>
            <groupId>com.tinkerpop.blueprints</groupId>
            <artifactId>blueprints-sail-graph</artifactId>
            <version>${tinkerpop.version}</version>
            <!-- temporary, due to a LinkedDataSail 1.0 dependency on Sesame 2.7.0-beta -->
            <exclusions>
                <exclusion>
                    <groupId>org.openrdf.sesame</groupId>
                    <artifactId>sesame-model</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.openrdf.sesame</groupId>
                    <artifactId>sesame-rio-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>com.tinkerpop.blueprints</groupId>
            <artifactId>blueprints-graph-sail</artifactId>
            <version>${tinkerpop.version}</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>properties-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>load-titan-gremlin-imports</id>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <executions>
                    <execution>
                        <id>assemble-standalone-dir</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                        <configuration>
                            <attach>false</attach>
                            <outputDirectory>${run.dir}</outputDirectory>
                            <finalName>/</finalName>
                            <appendAssemblyId>false</appendAssemblyId>
                            <descriptors>
                                <descriptor>standalonedir.xml</descriptor>
                            </descriptors>
                            <formats combine.self="override">
                                <format>dir</format>
                            </formats>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-clean-plugin</artifactId>
                <inherited>false</inherited>
                <executions>
                    <execution>
                        <id>clean-standalone-tools</id>
                        <phase>clean</phase>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                        <configuration>
                            <excludeDefaultDirectories>true</excludeDefaultDirectories>
                            <filesets>
                                <fileset>
                                    <directory>${run.dir}/bin/</directory>
                                </fileset>
                                <fileset>
                                    <directory>${run.dir}/conf/</directory>
                                </fileset>
                                <fileset>
                                    <directory>${run.dir}/db/</directory>
                                </fileset>
                                <fileset>
                                    <directory>${run.dir}/ext/</directory>
                                </fileset>
                                <fileset>
                                    <directory>${run.dir}/lib/</directory>
                                </fileset>
                                <fileset>
                                    <directory>${run.dir}/log/</directory>
                                </fileset>
                            </filesets>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>aurelius-release</id>

            <dependencies>
                <dependency>
                    <groupId>com.thinkaurelius.titan</groupId>
                    <artifactId>titan-dist-berkeleyje</artifactId>
                    <version>${project.version}</version>
                    <classifier>tests</classifier>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>com.thinkaurelius.titan</groupId>
                    <artifactId>titan-dist-cassandra</artifactId>
                    <version>${project.version}</version>
                    <classifier>tests</classifier>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>com.thinkaurelius.titan</groupId>
                    <artifactId>titan-cassandra</artifactId>
                    <version>${project.version}</version>
                    <classifier>tests</classifier>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>com.thinkaurelius.titan</groupId>
                    <artifactId>titan-dist-persistit</artifactId>
                    <version>${project.version}</version>
                    <classifier>tests</classifier>
                    <scope>test</scope>
                </dependency>
            </dependencies>

            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <configuration>
                            <dependenciesToScan>
                                <dependency>com.thinkaurelius.titan:titan-dist-berkeleyje</dependency>
                                <dependency>com.thinkaurelius.titan:titan-dist-cassandra</dependency>
                                <dependency>com.thinkaurelius.titan:titan-dist-persistit</dependency>
                            </dependenciesToScan>
                        </configuration>
                    </plugin>
                    <plugin>
                        <artifactId>maven-resources-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>filter-cassandra-rp-config</id>
                                <phase>process-test-resources</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${project.build.directory}/cassandra/conf/localhost-rp</outputDirectory>
                                    <filters>
                                        <filter>${project.basedir}/../..//titan-cassandra/config/cassandra-filters/localhost-rp.properties</filter>
                                    </filters>
                                    <resources>
                                        <resource>
                                            <directory>${project.basedir}/../../titan-cassandra/config/cassandra</directory>
                                            <filtering>true</filtering>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.thinkaurelius.titan</groupId>
        <artifactId>titan-dist-parent</artifactId>
        <version>0.4.3-SNAPSHOT</version>
        <relativePath>../titan-dist-parent/pom.xml</relativePath>
    </parent>
    <packaging>pom</packaging>
    <artifactId>titan-dist-berkeleyje</artifactId>
    <name>Titan-Dist-BerkeleyJE: Archives with BerkeleyDB JE</name>
    <url>http://thinkaurelius.github.com/titan/</url>

    <properties>
        <distribution.assembly.name>berkeleydb</distribution.assembly.name>
        <distribution.assembly.descriptor>../src/assembly/descriptor/backend.xml</distribution.assembly.descriptor>
        <distribution.assembly.configglob>titan-berkeley*.properties</distribution.assembly.configglob>
        <expect.graph.config>conf/titan-berkeleydb.properties</expect.graph.config>
        <expect.graph.id>titangraph.berkeleyje:.*conf/\.\./db/berkeley</expect.graph.id>
        <test.zipfile.path>${project.build.directory}/${distribution.assembly.filebase}.zip</test.zipfile.path>
        <top.level.basedir>${basedir}/../..</top.level.basedir>
    </properties>

    <profiles>
        <profile>
            <id>aurelius-release</id>
            
            <dependencies>
                <dependency>
                    <groupId>com.thinkaurelius.titan</groupId>
                    <artifactId>titan-berkeleyje</artifactId>
                    <version>${project.version}</version>
                </dependency>
            </dependencies>
        </profile>
    </profiles>
</project>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.thinkaurelius.titan</groupId>
        <artifactId>titan-dist-parent</artifactId>
        <version>0.4.3-SNAPSHOT</version>
        <relativePath>../titan-dist-parent/pom.xml</relativePath>
    </parent>
    <packaging>pom</packaging>
    <artifactId>titan-dist-cassandra</artifactId>
    <name>Titan-Dist-Cassandra: Archives with Cassandra</name>
    <url>http://thinkaurelius.github.com/titan/</url>

    <properties>
        <distribution.assembly.name>cassandra</distribution.assembly.name>
        <distribution.assembly.descriptor>cassandra.xml</distribution.assembly.descriptor>
        <expect.graph.config>conf/titan-cassandra.properties</expect.graph.config>
        <expect.graph.id>titangraph.cassandra:127.0.0.1</expect.graph.id>
        <test.zipfile.path>${project.build.directory}/${distribution.assembly.filebase}.zip</test.zipfile.path>
        <top.level.basedir>${basedir}/../..</top.level.basedir>
    </properties>

    <profiles>
        <profile>
            <id>aurelius-release</id>

            <dependencies>
                <dependency>
                    <groupId>com.thinkaurelius.titan</groupId>
                    <artifactId>titan-cassandra</artifactId>
                    <version>${project.version}</version>
                </dependency>
                <dependency>
                    <groupId>net.java.dev.jna</groupId>
                    <artifactId>jna</artifactId>
                    <version>${jna.version}</version>
                </dependency>
                <dependency>
                    <groupId>com.thinkaurelius.titan</groupId>
                    <artifactId>titan-cassandra</artifactId>
                    <version>${project.version}</version>
                    <classifier>tests</classifier>
                    <scope>test</scope>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-resources-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>filter-cassandra-rp-config</id>
                                <phase>process-test-resources</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${project.build.directory}/cassandra/conf/localhost-rp</outputDirectory>
                                    <filters>
                                        <filter>${project.basedir}/../..//titan-cassandra/config/cassandra-filters/localhost-rp.properties</filter>
                                    </filters>
                                    <resources>
                                        <resource>
                                            <directory>${project.basedir}/../../titan-cassandra/config/cassandra</directory>
                                            <filtering>true</filtering>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.thinkaurelius.titan</groupId>
        <artifactId>titan-dist-parent</artifactId>
        <version>0.4.3-SNAPSHOT</version>
        <relativePath>../titan-dist-parent/pom.xml</relativePath>
    </parent>
    <packaging>pom</packaging>
    <artifactId>titan-dist-hbase</artifactId>
    <name>Titan-Dist-HBase: Archives with HBase</name>
    <url>http://thinkaurelius.github.com/titan/</url>

    <properties>
        <distribution.assembly.name>hbase</distribution.assembly.name>
        <distribution.assembly.descriptor>${project.basedir}/../src/assembly/descriptor/backend.xml</distribution.assembly.descriptor>
        <distribution.assembly.configglob>titan-hbase*.properties</distribution.assembly.configglob>
        <top.level.basedir>${basedir}/../..</top.level.basedir>
    </properties>

    <profiles>
        <profile>
            <id>aurelius-release</id>

            <dependencies>
                <dependency>
                    <groupId>com.thinkaurelius.titan</groupId>
                    <artifactId>titan-hbase</artifactId>
                    <version>${project.version}</version>
                </dependency>
            </dependencies> 
        </profile>
    </profiles>
</project>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.thinkaurelius.titan</groupId>
        <artifactId>titan</artifactId>
        <version>0.4.3-SNAPSHOT</version>
        <relativePath>../../pom.xml</relativePath>
    </parent>
    <packaging>pom</packaging>
    <artifactId>titan-dist-parent</artifactId>
    <version>0.4.3-SNAPSHOT</version>
    <name>Titan-Dist-Parent</name>
    <url>http://thinkaurelius.github.com/titan/</url>

    <properties>
        <test.expect.dir>${project.build.directory}/test-classes</test.expect.dir>
        <top.level.basedir>${basedir}/../..</top.level.basedir>
        <distribution.assembly.filebase>titan-${distribution.assembly.name}-${project.version}</distribution.assembly.filebase>
    </properties>
    
    <dependencies>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>titan-dist</artifactId>
            <version>${project.version}</version>
            <classifier>tests</classifier>
	    <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>titan-core</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.velocity</groupId>
            <artifactId>velocity</artifactId>
            <version>1.7</version>
        </dependency>
    </dependencies>

    <build>

        <!-- Used during release:perform to upload to S3 -->
        <extensions>
            <extension>
                <groupId>org.kuali.maven.wagons</groupId>
                <artifactId>maven-s3-wagon</artifactId>
                <version>${kuali.s3.wagon.version}</version>
            </extension>
        </extensions>

        <plugins>
            <!--
              Unbind unused goals from their default phases.
            -->
            <plugin>
                <artifactId>maven-jar-plugin</artifactId>
                <executions>
                    <execution>
                        <id>default-jar</id>
                        <phase>none</phase>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-source-plugin</artifactId>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <phase>none</phase>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <executions>
                    <execution>
                        <id>default-test</id>
                        <phase>none</phase>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <executions>
                    <execution>
                        <id>default-compile</id>
                        <phase>none</phase>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-deploy-plugin</artifactId>
                <executions>
                    <execution>
                        <id>default-deploy</id>
                        <phase>none</phase>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-javadoc-plugin</artifactId>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <phase>none</phase>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-install-plugin</artifactId>
                <executions>
                    <execution>
                        <id>default-install</id>
                        <phase>none</phase>
                    </execution>
                </executions>
            </plugin>
            <!-- Done disabling unnecessary default plugin goals -->
        </plugins>
        
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>properties-maven-plugin</artifactId>
                    <executions>
                        <execution>
                            <id>load-titan-gremlin-imports</id>
                            <phase>prepare-package</phase>
                            <goals>
                                <goal>read-project-properties</goal>
                            </goals>
                            <configuration>
                                <files>
                                    <file>../target/imports.properties</file>
                                </files>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>   
    </build>
    
    <profiles>
        <profile>
            <id>aurelius-release</id>
            <dependencies>
                <dependency>
                    <groupId>com.thinkaurelius.titan</groupId>
                    <artifactId>titan-site</artifactId>
                    <classifier>htdocs</classifier>
                    <version>${project.version}</version>
                    <type>zip</type>
                </dependency>
            </dependencies> 
            <build>
                    <plugins>
                        <plugin>
                            <artifactId>maven-assembly-plugin</artifactId>
                            <executions>
                                <execution>
                                    <id>assemble-distribution-archive</id>
                                    <phase>package</phase>
                                    <goals>
                                        <goal>single</goal>
                                    </goals>
                                </execution>
                            </executions>
                            <configuration>
                                <!-- 
                                  We set attached=true so that the gpg plugin will
                                  sign all of our assembly artifacts.  We handle
                                  deployment of the artifacts manually because
                                  maven-deploy-plugin can't upload files to a flat
                                  S3 directory; it insists on creating a
                                  long/packagename/and/artifactid/and/version/
                                  path at the destination before uploading, and we
                                  don't want that for our files S3.  codehaus's
                                  wagon:upload plugin comes to our rescue.
                                -->
                                <attach>true</attach>
                                <!--
                                  archive filenames are of the form
                                  ${finalName}-${<id /> from assembly descriptor}.${archive format extension}
                                -->
                                <finalName>${distribution.assembly.filebase}</finalName>
				<appendAssemblyId>false</appendAssemblyId>
                                <tarLongFileMode>gnu</tarLongFileMode>
                                <descriptors>
                                    <!-- This property is intended to be set in submodules -->
                                    <descriptor>${distribution.assembly.descriptor}</descriptor>
                                </descriptors>
                                <formats>
                                    <format>zip</format>
                                </formats>
                            </configuration>
                        </plugin>
    		        
                        <plugin>
                            <artifactId>maven-gpg-plugin</artifactId>
                            <executions>
                                <execution>
                                    <id>sign-artifacts</id>
                                </execution>
                            </executions>
                        </plugin>
    		        
                        <plugin>
                            <artifactId>maven-install-plugin</artifactId>
                            <executions>
                                <execution>
                                    <id>install-assembly-tests</id>
                                    <phase>install</phase>
                                    <goals>
                                        <goal>install-file</goal>
                                    </goals>
                                    <configuration>
                                        <file>${project.build.directory}/${project.artifactId}-${project.version}-tests.jar</file>
                                        <artifactId>${project.artifactId}</artifactId>
                                        <version>${project.version}</version>
                                        <groupId>${project.groupId}</groupId>
                                        <packaging>jar</packaging>
                                        <classifier>tests</classifier>
                                    </configuration>
                                </execution>
                            </executions>
                        </plugin>

                        <plugin>
                            <groupId>org.codehaus.mojo</groupId>
                            <artifactId>wagon-maven-plugin</artifactId>
                            <executions>
                                <execution>
                                    <id>deploy-distribution-archives-to-s3</id>
                                    <phase>deploy</phase>
                                    <goals>
                                        <goal>upload</goal>
                                    </goals>
                                    <configuration>
                                        <fromDir>${project.build.directory}</fromDir>
                                        <includes>*.tar.bz2.asc,*.zip.asc,*.zip,*.tar.bz2</includes>
                                        <serverId>aurelius.s3</serverId> <!-- your ~/.m2/settings.xml must match -->
                                        <url>s3://s3.thinkaurelius.com/downloads/titan/</url>
                                    </configuration>
                                </execution>
                            </executions>
                        </plugin>
			
                        <plugin>
                            <artifactId>maven-jar-plugin</artifactId>
                            <executions>
                                <execution>
                                    <id>pack-test-jar</id>
                                    <phase>package</phase>
                                    <goals>
                                        <goal>test-jar</goal>
                                    </goals>
                                </execution>
                            </executions>
                        </plugin>

                        <plugin>
                            <artifactId>maven-compiler-plugin</artifactId>
                            <executions>
                                <execution>
                                    <id>compile-package-tests</id>
                                    <phase>test-compile</phase>
                                    <goals>
                                        <goal>testCompile</goal>
                                    </goals>
                                </execution>
                            </executions>
                        </plugin>
                    
                        <plugin>
                            <artifactId>maven-resources-plugin</artifactId>
                            <executions>
                                <execution>
                                    <id>filter-expect-scripts</id>
                                    <phase>process-test-resources</phase>
                                    <goals>
                                        <goal>copy-resources</goal>
                                    </goals>
                                    <configuration>
                                        <resources>
                                            <resource>
                                                <directory>../src/test/expect</directory>
                                                <filtering>true</filtering>
                                            </resource>
                                        </resources>
                                        <outputDirectory>${project.build.directory}/test-classes</outputDirectory>
                                    </configuration>
                                </execution>
                                <execution>
                                    <id>filter-test-resources</id>
                                    <phase>process-test-resources</phase>
                                    <goals>
                                        <goal>copy-resources</goal>
                                    </goals>
                                    <configuration>
                                        <resources>
                                            <resource>
                                                <directory>../src/test/resources</directory>
                                                <filtering>true</filtering>
                                            </resource>
                                        </resources>
                                        <outputDirectory>${project.build.outputDirectory}</outputDirectory>
                                    </configuration>
                                </execution>
                            </executions>
                        </plugin>
                        
                        <plugin>
                            <artifactId>maven-failsafe-plugin</artifactId>
                            <configuration>
                                <forkCount>1</forkCount>
                                <reuseForks>false</reuseForks>
                            </configuration>
                            <executions>
                                <execution>
                                    <id>integration-test</id>
                                    <goals>
                                        <goal>integration-test</goal>
                                    </goals>
                                </execution>
                                <execution>
                                    <id>verify</id>
                                    <goals>
                                        <goal>verify</goal>
                                    </goals>
                                </execution>
                            </executions>
                        </plugin>
                    </plugins>
            </build>
        </profile>
    </profiles>
</project>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.thinkaurelius.titan</groupId>
        <artifactId>titan-dist-parent</artifactId>
        <version>0.4.3-SNAPSHOT</version>
        <relativePath>../titan-dist-parent/pom.xml</relativePath>
    </parent>
    <packaging>pom</packaging>
    <artifactId>titan-dist-persistit</artifactId>
    <name>Titan-Dist-Persistit: Archives with Persistit</name>
    <url>http://thinkaurelius.github.com/titan/</url>

    <properties>
        <distribution.assembly.name>persistit</distribution.assembly.name>
        <distribution.assembly.descriptor>${project.basedir}/../src/assembly/descriptor/backend.xml</distribution.assembly.descriptor>
        <distribution.assembly.configglob>titan-persistit*.properties</distribution.assembly.configglob>
        <expect.graph.config>conf/titan-persistit.properties</expect.graph.config>
        <expect.graph.id>titangraph.persistit:.*conf/\.\./db/persistit</expect.graph.id>
        <test.zipfile.path>${project.build.directory}/${distribution.assembly.filebase}.zip</test.zipfile.path>
        <top.level.basedir>${basedir}/../..</top.level.basedir>
    </properties>

    <profiles>
        <profile>
            <id>aurelius-release</id>
            
            <dependencies>
                <dependency>
                    <groupId>com.thinkaurelius.titan</groupId>
                    <artifactId>titan-persistit</artifactId>
                    <version>${project.version}</version>
                </dependency>
            </dependencies>
        </profile>
    </profiles>
</project>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.thinkaurelius.titan</groupId>
        <artifactId>titan-dist-parent</artifactId>
        <version>0.4.3-SNAPSHOT</version>
        <relativePath>../titan-dist-parent/pom.xml</relativePath>
    </parent>
    <packaging>pom</packaging>
    <artifactId>titan-dist-server</artifactId>
    <name>Titan-Dist-Server: Archives with Rexster</name>
    <url>http://thinkaurelius.github.com/titan/</url>

    <properties>
        <distribution.assembly.name>server</distribution.assembly.name>
        <distribution.assembly.descriptor>server.xml</distribution.assembly.descriptor>
        <expect.graph.config />
        <expect.graph.id />
        <test.zipfile.path>${project.build.directory}/${distribution.assembly.filebase}.zip</test.zipfile.path>
        <top.level.basedir>${basedir}/../..</top.level.basedir>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-berkeleyje</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-cassandra</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-core</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-es</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-hbase</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-lucene</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-persistit</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-rexster</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>net.java.dev.jna</groupId>
            <artifactId>jna</artifactId>
            <version>${jna.version}</version>
        </dependency>
        <dependency>
            <groupId>com.tinkerpop.rexster</groupId>
            <artifactId>rexster-console</artifactId>
            <version>${tinkerpop.version}</version>
        </dependency>
        <dependency>
            <groupId>com.tinkerpop.rexster</groupId>
            <artifactId>rexster-server</artifactId>
            <version>${tinkerpop.version}</version>
        </dependency>
    </dependencies>
    
    <build>
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>properties-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>load-titan-gremlin-imports</id>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>aurelius-release</id>

            <dependencies>
                <dependency>
                    <groupId>com.thinkaurelius.titan</groupId>
                    <artifactId>titan-dist-all</artifactId>
                    <version>${project.version}</version>
                    <classifier>tests</classifier>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>com.thinkaurelius.titan</groupId>
                    <artifactId>titan-dist-berkeleyje</artifactId>
                    <version>${project.version}</version>
                    <classifier>tests</classifier>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>com.thinkaurelius.titan</groupId>
                    <artifactId>titan-dist-cassandra</artifactId>
                    <version>${project.version}</version>
                    <classifier>tests</classifier>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>com.thinkaurelius.titan</groupId>
                    <artifactId>titan-cassandra</artifactId>
                    <version>${project.version}</version>
                    <classifier>tests</classifier>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>com.thinkaurelius.titan</groupId>
                    <artifactId>titan-dist-persistit</artifactId>
                    <version>${project.version}</version>
                    <classifier>tests</classifier>
                    <scope>test</scope>
                </dependency>
            </dependencies>

            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <configuration>
                            <dependenciesToScan>
                                <dependency>com.thinkaurelius.titan:titan-dist-all</dependency>
                                <dependency>com.thinkaurelius.titan:titan-dist-berkeleyje</dependency>
                                <dependency>com.thinkaurelius.titan:titan-dist-cassandra</dependency>
                                <dependency>com.thinkaurelius.titan:titan-dist-persistit</dependency>
                            </dependenciesToScan>
                        </configuration>
                    </plugin>
                    <plugin>
                        <artifactId>maven-resources-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>filter-cassandra-rp-config</id>
                                <phase>process-test-resources</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${project.build.directory}/cassandra/conf/localhost-rp</outputDirectory>
                                    <filters>
                                        <filter>${project.basedir}/../..//titan-cassandra/config/cassandra-filters/localhost-rp.properties</filter>
                                    </filters>
                                    <resources>
                                        <resource>
                                            <directory>${project.basedir}/../../titan-cassandra/config/cassandra</directory>
                                            <filtering>true</filtering>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.thinkaurelius.titan</groupId>
        <artifactId>titan</artifactId>
        <version>0.4.3-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <artifactId>titan-es</artifactId>
    <name>Titan-ElasticSearch: Distributed Indexing Support</name>
    <url>http://thinkaurelius.github.com/titan/</url>
    <properties>
        <top.level.basedir>${basedir}/..</top.level.basedir>
        <!--
          ES depends on Lucene.  This ES dependency can affect the
          version used by the titan-lucene module.  When updating
          the ES version, also consider the version of Lucene upon
          which it depends and modify ../titan-lucene/pom.xml
          as necessary to keep the versions matched.
        -->
        <elasticsearch.version>0.90.5</elasticsearch.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-core</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-test</artifactId>
            <version>${project.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.elasticsearch</groupId>
            <artifactId>elasticsearch</artifactId>
            <version>${elasticsearch.version}</version>
        </dependency>
    </dependencies>
    <build>
        <resources>
            <resource>
                <directory>${basedir}/src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.thinkaurelius.titan</groupId>
        <artifactId>titan</artifactId>
        <version>0.4.3-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <artifactId>titan-hbase</artifactId>
    <name>Titan-HBase: Distributed Graph Database</name>
    <url>http://thinkaurelius.github.com/titan/</url>
    <properties>
        <hbase.version>0.94.12</hbase.version>
        <hadoop.version>1.0.4</hadoop.version>
        <hadoop.artifact>hadoop-core</hadoop.artifact>
        <titan.hbase.mvn.opts />
        <default.test.jvm.opts>-Xms256m -Xmx1280m -XX:+HeapDumpOnOutOfMemoryError -ea ${test.extra.jvm.opts}</default.test.jvm.opts>
        <mem.jvm.opts>-Xms256m -Xmx768m -ea -XX:+HeapDumpOnOutOfMemoryError ${test.extra.jvm.opts}</mem.jvm.opts>
        <top.level.basedir>${basedir}/..</top.level.basedir>
    </properties>
    <dependencies>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-core</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-test</artifactId>
            <version>${project.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-es</artifactId>
            <version>${project.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.hbase</groupId>
            <artifactId>hbase</artifactId>
            <!-- Update the hadoop-core artifact version when you update this -->
            <version>${hbase.version}</version>
            <exclusions>
                <exclusion>
                    <artifactId>avro</artifactId>
                    <groupId>org.apache.avro</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>jruby-complete</artifactId>
                    <groupId>org.jruby</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>asm</artifactId>
                    <groupId>asm</groupId>
                </exclusion>
                <exclusion>
                    <groupId>org.apache.hadoop</groupId>
                    <artifactId>hadoop-core</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.apache.hadoop</groupId>
                    <artifactId>hadoop-common</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.apache.hadoop</groupId>
                    <artifactId>hadoop-minicluster</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.apache.hadoop</groupId>
                    <artifactId>hadoop-annotations</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <artifactId>jruby-complete</artifactId>
            <groupId>org.jruby</groupId>
            <version>1.6.5</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.hadoop</groupId>
            <artifactId>${hadoop.artifact}</artifactId>
            <version>${hadoop.version}</version>
        </dependency>
        <!-- Logging.

             Based on these two HBase links, it seems that HBase has
             hard dependencies on log4j and slf4j-log4j12 (in addition
             to commons-logging):

             http://hbase.apache.org/book/config.files.html#client_dependencies
             https://issues.apache.org/jira/browse/HBASE-2608

             Our parent pom declares optional runtime-scoped dependencies
             on slf4j-log4j12 and log4j.  But according to the links above,
             these are required compile-scoped dependencies for HBase.
             We override the parent's dependency declarations below.

             These declarations could go away if HBase ever fully migrates
             to slf4j and removes its hard dependency on log4j.
        -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <optional>false</optional>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <optional>false</optional>
            <scope>compile</scope>
        </dependency>
    </dependencies>
    <build>
        <testResources>
            <testResource>
                <directory>${project.basedir}/src/test/resources</directory>
                <filtering>true</filtering>
            </testResource>
        </testResources>
        <plugins>
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>filter-hbase-site-xml</id>
                        <phase>process-test-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.basedir}/conf</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${project.basedir}/src/test/conf/</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    
    <profiles>
        <profile>
            <id>hadoop2</id>
            
            <activation>
                <!-- 
                We use the same activation criterion as HBase so that
                there's one less command-line option to remember.
                -->
                <property>
                    <name>hadoop.profile</name>
                    <value>2.0</value>
                </property>
            </activation>
            
            <properties>
                <hadoop.version>2.2.0</hadoop.version>
                <hadoop.artifact>hadoop-common</hadoop.artifact>
                <titan.hbase.mvn.opts>-Dhadoop.version=${hadoop.version} -Dhadoop.profile=2.0</titan.hbase.mvn.opts>
            </properties>
            
            <dependencies>
                <dependency>
                    <groupId>org.apache.hadoop</groupId>
                    <artifactId>hadoop-annotations</artifactId>
                    <version>${hadoop.version}</version>
                </dependency>
                <dependency>
                    <groupId>org.apache.hadoop</groupId>
                    <artifactId>hadoop-hdfs</artifactId>
                    <version>${hadoop.version}</version>
                </dependency>
                <dependency>
                    <groupId>org.apache.hadoop</groupId>
                    <artifactId>hadoop-client</artifactId>
                    <version>${hadoop.version}</version>
                </dependency>
            </dependencies>
        </profile>
    </profiles>
</project>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.thinkaurelius.titan</groupId>
        <artifactId>titan</artifactId>
        <version>0.4.3-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <artifactId>titan-lucene</artifactId>
    <name>Titan-Lucene: Indexing Support</name>
    <url>http://thinkaurelius.github.com/titan/</url>

    <properties>
        <top.level.basedir>${basedir}/..</top.level.basedir>
        <!--
          Both this module and titan-es depend on Lucene (the titan-es
          pom does not explicitly depend on Lucene, but the ES
          artifacts do).  Mismatched versions on ES's Lucene
          dependency and this dependency can lead to distros in which
          the Lucene jars collectively have more than one version:
          some Lucene jars at a newer version and others at an older
          version.  @zachkinstner showed that a Lucene dependency
          version mismatch in the minor position can cause a runtime
          error:

          https://github.com/thinkaurelius/titan/pull/303
          
          So, when modifying this version, also consider the Lucene
          dependency behind the ES version declared in the titan-es
          module.
        -->
        <lucene.version>4.4.0</lucene.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-core</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-test</artifactId>
            <version>${project.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.lucene</groupId>
            <artifactId>lucene-core</artifactId>
            <version>${lucene.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.lucene</groupId>
            <artifactId>lucene-analyzers-common</artifactId>
            <version>${lucene.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.lucene</groupId>
            <artifactId>lucene-queryparser</artifactId>
            <version>${lucene.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.lucene</groupId>
            <artifactId>lucene-spatial</artifactId>
            <version>${lucene.version}</version>
        </dependency>
    </dependencies>

    <build>
        <resources>
            <resource>
                <directory>${basedir}/src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.thinkaurelius.titan</groupId>
        <artifactId>titan</artifactId>
        <version>0.4.3-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <artifactId>titan-persistit</artifactId>
    <name>Titan-Persistit: Distributed Graph Database</name>
    <url>http://thinkaurelius.github.com/titan/</url>
    
    <properties>
        <top.level.basedir>${basedir}/..</top.level.basedir>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-core</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-test</artifactId>
            <version>${project.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.akiban</groupId>
            <artifactId>akiban-persistit</artifactId>
            <version>3.3.0</version>
        </dependency>
    </dependencies>

    <build>
        <resources>
            <resource>
                <directory>${basedir}/src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.thinkaurelius.titan</groupId>
        <artifactId>titan</artifactId>
        <version>0.4.3-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <artifactId>titan-rexster</artifactId>
    <name>Titan-Rexster: Support for Titan in Rexster</name>
    <url>http://thinkaurelius.github.com/titan/</url>

    <properties>
        <top.level.basedir>${basedir}/..</top.level.basedir>
    </properties>
    
    <dependencies>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-core</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.tinkerpop.rexster</groupId>
            <artifactId>rexster-core</artifactId>
            <version>${tinkerpop.version}</version>
        </dependency>
    </dependencies>
</project>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.thinkaurelius.titan</groupId>
        <artifactId>titan</artifactId>
        <version>0.4.3-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <artifactId>titan-site</artifactId>
    <name>Titan-Site: Static Webpages and Docs</name>
    <url>http://thinkaurelius.github.com/titan/</url>
    
    <properties>
        <top.level.basedir>${basedir}/..</top.level.basedir>
    </properties>

    <build>
        <plugins>

            <!--
              Delete the html copy of the wiki generated with
              gollum-site, if any exists.
            -->
            <plugin>
                <artifactId>maven-clean-plugin</artifactId>
                <configuration>
                    <filesets>
                        <fileset>
                            <directory>${project.parent.basedir}/doc/html</directory>
                            <followSymlinks>false</followSymlinks>
                        </fileset>
                    </filesets>
                </configuration>
            </plugin>

            <!--
              Turn off default plugin goal bindings that we don't need
              for this module, which is almost all default bindings.
            -->
            <plugin>
                <artifactId>maven-gpg-plugin</artifactId>
                <executions>
                    <execution>
                        <id>sign-artifacts</id>
                        <phase>none</phase>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-jar-plugin</artifactId>
                <executions>
                    <execution>
                        <id>default-jar</id>
                        <phase>none</phase>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-source-plugin</artifactId>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <phase>none</phase>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <executions>
                    <execution>
                        <id>default-test</id>
                        <phase>none</phase>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <executions>
                    <execution>
                        <id>default-compile</id>
                        <phase>none</phase>
                    </execution>
                    <execution>
                        <id>default-testCompile</id>
                        <phase>none</phase>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-javadoc-plugin</artifactId>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <phase>none</phase>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-deploy-plugin</artifactId>
                <executions>
                    <execution>
                        <id>default-deploy</id>
                        <phase>none</phase>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-install-plugin</artifactId>
                <executions>
                    <execution>
                        <id>default-install</id>
                        <phase>none</phase>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>default-testResources</id>
                        <phase>none</phase>
                    </execution>
                    <execution>
                        <id>default-resources</id>
                        <phase>none</phase>
                    </execution>
                </executions>
            </plugin>
            <!-- Done disabling unnecessary plugins -->
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>aurelius-release</id>
            <dependencies>
                <dependency>
                    <groupId>${project.groupId}</groupId>
                    <artifactId>titan-core</artifactId>
                    <version>${project.version}</version>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-javadoc-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>site-javadoc</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>javadoc</goal>
                                </goals>
                                <configuration>
                                    <windowtitle>Titan ${project.version} API</windowtitle>
                                    <doctitle>Titan Graph Database ${project.version} API</doctitle>
                                    <includeDependencySources>true</includeDependencySources>
                                    <dependencySourceIncludes>
                                        <dependencySourceInclude>${project.groupId}:titan-core</dependencySourceInclude>
                                    </dependencySourceIncludes>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
  
                    <!-- Build "htdocs", the combined wikidoc + javadoc artifact -->
                    <plugin>
                        <artifactId>maven-assembly-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>assemble-htdoc-zip</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>single</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <attach>false</attach>
                            <descriptors>
                                <descriptor>src/assembly/htdocs.xml</descriptor>
                            </descriptors>
                        </configuration>
                    </plugin>
        
                    <!-- Install "htdocs", the combined wikidoc + javadoc artifact -->
                    <plugin>
                        <artifactId>maven-install-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>install-htdocs-locally</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>install-file</goal>
                                </goals>
                                <configuration>
                                    <file>${project.build.directory}/${project.artifactId}-${project.version}-htdocs.zip</file>
                                    <generatePom>true</generatePom>
                                    <artifactId>${project.artifactId}</artifactId>
                                    <groupId>${project.groupId}</groupId>
                                    <version>${project.version}</version>
                                    <packaging>zip</packaging>
                                    <classifier>htdocs</classifier>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
        
                    <plugin>
                        <artifactId>maven-resources-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>filter-site-scripts</id>
                                <phase>process-resources</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${project.build.directory}/site-scripts</outputDirectory>
                                    <useDefaultDelimiters>false</useDefaultDelimiters>
                                    <delimiters>
                                        <delimiter>$MAVEN{*}</delimiter>
                                    </delimiters>
                                    <resources>
                                        <resource>
                                            <directory>src/site-scripts</directory>
                                            <filtering>true</filtering>
                                        </resource>
                                    </resources>              
                                </configuration>            
                            </execution>
                            <execution>
                                <id>filter-site-resources</id>
                                <phase>process-resources</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${project.build.directory}/site-resources</outputDirectory>
                                    <useDefaultDelimiters>false</useDefaultDelimiters>
                                    <delimiters>
                                        <delimiter>$MAVEN{*}</delimiter>
                                    </delimiters>
                                    <resources>
                                        <resource>
                                            <directory>src/site-resources</directory>
                                            <filtering>true</filtering>
                                        </resource>
                                    </resources>              
                                </configuration>            
                            </execution>
                        </executions>
                    </plugin>
        
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>git-submodule-prep</id>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>git</executable>
                                    <arguments>
                                        <argument>submodule</argument>
                                        <argument>update</argument>
                                        <argument>--init</argument>
                                    </arguments>
                                    <workingDirectory>..</workingDirectory>
                                </configuration>
                            </execution>
                            <execution>
                                <!-- Gollum doesn't understand submodules.  It dies with a Grit [sic] error
                                     error when run on a submodule.  This limitation is intrinsic to Gollum
                                     and not just a limitation of gollum-site.  Poor submodule support has
                                     appeared in at least two Gollum issues:
        
                                     https://github.com/gollum/gollum/issues/151
                                     https://github.com/gollum/gollum/issues/438
        
                                     Gollum might eventually throw out Grit
                                     in favor of an alternative project called Rugged that supposedly handles
                                     submodules correctly:
        
                                     https://github.com/gollum/gollum-lib/pull/16
        
                                     For now, we're hacking around Gollum's limitation.  The doc submodule
                                     .git file usually contains this:
        
                                     gitdir: ../.git/modules/doc
        
                                     This is a sort of pretend symlink.  Git is smart enough to handle an
                                     actual symlink in a way functionally identical to the gitdir: ... file,
                                     and making this a symlink placates Gollum and avoids the submodule Grit
                                     error that would otherwise kill it.
                                -->
                                <id>hack-submodule-gitdir-for-gollum</id>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>ln</executable>
                                    <arguments>
                                        <argument>-sf</argument>
                                        <argument>../.git/modules/doc</argument>
                                        <argument>.git</argument>
                                    </arguments>
                                    <workingDirectory>${project.parent.basedir}/doc</workingDirectory>
                                </configuration>
                            </execution>
                            <!-- 
                              We use maven-resources-plugin to filter a script
                              during pre-site, but that plugin has an open bug
                              about the fact that it doesn't copy file
                              permissions during filtering.  Make the script
                              executable.
         
                              Bug: http://jira.codehaus.org/browse/MRESOURCES-132
                            -->
                            <execution>
                                <id>fix-script-permissions</id>
                                <phase>process-resources</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>chmod</executable>
                                    <arguments>
                                        <argument>-R</argument>
                                        <argument>ug+x</argument>
                                        <argument>${project.build.directory}/site-scripts/</argument>
                                    </arguments>
                                    <workingDirectory>${project.parent.basedir}/doc</workingDirectory>
                                </configuration>
                            </execution>
                            <execution>
                                <id>gollum-site</id>
                                <phase>compile</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>${project.build.directory}/site-scripts/gollum-site-wrapper.sh</executable>
                                    <workingDirectory>${project.parent.basedir}</workingDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.thinkaurelius.titan</groupId>
        <artifactId>titan</artifactId>
        <version>0.4.3-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <artifactId>titan-test</artifactId>
    <name>Titan-Test: Test Suite for Titan</name>
    <url>http://thinkaurelius.github.com/titan/</url>
    
    <properties>
        <top.level.basedir>${basedir}/..</top.level.basedir>
    </properties>

    <repositories>
        <!-- Access Sonatype OSS Snapshots for Furnace artifacts. This can 
            go away when Furnace is released to Central. -->
        <repository>
            <id>sonatype-oss-snapshots</id>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
            <releases>
                <enabled>false</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
    </repositories>

    <dependencies>
        <dependency>
            <groupId>com.thinkaurelius.titan</groupId>
            <artifactId>titan-core</artifactId>
            <version>${project.version}</version>
        </dependency>
        <!-- TinkerPop -->
        <dependency>
            <groupId>com.tinkerpop.blueprints</groupId>
            <artifactId>blueprints-test</artifactId>
            <version>${tinkerpop.version}</version>
        </dependency>
        <!--
        Can't release Titan with a Furnace dependency until
        Furnace releases a non-SNAPSHOT version.

        Titan only uses Furnace's generators subpackages.

        To allow for a Titan release with an alpha version of
        Furnace generators, I copied the source files from
        the package into titan-test/src/main/java.  I changed
        the package to com.tinkerpop.furnace.alpha.generators.

        We should get rid of that when Furnace releases.

        <dependency>
            <groupId>com.tinkerpop.furnace</groupId>
            <artifactId>furnace</artifactId>
            <version>0.1.0-SNAPSHOT</version>
            <exclusions>
                <exclusion>
                    <groupId>com.tinkerpop.gremlin</groupId>
                    <artifactId>gremlin-java</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.tinkerpop.gremlin</groupId>
                    <artifactId>gremlin-groovy</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.tinkerpop.blueprints</groupId>
                    <artifactId>blueprints-core</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.tinkerpop</groupId>
                    <artifactId>pipes</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-math</artifactId>
            <version>2.2</version>
        </dependency>
        <!-- Test Dependencies -->
        <dependency>
            <groupId>com.carrotsearch</groupId>
            <artifactId>junit-benchmarks</artifactId>
        </dependency>
        <dependency>
            <groupId>com.carrotsearch.randomizedtesting</groupId>
            <artifactId>randomizedtesting-runner</artifactId>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>1.3.172</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-all</artifactId>
            <version>1.8.1</version>
        </dependency>
        <dependency>
            <groupId>org.easymock</groupId>
            <artifactId>easymock</artifactId>
            <version>3.1</version>
        </dependency>

        <!-- Groovy & Gremlin -->
        <dependency>
            <groupId>org.codehaus.gmaven.runtime</groupId>
            <artifactId>gmaven-runtime-1.5</artifactId>
            <version>1.5</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.ant</groupId>
                    <artifactId>ant</artifactId>
                </exclusion>
                <!-- This Slf4j log binding conflicts with Log4j -->
                <exclusion>
                    <groupId>org.sonatype.gossip</groupId>
                    <artifactId>gossip</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>com.tinkerpop.gremlin</groupId>
            <artifactId>gremlin-groovy</artifactId>
            <version>${tinkerpop.version}</version>
        </dependency>
    </dependencies>

    <build>
        <resources>
            <resource>
                <directory>${basedir}/src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <plugins>
            <!-- Groovy -->
            <plugin>
                <groupId>org.codehaus.gmaven</groupId>
                <artifactId>gmaven-plugin</artifactId>
                <version>1.5</version>
                <configuration>
                    <providerSelection>1.5</providerSelection>
                    <debug>true</debug>
                    <verbose>true</verbose>
                    <stacktrace>true</stacktrace>
                    <sources>
                        <fileset>
                            <directory>${project.basedir}/src/main/groovy</directory>
                            <includes>
                                <include>**/*.groovy</include>
                            </includes>
                        </fileset>
                    </sources>
                    <testSources>
                        <fileset>
                            <directory>${project.basedir}/src/test/groovy</directory>
                            <includes>
                                <include>**/*.groovy</include>
                            </includes>
                        </fileset>
                    </testSources>
                </configuration>
                <executions>
                    <execution>
                        <id>groovy-compile</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>groovy-testCompile</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>testCompile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
