<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <artifactId>antlr-complete</artifactId>
    <packaging>jar</packaging>

    <name>ANTLR 3 Complete</name>
    <description>Complete distribution for ANTLR 3</description>

  <!--

    Inherit from the ANTLR master pom, which tells us what
    version we are and allows us to inherit dependencies
    and so on.

    -->
    <parent>
        <groupId>org.antlr</groupId>
        <artifactId>antlr-master</artifactId>
        <version>3.5.3-SNAPSHOT</version>
    </parent>

    <url>http://antlr.org/</url>

    <!--
        The complete distribution includes the following modules and their dependencies:
            ANTLR 3 Tool
            ANTLR 3 Runtime
            gUnit for ANTLR 3
            StringTemplate 4 (dependency of code generator in the ANTLR 3 Tool)
            StringTemplate 3 (dependency of grammars with output=template)
            ANTLR 2.7.7 (dependency of template parser in StringTemplate 3)
    -->
    <dependencies>

        <dependency>
            <groupId>org.antlr</groupId>
            <artifactId>antlr</artifactId>
            <version>${project.version}</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>org.antlr</groupId>
            <artifactId>antlr-runtime</artifactId>
            <version>${project.version}</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>org.antlr</groupId>
            <artifactId>gunit</artifactId>
            <version>${project.version}</version>
            <scope>compile</scope>
        </dependency>

    </dependencies>

    <build>

        <plugins>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>2.0</version>
                <configuration>
                    <minimizeJar>false</minimizeJar>
                    <createSourcesJar>true</createSourcesJar>
                    <filters>
                        <filter>
                            <artifact>org.antlr:antlr-complete</artifact>
                            <includes>
                                <include>META-INF/**</include>
                            </includes>
                        </filter>
                    </filters>
                    <transformers>
                        <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                            <mainClass>org.antlr.Tool</mainClass>
                        </transformer>
                    </transformers>
                </configuration>
                <executions>
                    <execution>
                        <id>complete-no-st3</id>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <createDependencyReducedPom>false</createDependencyReducedPom>
                            <shadedArtifactAttached>true</shadedArtifactAttached>
                            <shadedClassifierName>no-st3</shadedClassifierName>
                            <filters>
                                <filter>
                                    <artifact>antlr:antlr</artifact>
                                    <excludes>
                                        <exclude>**</exclude>
                                    </excludes>
                                </filter>
                                <filter>
                                    <artifact>org.antlr:stringtemplate</artifact>
                                    <excludes>
                                        <exclude>**</exclude>
                                    </excludes>
                                </filter>
                            </filters>
                        </configuration>
                    </execution>

                    <execution>
                        <id>complete</id>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <createDependencyReducedPom>false</createDependencyReducedPom>
                            <shadedArtifactAttached>false</shadedArtifactAttached>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <configuration>
                    <includeDependencySources>true</includeDependencySources>
                </configuration>
            </plugin>
        </plugins>

    </build>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    
    <modelVersion>4.0.0</modelVersion>
    <groupId>org.antlr</groupId>
    <artifactId>antlr3-maven-archetype</artifactId>
    <packaging>maven-archetype</packaging>
    <name>ANTLR 3 Maven Archetype</name>
    <description>ANTLR 3 Maven Archetype</description>
    

    <!--

    Inherit from the ANTLR master pom, which tells us what
    version we are and allows us to inherit dependencies
    and so on.
    -->
    <parent>
        <groupId>org.antlr</groupId>
        <artifactId>antlr-master</artifactId>
        <version>3.5.3-SNAPSHOT</version>
    </parent>

  <build>

    <extensions>

      <extension>
        <groupId>org.apache.maven.archetype</groupId>
        <artifactId>archetype-packaging</artifactId>
        <version>2.2</version>
      </extension>

    </extensions>

        <plugins>

            <plugin>
                <artifactId>maven-archetype-plugin</artifactId>
                <version>2.2</version>
                <extensions>true</extensions>
            </plugin>

        </plugins>

  </build>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- =======================================================================
         A quickstart pom.xml that creates a sample project that uses ANTLR 3.x
         grammars. You should replace the sample grammars in src/main/antlr3
         with your own grammar files and use packages.

         A .g file in
          
            src/main/antlr3/com/temporalwave

          belongs in the package
          
            com.temporalwave

         See http://antlr.org/antlr3-maven-plugin for more details.

         This project produces both a jar file of the project and an executeable
         jar file that contains all the dependencies so you can run it standalone.
         See below for more details.
         
         Archetype by Jim Idle (jimi@temporal-wave.com) - Oct 2009
         Report bugs to the ANTLR interest list at http://www.antlr.org

         Generated by antlr3-maven-archetype version 3.4.1-SNAPSHOT
         =======================================================================
      -->

    <!-- This is your organizations normal group name
         such as org.antlr
         All the artifacts you create will be under this
         group id.
      -->
    <groupId>${groupId}</groupId>

    <!-- This is how maven knows your artifact
      -->
    <artifactId>${artifactId}</artifactId>

    <!-- This is the human oriented name for the package
         so you can call it anything you like
      -->
    <name>ANTLR3 project: ${package}</name>

    <!-- This is the version of YOUR project -->
    <version>${version}</version>

    <packaging>jar</packaging>
    <url>http://antlr.org</url>

    <dependencies>

        <!--
          We need to have the ANTLR runtime jar when running and compiling.
        -->
        <dependency>
            <groupId>org.antlr</groupId>
            <artifactId>antlr-runtime</artifactId>
            <version>3.4.1-SNAPSHOT</version>
            <scope>compile</scope>
        </dependency>

    </dependencies>

  <!--

    Tell Maven which other artifacts we need in order to
    build with the ANTLR Tool. Here we also make the default
    goal be install so that you can just type mvn at the command
    line instead of mvn install. And we add the java compiler plugin
    for convenience to show how you can use 1.6 source files but
    generate 1.4 compatible .class files (as few people seem to
    know about the jsr14 target).
    -->
    <build>

        <defaultGoal>install</defaultGoal>

        <plugins>

            <plugin>

                <groupId>org.antlr</groupId>
                <artifactId>antlr3-maven-plugin</artifactId>
                <version>3.4.1-SNAPSHOT</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>antlr</goal>
                        </goals>
                    </execution>
                </executions>

            </plugin>

            <!--
              Strictly speaking, we did not need to generate this for you from
              the prototype, but we use it to illustrate how you can get
              the JDK 6 Java compiler to accept 1.5 or 1.6 targeted source code
              but produce class files that are compatible with JRE 1.4. As
              Michael Caine might say, "Not a lot of people know that!"
              -->
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.0.2</version>
                <configuration>
                    <source>1.6</source>
                    <target>jsr14</target>
                    <sourceDirectory>src</sourceDirectory>
                </configuration>
            </plugin>

            <plugin>
                
                <!--

                    Build an uber-jar that is packaged with all the other dependencies,
                    such as the antlr-runtime and so on. This will be useful
                    for developers, who then do not need to download anything else or
                    remember that they need antlr.jar in their CLASSPATH and so
                    on.

                    You can delete this plugin of course and you will then
                    get a jar file with only the code generated and included
                    directly in this project. With this plugin though you will
                    find that when you build with:

                       mvn install

                    There will be an executable jar generated. You can run this
                    as:

                      java -jar ${artifactId}-${version}-jar-with-dependencies.jar demosource.dmo

                    assuming you have a file called demosource.dmo to attempt a parse.

                  -->
                <artifactId>maven-assembly-plugin</artifactId>

                <configuration>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                    <!--

                        Specify that we want the resulting jar to be executable
                        via java -jar, which we do by modifying the manifest
                        of course.
                      -->
                    <archive>

                        <manifest>
                            <mainClass>${package}.Main</mainClass>
                        </manifest>
                    </archive>

                </configuration>

                <!--

                    We don't want to have to specifically ask for the uber jar, so we attach the
                    running of this plugin to the execution of the package life-cycle
                    phase.
                  -->
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>attached</goal>
                        </goals>
                    </execution>
                </executions>

            </plugin>

        </plugins>
    </build>

</project>
<!--

 [The "BSD license"]

 ANTLR        - Copyright (c) 2005-2010 Terence Parr
 Maven Plugin - Copyright (c) 2009      Jim Idle

 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:
 1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
 3. The name of the author may not be used to endorse or promote products
    derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

  -->



<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <!-- Maven model we are inheriting from
      -->
    <modelVersion>4.0.0</modelVersion>

    <!--

     Now that the ANTLR project has adopted Maven with a vengence,
     all ANTLR tools will be grouped under org.antlr and will be
     controlled by a project member.
     -->
    <groupId>org.antlr</groupId>


    <!--

     This is the ANTLR plugin for ANTLR version 3.1.3 and above. It might
     have been best to change the name of the plugin as the 3.1.2 plugins
     behave a little differently, however for the sake of one transitional
     phase to a much better plugin, it was decided that the name should
     remain the same.
      -->
    <artifactId>antlr3-maven-plugin</artifactId>
    <packaging>maven-plugin</packaging>

    <parent>
        <groupId>org.antlr</groupId>
        <artifactId>antlr-master</artifactId>
        <version>3.5.3-SNAPSHOT</version>
    </parent>

    <name>ANTLR 3 Maven plugin</name>
    <prerequisites>
        <maven>2.0</maven>
    </prerequisites>

    <!--
     Where does our actual project live on the interwebs.
      -->
    <url>http://antlr.org</url>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <description>

This is the brand new, re-written from scratch plugin for ANTLR v3.

Previous valiant efforts all suffered from being unable to modify the ANTLR Tool
itself to provide support not just for Maven oriented things but any other tool
that might wish to invoke ANTLR without resorting to the command line interface.

Rather than try to shoe-horn new code into the existing Mojo (in fact I think that
by incorporating a patch supplied by someone I ended up with tow versions of the
Mojo, I elected to rewrite everything from scratch, including the documentation, so
that we might end up with a perfect Mojo that can do everything that ANTLR v3 supports
such as imported grammar processing, proper support for library directories and
locating token files from generated sources, and so on.

In the end I decided to also change the the ANTLR Tool.java code so that it
would be the provider of all the things that a build tool needs, rather than
delegating things to 5 different tools. So, things like dependencies, dependency
sorting, option tracking, generating sources and so on are all folded back
in to ANTLR's Tool.java code, where they belong, and they now provide a
public interface to anyone that might want to interface with them.

One other goal of this rewrite was to completely document the whole thing
to death. Hence even this pom has more comments than funcitonal elements,
in case I get run over by a bus or fall off a cliff while skiing.

Jim Idle - March 2009

    </description>

    <developers>

        <developer>
            <name>Jim Idle</name>
            <url>http://www.temporal-wave.com</url>
            <roles>
                <role>Originator, version 3.1.3</role>
            </roles>
        </developer>

        <developer>
            <name>Terence Parr</name>
            <url>http://antlr.org/wiki/display/~admin/Home</url>
            <roles>
                <role>Project lead - ANTLR</role>
            </roles>
        </developer>

        <developer>
            <name>David Holroyd</name>
            <url>http://david.holroyd.me.uk/</url>
            <roles>
                <role>Originator - prior version</role>
            </roles>
        </developer>

        <developer>
            <name>Kenny MacDermid</name>
            <url>mailto:kenny "at" kmdconsulting.ca</url>
            <roles>
                <role>Contributor - prior versions</role>
            </roles>
        </developer>

    </developers>

    <!-- ============================================================================= -->

    <!--

     What are we depedent on for the Mojos to execute? We need the
     plugin API itself and of course we need the ANTLR Tool and runtime
     and any of their dependencies, which we inherit. The Tool itself provides
     us with all the dependencies, so we need only name it here.
      -->
    <dependencies>

        <!--
          The things we need to build the target language recognizer
          -->
        <dependency>
            <groupId>org.apache.maven</groupId>
            <artifactId>maven-plugin-api</artifactId>
            <version>2.0</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.maven</groupId>
            <artifactId>maven-project</artifactId>
            <version>2.0</version>
        </dependency>

        <dependency>
            <groupId>org.codehaus.plexus</groupId>
            <artifactId>plexus-compiler-api</artifactId>
            <version>2.0</version>
        </dependency>

        <!--
         The version of ANTLR tool that this version of the plugin controls.
         We have decided that this should be in lockstep with ANTLR itself, other
         than -1 -2 -3 etc patch releases.
          -->
        <dependency>
            <groupId>org.antlr</groupId>
            <artifactId>antlr</artifactId>
            <version>${project.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.maven.shared</groupId>
            <artifactId>maven-plugin-testing-harness</artifactId>
            <version>1.1</version>
            <scope>test</scope>
        </dependency>
        
    </dependencies>
    
    <build>

        <plugins>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <version>3.3</version>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>2.7</version>
                <configuration>
                    <dependencyLocationsEnabled>false</dependencyLocationsEnabled>
                </configuration>
            </plugin>

        </plugins>

    </build>

    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-plugin-plugin</artifactId>
                <version>3.2</version>
            </plugin>
        </plugins>
    </reporting>
</project>
<!--

 [The "BSD license"]

 ANTLR        - Copyright (c) 2005-2010 Terence Parr
 Maven Plugin - Copyright (c) 2009      Jim Idle

 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:
 1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
 3. The name of the author may not be used to endorse or promote products
    derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

  -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <prerequisites>
        <maven>2.0</maven>
    </prerequisites>

    <groupId>org.antlr</groupId>
    <artifactId>maven-gunit-plugin</artifactId>
    <packaging>maven-plugin</packaging>

    <name>ANTLR 3 gUnit Maven plugin</name>
	<description>A Maven plugin for incorporating gUnit testing of grammars</description>
    <url>http://antlr.org</url>

    <!--

    Inherit from the ANTLR master pom, which tells us what
    version we are and allows us to inherit dependencies
    and so on.
    -->
    <parent>
        <groupId>org.antlr</groupId>
        <artifactId>antlr-master</artifactId>
        <version>3.5.3-SNAPSHOT</version>
    </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <!--

     What are we depedent on for the Mojos to execute? We need the
     plugin API itself and of course we need the ANTLR Tool and runtime
     and any of their dependencies, which we inherit. The Tool itself provides
     us with all the dependencies, so we need only name it here.
      -->
    <dependencies>

        <!--
          The things we need to build the target language recognizer
          -->
        <dependency>
            <groupId>org.apache.maven</groupId>
            <artifactId>maven-plugin-api</artifactId>
            <version>2.0</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.maven</groupId>
            <artifactId>maven-project</artifactId>
            <version>2.0</version>
        </dependency>

        <dependency>
            <groupId>org.codehaus.plexus</groupId>
            <artifactId>plexus-compiler-api</artifactId>
            <version>2.0</version>
        </dependency>

        <!--
         The version of ANTLR tool that this version of the plugin controls.
         We have decided that this should be in lockstep with ANTLR itself, other
         than -1 -2 -3 etc patch releases.
          -->
        <dependency>
            <groupId>org.antlr</groupId>
            <artifactId>antlr</artifactId>
            <version>${project.version}</version>
        </dependency>

        <!--
         Dependency on the gUnit artifact.
        -->
        <dependency>
            <groupId>org.antlr</groupId>
            <artifactId>gunit</artifactId>
            <version>${project.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.maven.shared</groupId>
            <artifactId>maven-plugin-testing-harness</artifactId>
            <version>1.1</version>
            <scope>test</scope>
        </dependency>
        
    </dependencies>
    
    <build>

        <plugins>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>2.6</version>
                <configuration>
                    <dependencyLocationsEnabled>false</dependencyLocationsEnabled>
                </configuration>
            </plugin>

        </plugins>

    </build>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <artifactId>gunit</artifactId>
    <packaging>jar</packaging>
  
    <name>ANTLR 3 gUnit</name>
    <description>gUnit grammar testing tool for ANTLR 3</description>

  <!--

    Inherit from the ANTLR master pom, which tells us what
    version we are and allows us to inherit dependencies
    and so on.

    -->
    <parent>
        <groupId>org.antlr</groupId>
        <artifactId>antlr-master</artifactId>
        <version>3.5.3-SNAPSHOT</version>
    </parent>

    <url>http://www.antlr.org/wiki/display/ANTLR3/gUnit+-+Grammar+Unit+Testing</url>

  <!--

    Tell Maven which other artifacts we need in order to
    build, run and test the ANTLR Tool. The ANTLR Tool uses earlier versions
    of ANTLR at runtime (for the moment), uses the current
    released version of ANTLR String template, but obviously is
    reliant on the latest snapshot of the runtime, which will either be
    taken from the antlr-snapshot repository, or your local .m2
    repository if you built and installed that locally.

    -->
    <dependencies>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>org.antlr</groupId>
            <artifactId>antlr</artifactId>
            <version>${project.version}</version>
            <scope>compile</scope>
            
        </dependency>
        
        <dependency>
            <groupId>org.antlr</groupId>
            <artifactId>stringtemplate</artifactId>
            <scope>compile</scope>
        </dependency>

    </dependencies>

    <build>

        <plugins>

            <plugin>
                <groupId>org.antlr</groupId>
                <artifactId>antlr3-maven-plugin</artifactId>
                <version>${project.version}</version>
                <configuration />
                <executions>
                    <execution>
                        <goals>
                            <goal>antlr</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

        </plugins>

    </build>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <parent>
        <groupId>org.sonatype.oss</groupId>
        <artifactId>oss-parent</artifactId>
        <version>9</version>
    </parent>

    <modelVersion>4.0.0</modelVersion>
    <groupId>org.antlr</groupId>
    <artifactId>antlr-master</artifactId>
    <packaging>pom</packaging>
    <version>3.5.3-SNAPSHOT</version>
    <name>ANTLR 3 Master build control POM</name>
    <description>Master build POM for ANTLR 3</description>
    <url>http://antlr.org</url>
    <inceptionYear>1992</inceptionYear>
    <organization>
        <name>ANTLR</name>
        <url>http://www.antlr.org</url>
    </organization>

  <!--
    What version of ANTLR are we building? This sets the
    the version number for all other things that are built
    as part of an ANTLR release, unless they override or
    ignore it. We do this via a properites file for this
    pom.
    -->

  <!--
     This is the master pom for building the ANTLR
     toolset and runtime (Java) at the specific level
     defined above. Hence we specify here the modules that
     this pom will build when we build this pom
    -->

    <modules>
        <module>runtime/Java</module>
        <module>tool</module>
        <module>antlr3-maven-plugin</module>
        <module>gunit</module>
        <module>gunit-maven-plugin</module>
        <module>antlr3-maven-archetype</module>
        <module>antlr-complete</module>
    </modules>

  <!--
    Make sure that the build is not platform dependent (I.E show that
    all the files in the source tree are in UTF-8 format.
    -->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java5.home>${env.JAVA5_HOME}</java5.home>
        <java6.home>${env.JAVA6_HOME}</java6.home>
        <bootclasspath.java5>${java5.home}/lib/rt.jar</bootclasspath.java5>
        <bootclasspath.java6>${java6.home}/lib/rt.jar</bootclasspath.java6>
        <bootclasspath.compile>${bootclasspath.java5}</bootclasspath.compile>
        <bootclasspath.testCompile>${bootclasspath.java6}</bootclasspath.testCompile>
    </properties>

    <licenses>
        <license>
            <name>BSD licence</name>
            <url>http://antlr.org/license.html</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <issueManagement>
        <system>GitHub Issues</system>
        <url>https://github.com/antlr/antlr3/issues</url>
    </issueManagement>

    <mailingLists>
        <mailingList>
            <name>antlr-discussion</name>
            <archive>https://groups.google.com/forum/?fromgroups#!forum/antlr-discussion</archive>
        </mailingList>
    </mailingLists>

    <scm>
        <url>https://github.com/antlr/antlr3/tree/master</url>
        <connection>scm:git:git://github.com/antlr/antlr3.git</connection>
        <developerConnection>scm:git:git@github.com:antlr/antlr3.git</developerConnection>
      <tag>HEAD</tag>
  </scm>
  <!--

    Tell Maven which other artifacts we need in order to
    build, run and test the ANTLR jars.
    This is the master pom, and so it only contains those
    dependencies that are common to all the modules below
    or are just included for test
    -->
    <dependencyManagement>

        <dependencies>

            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.10</version>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>antlr</groupId>
                <artifactId>antlr</artifactId>
                <version>2.7.7</version>
                <scope>compile</scope>
            </dependency>

            <dependency>
              <groupId>org.antlr</groupId>
              <artifactId>stringtemplate</artifactId>
              <version>3.2.1</version>
              <scope>compile</scope>
            </dependency>

            <dependency>
                <groupId>org.antlr</groupId>
                <artifactId>ST4</artifactId>
                <version>4.0.8</version>
                <scope>compile</scope>
            </dependency>

        </dependencies>

    </dependencyManagement>

    <profiles>
        <profile>
            <id>sonatype-oss-release</id>
            <modules>
                <module>antlr-complete</module>
            </modules>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>default-compile</id>
                                <configuration>
                                    <source>1.5</source>
                                    <target>1.5</target>
                                    <compilerArgs>
                                        <arg>-Xlint</arg>
                                        <arg>-Xlint:-serial</arg>
                                        <arg>-bootclasspath</arg>
                                        <arg>${bootclasspath.compile}</arg>
                                    </compilerArgs>
                                </configuration>
                            </execution>
                            <execution>
                                <id>default-testCompile</id>
                                <configuration>
                                    <source>1.6</source>
                                    <target>1.6</target>
                                    <compilerArgs>
                                        <arg>-Xlint</arg>
                                        <arg>-Xlint:-serial</arg>
                                        <arg>-bootclasspath</arg>
                                        <arg>${bootclasspath.testCompile}</arg>
                                    </compilerArgs>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <build>

        <defaultGoal>install</defaultGoal>

        <!--
            The following filter definition means that both the master
            project and the sub projects will read in a file in the same
            directory as the pom.xml is located and set any properties
            that are defined there in the standard x=y format. These
            properties can then be referenced via ${x} in any resource
            file specified in any pom. So, there is a master antlr.config
            file in the same location as this pom.xml file and here you can
            define anything that is relevant to all the modules that we
            build here. However each module also has an antlr.config file
            where you can override property values from the master file or
            define things that are only relevant to that module.
          -->
        <filters>
            <filter>antlr.config</filter>
        </filters>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.4</version>
                <configuration>
                    <archive>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <sourceDirectory>src</sourceDirectory>
                    <showWarnings>true</showWarnings>
                    <showDeprecation>true</showDeprecation>
                    <compilerArgs>
                        <arg>-Xlint</arg>
                        <arg>-Xlint:-serial</arg>
                    </compilerArgs>
                </configuration>

                <executions>
                    <execution>
                        <id>default-compile</id>
                        <configuration>
                            <source>1.5</source>
                            <target>1.5</target>
                        </configuration>
                    </execution>
                    <execution>
                        <id>default-testCompile</id>
                        <configuration>
                            <source>1.6</source>
                            <target>1.6</target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-release-plugin</artifactId>
                <!-- override the version inherited from the parent -->
                <version>2.5</version>
                <configuration>
                    <arguments>-Psonatype-oss-release ${release.arguments}</arguments>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <!-- override the version inherited from the parent -->
                <version>2.17</version>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>findbugs-maven-plugin</artifactId>
                <!-- override the version inherited from the parent -->
                <version>2.5.3</version>
                <configuration>
                    <findbugsXmlOutput>true</findbugsXmlOutput>
                    <xmlOutput>true</xmlOutput>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <!-- override the version inherited from the parent -->
                <version>2.2.1</version>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <!-- override the version inherited from the parent -->
                <version>2.9.1</version>
                <configuration>
                    <quiet>true</quiet>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-gpg-plugin</artifactId>
                <!-- override the version inherited from the parent -->
                <version>1.5</version>
            </plugin>

        </plugins>

    </build>

    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>2.9.1</version>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jxr-plugin</artifactId>
                <version>2.3</version>
            </plugin>
        </plugins>
    </reporting>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.antlr</groupId>
  <artifactId>antlr-runtime</artifactId>
  <packaging>jar</packaging>
  
  <!--

    Inherit from the ANTLR master pom, which tells us what
    version we are and allows us to inherit dependencies
    and so on.

    -->
  <parent>
      <groupId>org.antlr</groupId>
      <artifactId>antlr-master</artifactId>
      <version>3.5.3-SNAPSHOT</version>
      <relativePath>../..</relativePath>
  </parent>
  
  <name>ANTLR 3 Runtime</name>

  <description>A framework for constructing recognizers, compilers, and translators from grammatical descriptions containing Java, C#, C++, or Python actions.</description>
  <url>http://www.antlr.org</url>
      <developers>
        <developer>
            <name>Terence Parr</name>
            <organization>USFCA</organization>
            <organizationUrl>http://www.cs.usfca.edu</organizationUrl>
            <email>parrt@antlr.org</email>
            <roles>
                <role>Project Leader</role>
                <role>Developer - Java Target</role>
            </roles>
            <timezone>PST</timezone>
        </developer>
        <developer>
            <name>Jim Idle</name>
            <organization>Temporal Wave LLC</organization>
            <organizationUrl>http://www.temporal-wave.com</organizationUrl>
            <email>jimi@temporal-wave.com</email>
            <roles>
                <role>Developer - Maven stuff</role>
                <role>Developer - C Target</role>
            </roles>
            <timezone>PST</timezone>
        </developer>
    </developers>

  <dependencies>
    
    <dependency>
      <groupId>org.antlr</groupId>
      <artifactId>stringtemplate</artifactId>
      <scope>compile</scope>
      <optional>true</optional>
    </dependency>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
    </dependency>

  </dependencies>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <artifactId>antlr</artifactId>
    <packaging>jar</packaging>
    <name>ANTLR 3 Tool</name>
    <description>The ANTLR 3 tool.</description>

  <!--

    Inherit from the ANTLR master pom, which tells us what
    version we are and allows us to inherit dependencies
    and so on.

    -->
    <parent>
        <groupId>org.antlr</groupId>
        <artifactId>antlr-master</artifactId>
        <version>3.5.3-SNAPSHOT</version>
    </parent>

    <dependencies>
        <dependency>
            <groupId>org.antlr</groupId>
            <artifactId>antlr-runtime</artifactId>
            <version>${project.version}</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.antlr</groupId>
            <artifactId>ST4</artifactId>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>org.antlr</groupId>
            <artifactId>stringtemplate</artifactId>
            <scope>compile</scope>
            <optional>true</optional>
        </dependency>

    </dependencies>
  <!--

    Tell Maven which other artifacts we need in order to
    build, run and test the ANTLR Tool. The ANTLR Tool uses earlier versions
    of ANTLR at runtime (for the moment), uses the current
    released version of ANTLR String template, but obviously is
    reliant on the latest snapshot of the runtime, which will either be
    taken from the antlr-snapshot repository, or your local .m2
    repository if you built and installed that locally.

    -->


    <build>

        <plugins>

            <plugin>
                <groupId>org.antlr</groupId>
                <artifactId>antlr3-maven-plugin</artifactId>
                <version>3.5</version>
                <configuration>
                    <libDirectory>target/generated-sources/antlr/org/antlr/grammar/v3</libDirectory>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>antlr</goal>
                        </goals>
                    </execution>
                </executions>

            </plugin>

        </plugins>


    </build>
</project>
