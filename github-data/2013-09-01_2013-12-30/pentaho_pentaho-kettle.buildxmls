<!-- In order for this build file to be referenced by name on import into other build files, 
     it's much nicer to have a short name with no spaces. Please don't change it. -->
<project name="Kettle CE Assembly" basedir="." default="dist" xmlns:ivy="antlib:org.apache.ivy.ant">

  <!-- =================================================================================
       Property Defaults
       Any of these properties can be overridden in either assembly.properties or override.properties
       =================================================================================-->

  <!-- Load the properties files in the proper order -->
  <property file="override.properties"
            description="Properties customized for your development environment belong in this file.  This file will never be checked into the SCM." />
  <property file="build.properties"
            description="Properties customized for your particular project belong in this file." />
  
  <!-- the impl properties are used to create the manifest file -->
  <property name="impl.title" value="Kettle" />
  <property name="impl.version" value="${project.revision}" />
  <property name="impl.vendor" value="Pentaho Corporation" />
  
  <!-- override the default package-ivy.xml defined in common subfloor.pkg -->
    <property name="package.artifact.ivyfile"
              value="ivy.xml"
              description="The ivy file defining dependencies of the package" />
  

  <import file="build-res/subfloor-pkg.xml" />

  <target name="dist" depends="init,resolve,resolve-swtlibs,resolve-launcher,resolve-plugins,package" description="Builds and packages the application"/>
  	
  <target name="assemble-full" depends="init,resolve-all,assemble-plugins,assemble" description="Builds the application" />
	
  <target name="assemble-no-plugins" depends="init,resolve-all,assemble" description="Builds the application" />

  <target name="resolve-all" depends="init,resolve,resolve-swtlibs,resolve-launcher,resolve-plugins"/>

  <target name="assemble" depends="resolve-swtlibs,create-sampledb-from-sql,subfloor-pkg.assemble"
          description="copy jar files to distribution directory">
    <echo>Construct the distribution package...</echo>
    <!-- make JavaApplicationStub executable for OSX -->
    <chmod file="${approot.stage.dir}/Data Integration.app/Contents/MacOS/JavaApplicationStub" perm="ugo+rx"/>
  	<!-- insert version info into the canned info.plist -->
  	<replace file = "${approot.stage.dir}/Data Integration.app/Contents/Info.plist" token="@KETTLE_VERSION_STRING@" value="${dependency.kettle.revision}" />
  	<!-- Remove the SWT JAR used for compilation -->
  	<delete quiet="true">
  		<fileset dir="${approot.stage.dir}/lib" includes="swt*.jar" />
  	</delete>
  	
    <antcall target="unzip-swtlibs"/>
    
    <!-- Insert launcher revision number into batch files -->
    <replace dir="${approot.stage.dir}">
      <include name="**/*.bat"/>
    	<include name="**/*.sh"/>
    	<include name="**/*.plist"/>
      <replacefilter token="launcher.jar" value="pentaho-application-launcher-${dependency.launcher.revision}.jar"/>     
    </replace>
  	
    <replace dir="${approot.stage.dir}">
      <include name="*.bat"/>
      <include name="*.sh"/>
      <replacefilter token="@KETTLE_VERSION_STRING@" value="${dependency.kettle.revision}"/>     
    </replace>
  	
  	<chmod perm="a+x" dir="${approot.stage.dir}" includes="**/*.sh" />
  </target>
	
  <!--=======================================================================
      assemble-plugins
          
      Unzips the non-core plugin packages into the distribution area. 
    ====================================================================-->	
  <target name="assemble-plugins" depends="install-antcontrib,resolve-plugins" description="Unzip plugins to distribution directory">
    
  	<for param="plugin">
  	<path id="plugin-list">
  	  <fileset dir="${plugins.dir}">
  		<include name="*.zip"/>
  	  </fileset>
  	</path>
  	 <sequential>
  	 	<unzip src="@{plugin}" dest="${stage.dir}/${package.root.dir}/plugins" overwrite="true"/>
  	 </sequential>
  	</for>
    
    <delete dir="${plugins.dir}"/>
  </target>
	
	
	<!--=======================================================================
	      publish-local
	      
	      Builds and publishes the jar file for this project to the user's 
	      local repository for download by other projects currently being 
	      executed on the user's system.
	      ====================================================================-->
	  <target name="publish-local"
	          depends="assemble-full, package-zip, publish-local-nojar"
	          description="Builds and publishes the jar file to the local repository">
	  </target>


	  <!--=======================================================================
	        publish
	    
	        Creates and publishes the jar file for this project to a Maven2 
	        repository. 
	        ====================================================================-->
	 <target name="publish"
	         depends="assemble-full, package-zip, publish-nojar"
	         description="Builds and publishes the jar file to the local repository">
	 </target>
  
  <!-- Differs from subfloor by publishing the zip instead of jar --> 
  <target name="publish-nojar.internal" depends="install-antcontrib,create-pom,ivy.deliver">
    <antcall target="maven-publish-dependencies">
      <param name="publish.groupId" value="${ivy.artifact.group}" />
      <param name="publish.artifactId" value="${ivy.artifact.id}" />
      <param name="publish.version" value="${project.revision}" />
      <param name="publish.file" value="${ivy.artifact.ivypathname}" />
    </antcall>

    <if>
      <equals arg1="${source.publish}" arg2="true" />
        <then>
          <antcall target="maven-publish-sources">
            <param name="publish.groupId" value="${ivy.artifact.group}" />
            <param name="publish.artifactId" value="${ivy.artifact.id}" />
            <param name="publish.version" value="${project.revision}" />
            <param name="publish.file" value="${dist.dir}/${ivy.artifact.id}-${project.revision}-sources.jar" />
          </antcall>
        </then>
    </if>

    <antcall target="maven-publish-artifact">
      <param name="publish.pomFile" value="${ivy.artifact.pomfile}" />
      <param name="publish.file" value="${dist.dir}/${ivy.artifact.id}-${project.revision}.zip" />
    </antcall>

    <antcall target="maven-publish.post"/>
    
  </target>
    
          
	<!--=======================================================================
        resolve-swtlibs
        
        Resolved the swtlibs configuration from ivy.xml
    =====================================================================-->
  <target name="resolve-swtlibs" depends="install-ivy">
    <delete dir="${swtlib.dir}" />
    <ivy:resolve file="${ivyfile}" conf="test" />
    <ivy:retrieve conf="swtlibs" pattern="${swtlib.dir}/[module]-[revision](-[classifier]).[ext]" />
  </target>

  <target name="package.lib" depends="resolve">
    <jar jarfile="dist/${lib.zip.filename}" basedir="lib" />
  </target>	

  <target name="resolve-launcher" depends="install-ivy">
    <ivy:resolve file="${ivyfile}" conf="launcher" />
    <ivy:retrieve conf="launcher" pattern="${stage.dir}/${package.root.dir}/launcher/[module]-[revision](-[classifier]).[ext]" />
  </target>

  <target name="resolve-plugins" depends="install-ivy">
    <ivy:resolve file="${ivyfile}" conf="plugins" />
    <ivy:retrieve conf="plugins" pattern="${plugins.dir}/[module]-[revision](-[classifier]).[ext]" />
  </target>

  <target name="unzip-swtlibs">
	<!-- Unzip the libswt package into the libswt folder of the distribution -->
    <unzip dest="${approot.stage.dir}" overwrite="true">
      <fileset dir="${swtlib.dir}">
        <include name="**/*.zip"/>
      </fileset>
    </unzip>
  </target>

  <target name="create-sampledb-from-sql">
    <property name="samples.db.dir" value="${package.resdir}/samples/db"/>
    <echo message="${samples.db.dir}"/>
    <property file="${samples.db.dir}/sampledb.init.properties"/>
    <property name="db.postfix" value="db"/>
    <delete quiet="true" includeemptydirs="true">
      <dirset dir="${samples.db.dir}" includes="**/${sample.db.name}*${db.postfix}"/>
      <fileset dir="${samples.db.dir}" includes="**/${sample.db.name}*${db.postfix}"/>
    </delete>
    <echo message="${sample.db.url}${samples.db.dir}/${sample.db.name}" />
    <sql
        driver="${sample.db.driver}"
        url="${sample.db.url}${samples.db.dir}/${sample.db.name}"
        userid="${sample.db.driver}"
        password="${sample.db.password}"
        >
      <path>
        <fileset dir="${samples.db.dir}">
          <include name="**/*.sql"/>
        </fileset>
      </path>
      <classpath>
        <fileset dir="${lib.dir}">
          <include name="**/h2*.jar"/>
        </fileset>
      </classpath>
    </sql>
  </target>
</project>
<project name="Kettle" default="default" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

  <description>
    Kettle build file
  </description>

  <tstamp prefix="start"/>

  <tstamp>
    <format property="compile.timestamp" pattern="yyyy-MM-dd HH.mm.ss"/>
  </tstamp>

  <property name="kettle.ivydist.dir"
            value="${basedir}/ivydist"
            description="Directory that hosts Jar files required to compile project source.  (IVY will populate this directory with required jars)"/>

  <property name="plugins.publish-local"
            value="true"
            description="Whether to publish plugins locally during the build process. CI should override this or call publish-local-plugins"/>

  <property name="modules.publish-local"
            value="true"
            description="Whether to publish modules locally during the build process. CI should override this"/>

  <property name="pdi.plugins.dir"
            value="${assembly.stage.pdi-client.dir}/plugins"
            description="The staging area for plugins"/>

  <property name="ivy.default.ivy.user.dir" value="${user.home}/.ivy2"/>
  <property name="ivy.local.default.root" value="${ivy.default.ivy.user.dir}/local"/>


  <!-- Look for user-override properties file first -->
  <property file="override.properties"/>
  <!-- set global properties for this build -->
  <property file="build.properties"/>

  <!--Import Open Assembly ant file -->
  <import file="build-res/subfloor.xml"/>


  <!-- - - - - - - - - - - - - - - - - -
             Macro for making resolving ivy a 1 liner.  Tasks using this must depend on install-ivy.
  - - - - - - - - - - - - - - - - - -->
  <macrodef name="ivy-resolve">
    <attribute name="ivyfile" default="${ivyfile}"/>
    <attribute name="conf" default="default"/>
    <attribute name="directory"/>
    <sequential>
      <mkdir dir="@{directory}"/>
      <ivy:resolve file="@{ivyfile}" conf="@{conf}"/>
      <ivy:retrieve conf="@{conf}" pattern="@{directory}/[module]-[revision](-[classifier]).[ext]"/>
    </sequential>
  </macrodef>

  <target name="iterate-target">
    <for list="${subproject.list}" param="subproject" trim="true">
      <sequential>
        <echo message="${subproject.basedir}"/>
        <ant antfile="build.xml" dir="${subproject.basedir}/@{subproject}" inheritall="false">
          <target name="${target.name}"/>
        </ant>
      </sequential>
    </for>
  </target>

  <target name="call-for-all">
    <ant>
      <property name="subproject.list" value="${module.list}"/>
      <property name="subproject.basedir" value="."/>
      <target name="iterate-target"/>
    </ant>
    <ant>
      <property name="subproject.list" value="${plugin.list}"/>
      <property name="subproject.basedir" value="plugins"/>
      <target name="iterate-target"/>
    </ant>
  </target>

  <target name="build" depends="build-publish-modules,build-publish-plugins"/>

  <target name="clean" depends="install-antcontrib,subfloor.clean">
    <antcall target="call-for-all">
      <param name="target.name" value="clean"/>
    </antcall>
  </target>

  <target name="clean-jars" depends="install-antcontrib,subfloor.clean-jars">
    <antcall target="call-for-all">
      <param name="target.name" value="clean-jars"/>
    </antcall>
  </target>

  <target name="compile" depends="install-antcontrib">
    <echo
        message="The compile target is not supported at the root level. Please see README.txt for instructions on build and compilation"/>
  </target>

  <target name="compile-tests" depends="install-antcontrib">
    <antcall target="call-for-all">
      <param name="target.name" value="compile-tests"/>
    </antcall>
  </target>

  <target name="build-modules"
          description="Builds each Kettle plugin (in the source tree)"
          depends="install-antcontrib">
    <for list="${module.list}" param="module" trim="true">
      <sequential>
        <ant antfile="build.xml" dir="@{module}" inheritall="false">
          <target name="resolve"/>
          <target name="dist"/>
        </ant>
      </sequential>
    </for>
  </target>

  <target name="build-publish-modules"
          description="Builds each Kettle module and publishes the artifacts."
          depends="install-antcontrib">

    <for list="${module.list}" param="module" trim="true">
      <sequential>
        <if>
          <equals arg1="${modules.publish-local}" arg2="true"/>
          <then>
            <ant antfile="build.xml" dir="@{module}" inheritall="false">
              <target name="resolve"/>
              <target name="publish-local"/>
            </ant>
          </then>
          <else>
            <ant antfile="build.xml" dir="@{module}" inheritall="false">
              <target name="resolve"/>
              <target name="publish"/>
            </ant>
          </else>
        </if>
      </sequential>
    </for>
  </target>

  <target name="build-plugins"
          description="Builds each Kettle plugin (in the source tree)"
          depends="install-antcontrib">
    <for list="${plugin.list}" param="plugin" trim="true">
      <sequential>
        <ant antfile="build.xml" dir="plugins/@{plugin}" inheritall="false">
          <target name="resolve"/>
          <target name="package"/>
        </ant>
      </sequential>
    </for>
  </target>

  <target name="build-publish-plugins"
          description="Builds each Kettle module and publishes the artifacts."
          depends="install-antcontrib">

    <for list="${plugin.list}" param="plugin" trim="true">
      <sequential>
        <if>
          <equals arg1="${plugins.publish-local}" arg2="true"/>
          <then>
            <ant antfile="build.xml" dir="plugins/@{plugin}" inheritall="false">
              <target name="resolve"/>
              <target name="package"/>
              <target name="publish-local"/>
            </ant>
          </then>
          <else>
            <ant antfile="build.xml" dir="plugins/@{plugin}" inheritall="false">
              <target name="resolve"/>
              <target name="package"/>
              <target name="publish"/>
            </ant>
          </else>
        </if>
      </sequential>
    </for>
  </target>

  <!-- Distribution task for Kettle. This provides the "old" functionality of having a "dist" folder
       under Kettle root containing a runnable instance of what is now the assembly. Thus the
       approach is to perform an assembly, then move the assembly's staging area to "dist" -->
  <target name="dist" depends="build">
    <ant antfile="assembly/build.xml" inheritall="false">
      <target name="clean-all"/>
      <target name="assemble-full"/>
    </ant>
    <move todir="${distrib}">
      <fileset dir="${assembly.stage.pdi-client.dir}"/>
    </move>
  </target>

  <target name="test" depends="install-antcontrib">
    <for list="${module.list}" param="module" trim="true">
      <sequential>
        <ant antfile="build.xml" dir="@{module}" inheritall="false">
          <target name="resolve"/>
          <target name="test"/>
        </ant>
      </sequential>
    </for>
    <for list="${plugin.list}" param="plugin" trim="true">
      <sequential>
        <ant antfile="build.xml" dir="plugins/@{plugin}" inheritall="false">
          <target name="resolve"/>
          <target name="test"/>
        </ant>
      </sequential>
    </for>
  </target>

  <!--=======================================================================
        create-dot-classpath

        Creates the Eclipse .classpath file from the resolved
        classpath from Ant.
      ====================================================================-->
  <target name="create-dot-classpath"
          depends="install-pentaho-ant-tasks,resolve-init,init,resolve,update-launch-config">
    <!-- call the assembly's resolve then create-dot-classpath -->
    <ant antfile="build.xml" dir="${assembly.dir}" inheritall="false">
      <target name="resolve"/>
      <target name="resolve-swtlibs"/>
      <property name="approot.stage.dir" value="${basedir}"/>
      <target name="unzip-swtlibs"/>
    </ant>
    <copy file="classpath.template" tofile=".classpath" overwrite="true"/>
    <switch value="${os.classifier}">
      <case value="win">
        <property name="platform" value="win"/>
        <switch value="${os.arch}">
          <case value="x86">
            <property name="arch" value="32"/>
          </case>
          <default>
            <property name="arch" value="64"/>
          </default>
        </switch>
      </case>
      <case value="linux">
        <property name="platform" value="linux"/>
        <switch value="${os.arch}">
          <case value="x86">
            <property name="arch" value="/x86"/>
          </case>
          <default>
            <property name="arch" value="/x86_64"/>
          </default>
        </switch>
      </case>
      <case value="mac">
        <property name="platform" value="osx"/>
        <switch value="${os.arch}">
          <case value="x86">
            <property name="arch" value=""/>
          </case>
          <default>
            <property name="arch" value="64"/>
          </default>
        </switch>
      </case>
    </switch>
    <echo message="Including swt.jar at ${libswt}/${platform}${arch}/swt.jar"/>

    <dot-classpath>
      <classpath>
        <fileset dir="${lib.dir}">
          <include name="*.jar"/>
          <exclude name="swt-linux*.jar"/>
          <exclude name="kettle-*.jar"/>
        </fileset>
        <fileset dir="${testlib.dir}">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${libswt}">
          <include name="${platform}${arch}/swt.jar"/>
        </fileset>
      </classpath>
    </dot-classpath>
  </target>

  <!--=======================================================================
          update-launch-config

          Creates an Eclipse launch configuration from a template using the
          project directory name as the project name, location, etc.
        ====================================================================-->
  <target name="update-launch-config" depends="install-antcontrib">
    <basename property="project.dir.name" file="${basedir}"/>
    <available file="${basedir}/${project.dir.name}.launch" property="launch.config.exists"/>
    <available file="${basedir}/project.launch" property="project-dot-launch.exists"/>
    <if>
      <and>
        <isfalse value="${launch.config.exists}"/>
        <istrue value="${project-dot-launch.exists}"/>
      </and>
      <then>
        <copy file="${basedir}/project.launch" tofile="${basedir}/${project.dir.name}.launch"/>
        <replace file="${basedir}/${project.dir.name}.launch" token="@@@" value="${project.dir.name}"/>
        <echo message="NOTE: You must restart Eclipse to enable the use of the launch configuration."/>
      </then>
      <else>
        <echo message="The launch configuration already exists, or no project.launch file exists."/>
      </else>
    </if>
  </target>


  <!--=======================================================================
      cobertura.instrument-classes

      Instruments the application classes used by Cobertura during cobertura.test-instrumented
      ====================================================================-->
  <target name="cobertura.instrument-classes" depends="cobertura.clean-instrumented-classes,install-cobertura,compile">
    <cobertura-instrument todir="${instrumented.classes.dir}" datafile="${cobertura.data.dir}/cobertura.ser">
      <ignore regex="org.apache.log4j.*"/>
      <!--
        Instrument all the application classes, but
        don't instrument the test classes.
      -->
      <fileset dir="core/bin/classes" includes="**/*.class"/>
      <fileset dir="engine/bin/classes" includes="**/*.class"/>
      <fileset dir="dbdialog/bin/classes" includes="**/*.class"/>
      <fileset dir="ui/bin/classes" includes="**/*.class"/>

    </cobertura-instrument>
  </target>

  <target name="cobertura.test-instrumented"
          depends="init-test-reports,install-cobertura,build-modules,cobertura.instrument-classes">
    <mkdir dir="${instrumented.classes.dir}"/>
    <path id="cobertura.classpath">
      <fileset dir="${subfloor.resources.dir}/cobertura-${cobertura.version}">
        <include name="*.jar"/>
      </fileset>
    </path>
    <!-- call build-path-dirs looking for all subprojects' class directories -->
    <antcallback target="build-path-dirs" return="build-path-dirs.return">
      <param name="subproject.list" value="${module.list}"/>
      <param name="build-path-dirs.basedir" value="bin/${classes}"/>
    </antcallback>
    <var name="module-src-class-dirs" value="${build-path-dirs.return}"/>

    <!-- call build-path-dirs looking for all subprojects' class directories -->
    <antcallback target="build-path-dirs" return="build-path-dirs.return">
      <param name="subproject.list" value="${module.list}"/>
      <param name="build-path-dirs.basedir" value="bin/test/${classes}"/>
    </antcallback>
    <var name="module-test-class-dirs" value="${build-path-dirs.return}"/>

    <!-- Build a module classpath pointing at all class directories. -->
    <path id="module-src.classpath">
      <pathelement path="${module-src-class-dirs}"/>
      <pathelement path="${module-test-class-dirs}"/>
      <pathelement location="core/bin/test/classes"/>
      <pathelement location="engine/bin/test/classes"/>
      <pathelement location="dbdialog/bin/test/classes"/>
      <pathelement location="ui/bin/test/classes"/>
    </path>

    <junit fork="yes"
           forkmode="${junit.forkmode}"
           dir="${junit.base.dir}"
           maxmemory="${junit.maxmemory}"
           failureProperty="test.failed"
           haltonerror="${junit.haltonerror}"
           haltonfailure="${junit.haltonfailure}">
      <sysproperty key="java.awt.headless" value="${headless.unittest}"/>

      <!-- Specify the name of the coverage data file to use. -->
      <sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.data.dir}/cobertura.ser"/>

      <syspropertyset>
        <propertyref prefix="junit.sysprop."/>
        <mapper type="glob" from="junit.sysprop.*" to="*"/>
      </syspropertyset>

      <!--
        Note the classpath order: instrumented classes are before the
        original (uninstrumented) classes.  This is important.
      -->
      <classpath location="${instrumented.classes.dir}"/>
      <classpath refid="module-src.classpath"/>
      <classpath refid="test.classpath"/>
      <classpath refid="cobertura.classpath"/>

      <formatter type="xml"/>
      <test name="${testcase}" todir="${testreports.xml.dir}" if="testcase"/>
      <batchtest todir="${testreports.xml.dir}" unless="testcase">
        <fileset dir="core/test-src" includes="**/*Test.java"/>
        <fileset dir="engine/test-src" includes="**/*Test.java"/>
        <fileset dir="dbdialog/test-src" includes="**/*Test.java"/>
        <fileset dir="ui/test-src" includes="**/*Test.java"/>
      </batchtest>
    </junit>

    <junitreport todir="${testreports.html.dir}">
      <fileset dir="${testreports.xml.dir}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${testreports.html.dir}"/>
    </junitreport>
  </target>

  <!--=======================================================================
      cobertura.xml-report

      Produces machine-readable xml Cobertura coverage report from results of instrumented tests
      ====================================================================-->
  <target name="cobertura.xml-report" depends="cobertura.test-instrumented">

    <cobertura-report destdir="${coberturareports.xml.dir}" datafile="${cobertura.data.dir}/cobertura.ser" format="xml">
      <fileset dir="core/src" includes="**/*.java"/>
      <fileset dir="engine/src" includes="**/*.java"/>
      <fileset dir="dbdialog/src" includes="**/*.java"/>
      <fileset dir="ui/src" includes="**/*.java"/>
    </cobertura-report>
  </target>


  <!--=======================================================================
      cobertura.html-report

      Produces human-readable html Cobertura coverage report from results of instrumented tests
      ====================================================================-->
  <target name="cobertura.html-report" depends="cobertura.test-instrumented">
    <cobertura-report destdir="${coberturareports.html.dir}"
                      datafile="${cobertura.data.dir}/cobertura.ser"
                      format="html">
      <fileset dir="core/src" includes="**/*.java"/>
      <fileset dir="engine/src" includes="**/*.java"/>
      <fileset dir="dbdialog/src" includes="**/*.java"/>
      <fileset dir="ui/src" includes="**/*.java"/>
    </cobertura-report>
  </target>

  <target name="build-path" depends="install-antcontrib">
    <var name="build-path.return" value=""/>
    <for list="${subproject.list}" param="subproject" trim="true">
      <sequential>
        <path id="@{subproject}.path">
          <fileset dir="@{subproject}/${build-path.basedir}">
            <patternset includes="${build-path.includes}" excludes="${build-path.excludes}"/>
          </fileset>
        </path>
        <var name="build-path.return" value="${build-path.return}:${toString:@{subproject}.path}"/>
      </sequential>
    </for>
  </target>

  <target name="build-path-dirs" depends="install-antcontrib">
    <var name="build-path-dirs.return" value=""/>
    <for list="${subproject.list}" param="subproject" trim="true">
      <sequential>
        <path id="@{subproject}.path">
          <pathelement location="@{subproject}/${build-path-dirs.basedir}"/>
        </path>
        <var name="build-path-dirs.return" value="${build-path-dirs.return}:${toString:@{subproject}.path}"/>
      </sequential>
    </for>
    <echo message="build-path-dirs.return = ${build-path-dirs.return}"/>
  </target>

  <!--
    BEFORE USING : Please download JarBundler version 1.9 and unzip it in tools/libant/
    http://informagen.com/JarBundler/
  -->

  <target name="macapplication" depends="dist" description="Build OS X executable">

    <delete dir="${macdistrib}/${ant.project.name}.app"/>
    <delete>
      <fileset dir="${macdistrib}">
        <include name="*.dmg"/>
      </fileset>
    </delete>

    <taskdef name="jarbundler"
             classpath="${jarbundler.jar}"
             classname="net.sourceforge.jarbundler.JarBundler"/>
    <jarbundler dir="${macdistrib}"
                name="${ant.project.name}"
                mainclass="org.pentaho.di.ui.spoon.Spoon"
                icon="${ui}/images/spoon32.icns"
                version="${version}"
                verbose="true"
                VMOptions="${macappmaxmem} ${macappextravmoptions}"
                shortname="Spoon"
                arguments=""
                workingdirectory="$APP_PACKAGE/Contents/Resources/Java"
                jvmversion="1.5+">
      <javaproperty name="java.library.path" value="$APP_PACKAGE/Contents/Resources/Java"/>
      <jarfileset dir="${distrib}">
        <include name="${lib.dir}/*.jar"/>
        <include name="${libext}/*.jar"/>
        <include name="${libext}/**/*.jar"/>
        <include name="${libswt}/*.jar"/>
        <include name="${libswt}/osx/*.jar"/>
        <include name="${libswt}/osx/java_swt"/>
        <include name="${samples}/**/*"/>
        <include name="${docs}/**/*"/>
        <include name="README_OSX.txt"/>
        <include name="*.sh"/>
        <include name="simple-jndi/**/*"/>
        <include name="pwd/**/*"/>
        <include name="plugins/**/*"/>
        <include name="ui/*"/>
        <include name="ui/**/*"/>
      </jarfileset>
    </jarbundler>
    <!-- patch Info.plist with StartOnMainThread property need to make sure that the token is in the right place-->
    <replace file="${macdistrib}/${ant.project.name}.app/Contents/Info.plist" token="&lt;key&gt;ClassPath"
             value="&lt;key&gt;StartOnMainThread&lt;/key&gt;&lt;true/&gt; &lt;key&gt;ClassPath"/>
    <!-- Create a .dmg file containing the app and docs -->
    <echo>Creating .dmg package...</echo>
    <exec executable="/usr/bin/hdiutil" os="Mac OS X">
      <arg value="create"/>
      <arg value="-srcfolder"/>
      <arg value="${macdistrib}"/>
      <arg value="-volname"/>
      <arg value="${ant.project.name} ${version}"/>
      <arg value="-ov"/>
      <arg value="${macdistrib}/${impl.productID}-${version}.dmg"/>
    </exec>
  </target>

  <!--
       ==========================
          Compile the test code
       ==========================
  -->

  <target name="compile-integration-tests" description="compile the tests" depends="tests-stage">
    <echo>Compiling Kettle tests...</echo>
    <javac fork="true"
           srcdir="${test}"
           destdir="${testClasses}"
           target="7"
           source="6"
           deprecation="true"
           debug="true"
           includeantruntime="false"
           encoding="utf-8"
        >

      <classpath id="cp-kettle-test">
        <fileset dir="${dist.dir}/${lib.dir}" includes="**/*.jar"/>
        <fileset dir="${dist.dir}/plugins/kettle-gpload-plugin/" includes="*.jar"/>
        <fileset dir="${testlibext}" includes="*.jar"/>
        <fileset dir="${dist.dir}/${libswt}" includes="*.jar *.zip"/>
        <fileset dir="${dist.dir}/${libswt}/win32/" includes="*.jar *.zip"/>
        <fileset dir="${dist.dir}/${libswt}" includes="common.jar"/>
      </classpath>
    </javac>
  </target>


  <target name="tests-all"
          depends="tests-clean, tests-stage, tests-core, tests-trans, tests-run, tests-blackbox"/>

  <target name="tests-stage-init" depends="init, resolve, init-tests, init-test-reports">
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${dist.dir}/testfiles"/>
    <mkdir dir="${dist.dir}/test"/>
  </target>

  <target name="tests-clean">
    <delete dir="${dist.dir}/testfiles" quiet="true"/>
    <delete dir="${dist.dir}/test" quiet="true"/>
  </target>

  <target name="tests-stage" depends="tests-stage-init, dist">
    <copy todir="${dist.dir}">
      <fileset dir="${dist.dir}"/>
    </copy>
    <copy todir="${dist.dir}/testfiles">
      <fileset dir="${basedir}/testfiles"/>
    </copy>
    <copy todir="${dist.dir}/test">
      <fileset dir="${basedir}/test">
        <exclude name="**/*.java"/>
      </fileset>
    </copy>
  </target>

  <!--
         ===========================================
            tests : junit core tests
         ============================================
    -->
  <target name="tests-core" depends="compile-integration-tests" description="Execute the core tests">

    <junit printsummary="no" dir="${basedir}/${dist.dir}" fork="yes" forkmode="perTest"
           jvm="java" maxmemory="512M" showoutput="yes">
      <classpath>
        <fileset dir="${dist.dir}/${lib.dir}" includes="kettle-core*.jar"/>
        <fileset dir="${dist.dir}/${lib.dir}" includes="kettle-engine*.jar"/>
        <fileset dir="test/libext/" includes="*.jar"/>
        <pathelement path="${testClasses}"/>

        <fileset dir="${dist.dir}/${lib.dir}" includes="*.jar *.zip"/>
        <fileset dir="${dist.dir}/${libswt}" includes="*.jar *.zip"/>
        <fileset dir="${dist.dir}/${libswt}/win32/" includes="*.jar *.zip"/>
      </classpath>

      <formatter type="xml"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.core.KettleEnvironmentTest" haltonerror="false" />
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.core.database.DatabaseTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.core.database.SelectCountTests" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.core.database.SQLStatementParserTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.core.database.ReleaseSavePointTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.core.database.TablespaceDDLFragmentTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.core.database.VerticaDatabaseMetaTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.core.row.ValueDataUtilTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.imp.rule.DatabaseConfigurationImportRuleTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.imp.rule.JobHasANoteImportRuleTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.imp.rule.TransformationHasANoteImportRuleTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.imp.rule.JobHasDescriptionImportRuleTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.imp.rule.TransformationHasDescriptionImportRuleTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.imp.rule.JobHasJobLogConfiguredImportRuleTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}"
            name="org.pentaho.di.imp.rule.TransformationHasTransLogConfiguredImportRuleTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.imp.rule.TransformationHasNoDisabledHopsImportRuleTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.imp.rule.JobHasNoDisabledHopsImportRuleTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.repository.KettleDatabaseRepositoryTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.repository.KettleFileRepositoryTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.repository.RepositoryImportExporterApiTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.repository.RepositoryUnitTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.core.sql.SqlTransMetaTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.core.logging.MetricsTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.core.parameters.ParameterSimpleTransTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.core.plugins.PluginRegistryTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.core.util.StringEvaluatorTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.core.vfs.VfsCoreTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.resource.NameResourceTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.resource.ResourceDependencyTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.resource.ResourceExportTest" haltonerror="false"/>

    </junit>
    <junitreport todir="${testreports.html.dir}">
      <fileset dir="${testreports.xml.dir}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${testreports.html.dir}"/>
    </junitreport>

  </target>

  <!--
         ===========================================
             tests : junit transformation tests
         ============================================
    -->
  <target name="tests-trans" depends="compile-integration-tests" description="Execute the transformation tests">


    <junit printsummary="no" dir="${basedir}/${dist.dir}" fork="yes" forkmode="perTest"
           jvm="java" maxmemory="512M" showoutput="yes">
      <classpath>
        <fileset dir="${dist.dir}/${lib.dir}" includes="kettle-core*.jar,kettle-engine*.jar"/>
        <fileset dir="${dist.dir}/plugins/kettle-gpload-plugin/" includes="*.jar"/>
        <fileset dir="test/libext/" includes="*.jar"/>
        <pathelement path="${testClasses}"/>

        <fileset dir="${dist.dir}/${lib.dir}" includes="*.jar *.zip"/>
        <fileset dir="${dist.dir}/${libswt}" includes="*.jar *.zip"/>
        <fileset dir="${dist.dir}/${libswt}/win32/" includes="*.jar *.zip"/>
      </classpath>

      <formatter type="xml"/>

      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.HopTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.NormalExecutionTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.RowProducerTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.TransSingleThreadTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.WordCountSingleThreadTest" haltonerror="false"/>

      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.addsequence.AddSequenceTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.append.AppendTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.blockingstep.BlockingStepTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.checksum.CheckSumTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.combinationlookup.CombinationLookupTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.constant.ConstantTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.calculator.CalculatorTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.csvinput.CsvInput1Test"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.csvinput.CsvInput2Test"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.csvinput.CsvInput1NoTrailingSpaceTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.csvinput.CsvInput1TrailingSpaceTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}"
            name="org.pentaho.di.trans.steps.csvinput.CsvInput2TrailingSpacesThreeCharEnclosuresTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}"
            name="org.pentaho.di.trans.steps.csvinput.CsvInput2TrailingSpacesTwoCharEnclosuresTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.databaselookup.DatabaseLookupTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.detectlastrow.DetectLastRowStepTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.excelinput.JxlWorkBookTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.excelinput.OdsWorkBookTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.excelinput.PoiWorkBookTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.execsqlrow.ExecSQLRowTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.getxmldata.GetXMLDataTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.injector.InjectorTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.insertupdate.InsertUpdateTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.janino.JaninoStepTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.jsonoutput.JsonOutputTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.mailvalidator.MailValidationTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.mapping.RunMapping" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.mapping.MappingTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.metainject.MetaInjectTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.nullif.NullIfTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.numberrange.NumberRangeRuleTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.numberrange.NumberRangeSetTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.regexeval.RegexEvalTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.rowgenerator.RowGeneratorTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.scriptvalues_mod.JavaScriptSpecialTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.scriptvalues_mod.JavaScriptStringTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.sort.SortRowsTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.tableoutput.TableOutputTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.tableinput.TableInputTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.textfileinput.TextFileInputTests"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.textfileoutput.TextFileOutputTests"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.unique.UniqueRowsTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.update.UpdateTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.valuemapper.ValueMapperTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.splitfieldtorows.SplitFieldToRowsTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.xslt.XsltTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.core.database.SequenceMetaTests" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.terafast.FastloadControlBuilderTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.gpload.GPLoadTest"
            haltonerror="false"/>
    </junit>
    <junitreport todir="${testreports.html.dir}">
      <fileset dir="${testreports.xml.dir}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${testreports.html.dir}"/>
    </junitreport>
  </target>

  <!--
    ===========================================
       tests : junit black box tests
    ============================================
  -->
  <target name="tests-blackbox" depends="compile-integration-tests"
          description="Execute the black box transformation tests">

    <junit printsummary="no" dir="${basedir}/${dist.dir}" fork="yes" forkmode="perTest"
           jvm="java" maxmemory="512M" showoutput="yes">
      <classpath>
        <fileset dir="${dist.dir}/${lib.dir}" includes="kettle-core*.jar,kettle-engine*.jar"/>
        <fileset dir="test/libext/" includes="*.jar"/>
        <pathelement path="${testClasses}"/>
        <pathelement path="${dist.dir}/testfiles"/>
        <fileset dir="${dist.dir}/${lib.dir}" includes="*.jar *.zip"/>
        <fileset dir="${dist.dir}/${libswt}" includes="*.jar *.zip"/>
        <fileset dir="${dist.dir}/${libswt}/win32/" includes="*.jar *.zip"/>
      </classpath>

      <formatter type="xml"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.job.JobTrackerExecutionTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.tablecompare.TableCompareTest" haltonerror="false" />
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.blackbox.BlackBoxTests" haltonerror="false" />
    </junit>
    <junitreport todir="${testreports.html.dir}">
      <fileset dir="${testreports.xml.dir}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${testreports.html.dir}"/>
    </junitreport>

  </target>

  <!--
         ===========================================
            tests : junit run tests
         ============================================
    -->

  <target name="tests-run" depends="compile-integration-tests" description="Execute the transformation run tests">

    <junit printsummary="no" dir="${basedir}/${dist.dir}" fork="yes" forkmode="perTest"
           jvm="java" maxmemory="512M" showoutput="yes">
      <classpath>
        <fileset dir="${dist.dir}/${lib.dir}" includes="kettle-core*.jar,kettle-engine*.jar"/>
        <fileset dir="test/libext/" includes="*.jar"/>
        <pathelement path="${testClasses}"/>

        <fileset dir="${dist.dir}/${lib.dir}" includes="*.jar"/>
        <fileset dir="${dist.dir}/${libswt}" includes="*.jar *.zip"/>
        <fileset dir="${dist.dir}/${libswt}/win32/" includes="*.jar *.zip"/>
      </classpath>

      <formatter type="xml"/>

      <test todir="${testreports.xml.dir}" name="org.pentaho.di.cluster.CarteLauncherTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.cluster.MasterSlaveTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.cluster.PartitioningTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.cluster.SlaveSequenceTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.www.CarteTest" haltonerror="false"/>

      <!-- Some extra things to run -->
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.job.entries.copyfiles.CopyFilesTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.kitchen.KitchenTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.www.TransformationMapTest" haltonerror="false"/>
    </junit>

    <junitreport todir="${testreports.html.dir}">
      <fileset dir="${testreports.xml.dir}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${testreports.html.dir}"/>
    </junitreport>
  </target>

  <!--
    =============================================================================
       checkstyle.xml-report : Produces machine-readable xml Checkstyle report
    =============================================================================
  -->
  <target name="checkstyle.xml-report" depends="install-ivy">
    <delete dir="${checkstyle.reports.dir}/xml"/>

    <mkdir dir="${checkstyle.dir}/lib"/>
    <ivy-resolve directory="${checkstyle.lib.dir}" ivyfile="${ivyfile}" conf="checkstyle"/>

    <taskdef resource="checkstyletask.properties">
      <classpath>
        <fileset dir="${checkstyle.lib.dir}" includes="*.jar"/>
      </classpath>
    </taskdef>

    <get usetimestamp="true" src="${checkstyle.config.url}" dest="${checkstyle.config.file}"/>
    <get usetimestamp="true" src="${checkstyle.suppressions.url}" dest="${checkstyle.suppressions.file}"/>

    <mkdir dir="${checkstyle.reports.dir}/xml"/>
    <for list="${module.list}" param="module" trim="true">
      <sequential>
        <checkstyle config="${checkstyle.config.file}" failonviolation="false">
          <property key="samedir" value="${checkstyle.dir}"/>
          <fileset dir="@{module}/src" includes="**/*.java"/>
          <fileset dir="@{module}/test-src" includes="**/*.java" erroronmissingdir="false"/>
          <formatter type="xml" tofile="${checkstyle.reports.dir}/xml/@{module}-checkstyle-result.xml"/>
        </checkstyle>
      </sequential>
    </for>
  </target>

  <!--
    ==============================================================================
       checkstyle.html-report :  Produces human-readable html Checkstyle report
    ==============================================================================
  -->
  <target name="checkstyle.html-report" depends="checkstyle.xml-report">
    <delete dir="${checkstyle.reports.dir}/html"/>
    <mkdir dir="${checkstyle.reports.dir}/html"/>
    <xslt style="${checkstyle.stylesheet.file}" basedir="${checkstyle.reports.dir}/xml"
          includes="*-checkstyle-result.xml" destdir="${checkstyle.reports.dir}/html"/>
  </target>
</project>
<!--===========================================================================
  This is the build file for the Pentaho Data Integration (Kettle) core module.
  
  This build file will use the subfloor.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.
  
  See common_build.xml for more details
============================================================================-->
<project name="kettle-core" basedir="." default="default">

  <description>
    This build file is used to create the API project
    and works with the subfloor.xml file.
  </description>

  <!-- The continuous target is used by CI ... this is the list of -->
  <!-- tasks that the CI machine will run.                         -->
  <!-- DO NOT change the CI machine's ant task .. change this list -->
  <target name="continuous" 
          depends="clean-all,resolve,publish" />

  <!-- Import the common_build.xml file which contains all the default tasks -->
  <import file="build-res/subfloor.xml"/>

    <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN common_build.xml.
    --> 
    
	<target name="create-dot-classpath" depends="init,resolve,subfloor.create-dot-classpath"/>
	
	<target name="default" depends="clean,init,resolve,dist"/>
	    
  <target name="set-revision">
    <condition property="revision" value="${svn-revision}" else="1">
        <length string="${svn-revision}" length="7" when="less"/>
    </condition>
    
    <echo message="Revision set to r${revision}"/>
  </target>
	
  <target name="set-compile-info">
  	<tstamp>
  	  <format property="compile.timestamp" pattern="yyyy-MM-dd HH.mm.ss" />
  	</tstamp>
  </target>

  <!--=======================================================================
      generate.manifest
      
      Creates a new manifest file if one is not specified, or updates
      an existing manifest file if one is specified.
      ====================================================================-->
  <target name="generate.manifest" depends="init,set-build.id,set-revision,set-compile-info">
    <delete file="${dist.manifest.file}" />
    <touch file="${dist.manifest.file}" />
    <copy file="${manifest.file}" tofile="${dist.manifest.file}" overwrite="true" failonerror="false" />

    <manifest file="${dist.manifest.file}" mode="update">
      <attribute name="Implementation-Title" value="${impl.title}" />
      <attribute name="Implementation-Version" value="${impl.version}" />
      <attribute name="Specification-Version" value="${revision}" />
      <attribute name="Implementation-Vendor" value="${impl.vendor}" />
      <attribute name="Implementation-ProductID" value="${impl.productID}" />
      <attribute name="Compile-Timestamp" value="${compile.timestamp}" />
      <attribute name="Compile-User" value="${user.name}" />
    </manifest>
  </target>

</project>
<project name="kettle-dbdialog" default="default" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

	  <description>
	      Kettle DBDialog build file
	  </description>
	 
	 <import file="build-res/subfloor.xml" />
	  
	  <tstamp prefix="start"/>
	
        <tstamp>
           <format property="compile.timestamp" pattern="yyyy-MM-dd HH.mm.ss" />
        </tstamp>

        <!-- Look for user-override properties file first -->        
		<property file="override.properties"/>
        <!-- set global properties for this build -->
		<property file="build.properties"/>
	  				
	  <!--=======================================================================
	      install-antcontrib (borrowed from subfloor.xml)
	      
	      (Fetches and) installs ant-contrib tasks.
	      ====================================================================-->
	  <target name="install-antcontrib" depends="antcontrib.download-check">
	    <taskdef resource="net/sf/antcontrib/antlib.xml">
	      <classpath>
	        <fileset dir="${user.home}/.subfloor/ant-contrib">
	          <include name="*.jar" />
	        </fileset>
	      </classpath>
	    </taskdef>
	  </target>
	
	  <!--=======================================================================
	      antcontrib.download-check (borrowed from subfloor.xml)
	      
	      Fetches ant-contrib from sourceforge if it is not already present
	      ====================================================================-->
	  <target name="antcontrib.download-check">
	    <condition property="antcontrib.available">
	      <and>
	        <available file="${user.home}/.subfloor/ant-contrib" />
	        <available classname="net.sf.antcontrib.logic.IfTask">
	          <classpath>
	            <fileset dir="${user.home}/.subfloor/ant-contrib">
	              <include name="*.jar" />
	            </fileset>
	          </classpath>
	        </available>
	      </and>
	    </condition>
	    <antcall target="antcontrib.download" />
	  </target>
	
	
	  <!--=======================================================================
	      antcontrib.download (borrowed from subfloor.xml)
	      
	      Fetches ant-contrib from sourceforge
	      ====================================================================-->
	  <target name="antcontrib.download" unless="antcontrib.available">
	    <mkdir dir="${user.home}/.subfloor/tmp" />
	    <get src="http://downloads.sourceforge.net/ant-contrib/ant-contrib-1.0b3-bin.zip"
	         dest="${user.home}/.subfloor/tmp/antcontrib.zip"
	         usetimestamp="true" />
	    <unzip src="${user.home}/.subfloor/tmp/antcontrib.zip" dest="${user.home}/.subfloor/tmp">
	      <patternset>
	        <include name="**/*.jar" />
	      </patternset>
	    </unzip>
	    <copy todir="${user.home}/.subfloor/ant-contrib">
	      <fileset dir="${user.home}/.subfloor/tmp/ant-contrib">
	        <include name="**/*.jar" />
	      </fileset>
	    </copy>
	  </target>
	
	<target name="create-dot-classpath" depends="init,resolve,subfloor.create-dot-classpath"/>
	   
	<target name="default" depends="clean,init, resolve, dist" />
	
</project>
<project name="kettle-engine" default="default" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

	  <description>
	      Kettle Engine build file
	  </description>
	 
	 <import file="build-res/subfloor.xml" />
	  
	  <tstamp prefix="start"/>
	
        <tstamp>
           <format property="compile.timestamp" pattern="yyyy-MM-dd HH.mm.ss" />
        </tstamp>

        <!-- Look for user-override properties file first -->        
		<property file="override.properties"/>
        <!-- set global properties for this build -->
		<property file="build.properties"/>
	  		
		
	  <!--=======================================================================
	      install-antcontrib (borrowed from subfloor.xml)
	      
	      (Fetches and) installs ant-contrib tasks.
	      ====================================================================-->
	  <target name="install-antcontrib" depends="antcontrib.download-check">
	    <taskdef resource="net/sf/antcontrib/antlib.xml">
	      <classpath>
	        <fileset dir="${user.home}/.subfloor/ant-contrib">
	          <include name="*.jar" />
	        </fileset>
	      </classpath>
	    </taskdef>
	  </target>
	
	  <!--=======================================================================
	      antcontrib.download-check (borrowed from subfloor.xml)
	      
	      Fetches ant-contrib from sourceforge if it is not already present
	      ====================================================================-->
	  <target name="antcontrib.download-check">
	    <condition property="antcontrib.available">
	      <and>
	        <available file="${user.home}/.subfloor/ant-contrib" />
	        <available classname="net.sf.antcontrib.logic.IfTask">
	          <classpath>
	            <fileset dir="${user.home}/.subfloor/ant-contrib">
	              <include name="*.jar" />
	            </fileset>
	          </classpath>
	        </available>
	      </and>
	    </condition>
	    <antcall target="antcontrib.download" />
	  </target>
	
	
	  <!--=======================================================================
	      antcontrib.download (borrowed from subfloor.xml)
	      
	      Fetches ant-contrib from sourceforge
	      ====================================================================-->
	  <target name="antcontrib.download" unless="antcontrib.available">
	    <mkdir dir="${user.home}/.subfloor/tmp" />
	    <get src="http://downloads.sourceforge.net/ant-contrib/ant-contrib-1.0b3-bin.zip"
	         dest="${user.home}/.subfloor/tmp/antcontrib.zip"
	         usetimestamp="true" />
	    <unzip src="${user.home}/.subfloor/tmp/antcontrib.zip" dest="${user.home}/.subfloor/tmp">
	      <patternset>
	        <include name="**/*.jar" />
	      </patternset>
	    </unzip>
	    <copy todir="${user.home}/.subfloor/ant-contrib">
	      <fileset dir="${user.home}/.subfloor/tmp/ant-contrib">
	        <include name="**/*.jar" />
	      </fileset>
	    </copy>
	  </target>
	
	  <target name="set-revision">
	    <condition property="revision" value="${svn-revision}" else="1">
	        <length string="${svn-revision}" length="7" when="less"/>
	    </condition>
	    
	    <echo message="Revision set to r${revision}"/>
	  </target>
	
	  <!--=======================================================================
	      generate.manifest
	      
	      Creates a new manifest file if one is not specified, or updates
	      an existing manifest file if one is specified.
	      ====================================================================-->
	  <target name="generate.manifest" depends="init,set-build.id,set-revision">
	    <delete file="${dist.manifest.file}" />
	    <touch file="${dist.manifest.file}" />
	    <copy file="${manifest.file}" tofile="${dist.manifest.file}" overwrite="true" failonerror="false" />

	    <manifest file="${dist.manifest.file}" mode="update">
	      <attribute name="Implementation-Title" value="${impl.title}" />
	        <attribute name="Implementation-Version" value="${impl.version}" />
	        <attribute name="Specification-Version" value="${revision}" />
	      <attribute name="Implementation-Vendor" value="${impl.vendor}" />
	      <attribute name="Implementation-ProductID" value="${impl.productID}" />
	        <attribute name="Compile-Timestamp" value="${compile.timestamp}" />
	        <attribute name="Compile-User" value="${user.name}" />
	    </manifest>
	  </target>

	<target name="create-dot-classpath" depends="init,resolve,subfloor.create-dot-classpath"/>

	<target name="default" depends="clean,init, resolve, dist" />
	
</project>
<!--===========================================================================
  This is the build file for the Pentaho Data Integration (Kettle) Greenplum
  Bulk Loader plugin.
  
  This build file will use the subfloor.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.
  
  See common_build.xml for more details
============================================================================-->
<project name="kettle-gpload-plugin" basedir="." default="default" xmlns:ivy="antlib:org.apache.ivy.ant">


  <description>
    This build file is used to create the Market core Kettle plugin
    and works with the subfloor.xml file.
  </description>

  <!-- The continuous target is used by CI ... this is the list of -->
  <!-- tasks that the CI machine will run.                         -->
  <!-- DO NOT change the CI machine's ant task .. change this list -->
  <target name="continuous" depends="clean-all,resolve,publish" />

  <!-- Import the common_build.xml file which contains all the default tasks -->
  <import file="build-res/subfloor-pkg.xml" />

  <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN common_build.xml.
    -->
  <target name="default" depends="clean-all,resolve,dist" />

  <target name="create-dot-classpath" depends="resolve,subfloor.create-dot-classpath" />

  <target name="stage" depends="jar" description="generate all the kettle plugin jars">

    <echo>Staging the Kettle plugin ${ivy.artifact.id} ...</echo>

    <!-- copy plugin jar -->
    <mkdir dir="bin/stage/${ivy.artifact.id}" />
    <copy todir="bin/stage/${ivy.artifact.id}" file="dist/${ivy.artifact.id}-${project.revision}.jar" />

    <!-- external libs (jdbc etc) -->
    <mkdir dir="bin/stage/${ivy.artifact.id}/lib" />
    <if>
      <available file="lib" type="dir" />
      <then>
        <echo>Copying files from lib....</echo>
        <copy todir="bin/stage/${ivy.artifact.id}/lib">
          <fileset dir="lib" includes="**/*" />
        </copy>
      </then>
    </if>

    <!-- any other res files -->
    <if>
      <available file="res" />
      <then>
        <copy todir="bin/stage/${ivy.artifact.id}">
          <fileset dir="res" includes="**/*" excludes="**/.vpn" />
        </copy>
      </then>
    </if>

    <!-- Update the version.xml with the current version of this plugin -->
    <if>
      <available file="bin/stage/${ivy.artifact.id}/version.xml" />
      <then>
        <replace file="bin/stage/${ivy.artifact.id}/version.xml" token="@TRUNK@" value="${project.revision}" />
      </then>
    </if>
  </target>

  <!--=======================================================================
        resolve-dev
              
        Resolves for development and compilation.
      =====================================================================-->
  <target name="resolve-dev" depends="install-ivy">
    <ivy:resolve file="${ivyfile}" conf="dev" />
    <ivy:retrieve conf="dev" pattern="${dev-lib.dir}/[module]-[revision](-[classifier]).[ext]" />
    <touch file="${dev-lib.dir}/.kettle-ignore" />
  </target>

  <target name="resolve" depends="subfloor.resolve,resolve-dev" />
  <target name="package" depends="stage" description="generate all the kettle plugin jars">
    <echo>Creating the Kettle plugin zip for ${ivy.artifact.id} ...</echo>
    <zip destfile="dist/${ivy.artifact.id}-${project.revision}.zip" basedir="bin/stage" includes="**/*" excludes="**/dev-lib/*" />
  </target>

</project>
<!--===========================================================================
  This is the build file for the Pentaho Data Integration (Kettle) HL7 plugin.
  
  This build file will use the subfloor.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.
  
  See common_build.xml for more details
============================================================================-->
<project name="kettle-hl7-plugin" basedir="." default="default" xmlns:ivy="antlib:org.apache.ivy.ant">


  <description>
    This build file is used to create the HL7 core Kettle plugin
    and works with the subfloor.xml file.
  </description>

  <!-- The continuous target is used by CI ... this is the list of -->
  <!-- tasks that the CI machine will run.                         -->
  <!-- DO NOT change the CI machine's ant task .. change this list -->
  <target name="continuous" depends="clean-all,resolve,publish" />

  <!-- Import the common_build.xml file which contains all the default tasks -->
  <import file="build-res/subfloor-pkg.xml" />

  <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN common_build.xml.
    -->
  <target name="default" depends="clean-all,resolve,dist" />

  <target name="create-dot-classpath" depends="resolve,subfloor.create-dot-classpath" />

  <target name="stage" depends="jar" description="generate all the kettle plugin jars">

    <echo>Staging the Kettle plugin ${ivy.artifact.id} ...</echo>

    <!-- copy plugin jar -->
    <mkdir dir="bin/stage/${ivy.artifact.id}" />
    <copy todir="bin/stage/${ivy.artifact.id}" file="dist/${ivy.artifact.id}-${project.revision}.jar" />

    <!-- external libs (jdbc etc) -->
    <mkdir dir="bin/stage/${ivy.artifact.id}/lib" />
    <if>
      <available file="lib" type="dir" />
      <then>
        <echo>Copying files from lib....</echo>
        <copy todir="bin/stage/${ivy.artifact.id}/lib">
          <fileset dir="lib" includes="**/*" />
        </copy>
      </then>
    </if>

    <!-- any other res files -->
    <if>
      <available file="res" />
      <then>
        <copy todir="bin/stage/${ivy.artifact.id}">
          <fileset dir="res" includes="**/*" excludes="**/.vpn" />
        </copy>
      </then>
    </if>

    <!-- Update the version.xml with the current version of this plugin -->
    <if>
      <available file="bin/stage/${ivy.artifact.id}/version.xml" />
      <then>
        <replace file="bin/stage/${ivy.artifact.id}/version.xml" token="@TRUNK@" value="${project.revision}" />
      </then>
    </if>
  </target>

  <!--=======================================================================
        resolve-dev
                
        Resolves for development and compilation.
      =====================================================================-->
  <target name="resolve-dev" depends="install-ivy">
    <ivy:resolve file="${ivyfile}" conf="dev" />
    <ivy:retrieve conf="dev" pattern="${dev-lib.dir}/[module]-[revision](-[classifier]).[ext]" />
    <touch file="${dev-lib.dir}/.kettle-ignore" />
  </target>

  <target name="resolve" depends="subfloor.resolve,resolve-dev" />
  <target name="package" depends="stage" description="generate all the kettle plugin jars">
    <echo>Creating the Kettle plugin zip for ${ivy.artifact.id} ...</echo>
    <zip destfile="dist/${ivy.artifact.id}-${project.revision}.zip" basedir="bin/stage" includes="**/*" excludes="**/dev-lib/*" />
  </target>

</project>
<!--===========================================================================
  This is the build file for the Pentaho Data Integration (Kettle) OpenERP plugin.
  
  This build file will use the subfloor.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.
  
  See common_build.xml for more details
============================================================================-->
<project name="kettle-openerp-plugin" basedir="." default="default" xmlns:ivy="antlib:org.apache.ivy.ant">


  <description>
    This build file is used to create the OpenERP core Kettle plugin
    and works with the subfloor.xml file.
  </description>

  <!-- The continuous target is used by CI ... this is the list of -->
  <!-- tasks that the CI machine will run.                         -->
  <!-- DO NOT change the CI machine's ant task .. change this list -->
  <target name="continuous" depends="clean-all,resolve,publish" />

  <!-- Import the common_build.xml file which contains all the default tasks -->
  <import file="build-res/subfloor-pkg.xml" />

  <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN common_build.xml.
    -->
  <target name="default" depends="clean-all,resolve,dist" />

  <target name="create-dot-classpath" depends="resolve,subfloor.create-dot-classpath" />

  <target name="stage" depends="jar" description="generate all the kettle plugin jars">

    <echo>Staging the Kettle plugin ${ivy.artifact.id} ...</echo>

    <!-- copy plugin jar -->
    <mkdir dir="bin/stage/${ivy.artifact.id}" />
    <copy todir="bin/stage/${ivy.artifact.id}" file="dist/${ivy.artifact.id}-${project.revision}.jar" />

    <!-- external libs (jdbc etc) -->
    <mkdir dir="bin/stage/${ivy.artifact.id}/lib" />
    <if>
      <available file="lib" type="dir" />
      <then>
        <echo>Copying files from lib....</echo>
        <copy todir="bin/stage/${ivy.artifact.id}/lib">
          <fileset dir="lib" includes="**/*" />
        </copy>
      </then>
    </if>

    <!-- any other res files -->
    <if>
      <available file="res" />
      <then>
        <copy todir="bin/stage/${ivy.artifact.id}">
          <fileset dir="res" includes="**/*" excludes="**/.vpn" />
        </copy>
      </then>
    </if>

    <!-- Update the version.xml with the current version of this plugin -->
    <if>
      <available file="bin/stage/${ivy.artifact.id}/version.xml" />
      <then>
        <replace file="bin/stage/${ivy.artifact.id}/version.xml" token="@TRUNK@" value="${project.revision}" />
      </then>
    </if>
  </target>

  <!--=======================================================================
        resolve-dev
                
        Resolves for development and compilation.
      =====================================================================-->
  <target name="resolve-dev" depends="install-ivy">
    <ivy:resolve file="${ivyfile}" conf="dev" />
    <ivy:retrieve conf="dev" pattern="${dev-lib.dir}/[module]-[revision](-[classifier]).[ext]" />
    <touch file="${dev-lib.dir}/.kettle-ignore" />
  </target>

  <target name="resolve" depends="subfloor.resolve,resolve-dev" />
  <target name="package" depends="stage" description="generate all the kettle plugin jars">
    <echo>Creating the Kettle plugin zip for ${ivy.artifact.id} ...</echo>
    <zip destfile="dist/${ivy.artifact.id}-${project.revision}.zip" basedir="bin/stage" includes="**/*" excludes="**/dev-lib/*" />
  </target>

</project>
<!--===========================================================================
  This is the build file for the Pentaho Data Integration (Kettle) PALO plugin.
  
  This build file will use the subfloor.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.
  
  See common_build.xml for more details
============================================================================-->
<project name="kettle-palo-plugin" basedir="." default="default" xmlns:ivy="antlib:org.apache.ivy.ant">


  <description>
    This build file is used to create the PALO core Kettle plugin
    and works with the subfloor.xml file.
  </description>

  <!-- The continuous target is used by CI ... this is the list of -->
  <!-- tasks that the CI machine will run.                         -->
  <!-- DO NOT change the CI machine's ant task .. change this list -->
  <target name="continuous" depends="clean-all,resolve,publish" />

  <!-- Import the common_build.xml file which contains all the default tasks -->
  <import file="build-res/subfloor-pkg.xml" />

  <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN common_build.xml.
    -->
  <target name="default" depends="clean-all,resolve,dist" />

  <target name="create-dot-classpath" depends="resolve,subfloor.create-dot-classpath" />

  <target name="stage" depends="jar" description="generate all the kettle plugin jars">

    <echo>Staging the Kettle plugin ${ivy.artifact.id} ...</echo>

    <!-- copy plugin jar -->
    <mkdir dir="bin/stage/${ivy.artifact.id}" />
    <copy todir="bin/stage/${ivy.artifact.id}" file="dist/${ivy.artifact.id}-${project.revision}.jar" />

    <!-- external libs (jdbc etc) -->
    <mkdir dir="bin/stage/${ivy.artifact.id}/lib" />
    <if>
      <available file="lib" type="dir" />
      <then>
        <echo>Copying files from lib....</echo>
        <copy todir="bin/stage/${ivy.artifact.id}/lib">
          <fileset dir="lib" includes="**/*" />
        </copy>
      </then>
    </if>

    <!-- any other res files -->
    <if>
      <available file="res" />
      <then>
        <copy todir="bin/stage/${ivy.artifact.id}">
          <fileset dir="res" includes="**/*" excludes="**/.vpn" />
        </copy>
      </then>
    </if>

    <!-- Update the version.xml with the current version of this plugin -->
    <if>
      <available file="bin/stage/${ivy.artifact.id}/version.xml" />
      <then>
        <replace file="bin/stage/${ivy.artifact.id}/version.xml" token="@TRUNK@" value="${project.revision}" />
      </then>
    </if>
  </target>

  <!--=======================================================================
        resolve-dev
                
        Resolves for development and compilation.
      =====================================================================-->
  <target name="resolve-dev" depends="install-ivy">
    <ivy:resolve file="${ivyfile}" conf="dev" />
    <ivy:retrieve conf="dev" pattern="${dev-lib.dir}/[module]-[revision](-[classifier]).[ext]" />
    <touch file="${dev-lib.dir}/.kettle-ignore" />
  </target>

  <target name="resolve" depends="subfloor.resolve,resolve-dev" />
  <target name="package" depends="stage" description="generate all the kettle plugin jars">
    <echo>Creating the Kettle plugin zip for ${ivy.artifact.id} ...</echo>
    <zip destfile="dist/${ivy.artifact.id}-${project.revision}.zip" basedir="bin/stage" includes="**/*" excludes="**/dev-lib/*" />
  </target>

</project>
<!--===========================================================================
  This is the build file for the Pentaho Data Integration (Kettle) v5 Log4j plugin.
  
  This build file will use the subfloor.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.
  
  See common_build.xml for more details
============================================================================-->
<project name="kettle5-log4j-plugin" basedir="." default="default" xmlns:ivy="antlib:org.apache.ivy.ant">


  <description>
    This build file is used to create the Kettle(v5) Log4j core Kettle plugin
    and works with the subfloor.xml file.
  </description>

  <!-- The continuous target is used by CI ... this is the list of -->
  <!-- tasks that the CI machine will run.                         -->
  <!-- DO NOT change the CI machine's ant task .. change this list -->
  <target name="continuous" depends="clean-all,resolve,publish" />

  <!-- Import the common_build.xml file which contains all the default tasks -->
  <import file="build-res/subfloor-pkg.xml" />

  <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN common_build.xml.
    -->
  <target name="default" depends="clean-all,resolve,dist" />

  <target name="create-dot-classpath" depends="resolve,subfloor.create-dot-classpath" />

  <target name="stage" depends="jar" description="generate all the kettle plugin jars">

    <echo>Staging the Kettle plugin ${ivy.artifact.id} ...</echo>

    <!-- copy plugin jar -->
    <mkdir dir="bin/stage/${ivy.artifact.id}" />
    <copy todir="bin/stage/${ivy.artifact.id}" file="dist/${ivy.artifact.id}-${project.revision}.jar" />

    <!-- external libs (jdbc etc) -->
    <mkdir dir="bin/stage/${ivy.artifact.id}/lib" />
    <if>
      <available file="lib" type="dir" />
      <then>
        <echo>Copying files from lib....</echo>
        <copy todir="bin/stage/${ivy.artifact.id}/lib">
          <fileset dir="lib" includes="**/*" />
        </copy>
      </then>
    </if>

    <!-- any other res files -->
    <if>
      <available file="res" />
      <then>
        <copy todir="bin/stage/${ivy.artifact.id}">
          <fileset dir="res" includes="**/*" excludes="**/.vpn" />
        </copy>
      </then>
    </if>

    <!-- Update the version.xml with the current version of this plugin -->
    <if>
      <available file="bin/stage/${ivy.artifact.id}/version.xml" />
      <then>
        <replace file="bin/stage/${ivy.artifact.id}/version.xml" token="@TRUNK@" value="${project.revision}" />
      </then>
    </if>
  </target>

  <!--=======================================================================
        resolve-dev
                
        Resolves for development and compilation.
      =====================================================================-->
  <target name="resolve-dev" depends="install-ivy">
    <ivy:resolve file="${ivyfile}" conf="dev" />
    <ivy:retrieve conf="dev" pattern="${dev-lib.dir}/[module]-[revision](-[classifier]).[ext]" />
    <touch file="${dev-lib.dir}/.kettle-ignore" />
  </target>

  <target name="resolve" depends="subfloor.resolve,resolve-dev" />
  <target name="package" depends="stage" description="generate all the kettle plugin jars">
    <echo>Creating the Kettle plugin zip for ${ivy.artifact.id} ...</echo>
    <zip destfile="dist/${ivy.artifact.id}-${project.revision}.zip" basedir="bin/stage" includes="**/*" excludes="**/dev-lib/*" />
  </target>

</project>
<!--===========================================================================
  This is the build file for the Pentaho Data Integration (Kettle) Marketplace
  plugin.
  
  This build file will use the subfloor.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.
  
  See common_build.xml for more details
============================================================================-->
<project name="market" basedir="." default="default" xmlns:ivy="antlib:org.apache.ivy.ant">


  <description>
    This build file is used to create the Market core Kettle plugin
    and works with the subfloor.xml file.
  </description>

  <!-- The continuous target is used by CI ... this is the list of -->
  <!-- tasks that the CI machine will run.                         -->
  <!-- DO NOT change the CI machine's ant task .. change this list -->
  <target name="continuous" depends="clean-all,resolve,publish" />

  <!-- Import the common_build.xml file which contains all the default tasks -->
  <import file="build-res/subfloor-pkg.xml" />

  <!--
    AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
    THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
    FOUND IN common_build.xml.
  -->
  <target name="default" depends="clean-all,resolve,dist" />

  <target name="create-dot-classpath" depends="resolve,subfloor.create-dot-classpath" />

  <target name="stage" depends="jar" description="generate all the kettle plugin jars">

    <echo>Staging the Kettle plugin ${ivy.artifact.id} ...</echo>

    <!-- copy plugin jar -->
    <mkdir dir="bin/stage/${ivy.artifact.id}" />
    <copy todir="bin/stage/${ivy.artifact.id}" file="dist/${ivy.artifact.id}-${project.revision}.jar" />

    <!-- external libs (jdbc etc) -->
    <mkdir dir="bin/stage/${ivy.artifact.id}/lib" />
    <if>
      <available file="lib" type="dir" />
      <then>
        <echo>Copying files from lib....</echo>
        <copy todir="bin/stage/${ivy.artifact.id}/lib">
          <fileset dir="lib" includes="**/*" />
        </copy>
      </then>
    </if>

    <!-- any other res files -->
    <if>
      <available file="res" />
      <then>
        <copy todir="bin/stage/${ivy.artifact.id}">
          <fileset dir="res" includes="**/*" excludes="**/.vpn" />
        </copy>
      </then>
    </if>

    <!-- Update the version.xml with the current version of this plugin -->
    <if>
      <available file="bin/stage/${ivy.artifact.id}/version.xml" />
      <then>
        <replace file="bin/stage/${ivy.artifact.id}/version.xml" token="@TRUNK@" value="${project.revision}" />
      </then>
    </if>
  </target>

  <!--=======================================================================
          resolve-dev
            
          Resolves for development and compilation.
        =====================================================================-->
  <target name="resolve-dev" depends="install-ivy">
    <ivy:resolve file="${ivyfile}" conf="dev" />
    <ivy:retrieve conf="dev" pattern="${dev-lib.dir}/[module]-[revision](-[classifier]).[ext]" />
    <touch file="${dev-lib.dir}/.kettle-ignore" />
  </target>

  <target name="resolve" depends="subfloor.resolve,resolve-dev" />
  <target name="package" depends="stage" description="generate all the kettle plugin jars">
    <echo>Creating the Kettle plugin zip for ${ivy.artifact.id} ...</echo>
    <zip destfile="dist/${ivy.artifact.id}-${project.revision}.zip" basedir="bin/stage" includes="**/*" excludes="**/dev-lib/*" />
  </target>

</project>
<!--===========================================================================
  This is the build file for the Pentaho Data Integration (Kettle) Star Modeler
  plugin.
  
  This build file will use the subfloor.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.
  
  See common_build.xml for more details
============================================================================-->
<project name="star-modeler" basedir="." default="default" xmlns:ivy="antlib:org.apache.ivy.ant">


  <description>
    This build file is used to create the Star Modeler core Kettle plugin
    and works with the subfloor.xml file.
  </description>

  <!-- The continuous target is used by CI ... this is the list of -->
  <!-- tasks that the CI machine will run.                         -->
  <!-- DO NOT change the CI machine's ant task .. change this list -->
  <target name="continuous" depends="clean-all,resolve,publish" />

  <!-- Import the common_build.xml file which contains all the default tasks -->
  <import file="build-res/subfloor-pkg.xml" />

  <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN common_build.xml.
    -->
  <target name="default" depends="clean-all,resolve,dist" />

  <target name="create-dot-classpath" depends="resolve,subfloor.create-dot-classpath" />

  <target name="stage" depends="jar" description="generate all the kettle plugin jars">

    <echo>Staging the Kettle plugin ${ivy.artifact.id} ...</echo>

    <!-- copy plugin jar -->
    <mkdir dir="bin/stage/${ivy.artifact.id}" />
    <copy todir="bin/stage/${ivy.artifact.id}" file="dist/${ivy.artifact.id}-${project.revision}.jar" />

    <!-- external libs (jdbc etc) -->
    <mkdir dir="bin/stage/${ivy.artifact.id}/lib" />
    <if>
      <available file="lib" type="dir" />
      <then>
        <echo>Copying files from lib....</echo>
        <copy todir="bin/stage/${ivy.artifact.id}/lib">
          <fileset dir="lib" includes="**/*" />
        </copy>
      </then>
    </if>

    <!-- any other res files -->
    <if>
      <available file="res" />
      <then>
        <copy todir="bin/stage/${ivy.artifact.id}">
          <fileset dir="res" includes="**/*" excludes="**/.vpn" />
        </copy>
      </then>
    </if>

    <!-- Update the version.xml with the current version of this plugin -->
    <if>
      <available file="bin/stage/${ivy.artifact.id}/version.xml" />
      <then>
        <replace file="bin/stage/${ivy.artifact.id}/version.xml" token="@TRUNK@" value="${project.revision}" />
      </then>
    </if>
  </target>

  <!--=======================================================================
        resolve-dev
                
        Resolves for development and compilation.
      =====================================================================-->
  <target name="resolve-dev" depends="install-ivy">
    <ivy:resolve file="${ivyfile}" conf="dev" />
    <ivy:retrieve conf="dev" pattern="${dev-lib.dir}/[module]-[revision](-[classifier]).[ext]" />
    <touch file="${dev-lib.dir}/.kettle-ignore" />
  </target>

  <target name="resolve" depends="subfloor.resolve,resolve-dev" />
  <target name="package" depends="stage" description="generate all the kettle plugin jars">
    <echo>Creating the Kettle plugin zip for ${ivy.artifact.id} ...</echo>
    <zip destfile="dist/${ivy.artifact.id}-${project.revision}.zip" basedir="bin/stage" includes="**/*" excludes="**/dev-lib/*" />
  </target>

</project>
<!--===========================================================================
  This is the build file for the Pentaho Data Integration (Kettle) core module.
  
  This build file will use the subfloor.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.
  
  See common_build.xml for more details
============================================================================-->
<project name="kettle-ui-swt" basedir="." default="default">

  <description>
    This build file is used to create the Kettle UI module
    and works with the subfloor.xml file.
  </description>

  <!-- The continuous target is used by CI ... this is the list of -->
  <!-- tasks that the CI machine will run.                         -->
  <!-- DO NOT change the CI machine's ant task .. change this list -->
  <target name="continuous" 
          depends="clean-all,resolve,publish" />

  <!-- Import the common_build.xml file which contains all the default tasks -->
  <import file="build-res/subfloor.xml"/>

  <!--
    AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
    THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
    FOUND IN common_build.xml.
  -->

  <target name="default" depends="clean,init,resolve,dist"/>
      
  <target name="create-dot-classpath" depends="init,resolve,subfloor.create-dot-classpath"/>
	
  <target name="compile.res_copy" depends="install-antcontrib">
    <if>
      <available file="${res.dir}" />
      <then>
        <copy todir="${classes.dir}">
          <fileset dir="${res.dir}" />
        </copy>
      </then>
    </if>
    
    <!-- embed the UI definition files in the jar so that webstart will work -->
    <copy todir="${classes.dir}/ui">
        <fileset dir="${ui}" includes="**/*.png **/*.xml **/*.xul **/*.properties"/>
    </copy>

    <if>
      <not>
        <isset property="jar.include.source" />
      </not>
      <then>
        <copy todir="${classes.dir}" flatten="false">
          <fileset dir="${src.dir}" excludes="**/*.java" />
        </copy>
      </then>
    </if>
  </target>

</project>
