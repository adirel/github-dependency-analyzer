defaultTasks 'distribution'

// TODO: figure out how to include source code in the generated jar file per http://stackoverflow.com/questions/11474729/how-to-build-sources-jar-with-gradle
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.7.+'
    }
}
apply plugin: "android-library"
android {
    compileSdkVersion 18
    buildToolsVersion '18.0.1'
    defaultConfig {
        versionCode = 1
        versionName = version
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
    }
    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
        }
        instrumentTest.setRoot('src/instrumentTest')
    }
}

apply plugin: "maven"
apply plugin: "signing"

version = "0.7.3"
group = "com.radiusnetworks"

repositories {
    mavenCentral()
}

sourceSets {
        unitTest {
                java.srcDir file('src/test')
        }
}

dependencies {
        unitTestCompile files("$project.buildDir/classes/debug")
        unitTestCompile 'junit:junit:[4,)'
        unitTestCompile 'org.robolectric:robolectric:2.1.1'
		unitTestCompile 'com.google.android:android:4.0.1.2'        
}

configurations {
        unitTestCompile.extendsFrom runtime
        unitTestRuntime.extendsFrom unitTestCompile
        archives {
            extendsFrom configurations.default
        }
}

signing {
    required { has("release") && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    configuration = configurations.archives
    repositories.mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: sonatypeRepo) {
            authentication(userName: sonatypeUsername,
                    password: sonatypePassword)
        }

        pom.project {
            name 'AndroidIBeaconLibrary'
            packaging 'aar'
            description 'IBeacon library for Android applications'
            url 'https://github.com/RadiusNetworks/android-ibeacon-service'

            scm {
                url 'scm:git@github.com:RadiusNetworks/android-ibeacon-service.git'
                connection 'scm:git@github.com:RadiusNetworks/android-ibeacon-service.git'
                developerConnection 'scm:git@github.com:RadiusNetworks/android-ibeacon-service.git'
            }

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'davidgyoung'
                    name 'David Young'
                    email 'david@radiusnetworks.com'
                }
            }
        }
    }
}

task unitTest(type:Test, dependsOn: assemble) {
        description = "run unit tests"
        testClassesDir = project.sourceSets.unitTest.output.classesDir
        classpath = project.sourceSets.unitTest.runtimeClasspath
}

unitTest {
	testLogging {
		exceptionFormat = 'full'
	}
}

task bundleEclipse << {
    exec {
        executable 'scripts/bundle-eclipse'
    }
}


task wrapper(type: org.gradle.api.tasks.wrapper.Wrapper) {
    gradleVersion = '1.4'
}

task distribution(dependsOn: ["bundleEclipse", "build", "clean"]) << {
    println "Building with version=$version"
}

task release(dependsOn: 'distribution') << {
	println('Doing release build')
}

/*
 * Gets the version name from the latest Git tag
 */
def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    try {
      exec {
          commandLine 'git', 'describe', '--tags'
          standardOutput = stdout
      }
      return stdout.toString().trim()
    }
    catch (e) {
      println("Can't get version from git: "+e);
      return "adhoc"
    }
}

version = getVersionName()

build.mustRunAfter clean
bundleEclipse.mustRunAfter build


defaultTasks 'distribution'

// TODO: figure out how to include source code in the generated jar file per http://stackoverflow.com/questions/11474729/how-to-build-sources-jar-with-gradle
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.7.+'
    }
}
apply plugin: "android-library"
android {
    compileSdkVersion 18
    buildToolsVersion '18.0.1'
    defaultConfig {
        versionCode = 1
        versionName = version
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
    }
    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
        }
        instrumentTest.setRoot('src/instrumentTest')
    }
}

apply plugin: "maven"
apply plugin: "signing"

version = "0.7.3"
group = "com.radiusnetworks"

repositories {
    mavenCentral()
}

sourceSets {
        unitTest {
                java.srcDir file('src/test')
        }
}

dependencies {
        unitTestCompile files("$project.buildDir/classes/debug")
        unitTestCompile 'junit:junit:[4,)'
        unitTestCompile 'org.robolectric:robolectric:2.1.1'
		unitTestCompile 'com.google.android:android:4.0.1.2'        
}

configurations {
        unitTestCompile.extendsFrom runtime
        unitTestRuntime.extendsFrom unitTestCompile
        archives {
            extendsFrom configurations.default
        }
}

signing {
    required { has("release") && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    configuration = configurations.archives
    repositories.mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: sonatypeRepo) {
            authentication(userName: sonatypeUsername,
                    password: sonatypePassword)
        }

        pom.project {
            name 'AndroidIBeaconLibrary'
            packaging 'aar'
            description 'IBeacon library for Android applications'
            url 'https://github.com/RadiusNetworks/android-ibeacon-service'

            scm {
                url 'scm:git@github.com:RadiusNetworks/android-ibeacon-service.git'
                connection 'scm:git@github.com:RadiusNetworks/android-ibeacon-service.git'
                developerConnection 'scm:git@github.com:RadiusNetworks/android-ibeacon-service.git'
            }

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'davidgyoung'
                    name 'David Young'
                    email 'david@radiusnetworks.com'
                }
            }
        }
    }
}

task unitTest(type:Test, dependsOn: assemble) {
        description = "run unit tests"
        testClassesDir = project.sourceSets.unitTest.output.classesDir
        classpath = project.sourceSets.unitTest.runtimeClasspath
}

unitTest {
	testLogging {
		exceptionFormat = 'full'
	}
}

task bundleEclipse << {
    exec {
        executable 'scripts/bundle-eclipse'
    }
}


task wrapper(type: org.gradle.api.tasks.wrapper.Wrapper) {
    gradleVersion = '1.4'
}

task distribution(dependsOn: ["bundleEclipse", "build", "clean"]) << {
    println "Building with version=$version"
}

task release(dependsOn: 'distribution') << {
	println('Doing release build')
}

/*
 * Gets the version name from the latest Git tag
 */
def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    try {
      exec {
          commandLine 'git', 'describe', '--tags'
          standardOutput = stdout
      }
      return stdout.toString().trim()
    }
    catch (e) {
      println("Can't get version from git: "+e);
      return "adhoc"
    }
}

version = getVersionName()

build.mustRunAfter clean
bundleEclipse.mustRunAfter build


defaultTasks 'distribution'

// TODO: figure out how to include source code in the generated jar file per http://stackoverflow.com/questions/11474729/how-to-build-sources-jar-with-gradle
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.7.+'
    }
}
apply plugin: "android-library"
android {
    compileSdkVersion 18
    buildToolsVersion '18.0.1'
    defaultConfig {
        versionCode = 1
        versionName = version
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
    }
    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
        }
        instrumentTest.setRoot('src/instrumentTest')
    }
}

apply plugin: "maven"
apply plugin: "signing"

version = "0.7.3"
group = "com.radiusnetworks"

repositories {
    mavenCentral()
}

sourceSets {
        unitTest {
                java.srcDir file('src/test')
        }
}

dependencies {
        unitTestCompile files("$project.buildDir/classes/debug")
        unitTestCompile 'junit:junit:[4,)'
        unitTestCompile 'org.robolectric:robolectric:2.1.1'
		unitTestCompile 'com.google.android:android:4.0.1.2'        
}

configurations {
        unitTestCompile.extendsFrom runtime
        unitTestRuntime.extendsFrom unitTestCompile
        archives {
            extendsFrom configurations.default
        }
}

signing {
    required { has("release") && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    configuration = configurations.archives
    repositories.mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: sonatypeRepo) {
            authentication(userName: sonatypeUsername,
                    password: sonatypePassword)
        }

        pom.project {
            name 'AndroidIBeaconLibrary'
            packaging 'aar'
            description 'IBeacon library for Android applications'
            url 'https://github.com/RadiusNetworks/android-ibeacon-service'

            scm {
                url 'scm:git@github.com:RadiusNetworks/android-ibeacon-service.git'
                connection 'scm:git@github.com:RadiusNetworks/android-ibeacon-service.git'
                developerConnection 'scm:git@github.com:RadiusNetworks/android-ibeacon-service.git'
            }

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'davidgyoung'
                    name 'David Young'
                    email 'david@radiusnetworks.com'
                }
            }
        }
    }
}

task unitTest(type:Test, dependsOn: assemble) {
        description = "run unit tests"
        testClassesDir = project.sourceSets.unitTest.output.classesDir
        classpath = project.sourceSets.unitTest.runtimeClasspath
}

unitTest {
	testLogging {
		exceptionFormat = 'full'
	}
}

task bundleEclipse << {
    exec {
        executable 'scripts/bundle-eclipse'
    }
}


task wrapper(type: org.gradle.api.tasks.wrapper.Wrapper) {
    gradleVersion = '1.4'
}

task distribution(dependsOn: ["bundleEclipse", "build", "clean"]) << {
    println "Building with version=$version"
}

task release(dependsOn: 'distribution') << {
	println('Doing release build')
}

/*
 * Gets the version name from the latest Git tag
 */
def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    try {
      exec {
          commandLine 'git', 'describe', '--tags'
          standardOutput = stdout
      }
      return stdout.toString().trim()
    }
    catch (e) {
      println("Can't get version from git: "+e);
      return "adhoc"
    }
}

version = getVersionName()

build.mustRunAfter clean
bundleEclipse.mustRunAfter build


