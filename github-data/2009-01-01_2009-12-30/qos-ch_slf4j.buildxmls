<project name="integration" default="testAll" basedir=".">

	<!--
		This build file is usually run indirectly via Maven.
		
		When running this build file through Ant directly, you must
		define the currentVersion property on the command line, e.g.:
		
		ant  -DcurrentVersion=1.5.4-SNAPSHOT	
	-->
	
	<echo message="compile classpath: ${compile_classpath}" />
	<echo message="runtime classpath: ${runtime_classpath}" />
	<echo message="test classpath:    ${test_classpath}" />
	<echo message="plugin classpath:  ${plugin_classpath}" />


	<path id="path142Binding">
		<pathelement location="target/test-classes/" />
		<pathelement location="../slf4j-api/target/slf4j-api-${currentVersion}.jar" />
		<pathelement location="./lib/slf4j-simple-1.4.2.jar" />
	</path >

	<path id="path150Binding">
		<pathelement location="target/test-classes/" />
		<pathelement location="../slf4j-api/target/slf4j-api-${currentVersion}.jar" />
		<pathelement location="./lib/slf4j-simple-1.5.0.jar" />
	</path >

	<path id="path1511API">
		<pathelement location="target/test-classes/" />
		<pathelement location="./lib/slf4j-api-1.5.11.jar" />
		<pathelement location="../slf4j-simple/target/slf4j-simple-${currentVersion}.jar" />
	</path >

	<path id="path1511Binding">
		<pathelement location="target/test-classes/" />
		<pathelement location="../slf4j-api/target/slf4j-api-${currentVersion}.jar" />
		<pathelement location="./lib/slf4j-simple-1.5.11.jar" />
	</path >

  <!--<path id="pathIncompatible">
		<pathelement location="target/test-classes/" />
		<pathelement location="../slf4j-api/target/slf4j-api-${currentVersion}.jar" />
		<pathelement location="./lib/slf4j-simple-INCOMPATIBLE.jar" />
	</path >
  -->

	<path id="pathCurrent">
		<pathelement location="target/test-classes/" />
		<pathelement location="../slf4j-api/target/slf4j-api-${currentVersion}.jar" />
		<pathelement location="../slf4j-simple/target/slf4j-simple-${currentVersion}.jar" />
	</path >

	
	<path id="incompatibleMultiBinding">
		<pathelement location="target/test-classes/" />
		<pathelement location="../slf4j-api/target/slf4j-api-${currentVersion}.jar" />
		<pathelement location="./lib/slf4j-simple-1.5.0.jar" />
		<pathelement location="./lib/slf4j-nop-1.5.6.jar" />
	</path >

  <path id="multiBinding">
 		<pathelement location="target/test-classes/" />
 		<pathelement location="../slf4j-api/target/slf4j-api-${currentVersion}.jar" />
    <pathelement location="../slf4j-simple/target/slf4j-simple-${currentVersion}.jar" />
    <pathelement location="../slf4j-nop/target/slf4j-nop-${currentVersion}.jar" />
 	</path >

  <path id="binding166">
		<pathelement location="target/test-classes/" />
		<pathelement location="../slf4j-api/target/slf4j-api-${currentVersion}.jar" />
		<pathelement location="./lib/slf4j-simple-1.6.6.jar" />
	</path >

  <path id="binding2099">
		<pathelement location="target/test-classes/" />
		<pathelement location="../slf4j-api/target/slf4j-api-${currentVersion}.jar" />
		<pathelement location="./lib/slf4j-simple-2.0.99.jar" />
	</path >


  <path id="api166">
		<pathelement location="target/test-classes/" />
		<pathelement location="../slf4j-simple/target/slf4j-simple-${currentVersion}.jar" />
		<pathelement location="./lib/slf4j-api-1.6.6.jar" />
	</path >


	<!-- this is really very ugly, but it's the only way to circumvent
  	     http://jira.codehaus.org/browse/MANTRUN-95
	-->
	<taskdef name="junit" classpath="${plugin_classpath};${compile_classpath}" 
           classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" />

	<target name="init">
		<mkdir dir="target/unit-reports" />
	</target>

	<target name="testAll" depends="init, 
		            testMissingSingletonMethod,
                testMismatch, 
                testMatch,
		            testMultiBinding,
		            testIncompatibleMultiBinding,
                testFuture_16Series">
	</target>


	<target name="testMissingSingletonMethod">

    <junit printsummary="yes" fork="no" haltonfailure="yes">
			<classpath refid="path142Binding" />
			<formatter type="plain" />
			<test fork="yes" todir="target/unit-reports"
            outfile="TEST-142BININDING" 
            name="org.slf4j.MissingSingletonMethodAssertionTest" />
		</junit>

    <junit printsummary="yes" fork="no" haltonfailure="yes">
			<classpath refid="path150Binding" />
			<formatter type="plain" />
			<test fork="yes" todir="target/unit-reports" 
            outfile="TEST-150BINDING" 
            name="org.slf4j.MissingSingletonMethodAssertionTest" />
		</junit>

  </target>

	<target name="testMismatch">

    <junit printsummary="yes" fork="no" haltonfailure="yes">
			<classpath refid="path1511API" />
			<formatter type="plain" />
			<test fork="yes" todir="target/unit-reports" 
            outfile="TEST-MISMATCH-1511API" 
            name="org.slf4j.VersionMismatchAssertionTest" />
		</junit>


    <junit printsummary="yes" fork="no" haltonfailure="yes">
			<classpath refid="path1511Binding" />
			<formatter type="plain" />
			<test fork="yes" todir="target/unit-reports" 
            outfile="TEST-MISMATCH-1511Binding" 
            name="org.slf4j.VersionMismatchAssertionTest" />
		</junit>

	</target>

	<target name="testMatch">
		<junit printsummary="yes" fork="no" haltonfailure="yes">
			<classpath refid="pathCurrent" />
			<formatter type="plain" />
			<test fork="yes" todir="target/unit-reports" 
            outfile="TEST-Match" 
            name="org.slf4j.CompatibilityAssertionTest" />
		</junit>
	</target>

	<target name="testIncompatibleMultiBinding">
		<junit printsummary="yes" fork="no" haltonfailure="yes">
			<classpath refid="incompatibleMultiBinding" />
			<formatter type="plain" />
			<test fork="yes" todir="target/unit-reports" 
            outfile="TEST-IncompatibleMultiBinding"
            name="org.slf4j.IncompatibleMultiBindingAssertionTest" />
		</junit>
	</target>

  <target name="testMultiBinding">
 		<junit printsummary="yes" fork="no" haltonfailure="yes">
 			<classpath refid="multiBinding" />
 			<formatter type="plain" />
 			<test fork="yes" todir="target/unit-reports"
             outfile="TEST-MultiBinding"
             name="org.slf4j.MultiBindingAssertionTest" />
 		</junit>
 	</target>

	<target name="testFuture_16Series">
		<junit printsummary="yes" fork="no" haltonfailure="yes">
			<classpath refid="binding166" />
			<formatter type="plain" />
			<test fork="yes" todir="target/unit-reports" 
            outfile="TEST-binding166"
            name="org.slf4j.CompatibilityAssertionTest" />
		</junit>

    
    <junit printsummary="yes" fork="no" haltonfailure="yes">
      <classpath refid="api166" />
      <formatter type="plain" />
      <test fork="yes" todir="target/unit-reports" 
            outfile="TEST-api166"
            name="org.slf4j.CompatibilityAssertionTest" />
		</junit>

	</target>
</project><project name="osgi-test" default="testAll">

	<!--
		This build file is usually run indirectly via Maven.
		
		When running this build file through Ant directly, you must
		define the currentVersion property on the command line, e.g.:
		
		ant  -DcurrentVersion=1.5.4-SNAPSHOT	
	-->
	
	<echo message="compile classpath: ${currentVersion}" />
	<echo message="test classpath:    ${test_classpath}" />
	<echo message="basedir:           ${basedir}" />

  <property name="iBundleJar" value="target/iBundle.jar"/>
  <property name="bundlesDir" value="bundle"/>


	<!-- this is really very ugly, but it's the only way to circumvent
  	     http://jira.codehaus.org/browse/MANTRUN-95
	-->
	<taskdef name="junit" classpath="${test_classpath}" 
           classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" />

	<path id="minimal">
		<pathelement location="target/test-classes/" />
	</path >

	<target name="init">
		<mkdir dir="target/unit-reports" />
	</target>

  <target name="createIBundle">
    <mkdir dir="${bundlesDir}"/>
    <jar destFile="${iBundleJar}" 
         manifest="src/IBUNDLE-META-INF/MANIFEST.MF"
         basedir="target/test-classes/"
         includes="integrator/**.class"/>
                   
  </target>

	<target name="testAll" depends="init, createIBundle, nop, simple, jdk14">
	</target>

 
  <macrodef name="prepareOSGiHarness">
    <attribute name="binding"/>
    <sequential>
      <delete>
        <fileset dir="${bundlesDir}" includes="*.jar"/>
      </delete>
      <copy file="${iBundleJar}" todir="${bundlesDir}"/>
      <copy file="../slf4j-api/target/slf4j-api-${currentVersion}.jar" todir="${bundlesDir}"/>
      <copy file="../slf4j-@{binding}/target/slf4j-@{binding}-${currentVersion}.jar" todir="${bundlesDir}"/>
      <echo>value of t = @{t}</echo>
    </sequential>
  </macrodef>


   <!-- for some reason if mvn is invoked from the parent directory, junit gets
        invoked from the parent dir, which messes up theses tests. Hence, the
        fork="yes" dir="${basedir}" -->

  <target name="nop">
    <prepareOSGiHarness binding="nop"/>
    <junit printsummary="yes" fork="yes" dir="${basedir}" haltonfailure="yes">
			<classpath path="${test_classpath}"/>
      <formatter type="plain" />
      <test fork="yes" todir="target/unit-reports" name="org.slf4j.test_osgi.BundleTest" />
    </junit>
	</target>

	<target name="simple">
    <prepareOSGiHarness binding="simple"/>
    <junit printsummary="yes" fork="yes" dir="${basedir}" haltonfailure="yes">
			<classpath path="${test_classpath}"/>
      <formatter type="plain" />
      <test fork="yes" todir="target/unit-reports" name="org.slf4j.test_osgi.BundleTest" />
    </junit>
	</target>

	<target name="jdk14">
    <prepareOSGiHarness binding="jdk14"/>
    <junit printsummary="yes" fork="yes" dir="${basedir}" haltonfailure="yes">
			<classpath path="${test_classpath}"/>
      <formatter type="plain" />
      <test fork="yes" todir="target/unit-reports" name="org.slf4j.test_osgi.BundleTest" />
    </junit>
	</target>
  
</project><project name="testing-log4j-bridge" default="usage" basedir=".">

	<property name="lbversion" value="0.9.8-SNAPSHOT" />
    <property name="slf4jversion" value="1.4.2" />
	<property name="source.home" value="./src/main/java/" />
	<property name="javac.dest.12" value="./target/classes12/" />
	<property name="javac.dest.13" value="./target/classes13/" />
	<property name="lib" value="./lib" />

	<property name="deprecation" value="on" />

	<path id="basic.classpath">
		<pathelement location="${source.home}" />
		<pathelement location="${lib}/junit-3.8.1.jar" />
	</path>

	<path id="log4j12.classpath">
		<path refid="basic.classpath" />
		<pathelement location="${javac.dest.12}" />
		<pathelement location="${lib}/log4j-1.2.14.jar" />
	</path>

	<path id="log4j13.classpath">
		<path refid="basic.classpath" />
		<pathelement location="${javac.dest.13}" />
		<pathelement location="${lib}/log4j-1.3alpha-8.jar" />
	</path>

	<path id="los.classpath">
		<path refid="basic.classpath" />
		<pathelement location="${lib}/log4j-over-slf4j-${slf4jversion}.jar" />
		<pathelement location="${lib}/logback-classic-${lbversion}.jar" />
		<pathelement location="${lib}/logback-core-${lbversion}.jar" />
		<pathelement location="${lib}/slf4j-api-${slf4jversion}.jar" />
	</path>

	<!-- ================================================================= -->
	<!-- Default target                                                    -->
	<!-- ================================================================= -->
	<target name="usage">
		<echo>      
      These are some of the targets supported by this ANT build scpript:

      all - run all available tests
      refresh - copy required jar files to the lib directory
    </echo>
	</target>

  <delete>
    <fileset dir="." includes="**/*.bak"/>
  </delete>

  <target name="refresh">
    <delete>
      <fileset dir="lib">
        <include name="logback-*.jar"/>
        <include name="log4j-bridge-*.jar"/>
      </fileset>
    </delete>
    <copy file="../../slf4j-api/target/slf4j-api-${slf4jversion}.jar" todir="lib/"/>
    <copy file="../target/log4j-over-slf4j-${slf4jversion}.jar" todir="lib/"/>

  </target>


	<target name="init">
		<mkdir dir="${javac.dest.12}" />
		<mkdir dir="${javac.dest.13}" />
	</target>

	<target name="clean">
		<delete>
			<fileset dir="${javac.dest.12}" includes="**" />
			<fileset dir="${javac.dest.13}" includes="**" />
		</delete>
	</target>

	<target name="build_log4j12" depends="init">
		<javac srcdir="${source.home}" 
			     destdir="${javac.dest.12}" 
			     includes="**/Log4j12Calls.java" 
			     deprecation="${deprecation}" debug="on">
			<classpath refid="log4j12.classpath" />
		</javac>
	</target>

	<target name="build_log4j13" depends="init">
		<javac srcdir="${source.home}" 
			     destdir="${javac.dest.13}" 
			     includes="**/Log4j13Calls.java" deprecation="${deprecation}" debug="on">
			<classpath refid="log4j13.classpath" />
		</javac>
	</target>
	
	<target name="build_loggerTest" depends="init">
		<javac srcdir="${source.home}" 
			     destdir="${javac.dest.12}" 
			     includes="**/LoggerTest.java" 
			     deprecation="${deprecation}" debug="on">
			<classpath refid="los.classpath" />
		</javac>
	</target>

	<!-- ================================================================= -->
	<!-- Run tests                                                     -->
	<!-- ================================================================= -->
	<target name="all" depends="test12, test13, loggerTest" />


	<target name="loggerTest" depends="build_loggerTest">
		<junit printsummary="yes" fork="yes" haltonfailure="yes">
			<classpath refid="los.classpath" />
			<classpath location="${javac.dest.12}" />
			<formatter type="plain" usefile="false" />
			<test name="test.LoggerTest" />
		</junit>
	</target>
	
	<target name="test12" depends="build_log4j12">
		<junit printsummary="yes" fork="yes" haltonfailure="yes">
			<classpath refid="los.classpath" />
			<classpath location="${javac.dest.12}" />
			<formatter type="plain" usefile="false" />
			<test name="test.Log4j12Calls" />
		</junit>
	</target>

	<target name="test13" depends="build_log4j13">
		<junit printsummary="yes" fork="yes" haltonfailure="yes">
			<classpath refid="los.classpath" />
			<classpath location="${javac.dest.13}" />
			<formatter type="plain" usefile="false" />
			<test name="test.Log4j13Calls" />
		</junit>
	</target>

</project>
