<?xml version="1.0" encoding="UTF-8"?>

<project name="phantm" default="build" basedir=".">

  <property environment="env"/>

  <!-- Prevents system classpath from being used -->
  <property name="build.sysclasspath" value="ignore"/>


<!-- ===========================================================================
PROPERTIES
============================================================================ -->

  <property name="source.dir" value="src"/>
  <property name="target.dir" value="target/scala_2.8.0/classes"/>

  <property file=".build.properties"/>

  <!-- the following properties can be set in the above property file -->
  <property name="scala.dir" value="${env.SCALA_HOME}"/>
  <property name="build.dir" value="${target.dir}"/>
  <property name="release.dir" value="releases"/>
  <property name="lib.dir" value="lib"/>
  <property name="main.class" value="phantm.Main"/>

  <property name="proguard.jar" value="${lib.dir}/proguard.jar" />

<!-- ===========================================================================
INITIALISATION
============================================================================ -->

  <target name="init">
    <available file="${scala.dir}" property="scala.present"/>
    <fail
      message="Installed Scala distribution could not be found."
      unless="scala.present"
    />
    <property name="scala-library.jar" value="${scala.dir}/lib/scala-library.jar"/>
    <property name="scala-compiler.jar" value="${scala.dir}/lib/scala-compiler.jar"/>
    <fail message="Scala library '${scala-library.jar}' is not available">
      <condition><not><and>
        <available classname="scala.Predef"
                   classpath="${scala-library.jar}"/>
        <available classname="scala.Option"
                   classpath="${scala-library.jar}"/>
      </and></not></condition>
    </fail>
    <path id="scala.classpath">
      <pathelement location="${scala-library.jar}"/>
      <pathelement location="${scala-compiler.jar}"/>
    </path>
    <taskdef resource="scala/tools/ant/antlib.xml">
      <classpath>
        <path refid="scala.classpath"/>
      </classpath>
    </taskdef>
    <path id="build.classpath">
      <pathelement location="${scala-library.jar}"/>
      <pathelement location="lib/cup/dist/java-cup-11a.jar"/>
      <pathelement location="${build.dir}"/>
    </path>
  </target>

<!-- ===========================================================================
JAR
============================================================================ -->

 <target name="jar" depends="init">
     <mkdir dir="builds"/>
     <mkdir dir="${target.dir}/spec"/>
     <copy file="spec/internal_api.xml" tofile="${target.dir}/spec/internal_api.xml" />
     <copy file="spec/build.xml" tofile="${target.dir}/spec/build.xml" />
     <mkdir dir="${target.dir}/tables"/>
     <copy file="src/main/java/phantm/parser/action_table.bin" tofile="${target.dir}/tables/action_table.bin" />
     <copy file="src/main/java/phantm/parser/reduce_table.bin" tofile="${target.dir}/tables/reduce_table.bin" />
     <copy file="src/main/java/phantm/parser/production_table.bin" tofile="${target.dir}/tables/production_table.bin" />
     <copy file="scala-license.txt" tofile="${target.dir}/scala-license.txt" />

     <delete file="builds/phantm.jar"/>
     <delete file="builds/MANIFEST.mf"/>

     <manifest file="builds/MANIFEST.mf">
      <attribute name="Main-Class" value="phantm.Main" />
     </manifest>

     <jar destfile="builds/phantm.jar"
          manifest="builds/MANIFEST.mf"
          basedir="${target.dir}"
          includes="**/*.class,spec/*.xml,tables/*.bin,scala-license.txt"
          />

     <delete file="${target.dir}/scala-license.txt"/>
     <delete file="${target.dir}/spec"/>
     <delete file="${target.dir}/tables"/>
  </target>

<!-- ===========================================================================
RELEASE
============================================================================ -->

  <target name="release" description="Make a (no-source) release." depends="jar">
      <mkdir dir="${release.dir}"/>

      <java jar="${proguard.jar}" fork="true">
       <arg value="
          -injars             builds/phantm.jar
          -injars             lib/cup/dist/java-cup-11a-runtime.jar
          -injars             ${scala-library.jar}
          -outjars            ${release.dir}/phantm-latest.jar
          -libraryjars        ${java.home}/lib/rt.jar
          -ignorewarnings
          -dontwarn
          -dontoptimize
          -dontobfuscate
          -verbose

          -keep public class ${main.class} {
              public static void main(java.lang.String[]);
          } 
          " />
      </java>
  </target>

<!-- ===========================================================================
CLEAN
============================================================================ -->

  <macrodef name="remove">
    <attribute name="dir"/>
    <sequential>
      <delete dir="@{dir}" includeemptydirs="yes" quiet="yes" failonerror="no"/>
    </sequential>
  </macrodef>

  <target name="clean">
    <remove dir="${build.dir}"/>
  </target>

</project>

<project name="emugen" default ="dist" basedir=".">
  <property name="etc"       location="etc"       />
  <property name="bin"       location="bin"       />
  <property name="lib"       location="lib"       />
  <property name="src"       location="src"       />
  <property name="java"      location="java"      />
  <property name="classes"   location="classes"   />
  <property name="dist"      location="dist"      />
  <!--property name="test"      location="test"      /-->
  <property name="flex"      location="flex"      />
  <property name="cup"       location="cup"       />

  <!-- initialize the workspace -->
  <target name="init">
    <tstamp />
    <mkdir dir="${src}" />
    <mkdir dir="${java}" />
    <mkdir dir="${classes}" />
    <mkdir dir="${dist}" />    
  </target>

  <property environment="env" />

  <path id="libraries">
     <pathelement location="${src}" />
     <fileset dir="${lib}">
	<include name="**/*.jar" />
     </fileset>
  </path>

  <path id="binaries">
     <fileset dir="${bin}">
	<include name="**/*.jar" />
     </fileset>
  </path>

  <target name="clean">
    <delete dir="${java}" />
    <delete dir="${classes}" />
    <delete dir="${dist}" />
  </target>

  <taskdef name="jflex" classname="JFlex.anttask.JFlexTask" classpath="${bin}/JFlex.jar" />

  <target name="cup" depends="init">
    <java jar="${bin}/java-cup-11a.jar" fork="true">
        <arg value="-interface" />
        <arg value="-destdir" />
        <arg value="${java}" />
        <arg value="${cup}/parser.cup" />
    </java>
  </target>

  <target name="jflex" depends="cup">
    <jflex file="${flex}/Lexer.jflex" destdir="${java}" />
  </target>

  <target name="compile" depends="jflex">
    <copy todir="${java}"><fileset dir="${src}"></fileset></copy>
    <javac srcdir="${java}" destdir="${classes}" verbose="off" listfiles="off" debug="on" source="1.2" target="1.2">
      <classpath refid="libraries"/>
    </javac>
  </target>

  <target name="dist" depends="compile">
   <jar jarfile="${dist}/java-cup-11a.jar" basedir="${classes}">
      <manifest>
        <attribute name="Main-Class" value="java_cup/Main" />
	<attribute name="Class-Path" value="java-cup-11a-runtime.jar" />
      </manifest>
    </jar>
    <jar jarfile="${dist}/java-cup-11a-runtime.jar" basedir="${classes}" includes="java_cup/runtime/*">
    </jar>
  </target>

  <target name="test" depends="dist">
    <java jar="${dist}/java-cup-11a.jar" fork="true">
        <arg value="-interface" />
        <arg value="${cup}/parser.cup" />
    </java>  
  </target>
</project>
