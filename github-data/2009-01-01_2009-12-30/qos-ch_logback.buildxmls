<project name="lbaccess" default="usage" basedir=".">

	<property file="build.properties" />

	<!-- The base directory relative to which most targets are built -->
	<property name="base" value="." />

	<property name="source.home" value="./src/java/" />
	<property name="javac.dest" value="./classes" />

	<property name="deprecation" value="on" />
	<property name="debug" value="on" />

	<!-- The stem where most LB core source code is located. -->
	<property name="stem" value="com/logback/access" />

	<path id="access.classpath">
		<pathelement location="${source.home}" />
		<pathelement location="${javac.dest}" />
	</path>


	<!-- ================================================================= -->
	<!--                        TARGETS                                    -->
	<!-- ================================================================= -->



	<!-- ================================================================= -->
	<!-- Default target                                                    -->
	<!-- ================================================================= -->

	<target name="usage">
		<echo>
      
      These are the targets supported by this ANT build scpript:
      
      build - compile all project files, if a certain library is missing, 
              then the compilation of its dependents are skipped.
    </echo>
	</target>

	<target name="prepare">
		<mkdir dir="${javac.dest}" />
	</target>

	<!-- ================================================================= -->
	<!-- Remove all generated files such as compiled class files and test  -->
	<!-- case output.                                                     -->
	<!-- ================================================================= -->
	<target name="clean">
		<delete dir="${javac.dest}/" />
	</target>

	<!-- ================================================================= -->
	<!-- Compile test cases and related source files.                      -->
	<!-- ================================================================= -->
	<target name="build" depends="prepare">
		<javac srcdir="${source.home}" destdir="${javac.dest}" 
			excludes="${stem}/xynz/toto.java" 
			deprecation="${deprecation}" 
			debug="${debug}">
			<classpath refid="access.classpath" />
		</javac>
	</target>


	 <target name="logback-access.jar" depends="build">
	    <delete>
	      <fileset dir=".">
	        <include name="logback-access*.jar"/>
	      </fileset>
	    </delete>

	    <jar jarfile="logback-access.jar" basedir="${javac.dest}"
	         includes="${stem}/**/*.class"
	          excludes="**/UnitTest**">

	      <manifest>
	        <section name="com/logback/access">
	          <attribute name="Implementation-Title" value="LOGBack-access"/>
	          <attribute name="Implementation-Version" value="${version}"/>
	          <attribute name="Implementation-Vendor" value="LOGBack.com"/>
	        </section>
	      </manifest>
	    </jar>
	  </target>


</project>
<project name="osgi-test" default="testAll">

	<!--
    This build file is intended for testing purposes. It does not
    actually package or create any files with a lifespan beyond that
    of the current test cycle.
    
		This build file is usually run indirectly via Maven.
		
		When running this build file through Ant directly, you must
		define the currentVersion property on the command line, e.g.:
		
		ant  -DcurrentVersion=1.5.4-SNAPSHOT	
	-->
	
  <!-- We skip the test if the maven.test.skip system property is set
       to true. See also http://jira.qos.ch/browse/LBCLASSIC-191 -->

	<echo message="compile classpath: ${currentVersion}" />
  	<echo message="slfj4:    ${org.slf4j:slf4j-api:jar}" />
    <echo message="felix   ${org.apache.felix:org.apache.felix.main:jar}" />



  <property name="iBundleJar" value="target/iBundle.jar"/>
  <property name="bundlesDir" value="bundle"/>


	<echo message="===============================" />
	<echo message="basedir:           ${basedir}" />
	<echo message="===============================" />
            
  <path id="basicCP">
    <pathelement location="${org.apache.felix:org.apache.felix.main:jar}" />    
    <pathelement location="target/classes/" />
    <pathelement location="target/test-classes" />  
	</path >


	<path id="minimal">
		<pathelement location="target/test-classes/" />
	</path >

  <target name="copySLF4J_JAR">
    <echo>Copying ${org.slf4j:slf4j-api:jar} to lib/</echo>
    <delete>
      <fileset dir="../logback-examples/lib/" includes="slf4j-*SNAPSHOT.jar" />
    </delete>
    <copy file="${org.slf4j:slf4j-api:jar}" todir="lib/" />
  </target>

	<target name="init" depends="copySLF4J_JAR">
		<mkdir dir="target/unit-reports" />
	</target>

  <target name="createIBundle" unless="maven.test.skip">
    <mkdir dir="${bundlesDir}"/>
    <jar destFile="${iBundleJar}" 
         manifest="src/IBUNDLE-META-INF/MANIFEST.MF"
         basedir="target/test-classes/"
         includes="integrator/**.class"/>
                   
  </target>

	<target name="testAll" depends="init, createIBundle, logback" unless="maven.test.skip">
	</target>


  <macrodef name="prepareOSGiHarness">
    <attribute name="binding"/>
    <sequential>
      <delete>
        <fileset dir="${bundlesDir}" includes="*.jar"/>
      </delete>
      <copy file="${iBundleJar}" todir="${bundlesDir}"/>
      <copy file="lib/slf4j-api-${slf4j.version}.jar" todir="${bundlesDir}"/>
      <copy file="../logback-core/target/logback-core-${currentVersion}.jar" todir="${bundlesDir}"/>
      <copy file="target/logback-classic-${currentVersion}.jar" todir="${bundlesDir}"/>
      <echo>value of binding = @{binding}</echo>
    </sequential>
  </macrodef>


   <!-- for some reason if mvn is invoked from the parent directory, junit gets
        invoked from the parent dir, which messes up theses tests. Hence, the
        fork="yes" dir="${basedir}" -->

	<target name="logback" unless="maven.test.skip">
    <prepareOSGiHarness binding="logback"/>
    <junit printsummary="yes" fork="yes" dir="${basedir}" haltonfailure="yes">    
      <classpath refid="basicCP"/>
      <formatter type="plain" />
      <test fork="yes" todir="target/unit-reports" name="org.slf4j.test_osgi.BundleTest" />
    </junit>
	</target>
  
</project>