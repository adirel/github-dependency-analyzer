/*
 * Copyright 2010 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.gradle.build.Install
import org.gradle.build.BuildTypes
import org.gradle.build.TestReportAggregator

defaultTasks 'assemble'
apply plugin: 'java-base'
archivesBaseName = 'gradle'

extensions.buildTypes = new BuildTypes(project)

buildTypes {
    sanityCheck "classes", "doc:checkstyleApi", "codeQuality", "docs:check"

    // The minimum to be run before check-in
    preCommitBuild "doc:checkstyleApi", "docs:check", "codeQuality", "classes", "test"
    quickCheck "doc:checkstyleApi", "docs:check", "codeQuality", "classes", "test"

    // For testing pull requests
    pullRequestValidation "doc:checkstyleApi", "docs:check", "codeQuality", "classes"

    // A full (in-process) test
    developerBuild "check"

    // Used by the first phase of the build pipeline
    quickTest "runtimeTests", "runtimeIntegTests"

    // Used for builds to run all tests, but not necessarily on all platforms
    fullTest "runtimeTests", "runtimeIntegTests", useIncomingDistributions: true, defaultIntegTestExecuter: "forking"

    // Used for builds to test the code on certain platforms
    platformTest "runtimeTests", "runtimeIntegTests", useIncomingDistributions: true, defaultIntegTestExecuter: "forking", testAllPlatforms: true

    // Tests using the daemon mode
    daemonTest "runtimeIntegTests", useIncomingDistributions: true, defaultIntegTestExecuter: "daemon"

    // Run the integration tests using the parallel executer
    parallelTest "runtimeIntegTests", useIncomingDistributions: true, defaultIntegTestExecuter: "parallel"

    // Run the performance tests
    performanceTest "performance:integTest", useIncomingDistributions: true

    // Run the performance tests
    localPerformanceTest "performance:integTest"

    // Used for cross version tests on CI
    crossVersionTest "runtimeIntegTests", crossVersionTestsOnly: "", testVersions: "all", useIncomingDistributions: true, defaultIntegTestExecuter: "forking"

    // Used to build production distros and smoke test them
    packageBuild "verifyIsProductionBuildEnvironment", "clean", "buildDists", "distributions:integTest"

    // Used to build production distros and smoke test them
    promotionBuild "verifyIsProductionBuildEnvironment", "clean", "docs:check", "buildDists", "distributions:integTest", "uploadArchives"
}

ext {
    jvm = org.gradle.internal.jvm.Jvm.current()
    javaVersion = JavaVersion.current()
    isCiServer = System.getenv().containsKey("TEAMCITY_VERSION")
    isWindows = org.gradle.internal.os.OperatingSystem.current().windows

    if (project.hasProperty("maxParallelForks")) {
        project.maxParallelForks = Integer.valueOf(project.maxParallelForks, 10)
    } else {
        ext.maxParallelForks = Math.max(2, (int) (Runtime.runtime.availableProcessors() / 2))
    }

    if (project.hasProperty("useIncomingDistributions")) {
        project.useIncomingDistributions = true
    } else {
        ext.useIncomingDistributions = false
    }

    internalProjects = subprojects.findAll { it.name.startsWith("internal") || it.name in ["integTest", "distributions"] }
    groovyProjects = subprojects
    publicGroovyProjects = groovyProjects - internalProjects
    publishedProjects = [project(':core'), project(':toolingApi'), project(':wrapper'), project(':baseServices'), project(':messaging')]
    pluginProjects = [
        'plugins', 'codeQuality', 'jetty', 'antlr', 'wrapper', 'osgi', 'maven',
        'ide', 'announce', 'scala', 'sonar', 'signing', 'cpp', 'ear', 'javascript', 'buildComparison',
        'diagnostics', 'reporting', 'publish', 'ivy', 'jacoco', 'buildInit', 'languageJvm', 'languageBase'
    ].collect {
        project(it)
    }
}

apply from: "gradle/buildReceipt.gradle"
apply from: "gradle/incomingDistributions.gradle"
apply from: "gradle/versioning.gradle"
apply from: "gradle/dependencies.gradle"
apply from: "gradle/wrapper.gradle"
apply from: "gradle/idea.gradle"
apply from: "gradle/eclipse.gradle"
apply from: "gradle/classycle.gradle"
apply from: "gradle/noDependencyResolutionDuringConfiguration.gradle"
apply from: "gradle/testGroupings.gradle"

allprojects {
    group = 'org.gradle'

    repositories {
        maven { url 'http://repo.gradle.org/gradle/libs' }
    }
}

subprojects {
    version = rootProject.version

    if (project in groovyProjects) {
        apply from: "$rootDir/gradle/groovyProject.gradle"
        apply from: "$rootDir/gradle/testWithUnknownOS.gradle"
        check.dependsOn ":docs:checkstyleApi"
        check.dependsOn "codeQuality"
    }

    if (project in publishedProjects) {
        apply from: "$rootDir/gradle/publish.gradle"
    }

    apply from: "$rootDir/gradle/codeQuality.gradle"

    if (isCiServer) {
        reporting.baseDir "$rootProject.reporting.baseDir/${path.replaceFirst(':', '').replaceAll(':', '.')}"
    }
}

configurations {
    runtime {
        visible = false
    }
    gradlePlugins {
        visible = false
    }
    testRuntime {
        extendsFrom runtime
        extendsFrom gradlePlugins
    }
}

dependencies {
    runtime project(':launcher')
    runtime project(':wrapper')
    gradlePlugins pluginProjects
    gradlePlugins project(':coreImpl')
}

task verifyIsProductionBuildEnvironment << {
    assert javaVersion.java7 : "Must use a Java 7 compatible JVM to perform this build. Current JVM is ${jvm}"
    def systemCharset = java.nio.charset.Charset.defaultCharset().name()
    assert systemCharset == "UTF-8" : "Platform encoding must be UTF-8. Is currently $systemCharset. Set -Dfile.encoding=UTF-8."
}

task waitForDaemonsToDie {
    if (!project.hasProperty("noWaitForDaemonsToDie")) {
        if (isWindows && isCiServer && buildTypes.activeNames.contains("crossVersionTest")) {
            gradle.startParameter.taskNames.add(0, it.path)
        }
        doLast {
            def mins = 2
            println "I'm waiting for $mins mins so that existing daemons can die with honour. It's a workaround until we fix it properly."
            sleep mins * 60 * 1000
        }
    }
}

task aggregateTestReports(type: TestReportAggregator) {
    testReportDir = reporting.file("tests")
    testResultsDir = file("${buildDir}/test-results")
    projects = subprojects
}

evaluationDependsOn ":distributions"

task install(type: Install) {
    description = 'Installs the minimal distribution into directory $gradle_installPath'
    group = 'build'
    with project(":distributions").binDistImage
    installDirPropertyName = 'gradle_installPath'
}

task installAll(type: Install) {
    description = 'Installs the full distribution into directory $gradle_installPath'
    group = 'build'
    with project(":distributions").allDistImage
    installDirPropertyName = 'gradle_installPath'
}


apply from: "gradle/intTestImage.gradle"/*
 * Copyright 2010 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'groovy'
apply plugin: 'checkstyle'
apply plugin: 'codenarc'
apply plugin: 'idea'
apply plugin: 'eclipse'

repositories {
    maven { url 'http://repo.gradle.org/gradle/libs' }
    mavenCentral()
}

dependencies {
    compile gradleApi()
    compile 'com.google.guava:guava-jdk5:14.0.1@jar'
    compile 'commons-lang:commons-lang:2.6@jar'
    compile localGroovy()
    testCompile 'junit:junit:4.11@jar'
    testCompile 'org.spockframework:spock-core:0.7-groovy-1.8@jar', 'cglib:cglib-nodep:2.2', 'org.objenesis:objenesis:1.2'

    compile "org.pegdown:pegdown:1.1.0"
    compile "org.jsoup:jsoup:1.6.3"

    //below dependency was deployed to the repo.gradle.org
    //it's built from sources at: https://github.com/szczepiq/jarjar
    //if code changes are needed in this library we need to figure out a better way of distributing them.
    compile "org.gradle.jarjar:jarjar:1.2.1"
}
apply from: '../gradle/compile.gradle'
apply from: '../gradle/codeQuality.gradle'
apply from: '../gradle/classycle.gradle'
apply plugin: "java"
apply plugin: "java"

Not FoundNot FoundNot FoundNot Foundimport org.gradle.api.internal.tasks.options.Option
import org.gradle.api.internal.tasks.options.OptionValues

subprojects{
    task hello(type: CustomTask)
}

class CustomTask extends DefaultTask {
    @TaskAction
    void doSomething() {
    }

    @Option(option = "stringValue", description = "Configures a string value in CustomTask.")
    public void setStringValue(String value) {
    }

    @OptionValues("stringValue")
    public List<String> possibleValues(){
        return Arrays.asList("optionA", "optionB", "$path")
    }
}import org.gradle.api.internal.tasks.options.Option

allprojects{
    task hello(type: CustomTask)
}

class CustomTask extends DefaultTask {
    @TaskAction
    void doSomething() {
    }

    @Option(option = "enumValue", description = "Configures an enum value in CustomTask.")
    public void setEnumValue(TestEnum value) {
    }

    @Option(option = "booleanValue", description = "Configures a boolean flag in CustomTask.")
    public void setBooleanValue(boolean value) {
    }
}

enum TestEnum {
    ABC, DEF, GHIJKL
}// START SNIPPET use-plugin
apply plugin: 'announce'
// END SNIPPET use-plugin
// START SNIPPET use-build-announcements-plugin
apply plugin: 'build-announcements'
// END SNIPPET use-build-announcements-plugin

//START SNIPPET announce-plugin-conf
announce {  
  username = 'myId'
  password = 'myPassword'
}
//END SNIPPET announce-plugin-conf


//START SNIPPET announce-usage
task helloWorld << {  
    println "Hello, world!"
}  

helloWorld.doLast {  
    announce.announce("helloWorld completed!", "twitter")
    announce.announce("helloWorld completed!", "local")
}
//END SNIPPET announce-usage

// START SNIPPET use-plugin
apply plugin: 'antlr'
// END SNIPPET use-plugin

// START SNIPPET declare-dependency
repositories {
    mavenCentral()
}

dependencies {
    antlr 'antlr:antlr:2.7.7'
// END SNIPPET declare-dependency
    testCompile 'junit:junit:4.11'
// START SNIPPET declare-dependency
}
// END SNIPPET declare-dependency
apply plugin:'java'
// START SNIPPET use-plugin
apply plugin:'application'
// END SNIPPET use-plugin

version = '1.0.2'

// START SNIPPET mainClassName-conf
mainClassName = "org.gradle.sample.Main"
// END SNIPPET mainClassName-conf

// START SNIPPET application-defaultjvmargs
applicationDefaultJvmArgs = ["-Dgreeting.language=en"]
// END SNIPPET application-defaultjvmargs

// START SNIPPET distribution-spec
task createDocs {
    def docs = file("$buildDir/docs")
    outputs.dir docs
    doLast {
        docs.mkdirs()
        new File(docs, "readme.txt").write("Read me!")
    }
}

applicationDistribution.from(createDocs) {
    into "docs"
}
// END SNIPPET distribution-spec

repositories {
    mavenCentral()
}

dependencies {
    compile 'commons-collections:commons-collections:3.2.1'
}/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// START SNIPPET use-build-dashboard-plugin
apply plugin: 'build-dashboard'
// END SNIPPET use-build-dashboard-plugin
apply plugin: 'codenarc'
apply plugin: 'groovy'

repositories {
    mavenCentral()
}

dependencies {
    compile localGroovy()
    testCompile 'junit:junit:4.11'
}import org.junit.Assert

dependencies {
	runtime project(':shared')
}

task testDeps(dependsOn: configurations.runtime) << {
	Assert.assertEquals(['commons-lang-2.4.jar', 'commons-io-1.2.jar', 'shared-1.0.jar'] as Set,
            configurations.runtime.files.collect { it.name } as Set)
}
subprojects {
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath 'junit:junit:4.11'
        }
    }
    apply plugin: 'java'
    repositories {
        mavenCentral()
    }
}import org.junit.Assert

version = '1.0'
dependencies {
	runtime module("commons-lang:commons-lang:2.4") {
	   dependency("commons-io:commons-io:1.2")
	}
}

task testDeps << {
	Assert.assertEquals(['commons-lang-2.4.jar', 'commons-io-1.2.jar'] as Set,
            configurations.runtime.files.collect { it.name } as Set) 
}
// START SNIPPET use-checkstyle-plugin
apply plugin: 'checkstyle'
// END SNIPPET use-checkstyle-plugin
// START SNIPPET use-codenarc-plugin
apply plugin: 'codenarc'
// END SNIPPET use-codenarc-plugin
// START SNIPPET use-findbugs-plugin
apply plugin: 'findbugs'
// END SNIPPET use-findbugs-plugin
// START SNIPPET use-pmd-plugin
apply plugin: 'pmd'
// END SNIPPET use-pmd-plugin
// START SNIPPET use-jdepend-plugin
apply plugin: 'jdepend'
// END SNIPPET use-jdepend-plugin
apply plugin: 'java'
apply plugin: 'groovy'

repositories {
    mavenCentral()
}

dependencies {
    compile localGroovy()
    testCompile 'junit:junit:4.11'
}apply plugin: 'product'

// A custom build element. This defines the product to build
product {
    displayName 'Basic Edition'
    // Which modules to include in this product?
    module project(':identityManagement')
    module project(':billing')
}
apply plugin: 'product-module'

dependencies {
    compile project(':identityManagement')
    compile 'commons-lang:commons-lang:2.4'
}

subprojects {
    version = '1.0'
}
apply plugin: 'product'

// A custom build element. This defines the product to build
product {
    displayName 'Enterprise Edition'
    // Which modules to include in this product?
    module project(':identityManagement')
    module project(':billing')
    module project(':reporting')
}
apply plugin: 'product-module'
apply plugin: 'product-module'

dependencies {
    compile project(':identityManagement')
    compile project(':billing')
    compile 'commons-io:commons-io:1.2'
}
apply plugin: 'greeting'

task wrapper(type: Wrapper) {
    // Need to configure the wrapper to point to the custom distribution
    distributionUrl = uri("../plugin/build/distributions/custom-gradle-${gradle.gradleVersion}.zip")
}
apply plugin: 'groovy'

repositories {
    mavenCentral()
}

configurations {
    gradleApi
    gradleApi.extendsFrom groovy
    compile.extendsFrom gradleApi
}

dependencies {
    gradleApi gradleApi()
    compile localGroovy()
    compile 'com.google.guava:guava:11.0.2'
}

task dist(type: Zip) {
    description = 'Creates a custom Gradle distribution containing the custom plugins'
    // Make sure you give this distribution a name that indicates that it is not the standard distribution
    archiveName = "custom-gradle-${gradle.gradleVersion}.zip"
    into("custom-gradle-${gradle.gradleVersion}") {
        into('init.d') { from 'src/initScripts' }
        into('init.d/libs') {
            from jar
            from configurations.runtime - configurations.gradleApi
        }
        from gradle.gradleHomeDir
    }
}
// START SNIPPET use-plugin
// START SNIPPET use-task
buildscript {
    repositories {
        maven {
            url uri('../repo')
        }
    }
    dependencies {
        classpath group: 'org.gradle', name: 'customPlugin', version: '1.0-SNAPSHOT'
    }
}
// END SNIPPET use-task
apply plugin: 'greeting'
// END SNIPPET use-plugin
// START SNIPPET use-task

task greeting(type: org.gradle.GreetingTask) {
    greeting = 'howdy!'
}
// END SNIPPET use-task
// START SNIPPET use-plugin
apply plugin: 'groovy'

// START SNIPPET gradle-api-dependencies
// START SNIPPET local-groovy-dependencies
dependencies {
// END SNIPPET local-groovy-dependencies
    compile gradleApi()
// END SNIPPET gradle-api-dependencies
// START SNIPPET local-groovy-dependencies
    compile localGroovy()
// START SNIPPET gradle-api-dependencies
}
// END SNIPPET gradle-api-dependencies
// END SNIPPET local-groovy-dependencies
// END SNIPPET use-plugin

apply plugin: 'maven'

repositories {
    mavenCentral()
}

dependencies {
    testCompile 'junit:junit:4.11'
}

group = 'org.gradle'
version = '1.0-SNAPSHOT'

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: uri('../repo'))
        }
    }
}
apply plugin: 'ear'
apply plugin: 'java'

repositories { mavenCentral() }

dependencies {
    //following dependencies will become the ear modules and placed in the ear root
    deploy project(':war')

    //following dependencies will become ear libs and placed in a dir configured via libDirName property
    earlib group: 'log4j', name: 'log4j', version: '1.2.15', ext: 'jar'
}

ear {
    appDirName 'src/main/app'  // use application metadata found in this folder
    libDirName 'APP-INF/lib'  // put dependency libraries into APP-INF/lib inside the generated EAR;
                                // also modify the generated deployment descriptor accordingly
    deploymentDescriptor {  // custom entries for application.xml:
//      fileName = "application.xml"  // same as the default value
//      version = "6"  // same as the default value
        applicationName = "customear"
        initializeInOrder = true
        displayName = "Custom Ear"  // defaults to project.name
        description = "My customized EAR for the Gradle documentation"  // defaults to project.description
//      libraryDirectory = "APP-INF/lib"  // not needed, because setting libDirName above did this for us
//      module("my.jar", "java")  // wouldn't deploy since my.jar isn't a deploy dependency
//      webModule("my.war", "/")  // wouldn't deploy since my.war isn't a deploy dependency
        securityRole "admin"
        securityRole "superadmin"
        withXml { provider -> // add a custom node to the XML
            provider.asNode().appendNode("data-source", "my/data/source")
        }
    }
}
/*
 * Copyright 2011 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'war'

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'log4j', name: 'log4j', version: '1.2.15', ext: 'jar'
}// START SNIPPET use-ear-plugin
apply plugin: 'ear'
// END SNIPPET use-ear-plugin

repositories {
    mavenCentral()
}

dependencies {
    deploy project(':war')

    earlib group: 'log4j', name: 'log4j', version: '1.2.15', ext: 'jar'
}/*
 * Copyright 2011 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'war'

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'log4j', name: 'log4j', version: '1.2.15', ext: 'jar'
}apply plugin: 'war'
// START SNIPPET use-plugin
apply plugin: 'eclipse'
// END SNIPPET use-plugin
// START SNIPPET module-before-merged
// START SNIPPET module-when-merged
eclipse.classpath.file {
// END SNIPPET module-when-merged
    beforeMerged { classpath ->
        classpath.entries.removeAll { entry -> entry.kind == 'lib' || entry.kind == 'var' }
    }
// END SNIPPET module-before-merged
// START SNIPPET module-when-merged
    whenMerged { classpath ->
        classpath.entries.findAll { entry -> entry.kind == 'lib' }*.exported = false
    }
// START SNIPPET module-before-merged
}
// END SNIPPET module-before-merged
// END SNIPPET module-when-merged

// START SNIPPET project-before-merged
eclipse.project.file.beforeMerged { project ->
    project.natures.clear()
}
// END SNIPPET project-before-merged

// START SNIPPET wtp-with-xml
apply plugin: 'eclipse-wtp'

eclipse.wtp.facet.file.withXml { provider ->
    provider.asNode().fixed.find { it.@facet == 'jst.java' }.@facet = 'jst2.java'
}
// END SNIPPET wtp-with-xmlapply plugin: 'groovy'

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.2.0'
    testCompile 'junit:junit:4.11'
}

// START SNIPPET custom-source-locations
sourceSets {
    main {
        groovy {
            srcDirs = ['src/groovy']
        }
    }

    test {
        groovy {
            srcDirs = ['test/groovy']
        }
    }
}
// END SNIPPET custom-source-locations
apply plugin: 'groovy'
version = 1.0

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.2.0'
    testCompile 'junit:junit:4.11'
}
subprojects {
    repositories {
        mavenCentral()
    }
}repositories {
    mavenCentral()
}

dependencies {
    testCompile 'junit:junit:4.11'
}
apply plugin: 'java'

version = 'SNAPSHOT'

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.2.0'
}
apply plugin: 'groovy'

group = 'org.gradle'
version = '1.0'

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.2.0'
    compile project(':groovycDetector')
    testCompile 'junit:junit:4.11'
}

sourceSets {
    main {
        java {
            exclude '**/ExcludeJava.java'
        }
        groovy {
            exclude '**/ExcludeGroovy.groovy', '**/ExcludeGroovyJava.java'
        }
    }
}

compileGroovy {
    groovyOptions.fork(memoryMaximumSize: '128M')
}

jar {
    manifest.attributes(myprop: 'myvalue')
    metaInf {
        from 'src/metaInfFiles'
    }
}

test {
	systemProperties['org.gradle.integtest.buildDir'] = buildDir.absolutePath
}
apply plugin: 'eclipse'
// START SNIPPET use-plugin
apply plugin: 'groovy'
// END SNIPPET use-plugin

// START SNIPPET groovy-dependency
repositories {
    mavenCentral()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.2.0'
// END SNIPPET groovy-dependency
    testCompile 'junit:junit:4.11'
// START SNIPPET groovy-dependency
}
// END SNIPPET groovy-dependency
// START SNIPPET use-plugin
apply plugin: 'idea'
// END SNIPPET use-plugin
// START SNIPPET module-before-merged
// START SNIPPET module-when-merged
idea.module.iml {
// END SNIPPET module-when-merged
    beforeMerged { module ->
        module.dependencies.clear()
    }
// END SNIPPET module-before-merged
// START SNIPPET module-when-merged
    whenMerged { module ->
        module.dependencies*.exported = true
    }
// START SNIPPET module-before-merged
}
// END SNIPPET module-before-merged
// END SNIPPET module-when-merged

// START SNIPPET project-before-merged
// START SNIPPET project-with-xml
idea.project.ipr {
// END SNIPPET project-with-xml
    beforeMerged { project ->
        project.modulePaths.clear()
    }
// END SNIPPET project-before-merged
// START SNIPPET project-with-xml
    withXml { provider ->
        provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
    }
// START SNIPPET project-before-merged
}
// END SNIPPET project-before-merged
// END SNIPPET project-with-xml
apply plugin: 'ivy-publish'

group = 'org.gradle.sample'
version = '1.0'

publishing {
// START SNIPPET customize-descriptor
    publications {
        ivyCustom(IvyPublication) {
            descriptor.withXml {
                asNode().info[0].appendNode('description', 'A demonstration of ivy descriptor customization')
            }
        }
    }
// END SNIPPET customize-descriptor
    repositories {
        ivy {
            url "$buildDir/repo" // change to point to your repo, e.g. http://my.org/repo
        }
    }
}
// START SNIPPET generate
model {
    tasks.generateDescriptorFileForIvyCustomPublication {
        destination = file("$buildDir/generated-ivy.xml")
    }
}
// END SNIPPET generate


subprojects {
    apply plugin: 'java'
    apply plugin: 'ivy-publish'

    version = '1.0'
    group = 'org.gradle.sample'

    repositories {
        mavenCentral()
    }
    // START SNIPPET publish-custom-artifact
    task sourceJar(type: Jar) {
        from sourceSets.main.java
        classifier "source"
    }
    // END SNIPPET publish-custom-artifact
}

project(":project1") {
    description = "The first project"

    dependencies {
       compile 'junit:junit:4.11', project(':project2')
    }
}

project(":project2") {
    description = "The second project"

    dependencies {
       compile 'commons-collections:commons-collections:3.1'
    }
}

subprojects {
// START SNIPPET publish-custom-artifact
    publishing {
// END SNIPPET publish-custom-artifact
        repositories {
            ivy {
                url "${rootProject.buildDir}/repo" // change to point to your repo, e.g. http://my.org/repo
            }
        }
// START SNIPPET publish-custom-artifact
        publications {
            ivy(IvyPublication) {
                from components.java
                artifact(sourceJar) {
                    type "source"
                    conf "runtime"
                }
// END SNIPPET publish-custom-artifact
                descriptor.withXml {
                    asNode().info[0].appendNode('description', description)
                }
// START SNIPPET publish-custom-artifact
            }
        }
    }
// END SNIPPET publish-custom-artifact
}
subprojects {
    apply plugin: 'java'
    apply plugin: 'ivy-publish'

    repositories {
        mavenCentral()
    }

    publishing {
        repositories {
            ivy {
                url "${rootProject.buildDir}/repo" // change to point to your repo, e.g. http://my.org/repo
            }
        }
    }
}

project(":project1") {
    dependencies {
       compile 'junit:junit:4.11'
    }


    // START SNIPPET customize-identity
    publishing {
        publications {
            ivy(IvyPublication) {
                organisation 'org.gradle.sample'
                module 'project1-sample'
                revision '1.1'
                descriptor.status = 'milestone'

                from components.java
            }
        }
    }
    // END SNIPPET customize-identity
}

project(":project2") {
    // START SNIPPET multiple-publications
    task apiJar(type: Jar) {
        baseName "publishing-api"
        from sourceSets.main.output
        exclude '**/impl/**'
    }
    // END SNIPPET multiple-publications

    dependencies {
       compile 'commons-collections:commons-collections:3.1', project(':project1')
    }

    // START SNIPPET multiple-publications
    publishing {
        publications {
            impl(IvyPublication) {
                organisation 'org.gradle.sample.impl'
                module 'project2-impl'
                revision '2.3'

                from components.java
            }
            api(IvyPublication) {
    // END SNIPPET multiple-publications
                configurations {
                    it.default {
                        extend "runtime"
                    }
                    runtime {}
                }
                artifact(apiJar) {
                    conf "runtime"
                }

    // START SNIPPET multiple-publications
                organisation 'org.gradle.sample'
                module 'project2-api'
                revision '2'
            }
        }
    }
    // END SNIPPET multiple-publications
}
apply plugin: 'java'
// START SNIPPET use-plugin
apply plugin: 'ivy-publish'
// END SNIPPET use-plugin

group = 'org.gradle.sample'
version = '1.0'

publishing {
// START SNIPPET publish-component
    publications {
        ivyJava(IvyPublication) {
            from components.java
        }
    }
// END SNIPPET publish-component
// START SNIPPET repositories
    repositories {
        ivy {
            url "$buildDir/repo" // change to point to your repo, e.g. http://my.org/repo
        }
    }
// END SNIPPET repositories
}


allprojects {
    apply plugin: 'java'
}

version = '1.0'
group = 'org.gradle.test'

dependencies {
   compile 'junit:junit:4.11', project(':subproject')
}

ant {
    importBuild "$projectDir/build.xml"
    buildDir = owner.buildDir.toString()
}

File localPublicationsDir = file("$buildDir/repo")

repositories {
    mavenCentral()
}

task sourceJar(type: Jar) {
    baseName = 'ivypublishSource'
    from sourceSets.main.java
    classifier = 'src'
}

artifacts {
    archives sourceJar
}

uploadArchives {
    uploadDescriptor = true
    repositories {
        ivy {
            ivyPattern localPublicationsDir.absolutePath + '/[module]/[revision]/ivy.xml'
            artifactPattern localPublicationsDir.absolutePath + '/[module]/[revision]/[artifact](.[ext])'
        }
    }
    doLast {
        File repoDir = new File("$buildDir/repo/ivypublish/1.0/")
        assert ["ivy.xml", "ivy.xml.sha1", "ivypublish.jar", "ivypublish.jar.sha1", "ivypublishSource.jar", "ivypublishSource.jar.sha1"] as Set == repoDir.listFiles().collect { it.name } as Set
        assert jar.archivePath.size() == new File(repoDir, 'ivypublish.jar').size()
        sourceJar.archivePath.size() == new File(repoDir, 'ivypublishSource.jar').size()

        def ns = new groovy.xml.Namespace("http://ant.apache.org/ivy/maven", 'm')
        def root = new XmlParser().parse(new File(repoDir, 'ivy.xml'))
        assert root.publications.artifact.find { it.@name == 'ivypublishSource' }.attribute(ns.classifier) == 'src'
        assert (root.configurations.conf.collect { it.@name } as Set) == ['archives', 'compile', 'default', 'runtime', 'testCompile', 'testRuntime'] as Set
        assert root.dependencies.dependency.find { it.@org == 'junit' }.attributes() == [org: 'junit', name: 'junit', rev: '4.11', conf: 'compile->default']
        assert root.dependencies.dependency.find { it.@org == 'ivypublish' }.attributes() == [org: 'ivypublish', name: 'subproject', rev: 'unspecified',
                conf: 'compile->default']
    }
}

// It would be nice to test if the stuff published by Gradle can be read by a native ivy ant script.
// The tasks below are supposed to do this. But due to a serious Ivy bugs we can't do it at the
// moment (e.g. https://issues.apache.org/jira/browse/IVY-1110). As soon as this bug is fixed, we
// should uncomment the below.

//ivyConfigure.doLast {
//    def cacheDir = ant.properties['ivy.cache.dir'] + '/org.gradle.test'
//    println cacheDir
//    ant.delete(dir: cacheDir, verbose: true)
//}
//
//retrieveFromAnt {
//    dependsOn uploadArchives
//    doLast {
//        File retrieveDir = new File("$buildDir/antRetrieve")
//        Assert.assertEquals(retrieveDir.listFiles().collect { it.name } as Set,
//                ["ivypublish.jar", "ivypublishSource.jar"] as Set)
//        Assert.assertEquals(jar.archivePath.size(), new File(retrieveDir, 'ivypublish.jar').size())
//        Assert.assertEquals(sourceJar.archivePath.size(), new File(retrieveDir, 'ivypublishSource.jar').size())
//    }
//}





apply plugin: "java"
apply plugin: "maven"

group = "myorg"
version = 1.0

repositories {
    mavenCentral()
}

sourceSets.all { set ->
    def jarTask = task("${set.name}Jar", type: Jar) {
        baseName = baseName + "-$set.name"
        from set.output
    }

    artifacts {
        archives jarTask
    }
}

sourceSets {
    api
    impl
}

dependencies {
    apiCompile 'commons-codec:commons-codec:1.5'

    implCompile sourceSets.api.output
    implCompile 'commons-lang:commons-lang:2.6'

    testCompile 'junit:junit:4.9'
    testCompile sourceSets.api.output
    testCompile sourceSets.impl.output
    runtime configurations.apiRuntime
    runtime configurations.implRuntime
}

jar {
    from sourceSets.api.output
    from sourceSets.impl.output
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: uri("${buildDir}/repo"))

            addFilter("main") { artifact, file -> artifact.name == project.name }
            ["api", "impl"].each { type ->
                addFilter(type) { artifact, file -> artifact.name.endsWith("-$type") }
                
                // We now have to map our configurations to the correct maven scope for each pom
                ["compile", "runtime"].each { scope ->
                    configuration = configurations[type + scope.capitalize()]
                    ["main", type].each { pomName ->
                        pom(pomName).scopeMappings.addMapping 1, configuration, scope
                    }
                }
            }

        }
    }
}
subprojects {
    apply plugin: 'java-base'

    sourceCompatibility = 1.5
    version = '1.0'

    repositories {
        mavenCentral()
    }

    sourceSets {
        main {
            java.srcDir "$projectDir/java"
            resources.srcDir "$projectDir/java"
        }
    }
}
dependencies {
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
    "default" configurations.runtime
}

task jar(type: Jar) {
    from sourceSets.main.output
}

artifacts {
    runtime jar
}
dependencies {
    compile 'junit:junit:4.11', project(':prod')
}

task test(type: Test) {
    testClassesDir = sourceSets.main.output.classesDir
    classpath = sourceSets.main.runtimeClasspath
}

check.dependsOn test

apply plugin: 'java'

repositories {
    mavenCentral()
}

dependencies {
    testCompile 'junit:junit:4.11'
}

// START SNIPPET define-main
sourceSets {
    main {
        java {
            srcDir 'src/java'
        }
        resources {
            srcDir 'src/resources'
        }
    }
// END SNIPPET define-main
    test {
        java {
            srcDir 'test/java'
        }
        resources {
            srcDir 'test/resources'
        }
    }
// START SNIPPET define-main
}
// END SNIPPET define-main
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'commons-math:commons-math:1.1'
    }
}

configurations {
   spi
}

// START SNIPPET dependencies
// START SNIPPET project-dependencies
dependencies {
    compile project(':shared')
// END SNIPPET project-dependencies
// END SNIPPET dependencies
    compile module("commons-lang:commons-lang:2.4") {
        dependency("commons-io:commons-io:1.2")
    }
// START SNIPPET dependencies
// START SNIPPET project-dependencies
}
// END SNIPPET dependencies
// END SNIPPET project-dependencies

// Just a smoke test that using this option does not lead to any exception
compileJava.options.compilerArgs = ['-Xlint:unchecked']

task spiJar(type: Jar) {
    appendix = 'spi'
    from sourceSets.main.output
    include 'org/gradle/api/'
}

artifacts {
  spi spiJar
}

// START SNIPPET dists
task dist(type: Zip) {
    dependsOn spiJar
    from 'src/dist'
    into('libs') {
        from spiJar.archivePath
        from configurations.runtime
    }
}

artifacts {
   archives dist
}
// END SNIPPET dists

// We want to test if commons-math was properly added to the build script classpath
org.apache.commons.math.fraction.Fraction lhs = new org.apache.commons.math.fraction.Fraction(1, 3);
org.gradle.buildsrc.BuildSrcClass bsc = new org.gradle.buildsrc.BuildSrcClass()

task checkProjectDependency(dependsOn: project(':shared').jar) << {
    File cachedSharedJarDir = new File(gradle.gradleUserHomeDir, "cache/multiproject/shared/jars")
    copy {
        from project(':shared').jar.archivePath
        into cachedSharedJarDir
    }
    File sharedJar = configurations.compile.files.find { File file -> file.name.startsWith('shared')}
    assert sharedJar.absolutePath == project(':shared').jar.archivePath.absolutePath
}
// START SNIPPET configuration-injection
subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse-wtp'

    repositories {
       mavenCentral()
    }

    dependencies {
        testCompile 'junit:junit:4.11'
    }

    version = '1.0'

    jar {
        manifest.attributes provider: 'gradle'
    }
}
// END SNIPPET configuration-injection
repositories {
    mavenCentral()
}

dependencies {
    testCompile 'junit:junit:4.11'
}

dependencies {
    compile project(':shared')
}apply plugin: 'war'

version = '2.5'

// START SNIPPET dependency-configurations
dependencies {
// END SNIPPET dependency-configurations    
    compile project(':shared'), 'commons-collections:commons-collections:3.2@jar', 'commons-io:commons-io:1.2', 'commons-lang:commons-lang:2.4@jar'
// START SNIPPET dependency-configurations
    compile project(path: ':api', configuration: 'spi')
// END SNIPPET dependency-configurations
    runtime project(':api')
// START SNIPPET dependency-configurations
}
// END SNIPPET dependency-configurationsapply plugin: 'java'

repositories {
    mavenCentral()
}

dependencies {
    testCompile 'junit:junit:4.11'
}

test {
    systemProperties['property'] = 'value'
    onlyIf { task ->
        compileJava.didWork
    }
}
// START SNIPPET use-plugin
apply plugin: 'java'
// END SNIPPET use-plugin
// START SNIPPET use-eclipse-plugin
apply plugin: 'eclipse'
// END SNIPPET use-eclipse-plugin

// START SNIPPET customization
sourceCompatibility = 1.5
version = '1.0'
jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart', 'Implementation-Version': version
    }
}
// END SNIPPET customization

// START SNIPPET repo
repositories {
    mavenCentral()
}
// END SNIPPET repo

// START SNIPPET dependencies
dependencies {
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
    testCompile group: 'junit', name: 'junit', version: '4.+'
}
// END SNIPPET dependencies

// START SNIPPET task-customization
test {
    systemProperties 'property': 'value'
}
// END SNIPPET task-customization

// START SNIPPET upload
uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}
// END SNIPPET upload
import static org.junit.Assert.*

apply plugin: 'java'
repositories.mavenCentral()
dependencies.testCompile 'junit:junit:4.+'
test.stopAtFailuresOrErrors = false

def events = []
// START SNIPPET testListenerImpl
class MyListener implements org.gradle.api.tasks.testing.TestListener
{
    def events

    public void beforeSuite(TestDescriptor suite) {
        recordAndOutput('suiteStarting: '+suite.getName())
    }

    public void afterSuite(TestDescriptor suite, TestResult result) {
        recordAndOutput 'suiteFinished: '+suite.getName()
    }

    public void beforeTest(TestDescriptor test) {
        recordAndOutput 'testStarting: '+test.getName()
    }

    public void afterTest(TestDescriptor test, TestResult result) {
        recordAndOutput 'testFinished: '+test.getName()+', result: '+result.getResultType()
    }

    private void recordAndOutput(String msg) {
        events << msg
        println '  '+msg
    }
}
// END SNIPPET testListenerImpl

// START SNIPPET testListenerRegister
gradle.addListener(new MyListener(events: events))
// END SNIPPET testListenerRegister

test.doLast {
    def expectedEvents = []
    expectedEvents << 'suiteStarting: DoNothingTest'
    expectedEvents << 'testStarting: doNothing(DoNothingTest)'
    expectedEvents << 'testFinished: doNothing(DoNothingTest), result: SUCCESS'
    expectedEvents << 'testStarting: doNothingButFail(DoNothingTest)'
    expectedEvents << 'testFinished: doNothingButFail(DoNothingTest), result: FAILURE'
    expectedEvents << 'testStarting: doNothingButError(DoNothingTest)'
    expectedEvents << 'testFinished: doNothingButError(DoNothingTest), result: FAILURE'
    expectedEvents << 'suiteFinished: DoNothingTest'

    assertEquals(expectedEvents, events)
}

apply plugin: 'java'

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integration-test/java')
        resources.srcDir file('src/integration-test/resources')
    }
}

dependencies {
    testCompile 'junit:junit:4.11'
    integrationTestCompile 'commons-collections:commons-collections:3.2'
    integrationTestCompile sourceSets.main.output
    integrationTestCompile configurations.testCompile
    integrationTestCompile sourceSets.test.output
    integrationTestRuntime configurations.testRuntime
}

task integrationTest(type: Test, dependsOn: jar) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    systemProperties['jar.path'] = jar.archivePath
}

check.dependsOn integrationTest
apply plugin: 'java'
apply plugin: 'maven-publish'

group = 'org.gradle.sample'
version = '1.0'

dependencies {
   compile 'commons-collections:commons-collections:3.0'
}

repositories {
    mavenCentral()
}

// START SNIPPET publish-custom-artifact
task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier "sources"
            }
        }
    }
// END SNIPPET publish-custom-artifact
    repositories {
        maven {
            url "$buildDir/repo" // change to point to your repo, e.g. http://my.org/repo
        }
    }
// START SNIPPET publish-custom-artifact
}
// END SNIPPET publish-custom-artifact


/*
 * Copyright 2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    repositories {
        mavenCentral()
    }

    publishing {
        repositories {
            maven {
                url "${rootProject.buildDir}/repo" // change to point to your repo, e.g. http://my.org/repo
            }
        }
    }
}

project(":project1") {
    dependencies {
       compile 'org.slf4j:slf4j-api:1.7.5'
    }

    // START SNIPPET customize-identity
    publishing {
        publications {
            maven(MavenPublication) {
                groupId 'org.gradle.sample'
                artifactId 'project1-sample'
                version '1.1'

                from components.java
            }
        }
    }
    // END SNIPPET customize-identity
}

project(":project2") {
    dependencies {
       compile 'commons-collections:commons-collections:3.1', project(':project1')
    }

    // START SNIPPET multiple-publications
    task apiJar(type: Jar) {
        baseName "publishing-api"
        from sourceSets.main.output
        exclude '**/impl/**'
    }

    publishing {
        publications {
            impl(MavenPublication) {
                groupId 'org.gradle.sample.impl'
                artifactId 'project2-impl'
                version '2.3'

                from components.java
            }
            api(MavenPublication) {
                groupId 'org.gradle.sample'
                artifactId 'project2-api'
                version '2'

                artifact apiJar
            }
        }
    }
    // END SNIPPET multiple-publications
}
apply plugin: 'maven-publish'

group = 'org.gradle.sample'
version = '1.0'

publishing {
// START SNIPPET pom-modification
    publications {
        mavenCustom(MavenPublication) {
            pom.withXml {
                asNode().appendNode('description', 'A demonstration of maven POM customization')
            }
        }
    }
// END SNIPPET pom-modification
    repositories {
        maven {
            url "$buildDir/repo" // change to point to your repo, e.g. http://my.org/repo
        }
    }
}
// START SNIPPET generate
model {
    tasks.generatePomFileForMavenCustomPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
}
// END SNIPPET generate


apply plugin: 'java'
// START SNIPPET use-plugin
apply plugin: 'maven-publish'
// END SNIPPET use-plugin

group = 'org.gradle.sample'
version = '1.0'

publishing {
// START SNIPPET publish-component
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
// END SNIPPET publish-component
// START SNIPPET repositories
    repositories {
        maven {
            url "$buildDir/repo" // change to point to your repo, e.g. http://my.org/repo
        }
    }
// END SNIPPET repositories
}

apply plugin: 'war'
// START SNIPPET use-plugin
apply plugin: 'maven'
// END SNIPPET use-plugin

group = 'gradle'
version = '1.0'
archivesBaseName = 'mywar'
buildDir = 'target'

repositories {
    flatDir {
        dirs "lib"
    }
}

configurations {
  runtime.exclude group: 'excludeGroup2', module: 'excludeArtifact2'
}

dependencies {
    compile("group1:compile:1.0") {
        exclude(group: 'excludeGroup', module: 'excludeArtifact')
    }
    providedCompile "group2:providedCompile:1.0@jar"
    runtime "group3:runtime:1.0"
    providedRuntime("group4:providedRuntime:1.0@zip") {
        artifact {
            name = 'providedRuntime-util'
            type = 'war'
        }
    }
    testCompile "group5:testCompile:1.0"
    testRuntime "group6:testRuntime:1.0"
}

// Include a javadoc zip

task javadocZip(type: Zip, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocZip
}

// Configure the release and snapshot repositories

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: uri("pomRepo"))
            snapshotRepository(url: uri("snapshotRepo"))
        }
    }
}

// Customize the contents of the pom

ext.installer = install.repositories.mavenInstaller
ext.deployer = uploadArchives.repositories.mavenDeployer

[installer, deployer]*.pom*.version = '1.0MVN'
installer.pom.project {
    groupId 'installGroup'
}
deployer.pom.groupId = 'deployGroup'

// START SNIPPET new-pom
task writeNewPom << {
    pom {
        project {
            inceptionYear '2008'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
        }
    }.writeTo("$buildDir/newpom.xml")
}
// END SNIPPET new-pom

// START SNIPPET when-configured
[installer, deployer]*.pom*.whenConfigured {pom ->
    pom.dependencies.find {dep -> dep.groupId == 'group3' && dep.artifactId == 'runtime' }.optional = true
}
// END SNIPPET when-configured

task writeDeployerPom(dependsOn: uploadArchives) << {
    deployer.pom.writeTo("$buildDir/deployerpom.xml")
}

apply plugin: 'java'
// START SNIPPET use-plugin
apply plugin: 'maven'
// END SNIPPET use-plugin

group = 'gradle'
version = '1.0'

// Configure the repository

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: uri("pomRepo"))
        }
    }
}
apply plugin: "plugina"
apply plugin: "pluginb"

task showPlugins << {
  project.plugins.each {
    println it.getClass().name
  }
}subprojects {
  apply plugin: "groovy"

  dependencies {
    compile localGroovy()
    compile gradleApi()
  }

// START SNIPPET addToRootProject
rootProject.dependencies {
  runtime project(path)
}
// END SNIPPET addToRootProject
}/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// START SNIPPET apply-plugin
apply plugin: 'assembler'
// END SNIPPET apply-plugin
apply plugin: 'c'

model {
    platforms {
        x86 {
            architecture "i386"
        }
    }
}

sources {
    i386_masm {
        asm {
            source.srcDir "src/main/asm_i386_masm"
        }
    }
    i386_gcc {
        asm {
            source.srcDir "src/main/asm_i386_gcc"
        }
    }
}

// START SNIPPET assembler-args
executables {
    main {
        binaries.all {
            if (toolChain in VisualCpp) {
// END SNIPPET assembler-args
                source sources.i386_masm.asm
// START SNIPPET assembler-args
                assembler.args "/Zi"
            } else {
// END SNIPPET assembler-args
                source sources.i386_gcc.asm
// START SNIPPET assembler-args
                assembler.args "-g"
            }
        }
    }
}
// END SNIPPET assembler-args

/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// START SNIPPET apply-plugin
apply plugin: 'c'
// END SNIPPET apply-plugin

// START SNIPPET libraries
libraries {
    hello {}
}
// END SNIPPET libraries

// START SNIPPET executables
executables {
    main {}
}
// END SNIPPET executables

// START SNIPPET source-library
sources.main.c.lib libraries.hello
// END SNIPPET source-library

// START SNIPPET compiler-args
binaries.all {
    // Define toolchain-specific compiler and linker options
    if (toolChain in Gcc) {
        cCompiler.args "-O2"
        linker.args "-Xlinker", "-S"
    }
    if (toolChain in VisualCpp) {
        cCompiler.args "/Zi"
        linker.args "/DEBUG"
    }
}
// END SNIPPET compiler-args

// START SNIPPET all-shared-libraries
// For any shared library binaries built with Visual C++, define the DLL_EXPORT macro
binaries.withType(SharedLibraryBinary) {
    if (toolChain in VisualCpp) {
        cCompiler.args "/Zi"
        cCompiler.define "DLL_EXPORT"
    }
}
// END SNIPPET all-shared-libraries


apply plugin: "cpp"

executables {
    main {
        binaries.all {
            // Define a preprocessor macro
            cppCompiler.define "NDEBUG"
            // Add some additional compiler arguments
            if (toolChain in Gcc) {
                cppCompiler.args "-fno-access-control", "-fconserve-space"
            }
        }
    }
}

binaries.withType(ExecutableBinary) { binary ->
    def linkTask = binary.tasks.link
    def stripTask = task("strip${binary.name.capitalize()}") {
        dependsOn linkTask
        doFirst {
            if (binary.toolChain in Gcc) {
                ["strip", linkTask.outputFile].execute()
            }
        }
    }
    binary.builtBy stripTask
}
// START SNIPPET use-plugin
apply plugin: "cpp"
// END SNIPPET use-plugin

// START SNIPPET args
libraries {
    main {
        binaries.withType(SharedLibraryBinary) {
            // Define a preprocessor macro that only applies to shared libraries
            cppCompiler.define "DLL_EXPORT"
        }
    }
}
// END SNIPPET args// START SNIPPET apply-plugin
apply plugin: 'cpp'
// END SNIPPET apply-plugin

// START SNIPPET libraries
libraries {
    hello {}
}
// END SNIPPET libraries

// START SNIPPET executables
executables {
    main {}
}
// END SNIPPET executables

// START SNIPPET source-library
sources {
    main {
        cpp {
            lib libraries.hello
        }
    }
}
// END SNIPPET source-library

// START SNIPPET all-binaries
binaries.all {
    // Define a preprocessor macro for every binary
    cppCompiler.define "NDEBUG"

    // Define toolchain-specific compiler and linker options
    if (toolChain in Gcc) {
        cppCompiler.args "-O2", "-fno-access-control"
        linker.args "-Xlinker", "-S"
    }
    if (toolChain in VisualCpp) {
        cppCompiler.args "/Zi"
        linker.args "/DEBUG"
    }
}
// END SNIPPET all-binaries

// For any shared library binaries built with Visual C++, define the DLL_EXPORT macro
binaries.withType(SharedLibraryBinary) {
    if (toolChain in VisualCpp) {
        cppCompiler.define "DLL_EXPORT"
    }
}


// START SNIPPET complete-example
apply plugin: "c"
apply plugin: "cunit"

model {
    flavors {
        passing
        failing
    }
    repositories {
        libs(PrebuiltLibraries) {
            cunit {
                headers.srcDir "lib/cunit/2.1-2/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("lib/cunit/2.1-2/lib/" + findCUnitLibForPlatform(targetPlatform))
                }
            }
        }
    }
}

libraries {
    operators {}
}
// START SNIPPET configure-test-binary
binaries.withType(TestSuiteExecutableBinary) {
    lib library: "cunit", linkage: "static"

    if (flavor == flavors.failing) {
        cCompiler.define "PLUS_BROKEN"
    }
}
// END SNIPPET configure-test-binary
// END SNIPPET complete-example

def findCUnitLibForPlatform(Platform platform) {
    if (platform.operatingSystem.windows) {
        return "vs2010/cunit.lib"
//        return "vs2013/cunit.lib"
//        return "cygwin/cunit.lib"
//        return "mingw/cunit.lib"
    } else if (platform.operatingSystem.macOsX) {
        return "osx/libcunit.a"
    } else {
        return "linux/libcunit.a"
    }
}
/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'cpp'
apply plugin: 'c'

libraries {
    hello {}
}

// START SNIPPET binary-library
executables {
    main {
        binaries.all {
            // Each executable binary produced uses the 'hello' static library binary
            lib libraries.hello.static
        }
    }
}
// END SNIPPET binary-library

// START SNIPPET cpp-sources
sources {
    main {
        cpp {
            source {
                srcDir "src/source"
                include "**/*.cpp"
            }
        }
    }
}
// END SNIPPET cpp-sources
// START SNIPPET c-sources
sources {
    hello {
        c {
            source {
                srcDir "src/source"
                include "**/*.c"
            }
            exportedHeaders {
                srcDir "src/include"
            }
        }
    }
}
// END SNIPPET c-sources

apply plugin: 'cpp'

sources {
    exe {}
    lib {}
}
// START SNIPPET flavors
model {
    flavors {
        english
        french
    }
}

libraries {
    hello {
        binaries.all {
            if (flavor == flavors.french) {
                cppCompiler.define "FRENCH"
            }
        }
        source sources.lib
    }
}
// END SNIPPET flavors
binaries.withType(SharedLibraryBinary) {
    cppCompiler.define "DLL_EXPORT"
}

executables {
    main {
        source sources.exe
        binaries.all {
            lib libraries.hello
        }
    }
}apply plugin: 'c'

task idl(type: DummyIdlCompiler) {
    idlFiles = project.fileTree("src/main/idl")
    headerDir = project.file("${buildDir}/src/generated/headers")
    sourceDir = project.file("${buildDir}/src/generated/c")
}

sources {
    main {
        idlOutput(CSourceSet) {
            generatedBy tasks.idl
        }
    }
}
sources.main.c.lib sources.main.idlOutput

executables {
    main {}
}

class DummyIdlCompiler extends DefaultTask {
    @InputFiles FileCollection idlFiles
    @OutputDirectory File headerDir
    @OutputDirectory File sourceDir

    @TaskAction
    void processIdlFiles() {
        idlFiles.files.each { File idlFile ->
            def baseName = idlFile.name - '.idl'
            File headerFile = new File(headerDir, "${baseName}.h")
            File sourceFile = new File(sourceDir, "${baseName}.c")
            processIdlFile(idlFile, headerFile, sourceFile)
        }
    }
    
    def processIdlFile(File idlFile, File headerFile, File sourceFile) {
        def pattern = ~/(?s).*HEADER <<<(.*)>>>.*SOURCE <<<(.*)>>>.*/
        def matcher = pattern.matcher(idlFile.text)
        assert matcher.matches()
        headerFile.text = matcher.group(1)
        sourceFile.text = matcher.group(2)
    }
}// START SNIPPET project-dependencies
project(":lib") {
    apply plugin: "cpp"
    libraries {
        main {}
    }
}

project(":exe") {
    apply plugin: "cpp"

    executables {
        main {}
    }

    sources {
        main {
            cpp {
                lib project: ':lib', library: 'main'
            }
        }
    }
}
// END SNIPPET project-dependencies
// START SNIPPET apply-plugin
apply plugin: 'objective-c'
// END SNIPPET apply-plugin

// START SNIPPET executables
executables {
    main {}
}
// END SNIPPET executables


// START SNIPPET all-binaries
binaries.all {
    objcCompiler.args "-I/usr/include/GNUstep", "-fconstant-string-class=NSConstantString", "-D_NATIVE_OBJC_EXCEPTIONS"

    //on osx we need different settings than on linux or windows
    if(targetPlatform.operatingSystem.isMacOsX()){
        linker.args "-framework", "Foundation"
    }else{
        linker.args "-lgnustep-base", "-lobjc"
    }
}
// END SNIPPET all-binaries// START SNIPPET apply-plugin
apply plugin: 'objective-cpp'
// END SNIPPET apply-plugin

// START SNIPPET executables
executables {
    main {}
}
// END SNIPPET executables


// START SNIPPET all-binaries
binaries.all {
    objcppCompiler.args "-I/usr/include/GNUstep", "-I/usr/local/include/objc", "-fconstant-string-class=NSConstantString", "-D_NATIVE_OBJC_EXCEPTIONS"

    //on osx we need different linker settings than on linux or windows
    if(targetPlatform.operatingSystem.isMacOsX()){
        linker.args "-framework", "Foundation"
    }else{
        linker.args "-lgnustep-base", "-lobjc"
    }
}
// END SNIPPET all-binaries
apply plugin: 'cpp'
model {
    buildTypes {
        debug
        release
    }
}
libraries {
    util {
        binaries.all {
            if (buildType == buildTypes.debug) {
                cppCompiler.define 'DEBUG'
                if (toolChain in VisualCpp) {
                    cppCompiler.args '/Zi'
                    linker.args '/DEBUG'
                } else {
                    cppCompiler.args "-g"
                }
            }
        }
    }
}
task buildLibraries {
    dependsOn binaries.withType(LibraryBinary)
}
apply plugin: 'cpp'
model {
    buildTypes {
        debug
        release
    }
    repositories {
        libs(PrebuiltLibraries) {
            boost {
                headers.srcDir "3rd-party-lib/boost_1_55_0/boost"
            }
            util {
                headers.srcDir "3rd-party-lib/util/src/util/headers"
                binaries.withType(StaticLibraryBinary) {
                    def libName = targetPlatform.operatingSystem.windows ? 'util.lib' : 'libutil.a'
                    staticLibraryFile = file("3rd-party-lib/util/build/binaries/utilStaticLibrary/${buildType.name}/${libName}")
                }
                binaries.withType(SharedLibraryBinary) {
                    def os = targetPlatform.operatingSystem
                    def baseDir = "3rd-party-lib/util/build/binaries/utilSharedLibrary/${buildType.name}"
                    if (os.windows) {
                        // Windows uses a .dll file, with a different link file if it exists (not Cygwin or MinGW)
                        sharedLibraryFile = file("${baseDir}/util.dll")
                        if (file("${baseDir}/util.lib").exists()) {
                            sharedLibraryLinkFile = file("${baseDir}/util.lib")
                        }
                    } else if (os.macOsX) {
                        sharedLibraryFile = file("${baseDir}/libhello.dylib")
                    } else {
                        sharedLibraryFile = file("${baseDir}/libutil.so")
                    }
                }
            }
        }
    }
}
executables {
    main {}
}
sources.main.cpp.lib library: 'boost', linkage: 'api'
sources.main.cpp.lib library: 'util', linkage: 'static'
task buildExecutables {
    dependsOn binaries.withType(ExecutableBinary)
}

apply plugin: 'cpp'

// START SNIPPET toolChains
model {
    toolChains {
        visualCpp(VisualCpp) {
            // Specify the installDir if Visual Studio cannot be located by default
            // installDir "C:/Apps/Microsoft Visual Studio 10.0"
        }
        gcc(Gcc) {
            // Uncomment to use a GCC install that is not in the PATH
            // path "/usr/bin/gcc"
        }
        clang(Clang)
    }
}
// END SNIPPET toolChains

executables {
    main {}
}

// START SNIPPET buildable
task buildAllExecutables {
    dependsOn binaries.withType(ExecutableBinary).matching {
        it.buildable
    }
}
// END SNIPPET buildable
apply plugin: 'cpp'

// START SNIPPET platforms
model {
    platforms {
        x86 {
            architecture "x86"
        }
        x64 {
            architecture "x86_64"
        }
        itanium {
            architecture "ia-64"
        }
    }
}
// END SNIPPET platforms

// START SNIPPET build-types
model {
    buildTypes {
        debug
        release
    }
}
// END SNIPPET build-types

// START SNIPPET target-platforms
executables {
    main {
        targetPlatforms "x86", "x64"
    }
}
// END SNIPPET target-platforms
libraries {
    hello {}
}
sources.main.cpp.lib libraries.hello.static

// Apply arguments for debug binaries (these options are not yet set automatically)
// START SNIPPET build-type-config
binaries.all {
    if (toolChain in Gcc && buildType == buildTypes.debug) {
        cppCompiler.args "-g"
    }
    if (toolChain in VisualCpp && buildType == buildTypes.debug) {
        cppCompiler.args '/Zi'
        cppCompiler.define 'DEBUG'
        linker.args '/DEBUG'
    }
}
// END SNIPPET build-type-config

// Apply custom arguments for different target platforms
binaries.all {
    if (toolChain in Gcc && targetPlatform == platforms.x86) {
        cppCompiler.args '-O3'
    }
}

// Tasks to build all binaries for a tool chain
task gccExecutables {
    dependsOn binaries.withType(ExecutableBinary).matching {
        it.toolChain in Gcc
    }
}
task visualCppExecutables {
    dependsOn binaries.withType(ExecutableBinary).matching {
        it.toolChain in VisualCpp
    }
}
task buildExecutables {
    dependsOn binaries.withType(ExecutableBinary).matching {
        it.buildable
    }
}apply plugin: 'cpp'
// START SNIPPET apply-plugin
apply plugin: 'visual-studio'
// END SNIPPET apply-plugin

// START SNIPPET configure-locations
model {
    visualStudio {
        projects.all {
            projectFile.location = "vs/${name}.vcxproj"
            filtersFile.location = "vs/${name}.vcxproj.filters"
        }
        solutions.all {
            solutionFile.location = "vs/${name}.sln"
        }
    }
}
// END SNIPPET configure-locations

// START SNIPPET customize-project-files
model {
    visualStudio {
        projects.all { project ->
            projectFile.withXml {
                asNode().appendNode('PropertyGroup', [Label: 'Custom'])
                        .appendNode('ProjectDetails', "Project is named ${project.name}")
            }
        }
    }
}
// END SNIPPET customize-project-files
// START SNIPPET customize-solution-files
model {
    visualStudio {
        solutions.all { solution ->
            solutionFile.withContent { content ->
                def sourceControlSection = """
    GlobalSection(SolutionNotes) = postSolution
        NumNotes = 2
        Name1 = FirstNote
        Issue1 = N
        Text1 = This is a shared note.
        Name2 = SecondNote
        Issue2 = N
        Text2 = The projects in this solution are ${solution.projects*.name}.
    EndGlobalSection
"""
                def insertPos = content.text.lastIndexOf("EndGlobal")
                content.asBuilder().insert(insertPos, sourceControlSection)
            }
        }
    }
}
// END SNIPPET customize-solution-files

executables {
    main {}
}
libraries {
    hello {}
}
sources.main.cpp.lib libraries.hello

// For any shared library binaries built with Visual C++, define the DLL_EXPORT macro
binaries.withType(SharedLibraryBinary) {
    if (toolChain in VisualCpp) {
        cppCompiler.define "DLL_EXPORT"
    }
}


apply plugin: 'cpp'
// START SNIPPET apply-plugin
apply plugin: 'windows-resources'
// END SNIPPET apply-plugin

libraries {
    hello {}
}

executables {
    main {}
}

sources {
    main {
        cpp {
            lib libraries.hello
        }
    }
}

binaries.all {
    linker.args "user32.lib"
}

// For any shared library binaries built with Visual C++, define the DLL_EXPORT macro
binaries.withType(SharedLibraryBinary) {
    if (toolChain in VisualCpp) {
        cppCompiler.define "DLL_EXPORT"
    }
}


group = 'gradle_tooling'
version = '1.0'

apply plugin: 'groovy'
// START SNIPPET use-plugin
apply plugin: 'osgi'
// END SNIPPET use-plugin

repositories {
    mavenCentral()
    maven {
        url 'http://repository.jboss.org/maven2/'
    }
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.2.0'
    compile 'org.eclipse:osgi:3.5.0.v20090520'
}

jar {
    manifest {
        version = '1.0.0'
        name = 'Example Gradle Activator'
        instruction 'Bundle-Activator', 'org.gradle.GradleActivator'
        instruction 'Import-Package', '*'
        instruction 'Export-Package', '*'
        attributes( 'Built-By': gradle.gradleVersion )
    }
}
apply plugin: 'scala'

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.scala-lang:scala-library:2.9.2'
    testCompile 'junit:junit:4.11'
}

// START SNIPPET custom-source-locations
sourceSets {
    main {
        scala {
            srcDirs = ['src/scala']
        }
    }
    test {
        scala {
            srcDirs = ['test/scala']
        }
    }
}
// END SNIPPET custom-source-locations
apply plugin: 'scala'

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.scala-lang:scala-library:2.9.2'
}

dependencies {
    compile 'commons-collections:commons-collections:3.2'
    testCompile 'junit:junit:4.11'
}

// START SNIPPET use-fsc
compileScala {
    scalaCompileOptions.useCompileDaemon = true

    // optionally specify host and port of the daemon:
    scalaCompileOptions.daemonServer = "localhost:4243"
}
// END SNIPPET use-fsc

compileScala {
    // don't use daemon because it would cause problems for automated testing
    scalaCompileOptions.useCompileDaemon = false
}
apply plugin: 'scala'

version = 1.0

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.scala-lang:scala-library:2.9.1'
    testCompile 'junit:junit:4.11'
}
apply plugin: 'eclipse'
// START SNIPPET use-plugin
apply plugin: 'scala'
// END SNIPPET use-plugin

// START SNIPPET scala-dependency
repositories {
    mavenCentral()
}

dependencies {
    compile 'org.scala-lang:scala-library:2.9.1'
}
// END SNIPPET scala-dependency

dependencies {
    compile 'commons-collections:commons-collections:3.2'
    testCompile 'junit:junit:4.11'
}
apply plugin: 'scala'

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.scala-lang:scala-library:2.9.2'
}

dependencies {
    compile 'commons-collections:commons-collections:3.2'
    testCompile 'junit:junit:4.11'
}

// START SNIPPET use-zinc
tasks.withType(ScalaCompile) {
    scalaCompileOptions.useAnt = false
}
// END SNIPPET use-zinc

// START SNIPPET adjust-memory
tasks.withType(ScalaCompile) {
    configure(scalaCompileOptions.forkOptions) {
        memoryMaximumSize = '1g'
        jvmArgs = ['-XX:MaxPermSize=512m']
    }
}
// END SNIPPET adjust-memory
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

group = 'gradle'

// START SNIPPET conditional-signing
version = '1.0-SNAPSHOT'
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}
// END SNIPPET conditional-signing

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: uri("${buildDir}/repo"))
            if (isReleaseVersion) {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            }
        }
    }
}
apply plugin: 'java'
apply plugin: 'maven'

// START SNIPPET use-plugin
apply plugin: 'signing'
// END SNIPPET use-plugin

group = 'gradle'
version = '1.0'

// Typically set in ~/.gradle/gradle.properties
project['signing.keyId'] = "24875D73"
project['signing.password'] = "gradle"
project['signing.secretKeyRingFile'] = file("secKeyRingFile.gpg").absolutePath

// START SNIPPET sign-archives
signing {
    sign configurations.archives
}
// END SNIPPET sign-archives

// START SNIPPET sign-pom
uploadArchives {
    repositories {
        mavenDeployer {
// END SNIPPET sign-pom
            repository(url: uri("${buildDir}/repo"))
// START SNIPPET sign-pom
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
        }
    }
}
// END SNIPPET sign-pomapply plugin: "signing"

// Typically set in ~/.gradle/gradle.properties
project.ext['signing.keyId'] = "24875D73"
project.ext['signing.password'] = "gradle"
project.ext['signing.secretKeyRingFile'] = file("secKeyRingFile.gpg").absolutePath

// START SNIPPET sign-task
task stuffZip (type: Zip) {
    baseName = "stuff"
    from "src/stuff"
}

signing {
    sign stuffZip
}
// END SNIPPET sign-taskapply plugin: "java"
apply plugin: "sonar"

sourceSets {
    custom
    integTest
}

// START SNIPPET source-sets
sonar.project {
    sourceDirs += sourceSets.custom.allSource.srcDirs
    testDirs += sourceSets.integTest.allSource.srcDirs
}
// END SNIPPET source-sets

// START SNIPPET languages
sonar.project {
    language = "grvy" // set language to Groovy
}
// END SNIPPET languages

// START SNIPPET global-properties
sonar.withGlobalProperties { props ->
    props["some.global.property"] = "some value"
    // non-String values are automatically converted to Strings
    props["other.global.property"] = ["foo", "bar", "baz"]
}
// END SNIPPET global-properties

// START SNIPPET project-properties
sonar.project.withProjectProperties { props ->
    props["some.project.property"] = "some value"
    // non-String values are automatically converted to Strings
    props["other.project.property"] = ["foo", "bar", "baz"]
}
// END SNIPPET project-properties

// START SNIPPET custom-command-line-properties
sonar.project {
    language = System.getProperty("sonar.language", "java")
}
// END SNIPPET custom-command-line-properties// START SNIPPET global-configuration
apply plugin: "sonar"

sonar {
    server {
        url = "http://my.server.com"
    }
    database {
        url = "jdbc:mysql://my.server.com/sonar"
        driverClassName = "com.mysql.jdbc.Driver"
        username = "Fred Flintstone"
        password = "very clever"
    }
}
// END SNIPPET global-configuration

// START SNIPPET common-project-configuration
subprojects {
    sonar {
        project {
            sourceEncoding = "UTF-8"
        }
    }
}
// END SNIPPET common-project-configuration

// START SNIPPET individual-project-configuration
project(":project1") {
    sonar {
        project {
            skip = true
        }
    }
}
// END SNIPPET individual-project-configuration

// START SNIPPET language-configuration
project(":project2") {
    sonar {
        project {
            language = "groovy"
        }
    }
}
// END SNIPPET language-configuration

// START SNIPPET property-syntax
project(":project2").sonar.project.language = "groovy"
// END SNIPPET property-syntaxapply plugin: "java"

// START SNIPPET apply-plugin
apply plugin: "sonar"
// END SNIPPET apply-plugin

// START SNIPPET connection-settings
sonar {
    server {
        url = "http://my.server.com"
    }
    database {
        url = "jdbc:mysql://my.server.com/sonar"
        driverClassName = "com.mysql.jdbc.Driver"
        username = "Fred Flintstone"
        password = "very clever"
    }
}
// END SNIPPET connection-settings

// START SNIPPET project-settings
sonar {
    project {
        coberturaReportPath = file("$buildDir/cobertura.xml")
    }
}
// END SNIPPET project-settings

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
    testCompile group: 'junit', name: 'junit', version: '4.+'
}
apply plugin: "java"
apply plugin: "sonar-runner"

sourceSets {
    custom
    integTest
}

// START SNIPPET source-sets
sonarRunner {
    sonarProperties {
        properties["sonar.sources"] += sourceSets.custom.allSource.srcDirs
        properties["sonar.tests"] += sourceSets.integTest.allSource.srcDirs
    }
}
// END SNIPPET source-sets

// START SNIPPET languages
sonarRunner {
    sonarProperties {
        property "sonar.language", "grvy" // set language to Groovy
    }
}
// END SNIPPET languages
apply plugin: "sonar-runner"

// START SNIPPET global-configuration-settings
sonarRunner {
    sonarProperties {
        property "sonar.host.url", "http://my.server.com"
        property "sonar.jdbc.url", "jdbc:mysql://my.server.com/sonar"
        property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
        property "sonar.jdbc.username", "Fred Flintstone"
        property "sonar.jdbc.password", "very clever"
    }
}
// END SNIPPET global-configuration-settings


// START SNIPPET shared-configuration-settings
subprojects {
    sonarRunner {
        sonarProperties {
            property "sonar.sourceEncoding", "UTF-8"
        }
    }
}
// END SNIPPET shared-configuration-settings

// START SNIPPET individual-configuration-settings
project(":project1") {
    sonarRunner {
        sonarProperties {
            property "sonar.language", "grvy"
        }
    }
}
// END SNIPPET individual-configuration-settings

// START SNIPPET skip-project
project(":project2") {
    sonarRunner {
        skipProject = true
    }
}
// END SNIPPET skip-project

apply plugin: "java"

// START SNIPPET apply-plugin
apply plugin: "sonar-runner"
// END SNIPPET apply-plugin

// START SNIPPET connection-settings
sonarRunner {
    sonarProperties {
        property "sonar.host.url", "http://my.server.com"
        property "sonar.jdbc.url", "jdbc:mysql://my.server.com/sonar"
        property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
        property "sonar.jdbc.username", "Fred Flintstone"
        property "sonar.jdbc.password", "very clever"
    }
}
// END SNIPPET connection-settings

repositories {
    mavenCentral()
}

dependencies {
    compile "commons-collections:commons-collections:3.2"
    testCompile "junit:junit:4.+"
}
/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'

repositories {
    mavenCentral()
}

dependencies {
    testCompile 'junit:junit:4.11'
}

// START SNIPPET test-filtering
test {
    filter {
        //include specific method in any of the tests
        includeTestsMatching "*UiCheck"

        //include all tests from package
        includeTestsMatching "org.gradle.internal.*"

        //include all integration tests
        includeTestsMatching "*IntegTest"
    }
}
// END SNIPPET test-filtering
/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// START SNIPPET application-configuration
apply plugin: "application"
apply plugin: "jacoco"

mainClassName = "org.gradle.MyMain"

jacoco {
    applyTo run
}

task applicationCodeCoverageReport(type:JacocoReport){
    executionData run
    sourceSets sourceSets.main
}
// END SNIPPET application-configuration

repositories {
    mavenCentral()
}

/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: "java"

// START SNIPPET apply-plugin
apply plugin: "jacoco"
// END SNIPPET apply-plugin

// START SNIPPET jacoco-configuration
jacoco {
    toolVersion = "0.6.2.201302030002"
    reportsDir = file("$buildDir/customJacocoReportDir")
}
// END SNIPPET jacoco-configuration

repositories {
    mavenCentral()
}

dependencies {
    testCompile "junit:junit:4.+"
}

// START SNIPPET testtask-configuration
test {
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }
}
// END SNIPPET testtask-configuration


// START SNIPPET report-configuration
jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}
// END SNIPPET report-configuration
apply plugin: 'java'

repositories {
    mavenCentral()
}

dependencies {
    testCompile 'junit:junit:4.11'
}

// START SNIPPET test-categories
test {
    useJUnit {
        includeCategories 'org.gradle.junit.CategoryA'
        excludeCategories 'org.gradle.junit.CategoryB'
    }
}
// END SNIPPET test-categories
// START SNIPPET test-report
subprojects {
    apply plugin: 'java'

// END SNIPPET test-report
    repositories {
        mavenCentral()
    }

    dependencies {
        testCompile 'junit:junit:4.11'
    }

// START SNIPPET test-report
    // Disable the test report for the individual test task
    test {
        reports.html.enabled = false
    }
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test
}
// END SNIPPET test-report
apply plugin: 'java'

repositories {
    mavenCentral()
}

dependencies {
    testCompile 'org.testng:testng:6.3.1'
}

// START SNIPPET test-config
test {
    useTestNG {
        excludeGroups 'integrationTests'
        includeGroups 'unitTests'
    }
}
// END SNIPPET test-config
apply plugin: 'java'

sourceCompatibility=1.4

repositories {
    mavenCentral()
}

dependencies {
    testCompile 'org.testng:testng:5.11:jdk14'
}

test {
    useTestNG()
    scanForTestClasses = false
}
apply plugin: 'java'

sourceCompatibility=1.5

repositories {
    mavenCentral()
}

dependencies {
    testCompile 'org.testng:testng:6.3.1'
}

test {
   useTestNG(){
       useDefaultListeners = true
   }
}
apply plugin: 'java'

repositories {
    mavenCentral()
}

dependencies {
    testCompile 'org.testng:testng:6.3.1'
}

test {
	useTestNG() {
        suiteXmlBuilder().suite(name: 'testing-testng') {
            test (name : 'testing-testng', annotations : 'JDK', verbose:'1') {
                classes([:]) {
                    'class' (name: 'org.gradle.testng.UserImplTest') {
                        methods([:]) {
                            include(name: 'testOkFirstName')
                        }
                    }
                }
            }
        }
    }
}
apply plugin: 'java'
apply plugin: 'ivy-publish'

group 'org.gradle.sample'
version '1.0'

dependencies {
    compile gradleApi()
}

publishing {
    repositories {
        ivy { url 'build/repo' }
    }
    publications {
        ivy(IvyPublication) {
            from components.java
        }
    }
}
buildscript {
    repositories {
        ivy { url '../plugin/build/repo' }
    }
    dependencies {
        classpath 'org.gradle.sample:plugin:1.0'
    }
}

apply plugin: 'custom-plugin'
apply plugin: 'application'

def toolingApiVersion = gradle.gradleVersion

repositories {
    ivy {
        url '../plugin/build/repo'
    }
    maven {
        url 'http://repo.gradle.org/gradle/libs-releases-local'
    }
    mavenCentral()
}

dependencies {
    compile 'org.gradle.sample:plugin:1.0'
    compile "org.gradle:gradle-tooling-api:${toolingApiVersion}"
    // Need an SLF4J implementation at runtime
    runtime 'org.slf4j:slf4j-simple:1.7.5'
}

mainClassName = 'org.gradle.sample.Main'
apply plugin: 'java'
apply plugin: 'application'

def toolingApiVersion = gradle.gradleVersion

repositories {
    maven {
        url 'http://repo.gradle.org/gradle/libs-releases-local'
    }
    mavenCentral()
}

dependencies {
    compile "org.gradle:gradle-tooling-api:${toolingApiVersion}"
    // Need an SLF4J implementation at runtime
    runtime 'org.slf4j:slf4j-simple:1.7.5'
}

mainClassName = 'org.gradle.sample.Main'apply plugin: 'java'
apply plugin: 'application'

def toolingApiVersion = gradle.gradleVersion

repositories {
    maven {
        url 'http://repo.gradle.org/gradle/libs-releases-local'
    }
    mavenCentral()
}

dependencies {
    compile "org.gradle:gradle-tooling-api:${toolingApiVersion}"
    // Need an SLF4J implementation at runtime
    runtime 'org.slf4j:slf4j-simple:1.7.5'
}

mainClassName = 'org.gradle.sample.Main'
apply plugin: 'java'
apply plugin: 'application'

def toolingApiVersion = gradle.gradleVersion

repositories {
    maven {
        url 'http://repo.gradle.org/gradle/libs-releases-local'
    }
    mavenCentral()
}

dependencies {
    compile "org.gradle:gradle-tooling-api:${toolingApiVersion}"
    // Need an SLF4J implementation at runtime
    runtime 'org.slf4j:slf4j-simple:1.7.5'
}

mainClassName = 'org.gradle.sample.Main'
apply plugin: 'java'
apply plugin: 'application'

def toolingApiVersion = gradle.gradleVersion

repositories {
    maven {
        url 'http://repo.gradle.org/gradle/libs-releases-local'
    }
    mavenCentral()
}

dependencies {
    compile "org.gradle:gradle-tooling-api:${toolingApiVersion}"
    // Need an SLF4J implementation at runtime
    runtime 'org.slf4j:slf4j-simple:1.7.5'
}

mainClassName = 'org.gradle.sample.Main'
ant.importBuild 'build.xml'

hello << {
    println 'Hello, from Gradle'
}
ant.importBuild 'build.xml'

task intro(dependsOn: hello) << {
    println 'Hello, from Gradle'
}
ant.importBuild 'build.xml'

task intro << {
    println 'Hello, from Gradle'
}
ant.importBuild 'build.xml'
//START SNIPPET set-property
ant.buildDir = buildDir
ant.properties.buildDir = buildDir
ant.properties['buildDir'] = buildDir
ant.property(name: 'buildDir', location: buildDir)
//END SNIPPET set-property

ant.importBuild 'build.xml'

//START SNIPPET get-property
println ant.antProp
println ant.properties.antProp
println ant.properties['antProp']
//END SNIPPET get-property

//START SNIPPET set-reference
ant.path(id: 'classpath', location: 'libs')
ant.references.classpath = ant.path(location: 'libs')
ant.references['classpath'] = ant.path(location: 'libs')
//END SNIPPET set-reference

//START SNIPPET get-reference
println ant.references.antPath
println ant.references['antPath']
//END SNIPPET get-reference
task zip << {
    ant.zip(destfile: 'archive.zip') {
        fileset(dir: 'src') {
            include(name: '**.xml')
            exclude(name: '**.java')
        }
    }
}task hello << {
    ant.echo('hello from Ant')
}
task hello << {
    String greeting = 'hello from Ant'
    ant.echo(message: greeting)
}
task list << {
    def path = ant.path {
        fileset(dir: 'libs', includes: '*.jar')
    }
    path.list().each {
        println it
    }
}task check << {
    ant.taskdef(resource: 'checkstyletask.properties') {
        classpath {
            fileset(dir: 'libs', includes: '*.jar')
        }
    }
    ant.checkstyle(config: 'checkstyle.xml') {
        fileset(dir: 'src')
    }
}
repositories {
    mavenCentral()
}

// START SNIPPET define-classpath
configurations {
    pmd
}

dependencies {
    pmd group: 'pmd', name: 'pmd', version: '4.2.5'
}
// END SNIPPET define-classpath

// START SNIPPET use-classpath
task check << {
    ant.taskdef(name: 'pmd', classname: 'net.sourceforge.pmd.ant.PMDTask', classpath: configurations.pmd.asPath)
    ant.pmd(shortFilenames: 'true', failonruleviolation: 'true', rulesetfiles: file('pmd-rules.xml').toURI().toString()) {
        formatter(type: 'text', toConsole: 'true')
        fileset(dir: 'src')
    }
}
// END SNIPPET use-classpath
repositories {
    ivy {
        url "$projectDir/repo"
    }
}

configurations {
    config1
    config2
    config3
}

// START SNIPPET latest-selector
dependencies {
    config1 "sea.fish:tuna:latest.integration"
    config2 "sea.fish:tuna:latest.release"
}

task listFish << {
    configurations.config1.each { println it.name }
    println()
    configurations.config2.each { println it.name}
}
// END SNIPPET latest-selector

// START SNIPPET custom-status-scheme
dependencies {
    config3 "air.birds:albatros:latest.silver"
    components {
        eachComponent { ComponentMetadataDetails details ->
            if (details.id.group == "air.birds") {
                details.statusScheme = ["bronze", "silver", "gold", "platinum"]
            }
        }
    }
}

task listBirds << {
    configurations.config3.each { println it.name }
}
// END SNIPPET custom-status-scheme
repositories {
    ivy {
        artifactPattern "$projectDir/repo/[organization]/[module]-[revision].[ext]"
        ivyPattern "$projectDir/repo/[organization]/ivy-[module]-[revision].xml"
    }
}

//START SNIPPET setup
configurations {
    sealife
    alllife
}

dependencies {
    sealife "sea.mammals:orca:1.0", "sea.fish:shark:1.0", "sea.fish:tuna:1.0"
    alllife configurations.sealife
    alllife "air.birds:albatros:1.0"
}
//END SNIPPET setup

//START SNIPPET dependencies
task dependencies << {
    configurations.alllife.dependencies.each { dep -> println dep.name }
    println()
    configurations.alllife.allDependencies.each { dep -> println dep.name }
    println()
    configurations.alllife.allDependencies.findAll { dep -> dep.name != 'orca' }.each { dep -> println dep.name }
}
//END SNIPPET dependencies

//START SNIPPET allFiles
task allFiles << {
    configurations.sealife.files.each { file ->
        println file.name
    }
}
//END SNIPPET allFiles

//START SNIPPET files
task files << {
    configurations.sealife.files { dep -> dep.name == 'orca' }.each { file ->
        println file.name
    }
}
//END SNIPPET files


//START SNIPPET copy
task copy << {
    configurations.alllife.copyRecursive { dep -> dep.name != 'orca' }.allDependencies.each { dep ->
        println dep.name
    }
    println()
    configurations.alllife.copy().allDependencies.each { dep ->
        println dep.name
    }
}
//END SNIPPET copy

//START SNIPPET copyVsFiles
task copyVsFiles << {
    configurations.sealife.copyRecursive { dep -> dep.name == 'orca' }.each { file ->
        println file.name
    }
    println()
    configurations.sealife.files { dep -> dep.name == 'orca' }.each { file ->
        println file.name
    }
}
//END SNIPPET copyVsFiles
// START SNIPPET define-configuration
configurations {
    compile
}
// END SNIPPET define-configuration

// START SNIPPET lookup-configuration
println configurations.compile.name
println configurations['compile'].name
// END SNIPPET lookup-configuration

// START SNIPPET configure-configuration
configurations {
    compile {
        description = 'compile classpath'
        transitive = true
    }
    runtime {
        extendsFrom compile
    }
}
configurations.compile {
    description = 'compile classpath'
}
// END SNIPPET configure-configuration
import org.gradle.api.artifacts.repositories.IvyArtifactRepository

//START SNIPPET maven-central
repositories {
    mavenCentral()
}
//END SNIPPET maven-central

//START SNIPPET maven-jcenter
repositories {
    jcenter()
}
//END SNIPPET maven-jcenter

//START SNIPPET maven-central-jar-repo
repositories {
    mavenCentral name: 'single-jar-repo', artifactUrls: ["http://repo.mycompany.com/jars"]
    mavenCentral name: 'multi-jar-repos', artifactUrls: ["http://repo.mycompany.com/jars1", "http://repo.mycompany.com/jars2"]
}
//END SNIPPET maven-central-jar-repo

//START SNIPPET maven-local
repositories {
    mavenLocal()
}
//END SNIPPET maven-local

//START SNIPPET maven-like-repo
repositories {
    maven {
        url "http://repo.mycompany.com/maven2"
    }
}
//END SNIPPET maven-like-repo

//START SNIPPET maven-like-repo-with-jar-repo
repositories {
    maven {
        // Look for POMs and artifacts, such as JARs, here
        url "http://repo2.mycompany.com/maven2"
        // Look for artifacts here if not found at the above location
        artifactUrls "http://repo.mycompany.com/jars"
        artifactUrls "http://repo.mycompany.com/jars2"
    }
}
//END SNIPPET maven-like-repo-with-jar-repo

//START SNIPPET authenticated-maven-repo
repositories {
    maven {
        credentials {
            username 'user'
            password 'password'
        }
        url "http://repo.mycompany.com/maven2"
    }
}
//END SNIPPET authenticated-maven-repo

//START SNIPPET flat-dir
//START SNIPPET flat-dir-multi
repositories {
    flatDir {
        dirs 'lib'
    }
//END SNIPPET flat-dir
    flatDir {
        dirs 'lib1', 'lib2'
    }
//START SNIPPET flat-dir
}
//END SNIPPET flat-dir
//END SNIPPET flat-dir-multi

//START SNIPPET ivy-repo
repositories {
    ivy {
        url "http://repo.mycompany.com/repo"
    }
}
//END SNIPPET ivy-repo

//START SNIPPET local-ivy-repo
repositories {
    ivy {
        // URL can refer to a local directory
        url "../local-repo"
    }
}
//END SNIPPET local-ivy-repo

//START SNIPPET ivy-repo-with-maven-layout
repositories {
    ivy {
        url "http://repo.mycompany.com/repo"
        layout "maven"
    }
}
//END SNIPPET ivy-repo-with-maven-layout

//START SNIPPET ivy-repo-with-pattern-layout
repositories {
    ivy {
        url "http://repo.mycompany.com/repo"
        layout "pattern", {
            artifact "[module]/[revision]/[type]/[artifact].[ext]"
        }
    }
}
//END SNIPPET ivy-repo-with-pattern-layout

//START SNIPPET ivy-repo-with-m2compatible-layout
repositories {
    ivy {
        url "http://repo.mycompany.com/repo"
        layout "pattern", {
            artifact "[organisation]/[module]/[revision]/[artifact]-[revision].[ext]"
            m2compatible = true
        }
    }
}
//END SNIPPET ivy-repo-with-m2compatible-layout

//START SNIPPET ivy-repo-with-custom-pattern
repositories {
    ivy {
        url "http://repo.mycompany.com/repo"
        layout "pattern", {
            artifact "3rd-party-artifacts/[organisation]/[module]/[revision]/[artifact]-[revision].[ext]"
            artifact "company-artifacts/[organisation]/[module]/[revision]/[artifact]-[revision].[ext]"
            ivy "ivy-files/[organisation]/[module]/[revision]/ivy.xml"
        }
    }
}
//END SNIPPET ivy-repo-with-custom-pattern

//START SNIPPET authenticated-ivy-repo
repositories {
    ivy {
        url 'http://repo.mycompany.com'
        credentials {
            username 'user'
            password 'password'
        }
    }
}
//END SNIPPET authenticated-ivy-repo

//START SNIPPET ivy-repo-dynamic-mode
// Can enable dynamic resolve mode when you define the repository
repositories {
    ivy {
        url "http://repo.mycompany.com/repo"
        resolve.dynamicMode = true
    }
}

// Can use a rule instead to enable (or disable) dynamic resolve mode for all repositories
repositories.withType(IvyArtifactRepository) {
    resolve.dynamicMode = true
}
//END SNIPPET ivy-repo-dynamic-mode

task lookup << {
    //START SNIPPET lookup-resolver
    println repositories.localRepository.name
    println repositories['localRepository'].name
    //END SNIPPET lookup-resolver
}

//START SNIPPET configure-resolver
repositories {
    flatDir {
        name 'localRepository'
    }
}
repositories {
    localRepository {
        dirs 'lib'
    }
}
repositories.localRepository {
    dirs 'lib'
}
//END SNIPPET configure-resolver
apply plugin: 'java'

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.hibernate', name: 'hibernate-core', version: '3.6.7.Final'
    testCompile group: 'junit', name: 'junit', version: '4.+'
}
apply plugin: 'java'

// START SNIPPET file-system-resolver
repositories {
    ivy {
        ivyPattern "$projectDir/repo/[organisation]/[module]-ivy-[revision].xml"
        artifactPattern "$projectDir/repo/[organisation]/[module]-[revision](-[classifier]).[ext]"
    }
}
// END SNIPPET file-system-resolver

// START SNIPPET exclude-dependencies
configurations {
// END SNIPPET exclude-dependencies
    otherConf
// START SNIPPET exclude-dependencies
    compile.exclude module: 'commons'
    all*.exclude group: 'org.gradle.test.excludes', module: 'reports'
}

dependencies {
	compile("org.gradle.test.excludes:api:1.0") {
	    exclude module: 'shared'
	}
// END SNIPPET exclude-dependencies
    runtime 'org.gradle.test.excludes:other-api:1.0'
// START SNIPPET classifier
	compile "org.gradle.test.classifiers:service:1.0:jdk15@jar"
    otherConf group: 'org.gradle.test.classifiers', name: 'service', version: '1.0', classifier: 'jdk14'
// END SNIPPET classifier
// START SNIPPET exclude-dependencies
}
// END SNIPPET exclude-dependencies

task resolveCompile << {
	println configurations.compile.resolve()
	println configurations.otherConf.resolve()
}

task resolveRuntime << {
	println configurations.runtime.resolve()
}
repositories {
    mavenCentral()
}

configurations {
    compile
    runtime
}

//START SNIPPET define-dependency
dependencies {
    compile group: 'org.hibernate', name: 'hibernate-core', version: '3.6.7.Final'
}
//END SNIPPET define-dependency

//START SNIPPET define-dependency-shortcut
dependencies {
    compile 'org.hibernate:hibernate-core:3.6.7.Final'
}
//END SNIPPET define-dependency-shortcut

//START SNIPPET use-configuration
task listJars << {
    configurations.compile.each { File file -> println file.name }
}
//END SNIPPET use-configuration

//START SNIPPET module-dependencies
dependencies {
    runtime group: 'org.springframework', name: 'spring-core', version: '2.5'
    runtime 'org.springframework:spring-core:2.5', 'org.springframework:spring-aop:2.5'
    runtime(
        [group: 'org.springframework', name: 'spring-core', version: '2.5'],
        [group: 'org.springframework', name: 'spring-aop', version: '2.5']
    )
    runtime('org.hibernate:hibernate:3.0.5') {
        transitive = true
    }
    runtime group: 'org.hibernate', name: 'hibernate', version: '3.0.5', transitive: true
    runtime(group: 'org.hibernate', name: 'hibernate', version: '3.0.5') {
        transitive = true
    }
}
//END SNIPPET module-dependencies

//START SNIPPET dependencies-with-empty-attributes
dependencies {
    runtime ":junit:4.10", ":testng"
    runtime name: 'testng' 
}
//END SNIPPET dependencies-with-empty-attributes

//START SNIPPET dependency-configurations
dependencies {
    runtime group: 'org.somegroup', name: 'somedependency', version: '1.0', configuration: 'someConfiguration'
}
//END SNIPPET dependency-configurations


//START SNIPPET artifact-only
dependencies {
	runtime "org.groovy:groovy:2.2.0@jar"
    runtime group: 'org.groovy', name: 'groovy', version: '2.2.0', ext: 'jar'
}
//END SNIPPET artifact-only

//START SNIPPET client-modules
dependencies {
    runtime module("org.codehaus.groovy:groovy-all:2.2.0") {
        dependency("commons-cli:commons-cli:1.0") {
            transitive = false
        }
        module(group: 'org.apache.ant', name: 'ant', version: '1.9.3') {
            dependencies "org.apache.ant:ant-launcher:1.9.3@jar", "org.apache.ant:ant-junit:1.9.3"
        }
    }
}
//END SNIPPET client-modules

//START SNIPPET file-dependencies
dependencies {
    runtime files('libs/a.jar', 'libs/b.jar')
    runtime fileTree(dir: 'libs', include: '*.jar')
}
//END SNIPPET file-dependencies

//START SNIPPET list-grouping
List groovy = ["org.codehaus.groovy:groovy-all:2.2.0@jar",
               "commons-cli:commons-cli:1.0@jar",
               "org.apache.ant:ant:1.9.3@jar"]
List hibernate = ['org.hibernate:hibernate:3.0.5@jar', 'somegroup:someorg:1.0@jar']
dependencies {
	runtime groovy, hibernate
}
//END SNIPPET list-grouping
configurations {
    compile
}

// START SNIPPET generated-file-dependencies
dependencies {
    compile files("$buildDir/classes") {
        builtBy 'compile'
    }
}

task compile << {
    println 'compiling classes'
}

task list(dependsOn: configurations.compile) << {
    println "classpath = ${configurations.compile.collect {File file -> file.name}}"
}
// END SNIPPET generated-file-dependencies
apply plugin: 'java'
//START SNIPPET upload-file
apply plugin: 'maven'

//START SNIPPET builder
//START SNIPPET customize-pom
//START SNIPPET multiple-poms
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file://localhost/tmp/myRepo/")
//END SNIPPET upload-file
//END SNIPPET multiple-poms
//END SNIPPET builder
            pom.version = '1.0Maven'
            pom.artifactId = 'myMavenName'
//END SNIPPET customize-pom
//START SNIPPET builder
            pom.project {
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
            }
//END SNIPPET builder
//START SNIPPET multiple-poms
            addFilter('api') {artifact, file ->
                artifact.name == 'api'
            }
            addFilter('service') {artifact, file ->
                artifact.name == 'service'
            }
            pom('api').version = 'mySpecialMavenVersion'
//START SNIPPET customize-pom
//START SNIPPET upload-file
//START SNIPPET builder
        }
    }
}
//END SNIPPET customize-pom
//END SNIPPET multiple-poms
//END SNIPPET upload-file
//END SNIPPET builder

//START SNIPPET upload-with-ssh
configurations {
    deployerJars
}

repositories {
    mavenCentral()
}

dependencies {
    deployerJars "org.apache.maven.wagon:wagon-ssh:2.2"
}

uploadArchives {
    repositories.mavenDeployer {
        configuration = configurations.deployerJars
        repository(url: "scp://repos.mycompany.com/releases") {
            authentication(userName: "me", password: "myPassword")
        }
    }
}
//END SNIPPET upload-with-ssh

//START SNIPPET customize-installer
install {
    repositories.mavenInstaller {
        pom.version = '1.0Maven'
        pom.artifactId = 'myName'
    }
}
//END SNIPPET customize-installer

//START SNIPPET mappings
task mappings << {
    println conf2ScopeMappings.mappings
}
//END SNIPPET mappings//START SNIPPET dynamic-version-cache-control
configurations.all {
    resolutionStrategy.cacheDynamicVersionsFor 10, 'minutes'
}
//END SNIPPET dynamic-version-cache-control

//START SNIPPET changing-module-cache-control
configurations.all {
    resolutionStrategy.cacheChangingModulesFor 4, 'hours'
}
//END SNIPPET changing-module-cache-control

//START SNIPPET releasable-unit
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.gradle') {
            details.useVersion '1.4'
        }
    }
}
//END SNIPPET releasable-unit

//START SNIPPET custom-versioning-scheme
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.version == 'default') {
            def version = findDefaultVersionInCatalog(details.requested.group, details.requested.name)
            details.useVersion version
        }
    }
}

def findDefaultVersionInCatalog(String group, String name) {
    //some custom logic that resolves the default version into a specific version
    "1.0"
}
//END SNIPPET custom-versioning-scheme

//START SNIPPET blacklisting_version
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.software' && details.requested.name == 'some-library' && details.requested.version == '1.2') {
            //prefer different version which contains some necessary fixes
            details.useVersion '1.2.1'
        }
    }
}
//END SNIPPET blacklisting_version

//START SNIPPET module_substitution
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.name == 'groovy-all') {
            //prefer 'groovy' over 'groovy-all':
            details.useTarget group: details.requested.group, name: 'groovy', version: details.requested.version
        }
        if (details.requested.name == 'log4j') {
            //prefer 'log4j-over-slf4j' over 'log4j', with fixed version:
            details.useTarget "org.slf4j:log4j-over-slf4j:1.7.5"
        }
    }
}
//END SNIPPET module_substitutionapply plugin: 'java'

//START SNIPPET archive-artifact
task myJar(type: Jar)

artifacts {
    archives myJar
}
//END SNIPPET archive-artifact

//START SNIPPET file-artifact
def someFile = file('build/somefile.txt')

artifacts {
    archives someFile
}
//END SNIPPET file-artifact

//START SNIPPET customized-file-artifact
task myTask(type:  MyTaskType) {
    destFile = file('build/somefile.txt')
}

artifacts {
    archives(myTask.destFile) {
        name 'my-artifact'
        type 'text'
        builtBy myTask
    }
}
//END SNIPPET customized-file-artifact

//START SNIPPET map-file-artifact
task generate(type:  MyTaskType) {
    destFile = file('build/somefile.txt')
}

artifacts {
    archives file: generate.destFile, name: 'my-artifact', type: 'text', builtBy: generate
}
//END SNIPPET map-file-artifact

class MyTaskType extends DefaultTask {
    File destFile
}

//START SNIPPET uploading
repositories {
    flatDir {
        name "fileRepo"
        dirs "repo"
    }
}

uploadArchives {
    repositories {
        add project.repositories.fileRepo
        ivy {
            credentials {
                username "username"
                password "pw"
            }
            url "http://repo.mycompany.com"
        }
    }
}
//END SNIPPET uploading

//START SNIPPET publish-repository
uploadArchives {
    repositories {
        ivy {
            credentials {
                username "username"
                password "pw"
            }
            url "http://repo.mycompany.com"
        }
    }
}
//END SNIPPET publish-repository
println 'This is executed during the configuration phase.'

task configured {
    println 'This is also executed during the configuration phase.'
}

task test << {
    println 'This is executed during the execution phase.'
}// START SNIPPET evaluate-events
gradle.afterProject {project, projectState ->
    if (projectState.failure) {
        println "Evaluation of $project FAILED"
    } else {
        println "Evaluation of $project succeeded"
    }
}
// END SNIPPET evaluate-events

task test
// START SNIPPET after-evaluate
allprojects {
    afterEvaluate { project ->
        if (project.hasTests) {
            println "Adding test task to $project"
            project.task('test') << {
                println "Running tests for $project"
            }
        }
    }
}
// END SNIPPET after-evaluate

allprojects {
    hasTests = false
}
tasks.whenTaskAdded { task ->
    task.srcDir = 'src/main/java'
}

task a

println "source dir is $a.srcDir"
task ok

task broken(dependsOn: ok) << {
    throw new RuntimeException('broken')
}

gradle.taskGraph.beforeTask { Task task ->
    println "executing $task ..."
}

gradle.taskGraph.afterTask { Task task, TaskState state ->
    if (state.failure) {
        println "FAILED"
    }
    else {
        println "done"
    }
}// START SNIPPET use-plugin
apply plugin: 'distribution'
// END SNIPPET use-plugin

version = '1.0.0'

// START SNIPPET configure-distribution
apply plugin: 'distribution'

distributions {
    main {
        baseName = 'someName'
        contents {
            from { 'src/readme' }
        }
    }
}
// END SNIPPET configure-distribution

// START SNIPPET custom-distribution
apply plugin: 'distribution'

version = '1.2'
distributions {
    custom {}
}
// END SNIPPET custom-distribution
apply plugin: 'java'

version = 1.0

task myZip(type: Zip) {
    from 'somedir'
}

println myZip.archiveName
println relativePath(myZip.destinationDir)
println relativePath(myZip.archivePath)
// START SNIPPET zip
apply plugin: 'java'

task zip(type: Zip) {
    from 'src/dist'
    into('libs') {
        from configurations.runtime
    }
}
// END SNIPPET zip

// START SNIPPET tar
apply plugin: 'java'

task tar(type: Tar) {
    from 'src/dist'
    into('libs') {
        from configurations.runtime
    }
}
// END SNIPPET tar
// START SNIPPET copy-task
task copyTask(type: Copy) {
    from 'src/main/webapp'
    into 'build/explodedWar'
}
// END SNIPPET copy-task

// START SNIPPET copy-task-with-patterns
task copyTaskWithPatterns(type: Copy) {
    from 'src/main/webapp'
    into 'build/explodedWar'
    include '**/*.html'
    include '**/*.jsp'
    exclude { details -> details.file.name.endsWith('.html') && details.file.text.contains('staging') }
}
// END SNIPPET copy-task-with-patterns

// START SNIPPET copy-task-2
task anotherCopyTask(type: Copy) {
    // Copy everything under src/main/webapp
    from 'src/main/webapp'
    // Copy a single file
    from 'src/staging/index.html'
    // Copy the output of a task
    from copyTask
    // Copy the output of a task using Task outputs explicitly.
    from copyTaskWithPatterns.outputs
    // Copy the contents of a Zip file
    from zipTree('src/main/assets.zip')
    // Determine the destination directory later
    into { getDestDir() }
}
// END SNIPPET copy-task-2

def getDestDir() {
    file('some-dir')
}

// START SNIPPET copy-method
task copyMethod << {
    copy {
        from 'src/main/webapp'
        into 'build/explodedWar'
        include '**/*.html'
        include '**/*.jsp'
    }
}
// END SNIPPET copy-method

// START SNIPPET copy-method-with-dependency
task copyMethodWithExplicitDependencies{
    inputs.file copyTask // up-to-date check for inputs, plus add copyTask as dependency
    outputs.dir 'some-dir' // up-to-date check for outputs
    doLast{
        copy {
            // Copy the output of copyTask
            from copyTask
            into 'some-dir'
        }
    }
}
// END SNIPPET copy-method-with-dependency

configurations { runtime }

// START SNIPPET nested-specs
task nestedSpecs(type: Copy) {
    into 'build/explodedWar'
    exclude '**/*staging*'
    from('src/dist') {
        include '**/*.html'
    }
    into('libs') {
        from configurations.runtime
    }
}
// END SNIPPET nested-specs

// START SNIPPET rename-files
task rename(type: Copy) {
    from 'src/main/webapp'
    into 'build/explodedWar'
    // Use a closure to map the file name
    rename { String fileName ->
        fileName.replace('-staging-', '')
    }
    // Use a regular expression to map the file name
    rename '(.+)-staging-(.+)', '$1$2'
    rename(/(.+)-staging-(.+)/, '$1$2')
}
// END SNIPPET rename-files

// START SNIPPET filter-files
import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens

task filter(type: Copy) {
    from 'src/main/webapp'
    into 'build/explodedWar'
    // Substitute property references in files
    expand(copyright: '2009', version: '2.3.1')
    expand(project.properties)
    // Use some of the filters provided by Ant
    filter(FixCrLfFilter)
    filter(ReplaceTokens, tokens: [copyright: '2009', version: '2.3.1'])
    // Use a closure to filter each line
    filter { String line ->
        "[$line]"
    }
}
// END SNIPPET filter-files

task test {
    dependsOn tasks.withType(Copy)
    dependsOn copyMethod
    dependsOn copyMethodWithExplicitDependencies
}// Using a relative path
File configFile = file('src/config.xml')

// Using an absolute path
configFile = file(configFile.absolutePath)

// Using a File object with a relative path
configFile = file(new File('src/config.xml'))
// START SNIPPET simple-params
FileCollection collection = files('src/file1.txt', new File('src/file2.txt'), ['src/file3.txt', 'src/file4.txt'])
// END SNIPPET simple-params

file('src').mkdirs()
file('src/dir1').mkdirs()
file('src/file1.txt').mkdirs()
file('src2').mkdirs()
file('src2/dir1').mkdirs()
file('src2/dir2').mkdirs()

// START SNIPPET closure
task list << {
    File srcDir

    // Create a file collection using a closure
    collection = files { srcDir.listFiles() }

    srcDir = file('src')
    println "Contents of $srcDir.name"
    collection.collect { relativePath(it) }.sort().each { println it }

    srcDir = file('src2')
    println "Contents of $srcDir.name"
    collection.collect { relativePath(it) }.sort().each { println it }
}
// END SNIPPET closure

task usage << {
collection = files('src/file1.txt')

//START SNIPPET usage
// Iterate over the files in the collection
collection.each {File file ->
    println file.name
}

// Convert the collection to various types
Set set = collection.files
Set set2 = collection as Set
List list = collection as List
String path = collection.asPath
File file = collection.singleFile
File file2 = collection as File

// Add and subtract collections
def union = collection + files('src/file3.txt')
def different = collection - files('src/file3.txt')

//END SNIPPET usage
}// START SNIPPET define
// Create a file tree with a base directory
FileTree tree = fileTree(dir: 'src/main')

// Add include and exclude patterns to the tree
tree.include '**/*.java'
tree.exclude '**/Abstract*'

// Create a tree using path
tree = fileTree('src').include('**/*.java')

// Create a tree using closure
tree = fileTree('src') {
    include '**/*.java'
}

// Create a tree using a map
tree = fileTree(dir: 'src', include: '**/*.java')
tree = fileTree(dir: 'src', includes: ['**/*.java', '**/*.xml'])
tree = fileTree(dir: 'src', include: '**/*.java', exclude: '**/*test*/**')
// END SNIPPET define

// START SNIPPET use
// Iterate over the contents of a tree
tree.each {File file ->
    println file
}

// Filter a tree
FileTree filtered = tree.matching {
    include 'org/gradle/api/**'
}

// Add trees together
FileTree sum = tree + fileTree(dir: 'src/test')

// Visit the elements of the tree
tree.visit {element ->
    println "$element.relativePath => $element.file"
}
// END SNIPPET use

// START SNIPPET archive-trees
// Create a ZIP file tree using path
FileTree zip = zipTree('someFile.zip')

// Create a TAR file tree using path
FileTree tar = tarTree('someFile.tar')

//tar tree attempts to guess the compression based on the file extension
//however if you must specify the compression explicitly you can:
FileTree someTar = tarTree(resources.gzip('someTar.ext'))

// END SNIPPET archive-trees
task compile(type: JavaCompile)

// START SNIPPET set-input-files
// Use a File object to specify the source directory
compile {
    source = file('src/main/java')
}

// Use a String path to specify the source directory
compile {
    source = 'src/main/java'
}

// Use a collection to specify multiple source directories
compile {
    source = ['src/main/java', '../shared/java']
}

// Use a FileCollection (or FileTree in this case) to specify the source files
compile {
    source = fileTree(dir: 'src/main/java').matching { include 'org/gradle/api/**' }
}

// Using a closure to specify the source files.
compile {
    source = {
        // Use the contents of each zip file in the src dir
        file('src').listFiles().findAll {it.name.endsWith('.zip')}.collect { zipTree(it) }
    }
}
// END SNIPPET set-input-files

// START SNIPPET add-input-files
compile {
    // Add some source directories use String paths
    source 'src/main/java', 'src/main/groovy'

    // Add a source directory using a File object
    source file('../shared/java')

    // Add some source directories using a closure
    source { file('src/test/').listFiles() }
}
// END SNIPPET add-input-files
configurations { runtime }

// START SNIPPET copy-dependencies
task libs(type: Sync) {
    from configurations.runtime
    into "$buildDir/libs"
}
// END SNIPPET copy-dependenciesapply plugin: "groovy"

repositories {
    mavenCentral()
}

// START SNIPPET groovy-test-dependency
dependencies {
    testCompile "org.codehaus.groovy:groovy-all:2.2.0"
}
// END SNIPPET groovy-test-dependency

// START SNIPPET bundled-groovy-dependency
dependencies {
    compile localGroovy()
}
// END SNIPPET bundled-groovy-dependencyrepositories {
    mavenCentral()
}

task showRepos << {
    println "All repos:"
    println repositories.collect { it.name }
}task compile << {
    println "compiling source"
}
task testCompile(dependsOn: compile) << {
    println "compiling test source"
}
task test(dependsOn: [compile, testCompile]) << {
    println "running unit tests"
}
task build(dependsOn: [test])
task doNothing
/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// START SNIPPET show-repos-task
repositories{
    mavenCentral()
}

 task showRepositories << {
    repositories.each{
        println "repository: ${it.name} ('${it.url}')"
    }
}
// END SNIPPET show-repos-task
apply plugin: 'java'

if (hasProperty('showOutput')) {

// START SNIPPET access-source-set
// Various ways to access the main source set
println sourceSets.main.output.classesDir
println sourceSets['main'].output.classesDir
sourceSets {
    println main.output.classesDir
}
sourceSets {
    main {
        println output.classesDir
    }
}

// Iterate over the source sets
sourceSets.all {
    println name
}
// END SNIPPET access-source-set

}

// START SNIPPET define-source-set
sourceSets {
    intTest
}
// END SNIPPET define-source-set

repositories {
    mavenCentral()
}

// START SNIPPET source-set-dependencies
sourceSets {
    intTest
}

dependencies {
    intTestCompile 'junit:junit:4.11'
    intTestRuntime 'org.ow2.asm:asm-all:4.0'
}
// END SNIPPET source-set-dependencies

// START SNIPPET jar
task intTestJar(type: Jar) {
    from sourceSets.intTest.output
}
// END SNIPPET jar

// START SNIPPET javadoc
task intTestJavadoc(type: Javadoc) {
    source sourceSets.intTest.allJava
}
// END SNIPPET javadoc

// START SNIPPET test
task intTest(type: Test) {
    testClassesDir = sourceSets.intTest.output.classesDir
    classpath = sourceSets.intTest.runtimeClasspath
}
// END SNIPPET test
// START SNIPPET use-plugin
apply plugin: 'java-library-distribution'
// END SNIPPET use-plugin

version = '1.0.0'

// START SNIPPET name-conf
distributions {
    main{
        baseName = 'my-name'
    }
}
// END SNIPPET name-conf

// START SNIPPET custom-distribution
distributions {
    main {
        baseName = 'my-name'
        contents {
            from { 'src/dist' }
        }
    }
}
// END SNIPPET custom-distribution

repositories {
    mavenCentral()
}

dependencies {
    compile 'commons-collections:commons-collections:3.2.1'
}
allprojects {
    task hello << { task -> println "I'm $task.project.name" }
}allprojects {
    task hello << {task -> println "I'm $task.project.name" }
}
subprojects {
    hello << {println "- I depend on water"}
}
project(':bluewhale').hello << { println "- I'm the largest animal that has ever lived on this planet." }hello.doLast { println "- I'm the largest animal that has ever lived on this planet." }allprojects {
    task hello << {task -> println "I'm $task.project.name" }
}
subprojects {
    hello << {println "- I depend on water"}
}
configure(subprojects.findAll {it.name != 'tropicalFish'}) {
    hello << {println '- I love to spend time in the arctic waters.'}
}hello.doLast { println "- The weight of my species in summer is twice as heavy as all human beings." }ext.producerMessage = null
task action << {
    println("Consuming message: ${rootProject.producerMessage}")
}task action << {
    println "Producing message:"
    rootProject.producerMessage = 'Watch the order of execution.'
}subprojects {
    apply plugin: 'java'
    group = 'org.gradle.sample'
    version = '1.0'
    repositories {
        mavenCentral()
    }
    dependencies {
        testCompile "junit:junit:4.11"
    }
}

project(':api') {
    dependencies {
        compile project(':shared')
    }
}

project(':services:personService') {
    dependencies {
        compile project(':shared'), project(':api')
    }
}

subprojects {
    apply plugin: 'java'
    group = 'org.gradle.sample'
    version = '1.0'
}

project(':api') {
    configurations {
        spi
    }
    dependencies {
        compile project(':shared')
    }
    task spiJar(type: Jar) {
        baseName = 'api-spi'
        dependsOn classes
        from sourceSets.main.output
        include('org/gradle/sample/api/**')
    }
    artifacts {
        spi spiJar
    }
}

project(':services:personService') {
    dependencies {
        compile project(':shared')
        compile project(path: ':api', configuration: 'spi')
        testCompile "junit:junit:4.11", project(':api')
    }
}
ext.producerMessage = null
evaluationDependsOn(':producer')

message = rootProject.producerMessage

task consume << {
    println("Consuming message: " + message)
}rootProject.producerMessage = 'Watch the order of evaluation.'
ext.producerMessage = null
task consume << {
    println("Consuming message: ${rootProject.producerMessage}")
}rootProject.producerMessage = 'Watch the order of evaluation.'ext.producerMessage = null
message = rootProject.producerMessage

task consume << {
    println("Consuming message: " + message)
}rootProject.producerMessage = 'Watch the order of evaluation.'task action << {
    println "Producing message:"
    rootProject.producerMessage = 'Watch the order of execution.'
}ext.producerMessage = null
task action << {
    println("Consuming message: ${rootProject.producerMessage}")
}ext.producerMessage = null
task consume(dependsOn: ':producer:produce') << {
    println("Consuming message: ${rootProject.producerMessage}")
}task produce << {
    println "Producing message:"
    rootProject.producerMessage = 'Watch the order of execution.'
}ext.producerMessage = null
task action(dependsOn: ":producer:action") << {
    println("Consuming message: ${rootProject.producerMessage}")
}task action << {
    println "Producing message:"
    rootProject.producerMessage = 'Watch the order of execution.'
}allprojects {
    apply plugin: 'java'
    group = 'org.gradle.sample'
    version = '1.0'
}

subprojects {
    apply plugin: 'war'
    repositories {
        mavenCentral()
    }
    dependencies {
        compile "javax.servlet:servlet-api:2.5"
    }
}

task explodedDist(dependsOn: assemble) << {
    File explodedDist = mkdir("$buildDir/explodedDist")
    subprojects.each {project ->
        project.tasks.withType(Jar).each {archiveTask ->
            copy {
                from archiveTask.archivePath
                into explodedDist
            }
        }
    }
}
Closure cl = { task -> println "I'm $task.project.name" }
task hello << cl
project(':bluewhale') {
    task hello << cl
}allprojects {
    task hello << {task -> println "I'm $task.project.name" }
}allprojects {
    task hello << {task -> println "I'm $task.project.name" }
}ext.arctic = true
hello << { println "- I'm the largest animal that has ever lived on this planet." }

task distanceToIceberg << {
    println '20 nautical miles'
}import org.gradle.api.Project

allprojects {
    task hello << {task -> println "I'm $task.project.name" }
}
subprojects {
    hello {
        doLast {println "- I depend on water"}
        afterEvaluate { Project project ->
            if (project.arctic) { doLast { println '- I love to spend time in the arctic waters.' }}
        }
    }
}

ext.arctic = true
hello << { println "- The weight of my species in summer is twice as heavy as all human beings." }

task distanceToIceberg << {
    println '5 nautical miles'
}ext.arctic = falsehello.doLast { println "- I'm the largest animal that has ever lived on this planet." }
allprojects {
    task hello << {task -> println "I'm $task.project.name" }
}
subprojects {
    hello << {println "- I depend on water"}
}hello.doLast {
    println "- The weight of my species in summer is twice as heavy as all human beings."
}allprojects {
    task hello << {task -> println "I'm $task.project.name" }
}
subprojects {
    hello << {println "- I depend on water"}
}
project(':bluewhale').hello << {
    println "- I'm the largest animal that has ever lived on this planet."
}ext.arctic = true
hello.doLast { println "- I'm the largest animal that has ever lived on this planet." }allprojects {
    task hello << {task -> println "I'm $task.project.name" }
}
subprojects {
    hello {
        doLast {println "- I depend on water"}
        afterEvaluate { Project project ->
            if (project.arctic) { doLast {
                println '- I love to spend time in the arctic waters.' }
            }
        }
    }
}
ext.arctic = true
hello.doLast {
    println "- The weight of my species in summer is twice as heavy as all human beings."
}ext.arctic = falseallprojects {
    task hello << {task -> println "I'm $task.project.name" }
}
subprojects {
    hello << {println "- I depend on water"}
}configurations {
    ftpAntTask
}

dependencies {
    ftpAntTask("org.apache.ant:ant-commons-net:1.9.3") {
        module("commons-net:commons-net:1.4.1") {
            dependencies "oro:oro:2.0.8:jar"
        }
    }
}

task ftp << {
    ant {
        taskdef(name: 'ftp',
                classname: 'org.apache.tools.ant.taskdefs.optional.net.FTP',
                classpath: configurations.ftpAntTask.asPath)
        ftp(server: "ftp.apache.org", userid: "anonymous", password: "me@myorg.com") {
            fileset(dir: "htdocs/manual")
        }
    }
}apply plugin: GreetingPlugin

class GreetingPlugin implements Plugin<Project> {
    void apply(Project project) {
        project.task('hello') << {
            println "Hello from the GreetingPlugin"
        }
    }
}apply plugin: GreetingPlugin

greeting {
    message = 'Hi'
    greeter = 'Gradle'
}

class GreetingPlugin implements Plugin<Project> {
    void apply(Project project) {
        project.extensions.create("greeting", GreetingPluginExtension)
        project.task('hello') << {
            println "${project.greeting.message} from ${project.greeting.greeter}"
        }
    }
}

class GreetingPluginExtension {
    String message
    String greeter
}
apply plugin: GreetingPlugin

greeting.message = 'Hi from Gradle'

class GreetingPlugin implements Plugin<Project> {
    void apply(Project project) {
        // Add the 'greeting' extension object
        project.extensions.create("greeting", GreetingPluginExtension)
        // Add a task that uses the configuration
        project.task('hello') << {
            println project.greeting.message
        }
    }
}

class GreetingPluginExtension {
    def String message = 'Hello from GreetingPlugin'
}
apply plugin: DocumentationPlugin

books {
    quickStart {
        sourceFile = file('src/docs/quick-start')
    }
    userGuide {

    }
    developerGuide {

    }
}

task books << {
    books.each { book ->
        println "$book.name -> $book.sourceFile"
    }
}

class DocumentationPlugin implements Plugin<Project> {
    void apply(Project project) {
        def books = project.container(Book)
        books.all {
            sourceFile = project.file("src/docs/$name")
        }
        project.extensions.books = books
    }
}

class Book {
    final String name
    File sourceFile

    Book(String name) {
        this.name = name
    }
}import org.apache.commons.codec.binary.Base64

// START SNIPPET declare-classpath
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'commons-codec', name: 'commons-codec', version: '1.2'
    }
}
// END SNIPPET declare-classpath

task encode << {
    def byte[] encodedString = new Base64().encode('hello world\n'.getBytes())
    println new String(encodedString)
}
srcDirName = 'src/java'

def getSrcDir(project) {
    return project.file(srcDirName)
}
task show << {
    // Use inherited property
    println 'srcDirName: ' + srcDirName

    // Use inherited method
    File srcDir = getSrcDir(project)
    println 'srcDir: ' + rootProject.relativePath(srcDir)
}
subprojects {
    // Inject a property and method
    srcDirName = 'src/java'
    srcDir = { file(srcDirName) }

    // Inject a task
    task show << {
        println 'project: ' + project.path
        println 'srcDirName: ' + srcDirName
        File srcDir = srcDir()
        println 'srcDir: ' + rootProject.relativePath(srcDir)
    }
}

// Inject special case configuration into a particular project
project(':child2') {
    srcDirName = "$srcDirName/legacy"
}
// Use injected property and method. Here, we override the injected value
srcDirName = 'java'
def dir = srcDir()
// START SNIPPET execute-build
task build(type: GradleBuild) {
    buildFile = 'other.gradle'
    tasks = ['hello']
// END SNIPPET execute-build
    startParameter.searchUpwards = false
// START SNIPPET execute-build
}
// END SNIPPET execute-build
apply plugin: "scala"

repositories {
    mavenCentral()
}

// START SNIPPET scala-test-dependency
dependencies {
    testCompile "org.scala-lang:scala-library:2.9.2"
}
// END SNIPPET scala-test-dependency
task hello

println hello.name
println project.hello.nametask hello

println tasks.hello.name
println tasks['hello'].nameproject(':projectA') {
    task hello
}

task hello

println tasks.getByPath('hello').path
println tasks.getByPath(':hello').path
println tasks.getByPath('projectA:hello').path
println tasks.getByPath(':projectA:hello').pathtask taskX << {
    println 'taskX'
}

taskX.dependsOn {
    tasks.findAll { task -> task.name.startsWith('lib') }
}

task lib1 << {
    println 'lib1'
}

task lib2 << {
    println 'lib2'
}

task notALib << {
    println 'notALib'
}
project('projectA') {
    task taskX(dependsOn: ':projectB:taskY') << {
        println 'taskX'
    }
}

project('projectB') {
    task taskY << {
        println 'taskY'
    }
}task taskX << {
    println 'taskX'
}

task taskY << {
    println 'taskY'
}

taskX.dependsOn taskY// START SNIPPET task-rule
tasks.addRule("Pattern: ping<ID>") { String taskName ->
    if (taskName.startsWith("ping")) {
        task(taskName) << {
            println "Pinging: " + (taskName - 'ping')
        }
    }
}
// END SNIPPET task-rule

task groupPing {
    dependsOn pingServer1, pingServer2
}tasks.create(name: 'hello') << {
    println "hello"
}

tasks.create(name: 'copy', type: Copy) {
    from(file('srcDir'))
    into(buildDir)
}
// START SNIPPET declare-task
task myCopy(type: Copy)
// END SNIPPET declare-task

myCopy {
   from 'resources'
   into 'target'
   include('**/*.txt', '**/*.xml', '**/*.properties')
}
Copy myCopy = task(myCopy, type: Copy)
myCopy.from 'resources'
myCopy.into 'target'
myCopy.include('**/*.txt', '**/*.xml', '**/*.properties')

// START SNIPPET add-action
task hello(type: GreetingTask)

// START SNIPPET define-task
class GreetingTask extends DefaultTask {
// END SNIPPET define-task
    @TaskAction
    def greet() {
        println 'hello from GreetingTask'
    }
// START SNIPPET define-task
}
// END SNIPPET define-task
// END SNIPPET add-action
// START SNIPPET tasks
apply plugin: GreetingPlugin

// our default greeting
greeting = "Hello!"

task hello(type: GreetingTask)

task bonjour(type: GreetingTask) {
    greeting = "Bonjour!"
}
// END SNIPPET tasks

// START SNIPPET plugin
class GreetingPlugin implements Plugin<Project> {
    void apply(Project project) {
        project.tasks.withType(GreetingTask) { task ->
            task.conventionMapping.greeting = { project.greeting }
        }
    }
}
// END SNIPPET plugin

// START SNIPPET task
class GreetingTask extends DefaultTask {

    String greeting

    @TaskAction
    def greet() {
        println getGreeting()
    }
}
// END SNIPPET task
// START SNIPPET task
class GreetingToFileTask extends DefaultTask {

    def destination

    File getDestination() {
        project.file(destination)
    }

    @TaskAction
    def greet() {
        def file = getDestination()
        file.parentFile.mkdirs()
        file.write "Hello!"
    }
}
// END SNIPPET task

// START SNIPPET config
task greet(type: GreetingToFileTask) {
    destination = { project.greetingFile }
}

task sayGreeting(dependsOn: greet) << {
    println file(greetingFile).text
}

greetingFile = "$buildDir/hello.txt"
// END SNIPPET config// START SNIPPET add-property
// Use the default greeting
task hello(type: GreetingTask)

// Customize the greeting
task greeting(type: GreetingTask) {
    greeting = 'greetings from GreetingTask'
}

class GreetingTask extends DefaultTask {
    String greeting = 'hello from GreetingTask'

    @TaskAction
    def greet() {
        println greeting
    }
}
// END SNIPPET add-property
// START SNIPPET no-description
task copy(type: Copy) {
// END SNIPPET no-description
   description 'Copies the resource directory to the target directory.'
// START SNIPPET no-description
   from 'resources'
   into 'target'
   include('**/*.txt', '**/*.xml', '**/*.properties')
}
// END SNIPPET no-description
task(hello) << {
    println "hello"
}

task(copy, type: Copy) {
    from(file('srcDir'))
    into(buildDir)
}task('hello') <<
{
    println "hello"
}

task('copy', type: Copy) {
    from(file('srcDir'))
    into(buildDir)
}task taskX << {
    println 'taskX'
}
task taskY << {
    println 'taskY'
}

taskX.finalizedBy taskYtask taskX << {
    println 'taskX'
    throw new RuntimeException()
}
task taskY << {
    println 'taskY'
}

taskX.finalizedBy taskY// START SNIPPET declare-inputs-and-outputs
task transform {
    ext.srcFile = file('mountains.xml')
    ext.destDir = new File(buildDir, 'generated')
    inputs.file srcFile
    outputs.dir destDir
// END SNIPPET declare-inputs-and-outputs
    doLast {
        println "Transforming source file."
        destDir.mkdirs()
        def mountains = new XmlParser().parse(srcFile)
        mountains.mountain.each { mountain ->
            def name = mountain.name[0].text()
            def height = mountain.height[0].text()
            def destFile = new File(destDir, "${name}.txt")
            destFile.text = "$name -> ${height}\n"
        }
    }
// START SNIPPET declare-inputs-and-outputs
}
// END SNIPPET declare-inputs-and-outputs
task transform {
    ext.srcFile = file('mountains.xml')
    ext.destDir = new File(buildDir, 'generated')
    doLast {
        println "Transforming source file."
        destDir.mkdirs()
        def mountains = new XmlParser().parse(srcFile)
        mountains.mountain.each { mountain ->
            def name = mountain.name[0].text()
            def height = mountain.height[0].text()
            def destFile = new File(destDir, "${name}.txt")
            destFile.text = "$name -> ${height}\n"
        }
    }
}task originalInputs() << {
    file('inputs').mkdir()
    file('inputs/1.txt').text = "Content for file 1."
    file('inputs/2.txt').text = "Content for file 2."
    file('inputs/3.txt').text = "Content for file 3."
}

// START SNIPPET updated-inputs
task updateInputs() << {
    file('inputs/1.txt').text = "Changed content for existing file 1."
    file('inputs/4.txt').text = "Content for new file 4."
}
// END SNIPPET updated-inputs

// START SNIPPET removed-input
task removeInput() << {
    file('inputs/3.txt').delete()
}
// END SNIPPET removed-input

// START SNIPPET removed-output
task removeOutput() << {
    file("$buildDir/outputs/1.txt").delete()
}
// END SNIPPET removed-output

// START SNIPPET reverse
task incrementalReverse(type: IncrementalReverseTask) {
    inputDir = file('inputs')
    outputDir = file("$buildDir/outputs")
    inputProperty = project.properties['taskInputProperty'] ?: "original"
}
// END SNIPPET reverse

// START SNIPPET incremental-task
class IncrementalReverseTask extends DefaultTask {
    @InputDirectory
    def File inputDir

    @OutputDirectory
    def File outputDir

    @Input
    def inputProperty

    @TaskAction
    void execute(IncrementalTaskInputs inputs) {
        println inputs.incremental ? "CHANGED inputs considered out of date" : "ALL inputs considered out of date"
        // START SNIPPET out-of-date-inputs
        inputs.outOfDate { change ->
            println "out of date: ${change.file.name}"
            def targetFile = new File(outputDir, change.file.name)
            targetFile.text = change.file.text.reverse()
        }
        // END SNIPPET out-of-date-inputs

        // START SNIPPET removed-inputs
        inputs.removed { change ->
            println "removed: ${change.file.name}"
            def targetFile = new File(outputDir, change.file.name)
            targetFile.delete()
        }
        // END SNIPPET removed-inputs
    }
}
// END SNIPPET incremental-task
task taskX << {
    println 'taskX'
}
task taskY << {
    println 'taskY'
}
taskY.mustRunAfter taskXtask taskX << {
    println 'taskX'
}
task taskY << {
    println 'taskY'
}
taskY.shouldRunAfter taskXtask taskX << {
    println 'taskX'
}
task taskY << {
    println 'taskY'
}
task taskZ << {
    println 'taskZ'
}
taskX.dependsOn taskY
taskY.dependsOn taskZ
taskZ.shouldRunAfter taskXapply {
  plugin 'announce'
  plugin 'java'
}

// START SNIPPET full-example
announce {
  announceTwitterUsername = 'AnnounceExampleTwitterAccount'
  announceTwitterPassword = 'your-password'
}
// END SNIPPET full-example
task loadfile << {
    def files = file('../antLoadfileResources').listFiles().sort()
    files.each { File file ->
        if (file.isFile()) {
            ant.loadfile(srcFile: file, property: file.name)
            println " *** $file.name ***"
            println "${ant.properties[file.name]}"
        }
    }
}task checksum << {
    fileList('../antLoadfileResources').each {File file ->
        ant.checksum(file: file, property: "cs_$file.name")
        println "$file.name Checksum: ${ant.properties["cs_$file.name"]}"
    }
}

task loadfile << {
    fileList('../antLoadfileResources').each {File file ->
        ant.loadfile(srcFile: file, property: file.name)
        println "I'm fond of $file.name"
    }
}

File[] fileList(String dir) {
    file(dir).listFiles({file -> file.isFile() } as FileFilter).sort()
}
apply plugin: 'java'

// START SNIPPET file-set
task zipWithFileSet(type: Zip) {
    from ('contentDir') {
        include('**/*.txt')
        exclude('**/*.gif')
    }
}
// END SNIPPET file-set

// START SNIPPET files
task zipWithFiles(type: Zip) {
    from 'path_to_file1', 'path_to_file2'
}
// END SNIPPET files

// START SNIPPET zip-file-set
task zipWithZipFileSet(type: Zip) {
    from('contentDir') {
        include '**/*.txt'
        exclude '**/*.gif'
        into 'myprefix'
    }
}
// END SNIPPET zip-file-set

// START SNIPPET tar-file-set
task tarWithFileSet(type: Tar) {
    from('contentDir') {
        include('**/*.txt')
        exclude('**/*.gif')
        uid = 'myuid'
    }
}
// END SNIPPET tar-file-set
task distribution << {
    println "We build the zip with version=$version"
}

task release(dependsOn: 'distribution') << {
    println 'We release now'
}

gradle.taskGraph.whenReady {taskGraph ->
    if (taskGraph.hasTask(release)) {
        version = '1.0'
    } else {
        version = '1.0-SNAPSHOT'
    }
}
task configure << {
    pos = configure(new java.text.FieldPosition(10)) {
        beginIndex = 1
        endIndex = 5
    }
    println pos.beginIndex
    println pos.endIndex
}task configure << {
    pos = new java.text.FieldPosition(10)
    // Apply the script
    apply from: 'other.gradle', to: pos
    println pos.beginIndex
    println pos.endIndex
}apply from: 'other.gradle'
task count << {
    4.times { print "$it " }
}defaultTasks 'clean', 'run'

task clean << {
    println 'Default Cleaning!'
}

task run << {
    println 'Default Running!'
}

task other << {
    println "I'm not a default task!"
}task disableMe << {
    println 'This should not be printed if the task is disabled.'
}
disableMe.enabled = false4.times { counter ->
    task "task$counter" << {
        println "I'm task number $counter"
    }
}4.times { counter ->
    task "task$counter" << {
        println "I'm task number $counter"
    }
}
task0.dependsOn task2, task3
task compile << {
    println 'compiling source'
}

task compileTest(dependsOn: compile) << {
    println 'compiling unit tests'
}

task test(dependsOn: [compile, compileTest]) << {
    println 'running unit tests'
}

task dist(dependsOn: [compile, test]) << {
    println 'building the distribution'
}// START SNIPPET taskProperties
task myTask {
    ext.myProperty = "myValue"
}

task printTaskProperties << {
    println myTask.myProperty
}
// END SNIPPET taskProperties

// START SNIPPET extraProperties
apply plugin: "java"

ext {
    springVersion = "3.1.0.RELEASE"
    emailNotification = "build@master.org"
}

sourceSets.all { ext.purpose = null }

sourceSets {
    main {
        purpose = "production"
    }
    test {
        purpose = "test"
    }
    plugin {
        purpose = "production"
    }
}

task printProperties << {
    println springVersion
    println emailNotification
    sourceSets.matching { it.purpose == "production" }.each { println it.name }
}
// END SNIPPET extraPropertiesapply plugin: 'java'

// START SNIPPET groovyJdk
// Iterable gets an each() method
configurations.runtime.each { File f -> println f }
// END SNIPPET groovyJdk

// START SNIPPET propertyAccessors
// Using a getter method
println project.buildDir
println getProject().getBuildDir()

// Using a setter method
project.buildDir = 'target'
getProject().setBuildDir('target')
// END SNIPPET propertyAccessors

// START SNIPPET methodCallWithoutParentheses
test.systemProperty 'some.prop', 'value'
test.systemProperty('some.prop', 'value')
// END SNIPPET methodCallWithoutParentheses

// START SNIPPET listAndMapLiterals
// List literal
test.includes = ['org/gradle/api/**', 'org/gradle/internal/**']

List<String> list = new ArrayList<String>()
list.add('org/gradle/api/**')
list.add('org/gradle/internal/**')
test.includes = list

// Map literal
apply plugin: 'java'

Map<String, String> map = new HashMap<String, String>()
map.put('plugin', 'java')
apply(map)
// END SNIPPET listAndMapLiterals

// START SNIPPET closureAsLastParam
repositories {
    println "in a closure"
}
repositories() { println "in a closure" }
repositories({ println "in a closure" })
// END SNIPPET closureAsLastParam

// START SNIPPET closureDelegates
dependencies {
    assert delegate == project.dependencies
    compile('junit:junit:4.11')
    delegate.compile('junit:junit:4.11')
}
// END SNIPPET closureDelegatesapply plugin: 'groovy'

repositories {
    mavenCentral()
}

// START SNIPPET groovy-dependency
repositories {
    flatDir { dirs 'lib' }
}

dependencies {
    compile module('org.codehaus.groovy:groovy:1.6.0') {
        dependency('asm:asm-all:2.2.3')
        dependency('antlr:antlr:2.7.7')
        dependency('commons-cli:commons-cli:1.2')
        module('org.apache.ant:ant:1.9.3') {
            dependencies('org.apache.ant:ant-junit:1.9.3@jar', 'org.apache.ant:ant-launcher:1.9.3')
        }
    }
}
// END SNIPPET groovy-dependency
task hello {
    doLast {
        println 'Hello world!'
    }
}task hello << {
    println 'Hello Earth'
}
hello.doFirst {
    println 'Hello Venus'
}
hello.doLast {
    println 'Hello Mars'
}
hello << {
    println 'Hello Jupiter'
}task hello << {
    println 'Hello world!'
}task hello << {
    println 'Hello world!'
}
hello.doLast {
    println "Greetings from the $hello.name task."
}task hello << {
    println 'Hello world!'
}
task intro(dependsOn: hello) << {
    println "I'm Gradle"
}task taskX(dependsOn: 'taskY') << {
    println 'taskX'
}
task taskY << {
    println 'taskY'
}def dest = "dest"

task copy(type: Copy) {
    from "source"
    into dest
}// START SNIPPET use-logger
logger.quiet('An info log message which is always logged.')
logger.error('An error log message.')
logger.warn('A warning log message.')
logger.lifecycle('A lifecycle info log message.')
logger.info('An info log message.')
logger.debug('A debug log message.')
logger.trace('A trace log message.')
// END SNIPPET use-logger

// START SNIPPET use-println
println 'A message which is logged at QUIET level'
// END SNIPPET use-println

// START SNIPPET capture-stdout
logging.captureStandardOutput LogLevel.INFO
println 'A message which is logged at INFO level'
// END SNIPPET capture-stdout

// START SNIPPET task-capture-stdout
task logInfo {
    logging.captureStandardOutput LogLevel.INFO
    doFirst {
        println 'A task message which is logged at INFO level'
    }
}
// END SNIPPET task-capture-stdout

// START SNIPPET use-slf4j
import org.slf4j.Logger
import org.slf4j.LoggerFactory

Logger slf4jLogger = LoggerFactory.getLogger('some-logger')
slf4jLogger.info('An info log message logged using SLF4j')
// END SNIPPET use-slf4j
classesDir = new File('build/classes')
task resources << {
    classesDir.mkdirs()
    // do something
}
task compile(dependsOn: 'resources') << {
    if (classesDir.isDirectory()) {
        println 'The class directory exists. I can operate'
    }
    // do something
}
apply plugin: 'java'
version = '1.0'

// START SNIPPET add-to-manifest
jar {
    manifest {
        attributes("Implementation-Title": "Gradle", "Implementation-Version": version)
    }
}
// END SNIPPET add-to-manifest

// START SNIPPET custom-manifest
ext.sharedManifest = manifest {
    attributes("Implementation-Title": "Gradle", "Implementation-Version": version)
}
task fooJar(type: Jar) {
    manifest = project.manifest {
        from sharedManifest
    }
}
// END SNIPPET custom-manifest

// START SNIPPET merge
task barJar(type: Jar) {
    manifest {
        attributes key1: 'value1'
        from sharedManifest, 'src/config/basemanifest.txt'
        from('src/config/javabasemanifest.txt', 'src/config/libbasemanifest.txt') {
            eachEntry { details ->
                if (details.baseValue != details.mergeValue) {
                    details.value = baseValue
                }
                if (details.key == 'foo') {
                    details.exclude()
                }
            }
        }
    }
}
// END SNIPPET merge

// START SNIPPET write
jar.manifest.writeTo("$buildDir/mymanifest.mf")
// END SNIPPET write
classesDir = file('build/classes')
classesDir.mkdirs()
task clean(type: Delete) {
    delete 'build'
}
task compile(dependsOn: 'clean') << {
    if (!classesDir.isDirectory()) {
        println 'The class directory does not exist. I can not operate'
        // do something
    }
    // do something
}
apply {
   plugin 'osgi'
   plugin 'java'
}

// START SNIPPET configure-jar
jar {
    manifest { // the manifest of the default jar is of type OsgiManifest
        name = 'overwrittenSpecialOsgiName'
        instruction 'Private-Package',
                'org.mycomp.package1',
                'org.mycomp.package2'
        instruction 'Bundle-Vendor', 'MyCompany'
        instruction 'Bundle-Description', 'Platform2: Metrics 2 Measures Framework'
        instruction 'Bundle-DocURL', 'http://www.mycompany.com'
    }
}
task fooJar(type: Jar) {
    manifest = osgiManifest {
        instruction 'Bundle-Vendor', 'MyCompany'    
    }
}
// END SNIPPET configure-jar
apply plugin: 'java'

task show << {
    // Access the convention property as a project property
    println relativePath(sourceSets.main.output.classesDir)
    println relativePath(project.sourceSets.main.output.classesDir)

    // Access the convention property via the convention object
    println relativePath(project.convention.plugins.java.sourceSets.main.output.classesDir)
}apply plugin: 'java'

compileJava.destinationDir = file("$buildDir/output/classes")

task show << {
    println relativePath(compileJava.destinationDir)
}apply plugin: 'java'

sourceSets.main.output.classesDir = file("$buildDir/output/classes")

task show << {
    println relativePath(compileJava.destinationDir)
}// START SNIPPET apply-by-id
apply plugin: 'java'

task show << {
    println relativePath(compileJava.destinationDir)
    println relativePath(processResources.destinationDir)
}
// END SNIPPET apply-by-id
// START SNIPPET apply-by-type
apply plugin: org.gradle.api.plugins.JavaPlugin
// END SNIPPET apply-by-type
// START SNIPPET apply-by-type-with-import
apply plugin: JavaPlugin
// END SNIPPET apply-by-type-with-import
// START SNIPPET explicit-apply
apply plugin: 'java'
apply plugin: 'groovy'
// END SNIPPET explicit-apply
// START SNIPPET project-name
println name
println project.name
// END SNIPPET project-name

task check << {
}/*
 * Copyright 2010 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

defaultTasks 'dists'

allprojects {
    version = '1.0-SNAPSHOT'
    task clean {
        description = "Deletes the build directory ($buildDir.name)"
        group = 'build'
    }
}

task docs {
    description = 'Builds the documentation'
}

task dists {
    dependsOn { subprojects*.libs }
    dependsOn docs
}

// START SNIPPET add-task-to-report
dists {
    description = 'Builds the distribution'
    group = 'build'
}
// END SNIPPET add-task-to-report

subprojects {
    configurations {
        compile
        testCompile
    }
    repositories {
        mavenCentral()
    }
    task compile {
        description = 'Compiles the source files'
    }
    task libs {
        group = 'build'
        description = 'Builds the JAR'
        dependsOn compile
    }
    tasks.addRule(new TestRule())
}

project(':api') {
// START SNIPPET project-description
description = 'The shared API for the application'
// END SNIPPET project-description
    dependencies {
        compile "org.codehaus.groovy:groovy-all:2.2.0"
        testCompile "junit:junit:4.11"
    }
}

project(':webapp') {
    description = 'The Web application implementation'
    dependencies {
        compile project(path: ':api', configuration: 'compile'), "commons-io:commons-io:1.2"
    }
    libs {
        dependsOn ':api:libs'
    }
}

class TestRule implements Rule {
    public String getDescription() {
        'build<ConfigurationName>: builds the artifacts of the given configuration'
    }

    public void apply(String taskName) {
    }
}
task printProps << {
    println commandLineProjectProp
    println gradlePropertiesProp
    println systemProjectProp
    println envProjectProp
    println System.properties['system']
}task copy(type: Copy)

task copy(overwrite: true) << {
    println('I am the new one.')
}task hello << {
    println "using build file '$buildFile.name' in '$buildFile.parentFile.name'."
}task compile << {
    println 'We are doing the compile.'
}

compile.doFirst {
    // Here you would put arbitrary conditions in real life. But we use this as an integration test, so we want defined behavior.
    if (true) { throw new StopExecutionException() }
}
task myTask(dependsOn: 'compile') << {
   println 'I am not affected'
}
task hello << {
    println 'hello world'
}

hello.onlyIf { !project.hasProperty('skipHello') }
task upper << {
    String someString = 'mY_nAmE'
    println "Original: " + someString 
    println "Upper case: " + someString.toUpperCase()
}apply plugin: 'java'
archivesBaseName = 'gradle'
version = 1.0

task myZip(type: Zip) {
    appendix = 'wrapper'
    classifier = 'src'
    from 'somedir'
}

println myZip.archiveNameapply plugin: 'java'
version = 1.0

task myZip(type: Zip) {
    from 'somedir'
    baseName = 'customName'
}

println myZip.archiveNametask wrapper(type: Wrapper) {
    gradleVersion = '1.4'
}
    dependsOn(':krill')

    hello.doLast {
        println "I'm the largets animal which has ever lived on this planet!"
    }
    childrenDependOnMe()

allprojects {
    task hello << {Task task ->
        println "Hello, I'm $task.project.name"
    }
}

subprojects*.hello*.doLast {
    println 'I love water.'
}

hello << {
    println 'As you all know, I cover three quarters of this planet!'
}
    
    dependsOn(':phytoplankton')

    hello.doLast {
        println "The weight of my species in summer is twice as heavy as all human beings!"
    }
    
    hello.doLast {
        println "I produce as much oxygen as all the other plants on earth together!"
    }
    apply plugin: 'jetty'
// START SNIPPET use-plugin
apply plugin: 'war'
// END SNIPPET use-plugin
group = 'gradle'
version = '1.0'

// START SNIPPET customization
configurations {
   moreLibs
}

repositories {
   flatDir { dirs "lib" }
   mavenCentral()
}

dependencies {
    compile module(":compile:1.0") {
        dependency ":compile-transitive-1.0@jar"
        dependency ":providedCompile-transitive:1.0@jar"
    }
    providedCompile "javax.servlet:servlet-api:2.5"
    providedCompile module(":providedCompile:1.0") {
        dependency ":providedCompile-transitive:1.0@jar"
    }
    runtime ":runtime:1.0"
    providedRuntime ":providedRuntime:1.0@jar"
    testCompile "junit:junit:4.11"
    moreLibs ":otherLib:1.0"
}

war {
    from 'src/rootContent' // adds a file-set to the root of the archive
    webInf { from 'src/additionalWebInf' } // adds a file-set to the WEB-INF dir.
    classpath fileTree('additionalLibs') // adds a file-set to the WEB-INF/lib dir.
    classpath configurations.moreLibs // adds a configuration to the WEB-INF/lib dir.
    webXml = file('src/someWeb.xml') // copies a file to WEB-INF/web.xml
}
// END SNIPPET customization
stopKey = 'foo'
stopPort = 9451
httpPort = 8080
// START SNIPPET use-war-plugin
apply plugin: 'war'
// END SNIPPET use-war-plugin
// START SNIPPET use-jetty-plugin
apply plugin: 'jetty'
// END SNIPPET use-jetty-plugin

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'commons-io', name: 'commons-io', version: '1.4'
    compile group: 'log4j', name: 'log4j', version: '1.2.15', ext: 'jar'
}

httpPort = 8080
stopPort = 9451
stopKey = 'foo'
apply plugin: 'java'

dependencies {
    runtime 'commons-collections:commons-collections:3.2@jar'
    testCompile 'junit:junit:4.7'
}

sourceSets {
    integTest {
        java.srcDirs = ['src/integTest/java']
    }
}
apply plugin: 'groovy'

dependencies {
    runtime 'commons-collections:commons-collections:3.2@jar'
    testCompile 'junit:junit:4.7'
}
apply plugin: 'java-base'

sourceSets {
    custom
}
import org.gradle.api.internal.artifacts.ivyservice.CacheLayout

import java.util.regex.Pattern
import junit.framework.AssertionFailedError
import org.custommonkey.xmlunit.Diff
import org.custommonkey.xmlunit.ElementNameAndAttributeQualifier
import org.custommonkey.xmlunit.XMLAssert
import org.gradle.plugins.ide.eclipse.model.AbstractClasspathEntry
import org.junit.ComparisonFailure

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'xmlunit:xmlunit:1.3', 'junit:junit:4.8.1'
    }
}

defaultTasks 'eclipse', 'cleanEclipse'

allprojects {
    apply plugin: 'eclipse-wtp'

    group = 'org.gradle'

    plugins.withType(JavaBasePlugin) {
        sourceCompatibility = 1.5
    }
}

subprojects {
    repositories {
        mavenCentral()
    }

    group = 'org.gradle'
    version = '1.0'
}

allprojects {
    afterEvaluate { p ->
        configure(p) {
            eclipseProject.doLast {
                compareXmlWithIgnoringOrder(file("$rootDir/../expectedFiles/${project.name}Project.xml"),
                        file(".project"))
            }

            if (p.hasProperty('eclipseClasspath')) {
                eclipse {
                    classpath {
                        downloadJavadoc = true
                        //this hack is it avoid getting mad with xmlunit failures for whitespace
                        //and with futile attempts to resolve them properly.
                        file.whenMerged { classpath ->
                            classpath.entries.each { entry ->
                                if (entry instanceof AbstractClasspathEntry) {
                                    entry.entryAttributes.remove(AbstractClasspathEntry.COMPONENT_NON_DEPENDENCY_ATTRIBUTE)
                                }
                            }
                        }
                    }
                }
                eclipseClasspath {
                    doLast {
                        compareXmlWithIgnoringOrder(file("$rootDir/../expectedFiles/${project.name}Classpath.xml"),
                                file(".classpath"))
                    }
                }
            }

            if (p.hasProperty('eclipseJdt')) {
                eclipseJdt {
                    doLast {
                        compareProperties(getExpectedXml(file("$rootDir/../expectedFiles/${project.name}Jdt.properties")),
                                getActualXml(file(".settings/org.eclipse.jdt.core.prefs")))
                    }
                }
            }

            if (p.hasProperty('eclipseWtpComponent')) {
                eclipseWtpComponent {
                    doLast {
                        compareXmlWithIgnoringOrder(file("$rootDir/../expectedFiles/${project.name}WtpComponent.xml"),
                                file(".settings/org.eclipse.wst.common.component"))
                    }
                }
            }
            if (p.hasProperty('eclipseWtpFacet')) {
                eclipseWtpFacet {
                    doLast {
                        compareXmlWithIgnoringOrder(file("$rootDir/../expectedFiles/${project.name}WtpFacet.xml"),
                                file(".settings/org.eclipse.wst.common.project.facet.core.xml"))
                    }
                }
            }
            cleanEclipse.doLast {
                assert !file(".classpath").exists()
                assert !file(".project").exists()
                assert !file('.settings').exists() || file('.settings').listFiles().length == 0
            }
        }
    }
}

void compareProperties(String expectedProperties, String actualProperties) {
    Properties expected = new Properties()
    expected.load(new ByteArrayInputStream(expectedProperties.bytes))
    Properties actual = new Properties()
    actual.load(new ByteArrayInputStream(actualProperties.bytes))
    assert expected == actual
}

void compareXmlWithIgnoringOrder(File expectedFile, File actualFile) {
    String expectedXml = getExpectedXml(expectedFile)
    String actualXml = getActualXml(actualFile)
    Diff diff = new Diff(expectedXml, actualXml)
    diff.overrideElementQualifier(new ElementNameAndAttributeQualifier())
    try {
        XMLAssert.assertXMLEqual(diff, true)
    } catch (AssertionFailedError error) {
        println "EXPECTED:\n${expectedXml}"
        println "ACTUAL:\n${actualXml}"
        throw new ComparisonFailure("Comparison filure: expected: $expectedFile, actual: $actualFile"
            + "\nUnexpected content for generated file: ${error.message}", expectedXml, actualXml).initCause(error)
    }
}

String getExpectedXml(File file) {
    return file.text
}

String getActualXml(File file) {
    def homeDir = gradle.gradleUserHomeDir.absolutePath.replace(File.separator, '/')
    def pattern = Pattern.compile(Pattern.quote(homeDir) + "/caches/${CacheLayout.ROOT.getKey()}/${CacheLayout.FILE_STORE.getKey()}/([^/]+/[^/]+/[^/]+)/[a-z0-9]+/")
    def text = file.text.replaceAll(pattern, '@CACHE_DIR@/$1/@SHA1@/')
    pattern = Pattern.compile("GRADLE_USER_HOME/${CacheLayout.ROOT.getKey()}/${CacheLayout.FILE_STORE.getKey()}/([^/]+/[^/]+/[^/]+)/[a-z0-9]+/")
    text = text.replaceAll(pattern, 'GRADLE_USER_HOME/@CACHE@/$1/@SHA1@/')

    //remove trailing slashes for windows paths
    text = text.replaceAll("jar:file:/", 'jar:file:')
    return text
}

apply plugin: 'war'

sourceCompatibility = 6
apply plugin: 'war'

dependencies {
    runtime "commons-lang:commons-lang:2.5"
    testCompile 'junit:junit:4.7'
}

eclipse {
    pathVariables GRADLE_USER_HOME: file("${gradle.gradleUserHomeDir}/caches")
}
apply plugin: 'java'
apply plugin: 'war'

version = '2.5'

dependencies {
    providedCompile 'org.slf4j:slf4j-api:1.5.8'
    providedRuntime "commons-io:commons-io:1.2"
    compile project(':api')
    runtime "commons-lang:commons-lang:2.5"
    testCompile 'junit:junit:4.7'
}
allprojects {
    apply plugin: "idea"
}apply plugin: "scala"

repositories {
    mavenCentral()
}

dependencies {
    compile "org.scala-lang:scala-library:2.9.2"
}apply plugin: "scala"

repositories {
    mavenCentral()
}

dependencies {
    compile "org.scala-lang:scala-library:2.10.0"
}apply plugin: "scala"

repositories {
    mavenCentral()
}

dependencies {
    compile "org.scala-lang:scala-library:2.9.2"
}dependencies {
    runtime 'commons-collections:commons-collections:3.2@jar'
}

cleanIdea.doLast {
    assert !file("api/api.iml").isFile()
}
defaultTasks 'idea', 'cleanIdea'

allprojects {
    apply plugin: 'idea'
}

idea.project.jdkName = '1.6'

subprojects {
    apply plugin: 'java'

    idea {
        module {
            downloadJavadoc = true
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        testCompile 'junit:junit:4.7'
    }

    group = 'org.gradle'
    version = '1.0'
}

cleanIdea.doLast {
    assert !file("${project.name}.iml").isFile()
    assert !file("${project.name}.ipr").isFile()
    assert file("${project.name}.iws").isFile() //we don't rid the iws file
}
apply plugin: 'war'

version = '2.5'

dependencies {
    providedCompile 'org.slf4j:slf4j-api:1.5.8@jar'
    compile project(':api'), files("$projectDir/lib/compile-1.0.jar")
    runtime module("commons-lang:commons-lang:2.4") {
        dependency("commons-io:commons-io:1.2")
    }
}

cleanIdea.doLast {
    assert !file("webservice/webservice.iml").isFile()
}
apply plugin: 'java'
apply plugin: 'idea'

repositories {
    mavenCentral()
}

dependencies {
    runtime 'commons-collections:commons-collections:3.2@jar'
    runtime 'junit:junit:4.7@jar'
}

idea {
    pathVariables CUSTOM_DIR: new File(gradle.gradleUserHomeDir, 'custom')
}apply plugin: 'idea'
idea.project.jdkName = '1.6'
project('a') {
    apply plugin: 'idea'
}
apply plugin: 'idea'
idea.project.jdkName = 1.6
allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'

    sourceCompatibility = 1.5
}

idea.project.jdkName = '1.7'import org.gradle.internal.jvm.Jvm

task checkGradleUserHomeViaSystemEnv << {
    assert gradle.gradleUserHomeDir == file('customUserHome')
}

task checkDefaultGradleUserHome<< {
    assert gradle.gradleUserHomeDir == new File(System.properties['user.home'], ".gradle")
}

task checkSystemPropertyGradleUserHomeHasPrecedence << {
    assert gradle.gradleUserHomeDir == file('systemPropCustomUserHome')
}

task checkJavaHome << {
    assert Jvm.current().javaHome == file(expectedJavaHome)
}

task checkSystemProperty << {
    assert System.getProperty('customProp1') == 'custom-value'
    assert System.getProperty('customProp2') == 'custom value'
}apply plugin: 'java'

repositories {
    mavenCentral()
}

dependencies {
    testCompile 'junit:junit:4.11'
}

buildDir = 'target'
sourceSets.main.output.classesDir = new File(buildDir, 'main-classes')
sourceSets.test.output.classesDir = new File(buildDir, 'test-classes')def levelProp = property("level")
def level = LogLevel."$levelProp"

logging.level = level

assert logger.debugEnabled == level <= LogLevel.DEBUG
assert logger.infoEnabled == level <= LogLevel.INFO
assert logger.lifecycleEnabled == level <= LogLevel.LIFECYCLE
assert logger.warnEnabled == level <= LogLevel.WARN
assert logger.quietEnabled == level <= LogLevel.QUIET
assert logger.errorEnabled == level <= LogLevel.ERROR

task checkLevel {
    logging.level = level
    doLast {
        LogLevel.values().each { l ->
            assert logger.isEnabled(l) == l >= level
        }
    }
}apply from: 'external.gradle'
println 'main buildSrc quiet'
logger.info 'main buildSrc info'
println 'nestedBuild quiet'
logger.info 'nestedBuild info'

task log << {
    println 'nestedBuild task quiet'
}
println 'nestedBuild buildSrc quiet'
logger.info 'nestedBuild buildSrc info'
import org.gradle.logging.StyledTextOutputFactory

logger.quiet('An info log message which is always logged.')
logger.error('An error log message.')
logger.warn('A warning log message.')
logger.lifecycle('A lifecycle info log message.')
logger.info('An info log message.')
logger.debug('A debug log message.')
logger.trace('A trace log message.')

println 'A message which is logged at QUIET level'

// Should use stdout capture level
def textOutput = services.get(StyledTextOutputFactory.class).create('build')
textOutput.text('Text which is logged at QUIET level').println()

logging.captureStandardOutput LogLevel.INFO
println 'A message which is logged at INFO level'

textOutput.text('Text which is logged at INFO level').println()

System.err.println 'An error message which is logged at ERROR level'
logging.captureStandardError LogLevel.LIFECYCLE
System.err.println 'An error message which is logged at LIFECYCLE level'

task logLifecycle {
    logging.captureStandardOutput LogLevel.LIFECYCLE
    logging.captureStandardError LogLevel.WARN
    doFirst {
        println('A task message which is logged at LIFECYCLE level')
        System.err.println('A task error message which is logged at WARN level')
    }
}

// START SNIPPET task-capture-stdout
task logInfo {
    logging.captureStandardOutput LogLevel.INFO
    doFirst {
        println 'A task message which is logged at INFO level'
    }
}
// END SNIPPET task-capture-stdout

task nestedBuildLog(type: GradleBuild) {
    startParameter.currentDir = rootProject.file('nestedBuild')
    startParameter.taskNames = ['log']
}

task log(dependsOn: [logInfo, logLifecycle, nestedBuildLog]) << {
    println('A task message which is logged at QUIET level')
}

// warn is the default log level for echo
ant.echo('A warn message logged from Ant')
ant.echo('An error message logged from Ant', level: org.apache.tools.ant.types.LogLevel.ERR)
ant.echo('An info message logged from Ant', level: org.apache.tools.ant.types.LogLevel.INFO)
ant.echo('A debug message logged from Ant', level: org.apache.tools.ant.types.LogLevel.DEBUG)

// START SNIPPET use-slf4j
org.slf4j.Logger slf4jLogger = org.slf4j.LoggerFactory.getLogger('some-logger')
slf4jLogger.info('An info log message logged using SLF4j')
// END SNIPPET use-slf4j

org.apache.commons.logging.Log jclLogger = org.apache.commons.logging.LogFactory.getLog('some-logger')
jclLogger.info('An info log message logged using JCL')

org.apache.log4j.Logger log4jLogger = org.apache.log4j.Logger.getLogger('some-logger')
log4jLogger.info('An info log message logged using Log4j')

java.util.logging.Logger julLogger = java.util.logging.Logger.getLogger('some-logger')
julLogger.severe('A severe log message logged using JUL')
julLogger.warning('A warning log message logged using JUL')
julLogger.info('An info log message logged using JUL')
julLogger.config('A config log message logged using JUL')
julLogger.fine('A fine log message logged using JUL')
buildscript {
    println('quietProject2ScriptClassPathOut')
    logging.captureStandardOutput LogLevel.INFO
    logger.info('infoProject2ScriptClassPathOut')
}

evaluationDependsOn(':project1')
// stdout capture config injected
println('infoProject2Out')

gradle.taskGraph.whenReady {
    println 'quietProject2CallbackOut'
}import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import org.gradle.logging.StyledTextOutputFactory
import static org.gradle.logging.StyledTextOutput.Style.*

task log << {
    def executor = Executors.newCachedThreadPool()
    (1..10).each { thread ->
        executor.execute {
            def textOut = services.get(StyledTextOutputFactory.class).create('build')
            (1..100).each { iteration ->
                logger.lifecycle("log message from thread $thread iteration $iteration")
                print "stdout message "
                println "from thread $thread iteration $iteration"
                textOut.text("styled text message from thread ")
                textOut.style(UserInput).text(thread).style(Normal)
                textOut.text(' iteration ')
                textOut.style(UserInput).text(iteration).style(Normal)
                textOut.println()
            }
        }
    }

    executor.shutdown()
    executor.awaitTermination(30, TimeUnit.SECONDS)
}
allprojects {
    apply plugin: 'java'
}
allprojects { apply plugin: 'java' }subprojects {

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'

repositories {
<% if (repository) { %>
    maven {
        url "${repository.getUri()}"
    }
<% } %>
    mavenCentral()
}

dependencies {
    compile 'commons-lang:commons-lang:2.5'
    compile "commons-httpclient:commons-httpclient:3.0"
    compile "commons-codec:commons-codec:1.2"
    compile "org.slf4j:jcl-over-slf4j:1.7.5"
    compile "org.codehaus:groovy:groovy-all:2.0.5"
    compile "commons-codec:commons-codec:1.2"
    testCompile 'junit:junit:4.11'
    testCompile 'org.testng:testng:6.4'
    runtime 'com.googlecode:reflectasm:1.01'

    <% if (dependencies) { dependencies.each { %>
    compile "${it.shortNotation()}" <% } %>
    <% } %>
}

test {
    jvmArgs '-XX:MaxPermSize=512m', '-XX:+HeapDumpOnOutOfMemoryError'
}

<% if (groovyProject) { %>
apply plugin: 'groovy'
dependencies {
    compile 'org.codehaus:groovy:groovy-all:2.0.5'
}
<% } %>

<% if (scalaProject) { %>
apply plugin: 'scala'
dependencies {
    compile 'org.scala-lang:scala-library:2.9.2'
}
tasks.withType(ScalaCompile) {
    scalaCompileOptions.with {
        useAnt = false
        fork = true
        forkOptions.jvmArgs = ["-XX:MaxPermSize=512m"]
    }
}
<% } %>

task dependencyReport(type: DependencyReportTask) {
    outputFile = new File(buildDir, "dependencies.txt")
}
}
${original}

import java.lang.management.ManagementFactory
import java.math.RoundingMode

gradle.buildFinished {
    def heap = ManagementFactory.memoryMXBean.heapMemoryUsage
    def nonHeap = ManagementFactory.memoryMXBean.nonHeapMemoryUsage
    logger.lifecycle "BEFORE GC"
    logger.lifecycle "heap: \${format(heap.used)} (initial \${format(heap.init)}, commited \${format(heap.committed)}, max \${format(heap.max)}"
    logger.lifecycle "nonHeap: \${format(nonHeap.used)} (initial \${format(nonHeap.init)}, commited \${format(nonHeap.committed)}, max \${format(nonHeap.max)}"

    ManagementFactory.memoryMXBean.gc()
    heap = ManagementFactory.memoryMXBean.heapMemoryUsage
    nonHeap = ManagementFactory.memoryMXBean.nonHeapMemoryUsage
    logger.lifecycle "AFTER GC"
    logger.lifecycle "heap: \${format(heap.used)} (initial \${format(heap.init)}, commited \${format(heap.committed)}, max \${format(heap.max)}"
    logger.lifecycle "nonHeap: \${format(nonHeap.used)} (initial \${format(nonHeap.init)}, commited \${format(nonHeap.committed)}, max \${format(nonHeap.max)}"
    buildDir.mkdirs()
    new File(buildDir, "totalMemoryUsed.txt").text = heap.used
}

def format(def value) {
    value = value / (1024 * 1024)
    value = value.setScale(4, RoundingMode.DOWN)
    return "\${value}MB"
}
buildscript {
    dependencies {
        classpath files("../configPlugin")
    }
}

apply plugin: ConfigPlugin
project.buildDir = 'target'
${original}

class PlainAntCompile extends DefaultTask{
	File outputDirectoy
	File sourceDirectory
	FileCollection classpath;

	@TaskAction
	void compile(){
		outputDirectoy.mkdirs()
		project.ant {
			property(name:"build.sysclasspath", value:"last")
			path(id:'classpath') {
				pathelement(path:classpath.asPath)
			}
			path(id:'sourcepath') {
				pathelement(location:outputDirectoy.absolutePath)
			}
			presetdef(name: 'antCompileJava') {
				javac(  classpathref:'classpath',
						encoding:'UTF-8',
						destdir:outputDirectoy.absolutePath,
						excludes:'',
						fork:'true',
						memoryInitialSize:'1024m',
						memoryMaximumSize:'1536m',
						source:'1.6',
						srcdir:sourceDirectory.absolutePath,
						target:'1.6')
			}
		}
		project.ant.antCompileJava()
	}
}

task plainAntCompile(type:PlainAntCompile){
	sourceDirectory = file("src/main/java")
	outputDirectoy = file("\$buildDir/classes/main")
	classpath = sourceSets.main.compileClasspath
}
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'

repositories {
<% if (repository) { %>
    maven {
        url "${repository.getUri()}"
    }
<% } %>
    mavenCentral()
}

dependencies {
    compile 'commons-lang:commons-lang:2.5'
    compile "commons-httpclient:commons-httpclient:3.0"
    compile "commons-codec:commons-codec:1.2"
    compile "org.slf4j:jcl-over-slf4j:1.7.5"
    compile "org.codehaus.groovy:groovy:2.0.5"
    compile "commons-codec:commons-codec:1.2"
    testCompile 'junit:junit:4.11'
    testCompile 'org.testng:testng:6.4'
    runtime 'com.googlecode:reflectasm:1.01'

    <% if (dependencies) { dependencies.each { %>
    compile "${it.shortNotation()}" <% } %>
    <% } %>
}

test {
    jvmArgs '-XX:MaxPermSize=512m', '-XX:+HeapDumpOnOutOfMemoryError'
}

<% if (groovyProject) { %>
apply plugin: 'groovy'
dependencies {
    compile 'org.codehaus:groovy:groovy-all:2.0.5'
}
<% } %>

<% if (scalaProject) { %>
apply plugin: 'scala'
dependencies {
    compile 'org.scala-lang:scala-library:2.9.2'
}
tasks.withType(ScalaCompile) {
    scalaCompileOptions.with {
        useAnt = false
        fork = true
        forkOptions.jvmArgs = ["-XX:MaxPermSize=512m"]
    }
}
<% } %>

task dependencyReport(type: DependencyReportTask) {
    outputs.upToDateWhen { false }
    outputFile = new File(buildDir, "dependencies.txt")
}
${original}

test {
    useTestNG()
    maxParallelForks = 2
    testReport = true
}
${original}

test {
    useTestNG()
    maxParallelForks = 2
    testReport = true
}
subprojects {
    apply plugin: "groovy"

    dependencies {
        compile localGroovy()
    }

    compileJava.options.fork = true

    // force creation of multiple daemons for Java compilation by alternating between two distinct sets of JVM args
    def count = (project.name - "project") as int
    compileJava.options.forkOptions.jvmArgs = count % 2 ? ["-dsa"] : ["-esa"]
}

apply plugin: "groovy"

repositories {
    mavenCentral()
}

task compileWithOptimization(type: GroovyCompile) {
    source = sourceSets.main.groovy
    classpath = configurations.compile
    destinationDir = file("$sourceSets.main.output.classesDir/optimized")
    groovyOptions.optimizationOptions.all = true
}

task compileWithoutOptimization(type: GroovyCompile) {
    source = sourceSets.main.groovy
    classpath = configurations.compile
    destinationDir = file("$sourceSets.main.output.classesDir/unoptimized")
    groovyOptions.optimizationOptions.all = false
}

task sanityCheck(dependsOn: [compileWithOptimization, compileWithoutOptimization]) << {
    assert fileTree(compileWithOptimization.destinationDir).singleFile.size() != fileTree(compileWithoutOptimization.destinationDir).singleFile.size()
}apply plugin: "groovy"

repositories {
    mavenCentral()
}

task compileWithOptimization(type: GroovyCompile) {
    source = sourceSets.main.groovy
    classpath = configurations.compile
    destinationDir = file("$sourceSets.main.output.classesDir/optimized")
    groovyOptions.optimizationOptions["int"] = true
}

task compileWithoutOptimization(type: GroovyCompile) {
    source = sourceSets.main.groovy
    classpath = configurations.compile
    destinationDir = file("$sourceSets.main.output.classesDir/unoptimized")
    groovyOptions.optimizationOptions["int"] = false
}

task sanityCheck(dependsOn: [compileWithOptimization, compileWithoutOptimization]) << {
    assert fileTree(compileWithOptimization.destinationDir).singleFile.size() != fileTree(compileWithoutOptimization.destinationDir).singleFile.size()
}apply plugin: "groovy"

repositories {
    mavenCentral()
}

dependencies {
    testCompile "junit:junit:4.10"
}

sourceSets.test.groovy.filter.includes = ["**/*.spec"]

compileTestGroovy {
    groovyOptions.fileExtensions = ["spec"]
}apply plugin: "groovy"

repositories {
    mavenCentral()
}

dependencies {
    testCompile "junit:junit:4.11"
}
apply plugin: "groovy"

repositories {
    mavenCentral()
}

compileGroovy.groovyOptions.listFiles = true
apply plugin: "groovy"

repositories {
    mavenCentral()
}
apply plugin: "groovy"

repositories {
    mavenCentral()
}
apply plugin: "groovy"

repositories {
    mavenCentral()
}

dependencies {
    compile "com.google.guava:guava:11.0.2"
}apply plugin: "groovy"

repositories {
    mavenCentral()
}

compileGroovy {
    options.fork = true
    options.forkOptions.executable = jdkHome
}apply plugin: "groovy"

repositories {
    mavenCentral()
}

dependencies {
    compile localGroovy()
    testCompile "junit:junit:4.10"
}apply plugin: "groovy"

repositories {
    mavenCentral()
}

dependencies {
    testCompile "junit:junit:4.10"
}apply plugin: "groovy"

repositories {
    mavenCentral()
}

dependencies {
    testCompile "junit:junit:4.10"
}apply plugin: "groovy"

repositories {
    mavenCentral()
}

dependencies {
    testCompile "junit:junit:4.10"
}
apply plugin: 'groovy'

dependencies {
    compile localGroovy()
}
apply plugin: 'groovy'

dependencies {
    compile localGroovy()
}

apply plugin: "groovy"

repositories {
    mavenCentral()
}

task compileWithOptimization(type: GroovyCompile) {
    source = sourceSets.main.groovy
    classpath = configurations.compile
    destinationDir = file("$sourceSets.main.output.classesDir/optimized")
    groovyOptions.optimizationOptions.indy = true
}

task compileWithoutOptimization(type: GroovyCompile) {
    source = sourceSets.main.groovy
    classpath = configurations.compile
    destinationDir = file("$sourceSets.main.output.classesDir/unoptimized")
    groovyOptions.optimizationOptions.indy = false
}

task sanityCheck(dependsOn: [compileWithOptimization, compileWithoutOptimization]) << {
    assert file("$compileWithOptimization.destinationDir/MethodInvocations.class").size() != file("$compileWithoutOptimization.destinationDir/MethodInvocations.class").size()
}apply plugin: 'java'subprojects {
    apply plugin: 'java'
}

project(':app') {
    dependencies {
        compile project(':lib')
    }
}apply plugin: 'java'

sourceCompatibility = 1.5
compileJava.options.debug = true
import org.gradle.internal.jvm.Jvm

apply plugin: "java"

sourceSets {
    taglet
}

dependencies {
    tagletCompile files(Jvm.current().toolsJar)
}

javadoc {
    dependsOn tagletClasses
    options {
        locale = 'de_DE'
        breakIterator = true
        taglets 'LocaleAwareTaglet'
        tagletPath sourceSets.taglet.output.classesDir
    }
}import org.gradle.internal.jvm.Jvm

apply plugin: "java"

sourceSets {
    taglet
}

dependencies {
    tagletCompile files(Jvm.current().toolsJar)
}

javadoc {
    dependsOn tagletClasses

    options {
        tags 'author'
        tags 'deprecated'
        tags 'customtag:t:"Custom Tag:"'
        taglets 'CustomTaglet'
        tagletPath sourceSets.taglet.output.classesDir
    }
}apply plugin: 'java'

repositories {
    mavenCentral()
}

dependencies {
    testCompile 'junit:junit:4.11'
    testCompile 'org.testng:testng:6.3.1'
}

test {
    include '**/*Test.*'
}
apply plugin: 'java'

repositories {
    mavenCentral()
}

dependencies {
    testCompile 'junit:junit:4.11'
}
apply plugin: "java"

repositories {
    mavenCentral()
}

dependencies {
    testCompile "junit:junit:4.7"
}

test {
    systemProperties 'java.security.manager': 'org.gradle.MySecurityManager'
}
apply plugin: "java"

repositories {
    mavenCentral()
}

dependencies {
    testCompile "junit:junit:4.7"
}

test {
    systemProperties 'java.system.class.loader':'org.gradle.MySystemClassLoader'
}apply plugin: "java"

repositories {
    mavenCentral()
}

dependencies {
    compile "junit:junit:4.7"
}

jar {
    manifest {
        attributes 'Premain-Class': 'org.gradle.MyAgent'
    }
}

test {
    dependsOn jar
    systemProperties 'java.system.class.loader':'org.gradle.MySystemClassLoader'
    jvmArgs "-javaagent:${jar.archivePath}"
}apply plugin: "java"

repositories {
    mavenCentral()
}

configurations {
    jmockit
    testCompile.extendsFrom jmockit
}

dependencies {
    jmockit "com.googlecode.jmockit:jmockit:0.999.13"
    testCompile "junit:junit:4.7"
}

test {
    jvmArgs "-javaagent:${configurations.jmockit.singleFile.absolutePath}"
}/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'

repositories {
    mavenCentral()
}

dependencies {
    testCompile "junit:junit:4.11"
    testCompile "info.cukes:cucumber-java:1.1.2"
    testCompile "info.cukes:cucumber-junit:1.1.2"
}

test {
    testLogging.showStandardStreams = true
    testLogging.events 'started', 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
    reports.junitXml.enabled = true
    reports.html.enabled = true
}/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'
repositories { mavenCentral() }
/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


apply plugin: "java"

repositories {
    mavenCentral()
}

test {
    useJUnit {
        excludeCategories 'org.gradle.CategoryA'
    }
}
/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: "java"

repositories {
    mavenCentral()
}

test {
    useJUnit {
        excludeCategories 'org.gradle.CategoryA'
    }
}
/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: "java"

repositories {
    mavenCentral()
}

test {
    useJUnit {
        includeCategories 'org.gradle.CategoryA'
        excludeCategories 'org.gradle.CategoryC'
    }
}
/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



apply plugin: "java"

repositories {
    mavenCentral()
}

dependencies {
    testCompile 'junit:junit:4.11'
}
apply plugin: "java"

repositories {
    mavenCentral()
}

dependencies {
    testCompile "junit:junit:4.4"
}

test {
    useJUnit {
        includeCategories 'org.gradle.CategoryA'
        excludeCategories 'org.gradle.CategoryC'
    }
}
/*
 * Copyright 2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'

repositories {
    mavenCentral()
}
/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



apply plugin: 'java'

repositories {
    mavenCentral()
}apply plugin: 'groovy'
repositories { mavenCentral() }
dependencies {
    testCompile localGroovy()
    testCompile 'junit:junit:4.11'
}
test {
    testLogging {
        showStandardStreams = true
    }
}
apply plugin: 'groovy'
repositories { mavenCentral() }
dependencies {
    testCompile localGroovy()
    testCompile 'junit:junit:4.11'
}
test {
    testLogging {
        showStandardStreams = true
    }
}
apply plugin: 'java'

test {
    include '**/*Test1.*'
}

task test2(type: Test) {
    include '**/*Test2.*'
}

check {
    dependsOn test2
}

repositories {
    mavenCentral()
}

dependencies {
    testCompile 'junit:junit:4.11'
}apply plugin: 'java'

repositories {
    mavenCentral()
}

dependencies {
    testCompile 'junit:junit:4.11'
}/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'

repositories {
    mavenCentral()
}

dependencies {
    testCompile "junit:junit:3.8"
}apply plugin: 'java'

repositories {
    mavenCentral()
}
dependencies {
    compile 'junit:junit:4.11'
}
apply plugin: 'java'
repositories { mavenCentral() }
dependencies { testCompile 'junit:junit:4.11', 'ant:ant:1.6.1', 'ant:ant-launcher:1.6.1' }
test {
    systemProperties.testSysProperty = 'value'
    systemProperties.projectDir = projectDir
    systemProperties.expectedClassPath = sourceSets.test.runtimeClasspath.asPath
    environment.TEST_ENV_VAR = 'value'
}
apply plugin: 'java'
repositories {
    mavenCentral()
}
dependencies {
    testCompile 'junit:junit:4.11'
}
apply plugin: 'java'
repositories { mavenCentral() }
dependencies { testCompile 'junit:junit:4.11'}
test {
    include '**/ASuite.class'
    exclude '**/*Test.class'
}
/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'
repositories { mavenCentral() }
dependencies {
    testCompile "junit:junit:3.8"
}

test {
    include '**/*Suite.class'
    exclude '**/*Test.class'
}
apply plugin: "java"

repositories {
    mavenCentral()
}

dependencies {
    testCompile "junit:junit:4.11"
}

test {
    useJUnit {
        includeCategories 'org.gradle.CategoryA'
        excludeCategories 'org.gradle.CategoryC'
    }
}
apply plugin: 'java'
repositories { mavenCentral() }
dependencies { testCompile 'junit:junit:4.11'}
test {
    include '**/*Suite.class'
    exclude '**/*Test.class'
}
apply plugin: "groovy"

repositories {
    mavenCentral()
}

dependencies {
    compile "org.codehaus.groovy:groovy-all:2.0.5"
    testCompile "junit:junit:4.11"
}

test {
    testLogging {
        quiet {
            events "skipped", "failed"
            minGranularity 2
            maxGranularity -1
            displayGranularity 3
            exceptionFormat "full"
            stackTraceFilters "truncate", "groovy"
        }
    }
}
/*
 * Copyright 2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: "groovy"

repositories {
    mavenCentral()
}

dependencies {
    compile "org.codehaus.groovy:groovy-all:2.0.5"
    testCompile "junit:junit:4.11"
}

test {
    testLogging {
        quiet {
            events "standardOut", "standardError"
        }
    }
}
apply plugin: 'java'
repositories { mavenCentral() }
dependencies { testCompile 'org.testng:testng:6.3.1' }
def listener = new TestListenerImpl()

test {
    useTestNG()
    addTestListener(listener)
    ignoreFailures = true
}

class TestListenerImpl implements TestListener {
    void beforeSuite(TestDescriptor suite) { println "START [$suite] [$suite.name]" }

    void afterSuite(TestDescriptor suite, TestResult result) { println "FINISH [$suite] [$suite.name]" }

    void beforeTest(TestDescriptor test) { println "START [$test] [$test.name]" }

    void afterTest(TestDescriptor test, TestResult result) { println "FINISH [$test] [$test.name] [$result.exception]" }
}
apply plugin: 'java'
repositories { mavenCentral() }
dependencies { testCompile 'org.testng:testng:6.3.1' }
test {
    useTestNG()
    systemProperties.testSysProperty = 'value'
    systemProperties.testDir = projectDir
    environment.TEST_ENV_VAR = 'value'
}
apply plugin: 'groovy'

sourceCompatibility=1.5

repositories {
    mavenCentral()
}

dependencies {
	compile "org.codehaus.groovy:groovy-all:2.0.5"
    testCompile 'org.testng:testng:6.3.1'
}

test {
   useTestNG() 
}
apply plugin: 'groovy'

sourceCompatibility=1.5

repositories {
    mavenCentral()
}

dependencies {
	compile "org.codehaus.groovy:groovy-all:2.0.5"
    testCompile 'org.testng:testng:6.3.1'
}

test {
   useTestNG() 
}
apply plugin: 'java'

sourceCompatibility=1.4

repositories {
    mavenCentral()
}

dependencies {
    testCompile 'org.testng:testng:5.11:jdk14'
}

test {
    useTestNG()
    scanForTestClasses = false
}
apply plugin: 'java'

sourceCompatibility = 1.5

repositories {
    mavenCentral()
}

dependencies {
    testCompile "org.testng:testng:$testNGVersion"
}

test {
    useTestNG() {
        useDefaultListeners = true
    }
}
/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



apply plugin: "java"

repositories {
    mavenCentral()
}

dependencies {
    compile "org.testng:testng:6.3.1"
}

test {
    useTestNG()
}apply plugin: "java"

repositories {
    mavenCentral()
}

ext {
    ngIncluded = "database"
    ngExcluded = "slow"
}
dependencies {
    testCompile "org.testng:testng:6.3.1"
}

test {
    useTestNG {
        includeGroups ngIncluded
        excludeGroups ngExcluded
    }
}
apply plugin: 'scala'

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.scala-lang:scala-library:2.9.2'
}apply plugin: 'scala'

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.scala-lang:scala-library:2.9.2'
}
subprojects {
    apply plugin: "scala"

    repositories {
        mavenCentral()
    }

    dependencies {
        compile "org.scala-lang:scala-library:$scalaVersion"
    }

    tasks.withType(ScalaCompile) {
        scalaCompileOptions.with {
            useAnt = false
            fork = true
        }
    }
}

project(":prj2") {
    dependencies {
        compile project(":prj1")
    }
}

apply plugin: "scala"

repositories {
    mavenCentral()
}

dependencies {
    compile "org.scala-lang:scala-library:$scalaVersion"
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.with {
        useAnt = false
        fork = true
    }
}

apply plugin: "scala"

repositories {
    mavenCentral()
}

dependencies {
    compile "org.scala-lang:scala-library:$scalaVersion"
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.with {
        useAnt = false
        fork = true
    }
}

apply plugin:  "sonar"

subprojects {
    apply plugin: "java"

    repositories {
        mavenCentral()
    }

    dependencies {
        testCompile "junit:junit:4.11"
    }
}

sonar {
    server {
        url serverUrl
    }
    database {
        url databaseUrl
        driverClassName = "org.h2.Driver"
    }
}

description = "Sonar Test Customized Project"

sourceSets {
    main {
        java {
            srcDirs = ["src"]
        }
    }
    test {
        java {
            srcDirs = ["test"]
        }
    }
}
if(!org.gradle.internal.os.OperatingSystem.current().isWindows()){
    apply plugin:'jacoco'
}
description = "Sonar Test Java Project"

description = "Sonar Test Nested Project"
description = "Sonar Test Skipped Project"

sonar.project.skip = trueapply plugin: "sonar-runner"

description = "Sonar Test Build"

allprojects {
    version = "1.42"
    group = "org.gradle.test.sonar"
}

subprojects {
    apply plugin: "java"

    repositories {
        mavenCentral()
    }

    dependencies {
        testCompile "junit:junit:4.11"
    }
}description = "Sonar Test Customized Project"

sourceSets {
    main {
        java {
            srcDirs = ["src"]
        }
    }
    test {
        java {
            srcDirs = ["test"]
        }
    }
}
apply plugin: 'groovy'

description = "Sonar Test Groovy Project"

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.0.5'
}

sonarRunner {
    sonarProperties {
        // Sonar Groovy plugin can't currently be used because it fails as soon as sonar.project.key contains a colon
        // property "sonar.language", "grvy"
    }
}
if(!org.gradle.internal.os.OperatingSystem.current().isWindows()){
    apply plugin:'jacoco'
}
description = "Sonar Test Java Project"

description = "Sonar Test Nested Project"
description = "Sonar Test Skipped Project"

sonarRunner.skipProject = true