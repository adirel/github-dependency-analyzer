<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
  
    <parent>
        <groupId>org.ninjaframework</groupId>
        <artifactId>ninja-appengine</artifactId>
        <version>1.9.3-SNAPSHOT</version>
    </parent>

    <artifactId>ninja-appengine-blog-archetype</artifactId>
    <packaging>maven-archetype</packaging>

    <build>
      
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.6</version>
                <configuration>
                    <!-- Redefining delimiters. So that we can filter the -->
                    <!-- archetype resources. -->
                    <!-- The regular delimiter is already used by the archetype -->
                    <!-- generation process.  -->
                    <!-- By redefining the delimimter we can access  -->
                    <!-- variables like @jetty.version@ or @project.version@ -->
                    <useDefaultDelimiters>false</useDefaultDelimiters>
                    <delimiters>
                        <delimiter>@</delimiter>
                    </delimiters>
                </configuration>
            </plugin>
        </plugins>
        
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/*</include>
                </includes>
            </resource> 
        </resources>
        
        <extensions>
            <extension>
                <groupId>org.apache.maven.archetype</groupId>
                <artifactId>archetype-packaging</artifactId>
                <version>2.2</version>
            </extension>
        </extensions>

        <pluginManagement>
            <plugins>
                <plugin>
                    <artifactId>maven-archetype-plugin</artifactId>
                    <version>2.2</version>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <description>Sonatype helps open source projects to set up Maven repositories on https://oss.sonatype.org/</description>

    <url>http://www.ninjaframework.org/ninja-appengine-integration-test-blog</url>

    <scm>
        <connection>scm:git://github.com/reyez/ninja-appengine.git/ninja-appengine-integration-test-blog</connection>
        <developerConnection>scm:git:git@github.com:reyez/ninja-appengine.git/ninja-appengine-integration-test-blog</developerConnection>
        <url>https://github.com/reyez/ninja-appengine/ninja-appengine-integration-test-blog</url>
      <tag>HEAD</tag>
  </scm>

    <distributionManagement>
        <repository>
            <id>sonatype-nexus-staging</id>
            <name>Nexus Release Repository</name>
            <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
        </repository>
        <snapshotRepository>
            <id>sonatype-nexus-snapshots</id>
            <name>Sonatype Nexus Snapshots</name>
            <url>https://oss.sonatype.org/content/repositories/snapshots/</url>
        </snapshotRepository>
    </distributionManagement>
</project>
<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright (C) 2012 the original author or authors. Licensed under the 
    Apache License, Version 2.0 (the "License"); you may not use this file except 
    in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 
    Unless required by applicable law or agreed to in writing, software distributed 
    under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES 
    OR CONDITIONS OF ANY KIND, either express or implied. See the License for 
    the specific language governing permissions and limitations under the License. --><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <artifactId>${artifactId}</artifactId>
    <packaging>war</packaging>
    <groupId>${groupId}</groupId>
    <version>${version}</version>
    

    <properties>
        <ninja.version>@ninja.version@</ninja.version>
        <ninja-appengine.version>@project.version@</ninja-appengine.version>
        <appengine.version>@appengine.version@</appengine.version>
        <appengine.generated.dir>target/${project.artifactId}-${project.version}/WEB-INF/appengine-generated</appengine.generated.dir>
    </properties>

    <build>
        <!-- Default output dir, so that appengine devserver picks up changes: -->
        <!-- To trigger automatic restarts you have to touch appengine-web.xml -->
        <!-- More info here: http://stackoverflow.com/questions/800701/how-do-i-restart-the-google-app-engine-java-server-in-eclipse -->
        <outputDirectory>target/${project.artifactId}-${project.version}/WEB-INF/classes</outputDirectory>

        <plugins>
            <!-- We use the compiler together with Google's error-prone project. -->
            <!-- Error-prone is a bit like finbugs, but at compile time and -->
            <!-- helps to prevent bugs. -->
            <!-- More at: https://code.google.com/p/error-prone/ -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>1.7</source>
                    <target>1.7</target>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>1.0</version>
                <executions>
                    <execution>
                        <id>enforce-banned-dependencies</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <bannedDependencies>
                                    <excludes>
                                        <exclude>commons-logging</exclude>
                                    </excludes>
                                </bannedDependencies>
                            </rules>
                            <fail>true</fail>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <!-- Used to filter the dev mode into appengine-web.xml -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.3</version>
                <configuration>
                    <webResources>
                        <webResource>
                            <directory>${basedir}/src/main/webapp/WEB-INF</directory>
                            <includes>
                                <include>**/*</include>
                            </includes>
                            <excludes>
                                <exclude>**/*.java</exclude>
                            </excludes>
                            <targetPath>WEB-INF</targetPath>
                            <filtering>true</filtering>
                        </webResource>
                    </webResources>
                </configuration>

            </plugin>

            <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>9.0.5.v20130815</version>
                <configuration>
                    <contextPath>/</contextPath>
                    <stopKey>stop</stopKey>
                    <stopPort>8889</stopPort>
                    <scanIntervalSeconds>1</scanIntervalSeconds>
                    <reload>automatic</reload>
                    <scanTargetPatterns>
                        <scanTargetPattern>
                            <directory>target/classes</directory>
                            <includes>
                                <include>**/*</include>
                            </includes>
                            <excludes>
                                <exclude>**/*.ftl.html</exclude>
                                <exclude>assets/**</exclude>
                            </excludes>
                        </scanTargetPattern>
                    </scanTargetPatterns>
                </configuration>
            </plugin>
            
            <plugin>
                <groupId>org.ninjaframework</groupId>
                <artifactId>ninja-maven-plugin</artifactId>
                <version>${ninja.version}</version>
            </plugin>

            <plugin>
                <!-- It is not really recommended to use mvn appengine:devserver, 
                    instead use jetty:run -->
                <groupId>com.google.appengine</groupId>
                <artifactId>appengine-maven-plugin</artifactId>
                <version>${appengine.version}</version>
                <configuration>
                    <appId>YOUR_APP_ID</appId>
                    <version>YOUR_APP_VERSION</version>
                    <jvmFlags>
                        <!-- see also: http://blog.cwill-dev.com/2011/11/22/grails-java-lang-outofmemoryerror-permgen-space/ -->
                        <jvmFlag>-Xms512m</jvmFlag>
                        <jvmFlag>-Xmx1024m</jvmFlag>
                        <jvmFlag>-XX:PermSize=256m</jvmFlag>
                        <jvmFlag>-XX:MaxPermSize=512m</jvmFlag>
                        <jvmFlag>-XX:+UseParNewGC</jvmFlag>
                        <jvmFlag>-XX:MaxNewSize=256m</jvmFlag>
                        <jvmFlag>-XX:NewSize=256m</jvmFlag>
                        <jvmFlag>-XX:SurvivorRatio=128</jvmFlag>
                        <jvmFlag>-XX:+UseTLAB</jvmFlag>
                        <jvmFlag>-XX:+UseConcMarkSweepGC</jvmFlag>
                        <jvmFlag>-XX:+CMSClassUnloadingEnabled</jvmFlag>
                        <jvmFlag>-XX:+CMSPermGenSweepingEnabled</jvmFlag>
                    </jvmFlags>
                </configuration>
            </plugin>

            <!-- We recreate the VM used for testing each time -->
            <!-- The in memory simulation of the GAE datastore does not like 
                parallel execution -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.15</version>
                <configuration>
                    <reuseForks>false</reuseForks>
                    <forkCount>1</forkCount>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>

        </plugins>



        <resources>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*</include>
                </includes>
                <excludes>
                    <exclude>**/*.java</exclude>
                </excludes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*</include>
                </includes>
            </resource>
        </resources>

    </build>

    <dependencies>
    
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>tinymce-jquery</artifactId>
            <version>3.4.9</version>
        </dependency>

        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>bootstrap</artifactId>
            <version>3.0.0</version>
        </dependency>

        <dependency>
            <groupId>org.ninjaframework</groupId>
            <artifactId>ninja-appengine-module</artifactId>
            <version>${ninja-appengine.version}</version>
        </dependency>
        
        <dependency>
            <groupId>org.ninjaframework</groupId>
            <artifactId>ninja-test-utilities</artifactId>
            <version>${ninja.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.0.1</version>
            <scope>provided</scope>
        </dependency>


        <dependency>
            <groupId>com.google.appengine</groupId>
            <artifactId>appengine-api-stubs</artifactId>
            <version>${appengine.version}</version>
            <scope>test</scope>

        </dependency>

        <dependency>
            <groupId>com.google.appengine</groupId>
            <artifactId>appengine-tools-sdk</artifactId>
            <version>${appengine.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>com.google.appengine</groupId>
            <artifactId>appengine-api-labs</artifactId>
            <version>${appengine.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>com.google.appengine</groupId>
            <artifactId>appengine-testing</artifactId>
            <version>${appengine.version}</version>
            <scope>test</scope>
        </dependency>

    </dependencies>



    <profiles>
        <!-- Two reasons why we have two profiles (one default profile and 
            a deployment profile) -->
        <!-- Reason 1) We have to filter appengine-web.xml to set the correct 
            ninja.mode -->
        <!-- Reason 2) We need the stubs to access the datastore and so on 
            while developing and in the tests. -->
        <!-- It is especially important that these dependencies do not get 
            deployed in reality. -->
        <profile>
            <!-- To run Ninja via the devserver. -->
            <!-- "mvn appengine:devserver -Pdevserver"-->
            <id>devserver</id><!-- that's the ninja mode to filter in 
                appengine-web.xml -->
            <properties>
                <!-- that's the ninja mode to filter in appengine-web.xml -->
                <ninja.mode>dev</ninja.mode>
            </properties>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>

            <!-- Dependencies to make dev and test mode work nicely (not 
                needed in production). -->
            <dependencies>
                <dependency>
                    <groupId>com.google.appengine</groupId>
                    <artifactId>appengine-api-stubs</artifactId>
                    <version>${appengine.version}</version>
                    <scope>provided</scope>
                </dependency>

                <dependency>
                    <groupId>com.google.appengine</groupId>
                    <artifactId>appengine-tools-sdk</artifactId>
                    <version>${appengine.version}</version>
                    <scope>provided</scope>
                </dependency>

                <dependency>
                    <groupId>com.google.appengine</groupId>
                    <artifactId>appengine-api-labs</artifactId>
                    <version>${appengine.version}</version>
                    <scope>provided</scope>
                </dependency>

                <dependency>
                    <groupId>com.google.appengine</groupId>
                    <artifactId>appengine-testing</artifactId>
                    <version>${appengine.version}</version>
                    <scope>provided</scope>
                </dependency>
            </dependencies>

        </profile>

        <profile>
            <!-- To run Ninja via jetty. Usually via -->
            <!-- "mvn jetty:run -Pjettyrun" -->
            <id>jetty-dev</id><!-- that's the ninja mode to filter in appengine-web.xml -->
            <properties>
                <!-- that's the ninja mode to filter in appengine-web.xml -->
                <ninja.mode>dev</ninja.mode>
            </properties>

            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>

            <!-- Dependencies to make dev and test mode work nicely (not 
                needed in production). -->
            <dependencies>
                <dependency>
                    <groupId>com.google.appengine</groupId>
                    <artifactId>appengine-api-stubs</artifactId>
                    <version>${appengine.version}</version>
                </dependency>

                <dependency>
                    <groupId>com.google.appengine</groupId>
                    <artifactId>appengine-tools-sdk</artifactId>
                    <version>${appengine.version}</version>
                </dependency>

                <dependency>
                    <groupId>com.google.appengine</groupId>
                    <artifactId>appengine-api-labs</artifactId>
                    <version>${appengine.version}</version>
                </dependency>

                <dependency>
                    <groupId>com.google.appengine</groupId>
                    <artifactId>appengine-testing</artifactId>
                    <version>${appengine.version}</version>
                </dependency>
            </dependencies>

        </profile>

        <profile>
            <!-- To deploy a new version. Usually --> 
            <!-- via mvn "appengine:update -Pupdate" -->
            <id>update</id>
            <properties>
                <!-- That's the Ninja mode to filter in appengine-web.xml -->
                <ninja.mode>prod</ninja.mode>
            </properties>
            <dependencies>


                <!-- Dependencies to make test mode work nicely (not needed 
                    in production). -->
                <dependency>
                    <groupId>com.google.appengine</groupId>
                    <artifactId>appengine-api-stubs</artifactId>
                    <version>${appengine.version}</version>
                    <scope>test</scope>
                </dependency>

                <dependency>
                    <groupId>com.google.appengine</groupId>
                    <artifactId>appengine-tools-sdk</artifactId>
                    <version>${appengine.version}</version>
                    <scope>test</scope>
                </dependency>

                <dependency>
                    <groupId>com.google.appengine</groupId>
                    <artifactId>appengine-api-labs</artifactId>
                    <version>${appengine.version}</version>
                    <scope>test</scope>
                </dependency>

                <dependency>
                    <groupId>com.google.appengine</groupId>
                    <artifactId>appengine-testing</artifactId>
                    <version>${appengine.version}</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
        </profile>
    </profiles>


</project>
<!-- Copyright (C) 2012 the original author or authors. Licensed under the 
    Apache License, Version 2.0 (the "License"); you may not use this file except 
    in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 
    Unless required by applicable law or agreed to in writing, software distributed 
    under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES 
    OR CONDITIONS OF ANY KIND, either express or implied. See the License for 
    the specific language governing permissions and limitations under the License. -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <artifactId>ninja-appengine-integration-test-blog</artifactId>
    <packaging>war</packaging>

    <parent>
        <groupId>org.ninjaframework</groupId>
        <artifactId>ninja-appengine</artifactId>
        <version>1.9.3-SNAPSHOT</version>
    </parent>

    <properties>
        <appengine.generated.dir>target/${project.artifactId}-${project.version}/WEB-INF/appengine-generated</appengine.generated.dir>
    </properties>

    <build>
        <!-- Default output dir, so that appengine devserver picks up changes: -->
        <!-- To trigger automatic restarts you have to touch appengine-web.xml -->
        <!-- More info here: http://stackoverflow.com/questions/800701/how-do-i-restart-the-google-app-engine-java-server-in-eclipse -->
        <outputDirectory>target/${project.artifactId}-${project.version}/WEB-INF/classes</outputDirectory>

        <plugins>
            <!-- We use the compiler together with Google's error-prone project. -->
            <!-- Error-prone is a bit like finbugs, but at compile time and -->
            <!-- helps to prevent bugs. -->
            <!-- More at: https://code.google.com/p/error-prone/ -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>1.7</source>
                    <target>1.7</target>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>1.0</version>
                <executions>
                    <execution>
                        <id>enforce-banned-dependencies</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <bannedDependencies>
                                    <excludes>
                                        <exclude>commons-logging</exclude>
                                    </excludes>
                                </bannedDependencies>
                            </rules>
                            <fail>true</fail>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <!-- Used to filter the dev mode into appengine-web.xml -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.3</version>
                <configuration>
                    <webResources>
                        <webResource>
                            <directory>${basedir}/src/main/webapp/WEB-INF</directory>
                            <includes>
                                <include>**/*</include>
                            </includes>
                            <excludes>
                                <exclude>**/*.java</exclude>
                            </excludes>
                            <targetPath>WEB-INF</targetPath>
                            <filtering>true</filtering>
                        </webResource>
                    </webResources>
                </configuration>

            </plugin>

            <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>9.0.5.v20130815</version>
                <configuration>
                    <contextPath>/</contextPath>
                    <stopKey>stop</stopKey>
                    <stopPort>8889</stopPort>
                    <scanIntervalSeconds>1</scanIntervalSeconds>
                    <reload>automatic</reload>
                    <scanTargetPatterns>
                        <scanTargetPattern>
                            <directory>target/classes</directory>
                            <includes>
                                <include>**/*</include>
                            </includes>
                            <excludes>
                                <exclude>**/*.ftl.html</exclude>
                                <exclude>assets/**</exclude>
                            </excludes>
                        </scanTargetPattern>
                    </scanTargetPatterns>
                </configuration>
            </plugin>

            <plugin>
                <!-- It is not really recommended to use mvn appengine:devserver, 
                    instead use jetty:run -->
                <groupId>com.google.appengine</groupId>
                <artifactId>appengine-maven-plugin</artifactId>
                <version>${appengine.version}</version>
                <configuration>
                    <appId>uhsuachfu7</appId>
                    <version>12</version>
                    <jvmFlags>
                        <!-- see also: http://blog.cwill-dev.com/2011/11/22/grails-java-lang-outofmemoryerror-permgen-space/ -->
                        <jvmFlag>-Xms512m</jvmFlag>
                        <jvmFlag>-Xmx1024m</jvmFlag>
                        <jvmFlag>-XX:PermSize=256m</jvmFlag>
                        <jvmFlag>-XX:MaxPermSize=512m</jvmFlag>
                        <jvmFlag>-XX:+UseParNewGC</jvmFlag>
                        <jvmFlag>-XX:MaxNewSize=256m</jvmFlag>
                        <jvmFlag>-XX:NewSize=256m</jvmFlag>
                        <jvmFlag>-XX:SurvivorRatio=128</jvmFlag>
                        <jvmFlag>-XX:+UseTLAB</jvmFlag>
                        <jvmFlag>-XX:+UseConcMarkSweepGC</jvmFlag>
                        <jvmFlag>-XX:+CMSClassUnloadingEnabled</jvmFlag>
                        <jvmFlag>-XX:+CMSPermGenSweepingEnabled</jvmFlag>
                    </jvmFlags>
                </configuration>
            </plugin>

            <!-- We recreate the VM used for testing each time -->
            <!-- The in memory simulation of the GAE datastore does not like 
                parallel execution -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.15</version>
                <configuration>
                    <reuseForks>false</reuseForks>
                    <forkCount>1</forkCount>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>

        </plugins>



        <resources>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*</include>
                </includes>
                <excludes>
                    <exclude>**/*.java</exclude>
                </excludes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*</include>
                </includes>
            </resource>
        </resources>

    </build>

    <dependencies>
    
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>tinymce-jquery</artifactId>
            <version>3.4.9</version>
        </dependency>

        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>bootstrap</artifactId>
            <version>3.0.0</version>
        </dependency>

        <dependency>
            <groupId>org.ninjaframework</groupId>
            <artifactId>ninja-appengine-module</artifactId>
            <version>1.9.3-SNAPSHOT</version>
        </dependency>
        
        <dependency>
            <groupId>org.ninjaframework</groupId>
            <artifactId>ninja-test-utilities</artifactId>
            <version>${ninja.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.0.1</version>
            <scope>provided</scope>
        </dependency>


        <dependency>
            <groupId>com.google.appengine</groupId>
            <artifactId>appengine-api-stubs</artifactId>
            <version>${appengine.version}</version>
            <scope>test</scope>

        </dependency>

        <dependency>
            <groupId>com.google.appengine</groupId>
            <artifactId>appengine-tools-sdk</artifactId>
            <version>${appengine.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>com.google.appengine</groupId>
            <artifactId>appengine-api-labs</artifactId>
            <version>${appengine.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>com.google.appengine</groupId>
            <artifactId>appengine-testing</artifactId>
            <version>${appengine.version}</version>
            <scope>test</scope>
        </dependency>

    </dependencies>



    <profiles>
        <!-- Two reasons why we have two profiles (one default profile and 
            a deployment profile) -->
        <!-- Reason 1) We have to filter appengine-web.xml to set the correct 
            ninja.mode -->
        <!-- Reason 2) We need the stubs to access the datastore and so on 
            while developing and in the tests. -->
        <!-- It is especially important that these dependencies do not get 
            deployed in reality. -->
        <profile>
            <!-- To run Ninja via the devserver. -->
            <!-- "mvn appengine:devserver -Pdevserver"-->
            <id>devserver</id><!-- that's the ninja mode to filter in 
                appengine-web.xml -->
            <properties>
                <!-- that's the ninja mode to filter in appengine-web.xml -->
                <ninja.mode>dev</ninja.mode>
            </properties>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>

            <!-- Dependencies to make dev and test mode work nicely (not 
                needed in production). -->
            <dependencies>
                <dependency>
                    <groupId>com.google.appengine</groupId>
                    <artifactId>appengine-api-stubs</artifactId>
                    <version>${appengine.version}</version>
                    <scope>provided</scope>
                </dependency>

                <dependency>
                    <groupId>com.google.appengine</groupId>
                    <artifactId>appengine-tools-sdk</artifactId>
                    <version>${appengine.version}</version>
                    <scope>provided</scope>
                </dependency>

                <dependency>
                    <groupId>com.google.appengine</groupId>
                    <artifactId>appengine-api-labs</artifactId>
                    <version>${appengine.version}</version>
                    <scope>provided</scope>
                </dependency>

                <dependency>
                    <groupId>com.google.appengine</groupId>
                    <artifactId>appengine-testing</artifactId>
                    <version>${appengine.version}</version>
                    <scope>provided</scope>
                </dependency>
            </dependencies>

        </profile>

        <profile>
            <!-- To run Ninja via jetty. Usually via -->
            <!-- "mvn jetty:run -Pjettyrun" -->
            <id>jetty-dev</id><!-- that's the ninja mode to filter in appengine-web.xml -->
            <properties>
                <!-- that's the ninja mode to filter in appengine-web.xml -->
                <ninja.mode>dev</ninja.mode>
            </properties>

            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>

            <!-- Dependencies to make dev and test mode work nicely (not 
                needed in production). -->
            <dependencies>
                <dependency>
                    <groupId>com.google.appengine</groupId>
                    <artifactId>appengine-api-stubs</artifactId>
                    <version>${appengine.version}</version>
                </dependency>

                <dependency>
                    <groupId>com.google.appengine</groupId>
                    <artifactId>appengine-tools-sdk</artifactId>
                    <version>${appengine.version}</version>
                </dependency>

                <dependency>
                    <groupId>com.google.appengine</groupId>
                    <artifactId>appengine-api-labs</artifactId>
                    <version>${appengine.version}</version>
                </dependency>

                <dependency>
                    <groupId>com.google.appengine</groupId>
                    <artifactId>appengine-testing</artifactId>
                    <version>${appengine.version}</version>
                </dependency>
            </dependencies>

        </profile>

        <profile>
            <!-- to deploy a new version. Usually --> 
            <!-- via mvn "appengine:update -Pupdate" -->
            <id>update</id>
            <properties>
                <!-- That's the Ninja mode to filter in appengine-web.xml -->
                <ninja.mode>prod</ninja.mode>
            </properties>
            <dependencies>


                <!-- Dependencies to make test mode work nicely (not needed 
                    in production). -->
                <dependency>
                    <groupId>com.google.appengine</groupId>
                    <artifactId>appengine-api-stubs</artifactId>
                    <version>${appengine.version}</version>
                    <scope>test</scope>
                </dependency>

                <dependency>
                    <groupId>com.google.appengine</groupId>
                    <artifactId>appengine-tools-sdk</artifactId>
                    <version>${appengine.version}</version>
                    <scope>test</scope>
                </dependency>

                <dependency>
                    <groupId>com.google.appengine</groupId>
                    <artifactId>appengine-api-labs</artifactId>
                    <version>${appengine.version}</version>
                    <scope>test</scope>
                </dependency>

                <dependency>
                    <groupId>com.google.appengine</groupId>
                    <artifactId>appengine-testing</artifactId>
                    <version>${appengine.version}</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
        </profile>
    </profiles>


</project>
<!-- Copyright (C) 2012 the original author or authors. Licensed under the 
    Apache License, Version 2.0 (the "License"); you may not use this file except 
    in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 
    Unless required by applicable law or agreed to in writing, software distributed 
    under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES 
    OR CONDITIONS OF ANY KIND, either express or implied. See the License for 
    the specific language governing permissions and limitations under the License. -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <artifactId>ninja-appengine-module</artifactId>
    <packaging>jar</packaging>

    <parent>
        <groupId>org.ninjaframework</groupId>
        <artifactId>ninja-appengine</artifactId>
        <version>1.9.3-SNAPSHOT</version>
    </parent>

    <dependencies>
    
        <!-- Add Slf4j to java commons logging bridge for nice logging on GAE -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-jdk14</artifactId>
            <version>1.7.7</version>
        </dependency>

        <!-- Exclude logback classic so that we only have one slf4j logging -->
        <!-- implementation on the classpath. -->
        <dependency>
            <groupId>org.ninjaframework</groupId>
            <artifactId>ninja-servlet</artifactId>
            <version>${ninja.version}</version>
             <exclusions>
                <exclusion>
                    <groupId>ch.qos.logback</groupId>
                    <artifactId>logback-classic</artifactId>
                </exclusion> 
            </exclusions>
        </dependency>


        <dependency>
            <groupId>javax.persistence</groupId>
            <artifactId>persistence-api</artifactId>
            <version>1.0</version>
        </dependency>

        <dependency>
            <groupId>com.googlecode.objectify</groupId>
            <artifactId>objectify</artifactId>
            <version>4.1.3</version>
        </dependency>
        
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.0.1</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>com.google.appengine</groupId>
            <artifactId>appengine-api-1.0-sdk</artifactId>
            <version>${appengine.version}</version>
        </dependency>

        <dependency>
            <groupId>com.google.appengine</groupId>
            <artifactId>appengine-api-stubs</artifactId>
            <version>${appengine.version}</version>
            <scope>provided</scope><!-- do not include in WEB-INF -->
        </dependency>

        <dependency>
            <groupId>com.google.appengine</groupId>
            <artifactId>appengine-tools-sdk</artifactId>
            <version>${appengine.version}</version>
            <scope>provided</scope><!-- do not include in WEB-INF -->
        </dependency>

        <dependency>
            <groupId>com.google.appengine</groupId>
            <artifactId>appengine-api-labs</artifactId>
            <version>${appengine.version}</version>
            <scope>provided</scope><!-- do not include in WEB-INF -->
        </dependency>

        <dependency>
            <groupId>com.google.appengine</groupId>
            <artifactId>appengine-testing</artifactId>
            <version>${appengine.version}</version>
            <scope>provided</scope><!-- do not include in WEB-INF -->
        </dependency>

    </dependencies>
    
</project><!--

    Copyright (C) 2012 the original author or authors.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.ninjaframework</groupId>
    <artifactId>ninja-appengine</artifactId>
    <packaging>pom</packaging>
    <version>1.9.3-SNAPSHOT</version>
    <url>http://www.ninjaframework.org</url>

    <!-- Deploy to central maven using the oss-parent of sonatype -->
    <!-- https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide -->
    <parent>
        <groupId>org.sonatype.oss</groupId>
        <artifactId>oss-parent</artifactId>
        <version>7</version>
    </parent>

    <modules>
        <module>ninja-appengine-module</module>
        <module>ninja-appengine-integration-test-blog</module>
        <module>ninja-appengine-blog-archetype</module>
    </modules>

    <!-- pin encoding to utf-8 -->
    <properties>
        <appengine.version>1.9.2</appengine.version>
        <ninja.version>3.1.5-SNAPSHOT</ninja.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <siteProjectVersion>${project.version}</siteProjectVersion>
    </properties>

    <!-- Fix version 1.7 of java compiler in all submodules: -->
    <build>

        <pluginManagement>

            <plugins>
                
                <plugin>
                    <artifactId>maven-release-plugin</artifactId>
                    <version>2.5</version>
                    <configuration>
                        <!-- bump submodule versions automatically -->
                        <autoVersionSubmodules>true</autoVersionSubmodules>
                        <!-- install next final version in local repo, so that
                             tests on archetypes work -->
                        <preparationGoals>clean install</preparationGoals>
                    </configuration>
                </plugin>
                
                
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <configuration>
                        <additionalparam>-Xdoclint:none</additionalparam>
                    </configuration>
                </plugin>
                
                
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.1</version>
                    <configuration>
                        <source>1.7</source>
                        <target>1.7</target>
                    </configuration>
                </plugin>
                
                <!-- We recreate the VM used for testing each time -->
                <!-- The in memory simulation of the GAE datastore does not like parallel execution -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>2.14.1</version>
                    <configuration>
                        <reuseForks>false</reuseForks>
                        <forkCount>1</forkCount>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <scm>
        <url>https://github.com/reyez/ninja-appengine</url>
        <connection>scm:git://github.com/reyez/ninja-appengine.git</connection>
        <developerConnection>scm:git:git@github.com:reyez/ninja-appengine.git</developerConnection>
      <tag>HEAD</tag>
  </scm>

    <issueManagement>
        <system>GitHub</system>
        <url>https://github.com/reyez/ninja-appengine/issues/</url>
    </issueManagement>

    <mailingLists>
        <mailingList>
            <name>Ninja Web Framework Users</name>
            <post>ninja-framework@googlegroups.com</post>
            <archive>http://groups.google.com/group/ninja-framework</archive>
        </mailingList>
    </mailingLists>

    <profiles>
        <!-- Do a license check by running : mvn -P license license:check -->
        <!-- Update the license check by running : mvn -P license license:format -->
        <profile>
            <id>license</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.mycila.maven-license-plugin</groupId>
                        <artifactId>maven-license-plugin</artifactId>
                        <version>1.6.0</version>
                        <configuration>
                            <quiet>false</quiet>
                            <header>src/main/resources/license-header.txt</header>
                            <aggregate>true</aggregate>
                            <includes>
                                <include>**/src/**</include>
                                <include>**/pom.xml</include>
                            </includes>
                            <excludes>
                                <!-- ignore files produced during a build -->
                                <exclude>**/target/**</exclude>
                                <exclude>**/WEB-INF/classes/**</exclude>
                                <exclude>**/site/**</exclude>
                                <exclude>**/.DS_Store</exclude>

                                <!-- ignore binary files -->
                                <exclude>**/assets/**</exclude>
                                <exclude>**/views/**</exclude>
                            </excludes>
                            <useDefaultExcludes>false</useDefaultExcludes>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>check</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
