<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<!-- MAVEN ARTIFACT INFORMATION -->
	<artifactId>pi4j-core</artifactId>
	<name>Pi4J :: Java Library (Core)</name>
	<description>Pi4J Java Library for the Raspberry Pi</description>
	<packaging>jar</packaging>
	<parent>
		<groupId>com.pi4j</groupId>
		<artifactId>pi4j-parent</artifactId>
		<version>0.0.5</version>
	</parent>

	<!-- PROJECT DEPENDENCIES -->
	<dependencies>
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-native</artifactId>
			<version>${project.version}</version>
			<type>so</type>
			<classifier>hard-float</classifier>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-native</artifactId>
			<version>${project.version}</version>
			<type>so</type>
			<classifier>soft-float</classifier>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<!-- BUILD INSTRUCTIONS -->
	<build>
		<resources>
			<resource>
				<directory>${project.build.directory}</directory>
				<filtering>false</filtering>
				<includes>
					<include>LICENSE.txt</include>
					<include>NOTICE.txt</include>
					<include>README.md</include>
				</includes>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>false</filtering>
			</resource>
		</resources>

		<plugins>

			<!-- JAVA COMPILER -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
			</plugin>

			<!-- INCLUDE SOURCE JAR -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
			</plugin>

			<!-- INCLUDE JAVADOC JAR -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
			</plugin>

			<!-- GENERATE LICENSE HEADERS IN SOURCE FILES -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>license-maven-plugin</artifactId>
			</plugin>

			<!-- RETRIEVE THE JNI NATIVE LIBRARY DEPENDENCY -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>copy</id>
						<phase>validate</phase>
						<goals>
							<goal>copy</goal>
						</goals>
						<configuration>
							<artifactItems>
								<!-- we define the libpi4j native project as a dependency so that 
									native library can be included in the final packaged pi4j.jar -->
								<artifactItem>
									<groupId>com.pi4j</groupId>
									<artifactId>pi4j-native</artifactId>
									<version>${project.version}</version>
									<type>so</type>
									<classifier>hard-float</classifier>
									<overWrite>true</overWrite>
									<outputDirectory>${project.build.directory}/lib/hard-float</outputDirectory>
									<destFileName>libpi4j.so</destFileName>
								</artifactItem>
								<artifactItem>
									<groupId>com.pi4j</groupId>
									<artifactId>pi4j-native</artifactId>
									<version>${project.version}</version>
									<type>so</type>
									<classifier>soft-float</classifier>
									<overWrite>true</overWrite>
									<outputDirectory>${project.build.directory}/lib/soft-float</outputDirectory>
									<destFileName>libpi4j.so</destFileName>
								</artifactItem>
							</artifactItems>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- EMBED THE JNI NATIVE LIBRARY INSIDE THE JAR -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>embed-jni-native-resource</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>add-resource</goal>
						</goals>
						<configuration>
							<resources>
								<resource>
									<directory>${project.build.directory}/lib</directory>
									<targetPath>lib</targetPath>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- OSGi BUNDLE -->
			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<configuration>
					<instructions>
						<Bundle-SymbolicName>${project.artifactId}</Bundle-SymbolicName>
						<Bundle-Version>${project.version}</Bundle-Version>
						<Export-Package>
							com.pi4j.util.*,
							com.pi4j.jni.*,
							com.pi4j.wiringpi.*,
							com.pi4j.system.*,
							com.pi4j.io.serial.*,
							com.pi4j.io.gpio.*,
							com.pi4j.io.i2c.*
						</Export-Package>
						<Private-Package>
						</Private-Package>
					</instructions>
				</configuration>
				<executions>
					<execution>
						<id>bundle-manifest</id>
						<phase>process-classes</phase>
						<goals>
							<goal>manifest</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- INCLUDE OSGi MANIFEST IN JAR -->
			<plugin>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<archive>
						<manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
					</archive>
				</configuration>
			</plugin>

			<!-- OPTIONALLY DEPLOY THE FINAL JAR TO THE RASBERRY PI -->
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>

					<!-- copy the compiled JAR file to the Raspberry Pi platform platform -->
					<execution>
						<id>transfer-compiled-pi4j-jar</id>
						<phase>install</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<tasks>
								<taskdef resource="net/sf/antcontrib/antcontrib.properties"
									classpathref="maven.plugin.classpath" />
								<if>
									<equals arg1="${pi.transfer.dev}" arg2="true" />
									<then>
									
										<!-- ensure the target directory exists on the Raspberry Pi -->
										<sshexec host="${pi.host.dev}" port="${pi.port.dev}" username="${pi.user.dev}"
											password="${pi.password.dev}" trust="true" failonerror="false"
											verbose="true" command="mkdir --parents ${pi.dirCopyTo.dev}" />
												
										<!-- copy the JAR file to the Raspberry Pi -->
										<scp
											file="${project.build.directory}/${project.build.finalName}.jar"
											todir="${pi.user.dev}:${pi.password.dev}@${pi.host.dev}:${pi.dirCopyTo.dev}"
											port="${pi.port.dev}" trust="true" verbose="true" failonerror="true">
										</scp>
									</then>
								</if>
							</tasks>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>org.apache.ant</groupId>
						<artifactId>ant-jsch</artifactId>
						<version>1.7.1</version>
					</dependency>
					<dependency>
						<groupId>com.jcraft</groupId>
						<artifactId>jsch</artifactId>
						<version>0.1.42</version>
					</dependency>
					<dependency>
						<groupId>ant-contrib</groupId>
						<artifactId>ant-contrib</artifactId>
						<version>20020829</version>
					</dependency>
				</dependencies>
			</plugin>
		</plugins>

		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.felix</groupId>
										<artifactId>
											maven-bundle-plugin
										</artifactId>
										<versionRange>
											[2.3.7,)
										</versionRange>
										<goals>
											<goal>manifest</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.mojo</groupId>
										<artifactId>
											build-helper-maven-plugin
										</artifactId>
										<versionRange>[1.7,)</versionRange>
										<goals>
											<goal>add-resource</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-dependency-plugin
										</artifactId>
										<versionRange>
											[2.5.1,)
										</versionRange>
										<goals>
											<goal>copy</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.pi4j</groupId>
		<artifactId>pi4j-parent</artifactId>
		<version>0.0.5</version>
	</parent>
	<artifactId>pi4j-device</artifactId>
	<name>Pi4J :: Device Abstractions</name>
	<description>Pi4J Device Abstractions Library</description>


	<!-- PROJECT DEPENDENCIES -->
	<dependencies>
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-core</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-gpio-extension</artifactId>
			<version>${project.version}</version>
		</dependency>
	</dependencies>

	<!-- BUILD INSTRUCTIONS -->
	<build>
		<resources>
			<resource>
				<directory>${project.build.directory}</directory>
				<filtering>false</filtering>
				<includes>
					<include>LICENSE.txt</include>
					<include>NOTICE.txt</include>
					<include>README.md</include>
				</includes>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>false</filtering>
			</resource>
		</resources>

		<plugins>

			<!-- JAVA COMPILER -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
			</plugin>

			<!-- INCLUDE SOURCE JAR -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
			</plugin>

			<!-- INCLUDE JAVADOC JAR -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
			</plugin>

			<!-- GENERATE LICENSE HEADERS IN SOURCE FILES -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>license-maven-plugin</artifactId>
			</plugin>

			<!-- DOWNLOAD LICENSE, README & NOTICE ARTIFACTS -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
			</plugin>

			<!-- OPTIONALLY DEPLOY THE FINAL JAR TO THE RASBERRY PI -->
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>

					<!-- copy the compiled JAR file to the Raspberry Pi platform platform -->
					<execution>
						<id>transfer-compiled-pi4j-device-jar</id>
						<phase>install</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<tasks>
								<taskdef resource="net/sf/antcontrib/antcontrib.properties"
									classpathref="maven.plugin.classpath" />
								<if>
									<equals arg1="${pi.transfer.dev}" arg2="true" />
									<then>
									
										<!-- ensure the target directory exists on the Raspberry Pi -->
										<sshexec host="${pi.host.dev}" port="${pi.port.dev}" username="${pi.user.dev}"
											password="${pi.password.dev}" trust="true" failonerror="false"
											verbose="true" command="mkdir --parents ${pi.dirCopyTo.dev}" />
												
										<!-- copy the JAR file to the Raspberry Pi -->
										<scp
											file="${project.build.directory}/${project.build.finalName}.jar"
											todir="${pi.user.dev}:${pi.password.dev}@${pi.host.dev}:${pi.dirCopyTo.dev}"
											port="${pi.port.dev}" trust="true" verbose="true" failonerror="true">
										</scp>
									</then>
								</if>
							</tasks>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>org.apache.ant</groupId>
						<artifactId>ant-jsch</artifactId>
						<version>1.7.1</version>
					</dependency>
					<dependency>
						<groupId>com.jcraft</groupId>
						<artifactId>jsch</artifactId>
						<version>0.1.42</version>
					</dependency>
					<dependency>
						<groupId>ant-contrib</groupId>
						<artifactId>ant-contrib</artifactId>
						<version>20020829</version>
					</dependency>
				</dependencies>
			</plugin>

		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-dependency-plugin
										</artifactId>
										<versionRange>
											[2.5.1,)
										</versionRange>
										<goals>
											<goal>copy</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.pi4j</groupId>
		<artifactId>pi4j-parent</artifactId>
		<version>0.0.5</version>
	</parent>
	<artifactId>pi4j-distribution</artifactId>
	<name>Pi4J :: Distribution</name>
	<description>Packaged Pi4J Distributions</description>
	<packaging>pom</packaging>


	<!-- PROJECT DEPENDENCIES -->
	<dependencies>
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-core</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-core</artifactId>
			<version>${project.version}</version>
			<classifier>sources</classifier>
		</dependency>
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-core</artifactId>
			<version>${project.version}</version>
			<classifier>javadoc</classifier>
		</dependency>
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-device</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-device</artifactId>
			<version>${project.version}</version>
			<classifier>sources</classifier>
		</dependency>
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-device</artifactId>
			<version>${project.version}</version>
			<classifier>javadoc</classifier>
		</dependency>
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-service</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-service</artifactId>
			<version>${project.version}</version>
			<classifier>sources</classifier>
		</dependency>
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-service</artifactId>
			<version>${project.version}</version>
			<classifier>javadoc</classifier>
		</dependency>
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-gpio-extension</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-gpio-extension</artifactId>
			<version>${project.version}</version>
			<classifier>sources</classifier>
		</dependency>
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-gpio-extension</artifactId>
			<version>${project.version}</version>
			<classifier>javadoc</classifier>
		</dependency>
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-example</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-example</artifactId>
			<version>${project.version}</version>
			<classifier>sources</classifier>
		</dependency>
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-example</artifactId>
			<version>${project.version}</version>
			<classifier>javadoc</classifier>
		</dependency>
	</dependencies>

	<!-- BUILD INSTRUCTIONS -->
	<build>
		<plugins>

			<!-- ACQUIRE DEPENDENCIES -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>

					<!-- DOWNLOAD LICENSE, README & NOTICE ARTIFACTS -->
					<execution>
						<id>copy-license</id>
						<phase>package</phase>
						<goals>
							<goal>copy</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>com.pi4j</groupId>
									<artifactId>pi4j-parent</artifactId>
									<version>${project.version}</version>
									<classifier>license</classifier>
									<type>txt</type>
									<overWrite>true</overWrite>
									<destFileName>LICENSE.txt</destFileName>
									<outputDirectory>${project.build.directory}/distro-contents</outputDirectory>
								</artifactItem>
								<artifactItem>
									<groupId>com.pi4j</groupId>
									<artifactId>pi4j-parent</artifactId>
									<version>${project.version}</version>
									<classifier>notice</classifier>
									<type>txt</type>
									<overWrite>true</overWrite>
									<destFileName>NOTICE.txt</destFileName>
									<outputDirectory>${project.build.directory}/distro-contents</outputDirectory>
								</artifactItem>
								<artifactItem>
									<groupId>com.pi4j</groupId>
									<artifactId>pi4j-parent</artifactId>
									<version>${project.version}</version>
									<classifier>readme</classifier>
									<type>md</type>
									<overWrite>true</overWrite>
									<destFileName>README.md</destFileName>
									<outputDirectory>${project.build.directory}/distro-contents</outputDirectory>
								</artifactItem>
							</artifactItems>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>true</overWriteSnapshots>
						</configuration>
					</execution>

					<!-- DOWNLOAD LIBRARY ARTIFACTS -->
					<execution>
						<id>copy-dependencies</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/distro-contents/lib</outputDirectory>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>true</overWriteSnapshots>
							<excludeTransitive>true</excludeTransitive>
							<stripVersion>true</stripVersion>
						</configuration>
					</execution>

					<!-- DOWNLOAD & EXTRACT EXAMPLE SOURCE ARTIFACTS -->
					<execution>
						<id>unpack-example-sources</id>
						<phase>package</phase>
						<goals>
							<goal>unpack</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>com.pi4j</groupId>
									<artifactId>pi4j-example</artifactId>
									<version>${project.version}</version>
									<classifier>sources</classifier>
									<type>jar</type>
									<overWrite>true</overWrite>
									<outputDirectory>${project.build.directory}/distro-contents/examples</outputDirectory>
									<includes>*.java,build</includes>
								</artifactItem>
							</artifactItems>
							<includes>**/*.java</includes>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>true</overWriteSnapshots>
						</configuration>
					</execution>

				</executions>
			</plugin>


			<!-- CREATE DEBIAN (.DEB) PACKAGE -->
			<plugin>
				<artifactId>jdeb</artifactId>
				<groupId>org.vafer</groupId>
				<version>0.11</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>jdeb</goal>
						</goals>
						<configuration>
							<attach>true</attach>
							<deb>${project.build.directory}/pi4j-${version}.deb</deb>
							<installDir>/opt/pi4j</installDir>
							<dataSet>
								<data>
									<src>${project.build.directory}/distro-contents/LICENSE.txt</src>
									<dst>LICENSE</dst>
									<type>file</type>
									<dst>/opt/pi4j/LICENSE</dst>
								</data>
								<data>
									<src>${project.build.directory}/distro-contents/NOTICE.txt</src>
									<type>file</type>
									<dst>/opt/pi4j/NOTICE</dst>
								</data>
								<data>
									<src>${project.build.directory}/distro-contents/README.md</src>
									<type>file</type>
									<dst>/opt/pi4j/README</dst>
								</data>
								<data>
									<src>${project.build.directory}/distro-contents/lib/pi4j-core.jar</src>
									<type>file</type>
									<dst>/opt/pi4j/lib/pi4j-core.jar</dst>
								</data>
								<data>
									<src>${project.build.directory}/distro-contents/lib/pi4j-core.jar</src>
									<type>file</type>
									<dst>/opt/pi4j/lib/pi4j-core.jar</dst>
								</data>
								<data>
									<src>${project.build.directory}/distro-contents/lib/pi4j-device.jar</src>
									<type>file</type>
									<dst>/opt/pi4j/lib/pi4j-device.jar</dst>
								</data>
								<data>
									<src>${project.build.directory}/distro-contents/lib/pi4j-service.jar</src>
									<type>file</type>
									<dst>/opt/pi4j/lib/pi4j-service.jar</dst>
								</data>
								<data>
									<src>${project.build.directory}/distro-contents/lib/pi4j-gpio-extension.jar</src>
									<type>file</type>
									<dst>/opt/pi4j/lib/pi4j-gpio-extension.jar</dst>
								</data>
								
								<data>
									<src>${project.build.directory}/distro-contents/examples</src>
									<type>directory</type>
	                                <mapper>
	                                    <type>perm</type>
	                                    <prefix>/opt/pi4j/examples</prefix>
	                                    <filemode>777</filemode>
	                                </mapper>									
								</data>
							</dataSet>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- OPTIONALLY DEPLOY THE FINAL .DEB TO THE RASBERRY PI -->
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>

					<!-- copy the compiled JAR file to the Raspberry Pi platform platform -->
					<execution>
						<id>transfer-packaged-pi4j-deb</id>
						<phase>install</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<tasks>
								<taskdef resource="net/sf/antcontrib/antcontrib.properties"
									classpathref="maven.plugin.classpath" />
								<if>
									<equals arg1="${pi.transfer.dev}" arg2="true" />
									<then>
										<!-- ensure the target directory exists on the Raspberry Pi -->
										<sshexec host="${pi.host.dev}" port="${pi.port.dev}" username="${pi.user.dev}"
											password="${pi.password.dev}" trust="true" failonerror="false"
											verbose="true" command="mkdir --parents ${pi.dirCopyTo.dev}" />
												
										<!-- copy the DEB file to the Raspberry Pi -->
										<scp
											file="${project.build.directory}/pi4j-${version}.deb" 
											remoteTofile="${pi.user.dev}:${pi.password.dev}@${pi.host.dev}:${pi.dirCopyTo.dev}/pi4j.deb"
											port="${pi.port.dev}" trust="true" verbose="true" failonerror="true">
										</scp>
									</then>
								</if>
							</tasks>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>org.apache.ant</groupId>
						<artifactId>ant-jsch</artifactId>
						<version>1.7.1</version>
					</dependency>
					<dependency>
						<groupId>com.jcraft</groupId>
						<artifactId>jsch</artifactId>
						<version>0.1.42</version>
					</dependency>
					<dependency>
						<groupId>ant-contrib</groupId>
						<artifactId>ant-contrib</artifactId>
						<version>20020829</version>
					</dependency>
				</dependencies>
			</plugin>

			<!-- CREATE .ZIP PACKAGE OF Pi4J DISTRIBUTION -->
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<appendAssemblyId>false</appendAssemblyId>
					<finalName>pi4j-${project.version}</finalName>
					<descriptors>
				    	<descriptor>src/assembly/distribution.xml</descriptor>
					</descriptors>
				</configuration>
				<executions>
					<execution>
						<id>make-distribution-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
        		</executions>				
			</plugin>
        			
			<!-- DEPLOY .DEP PACKAGE TO GOOGLE CODE -->
			<!-- http://code.google.com/p/maven-gcu-plugin/wiki/Usage -->
            <plugin>
                <groupId>com.googlecode.maven-gcu-plugin</groupId>
                <artifactId>maven-gcu-plugin</artifactId>
                <configuration>
                    <serverId>googlecode</serverId>
                    <failsOnError>true</failsOnError>
                    <projectName>pi4j</projectName>
                    <uploads>
                         <upload>
                            <file>${project.build.directory}/pi4j-${project.version}.deb</file>
                            <summary>${project.version} Debian installer package of the Pi4J Library for the Raspberry Pi</summary>
                            <labels>
                                <label>Featured</label>
                                <label>Type-Package</label>
                                <label>${googlecode.upload.label}</label>
                            </labels>
                         </upload>
                         <upload>
                            <file>${project.build.directory}/pi4j-${project.version}.zip</file>
                            <summary>${project.version} archive package of the Pi4J Library for the Raspberry Pi</summary>
                            <labels>
                                <label>Featured</label>
                                <label>Type-Archive</label>
                                <label>${googlecode.upload.label}</label>
                            </labels>
                         </upload>
                    </uploads>
                </configuration>
            </plugin>					

		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-dependency-plugin
										</artifactId>
										<versionRange>
											[2.5.1,)
										</versionRange>
										<goals>
											<goal>copy</goal>
											<goal>
												copy-dependencies
											</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<!-- MAVEN ARTIFACT INFORMATION -->
	<artifactId>pi4j-example</artifactId>
	<name>Pi4J :: Java Examples</name>
	<description>Pi4J Java Examples using the Pi4J Library</description>
	<packaging>jar</packaging>
	<parent>
		<groupId>com.pi4j</groupId>
		<artifactId>pi4j-parent</artifactId>
		<version>0.0.5</version>
	</parent>

	<!-- DEPENDENCIES -->
	<dependencies>
<!-- START SNIPPET: maven-dependency-snippet -->
<dependency>
	<groupId>com.pi4j</groupId>
	<artifactId>pi4j-core</artifactId>
	<version>${project.version}</version>
</dependency>
<!-- END SNIPPET: maven-dependency-snippet -->
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-gpio-extension</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-device</artifactId>
			<version>${project.version}</version>
		</dependency>
	</dependencies>

	<!-- BUILD INSTRUCTIONS -->
	<build>
		<resources>
			<resource>
				<directory>${project.build.directory}</directory>
				<filtering>false</filtering>
				<includes>
					<include>LICENSE.txt</include>
					<include>NOTICE.txt</include>
					<include>README.md</include>
				</includes>
			</resource>
		</resources>

		<plugins>

			<!-- JAVA COMPILER -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
			</plugin>

			<!-- INCLUDE SOURCE JAR -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
			</plugin>

			<!-- INCLUDE JAVADOC JAR -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
			</plugin>

			<!-- GENERATE LICENSE HEADERS IN SOURCE FILES -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>license-maven-plugin</artifactId>
			</plugin>

			<!-- DOWNLOAD LICENSE, README & NOTICE ARTIFACTS -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
			</plugin>
			
			<!-- OPTIONALLY DEPLOY THE FINAL JAR TO THE RASBERRY PI -->
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>

					<!-- copy the compiled JAR file to the Raspberry Pi platform platform -->
					<execution>
						<id>transfer-compiled-pi4j-example-jar</id>
						<phase>install</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<tasks>
								<taskdef resource="net/sf/antcontrib/antcontrib.properties"
									classpathref="maven.plugin.classpath" />
								<if>
									<equals arg1="${pi.transfer.dev}" arg2="true" />
									<then>
									
										<!-- ensure the target directory exists on the Raspberry Pi -->
										<sshexec host="${pi.host.dev}" port="${pi.port.dev}" username="${pi.user.dev}"
											password="${pi.password.dev}" trust="true" failonerror="false"
											verbose="true" command="mkdir --parents ${pi.dirCopyTo.dev}" />
												
										<!-- copy the JAR file to the Raspberry Pi -->
										<scp
											file="${project.build.directory}/${project.build.finalName}.jar"
											todir="${pi.user.dev}:${pi.password.dev}@${pi.host.dev}:${pi.dirCopyTo.dev}"
											port="${pi.port.dev}" trust="true" verbose="true" failonerror="true">
										</scp>
									</then>
								</if>
							</tasks>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>org.apache.ant</groupId>
						<artifactId>ant-jsch</artifactId>
						<version>1.7.1</version>
					</dependency>
					<dependency>
						<groupId>com.jcraft</groupId>
						<artifactId>jsch</artifactId>
						<version>0.1.42</version>
					</dependency>
					<dependency>
						<groupId>ant-contrib</groupId>
						<artifactId>ant-contrib</artifactId>
						<version>20020829</version>
					</dependency>
				</dependencies>
			</plugin>			
		</plugins>

		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-dependency-plugin
										</artifactId>
										<versionRange>
											[2.5.1,)
										</versionRange>
										<goals>
											<goal>copy</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
	
	<!-- MAVEN REPOSITORIES -->
<!-- START SNIPPET: maven-repository-snippet -->
<repositories>
	<repository>
		<id>oss-snapshots-repo</id>
		<name>Sonatype OSS Maven Repository</name>
		<url>https://oss.sonatype.org/content/groups/public</url>
		<snapshots>
			<enabled>true</enabled>
			<updatePolicy>always</updatePolicy>
		</snapshots>
	</repository>
</repositories>
<!-- END SNIPPET: maven-repository-snippet -->

</project><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.pi4j</groupId>
		<artifactId>pi4j-parent</artifactId>
		<version>0.0.5</version>
	</parent>
	<artifactId>pi4j-gpio-extension</artifactId>
	<name>Pi4J :: GPIO Extension</name>
	<description>Pi4J GPIO Extension Library</description>


	<!-- PROJECT DEPENDENCIES -->
	<dependencies>
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-core</artifactId>
			<version>${project.version}</version>
		</dependency>
	</dependencies>

	<!-- BUILD INSTRUCTIONS -->
	<build>
		<resources>
			<resource>
				<directory>${project.build.directory}</directory>
				<filtering>false</filtering>
				<includes>
					<include>LICENSE.txt</include>
					<include>NOTICE.txt</include>
					<include>README.md</include>
				</includes>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>false</filtering>
			</resource>
		</resources>

		<plugins>
			<!-- JAVA COMPILER -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
			</plugin>

			<!-- INCLUDE SOURCE JAR -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
			</plugin>

			<!-- INCLUDE JAVADOC JAR -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
			</plugin>

			<!-- GENERATE LICENSE HEADERS IN SOURCE FILES -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>license-maven-plugin</artifactId>
			</plugin>

			<!-- DOWNLOAD LICENSE, README & NOTICE ARTIFACTS -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
			</plugin>

			<!-- OPTIONALLY DEPLOY THE FINAL JAR TO THE RASBERRY PI -->
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>

					<!-- copy the compiled JAR file to the Raspberry Pi platform platform -->
					<execution>
						<id>transfer-compiled-pi4j-gpio-extension-jar</id>
						<phase>install</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<tasks>
								<taskdef resource="net/sf/antcontrib/antcontrib.properties"
									classpathref="maven.plugin.classpath" />
								<if>
									<equals arg1="${pi.transfer.dev}" arg2="true" />
									<then>
									
										<!-- ensure the target directory exists on the Raspberry Pi -->
										<sshexec host="${pi.host.dev}" port="${pi.port.dev}" username="${pi.user.dev}"
											password="${pi.password.dev}" trust="true" failonerror="false"
											verbose="true" command="mkdir --parents ${pi.dirCopyTo.dev}" />
												
										<!-- copy the JAR file to the Raspberry Pi -->
										<scp
											file="${project.build.directory}/${project.build.finalName}.jar"
											todir="${pi.user.dev}:${pi.password.dev}@${pi.host.dev}:${pi.dirCopyTo.dev}"
											port="${pi.port.dev}" trust="true" verbose="true" failonerror="true">
										</scp>
									</then>
								</if>
							</tasks>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>org.apache.ant</groupId>
						<artifactId>ant-jsch</artifactId>
						<version>1.7.1</version>
					</dependency>
					<dependency>
						<groupId>com.jcraft</groupId>
						<artifactId>jsch</artifactId>
						<version>0.1.42</version>
					</dependency>
					<dependency>
						<groupId>ant-contrib</groupId>
						<artifactId>ant-contrib</artifactId>
						<version>20020829</version>
					</dependency>
				</dependencies>
			</plugin>

		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-dependency-plugin
										</artifactId>
										<versionRange>
											[2.5.1,)
										</versionRange>
										<goals>
											<goal>copy</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<!-- MAVEN ARTIFACT INFORMATION -->
	<artifactId>pi4j-native</artifactId>
	<name>Pi4J :: JNI Native Library</name>
	<description>Pi4J JNI Native Library</description>
	<packaging>pom</packaging>
	<parent>
		<groupId>com.pi4j</groupId>
		<artifactId>pi4j-parent</artifactId>
		<version>0.0.5</version>
	</parent>

	<!-- BUILD PROFILES -->
	<profiles>

		<!-- This profile is used to dynamically rebuild the native library .H 
			header files from the defined JNI jar classes. This profile should only be 
			used when changes have been made to the JNI Java wrapper classes and new 
			native method signatures are required. To use this profile, simply include 
			the "-generate-jni-headers" command argument with the maven build command. -->
		<profile>
			<id>generate-jni-headers</id>

			<!-- SPECIAL PROFILE DEPENDENCIES -->
			<dependencies>

				<!-- we define the pi4j Java project as a dependency so that the .H header 
					files can be generated based on the Java native wrapper classes -->
				<dependency>
					<groupId>com.pi4j</groupId>
					<artifactId>pi4j-core</artifactId>
					<version>${project.version}</version>
					<scope>compile</scope>
				</dependency>

			</dependencies>

			<!-- SPECIAL PROFILE BUILD INSTRUCTIONS -->
			<build>
				<plugins>

					<!-- Generate .h header files for JNI wrapper -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>native-maven-plugin</artifactId>
						<extensions>true</extensions>
						<executions>
							<execution>
								<id>javah-generate</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>javah</goal>
								</goals>
								<configuration>

									<!-- trigger javah execution -->
									<javahClassNames>
										<javahClassName>com.pi4j.jni.I2C</javahClassName>
										<javahClassName>com.pi4j.jni.Serial</javahClassName>
										<javahClassName>com.pi4j.wiringpi.Gpio</javahClassName>
										<javahClassName>com.pi4j.wiringpi.GpioInterrupt</javahClassName>
										<javahClassName>com.pi4j.wiringpi.GpioUtil</javahClassName>
										<javahClassName>com.pi4j.wiringpi.Serial</javahClassName>
										<javahClassName>com.pi4j.wiringpi.Lcd</javahClassName>
										<javahClassName>com.pi4j.wiringpi.Shift</javahClassName>
										<javahClassName>com.pi4j.wiringpi.SoftPwm</javahClassName>
										<javahClassName>com.pi4j.wiringpi.Spi</javahClassName>
										<javahClassName>com.pi4j.wiringpi.Gertboard</javahClassName>
										<javahClassName>com.pi4j.wiringpi.Nes</javahClassName>
									</javahClassNames>

									<!-- enable additional javah interface in dependencies list -->
									<javahSearchJNIFromDependencies>true</javahSearchJNIFromDependencies>

									<!-- specify the output directory for generated header files -->
									<javahOutputDirectory>src/main/native</javahOutputDirectory>

								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		
		<profile>
			<id>soft-float</id>
			<activation>
			  <property>
			    <name>release-build</name>
			  </property>
			</activation>			
			<properties>
				<pi.build.soft-float>true</pi.build.soft-float>
			</properties>
			<build>
				<plugins>			
					<!-- ATTACH COMPILED NATIVE LIBRARY -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>attach-hard-soft-native-artifact</id>
								<phase>package</phase>
								<goals>
									<goal>attach-artifact</goal>
								</goals>
								<configuration>
									<artifacts>
										<artifact>
											<file>${project.build.directory}/soft-float/libpi4j.so</file>
											<type>so</type>
											<classifier>soft-float</classifier>									
										</artifact>
									</artifacts>
								</configuration>
							</execution>
						</executions>
					</plugin>			
				</plugins>
			</build>			
		</profile>

		<profile>
			<id>hard-float</id>
			<activation>
			  <property>
			    <name>release-build</name>
			  </property>
			</activation>						
			<properties>
				<pi.build.hard-float>true</pi.build.hard-float>
			</properties>
			<build>
				<plugins>			
					<!-- ATTACH COMPILED NATIVE LIBRARY -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>attach-hard-float-native-artifact</id>
								<phase>package</phase>
								<goals>
									<goal>attach-artifact</goal>
								</goals>
								<configuration>
									<artifacts>
										<artifact>
											<file>${project.build.directory}/hard-float/libpi4j.so</file>
											<type>so</type>
											<classifier>hard-float</classifier>									
										</artifact>
									</artifacts>
								</configuration>
							</execution>
						</executions>
					</plugin>			
				</plugins>
			</build>			
		</profile>
				
	</profiles>


	<!-- BUILD INSTRUCTIONS -->
	<build>
		<finalName>libpi4j</finalName>

		<plugins>

			<!-- GENERATE LICENSE HEADERS IN SOURCE FILES -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>license-maven-plugin</artifactId>
			</plugin>

			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>

					<!-- ensure that a target directory has been created platform -->
					<execution>
						<id>generate-sources</id>
						<phase>generate-sources</phase>
						<configuration>
							<tasks>
								<mkdir dir="target" />
								<mkdir dir="target/classes" />
								
								<taskdef resource="net/sf/antcontrib/antcontrib.properties"
								                  classpathref="maven.plugin.classpath" />
				                <if>
				                  <equals arg1="${pi.build.hard-float}" arg2="true" />
				                  <then>
								   <mkdir dir="target/hard-float" />
				                  </then>
				                </if>							
				                <if>
				                  <equals arg1="${pi.build.soft-float}" arg2="true" />
				                  <then>
								   <mkdir dir="target/soft-float" />
				                  </then>
				                </if>
							</tasks>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>

					<!-- copy the native source files and compile them with gcc on the RaspberyPi 
						platform -->
					<execution>
						<id>build-native-so</id>
						<phase>compile</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<tasks>
								<taskdef resource="net/sf/antcontrib/antcontrib.properties"
								                  classpathref="maven.plugin.classpath" />
				                <property name="compile_classpath" 
				                          refid="maven.compile.classpath"/>
				                <property name="project-build-directory"
				                          value="${project.build.directory}"/>		
				                <property name="pi-dirBuildTemp" value="${pi.dirBuildTemp}"/>
				                <if>
				                  <equals arg1="${pi.build.hard-float}" arg2="true" />
				                  <then>
								    <ant target="build-libpi4j.so" >
								    	<property name="pi-abi" value="hard-float"/>
						                <property name="pi-port" value="${pi.port.hard-float}"/>							
						                <property name="pi-host" value="${pi.host.hard-float}"/>							
						                <property name="pi-user" value="${pi.user.hard-float}"/>		
						                <property name="pi-password" value="${pi.password.hard-float}"/>
								    </ant>
				                  </then>
				                </if>							
				                <if>
				                  <equals arg1="${pi.build.soft-float}" arg2="true" />
				                  <then>
								    <ant target="build-libpi4j.so">
								    	<property name="pi-abi" value="soft-float"/> 
						                <property name="pi-port" value="${pi.port.soft-float}"/>							
						                <property name="pi-host" value="${pi.host.soft-float}"/>							
						                <property name="pi-user" value="${pi.user.soft-float}"/>		
						                <property name="pi-password" value="${pi.password.soft-float}"/>
								    </ant>
				                  </then>
				                </if>							
							</tasks>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>org.apache.ant</groupId>
						<artifactId>ant-jsch</artifactId>
						<version>1.7.1</version>
					</dependency>
					<dependency>
						<groupId>com.jcraft</groupId>
						<artifactId>jsch</artifactId>
						<version>0.1.42</version>
					</dependency>
					<dependency>
						<groupId>ant-contrib</groupId>
						<artifactId>ant-contrib</artifactId>
						<version>20020829</version>
					</dependency>
				</dependencies>
			</plugin>

		</plugins>

		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.codehaus.mojo
										</groupId>
										<artifactId>
											license-maven-plugin
										</artifactId>
										<versionRange>
											[1.3,)
										</versionRange>
										<goals>
											<goal>
												update-project-license
											</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<!-- MAVEN ARTIFACT INFORMATION -->
	<artifactId>pi4j-service</artifactId>
	<name>Pi4J :: OSGi Service</name>
	<description>Pi4J OSGi Service for the Raspberry Pi</description>
	<packaging>bundle</packaging>
	<parent>
		<groupId>com.pi4j</groupId>
		<artifactId>pi4j-parent</artifactId>
		<version>0.0.5</version>
	</parent>

	<!-- PROJECT DEPENDENCIES -->
	<dependencies>
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-core</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>org.osgi</groupId>
			<artifactId>org.osgi.core</artifactId>
		</dependency>		
	</dependencies>

	<!-- BUILD INSTRUCTIONS -->
	<build>
		<resources>
			<resource>
				<directory>${project.build.directory}</directory>
				<filtering>false</filtering>
				<includes>
					<include>LICENSE.txt</include>
					<include>NOTICE.txt</include>
					<include>README.md</include>
				</includes>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>false</filtering>
			</resource>			
		</resources>

		<plugins>

			<!-- JAVA COMPILER -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
			</plugin>

			<!-- INCLUDE SOURCE JAR -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
			</plugin>

			<!-- INCLUDE JAVADOC JAR -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
			</plugin>

			<!-- GENERATE LICENSE HEADERS IN SOURCE FILES -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>license-maven-plugin</artifactId>
			</plugin>

			<!-- DOWNLOAD LICENSE, README & NOTICE ARTIFACTS -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
			</plugin>

			<!-- OSGi BUNDLE -->
			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<configuration>
					<instructions>
						<Bundle-SymbolicName>${project.artifactId}</Bundle-SymbolicName>
						<Bundle-Version>${project.version}</Bundle-Version>
						<Bundle-Activator>com.pi4j.service.osgi.Activator</Bundle-Activator>
						<Export-Package>
							com.pi4j.service.osgi,
							com.pi4j.system.service,
							com.pi4j.io.gpio.service,
						</Export-Package>
						<Private-Package>
							com.pi4j.system.service.impl,
							com.pi4j.io.gpio.service.impl
						</Private-Package>
                    	<Export-Service>
                    		com.pi4j.io.gpio.service.GpioService,
                    		com.pi4j.system.service.NetworkInformationService,
                    		com.pi4j.system.service.SystemInformationService
                    	</Export-Service>	
                    	<Activator></Activator>						
					</instructions>
				</configuration>
			</plugin>

			<!-- OPTIONALLY DEPLOY THE FINAL JAR TO THE RASBERRY PI -->
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>

					<!-- copy the compiled JAR file to the Raspberry Pi platform platform -->
					<execution>
						<id>transfer-compiled-pi4j-jar</id>
						<phase>install</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<tasks>
								<taskdef resource="net/sf/antcontrib/antcontrib.properties"
									classpathref="maven.plugin.classpath" />
								<if>
									<equals arg1="${pi.transfer}" arg2="true" />
									<then>
										<!-- copy the JAR file to the Raspberry Pi -->
										<scp
											file="${project.build.directory}/${project.build.finalName}.jar"
											todir="${pi.user}:${pi.password}@${pi.host}:${pi.dirCopyTo}"
											port="${pi.port}" trust="true" verbose="true" failonerror="true">
										</scp>
									</then>
									<else>
										<echo>SCP transfer of Pi4J has been disabled.</echo>
									</else>
								</if>
							</tasks>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>org.apache.ant</groupId>
						<artifactId>ant-jsch</artifactId>
						<version>1.7.1</version>
					</dependency>
					<dependency>
						<groupId>com.jcraft</groupId>
						<artifactId>jsch</artifactId>
						<version>0.1.42</version>
					</dependency>
					<dependency>
						<groupId>ant-contrib</groupId>
						<artifactId>ant-contrib</artifactId>
						<version>20020829</version>
					</dependency>
				</dependencies>
			</plugin>

		</plugins>

		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
							<pluginExecution>
								<pluginExecutionFilter>
									<groupId>
										org.apache.maven.plugins
									</groupId>
									<artifactId>
										maven-dependency-plugin
									</artifactId>
									<versionRange>
										[2.5.1,)
									</versionRange>
									<goals>
										<goal>copy</goal>
									</goals>
								</pluginExecutionFilter>
								<action>
									<ignore></ignore>
								</action>
							</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.pi4j</groupId>
	<artifactId>pi4j-parent</artifactId>
	<version>0.0.5</version>
	<name>Pi4J :: Parent POM</name>
	<description>Parent Maven POM for the Pi4J Project</description>
	<url>http://www.pi4j.com</url>
	<inceptionYear>2012</inceptionYear>
	<packaging>pom</packaging>

	<!-- ORGANIZATION -->
	<organization>
		<name>Pi4J</name>
		<url>http://www.pi4j.com</url>
	</organization>

	<!-- LICENSE -->
	<licenses>
		<license>
			<name>The Apache Software License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
			<distribution>repo</distribution>
			<comments>A business-friendly OSS license</comments>
		</license>
	</licenses>

	<!-- DEVELOPERS/CONTRIBUTORS -->
	<developers>
		<developer>
			<name>Robert Savage</name>
			<email>robert@pi4j.com</email>
			<url>http://robertsavage.me</url>
			<organizationUrl>http://www.savagehomeautomation.com</organizationUrl>
			<roles>
				<role>sponsor</role>
				<role>architect</role>
				<role>developer</role>
			</roles>
		</developer>
		<developer>
			<name>Chris Walzl</name>
			<email>chris@pi4j.com</email>
			<roles>
				<role>sponsor</role>
				<role>developer</role>
			</roles>
		</developer>
	</developers>

	<!-- SOURCE CONTROL -->
	<scm>
		<developerConnection>scm:git:ssh://git@github.com/Pi4J/pi4j.git</developerConnection>
		<connection>scm:git:ssh://git@github.com/Pi4J/pi4j.git</connection>
		<url>https://github.com/Pi4J/pi4j.git</url>
	</scm>

	<!-- ISSUE MANAGEMENT -->
	<issueManagement>
		<url>https://github.com/Pi4J/pi4j/issues</url>
		<system>github</system>
	</issueManagement>

	<!-- DISTRIBUTION REPOSITORIES -->
	<distributionManagement>
		<downloadUrl>http://www.pi4j.com/download.html</downloadUrl>
		<repository>
			<id>sonatype-oss-staging</id>
			<name>Sonatype Open Source Maven Repository</name>
			<url>https://oss.sonatype.org/service/local/staging/deploy/maven2</url>
		</repository>
		<snapshotRepository>
			<id>sonatype-oss-snapshots</id>
			<name>Sonatype Open Source Maven Snapshots Repository</name>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
		</snapshotRepository>
	</distributionManagement>

	<!-- PROJECT MODULES -->
	<modules>
		<module>pi4j-core</module>
		<module>pi4j-example</module>
		<module>pi4j-service</module>
		<module>pi4j-gpio-extension</module>
		<module>pi4j-device</module>
		<module>pi4j-distribution</module>
	</modules>

	<!-- BUILD PROPERTIES -->
	<properties>

		<!-- DEFAULT RASPBERRY PI PROPERTIES -->
		<pi.host>192.168.1.1</pi.host>
		<pi.port>22</pi.port>
		<pi.user>pi</pi.user>
		<pi.password>raspberry</pi.password>

		<!-- SETTINGS FOR REMOTELY BUILDING NATIVE LIBRARY ON RASPBERRY PI -->
		<pi.dirBuildTemp>/home/pi/pi4j-temp</pi.dirBuildTemp>

		<!-- DEFAULT RASPBERRY PI (HARD-FLOAT) PROPERTIES -->
		<pi.host.hard-float>192.168.1.1</pi.host.hard-float>
		<pi.port.hard-float>${pi.port}</pi.port.hard-float>
		<pi.user.hard-float>${pi.user}</pi.user.hard-float>
		<pi.password.hard-float>${pi.password}</pi.password.hard-float>

		<!-- DEFAULT RASPBERRY PI (SOFT-FLOAT) PROPERTIES -->
		<pi.host.soft-float>192.168.1.2</pi.host.soft-float>
		<pi.port.soft-float>${pi.port}</pi.port.soft-float>
		<pi.user.soft-float>${pi.user}</pi.user.soft-float>
		<pi.password.soft-float>${pi.password}</pi.password.soft-float>

		<!-- SETTINGS FOR COPYING Pi4J ARTIFACTS TO DEVELOPMENT RASPBERRY PI -->
		<pi.transfer.dev>false</pi.transfer.dev>
		<pi.host.dev>${pi.host}</pi.host.dev>
		<pi.port.dev>${pi.port}</pi.port.dev>
		<pi.user.dev>${pi.user}</pi.user.dev>
		<pi.password.dev>${pi.password}</pi.password.dev>
		<pi.dirCopyTo.dev>/home/pi/pi4j-dev</pi.dirCopyTo.dev>

		<!-- PROJECT ENCODING PROPERTIES -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<!-- GITHUB PROPERTIES -->
		<github.global.server>github</github.global.server>

		<!-- GOOGLE CODE UPLOAD FILE LABEL -->
		<googlecode.upload.label>SNAPSHOT</googlecode.upload.label>

	</properties>

	<!-- BUILD PROFILES -->
	<profiles>
		<!-- USER PROFILE : Robert Savage -->
		<profile>
			<id>savage</id>
			<properties>
				<!-- IP address/Hostname of Raspberry Pi -->
				<pi.host.hard-float>pi-hf-wifi</pi.host.hard-float>
				<pi.host.soft-float>pi-sf-wifi</pi.host.soft-float>
				<pi.host.dev>pi-hf-wifi</pi.host.dev>

				<!-- enable development transfers -->
				<pi.transfer.dev>true</pi.transfer.dev>
			</properties>
			<activation>
				<!-- automatically set user profile based on environment setting -->
				<property>
					<name>env.MAVEN_PROFILE</name>
					<value>savage</value>
				</property>
			</activation>
		</profile>

		<!-- SPECIAL PROFILE TO BUILD JNI NATIVE LIBRARY -->
		<profile>
			<id>native</id>
			<activation>
				<property>
					<name>release-build</name>
				</property>
			</activation>
			<modules>
				<module>pi4j-native</module>
			</modules>
		</profile>

		<!-- SPECIAL PROFILE FOR RELEASE DEPLOYMENT BUILDS -->
		<profile>
			<id>release</id>
			<activation>
				<property>
					<name>release-build</name>
				</property>
			</activation>
			<properties>
				<!-- GOOGLE CODE UPLOAD FILE LABEL -->
				<googlecode.upload.label>RELEASE</googlecode.upload.label>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
						<executions>
							<execution>
								<id>sign-artifacts</id>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
								<configuration>
									<keyname>Robert Savage (Pi4J GPG Key) &lt;robert@pi4j.com&gt;</keyname>
								</configuration>
							</execution>
						</executions>
					</plugin>				
				</plugins>
			</build>
			<repositories>
				<repository>
					<id>sonatype-oss-staging</id>
					<name>Sonatype Open Source Maven Repository</name>
					<url>https://oss.sonatype.org/service/local/staging/deploy/maven2</url>
					<releases>
						<enabled>true</enabled>
					</releases>
					<snapshots>
						<enabled>false</enabled>
					</snapshots>
				</repository>
			</repositories>
		</profile>

	</profiles>

	<!-- BUILD INSTRUCTIONS -->
	<build>
		<resources>
			<resource>
				<directory>${basedir}</directory>
				<filtering>false</filtering>
				<includes>
					<include>LICENSE.txt</include>
					<include>NOTICE.txt</include>
					<include>README.md</include>
				</includes>
			</resource>
		</resources>

		<plugins>

			<!-- USE LATEST SCM PLUGIN TO SUPPORT GIT -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-scm-plugin</artifactId>
				<version>1.8.1</version>
				<configuration>
					<goals>install</goals>
				</configuration>
			</plugin>

			<!-- GENERATE LICENSE FILE IN PROJECT ROOT -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>license-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>update-project-license</id>
						<goals>
							<goal>update-project-license</goal>
						</goals>
						<phase>process-sources</phase>
						<configuration>
							<licenseName>apache_v2</licenseName>
							<canUpdateLicense>true</canUpdateLicense>
						</configuration>
					</execution>
					<execution>
						<id>append-license-file-headers</id>
						<configuration>
							<descriptionTemplate>${basedir}/src/license/template.ftl</descriptionTemplate>
							<skip>true</skip>
						</configuration>
					</execution>
				</executions>
				<inherited>false</inherited>
			</plugin>

			<!-- GENERATE SITE DOCUMENTATION -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<inherited>false</inherited>
				<configuration>
					<reportPlugins>
						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-javadoc-plugin</artifactId>
							<version>2.8</version>
							<reportSets>
								<reportSet>
									<id>non-aggregate</id>
									<configuration>
										<verbose>true</verbose>
										<linksource>true</linksource>
										<name>JavaDocs</name>
										<description>JavaDoc API documentation</description>
										<outputName>javadoc/index</outputName>
										<sourcepath>pi4j-core/src/main/java</sourcepath>
									</configuration>
									<reports>
										<report>javadoc</report>
									</reports>
								</reportSet>
							</reportSets>
						</plugin>
						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-project-info-reports-plugin</artifactId>
							<version>2.5.1</version>
							<reportSets>
								<reportSet>
									<reports>
										<report>summary</report>
										<report>project-team</report>
										<report>license</report>
										<report>scm</report>
										<report>issue-tracking</report>
										<report>plugins</report>
										<report>dependency-info</report>
										<report>dependency-management</report>
										<report>plugin-management</report>
										<report>distribution-management</report>
									</reports>
								</reportSet>
							</reportSets>
						</plugin>
						<plugin>
							<groupId>org.codehaus.mojo</groupId>
							<artifactId>taglist-maven-plugin</artifactId>
							<version>2.4</version>
						</plugin>
						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-surefire-report-plugin</artifactId>
							<version>2.12.3</version>
						</plugin>
						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-pmd-plugin</artifactId>
							<version>2.7.1</version>
						</plugin>
						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-jxr-plugin</artifactId>
							<version>2.3</version>
						</plugin>
						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-checkstyle-plugin</artifactId>
							<version>2.9.1</version>
						</plugin>
					</reportPlugins>
				</configuration>
			</plugin>

			<!-- DEPLOY GITHUB SITE DOCUMENTATION -->
			<plugin>
				<groupId>com.github.github</groupId>
				<artifactId>site-maven-plugin</artifactId>
				<version>0.7</version>
				<inherited>false</inherited>
				<configuration>
					<repositoryOwner>Pi4J</repositoryOwner>
					<repositoryName>pi4j</repositoryName>
					<message>Generating site content for ${project.version}</message>
				</configuration>
			</plugin>

			<!-- ATTACH LICENSE AS ARTIFACT -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>attach-artifacts</id>
						<phase>package</phase>
						<goals>
							<goal>attach-artifact</goal>
						</goals>
						<configuration>
							<artifacts>
								<artifact>
									<file>${basedir}/LICENSE.txt</file>
									<type>txt</type>
									<classifier>license</classifier>
								</artifact>
								<artifact>
									<file>${basedir}/NOTICE.txt</file>
									<type>txt</type>
									<classifier>notice</classifier>
								</artifact>
								<artifact>
									<file>${basedir}/README.md</file>
									<type>md</type>
									<classifier>readme</classifier>
								</artifact>
							</artifacts>
						</configuration>
					</execution>
				</executions>
				<inherited>false</inherited>
			</plugin>

			<!-- TWEET PROJECT DEPLOYMENT ANNOUNCEMENT -->
			<!-- <plugin> -->
			<!-- <groupId>com.vineetmanohar</groupId> -->
			<!-- <artifactId>maven-twitter-plugin</artifactId> -->
			<!-- <version>0.2</version> -->

			<!-- <executions> -->
			<!-- phase: deploy -->
			<!-- <execution> -->
			<!-- <configuration> -->
			<!-- Tell users that the project is deployed -->
			<!-- <twitterStatus>#Pi4J build ${project.version} has been deployed to 
				the repository.</twitterStatus> -->
			<!-- </configuration> -->
			<!-- <id>deploy</id> -->
			<!-- <phase>deploy</phase> -->
			<!-- <goals> -->
			<!-- <goal>tweet</goal> -->
			<!-- </goals> -->
			<!-- </execution> -->
			<!-- </executions> -->
			<!-- </plugin> -->

		</plugins>

		<pluginManagement>
			<plugins>

				<!-- JAVA COMPILER -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>2.5.1</version>
					<configuration>
						<source>1.7</source>
						<target>1.7</target>
						<showDeprecation>true</showDeprecation>
						<showWarnings>true</showWarnings>
						<verbose>true</verbose>
						<compilerVersion>1.7</compilerVersion>
					</configuration>
				</plugin>

				<!-- INCLUDE SOURCE JAR -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-source-plugin</artifactId>
					<executions>
						<execution>
							<id>attach-sources</id>
							<goals>
								<goal>jar</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<!-- INCLUDE JAVADOC JAR -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-javadoc-plugin</artifactId>
					<executions>
						<execution>
							<id>attach-javadocs</id>
							<goals>
								<goal>jar</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<!-- DOWNLOAD LICENSE, README & NOTICE ARTIFACTS -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>2.5.1</version>
					<executions>
						<execution>
							<id>copy-license</id>
							<phase>validate</phase>
							<goals>
								<goal>copy</goal>
							</goals>
							<configuration>
								<artifactItems>
									<artifactItem>
										<groupId>com.pi4j</groupId>
										<artifactId>pi4j-parent</artifactId>
										<version>${project.version}</version>
										<classifier>license</classifier>
										<type>txt</type>
										<overWrite>true</overWrite>
										<outputDirectory>${project.build.directory}</outputDirectory>
										<destFileName>LICENSE.txt</destFileName>
									</artifactItem>
									<artifactItem>
										<groupId>com.pi4j</groupId>
										<artifactId>pi4j-parent</artifactId>
										<version>${project.version}</version>
										<classifier>notice</classifier>
										<type>txt</type>
										<overWrite>true</overWrite>
										<outputDirectory>${project.build.directory}</outputDirectory>
										<destFileName>NOTICE.txt</destFileName>
									</artifactItem>
									<artifactItem>
										<groupId>com.pi4j</groupId>
										<artifactId>pi4j-parent</artifactId>
										<version>${project.version}</version>
										<classifier>readme</classifier>
										<type>md</type>
										<overWrite>true</overWrite>
										<outputDirectory>${project.build.directory}</outputDirectory>
										<destFileName>README.md</destFileName>
									</artifactItem>
								</artifactItems>
								<outputDirectory>${project.build.directory}</outputDirectory>
								<overWriteReleases>false</overWriteReleases>
								<overWriteSnapshots>true</overWriteSnapshots>
							</configuration>
						</execution>
					</executions>
				</plugin>

				<!-- OSGi BUNDLE -->
				<plugin>
					<groupId>org.apache.felix</groupId>
					<artifactId>maven-bundle-plugin</artifactId>
					<version>2.3.7</version>
					<extensions>true</extensions>
				</plugin>

				<!-- USED TO ATTACH EXTRA ARTIFACTS -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>build-helper-maven-plugin</artifactId>
					<version>1.7</version>
				</plugin>

				<plugin>
					<groupId>com.googlecode.maven-gcu-plugin</groupId>
					<artifactId>maven-gcu-plugin</artifactId>
					<version>1.1</version>
				</plugin>

				<!-- GENERATE LICENSE HEADERS IN SOURCE FILES -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>license-maven-plugin</artifactId>
					<version>1.3</version>
					<configuration>
						<verbose>false</verbose>
					</configuration>
					<executions>
						<execution>
							<id>append-license-file-headers</id>
							<goals>
								<goal>update-file-header</goal>
							</goals>
							<phase>process-sources</phase>
							<configuration>
								<licenseName>apache_v2</licenseName>
								<descriptionTemplate>${basedir}/../src/license/template.ftl</descriptionTemplate>
								<canUpdateCopyright>true</canUpdateCopyright>
								<canUpdateDescription>true</canUpdateDescription>
								<canUpdateLicense>true</canUpdateLicense>
								<roots>
									<root>src/main/native</root>
									<root>src/main/java</root>
									<root>src/test</root>
								</roots>
							</configuration>
						</execution>
					</executions>
				</plugin>

				<!-- USED TO GENERATE HEADER FILES FOR NATIVE LIBS -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>native-maven-plugin</artifactId>
					<version>1.0-alpha-7</version>
				</plugin>

				<!-- GENERATE SITE DOCUMENTATION -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-site-plugin</artifactId>
					<version>3.0</version>
				</plugin>

				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.codehaus.mojo
										</groupId>
										<artifactId>
											license-maven-plugin
										</artifactId>
										<versionRange>
											[1.3,)
										</versionRange>
										<goals>
											<goal>
												update-file-header
											</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>

	</build>

	<!-- PROJECT DEPENDENCIES -->
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.osgi</groupId>
				<artifactId>org.osgi.core</artifactId>
				<version>4.2.0</version>
			</dependency>
			<dependency>
				<groupId>org.apache.ant</groupId>
				<artifactId>ant-jsch</artifactId>
				<version>1.7.1</version>
			</dependency>
			<dependency>
				<groupId>com.jcraft</groupId>
				<artifactId>jsch</artifactId>
				<version>0.1.42</version>
			</dependency>
			<dependency>
				<groupId>ant-contrib</groupId>
				<artifactId>ant-contrib</artifactId>
				<version>20020829</version>
			</dependency>
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>4.10</version>
				<scope>test</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<!-- MAVEN REPOSITORIES -->
	<repositories>
		<repository>
			<id>oss-snapshots-repo</id>
			<name>Sonatype OSS Maven Repository</name>
			<url>https://oss.sonatype.org/content/groups/public</url>
			<releases>
				<enabled>false</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>

</project>