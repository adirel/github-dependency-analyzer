<?xml version="1.0"?>
<!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   Filename: $RCSfile$
   Purpose:  Ant build file for Jabref.

             Ant-Download: http://jakarta.apache.org/ant
             Ant-Manual:   http://jakarta.apache.org/ant/manual/index.html

             Jabref-Homepage:    http://jabref.sourceforge.net
             Jabref@SourceForge: http://sourceforge.net/projects/jabref
             Jabref@FreshMeat:   http://freshmeat.net
             Jabref-CVSRoot:     :pserver:anonymous@cvs.jabref.sourceforge.net:/cvsroot/jabref

             Further questions:
               help mailing list:      must be inserted

   Precondition: 1. Ant should be installed.
                 2. JAVA_HOME environment variable contains the path to JDK1.5 or higher
                 3. ANT_HOME environment variable contains the path to ant's home directory

   Language: XML
   Compiler: Ant
   Authors:  Joerg K. Wegner, wegnerj@informatik.uni-tuebingen.de
             Morten O. Alver
   Version:  $Revision: 3659 $
             $Date: 2011-09-20 19:27:15 +0200 (Di, 20 Sep 2011) $
             $Author: chris-docear $

   modified:
             23.11.2006 c.oezbek
             - tried to fix classpath issues
             28.07.2005 r.nagel
             - insert dynamic build info generation (resource/build.properties)
             - copy fonts directory, used by the new about dialog
             - change static "version" into mainfest file into ${jabref.version}
             09.06.2005 r.nagel
             - bugfix, first it should be made a rebuild of the build directory
             and then a jar should be generated from this directory
             - take all files for the jar archive !!! FROM BUILD directory !!!

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<project name="JabRef" default="jars" basedir=".">

	<!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        PROPERTY SETUP
     +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

	<!-- some version information -->
	<property name="jabref.version" value="2.7.1" />
	<property name="jabref.placeholder.version" value="@version@" />
	<!-- used by replace task -->

	<!-- Set the properties for intermediate directory -->
	<property name="build.jar" value="JabRef-${jabref.version}.jar" />
	<property name="build.dir" value="build" />
	<property name="build.classes" value="${build.dir}/classes" />
	<property name="build.tmp" value="${build.dir}/tmp" />
	<property name="build.osx" value="${build.dir}/classes/osxadapter" />
	<property name="build.lib" value="${build.dir}/lib" />
	<property name="build.win" value="${build.dir}/windows" />
	<property name="build.images" value="${build.dir}/images" />
	<property name="build.fonts" value="${build.dir}/images/font" />
	<property name="build.resource" value="${build.dir}/resource" />
	<property name="build.help" value="${build.dir}/help" />
	<property name="build.javadocs" value="${build.dir}/docs/API" />
	<property name="build.extensions" value="${build.dir}/extensions" />
	<property name="build.extension-javadocs" value="${build.extensions}/API" />
	<property name="build.extension-layout" value="${build.extensions}/layout" />
	<property name="build.openoffice.meta" value="${build.resource}/openoffice" />
	<property name="build.tests" value="${build.dir}/tests" />

	<!-- Set the properties for source directories -->
	<property name="src.dir" value="src" />
	<property name="src.tests" value="src/java/tests" />
	<property name="plugin.dir" value="src/plugins/" />
	<property name="txt.dir" value="src/txt" />
	<property name="java.dir" value="${src.dir}/java" />
	<property name="osx.dir" value="${src.dir}/osx" />
	<property name="win.installer.dir" value="${src.dir}/windows/nsis" />
	<property name="resource.dir" value="${src.dir}/resource" />
	<property name="bin.dir" value="${src.dir}/scripts" />
	<property name="images.dir" value="${src.dir}/images" />
	<property name="fonts.dir" value="${src.dir}/images/font" />
	<property name="help.dir" value="${src.dir}/help" />
	<property name="extensions.dir" value="${src.dir}/extensions" />
	<property name="layout.dir" value="${src.dir}/resource/layout" />
	<property name="lib.dir" value="lib" />
	<property name="tests.dir" value="${src.dir}/tests" />

	<property name="nsis.executable" value="makensis.exe"/>
	<property name="nsis.executable.linux" value="makensis"/>

	<!-- Load user dependent properties -->
	<!-- For instance to redefine the NSIS-compiler write 
		nsis.executable="d:\prog\dev\NSIS\makensis.exe"
	  -->
	<property file="user.properties" />

	<!-- win.installer can only be build under Windows if the nsis.executable is found -->
	<condition property="is.windows">
	  <and>
	    <isset property="nsis.executable" />
	    <os family="windows" />
	  </and>
	</condition>

	<fileset id="jarsFileset" dir="${lib.dir}">
		<include name="antlr.jar" />
		<include name="antlr-3.0b5.jar" />
		<include name="looks-2.3.1.jar" />
		<include name="forms-1.1.0.jar" />
		<include name="spin.jar" />
		<include name="glazedlists-1.7.0_java15.jar" />
		<include name="microba.jar" />
		<include name="PDFBox-0.7.3-dev-reduced.jar" />
		<include name="JempBox-0.2.0.jar" />
		<include name="zoom-java.jar" />
    	<include name="mysql-connector-java-5.0.7-bin.jar" />
        <!--<include name="substance-4.1.jar" />-->
        <!-- Plugin runtime dependencies -->
		<include name="plugin/JPFCodeGenerator-rt.jar" />
		<include name="plugin/jpf.jar" />
		<include name="plugin/jpf-boot.jar" />
		<include name="plugin/commons-logging.jar" />
	</fileset>
    <!-- Done by MrDlib -->
    <fileset id="splJars" dir="${lib.dir}">
        <include name="spl/**/*.jar" />
        <include name="spl/*.jar" />
    </fileset>
	<fileset id="deletableMeta-InfFiles" dir="${build.tmp}/META-INF">
	        <exclude name="services/**/*" />	        
	</fileset>
    <!-- Done by MrDlib -->

	<!-- Build classpath -->
	<path id="classpath">
		<pathelement path="${build.classes}" />
		<pathelement path="${build.dir}" />
        <!-- Done by MrDlib -->
        <pathelement path="${lib.dir}/spl" />
        <fileset refid="splJars" />
        <!-- Done by MrDlib -->
		<fileset refid="jarsFileset" />
	</path>

	<!-- Classpath for running the code generator -->
	<path id="codegenerator">
		<pathelement location="${lib.dir}/plugin/JPFCodeGenerator.jar" />
		<pathelement location="${lib.dir}/plugin/jpf.jar" />
		<pathelement location="${lib.dir}/plugin/jpf-boot.jar" />
		<pathelement location="${lib.dir}/plugin/velocity-dep-1.5.jar" />
	</path>

	<!-- Classpath for tests -->
	<path id="classpathTest">
		<path refid="classpath" />
		<pathelement location="${lib.dir}/junit.jar" />
	</path>

	<target name="run" depends="build">
		<java classname="net.sf.jabref.JabRefMain" fork="true">
			<classpath refid="classpath" />
		</java>
	</target>

	<!-- Runs project -->
	<target name="runFromJar">
		<java dir="${build.lib}" classname="net.sf.jabref.JabRefMain" fork="true">
			<classpath>
				<pathelement location="${build.lib}/${build.jar}" />
			</classpath>
		</java>
	</target>

	<!-- Only rerun the code generator if plug-in xml or jars are newer than generated java file. -->
	<uptodate property="needsNoRegenerate" targetfile="${java.dir}/net/sf/jabref/plugin/core/generated/_JabRefPlugin.java">
		<srcfiles dir=".">
			<include name="${plugin.dir}/**/plugin.xml" />
			<include name="${lib.dir}/plugin/*.jar" />
		</srcfiles>
	</uptodate>

	<!-- Run the JPF Code Generator -->
	<target name="generate" unless="needsNoRegenerate">
		<java classname="net.sf.jabref.plugin.util.CodeGenerator" fork="true">
			<arg value="${plugin.dir}" />
			<classpath refid="codegenerator" />
		</java>
	</target>

	<!-- Compiles project excluding tests -->
	<target name="compile" depends="generate">
		<mkdir dir="${build.classes}" />
		<javac debug="on" deprecation="on" destdir="${build.classes}" encoding="UTF8"
		   source="1.5" target="1.5">
			<src path="${java.dir}" />
			<exclude name="tests/**" />
			<exclude name="**/JabRefMain.java" />
			<classpath refid="classpath" />
		</javac>
		<javac debug="off" deprecation="on" destdir="${build.classes}" source="1.4" target="1.4">
			<src path="${java.dir}" />
			<include name="**/JabRefMain.java" />
		</javac>
	</target>

	<!-- Compiles project including tests -->
	<target name="compiletest">
		<mkdir dir="${build.classes}" />
		<javac debug="on" destdir="${build.classes}" source="1.5" target="1.5">
			<src path="${java.dir}" />
			<include name="tests/**" />
			<classpath refid="classpathTest" />
		</javac>
	</target>

	<!-- Builds the OSXAdapter -->
	<target name="osx">
		<mkdir dir="${build.classes}" />

		<javac srcdir="${osx.dir}" debug="off" destdir="${build.classes}" target="1.5">
		</javac>
	</target>

	<!-- Copies in the OSXAdapter class, which is compilable only on Mac  -->
	<target name="non_osx">
		<mkdir dir="${build.osx}" />
		<copy file="${lib.dir}/OSXAdapter.class" todir="${build.osx}" />
	</target>

	<!-- Jars up project -->
	<target name="jars" depends="build, unjarlib">
		<mkdir dir="${build.lib}" />
        
		<mkdir dir="${build.tmp}" />
		<jar destfile="${build.lib}/${build.jar}" > 

			<fileset dir="${build.classes}" />
			<fileset dir="${build.tmp}" />
			<fileset dir="${build.dir}">
				<include name="images/**" />
				<include name="help/**" />
				<include name="help/de/**" />
				<include name="help/no/**" />
				<include name="resource/**" />
			</fileset>

			<!-- Add Plugins -->
			<fileset dir="${src.dir}">
				<include name="plugins/**" />
			</fileset>
             <!-- Done by MrDlib -->
            <fileset dir ="${java.dir}">
                <include name="spl/localization/spljabref.properties"/>
                <include name="spl/gui/ajax-loader.gif"/>
                <include name="spl/gui/mrdlib header.png"/>
            </fileset>
            <!-- Done by MrDlib -->
			<fileset dir="${lib.dir}">
				<include name="EndNote.zip" />
			</fileset>
			<fileset dir="${txt.dir}">
				<include name="gpl.txt" />
				<include name="lesser.txt" />
				<include name="jgoodies.txt" />
				<include name="README" />
			</fileset>
			<manifest>
				<attribute name="Main-Class" value="net.sf.jabref.JabRefMain" />
                <attribute name="Class-Path" value="." />
			</manifest>
		</jar>
		
		<copy file="${build.lib}/${build.jar}" todir="${build.dir}/../../docear_plugin_bibtex/lib"/>		  

	</target>

	<!-- copy all necessary files and insert version informations -->
	<target name="build" depends="compile, buildinfos" description="Build project">

		<mkdir dir="${build.resource}" />

		<copy todir="${build.resource}">
			<fileset dir="${resource.dir}">
				<include name="**" />
			</fileset>
		</copy>
		<mkdir dir="${build.images}" />
		<copy todir="${build.images}">
			<fileset dir="${images.dir}">
				<include name="**" />
			</fileset>
		</copy>

		<mkdir dir="${build.help}" />
		<copy todir="${build.help}">
			<fileset dir="${help.dir}" />
		</copy>

		<!-- Insert version informations -->
		<replace dir="${build.help}" token="${jabref.placeholder.version}" value="${jabref.version}">
			<include name="**/About.html" />
		</replace>
		<replace dir="${build.openoffice.meta}" token="${jabref.placeholder.version}" value="${jabref.version}">
			<include name="meta.xml" />
		</replace>

	</target>

	<!-- Prepare for testing -->
	<target name="buildtest" depends="build, compiletest" description="Build project for testing">

		<mkdir dir="${build.tests}" />
		<copy todir="${build.tests}">
			<fileset dir="${tests.dir}">
				<include name="**" />
			</fileset>
		</copy>
	</target>

	<!-- generate and save some build infos !!! necessary for dynamic build infos !!! -->
	<!-- todo : replace it by the replace task :-),
          src/resource/build.properties = template
          build/resource/build.properties = real info file
	-->
	<target name="buildinfos">
		<tstamp />
		<!-- get date -->
		<buildnumber />
		<!-- generate new build number -> build.number -->
		<echo message="build number = ${build.number}" />
		<!-- write the file, please do not edit this lines -->
		<echo file="${resource.dir}/build.properties">builddate=${TODAY}
build=${build.number}
version=${jabref.version}</echo>
	</target>


	<!-- Creates all docs -->
	<target name="docs" depends="javadocs" description="Generates all the documentation" />

	<!-- Creates javadocs -->
	<target name="javadocs" depends="compile" description="Generates the javadocs">
		<mkdir dir="${build.javadocs}" />
		<javadoc sourcepath="${java.dir}" destdir="${build.javadocs}" author="true" version="true" windowtitle="JabRef API" link="http://java.sun.com/j2se/1.4.1/docs/api/">

			<fileset dir="${java.dir}" defaultexcludes="yes">
				<include name="**/*.java" />
			</fileset>

			<classpath refid="classpath" />
		</javadoc>
	</target>

	<!-- Creates javadocs for the extensions -->
	<target name="extension-javadocs" depends="build" description="Generates the javadocs for the extensions archive">
		<mkdir dir="${build.extension-javadocs}" />
		<copy todir="${build.extension-javadocs}">
			<fileset dir="${help.dir}" defaultexcludes="yes">
				<include name="CustomExports.html" />
				<include name="CustomImports.html" />
			</fileset>
		</copy>

		<javadoc sourcepath="${java.dir}" destdir="${build.extension-javadocs}" author="true" version="true" windowtitle="JabRef-Extensions API" link="http://java.sun.com/j2se/1.4.1/docs/api/" Overview="${extensions.dir}/API/overview.html" access="protected">
			<!-- 
                 create javadoc only selectively for classes that 
                 users extending JabRef are likely to use
              -->
			<fileset dir="${java.dir}" defaultexcludes="yes">
				<include name="net/sf/jabref/imports/ImportFormat.java" />
				<include name="net/sf/jabref/imports/ImportFormatReader.java" />
				<include name="net/sf/jabref/BibtexEntry.java" />
				<include name="net/sf/jabref/BibtexEntryType.java" />
				<include name="net/sf/jabref/AuthorList.java" />
				<include name="net/sf/jabref/AuthorList.java" />
				<include name="net/sf/jabref/export/layout/LayoutFormatter.java" />
			</fileset>

			<classpath refid="classpath" />
		</javadoc>
	</target>

	<!-- Creates javadocs for the extensions -->
	<target name="extensions" depends="extension-javadocs" description="Generates the extensions archive">
		<!-- copy examples -->
		<copy todir="${build.extensions}">
			<fileset dir="${java.dir}">
				<include name="net/sf/jabref/export/layout/format/CurrentDate.java" />
				<include name="net/sf/jabref/export/layout/format/ToLowerCase.java" />
				<include name="net/sf/jabref/export/layout/format/HTMLChars.java" />
				<include name="net/sf/jabref/imports/*Importer.java" />
			</fileset>
		</copy>
		<mkdir dir="${build.extension-layout}" />
		<copy todir="${build.extension-layout}">
			<fileset dir="${layout.dir}" />
		</copy>
		<copy todir="${build.extensions}">
			<fileset dir="${extensions.dir}" />
			<filterset>
				<filter token="version" value="${jabref.version}" />
			</filterset>
		</copy>
		<!-- create extensions-zip file -->
		<zip destfile="${build.dir}/jabref-extensions.zip">
			<zipfileset dir="${build.extensions}" prefix="jabref-extensions" />
		</zip>
	</target>

	<target name="clean" depends="win.installer.clean" description="Clean project">
		<delete dir="${build.dir}" />
	</target>

	<!-- Unpacks jar needed jar files from lib directory into temp directory. -->
	<target name="unjarlib" description="Unpacks jars from library">
		<mkdir dir="${build.tmp}" />
		<unjar dest="${build.tmp}">
			<fileset refid="jarsFileset" />
			<fileset refid="splJars" />
		</unjar>
		<!-- done by MrDlib -->
		<delete includeEmptyDirs="true">
			<fileset refid="deletableMeta-InfFiles" />
		</delete>
		<!-- done by MrDlib -->
		<!-- rename the microba license file -->
		<move file="${build.tmp}/license.txt" tofile="${build.tmp}/microba-license.txt" />
	</target>


	<target name="osxjar">
		<jarbundler dir="${build.lib}"
                    name="JabRef"
                    mainclass="net.sf.jabref.JabRef"
                    jars="${build.lib}/${build.jar}"
                    icon="${images.dir}/JabRef-Logo.icns"
                    version="${jabref.version}"
                    jvmversion="1.4+"
                    stubfile="${lib.dir}/JavaApplicationStub"
                    signature="JABr">
            <documenttype name="BibTeX file" extensions="bib" role="Editor"
                          iconFile="${images.dir}/JabRef-Logo.icns"/>
        </jarbundler>
	</target>


	<!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
	<!-- Build Windows Installer                                                    -->
	<!--                                                                            -->
	<!-- Don't forget to set nsis.executable property                               -->
	<!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

	<target name="win.installer.clean" description="Delete Installer and Exe-Wrapper + Temp-files">
		<delete failonerror="false" dir="${win.installer.dir}/dist" />
		<delete file="${win.installer.dir}/JabRefSetup.exe" />
	</target>

	<target name="win.installer" description="Copy files in place to be used by the installer" depends="jars">

		<fail unless="is.windows" message="Not running on windows or NSIS not found. Please make sure that user.properties exists" />

		<!-- Gather everything that will go into the installer in dist -->
		<mkdir dir="${win.installer.dir}/dist" />

		<copy file="${build.lib}/${build.jar}" todir="${win.installer.dir}/dist" />

		<available property="win.installer.jar.available" file="${win.installer.dir}/dist/${build.jar}" />

		<fail unless="win.installer.jar.available" message="Did not find jar: ${build.jar}" />

		<copy todir="${win.installer.dir}/dist">
			<fileset dir="${txt.dir}">
				<include name="gpl.txt" />
				<include name="lesser.txt" />
				<include name="README" />
			</fileset>
		</copy>

		<!-- "Create Exe-Wrapper" -->
		<exec dir="." executable="${nsis.executable}" failonerror="true">
		  <arg line="'/DJARFILE=${build.jar}' '/DVERSION=${jabref.version}' '/DAPPICON=../../../${images.dir}/JabRef.ico' ${win.installer.dir}/launcher.nsi" />
		</exec>

		<!-- Finally create Windows-Installer -->
		<exec dir="." executable="${nsis.executable}" failonerror="true">
			<arg line="'/DVERSION=${jabref.version}' ${win.installer.dir}/setup.nsi" />
		</exec>

		<delete dir="${win.installer.dir}/dist" />

	</target>

	<target name="win.installer.linux" description="Copy files in place to be used by the installer" depends="jars">

		<!-- Gather everything that will go into the installer in dist -->
		<mkdir dir="${win.installer.dir}/dist" />

		<copy file="${build.lib}/${build.jar}" todir="${win.installer.dir}/dist" />

		<available property="win.installer.jar.available" file="${win.installer.dir}/dist/${build.jar}" />

		<fail unless="win.installer.jar.available" message="Did not find jar: ${build.jar}" />

		<copy todir="${win.installer.dir}/dist">
			<fileset dir="${txt.dir}">
				<include name="gpl.txt" />
				<include name="lesser.txt" />
				<include name="README" />
			</fileset>
		</copy>

		<!-- "Create Exe-Wrapper" -->
		<exec dir="." executable="${nsis.executable.linux}" failonerror="true">
		  <arg line="'-DJARFILE=${build.jar}' '-DVERSION=${jabref.version}' '-DAPPICON=../../../${images.dir}/JabRef.ico' ${win.installer.dir}/launcher.nsi" />
		</exec>

		<!-- Finally create Windows-Installer -->
		<exec dir="." executable="${nsis.executable.linux}" failonerror="true">
			<arg line="'-DVERSION=${jabref.version}' ${win.installer.dir}/setup.nsi" />
		</exec>

		<delete dir="${win.installer.dir}/dist" />

	</target>

	<target name="test" depends="buildtest" description="Runs all unit tests">
		<java fork="yes" classname="junit.textui.TestRunner" failonerror="true">
			<arg value="tests.net.sf.jabref.AllTests" />
			<classpath refid="classpathTest" />
		</java>
	</target>


	<!--+++++++++++++++++++++++++++++++++++++++++++++++++
	   Auxiliary targets
	  +++++++++++++++++++++++++++++++++++++++++++++++++-->

	<target name="profile" depends="jars" description="Profile JabRef">
		<fail unless="netbeans.home">This target can only run inside the NetBeans IDE.</fail>

		<nbprofiledirect>
			<classpath refid="classpath" />
		</nbprofiledirect>

		<property environment="env" />
		<java fork="true" classname="net.sf.jabref.JabRef" dir="${build.dir}" jvm="${profiler.info.jvm}">
			<jvmarg value="${profiler.info.jvmargs.agent}" />
			<jvmarg line="${profiler.info.jvmargs}" />
			<env key="LD_LIBRARY_PATH" path="${profiler.info.agentpath}:${env.LD_LIBRARY_PATH}" />
			<classpath refid="classpath" />
		</java>
	</target>

	<!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        What's about the software design ?!;-)
    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

	<target name="pmd" description="SOFTWAREDESIGN: Project Mess Detector !;-)">
		<echo>Checking Project Mess Detection (PMD) rulesets.</echo>
		<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask">
			<classpath>
				<pathelement path="${classpath}" />
				<fileset dir="${lib.dir}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</taskdef>
		<!-- allowed Pretty Much Done rulsets -->
		<!-- rulesets/basic.xml -->
		<!-- rulesets/braces.xml -->
		<!-- rulesets/codesize.xml-->
		<!-- rulesets/controversial.xml-->
		<!-- rulesets/coupling.xml-->
		<!-- rulesets/design.xml -->
		<!-- rulesets/experimental.xml -->
		<!-- rulesets/favorites.xml -->
		<!-- rulesets/imports.xml -->
		<!-- rulesets/naming.xml -->
		<!-- rulesets/javabean.xml -->
		<!-- rulesets/junit.xml -->
		<!-- rulesets/scratchpad.xml -->
		<!-- rulesets/strictexception.xml -->
		<!-- rulesets/strings.xml -->
		<!-- rulesets/unusedcode.xml -->

		<pmd rulesetfiles="rulesets/unusedcode.xml,rulesets/basic.xml" failonerror="no">
			<formatter type="html" toFile="${build.dir}/pmd_report.html" />
			<fileset dir="${src.dir}">
				<include name="**/*.java" />
			</fileset>
		</pmd>

		<!-- check for duplicated code -->
		<echo>WARNING: use environment variable: ANT_OPTS=-Xmx512m or this task will fail.</echo>
		<echo>Checking for duplicated code using the Copy/Paste Detector (CPD).</echo>
		<taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask">
			<classpath>
				<pathelement path="${classpath}" />
				<fileset dir="${lib.dir}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</taskdef>
		<cpd format="text" minimumTokenCount="100" outputFile="${build.dir}/duplicated_code_report.txt">
			<fileset dir="${src.dir}">
				<include name="**/*.java" />
			</fileset>
		</cpd>
	</target>


	<target name="javancss" description="SOFTWAREDESIGN: Determining the NCSS and CCN code metrics for JOELib.">
		<taskdef name="javancss" classname="javancss.JavancssAntTask">
			<classpath>
				<pathelement path="${classpath}" />
				<fileset dir="${lib.dir}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</taskdef>
		<echo>Cyclomatic
Complexity             Ease of       Risk
Number (CCN)           maintenance
(McCabe metric)
---------------------------------------------
1-10, simple           easy          minimum
11-20, complex         moderate      moderate
21-50, more complex    hard          high
>50, unstable          very hard     very high

</echo>
		<javancss srcdir="${src.dir}" includes="**/*.java" excludes="jama/**/*.java, jmat/**/*.java, cformat/**/*.java" abortOnFail="false" ccnPerFuncMax="30" generateReport="true" outputfile="${build.dir}/javancss_report.plain" format="plain" packageMetrics="true" classMetrics="false" functionMetrics="false" />
	</target>

	<target name="jalopy" description="SOFTWAREDESIGN: source code formatter using the JOELib convention.">
		<taskdef name="jalopy" classname="de.hunsicker.jalopy.plugin.ant.AntPlugin">
			<classpath>
				<pathelement path="${classpath}" />
				<fileset dir="${lib.dir}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</taskdef>
		<jalopy fileformat="unix" convention="${src.dir}/java/jalopy.format.convention.xml" history="file" historymethod="adler32" loglevel="error" threads="2" classpathref="classpath" backup="bak">
			<fileset dir="${src.dir}">
				<include name="java/net/sf/jabref/**/*.java" />
			</fileset>
		</jalopy>
	</target>

	<taskdef name="jarbundler" classpath="${lib.dir}/jarbundler-2.2.0.jar" classname="net.sourceforge.jarbundler.JarBundler" />

</project>
<project name="GlobalFreeplane" default="dist" basedir=".">

	<target name="build">
		<ant antfile="freeplane_framework/ant/build.xml"  target="build"
			inheritAll="false" />
	</target>

	<target name="dist">
		<ant antfile="freeplane_framework/ant/build.xml"  target="dist"
			inheritAll="false" />
	</target>
	<target name="format-translation">
		<ant antfile="JOrtho_0.4_freeplane/build.xml"  target="format-translation"
			inheritAll="false" />
		<ant antfile="freeplane_framework/ant/build.xml"  target="format-translation"
			inheritAll="false" />
	</target>

	<target name="clean">
		<ant antfile="freeplane_framework/ant/build.xml"  target="clean"
			inheritAll="false" />

	<ant antfile="freeplane_ant/build.xml" target="clean"
			inheritAll="false" />

	<ant antfile="JOrtho_0.4_freeplane/build.xml" target="clean"
		inheritAll="false" />
	</target>

	<target name="cleandist" depends="clean, dist">
	</target>

</project>
<project name="docear" default="docear-dist" basedir="..">
	<property name="ApplicationName" value="Docear" />
	
	<scriptdef name="toLowerCase" language="javascript">
		<classpath>
			<fileset dir="./lib" includes="*.jar" />
		</classpath>
		<attribute name="property" />
		<attribute name="value" />
		if(attributes.get("value") != null || attributes.get("value") != "undefined"){
		   project.setNewProperty(attributes.get("property"), attributes.get("value").toLowerCase());
		}
	</scriptdef >
	
	<property name="workspace" location=".." />
	<property file="${workspace}/freeplane/viewer-resources/version.properties" />
	<property file="${workspace}/docear_plugin_core/resources/version.properties" />
	<property file="docear.version.properties" />
	<property file="ant/ant.properties" />
	<property name="freeplaneant.jar" value="${workspace}/freeplane_ant/dist/freeplaneant.jar" />
	<property name="root" value="." />
	<property name="build" value="${root}/build" />
	<property name="build4mac" value="${root}/build4mac" />
	<property name="build.plugins" value="${build}/plugins" />
	<property name="dist" value="${root}/dist" />
	<property name="macappfullpath" value="${build4mac}/${ApplicationName}.app" />
	<toLowerCase property="ApplicationNameToLowerCase" value="${ApplicationName}" />

	<property name="launcher_src" value="src" />
	<property name="launcher_manifest" value="${root}/META-INF/LAUNCHER_MANIFEST.MF" />
	<property name="launcher_build" value="${root}/launcher_build" />
	<property name="launcher_classpath" value="${framework.jar}" />
	
	<property name="debug" value="on" />
	<property name="java_source_version" value="1.6" />
	<property name="java_target_version" value="1.6" />
	<property name="build.compiler" value="modern" />

	<condition property="ver_freeplane" value="${freeplane_version}_${minor}" else="${freeplane_version}">
		<isset property="minor" />
	</condition>

	<property name="license" value="license.txt" />
	<property name="readme_src" value="readme.txt" />
	<property name="build.resources" value="${build}/resources" />
	<property name="build.doc" value="${build}/doc" />
	<property name="build.scripts" value="${build}/scripts" />
	<property name="script" value="${root}/script" />
	<property name="docear.version.status.incr" value="1" />
	
	<!-- Mac OS X -->
	<condition property="isMacOs">
		<os family="mac"/>
	</condition>

	<property name="mac-jarbundler" value = "${root}/mac-jarbundler"/>
	<property name="jarbundler.jar" value = "jarbundler-2.1.0.jar"/>
	<taskdef name="jarbundler" onerror="report"
			 classpath="${mac-jarbundler}/${jarbundler.jar}"
			 classname="net.sourceforge.jarbundler.JarBundler" />
	<taskdef name="create-plugin" onerror="report"
			 classpath="${freeplaneant.jar}"
			 classname="org.freeplane.ant.CreatePlugin"/>
	<taskdef name="nsis" onerror="report" 
		classpath="${root}/lib/nsisant-1.3.jar" 
		classname="com.danielreese.nsisant.Task" />

	<target name="makePlugin">
		<ant antfile="ant/build.xml" target="${anttarget}" dir="${workspace}/${plugindir}" inheritall="false" />
		<mkdir dir="${build}/${targetdir}/${pluginname}" />
		<copy todir="${build}/${targetdir}/${pluginname}">
			<fileset dir="${workspace}/${plugindir}/dist/${pluginname}" />
		</copy>
	</target>
	
	<target name="prepareDefaultVersion" unless="docear.version.status">
		<property name="docear.version.status" value="devel" />
		<propertyfile file="docear.version.properties">
			<entry key="docear.build.date" type="date" value="now" pattern="MM/dd/yyyy" />
		</propertyfile>
	</target>

	<target name="prepareDevelVersion" if="${docear_devel}">
		<antcall target="prepareDefaultVersion" />
	</target>

	<target name="prepareAlphaVersion" if="${docear_alpha}">
		<property name="docear.version.status" value="alpha" />
		<propertyfile file="docear.version.properties">
			<entry key="docear.build.date" type="date" value="now" pattern="MM/dd/yyyy" />
		</propertyfile>
	</target>

	<target name="prepareBetaVersion" if="${docear_beta}">
		<property name="docear.version.status" value="beta" />
		<propertyfile file="docear.version.properties">
			<entry key="docear.build.date" type="date" value="now" pattern="MM/dd/yyyy" />
			<entry key="docear.build.status.number" type="int" operation="+" value="1" />
		</propertyfile>
	</target>

	<target name="prepareRCVersion" if="${docear_rc}">
		<property name="docear.version.status" value="rc" />
		<propertyfile file="docear.version.properties">
			<entry key="docear.build.date" type="date" value="now" pattern="MM/dd/yyyy" />
		</propertyfile>
	</target>

	<target name="prepareMinorVersion" if="${docear_minor}">
		<property name="docear.version.status" value="stable" />
		<propertyfile file="docear.version.properties">
			<entry key="docear.build.date" type="date" value="now" pattern="MM/dd/yyyy" />
			<entry key="docear.build.version.minor" type="int" operation="+" value="1" />
			<entry key="docear.build.status.number" type="int" operation="=" value="0" />
		</propertyfile>
	</target>

	<target name="prepareMiddleVersion" if="${docear_middle}">
		<property name="docear.version.status" value="stable" />
		<propertyfile file="docear.version.properties">
			<entry key="docear.build.date" type="date" value="now" pattern="MM/dd/yyyy" />
			<entry key="docear.build.version.minor" type="int" operation="=" value="0" />
			<entry key="docear.build.version.middle" type="int" operation="+" value="1" />
			<entry key="docear.build.status.number" type="int" operation="=" value="0" />
		</propertyfile>
	</target>

	<target name="prepareMajorVersion" if="${docear_major}">
		<property name="docear.version.status" value="stable" />
		<propertyfile file="docear.version.properties">
			<entry key="docear.build.date" type="date" value="now" pattern="MM/dd/yyyy" />
			<entry key="docear.build.version.minor" type="int" operation="=" value="0" />
			<entry key="docear.build.version.middle" type="int" operation="=" value="0" />
			<entry key="docear.build.version.major" type="int" operation="+" value="1" />
			<entry key="docear.build.status.number" type="int" operation="=" value="0" />
			<entry key="docear.build.status" operation="=" value="${docear.version.status}" />
		</propertyfile>
	</target>

	<target name="prepareVersion" depends="prepareDevelVersion, prepareAlphaVersion, prepareBetaVersion, prepareRCVersion, prepareMinorVersion, prepareMiddleVersion, prepareMajorVersion, prepareDefaultVersion">
		<property name="docear.version.string" value="${docear.build.version.major}.${docear.build.version.middle}.${docear.build.version.minor}" />

		<buildnumber file="../docear_plugin_core/resources/build.number" />

		<propertyfile file="../docear_plugin_core/resources/version.properties">
			<entry key="build_date" type="date" value="now" pattern="MM/dd/yyyy" />
			<entry key="docear_version_status" operation="=" value="${docear.version.status}" />
			<entry key="docear_version_status_number" type="int" operation="=" value="${docear.build.status.number}" />
			<entry key="docear_version" operation="=" value="${docear.version.string}" />
		</propertyfile>

		<property name="ver_docear" value="${docear.version.string}.${docear.build.status.number}_${docear.version.status}_build${build.number}" />
		<condition property="ver" value="${ver_docear}" else="${ver_freeplane}">
			<equals arg1="${ApplicationNameToLowerCase}" arg2="docear" />
		</condition>
    </target>


	<target name="build_core" depends="prepareVersion"> 
		<echo>Docear Version = ${ver}.</echo>

		<mkdir dir="${build}" />
		<copy todir="${build}">
			<fileset dir="${script}" />
			<mapper type="regexp" from="(.*)${ApplicationNameToLowerCase}(.*)(\.bat|\.sh)" to="\1${ApplicationNameToLowerCase}\2\3" />
		</copy>
		<copy todir="${build}">
			<fileset dir="${script}" />
			<mapper type="regexp" from="(.*)${ApplicationNameToLowerCase}(.*)(\.exe)" to="\1${ApplicationNameToLowerCase}\2\3" />
		</copy>
		<copy todir="${build}">
			<fileset dir="${script}" />
			<regexpmapper from="(.*)${ApplicationNameToLowerCase}(.*)(\.svg|\.png)" to="\0" casesensitive="no" />
		</copy>
		<copy todir="${build}">
			<fileset dir="${script}">
				<patternset id="non.executables">
					<exclude name="**/*.bat" />
					<exclude name="**/*.sh" />
					<exclude name="**/*.svg" />
					<exclude name="**/*.png" />
				</patternset>
			</fileset>
			<fileset file="${framework.jar}" />
			<!--<fileset file="windows-launcher/${ApplicationNameToLowerCase}.exe" casesensitive="no" /-->
		</copy>
		<chmod file="${build}/${ApplicationNameToLowerCase}.sh" perm="ugo+rx" />
		
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="osgi_dist"/>
			<param name="targetdir" value="core"/>
			<param name="plugindir" value="freeplane"/>
			<param name="pluginname" value="org.freeplane.core"/>
		</antcall>
	</target>

	<target name="build_help" unless="skip_help">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist"/>
			<param name="targetdir" value="plugins"/>
			<param name="plugindir" value="freeplane_plugin_help"/>
			<param name="pluginname" value="org.freeplane.plugin.help"/>
		</antcall>
	</target>

	<target name="build_latex" unless="skip_latex">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist"/>
			<param name="targetdir" value="plugins"/>
			<param name="plugindir" value="freeplane_plugin_latex"/>
			<param name="pluginname" value="org.freeplane.plugin.latex"/>
		</antcall>
	</target>

	<target name="build_svg" unless="skip_svg">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist"/>
			<param name="targetdir" value="plugins"/>
			<param name="plugindir" value="freeplane_plugin_svg"/>
			<param name="pluginname" value="org.freeplane.plugin.svg"/>
		</antcall>
	</target>

	<target name="build_script" unless="skip_script">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist"/>
			<param name="targetdir" value="plugins"/>
			<param name="plugindir" value="freeplane_plugin_script"/>
			<param name="pluginname" value="org.freeplane.plugin.script"/>
		</antcall>
	</target>

	<target name="build_script_api" unless="skip_script">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="api"/>
			<param name="targetdir" value="plugins"/>
			<param name="plugindir" value="freeplane_plugin_script"/>
			<param name="pluginname" value="org.freeplane.plugin.script"/>
		</antcall>
	</target>

	<target name="build_formula" unless="skip_formula">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist"/>
			<param name="targetdir" value="plugins"/>
			<param name="plugindir" value="freeplane_plugin_formula"/>
			<param name="pluginname" value="org.freeplane.plugin.formula"/>
		</antcall>
	</target>

	<target name="build_bugreport" unless="skip_bugreport">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist"/>
			<param name="targetdir" value="plugins"/>
			<param name="plugindir" value="freeplane_plugin_bugreport"/>
			<param name="pluginname" value="org.freeplane.plugin.bugreport"/>
		</antcall>
	</target>

	<target name="build_openmaps" unless="skip_openmaps">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist" />
			<param name="targetdir" value="plugins" />
			<param name="plugindir" value="freeplane_plugin_openmaps" />
			<param name="pluginname" value="org.freeplane.plugin.openmaps"/>
		</antcall>
    </target>

	<target name="build_workspace" unless="skip_workspace">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist"/>
			<param name="targetdir" value="plugins"/>
			<param name="plugindir" value="freeplane_plugin_workspace"/>
			<param name="pluginname" value="org.freeplane.plugin.workspace"/>
		</antcall>
	</target>

	<target name="build_docear_core" unless="skip_docear">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist"/>
			<param name="targetdir" value="plugins"/>
			<param name="plugindir" value="docear_plugin_core"/>
			<param name="pluginname" value="org.docear.plugin.core"/>
		</antcall>
	</target>

	<target name="build_docear_services" unless="skip_docear">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist"/>
			<param name="targetdir" value="plugins"/>
			<param name="plugindir" value="docear_plugin_services"/>
			<param name="pluginname" value="org.docear.plugin.services"/>
		</antcall>
	</target>

	<target name="build_docear_pdfutilities" unless="skip_docear">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist"/>
			<param name="targetdir" value="plugins"/>
			<param name="plugindir" value="docear_plugin_pdfutilities"/>
			<param name="pluginname" value="org.docear.plugin.pdfutilities"/>
		</antcall>
	</target>

	<target name="build_docear_bibtex" depends="build_docear_jabref" unless="skip_docear">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist"/>
			<param name="targetdir" value="plugins"/>
			<param name="plugindir" value="docear_plugin_bibtex"/>
			<param name="pluginname" value="org.docear.plugin.bibtex"/>
		</antcall>
	</target>

<!--
	<target name="build_docear_dragbase" unless="skip_docear">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist"/>
			<param name="targetdir" value="plugins"/>
			<param name="plugindir" value="docear_plugin_dragbase"/>
			<param name="pluginname" value="org.docear.plugin.dragbase"/>
		</antcall>
	</target>
-->
	
	<target name="build_docear_jabref">
		<ant antfile="${workspace}/Jabref_Beta_2_7_Docear/build.xml" target="jars" dir="${workspace}/Jabref_Beta_2_7_Docear" inheritAll="false" />
	</target>
	
	<target name="build_launcher" depends="build_core">
		<mkdir dir="${launcher_build}" />
		<javac srcdir="${launcher_src}" destdir="${launcher_build}" classpath="${launcher_classpath}" 
			debug="${debug}" source="${java_source_version}" target="${java_target_version}" encoding="utf8"/>
		<jar jarfile="${freeplanelauncher.jar}" manifest="${launcher_manifest}">
			<fileset dir="${launcher_build}">
				<include name="**" />
			</fileset>
		</jar>
		
		<copy todir="${build}">
			<!--fileset dir="${script}" /-->
			<fileset file="${framework.jar}" />
			<fileset file="${freeplanelauncher.jar}" />
			<!--<fileset file="windows-icons/freeplaneIcons.dll" /-->
			<fileset dir="docear_launch4j" includes="*.exe" />
			<fileset dir="docear_launch4j" includes="*.ini" />
		</copy>
		<chmod file="${build}/${ApplicationNameToLowerCase}.sh" perm="ugo+rx" />
	</target>

	<target name="build" depends="build_core, build_latex, build_svg, build_script, build_formula, build_bugreport, build_openmaps
		   , build_workspace, build_docear_core, build_docear_services, build_docear_pdfutilities, build_docear_bibtex
		   , build_launcher, git_version_info">
		<mkdir dir="${build.resources}" />
		<copy todir="${build.resources}">
			<fileset dir="${workspace}/freeplane/dist/resources" />
			<fileset file="${dist}/gitinfo.properties"/>
		</copy>
		<mkdir dir="${build.doc}" />
		<copy todir="${build.doc}">
			<fileset dir="${workspace}/freeplane/dist/doc" />
		</copy>
		<mkdir dir="${build.scripts}" />
		<copy todir="${build.scripts}">
			<fileset dir="${workspace}/freeplane_plugin_script/scripts" />
		</copy>

	</target>

	<target name="javadoc" depends="build_script_api">
		<mkdir dir="${build.doc}" />
		<copy todir="${build.doc}">
			<fileset dir="${workspace}/freeplane_plugin_script/dist/doc" />
		</copy>
	</target>

	<target name="mkdistdir">
		<mkdir dir="${build}" />
		<mkdir dir="${dist}" />
	</target>


	<target name="rungit" depends="mkdistdir">
		<delete file="${build}/gitinfo.txt" quiet="true"/>
		<delete file="${dist}/git.properties" quiet="true"/>
		<exec dir="${build}" executable="git" output="${build}/gitinfo.txt"
			failifexecutionfails="false" failonerror="false" logError="true"
			resultproperty="gitresult">
			<arg value='log'/>
			<arg value='--pretty=format:git-revision=%h_%an_%ai'/>
			<arg value='-n1'/>
		</exec>
		<condition property="gitok" value="">
			<equals arg1="${gitresult}" arg2="0"/>
		</condition>
	</target>

	<target name="git_version_info" depends="rungit" unless="giterror">
		<native2ascii src="${build}" dest="${dist}" includes="gitinfo.txt" ext=".properties"/>
		<replaceregexp file="${dist}/gitinfo.properties" flags="g" byline="false" match="[^\w=-]" replace="" />
		<property file="${dist}/gitinfo.properties"/>
		<exec dir="${build}" executable="git" output="${build}/gitinfo.txt" append="true"
            failifexecutionfails="false" failonerror="false" logError="true">
			<arg value='branch'/>
		</exec>
	</target>

	<target name="binzip" depends="build">
		<zip destfile="${dist}/${ApplicationNameToLowerCase}_windows.zip" compress="true">
			<zipfileset dir="${build}" prefix="${ApplicationNameToLowerCase}-${ver}">
				<exclude name="${ApplicationNameToLowerCase}.sh" />
			</zipfileset>
			<zipfileset dir="${root}" prefix="${ApplicationNameToLowerCase}-${ver}">
				<include name="${license}" />
			</zipfileset>
		</zip>
		<tar destfile="${dist}/${ApplicationNameToLowerCase}_linux.tar.gz" compression="gzip" longfile="gnu">
			<tarfileset dir="${build}" prefix="${ApplicationNameToLowerCase}-${ver}" mode="644">
				<exclude name="${ApplicationNameToLowerCase}.sh" />
				<exclude name="${ApplicationNameToLowerCase}.bat" />
				<exclude name="${ApplicationNameToLowerCase}.exe" />
			</tarfileset>
			<tarfileset file="${build}/${ApplicationNameToLowerCase}.sh" mode="775" prefix="${ApplicationNameToLowerCase}-${ver}" />
			<tarfileset dir="${root}" prefix="${ApplicationNameToLowerCase}-${ver}" mode="644">
				<include name="${license}" />
			</tarfileset>
		</tar>
		<zip destfile="${dist}/${ApplicationNameToLowerCase}_allos.zip" compress="true">
			<zipfileset dir="${build}" prefix="${ApplicationNameToLowerCase}-${ver}">
				<exclude name="${ApplicationNameToLowerCase}.sh" />
			</zipfileset>
			<zipfileset file="${build}/${ApplicationNameToLowerCase}.sh" filemode="775" prefix="${ApplicationNameToLowerCase}-${ver}" />
			<zipfileset dir="${root}" prefix="${ApplicationNameToLowerCase}-${ver}">
				<include name="${license}" />
			</zipfileset>
		</zip>
	</target>

	<target name="srczip" depends="mkdistdir, git_version_info">
		<zip destfile="${dist}/${ApplicationNameToLowerCase}_source.zip" compress="true">
			<zipfileset prefix="${ApplicationNameToLowerCase}-${ver}" dir="${workspace}">
				<patternset id="freeplane.sources">
					<include name="build.xml" />
					<include name="freeplane/**" />
					<include name="freeplane_plugin*/**" />
					<include name="freeplane_ant/**" />
					<include name="freeplane_mac/**" />
					<include name="freeplane_framework/**" />
					<include name="freeplane_devresources/**" />
                    <include name="docear_plugin*/**" />
					<include name="JOrtho_0.4_freeplane/**" />
					<include name="build.xml" />
					<exclude name=".*/**" />
					<exclude name="**/~*" />
					<exclude name="**/backups/**" />
					<exclude name="bin/**" />
					<exclude name="build/**" />
					<exclude name="dist/**" />
					<exclude name="*/bin/**" />
					<exclude name="*/build/**" />
					<exclude name="*/launcher_build/**" />
					<exclude name="*/build-nodehighlighter/**" />
					<exclude name="*/build4mac/**" />
					<exclude name="*/dist/**" />
					<exclude name="**/.backup/**" />
					<exclude name="**/backups/**" />
					<exclude name="JOrtho_0.4_freeplane/src/dictionary_*.ortho" />
					<exclude name="docear_framework/windows-launcher/Objects/**" />
					<exclude name="docear_framework/windows-launcher/*.layout" />
					<exclude name="docear_framework/windows-launcher/Makefile.win" />
				</patternset>
			</zipfileset>
			<zipfileset prefix="${ApplicationNameToLowerCase}-${ver}" dir="${root}">
				<include name="${license}" />
				<include name="${readme_src}" />
			</zipfileset>
		</zip>

		<zip destfile="${dist}/${ApplicationNameToLowerCase}_srcpure.zip" compress="true">
			<zipfileset prefix="${ApplicationNameToLowerCase}-${ver}" dir="${workspace}">
				<patternset refid="freeplane.sources"/>
				<!-- this file is built from latex.flex using jflex! -->
				<exclude name="freeplane_plugin_script/src-jsyntaxpane/jsyntaxpane/lexers/LaTeXLexer.java"/>
				<exclude name="**/*.exe" />
				<exclude name="**/*.res" />
				<exclude name="**/*.jar" />
				<exclude name="**/*.dll" />
				<exclude name="**/*JavaApplicationStub*" />
			</zipfileset>
			<zipfileset prefix="${ApplicationNameToLowerCase}-${ver}" dir="${root}">
				<include name="${license}" />
				<include name="${readme_src}" />
			</zipfileset>
		</zip>
	</target>

	<target name="installer" depends="build, mkdistdir">
		<exec osfamily="windows" dir="${workspace}/freeplane_framework/windows-installer" executable="iscc.exe" failifexecutionfails="false" failonerror="true">
			<arg line="/Q Freeplane_without_Java.iss" />
		</exec>
	</target>

	<target name="portableinstaller" depends="build, mkdistdir">
		<property name="workingdir" value="${root}/temp/FreeplanePortable" />
		<delete quiet="true" includeemptydirs="false">
			<fileset dir="${workingdir}/.." />
		</delete>
		<mkdir dir="${workingdir}/App/Freeplane" />
		<copy todir="${workingdir}">
			<fileset dir="${root}/windows-portable" />
		</copy>
		<mkdir dir="${workingdir}/Other/Source" />
		<copy tofile="${workingdir}/Other/Source/EULA.txt">
			<fileset file="${workspace}/freeplane/resources/license.txt" />
		</copy>
		<copy tofile="${workingdir}/App/AppInfo/appicon.ico">
			<fileset file="launch4j/Freeplane_app.ico" />
		</copy>

		<copy todir="${workingdir}/App/Freeplane">
			<fileset dir="${build}">
				<exclude name="*.bat" />
				<exclude name="*.ini" />
				<exclude name="*.sh" />
			</fileset>
		</copy>
		<copy file="${root}/portableApps/portable.ini"  
			tofile="${workingdir}/App/Freeplane/freeplane.l4j.ini"/>

		<copy file="${root}/portableApps/portable.ini"  
			tofile="${workingdir}/App/Freeplane/freeplaneConsole.l4j.ini"/>

		<dirname property="workingdir.path" file="${workingdir}/file" />
		<exec osfamily="windows" executable="PortableApps.comInstaller.exe" failifexecutionfails="false" failonerror="true">
			<arg line="${workingdir.path}" />
		</exec>
		<move todir="${dist}">
			<fileset dir="${workingdir}/..">
				<include name="*.paf.exe" />
			</fileset>
		</move>

		<mkdir dir="${workingdir}/App/Freeplane/resources/images" />
		<copy file="${root}/portableApps/Splash.png"  
			tofile="${workingdir}/App/Freeplane/resources/images/Freeplane_splash.png"/>
		<exec osfamily="windows" executable="PortableApps.comInstaller.exe" failifexecutionfails="false" failonerror="true">
			<arg line="${workingdir.path}" />
		</exec>
		<move todir="${dist}">
			<mapper type="glob" from="*.paf.exe" to="*-Test.paf.exe"/>
			<fileset dir="${workingdir}/..">
				<include name="*.paf.exe" />
			</fileset>
		</move>

		<delete quiet="true" includeemptydirs="true">
			<fileset dir="${workingdir}/.." />
		</delete>

	</target>

	<!-- Mac OS X -->
	<target name="macosxapp" depends="build">

		<property name="macpluginsdir" value="plugins" />
		<!-- !! TODO: Delete this unused property, and also delete its use in below in the jarbundler vmoptions field
            Disabled "command-line" parameters because the "$1" syntax is probably incorrect here:
    <property name="macparams" value="-Dorg.freeplane.param1=$1 -Dorg.freeplane.param2=$2 -Dorg.freeplane.param3=$3 -Dorg.freeplane.param4=$4" />
    -->
		<property name="macdefines" value="-Dorg.knopflerfish.framework.bundlestorage=memory -Dorg.freeplane.globalresourcedir=./resources -Dorg.knopflerfish.gosg.jars=reference:file:./core/" />

		<!-- uncomment to start remote debug session for the app
	<property name="debugparams" value="-Xdebug -Xrunjdwp:transport=dt_socket,address=localhost:8000"/>
	-->

		<condition property="debugparams" else="">
			<isset property="debugparams"/>
		</condition>

		<!-- Delete any existing Docear.app (it's a directory) -->
		<mkdir dir="${build4mac}"/>
		<delete dir="${build4mac}/Docear.app"/>
		<jarbundler dir="${build4mac}"
                name="Docear"
                mainclass="org.knopflerfish.framework.Main"
                version="${ver}"
                infostring="${ApplicationName} ${ver}"
                shortname="${ApplicationName}"
                bundleid="org.${ApplicationNameToLowerCase}"
                jvmversion="1.6+"
                vmoptions="${debugparams} -Xmx512m ${macdefines}"
                arguments="-xargs ./props.xargs -xargs ./init.xargs"
                jar="${build}/framework.jar"
                icon="${mac-jarbundler}/docear.icns"
                stubfile="${mac-jarbundler}/FreeplaneJavaApplicationStub"
                signature="DCR"
                >
			<!-- For OSGI we want the entire build/ tree except WIndows-related stuff
             Commented out to allow testing jar=framework.jar
      <jarfileset dir="${macosgidir}">
        <exclude name="**/*.bat" />
        <exclude name="**/*.exe" />
      </jarfileset>
      -->

			<!-- Commenting out the document icon until we get an appropriate image
                    iconfile="${mac-jarbundler}/Banner.icns"
      -->
			<documenttype name="Mindmap"
                    extensions="mm"
                    ostypes="MM"
                    iconfile="${mac-jarbundler}/${ApplicationNameToLowerCase}.icns"
                    role="Editor"/>
		</jarbundler>
		<chmod file="${macappfullpath}/Contents/MacOS/FreeplaneJavaApplicationStub" perm="ugo+rx" />
		<!-- Patch the Info.plist file created by JarBundler, to work with Knopflerfish OSGI
           Courtesy of Volker who supplied the logic for this <replace> subtask
           Allows Freeplane to start when double-clicking on Freeplane.app in Finder
           Sets the WorkingDirectory to $JAVAROOT
              Found this idea in a post on Knopflerfish's SF site:
                http://sourceforge.net/tracker/index.php?func=detail&aid=1651148&group_id=82798&atid=567241
                The downloadable example code has problems but inspired the solution
    -->
		<echo message="Adding WorkingDirectory to Info.plist" />
		<property name="dist_macos_info" location="${macappfullpath}/Contents/Info.plist"/>
		<xslt style="${mac-jarbundler}/mac_info_plist.xslt"
			in ="${dist_macos_info}"
			out="${dist_macos_info}2"/>
		<move file="${dist_macos_info}2"
			  tofile="${dist_macos_info}"/>
		<!-- Done. -->

		<!-- Copy the entire build/ tree except WIndows-related stuff
          Also exclude the OSGI framework.jar which is copied by the jarbundler task
          Doing this separately to allow specifying jar=framework.jar in the jarbundler task
            jarbundler allows either jar= or jarfileset but not both
            Copying after the jarbundler task which creates the Freeplane.app directory
              JarBundler may erase the directory if it already exists
                This is documented in their change log
            !! TODO: Test restoring the jarfileset inside jarbundler
                       Comment out this copy task, and delete it if jarfileset works
    -->
		<property name="macjavafullpath" value="${macappfullpath}/Contents/Resources/Java"/>
		<copy todir="${macjavafullpath}">
			<fileset dir="${build}">
				<exclude name="**/*.bat" />
				<exclude name="**/*.exe" />
				<exclude name="**/framework.jar" />
			</fileset >
		</copy>

		<!-- Restore the eXecutable permission flags on the Unix script -->
		<echo message="Setting eXecutable permissions on ${macappfullpath}/Contents/Resources/Java/${ApplicationNameToLowerCase}.sh" />
		<chmod file="${macappfullpath}/Contents/Resources/Java/${ApplicationNameToLowerCase}.sh" perm="ugo+rx" />
	</target>

	<target name="zip4mac" depends="git_version_info, macosxapp">
		<zip destfile="${dist}/${ApplicationNameToLowerCase}_macos.zip" compress="true">
			<zipfileset dir="${build4mac}" prefix="${ApplicationNameToLowerCase}-${ver}">
				<exclude name="${macappfullpath}/Contents/MacOS/FreeplaneJavaApplicationStub"/>
			</zipfileset>
			<zipfileset file="${macappfullpath}/Contents/MacOS/FreeplaneJavaApplicationStub" filemode="775"
            	prefix="${ApplicationNameToLowerCase}-${ver}/${ApplicationName}.app/Contents/MacOS"/>
		</zip>
	</target>
	
	<target name="dmg4mac"  depends="git_version_info, macosxapp" if="isMacOs" >
		<exec executable="hdiutil">
			<arg line="create -srcfolder ${macappfullpath} ${dist}/${ApplicationNameToLowerCase}.dmg"/>
		</exec>
	</target>

	<target name="renameDistFiles" if="minor">
		<move todir="${dist}" includeemptydirs="false">
		    <fileset dir="${dist}">
		      <include name="*${freeplane_version}.*"/>
		    </fileset>
			<mapper type="regexp" from="^(.*[-_])${freeplane_version}(\..*)$" to="\1${ver}\2"/>
		  </move>
	</target>
	
	
	<target name="dist" depends="copyDistFiles, renameDistFiles">
		<checksum>
		  <fileset dir="${dist}">
		    <include name="*.dmg"/>
		    <include name="*.zip"/>
		    <include name="*.gz"/>
		    <include name="*.exe"/>
		  </fileset>
		</checksum>
	</target>

	<target name="copyDistFiles" depends="git_version_info, binzip, srczip, installer, portableinstaller, zip4mac, dmg4mac, javadoc">
		<copy file="${workspace}/freeplane/doc/history_en.txt"
			todir="${dist}" />
		<copy file="${build}/gitinfo.txt"
			tofile="${dist}/gitinfo-${ver}.txt"
			failonerror="false"/>
		<copy file="${workspace}/freeplane_plugin_script/dist/script-api.zip"
			tofile="${dist}/script-api-${ver}.zip"
			failonerror="false"/>
	</target>
	
	<target name="docear4mac"  depends="clean,  zip4mac" if="isMacOs" >
		<exec executable="hdiutil">
			<arg line="create -srcfolder ${macappfullpath} ${dist}/${ApplicationNameToLowerCase}.dmg"/>
		</exec>
	</target>
    
    <target name="sign4mac"  depends="macosxapp" if="isMacOs" >
        <exec executable="codesign">
            <arg line="--force --verify --verbose --sign &#34;Open Source Developer, Marcel Genzmehr&#34; ${macappfullpath}"/>
        </exec>
    </target>
	
	<target name="docear-nsis" depends="docear-bin">
		<nsis script="${root}/windows-installer/docear_windows_installer.nsi" verbosity="4" out="${root}/dist/nsis-build.log" noconfig="yes">
			<define name="VERSION" value="${ver_docear}" />
			<define name="BUILD" value="${build.number}" />
			<define name="DOCEAR_OUT_FILE" value="docear.exe" />
		</nsis>
	</target>
	
	<target name="docear-dist" depends="docear-bin">
		<checksum>
			<fileset dir="${dist}">
				<include name="*.dmg"/>
				<include name="*.zip"/>
				<include name="*.gz"/>
				<include name="*.exe"/>
			</fileset>
		</checksum>
	</target>
	
	<target name="docear-bin" depends="clean, git_version_info, binzip, srczip">
		<copy file="${workspace}/freeplane/doc/history_en.txt" 
			todir="${dist}" />
        <copy file="${build}/gitinfo.txt"
            tofile="${dist}/gitinfo-${ver}.txt"
            failonerror="false"/>
        <copy file="${workspace}/freeplane_plugin_script/dist/script-api.zip"
            tofile="${dist}/script-api-${ver}.zip"
            failonerror="false"/>
	</target>

	<target name="cleandist" depends="clean,dist">
	</target>

	<target name="check-translation">
		<ant antfile="ant/build.xml" target="check-translation" dir="${workspace}/freeplane" />
	</target>
	
	<target name="format-translation">
		<ant antfile="ant/build.xml" target="format-translation" dir="${workspace}/freeplane" />
	</target>
	
	<target name="format-translation-force">
		<ant antfile="ant/build.xml" target="format-translation-force" dir="${workspace}/freeplane" />
	</target>
	
	<target name="create-plugin">
		<create-plugin />
	</target>
	
	<target name="test">
		<ant antfile="build.xml" target="test" dir="${workspace}/freeplane_ant" inheritall="false" />
		<ant antfile="ant/build.xml" target="test" dir="${workspace}/freeplane_plugin_script" inheritall="false" />
		<ant antfile="ant/build.xml" target="test" dir="${workspace}/freeplane_uitest" inheritall="false" />
	</target>

	<target name="clean">
		<delete quiet="true" includeemptydirs="true">
			<fileset dir="${build}" />
			<fileset dir="${launcher_build}" />
			<fileset dir="${build4mac}" />
			<fileset dir="${dist}" />
		</delete>
		<ant antfile="ant/build.xml" target="clean" inheritall="false"
			  dir="${workspace}/freeplane"/>
		<ant antfile="ant/build.xml" target="clean" inheritall="false"
			  dir="${workspace}/freeplane_plugin_help"/>
		<ant antfile="ant/build.xml" target="clean" inheritall="false"
			  dir="${workspace}/freeplane_plugin_svg"/>
		<ant antfile="ant/build.xml" target="clean" inheritall="false"
			  dir="${workspace}/freeplane_plugin_latex"/>
		<ant antfile="ant/build.xml" target="clean" inheritall="false"
			  dir="${workspace}/freeplane_plugin_script"/>
		<ant antfile="ant/build.xml" target="clean" inheritall="false"
			  dir="${workspace}/freeplane_plugin_formula"/>
		<ant antfile="ant/build.xml" target="clean" inheritall="false"
			  dir="${workspace}/freeplane_plugin_bugreport"/>
		<ant antfile="ant/build.xml" target="clean" inheritall="false"
			  dir="${workspace}/freeplane_plugin_openmaps"/>
		<ant antfile="ant/build.xml" target="clean" inheritall="false"
			  dir="${workspace}/freeplane_plugin_workspace"/>
		<ant antfile="ant/build.xml" target="clean" inheritall="false" 
			  dir="${workspace}/docear_plugin_core" />
		<ant antfile="ant/build.xml" target="clean" inheritall="false" 
			  dir="${workspace}/docear_plugin_pdfutilities" />
		<ant antfile="ant/build.xml" target="clean" inheritall="false" 
			  dir="${workspace}/docear_plugin_bibtex" />
		<ant antfile="ant/build.xml" target="clean" inheritall="false" 
			  dir="${workspace}/docear_plugin_services" />
	</target>

</project>

<project name="docear" default="docear-bin" basedir="..">

	<scriptdef name="toLowerCase" language="javascript">
		<classpath>
			<fileset dir="./lib" includes="*.jar" />
		</classpath>
		<attribute name="property" />
		<attribute name="value" />
           if(attributes.get("value") != null || attributes.get("value") != "undefined"){
              project.setNewProperty(attributes.get("property"), attributes.get("value").toLowerCase());
           }
    </scriptdef >


	<property name="workspace" location=".." />
	<property file="${workspace}/freeplane/viewer-resources/version.properties" />
	<property file="${workspace}/docear_plugin_core/resources/version.properties" />
	<property file="docear.version.properties" />
	<property file="ant/ant.properties" />
	<property file="${workspace}/freeplane/viewer-resources/freeplane.properties" />
	<property name="freeplaneant.jar" value="${workspace}/freeplane_ant/dist/freeplaneant.jar" />
	<property name="root" value="." />
	<property name="build" value="${root}/build" />
	<property name="build4mac" value="${root}/build4mac" />
	<property name="build.plugins" value="${build}/plugins" />
	<property name="dist" value="${root}/dist" />
	<property name="macappfullpath" value="${build4mac}/Docear.app" />
	<toLowerCase property="ApplicationNameToLowerCase" value="${ApplicationName}" />
	<condition property="ver_freeplane" value="${freeplane_version}_${minor}" else="${freeplane_version}">
		<isset property="minor" />
	</condition>

	<property name="license" value="license.txt" />
	<property name="readme_src" value="readme.txt" />
	<property name="build.resources" value="${build}/resources" />
	<property name="build.doc" value="${build}/doc" />
	<property name="build.scripts" value="${build}/scripts" />
	<property name="script" value="${root}/script" />
	<property name="docear.version.status.incr" value="1" />

	<!-- Mac OS X -->
	<condition property="isMacOs">
		<os family="mac" />
	</condition>

	<property name="mac-jarbundler" value="${root}/mac-jarbundler" />
	<property name="jarbundler.jar" value="jarbundler-2.1.0.jar" />
	<taskdef name="jarbundler" onerror="report" classpath="${mac-jarbundler}/${jarbundler.jar}" classname="net.sourceforge.jarbundler.JarBundler" />
	<taskdef name="create-plugin" onerror="report" classpath="${freeplaneant.jar}" classname="org.freeplane.ant.CreatePlugin" />
	<taskdef name="nsis" classpath="${root}/lib/nsisant-1.3.jar" classname="com.danielreese.nsisant.Task" />
	<target name="makePlugin">
		<ant antfile="ant/build.xml" target="${anttarget}" dir="${workspace}/${plugindir}" inheritall="false" />
		<mkdir dir="${build}/${targetdir}/${pluginname}" />
		<copy todir="${build}/${targetdir}/${pluginname}">
			<fileset dir="${workspace}/${plugindir}/dist/${pluginname}" />
		</copy>
	</target>
    
    <target name="prepareDefaultVersion" unless="docear.version.status">
		<property name="docear.version.status" value="devel" />
		<propertyfile file="docear.version.properties">
			<entry key="docear.build.date" type="date" value="now" pattern="MM/dd/yyyy" />
		</propertyfile>
    </target>

	<target name="prepareDevelVersion" if="${docear_devel}">
        <antcall target="prepareDefaultVersion" />
	</target>

	<target name="prepareAlphaVersion" if="${docear_alpha}">
		<property name="docear.version.status" value="alpha" />
		<propertyfile file="docear.version.properties">
			<entry key="docear.build.date" type="date" value="now" pattern="MM/dd/yyyy" />
		</propertyfile>
	</target>

	<target name="prepareBetaVersion" if="${docear_beta}">
		<property name="docear.version.status" value="beta" />
		<propertyfile file="docear.version.properties">
			<entry key="docear.build.date" type="date" value="now" pattern="MM/dd/yyyy" />
			<entry key="docear.build.status.number" type="int" operation="+" value="1" />
		</propertyfile>
	</target>

	<target name="prepareRCVersion" if="${docear_rc}">
		<property name="docear.version.status" value="rc" />
		<propertyfile file="docear.version.properties">
			<entry key="docear.build.date" type="date" value="now" pattern="MM/dd/yyyy" />
		</propertyfile>
	</target>

	<target name="prepareMinorVersion" if="${docear_minor}">
		<property name="docear.version.status" value="stable" />
		<propertyfile file="docear.version.properties">
			<entry key="docear.build.date" type="date" value="now" pattern="MM/dd/yyyy" />
			<entry key="docear.build.version.minor" type="int" operation="+" value="1" />
			<entry key="docear.build.status.number" type="int" operation="=" value="0" />
		</propertyfile>
	</target>

	<target name="prepareMiddleVersion" if="${docear_middle}">
		<property name="docear.version.status" value="stable" />
		<propertyfile file="docear.version.properties">
			<entry key="docear.build.date" type="date" value="now" pattern="MM/dd/yyyy" />
			<entry key="docear.build.version.minor" type="int" operation="=" value="0" />
			<entry key="docear.build.version.middle" type="int" operation="+" value="1" />
			<entry key="docear.build.status.number" type="int" operation="=" value="0" />
		</propertyfile>
	</target>

	<target name="prepareMajorVersion" if="${docear_major}">
		<property name="docear.version.status" value="stable" />
		<propertyfile file="docear.version.properties">
			<entry key="docear.build.date" type="date" value="now" pattern="MM/dd/yyyy" />
			<entry key="docear.build.version.minor" type="int" operation="=" value="0" />
			<entry key="docear.build.version.middle" type="int" operation="=" value="0" />
			<entry key="docear.build.version.major" type="int" operation="+" value="1" />
			<entry key="docear.build.status.number" type="int" operation="=" value="0" />
			<entry key="docear.build.status" operation="=" value="${docear.version.status}" />
		</propertyfile>
	</target>

	<target name="prepareVersion" depends="prepareDevelVersion, prepareAlphaVersion, prepareBetaVersion, prepareRCVersion, prepareMinorVersion, prepareMiddleVersion, prepareMajorVersion, prepareDefaultVersion">
		<property name="docear.version.string" value="${docear.build.version.major}.${docear.build.version.middle}.${docear.build.version.minor}" />

		<buildnumber file="../docear_plugin_core/resources/build.number" />

		<propertyfile file="../docear_plugin_core/resources/version.properties">
			<entry key="build_date" type="date" value="now" pattern="MM/dd/yyyy" />
			<entry key="docear_version_status" operation="=" value="${docear.version.status}" />
			<entry key="docear_version_status_number" type="int" operation="=" value="${docear.build.status.number}" />
			<entry key="docear_version" operation="=" value="${docear.version.string}" />
		</propertyfile>

		<property name="ver_docear" value="${docear.version.string}.${docear.build.status.number}_${docear.version.status}_build${build.number}" />
		<condition property="ver" value="${ver_docear}" else="${ver_freeplane}">
			<equals arg1="${ApplicationNameToLowerCase}" arg2="docear" />
		</condition>
		<echo>Docear Version = ${ver}.</echo>
	</target>

	<target name="build_core" depends="prepareVersion">
		<mkdir dir="${build}" />
		<copy todir="${build}">
			<fileset dir="${script}" />
			<mapper type="regexp" from="(.*)freeplane(.*)(\.bat|\.sh)" to="\1${ApplicationNameToLowerCase}\2\3" />
		</copy>
		<copy todir="${build}">
			<fileset dir="${script}" />
			<mapper type="regexp" from="(.*)freeplane(.*)(\.exe)" to="\1${ApplicationNameToLowerCase}\2\3" />
		</copy>
		<copy todir="${build}">
			<fileset dir="${script}" />
			<regexpmapper from="(.*)${ApplicationNameToLowerCase}(.*)(\.svg|\.png)" to="\0" casesensitive="no" />
		</copy>
		<copy todir="${build}">
			<fileset dir="${script}">
				<patternset id="non.executables">
					<exclude name="**/*.bat" />
					<exclude name="**/*.sh" />
					<exclude name="**/*.svg" />
					<exclude name="**/*.png" />
				</patternset>
			</fileset>
			<fileset file="${framework.jar}" />
			<fileset file="windows-launcher/${ApplicationNameToLowerCase}.exe" casesensitive="no" />
		</copy>
		<chmod file="${build}/${ApplicationNameToLowerCase}.sh" perm="ugo+rx" />
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="osgi_dist" />
			<param name="targetdir" value="core" />
			<param name="plugindir" value="freeplane" />
			<param name="pluginname" value="org.freeplane.core" />
		</antcall>
	</target>


	<target name="build_help" unless="skip_help">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist" />
			<param name="targetdir" value="plugins" />
			<param name="plugindir" value="freeplane_plugin_help" />
			<param name="pluginname" value="org.freeplane.plugin.help" />
		</antcall>
	</target>

	<target name="build_latex" unless="skip_latex">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist" />
			<param name="targetdir" value="plugins" />
			<param name="plugindir" value="freeplane_plugin_latex" />
			<param name="pluginname" value="org.freeplane.plugin.latex" />
		</antcall>
	</target>

	<target name="build_svg" unless="skip_svg">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist" />
			<param name="targetdir" value="plugins" />
			<param name="plugindir" value="freeplane_plugin_svg" />
			<param name="pluginname" value="org.freeplane.plugin.svg" />
		</antcall>
	</target>

	<target name="build_script" unless="skip_script">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist" />
			<param name="targetdir" value="plugins" />
			<param name="plugindir" value="freeplane_plugin_script" />
			<param name="pluginname" value="org.freeplane.plugin.script" />
		</antcall>
	</target>

	<target name="build_script_api" unless="skip_script">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="api" />
			<param name="targetdir" value="plugins" />
			<param name="plugindir" value="freeplane_plugin_script" />
			<param name="pluginname" value="org.freeplane.plugin.script" />
		</antcall>
	</target>

	<target name="build_formula" unless="skip_formula">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist" />
			<param name="targetdir" value="plugins" />
			<param name="plugindir" value="freeplane_plugin_formula" />
			<param name="pluginname" value="org.freeplane.plugin.formula" />
		</antcall>
	</target>

	<target name="build_bugreport" unless="skip_bugreport">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist" />
			<param name="targetdir" value="plugins" />
			<param name="plugindir" value="freeplane_plugin_bugreport" />
			<param name="pluginname" value="org.freeplane.plugin.bugreport" />
		</antcall>
	</target>

	<target name="build_workspace" unless="skip_workspace">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist" />
			<param name="targetdir" value="plugins" />
			<param name="plugindir" value="freeplane_plugin_workspace" />
			<param name="pluginname" value="org.freeplane.plugin.workspace" />
		</antcall>
	</target>

	<target name="build_docear_core" unless="skip_core">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist" />
			<param name="targetdir" value="plugins" />
			<param name="plugindir" value="docear_plugin_core" />
			<param name="pluginname" value="org.docear.plugin.core" />
		</antcall>
	</target>

	<target name="build_docear_services" unless="skip_services">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist" />
			<param name="targetdir" value="plugins" />
			<param name="plugindir" value="docear_plugin_services" />
			<param name="pluginname" value="org.docear.plugin.services" />
		</antcall>
	</target>

	<target name="build_docear_pdfutilities" unless="skip_pdfutilities">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist" />
			<param name="targetdir" value="plugins" />
			<param name="plugindir" value="docear_plugin_pdfutilities" />
			<param name="pluginname" value="org.docear.plugin.pdfutilities" />
		</antcall>
	</target>

	<target name="build_docear_dragbase" unless="skip_dragbase">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist" />
			<param name="targetdir" value="plugins" />
			<param name="plugindir" value="docear_plugin_dragbase" />
			<param name="pluginname" value="org.docear.plugin.dragbase" />
		</antcall>
	</target>

	<target name="prepare_jabref">
		<ant antfile="${workspace}/Jabref_Beta_2_7_Docear/build.xml" target="jars" dir="${workspace}/Jabref_Beta_2_7_Docear" inheritAll="false" />
	</target>

	<target name="build_docear_bibtex" unless="skip_bibtex" depends="prepare_jabref">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist" />
			<param name="targetdir" value="plugins" />
			<param name="plugindir" value="docear_plugin_bibtex" />
			<param name="pluginname" value="org.docear.plugin.bibtex" />
		</antcall>
	</target>


	<target name="build" depends="build_core, build_latex, build_svg, build_script, build_formula, build_bugreport, 
    build_workspace, build_docear_core, build_docear_services, build_docear_pdfutilities, build_docear_bibtex, 
    bzr_version_info">
		<mkdir dir="${build.resources}" />
		<copy todir="${build.resources}">
			<fileset dir="${workspace}/freeplane/dist/resources" />
			<fileset file="${dist}/bzrinfo.properties" />
		</copy>
		<mkdir dir="${build.doc}" />
		<copy todir="${build.doc}">
			<fileset dir="${workspace}/freeplane/dist/doc" />
		</copy>
		<mkdir dir="${build.scripts}" />
		<copy todir="${build.scripts}">
			<fileset dir="${workspace}/freeplane_plugin_script/scripts" />
		</copy>

	</target>

	<target name="javadoc" depends="build_script_api">
		<mkdir dir="${build.doc}" />
		<copy todir="${build.doc}">
			<fileset dir="${workspace}/freeplane_plugin_script/dist/doc" />
		</copy>
	</target>

	<target name="mkdistdir">
		<mkdir dir="${build}" />
		<mkdir dir="${dist}" />
	</target>


	<target name="runbzr" depends="mkdistdir">
		<delete file="${build}/bzrinfo.txt" quiet="true" />
		<delete file="${dist}/bzr.properties" quiet="true" />
		<exec dir="${build}" executable="bzr" output="${build}/bzrinfo.txt" failifexecutionfails="false" failonerror="false" logError="true" resultproperty="bzrresult">
			<arg value="version-info" />
		</exec>
		<condition property="bzrok" value="">
			<equals arg1="${bzrresult}" arg2="0" />
		</condition>
	</target>

	<target name="bzr_version_info" depends="runbzr" unless="bzrerror">
		<native2ascii src="${build}" dest="${dist}" includes="bzrinfo.txt" ext=".properties" />
		<replaceregexp file="${dist}/bzrinfo.properties" byline="true" match=": " replace="=" />
		<replaceregexp file="${dist}/bzrinfo.properties" byline="true" match="^\w" replace="bzr-\0" />
		<property file="${dist}/bzrinfo.properties" />
		<property name="release-branch-nick" value="1_0_x" />
		<exec dir="${build}" executable="bzr" output="${build}/bzrinfo.txt" append="true" failifexecutionfails="false" failonerror="false" logError="true">
			<arg value="info" />
		</exec>
	</target>

	<target name="binzip" depends="build, mkdistdir">
		<zip destfile="${dist}/${ApplicationNameToLowerCase}_windows.zip" compress="true">
			<zipfileset dir="${build}" prefix="${ApplicationNameToLowerCase}-${ver}">
				<exclude name="${ApplicationNameToLowerCase}.sh" />
			</zipfileset>
			<zipfileset dir="${root}" prefix="${ApplicationNameToLowerCase}-${ver}">
				<include name="${license}" />
			</zipfileset>
		</zip>
		<tar destfile="${dist}/${ApplicationNameToLowerCase}_linux.tar.gz" compression="gzip" longfile="gnu">
			<tarfileset dir="${build}" prefix="${ApplicationNameToLowerCase}-${ver}" mode="644">
				<exclude name="${ApplicationNameToLowerCase}.sh" />
				<exclude name="${ApplicationNameToLowerCase}.bat" />
				<exclude name="${ApplicationNameToLowerCase}.exe" />
			</tarfileset>
			<tarfileset file="${build}/${ApplicationNameToLowerCase}.sh" mode="775" prefix="${ApplicationNameToLowerCase}-${ver}" />
			<tarfileset dir="${root}" prefix="${ApplicationNameToLowerCase}-${ver}" mode="644">
				<include name="${license}" />
			</tarfileset>
		</tar>
		<zip destfile="${dist}/${ApplicationNameToLowerCase}_allos.zip" compress="true">
			<zipfileset dir="${build}" prefix="${ApplicationNameToLowerCase}-${ver}">
				<exclude name="${ApplicationNameToLowerCase}.sh" />
			</zipfileset>
			<zipfileset file="${build}/${ApplicationNameToLowerCase}.sh" filemode="775" prefix="${ApplicationNameToLowerCase}-${ver}" />
			<zipfileset dir="${root}" prefix="${ApplicationNameToLowerCase}-${ver}">
				<include name="${license}" />
			</zipfileset>
		</zip>
	</target>

	<target name="srczip" depends="mkdistdir, bzr_version_info">
		<zip destfile="${dist}/${ApplicationNameToLowerCase}_source.zip" compress="true">
			<zipfileset prefix="${ApplicationNameToLowerCase}-${ver}" dir="${workspace}">
				<patternset id="freeplane.sources">
					<include name="build.xml" />
					<include name="freeplane/**" />
					<include name="freeplane_plugin*/**" />
					<include name="docear_plugin*/**" />
					<include name="Jabref_Beta_2_7_Docear/**" />
					<include name="freeplane_ant/**" />
					<include name="freeplane_mac/**" />
					<include name="freeplane_framework/**" />
					<include name="docear_framework/**" />
					<include name="freeplane_devresources/**" />
					<include name="JOrtho_0.4_freeplane/**" />
					<include name="build.xml" />
					<exclude name=".*/**" />
					<exclude name="**/~*" />
					<exclude name="**/backups/**" />
					<exclude name="bin/**" />
					<exclude name="build/**" />
					<exclude name="dist/**" />
					<exclude name="*/bin/**" />
					<exclude name="*/build/**" />
					<exclude name="*/build4mac/**" />
					<exclude name="*/dist/**" />
					<exclude name="**/.backup/**" />
					<exclude name="**/backups/**" />
					<exclude name="JOrtho_0.4_freeplane/src/dictionary_*.ortho" />
					<exclude name="freeplane_framework/windows-launcher/Objects/**" />
					<exclude name="freeplane_framework/windows-launcher/*.layout" />
					<exclude name="freeplane_framework/windows-launcher/Makefile.win" />
					<exclude name="docear_framework/windows-launcher/Objects/**" />
					<exclude name="docear_framework/windows-launcher/*.layout" />
					<exclude name="docear_framework/windows-launcher/Makefile.win" />
				</patternset>
			</zipfileset>
			<zipfileset prefix="${ApplicationNameToLowerCase}-${ver}" dir="${root}">
				<include name="${license}" />
				<include name="${readme_src}" />
			</zipfileset>
		</zip>

		<zip destfile="${dist}/${ApplicationNameToLowerCase}_srcpure.zip" compress="true">
			<zipfileset prefix="${ApplicationNameToLowerCase}-${ver}" dir="${workspace}">
				<patternset refid="freeplane.sources" />
				<exclude name="**/*.exe" />
				<exclude name="**/*.res" />
				<exclude name="**/*.jar" />
				<exclude name="**/*JavaApplicationStub*" />
			</zipfileset>
			<zipfileset prefix="${ApplicationNameToLowerCase}-${ver}" dir="${root}">
				<include name="${license}" />
				<include name="${readme_src}" />
			</zipfileset>
		</zip>
	</target>

	<target name="installer" depends="build, mkdistdir">
		<exec osfamily="windows" dir="${workspace}/freeplane_framework/windows-installer" executable="iscc.exe" failifexecutionfails="false" failonerror="true">
			<arg line="/Q Freeplane_without_Java.iss" />
		</exec>
	</target>

	<target name="portableinstaller" depends="build, mkdistdir">
		<property name="workingdir" value="${root}/temp/FreeplanePortable" />
		<delete quiet="true" includeemptydirs="false">
			<fileset dir="${workingdir}/.." />
		</delete>
		<mkdir dir="${workingdir}/App/Freeplane" />
		<copy todir="${workingdir}">
			<fileset dir="${root}/windows-portable" />
			<fileset file="windows-launcher/freeplanePortable.exe" />
		</copy>
		<mkdir dir="${workingdir}/Other/Source" />
		<copy tofile="${workingdir}/Other/Source/EULA.txt">
			<fileset file="${workspace}/freeplane/resources/license.txt" />
		</copy>
		<copy tofile="${workingdir}/App/AppInfo/appicon.ico">
			<fileset file="windows-launcher/Freeplane_app.ico" />
		</copy>

		<copy todir="${workingdir}/App/Freeplane">
			<fileset dir="${build}">
				<exclude name="*.exe" />
				<exclude name="*.bat" />
				<exclude name="*.sh" />
			</fileset>
		</copy>
		<dirname property="workingdir.path" file="${workingdir}/file" />
		<exec osfamily="windows" executable="PortableApps.comInstaller.exe" failifexecutionfails="false" failonerror="true">
			<arg line="${workingdir.path}" />
		</exec>
		<move todir="${dist}">
			<fileset dir="${workingdir}/..">
				<include name="*.paf.exe" />
			</fileset>
		</move>

		<delete quiet="true" includeemptydirs="true">
			<fileset dir="${workingdir}/.." />
		</delete>

	</target>

	<!-- Mac OS X -->
	<target name="macosxapp" depends="build">

		<property name="macpluginsdir" value="plugins" />
		<!-- !! TODO: Delete this unused property, and also delete its use in below in the jarbundler vmoptions field
            Disabled "command-line" parameters because the "$1" syntax is probably incorrect here:
    <property name="macparams" value="-Dorg.freeplane.param1=$1 -Dorg.freeplane.param2=$2 -Dorg.freeplane.param3=$3 -Dorg.freeplane.param4=$4" />
    -->
		<property name="macdefines" value="-Dorg.knopflerfish.framework.bundlestorage=memory -Dorg.freeplane.globalresourcedir=./resources -Dorg.knopflerfish.gosg.jars=reference:file:./core/" />

		<!-- uncomment to start remote debug session for the app
	<property name="debugparams" value="-Xdebug -Xrunjdwp:transport=dt_socket,address=localhost:8000"/>
	-->

		<condition property="debugparams" else="">
			<isset property="debugparams" />
		</condition>

		<!-- Delete any existing Docear.app (it's a directory) -->
		<mkdir dir="${build4mac}" />
		<delete dir="${build4mac}/Docear.app" />
		<jarbundler dir="${build4mac}" name="Docear" mainclass="org.knopflerfish.framework.Main" version="${ver}" infostring="Docear-${ver_docear}" shortname="Docear" bundleid="org.freeplane.core" jvmversion="1.2+" vmoptions="${debugparams} -Xmx512m ${macdefines}" arguments="-xargs ./props.xargs -xargs ./init.xargs" jar="${build}/framework.jar" icon="${mac-jarbundler}/docear.icns" stubfile="${mac-jarbundler}/FreeplaneJavaApplicationStub" signature="FP">
			<!-- For OSGI we want the entire build/ tree except WIndows-related stuff
             Commented out to allow testing jar=framework.jar
      <jarfileset dir="${macosgidir}">
        <exclude name="**/*.bat" />
        <exclude name="**/*.exe" />
      </jarfileset>
      -->

			<!-- Commenting out the document icon until we get an appropriate image
                    iconfile="${mac-jarbundler}/Banner.icns"
      -->
			<documenttype name="Mindmap" extensions="mm" ostypes="MM" iconfile="${mac-jarbundler}/docear.icns" role="Editor" />
		</jarbundler>
		<chmod file="${macappfullpath}/Contents/MacOS/FreeplaneJavaApplicationStub" perm="ugo+rx" />
		<!-- Patch the Info.plist file created by JarBundler, to work with Knopflerfish OSGI
           Courtesy of Volker who supplied the logic for this <replace> subtask
           Allows Freeplane to start when double-clicking on Docear.app in Finder
           Sets the WorkingDirectory to $JAVAROOT
              Found this idea in a post on Knopflerfish's SF site:
                http://sourceforge.net/tracker/index.php?func=detail&aid=1651148&group_id=82798&atid=567241
                The downloadable example code has problems but inspired the solution
    -->
		<echo message="Adding WorkingDirectory to Info.plist" />
		<replace file="${macappfullpath}/Contents/Info.plist">
		    <replacetoken><![CDATA[<string>org.knopflerfish.framework.Main</string>]]></replacetoken>
		    <replacevalue><![CDATA[<string>org.knopflerfish.framework.Main</string>
<key>WorkingDirectory</key>
	<string>$JAVAROOT</string>]]></replacevalue>
		</replace>

		<!-- Copy the entire build/ tree except WIndows-related stuff
          Also exclude the OSGI framework.jar which is copied by the jarbundler task
          Doing this separately to allow specifying jar=framework.jar in the jarbundler task
            jarbundler allows either jar= or jarfileset but not both
            Copying after the jarbundler task which creates the Docear.app directory
              JarBundler may erase the directory if it already exists
                This is documented in their change log
            !! TODO: Test restoring the jarfileset inside jarbundler
                       Comment out this copy task, and delete it if jarfileset works
    -->
		<property name="macjavafullpath" value="${macappfullpath}/Contents/Resources/Java" />
		<copy todir="${macjavafullpath}">
			<fileset dir="${build}">
				<exclude name="**/*.bat" />
				<exclude name="**/*.exe" />
				<exclude name="**/framework.jar" />
			</fileset >
		</copy>

		<!-- Restore the eXecutable permission flags on the Unix script -->
		<echo message="Setting eXecutable permissions on ${macappfullpath}/Contents/Resources/Java/docear.sh" />
		<chmod file="${macappfullpath}/Contents/Resources/Java/docear.sh" perm="ugo+rx" />
	</target>

	<target name="zip4mac" depends="bzr_version_info, macosxapp">
		<zip destfile="${dist}/${ApplicationNameToLowerCase}_macos.zip" compress="true">
			<zipfileset dir="${build4mac}" prefix="${ApplicationNameToLowerCase}-${ver}">
				<exclude name="${macappfullpath}/Contents/MacOS/FreeplaneJavaApplicationStub" />
			</zipfileset>
			<zipfileset file="${macappfullpath}/Contents/MacOS/FreeplaneJavaApplicationStub" filemode="775" prefix="${ApplicationNameToLowerCase}-${ver}/${ApplicationName}.app/Contents/MacOS" />
		</zip>
	</target>
	<target name="dmg4mac" depends="bzr_version_info, macosxapp" if="isMacOs">
		<exec executable="hdiutil">
			<arg line="create -srcfolder ${macappfullpath} ${dist}/docear.dmg" />
		</exec>
	</target>

	<target name="dist" depends="bzr_version_info, binzip, srczip, installer, portableinstaller, zip4mac, dmg4mac, javadoc">
		<copy file="${workspace}/freeplane/doc/history_en.txt" todir="${dist}" />
		<copy file="${build}/bzrinfo.txt" tofile="${dist}/bzrinfo-${ver}.txt" failonerror="false" />
		<copy file="${workspace}/freeplane_plugin_script/dist/script-api.zip" tofile="${dist}/script-api-${ver}.zip" failonerror="false" />
	</target>

	<target name="docear-mac" depends="docear-bin, zip4mac, dmg4mac" if="isMacOs">
	</target>

	<target name="docear-nsis" depends="docear-bin">
		<nsis script="${root}/windows-installer/docear_windows_installer.nsi" verbosity="4" out="${root}/dist/nsis-build.log" noconfig="yes">
			<define name="VERSION" value="${ver_docear}" />
			<define name="BUILD" value="${build.number}" />
			<define name="DOCEAR_OUT_FILE" value="docear.exe" />
		</nsis>
	</target>

	<target name="docear-bin" depends="clean, bzr_version_info, binzip, srczip, javadoc">
		<copy file="${workspace}/freeplane/doc/history_en.txt" todir="${dist}" />
		<copy file="${build}/bzrinfo.txt" tofile="${dist}/bzrinfo-${ver}.txt" failonerror="false" />
		<copy file="${workspace}/freeplane_plugin_script/dist/script-api.zip" tofile="${dist}/script-api-${ver}.zip" failonerror="false" />
	</target>

	<target name="cleandist" depends="clean,dist">
	</target>

	<target name="check-translation">
		<ant antfile="ant/build.xml" target="check-translation" dir="${workspace}/freeplane" />
	</target>
	<target name="format-translation">
		<ant antfile="ant/build.xml" target="format-translation" dir="${workspace}/freeplane" />
	</target>
	<target name="format-translation-force">
		<ant antfile="ant/build.xml" target="format-translation-force" dir="${workspace}/freeplane" />
	</target>
	<target name="create-plugin">
		<create-plugin />
	</target>
	<target name="test">
		<ant antfile="build.xml" target="test" dir="${workspace}/freeplane_ant" inheritall="false" />
		<ant antfile="ant/build.xml" target="test" dir="${workspace}/freeplane_plugin_script" inheritall="false" />
		<ant antfile="ant/build.xml" target="test" dir="${workspace}/freeplane_uitest" inheritall="false" />
	</target>

	<target name="clean">
		<delete quiet="true" includeemptydirs="true">
			<fileset dir="${build}" />
			<fileset dir="${build4mac}" />
			<fileset dir="${dist}" />
		</delete>
		<ant antfile="ant/build.xml" target="clean" inheritall="false" dir="${workspace}/freeplane" />
		<ant antfile="ant/build.xml" target="clean" inheritall="false" dir="${workspace}/freeplane_plugin_help" />
		<ant antfile="ant/build.xml" target="clean" inheritall="false" dir="${workspace}/freeplane_plugin_svg" />
		<ant antfile="ant/build.xml" target="clean" inheritall="false" dir="${workspace}/freeplane_plugin_latex" />
		<ant antfile="ant/build.xml" target="clean" inheritall="false" dir="${workspace}/freeplane_plugin_script" />
		<ant antfile="ant/build.xml" target="clean" inheritall="false" dir="${workspace}/freeplane_plugin_formula" />
		<ant antfile="ant/build.xml" target="clean" inheritall="false" dir="${workspace}/freeplane_plugin_bugreport" />
		<ant antfile="ant/build.xml" target="clean" inheritall="false" dir="${workspace}/freeplane_plugin_workspace" />
		<ant antfile="ant/build.xml" target="clean" inheritall="false" dir="${workspace}/docear_plugin_core" />
		<ant antfile="ant/build.xml" target="clean" inheritall="false" dir="${workspace}/docear_plugin_pdfutilities" />
		<ant antfile="ant/build.xml" target="clean" inheritall="false" dir="${workspace}/docear_plugin_bibtex" />
		<ant antfile="ant/build.xml" target="clean" inheritall="false" dir="${workspace}/docear_plugin_services" />
	</target>

</project>

<project name="docear_bibtex" default="dist" basedir="..">
	<property name="workspace" location=".." />
	<property name="src" value="src" />
	<property name="resources" value="resources" />
	<property name="root" value="."/>
	<property name="osgimanifest" value="${root}/META-INF/MANIFEST.MF" />	
	<property file="${workspace}/freeplane_framework/ant/ant.properties" />
	<property file="${workspace}/freeplane/ant/ant.properties" />
	<property file="ant/ant.properties" />
    <property name="external.jars" value="${jgoodies.jar}:${insubstantial.jars}:${metadata_utils.jar}" />
	<property name="build" value="${root}/build" />
	<property name="build" value="${root}/build" />
	<property name="dist" value="${root}/dist" />
	<property name="dist.osgi.dir" value="${dist}/org.docear.plugin.bibtex" />
	<property name="freeplaneplugin.jar" value="${dist}/org.docear.plugin.bibtex.jar"/>
	<property name="debug" value="on" />
	<property name="java_source_version" value="1.5" />
	<property name="java_target_version" value="1.5" />
	<property name="build.compiler" value="modern" />
    <property name="classpath" value="${framework.jar}:${freeplane.jars}:${external.jars}:${services.jar}:${core.jar}:${workspace.jar}:${pdfutilities.jar}:${swingworker.jar}:${jabref.jar}:${jhyperlink.jar}:${commons-io.jar}"/>

	<target name="build">
		<mkdir dir="${build}" />
		<javac srcdir="${src}" destdir="${build}" classpath="${classpath}" debug="${debug}" 
			source="${java_source_version}" target="${java_target_version}" encoding="utf8">
		</javac>
	</target>


	<target name="dist" depends="build">
		<jar jarfile="lib/plugin.jar">
			<fileset dir="${build}"/>
			<fileset dir="${resources}"/>
			<fileset dir="${src}">
                <include name="**/*.xml"/>
                <include name="**/*.properties"/>
            </fileset>
		</jar>
		<delete dir="${dist.osgi.dir}" quiet="true"/>
		<mkdir dir="${dist.osgi.dir}" />
		<copy todir="${dist.osgi.dir}">
			<fileset dir="${root}">
				<include name="lib/*.jar"/>
			</fileset>
		</copy>
        <copy todir="${dist.osgi.dir}/lib/">
            <fileset dir="${root}">
                <include name="lib/plugins/**"/>
            </fileset>
        </copy>
		<mkdir dir="${dist.osgi.dir}/META-INF" />
		<copy tofile="${dist.osgi.dir}/META-INF/MANIFEST.MF" file="${osgimanifest}"/>
		<delete file="lib/plugin.jar" quiet="true"/>
	</target>

	<target name="osgi_dist_as_jar" depends="dist">
		<jar jarfile="${freeplaneplugin.jar}">
			<fileset dir="${dist.osgi.dir}">
				<include name="**" />
			</fileset>
		</jar>
	</target>
	
	<target name="clean">
		<delete dir="${build}"  quiet="true"/>
		<delete dir="${dist}"  quiet="true"/>
		<delete>
			<fileset defaultexcludes="no" dir="${src}" includes="**/*~"/>
		</delete>
	</target>
	
</project>

<project name="docear_core" default="dist" basedir="..">
	<property name="workspace" location=".." />
	<property name="src" value="src" />
	<property name="resources" value="resources" />
	<property name="root" value="."/>
	<property name="osgimanifest" value="${root}/META-INF/MANIFEST.MF" />	
	<property name="license" value="${root}/src/license.txt" />	
	<property file="${workspace}/freeplane_framework/ant/ant.properties" />
	<property file="${workspace}/freeplane/ant/ant.properties" />
	<property file="ant/ant.properties" />
    <property name="external.jars" value="${workspace.jar}:${jgoodies.jar}:${swingworker.jar}:${jhyperlink.jar}:${jpathwatch.jar}:${jna.jar}:${platform.jar}:${guava.jar}:${insubstantial.jars}" />
	<property name="build" value="${root}/build" />
	<property name="build" value="${root}/build" />
	<property name="dist" value="${root}/dist" />
	<property name="dist.osgi.dir" value="${dist}/org.docear.plugin.core" />
	<property name="freeplaneplugin.jar" value="${dist}/org.docear.plugin.core.jar"/>
	<property name="debug" value="on" />
	<property name="java_source_version" value="1.5" />
	<property name="java_target_version" value="1.5" />
	<property name="build.compiler" value="modern" />
	<property name="classpath" value="${framework.jar}:${freeplane.jars}:${external.jars}:${commons-io.jar}:${commons-cli.jar}"/>

	<target name="build">
		<mkdir dir="${build}" />
		<javac srcdir="${src}" destdir="${build}" classpath="${classpath}" debug="${debug}" 
			source="${java_source_version}" target="${java_target_version}" encoding="utf8">
		</javac>
	</target>


	<target name="dist" depends="build">
		<jar jarfile="lib/plugin.jar">
			<fileset dir="${build}"/>
			<fileset dir="${resources}"/>
			<fileset dir="${src}">
                <include name="**/*.xml"/>
                <include name="**/*.properties"/>
                <include name="*.txt"/>
            </fileset>
		</jar>
		<delete dir="${dist.osgi.dir}" quiet="true"/>
		<mkdir dir="${dist.osgi.dir}" />
		<copy todir="${dist.osgi.dir}">
			<fileset dir="${root}">
				<include name="lib/**"/>
			</fileset>
		</copy>
		<mkdir dir="${dist.osgi.dir}/META-INF" />
		<copy tofile="${dist.osgi.dir}/META-INF/MANIFEST.MF" file="${osgimanifest}"/>
		<copy tofile="${dist.osgi.dir}/license.txt" file="${license}"/>
		<delete file="lib/plugin.jar" quiet="true"/>
	</target>

	<target name="osgi_dist_as_jar" depends="dist">
		<jar jarfile="${freeplaneplugin.jar}">
			<fileset dir="${dist.osgi.dir}">
				<include name="**" />
			</fileset>
		</jar>
	</target>
	
	<target name="clean">
		<delete dir="${build}"  quiet="true"/>
		<delete dir="${dist}"  quiet="true"/>
		<delete>
			<fileset defaultexcludes="no" dir="${src}" includes="**/*~"/>
		</delete>
	</target>
	
</project>

<project name="docear_pdfutilities" default="dist" basedir="..">
	<property name="workspace" location=".." />
	<property name="src" value="src" />
	<property name="resources" value="resources" />
	<property name="root" value="."/>
	<property name="osgimanifest" value="${root}/META-INF/MANIFEST.MF" />	
	<property file="${workspace}/freeplane_framework/ant/ant.properties" />
	<property file="${workspace}/freeplane/ant/ant.properties" />
	<property file="ant/ant.properties" />	
	<property name="build" value="${root}/build" />
	<property name="build" value="${root}/build" />
	<property name="dist" value="${root}/dist" />
	<property name="dist.osgi.dir" value="${dist}/org.docear.plugin.dragbase" />
	<property name="freeplaneplugin.jar" value="${dist}/org.docear.plugin.dragbase.jar"/>
	<property name="debug" value="on" />
	<property name="java_source_version" value="1.5" />
	<property name="java_target_version" value="1.5" />
	<property name="build.compiler" value="modern" />
	<property name="classpath" value="${framework.jar}:${freeplane.jars}:${core.jar}"/>

	<target name="build">
		<mkdir dir="${build}" />
		<javac srcdir="${src}" destdir="${build}" classpath="${classpath}" debug="${debug}" 
			source="${java_source_version}" target="${java_target_version}" encoding="utf8">
		</javac>
	</target>


	<target name="dist" depends="build">
		<jar jarfile="lib/plugin.jar">
			<fileset dir="${build}"/>
			<fileset dir="${resources}"/>
			<fileset dir="${src}">
                <include name="**/*.xml"/>
                <include name="**/*.properties"/>
            </fileset>
		</jar>
		<delete dir="${dist.osgi.dir}" quiet="true"/>
		<mkdir dir="${dist.osgi.dir}" />
		<copy todir="${dist.osgi.dir}">
			<fileset dir="${root}">
				<include name="lib/**"/>
			</fileset>
		</copy>
		<mkdir dir="${dist.osgi.dir}/META-INF" />
		<copy tofile="${dist.osgi.dir}/META-INF/MANIFEST.MF" file="${osgimanifest}"/>
		<delete file="lib/plugin.jar" quiet="true"/>
	</target>

	<target name="osgi_dist_as_jar" depends="dist">
		<jar jarfile="${freeplaneplugin.jar}">
			<fileset dir="${dist.osgi.dir}">
				<include name="**" />
			</fileset>
		</jar>
	</target>
	
	<target name="clean">
		<delete dir="${build}"  quiet="true"/>
		<delete dir="${dist}"  quiet="true"/>
		<delete>
			<fileset defaultexcludes="no" dir="${src}" includes="**/*~"/>
		</delete>
	</target>
	
</project>

<project name="docear_pdfutilities" default="dist" basedir="..">
	<property name="workspace" location=".." />
	<property name="src" value="src" />
	<property name="resources" value="resources" />
	<property name="root" value="."/>
	<property name="osgimanifest" value="${root}/META-INF/MANIFEST.MF" />	
	<property file="${workspace}/freeplane_framework/ant/ant.properties" />
	<property file="${workspace}/freeplane/ant/ant.properties" />
	<property file="ant/ant.properties" />
    <property name="external.jars" value="${plugin_dependencies}:${external_dependencies}:${external_libs}:${insubstantial.jars}" />
	<property name="build" value="${root}/build" />
	<property name="build" value="${root}/build" />
	<property name="dist" value="${root}/dist" />
	<property name="dist.osgi.dir" value="${dist}/org.docear.plugin.pdfutilities" />
	<property name="freeplaneplugin.jar" value="${dist}/org.docear.plugin.pdfutilities.jar"/>
	<property name="debug" value="on" />
	<property name="java_source_version" value="1.5" />
	<property name="java_target_version" value="1.5" />
	<property name="build.compiler" value="modern" />
	<property name="classpath" value="${framework.jar}:${freeplane.jars}:${external.jars}"/>

	<target name="build">
		<mkdir dir="${build}" />
		<javac srcdir="${src}" destdir="${build}" classpath="${classpath}" debug="${debug}" 
			source="${java_source_version}" target="${java_target_version}" encoding="utf8">
		</javac>
	</target>


	<target name="dist" depends="build">
		<jar jarfile="lib/plugin.jar">
			<fileset dir="${build}"/>
			<fileset dir="${resources}"/>
			<fileset dir="${src}">
                <include name="**/*.xml"/>
                <include name="**/*.properties"/>
				<include name="**/*.txt"/>
            </fileset>
		</jar>
		<delete dir="${dist.osgi.dir}" quiet="true"/>
		<mkdir dir="${dist.osgi.dir}" />
		<copy todir="${dist.osgi.dir}">
			<fileset dir="${root}">
				<include name="lib/**"/>
			</fileset>
		</copy>
		<mkdir dir="${dist.osgi.dir}/META-INF" />
		<copy tofile="${dist.osgi.dir}/META-INF/MANIFEST.MF" file="${osgimanifest}"/>
		<delete file="lib/plugin.jar" quiet="true"/>
	</target>

	<target name="osgi_dist_as_jar" depends="dist">
		<jar jarfile="${freeplaneplugin.jar}">
			<fileset dir="${dist.osgi.dir}">
				<include name="**" />
			</fileset>
		</jar>
	</target>
	
	<target name="clean">
		<delete dir="${build}"  quiet="true"/>
		<delete dir="${dist}"  quiet="true"/>
		<delete>
			<fileset defaultexcludes="no" dir="${src}" includes="**/*~"/>
		</delete>
	</target>
	
</project>

<project name="docear_communications" default="dist" basedir="..">
	<property name="workspace" location=".." />
	<property name="src" value="src" />
	<property name="resources" value="resources" />
	<property name="root" value="."/>
	<property name="osgimanifest" value="${root}/META-INF/MANIFEST.MF" />	
	<property file="${workspace}/freeplane_framework/ant/ant.properties" />
	<property file="${workspace}/freeplane/ant/ant.properties" />
	<property file="ant/ant.properties" />
    <property name="external.jars" value="${jersey-client.jar}:${jersey-core.jar}:${jersey-multipart.jar}:${jsr311-api.jar}:${mimepull.jar}:${jgoodies.jar}" />
	<property name="build" value="${root}/build" />
	<property name="build" value="${root}/build" />
	<property name="dist" value="${root}/dist" />
	<property name="dist.osgi.dir" value="${dist}/org.docear.plugin.communications" />
	<property name="freeplaneplugin.jar" value="${dist}/org.docear.plugin.communications.jar"/>
	<property name="debug" value="on" />
	<property name="java_source_version" value="1.5" />
	<property name="java_target_version" value="1.5" />
	<property name="build.compiler" value="modern" />
    <property name="classpath" value="${framework.jar}:${freeplane.jars}:${external.jars}:${jhall.jar}:${core.jar}:${workspace.jar}"/>

	<target name="build">
		<mkdir dir="${build}" />
		<javac srcdir="${src}" destdir="${build}" classpath="${classpath}" debug="${debug}" 
			source="${java_source_version}" target="${java_target_version}" encoding="utf8">
		</javac>
	</target>


	<target name="dist" depends="build">
		<jar jarfile="lib/plugin.jar">
			<fileset dir="${build}"/>
			<fileset dir="${resources}"/>
			<fileset dir="${src}">
                <include name="**/*.xml"/>
                <include name="**/*.properties"/>
            </fileset>
		</jar>
		<delete dir="${dist.osgi.dir}" quiet="true"/>
		<mkdir dir="${dist.osgi.dir}" />
		<copy todir="${dist.osgi.dir}">
			<fileset dir="${root}">
				<include name="lib/**"/>
			</fileset>
		</copy>
		<mkdir dir="${dist.osgi.dir}/META-INF" />
		<copy tofile="${dist.osgi.dir}/META-INF/MANIFEST.MF" file="${osgimanifest}"/>
		<delete file="lib/plugin.jar" quiet="true"/>
	</target>

	<target name="osgi_dist_as_jar" depends="dist">
		<jar jarfile="${freeplaneplugin.jar}">
			<fileset dir="${dist.osgi.dir}">
				<include name="**" />
			</fileset>
		</jar>
	</target>
	
	<target name="clean">
		<delete dir="${build}"  quiet="true"/>
		<delete dir="${dist}"  quiet="true"/>
		<delete>
			<fileset defaultexcludes="no" dir="${src}" includes="**/*~"/>
		</delete>
	</target>
	
</project>

<project name="docear_services" default="dist" basedir="..">
	<property name="workspace" location=".." />
	<property name="src" value="src" />
	<property name="resources" value="resources" />
	<property name="root" value="."/>
	<property name="osgimanifest" value="${root}/META-INF/MANIFEST.MF" />	
	<property file="${workspace}/freeplane_framework/ant/ant.properties" />
	<property file="${workspace}/freeplane/ant/ant.properties" />
	<property file="ant/ant.properties" />
	<property name="external.jars" value="${apache.jars}:${insubstantial.jars}" />
	<property name="build" value="${root}/build" />
	<property name="build" value="${root}/build" />
	<property name="dist" value="${root}/dist" />
	<property name="dist.osgi.dir" value="${dist}/org.docear.plugin.services" />
	<property name="freeplaneplugin.jar" value="${dist}/org.docear.plugin.services.jar"/>
	<property name="debug" value="on" />
	<property name="java_source_version" value="1.5" />
	<property name="java_target_version" value="1.5" />
	<property name="build.compiler" value="modern" />
    <property name="classpath" value="${framework.jar}:${freeplane.jars}:${external.jars}:${jhall.jar}:${swingworker.jar}:${core.jar}:${workspace.jar}:${bibtex.jar}:${jhyperlink.jar}:${jgoodies.jar}:${jabref.jar}"/>

	<target name="build">
		<mkdir dir="${build}" />
		<javac srcdir="${src}" destdir="${build}" classpath="${classpath}" debug="${debug}" 
			source="${java_source_version}" target="${java_target_version}" encoding="utf8">
		</javac>
	</target>


	<target name="dist" depends="build">
		<jar jarfile="lib/plugin.jar">
			<fileset dir="${build}"/>
			<fileset dir="${resources}"/>
			<fileset dir="${src}">
                <include name="**/*.xml"/>
                <include name="**/*.properties"/>
            </fileset>
		</jar>
		<delete dir="${dist.osgi.dir}" quiet="true"/>
		<mkdir dir="${dist.osgi.dir}" />
		<copy todir="${dist.osgi.dir}">
			<fileset dir="${root}">
				<include name="lib/**"/>
			</fileset>
		</copy>
		<mkdir dir="${dist.osgi.dir}/META-INF" />
		<copy tofile="${dist.osgi.dir}/META-INF/MANIFEST.MF" file="${osgimanifest}"/>
		<delete file="lib/plugin.jar" quiet="true"/>
	</target>

	<target name="osgi_dist_as_jar" depends="dist">
		<jar jarfile="${freeplaneplugin.jar}">
			<fileset dir="${dist.osgi.dir}">
				<include name="**" />
			</fileset>
		</jar>
	</target>
	
	<target name="clean">
		<delete dir="${build}"  quiet="true"/>
		<delete dir="${dist}"  quiet="true"/>
		<delete>
			<fileset defaultexcludes="no" dir="${src}" includes="**/*~"/>
		</delete>
	</target>
	
</project>

<?xml version="1.0" encoding="UTF-8"?>
<project name="org.docear.plugin.backup" default="build.jars" basedir=".">

	<property name="p2.build.repo" value="file:${buildDirectory}/buildRepo"/>
	<property name="basews" value="${ws}"/>
	<property name="baseos" value="${os}"/>
	<property name="basearch" value="${arch}"/>
	<property name="basenl" value="${nl}"/>
	<property name="bundleId" value="org.docear.plugin.backup"/>
	<property name="bundleVersion" value="1.0.0.201107060942"/>
	<property name="p2.publishonerror" value="false"/>

	<!-- Compiler settings. -->
	<property name="javacFailOnError" value="false"/>
	<property name="javacDebugInfo" value="on"/>
	<property name="javacVerbose" value="false"/>
	<property name="logExtension" value=".log"/>
	<property name="compilerArg" value=""/>
	<property name="compilation.prereq.log" value="${buildDirectory}/prereqErrors.log"/>
	<property name="javacSource" value="1.3"/>
	<property name="javacTarget" value="1.2"/>
	<condition property="dir_bootclasspath" value="${java.home}/../Classes">
		<os family="mac"/>
	</condition>
	<property name="dir_bootclasspath" value="${java.home}/lib"/>
	<path id="path_bootclasspath">
		<fileset dir="${dir_bootclasspath}">
			<include name="*.jar"/>
		</fileset>
	</path>
	<property name="bootclasspath" refid="path_bootclasspath"/>
	<condition property="bundleBootClasspath" value="${JavaSE-1.6}"	>
		<isset property="JavaSE-1.6"/>
	</condition>
	<condition property="bundleJavacSource" value="1.6"	>
		<isset property="JavaSE-1.6"/>
	</condition>
	<condition property="bundleJavacTarget" value="1.6"	>
		<isset property="JavaSE-1.6"/>
	</condition>
	<property name="bundleJavacSource" value="${javacSource}"/>
	<property name="bundleJavacTarget" value="${javacTarget}"/>
	<property name="bundleBootClasspath" value="${bootclasspath}"/>

	<target name="init" depends="properties">
		<condition property="pluginTemp" value="${buildTempFolder}/plugins"		>
			<isset property="buildTempFolder"/>
		</condition>
		<property name="pluginTemp" value="${basedir}"/>
		<condition property="build.result.folder" value="${pluginTemp}/org.docear.plugin.backup_1.0.0.201107060942"		>
			<isset property="buildTempFolder"/>
		</condition>
		<property name="build.result.folder" value="${basedir}"/>
		<property name="temp.folder" value="${basedir}/temp.folder"/>
		<property name="plugin.destination" value="${basedir}"/>
		<condition property="p2.publish.parts" value="true"		>
			<istrue value="${p2.gathering}"/>
		</condition>
		<property name="compilation.problem.marker" value="${build.result.folder}/compilation.problem"/>
		<condition property="compilation.problem.marker.exists" value="true"		>
			<and>
			<available file="${compilation.problem.marker}"/>
			<isfalse value="${p2.publishonerror}"/>
			</and>
		</condition>
	</target>

	<target name="properties" if="eclipse.running">
		<property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>

	</target>

	<target name="build.update.jar" depends="init" description="Build the plug-in: org.docear.plugin.backup for an update site.">
		<delete dir="${temp.folder}"/>
		<mkdir dir="${temp.folder}"/>
		<antcall target="build.jars"/>
		<antcall target="gather.bin.parts">
			<param name="destination.temp.folder" value="${temp.folder}/"/>
		</antcall>
		<jar destfile="${plugin.destination}/org.docear.plugin.backup_1.0.0.201107060942.jar" basedir="${temp.folder}/org.docear.plugin.backup_1.0.0.201107060942" filesetmanifest="merge"/>
		<delete dir="${temp.folder}"/>
	</target>

	<target name="@dot.nestedJars">
	</target>
	<target name="@dot" depends="init,@dot.nestedJars" unless="@dot" description="Create jar: org.docear.plugin.backup @dot.">
		<delete dir="${build.result.folder}/@dot"/>
		<mkdir dir="${build.result.folder}/@dot"/>
		<path id="@dot.classpath">
			<pathelement path="../../../../../Applications/eclipse/plugins/org.eclipse.osgi_3.7.0.v20110613.jar"/>
			<pathelement path="../../../../../Applications/eclipse/plugins/javax.transaction_1.1.1.v201105210645.jar"/>
		</path>
		<!-- compile the source code -->
		<javac destdir="${build.result.folder}/@dot" failonerror="${javacFailOnError}" verbose="${javacVerbose}" debug="${javacDebugInfo}" includeAntRuntime="no" bootclasspath="${bundleBootClasspath}" source="${bundleJavacSource}" target="${bundleJavacTarget}"		>
			<compilerarg line="${compilerArg}" compiler="${build.compiler}"/>
			<classpath refid="@dot.classpath" />
			<src path="src/"			/>
			<compilerarg value="@${basedir}/javaCompiler...args" compiler="org.eclipse.jdt.core.JDTCompilerAdapter"			/>
			<compilerarg line="-log &apos;${build.result.folder}/@dot${logExtension}&apos;" compiler="org.eclipse.jdt.core.JDTCompilerAdapter"			/>
		</javac>
		<antcall target="checkCompilationResults"/>
		<!-- Copy necessary resources -->
		<copy todir="${build.result.folder}/@dot" failonerror="true" overwrite="false">
			<fileset dir="src/">
				<exclude name="**/*.java"/>
				<exclude name="**/package.htm*"/>
			</fileset>
		</copy>
	</target>

	<target name="src.zip" depends="init" unless="src.zip">
		<mkdir dir="${build.result.folder}"/>
		<antcall target="zip.src.zip"/>
	</target>
	<target name="zip.src.zip">
		<zip destfile="${build.result.folder}/src.zip" filesonly="false" whenempty="skip" update="false">
			<fileset dir="src/">
				<include name="**/*.java"/>
			</fileset>
		</zip>
	</target>
	<target name="copy.src.zip">
		<copy todir="${source.destination.folder}/" failonerror="true" overwrite="true">
			<fileset dir="src/">
				<include name="**/*.java"/>
			</fileset>
		</copy>
	</target>

	<target name="build.jars" depends="init" description="Compile classes and build nested jars for the plug-in: org.docear.plugin.backup.">
		<delete file="${compilation.problem.marker}" quiet="true"/>
		<available property="@dot" file="${build.result.folder}/@dot"/>
		<antcall target="@dot"/>
	</target>

	<target name="checkCompilationResults" if="compilation.error.occured">
		<echo file="${compilation.problem.marker}" message="org.docear.plugin.backup_1.0.0.201107060942${line.separator}compilation.error.occured=${compilation.error.occured}"/>
		<eclipse.logCompileError bundle="org.docear.plugin.backup_1.0.0.201107060942" log="${compilation.prereq.log}">
		</eclipse.logCompileError>
	</target>

	<target name="build.sources" depends="init">
		<available property="src.zip" file="${build.result.folder}/src.zip"/>
		<antcall target="src.zip"/>
	</target>

	<target name="publish.bin.parts" depends="init" if="p2.publish.parts" unless="compilation.problem.marker.exists">
		<mkdir dir="${build.result.folder}/org.docear.plugin.backup_1.0.0.201107060942"/>
		<copy todir="${build.result.folder}" failonerror="true" overwrite="true">
			<fileset dir="${basedir}">
				<include name="META-INF/MANIFEST.MF"/>
				<include name="plugin.xml"/>
				<include name="fragment.xml"/>
			</fileset>
		</copy>
		<eclipse.versionReplacer path="${build.result.folder}" version="1.0.0.201107060942"/>
		<antcall target="apitools.generation">
			<param name="target.folder" value="${build.result.folder}"/>
			<param name="projectLocation" value="${basedir}"/>
			<param name="binary.folders" value="${build.result.folder}/@dot"/>
			<param name="projectName" value="${bundleId}_${bundleVersion}"/>
		</antcall>
		<eclipse.gatherBundle 
		   metadataRepository="${p2.build.repo}"
		   artifactRepository="${p2.build.repo}"
		   buildResultFolder="${build.result.folder}"
		   baseDirectory="${basedir}"
		/>
	</target>

	<target name="gather.bin.parts" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/org.docear.plugin.backup_1.0.0.201107060942"/>
		<copy todir="${destination.temp.folder}/org.docear.plugin.backup_1.0.0.201107060942" failonerror="true" overwrite="false">
			<fileset dir="${build.result.folder}/@dot">
				<include name="**"/>
			</fileset>
		</copy>
		<copy todir="${destination.temp.folder}/org.docear.plugin.backup_1.0.0.201107060942" failonerror="true" overwrite="true">
			<fileset dir="${basedir}">
				<include name="META-INF/"/>
			</fileset>
		</copy>
		<eclipse.versionReplacer path="${destination.temp.folder}/org.docear.plugin.backup_1.0.0.201107060942" version="1.0.0.201107060942"/>
		<antcall target="apitools.generation">
			<param name="target.folder" value="${destination.temp.folder}/org.docear.plugin.backup_1.0.0.201107060942"/>
			<param name="projectLocation" value="${basedir}"/>
			<param name="binary.folders" value="${build.result.folder}/@dot"/>
			<param name="projectName" value="${bundleId}_${bundleVersion}"/>
		</antcall>
	</target>

	<target name="build.zips" depends="init">
	</target>

	<target name="gather.sources" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/org.docear.plugin.backup_1.0.0.201107060942"/>
		<copy file="${build.result.folder}/src.zip" todir="${destination.temp.folder}/org.docear.plugin.backup_1.0.0.201107060942" failonerror="false" overwrite="false"/>
		<antcall target="copy.src.includes">
			<param name="source.destination.folder" value="${destination.temp.folder}/org.docear.plugin.backup_1.0.0.201107060942"/>
		</antcall>
	</target>

	<target name="gather.individual.sources" depends="init">
		<antcall target="copy.src.zip">
			<param name="source.destination.folder" value="${destination.temp.folder}"/>
		</antcall>
		<antcall target="copy.src.includes">
			<param name="source.destination.folder" value="${destination.temp.folder}"/>
		</antcall>
	</target>

	<target name="copy.src.includes" depends="init">
	</target>

	<target name="gather.logs" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/org.docear.plugin.backup_1.0.0.201107060942"/>
		<copy todir="${destination.temp.folder}/org.docear.plugin.backup_1.0.0.201107060942" failonerror="false" overwrite="false">
			<fileset dir="${build.result.folder}">
				<include name="@dot${logExtension}"/>
			</fileset>
		</copy>
	</target>

	<target name="clean" depends="init" description="Clean the plug-in: org.docear.plugin.backup of all the zips, jars and logs created.">
		<delete dir="${build.result.folder}/@dot"/>
		<delete file="${build.result.folder}/src.zip"/>
		<delete file="${plugin.destination}/org.docear.plugin.backup_1.0.0.201107060942.jar"/>
		<delete file="${plugin.destination}/org.docear.plugin.backup_1.0.0.201107060942.zip"/>
		<delete dir="${temp.folder}"/>
		<delete file="${compilation.problem.marker}" quiet="true"/>
	</target>

	<target name="refresh" depends="init" if="eclipse.running" description="Refresh this folder.">
		<eclipse.convertPath fileSystemPath="/home/stefan/sciplore/Entwicklung/eclipse/docear/docear_plugin_backup" property="resourcePath"/>
		<eclipse.refreshLocal resource="${resourcePath}" depth="infinite"/>
	</target>

	<target name="zip.plugin" depends="init" description="Create a zip containing all the elements for the plug-in: org.docear.plugin.backup.">
		<delete dir="${temp.folder}"/>
		<mkdir dir="${temp.folder}"/>
		<antcall target="build.jars"/>
		<antcall target="build.sources"/>
		<antcall target="gather.bin.parts">
			<param name="destination.temp.folder" value="${temp.folder}/"/>
		</antcall>
		<antcall target="gather.sources">
			<param name="destination.temp.folder" value="${temp.folder}/"/>
		</antcall>
		<delete>
			<fileset dir="${temp.folder}">
				<include name="**/*.bin${logExtension}"/>
			</fileset>
		</delete>
		<zip destfile="${plugin.destination}/org.docear.plugin.backup_1.0.0.201107060942.zip" basedir="${temp.folder}" filesonly="true" whenempty="skip" update="false"/>
		<delete dir="${temp.folder}"/>
	</target>

	<target name="apitools.generation" if="generateAPIDescription">
		<apitooling.apigeneration  projectName="${projectName}" project="${projectLocation}" binary="${binary.folders}" target="${target.folder}" extramanifests="${extraManifests}" allownonapiproject="${allowNonApiProject}"		/>
	</target>

</project>
<project name="freeplane" default="dist" basedir="..">
	<property name="workspace" location=".." />
	<property file="viewer-resources/version.properties"/>
	<property name="src" value="src" />
	<property name="resources" value="resources" />
	<property name="viewer-resources" value="viewer-resources" />
	<property name="eolstyle" value="unix" />
	<property name="root" value="." />
	<property name="manifest" value="${root}/META-INF/OLD_MANIFEST.MF" />
	<property name="osgimanifest" value="${root}/META-INF/MANIFEST.MF" />
	<property file="${workspace}/freeplane_framework/ant/ant.properties" />
	<property file="${workspace}/freeplane/ant/ant.properties" />
	<property file="ant/ant.properties" />
	<property name="freeplaneant.jar" value="${workspace}/freeplane_ant/dist/freeplaneant.jar" />
	<property name="google.translator.jar" value="${workspace}/freeplane_framework/ant/lib/google-api-translate-java-0.92.jar" />
    <property name="external.jars" value="${commons-lang.jar}:${commons-io.jar}:${imgscalr.jar}:${forms.jar}:${SimplyHTML.jar}:${jortho.jar}:${jna.jars}:${insubstantial.jars}" />
	<property name="build" value="${root}/build" />
	<property name="dist" value="${root}/dist" />
    <property name="dist.resources" value="${dist}/resources" />
    <property name="dist.doc" value="${dist}/doc" />
	<property name="dist.osgi.dir" value="${dist}/org.freeplane.core" />
	<property name="freeplaneplugin.jar" value="${dist.osgi.dir}/org.freeplane.core.jar" />
	<property name="debug" value="on" />
	<property name="java_source_version" value="1.5" />
	<property name="java_target_version" value="1.5" />
	<property name="build.compiler" value="modern" />
	<property name="classpath" value="${external.jars}:${freeplanemac.jar}:${framework.jar}" />
	<condition property="isMacOs">
	      <os family="mac"/>
	</condition>

	<taskdef name="format-translation" classname="org.freeplane.ant.FormatTranslation" classpath="${freeplaneant.jar}" onerror="report" />
	<taskdef name="check-translation" classname="org.freeplane.ant.FormatTranslationCheck" classpath="${freeplaneant.jar}" onerror="report" />

	<target name="prepare_freeplaneant">
		<ant antfile="${workspace}/freeplane_ant/build.xml" target="jar"
			dir="${workspace}/freeplane_ant"  inheritAll="false" />
	</target>
	
	<target name="prepare_jortho" depends="prepare_freeplaneant">
		<ant antfile="${workspace}/JOrtho_0.4_freeplane/build.xml" target="jar"
			 dir="${workspace}/JOrtho_0.4_freeplane" inheritAll="false"/>
		<copy
			file="${workspace}/JOrtho_0.4_freeplane/dist/lib/jortho-0.4+fp1.1.1.jar"
			tofile="lib/jortho.jar"
			/>
	</target>

	<target name="localelist">
		<!-- updates translations/locales.txt -->
		<fileset id="resourcebundles" dir="${root}">
			<include name="resources/translations/*.properties" />
			<include name="viewer-resources/translations/*.properties" />
		</fileset>
		<pathconvert pathsep="${line.separator}" property="locales" refid="resourcebundles">
			<mapper type="regexp" from=".*Resources_(.*)\.properties" to="\1"/>
		</pathconvert>
		<mkdir dir="${build}/translations" />
		<echo file="${build}/translations/locales.txt">${locales}</echo>
	</target>
	
	<target name="build" depends="prepare_jortho,localelist">
		<antcall target="check-translation" />
		<mkdir dir="${build}" />
		<javac srcdir="${src}" destdir="${build}" classpath="${classpath}" debug="${debug}" 
			source="${java_source_version}" target="${java_target_version}" encoding="utf8">
			<exclude name="org/freeplane/main/application/FreeplaneMain.java" />
			<exclude name="**/osgi/**" />
		</javac>
		<!-- Starter should work with java 1.1, too as it checks the java version.-->
		<delete failonerror="false" file="${build}/org/freeplane/main/application/FreeplaneMain.class"/>
		<javac verbose="no" srcdir="${src}" destdir="${build}" classpath="${classpath}" 
			debug="${debug}" source="1.3" target="1.1" encoding="utf8">
			<include name="org/freeplane/main/application/FreeplaneMain.java" />
		</javac>
	</target>

	<target name="osgi_build" depends="build">
		<javac srcdir="${src}" destdir="${build}" classpath="${classpath}" 
			debug="${debug}" 
			source="${java_source_version}" target="${java_target_version}" encoding="utf8">
			<include name="**/osgi/**" />
			<exclude name="org/freeplane/main/osgi/Activator.java" />
		</javac>
		<delete failonerror="false" file="${build}/org/freeplane/main/osgi/Activator.class"/>
		<javac verbose="no" srcdir="${src}" destdir="${build}" classpath="${classpath}" 
			debug="${debug}" source="1.3" target="1.2" encoding="utf8">
			<include name="org/freeplane/main/osgi/Activator.java" />
		</javac>
	</target>


	<target name="jar" depends="build">
		<mkdir dir="${freeplane.dist.lib}" />
		<jar jarfile="${freeplaneviewer.jar}">
			<fileset dir="${build}">
				<exclude name="**/*.jar" />
				<exclude name="**/application/**" />
				<exclude name="**/osgi/**" />
				<exclude name="**/mindmapmode/**" />
				<exclude name="**/filemode/**" />
				<exclude name="**/ortho/**" />
				<exclude name="**/core/resources/ui/**" />
				<exclude name="translations/**" />
			</fileset>
			<fileset dir="${viewer-resources}" />
		</jar>
		<jar jarfile="${freeplaneeditor.jar}" manifest="${manifest}">
			<fileset dir="${build}">
				<include name="**/application/**" />
				<include name="**/mindmapmode/**" />
				<include name="**/ortho/**" />
				<include name="**/filemode/**" />
				<include name="**/core/resources/ui/**" />
				<include name="translations/**" />
				<exclude name="**/*.jar" />
			</fileset>
			<fileset dir="${resources}" />
		</jar>
	</target>
	
	<target name="buildmac" if="isMacOs">
		<ant antfile="ant/build.xml" target="dist" dir="${workspace}/freeplane_mac" inheritall="false" />
	</target>	

	<target name="osgi_jar" depends="jar, osgi_build">
		<jar jarfile="${freeplaneosgi.jar}">
			<fileset dir="${build}">
				<include name="**/osgi/**" />
			</fileset>
		</jar>
	</target>
	
	<target name="dist" depends="jar, buildmac">
		<!-- third party libs -->
		<mkdir dir="${freeplane.dist.lib}" />
		<copy todir="${freeplane.dist.lib}">
			<fileset dir="${freeplane.ext.lib}">
				<include name="*.jar" />
			</fileset>
		</copy>
        <mkdir dir="${dist.resources}" />
        <copy todir="${dist.resources}">
            <fileset dir="external-resources"/>
        </copy>
        <mkdir dir="${dist.doc}" />
        <copy todir="${dist.doc}">
            <fileset dir="doc"/>
        </copy>
	</target>
	
	<target name="clean_dist" depends="clean, dist"/>

	<!-- for maven integration -->
	<!-- make sure you've installed maven properly - see http://maven.apache.org/ -->
	<target name="maven-deps">
		<exec executable="mvn.bat">
		    <arg value="install:install-file"/>
			<arg value="-DgroupId=org.freeplane"/>
			<arg value="-DartifactId=freeplane-simplyHtml"/>
			<arg value="-Dversion=${freeplane_version}"/>
			<arg value="-Dpackaging=jar"/>
			<arg value="-Dfile=lib/SimplyHTML.jar"/>
		</exec>
		<exec executable="mvn.bat">
		    <arg value="install:install-file"/>
			<arg value="-DgroupId=org.freeplane"/>
			<arg value="-DartifactId=freeplane-jortho"/>
			<arg value="-Dversion=${freeplane_version}"/>
			<arg value="-Dpackaging=jar"/>
			<arg value="-Dfile=lib/jortho.jar"/>
		</exec>
		<exec executable="mvn.bat">
		    <arg value="install:install-file"/>
			<arg value="-DgroupId=com.jgoodies"/>
			<arg value="-DartifactId=forms"/>
			<arg value="-Dversion=1.0.5"/>
			<arg value="-Dpackaging=jar"/>
			<arg value="-Dfile=lib/forms-1.2.1.jar"/>
		</exec>
	</target>



	<target name="osgi_dist" depends="osgi_jar, dist">
		<mkdir dir="${dist.osgi.dir}" />
		<copy todir="${dist.osgi.dir}">
			<fileset dir="${dist}">
				<include name="lib/**" />
			</fileset>
		</copy>
		<mkdir dir="${dist.osgi.dir}/META-INF" />
		<copy tofile="${dist.osgi.dir}/META-INF/MANIFEST.MF" file="${osgimanifest}"/>
	</target>

	<target name="osgi_dist_as_jar" depends="osgi_dist">
		<jar jarfile="${freeplaneplugin.jar}">
			<fileset dir="${dist.osgi.dir}">
				<include name="**" />
			</fileset>
		</jar>
	</target>
	
	<target name="check-translation">
		<check-translation dir="${root}/resources/translations" includes="*.properties" eolstyle="${eolstyle}" />
		<check-translation dir="${root}/viewer-resources/translations" includes="*.properties" eolstyle="${eolstyle}" />
	</target>
	<target name="format-translation">
		<format-translation dir="${root}/resources/translations" includes="*.properties" eolstyle="${eolstyle}" />
		<format-translation dir="${root}/viewer-resources/translations" includes="*.properties" eolstyle="${eolstyle}" />
	</target>
	<target name="format-translation-force">
		<format-translation dir="${root}/resources/translations" writeifunchanged="true" includes="*de.properties" eolstyle="${eolstyle}" />
		<format-translation dir="${root}/viewer-resources/translations" writeifunchanged="true" includes="*xx.properties" eolstyle="${eolstyle}" />
	</target>
	<target name="translate">
		<translator translationsdir="${root}/resources/translations"
			    sourcefile="${root}/viewer-resources/translations/Resources_en.properties" includes="*.properties" />
		<antcall target="format-translation" />
	</target>

	<target name="clean">
		<delete dir="${build}" quiet="true" />
		<delete dir="${dist}" quiet="true" />
		<delete file="lib/jortho.jar" />
		<delete>
			<fileset defaultexcludes="no" dir="${src}" includes="**/*~" />
		</delete>
	</target>

</project>

<project name="freeplane_ant" default="compile" basedir=".">
  <property name="src" location="src" />
  <property name="lib" location="lib" />
  <property name="bin" location="bin" />
  <property name="dist" location="dist" />
  <property name="debug" value="on" />
  <property name="java_source_version" value="1.5" />
  <property name="java_target_version" value="1.5" />
  <property name="jar" value="${dist}/freeplaneant.jar" />

  <target name="compile">
    <mkdir dir="${bin}" />
    <javac srcdir="${src}" destdir="${bin}" debug="${debug}" 
    	source="${java_source_version}" target="${java_target_version}" />
  </target>

  <target name="jar" depends="compile">
    <mkdir dir="${dist}" />
    <jar jarfile="${jar}">
      <fileset dir="${bin}">
        <exclude name="**/*.jar" />
        <exclude name="**/*Test.class" />
      </fileset>
    </jar>
  </target>

  <target name="test" depends="jar">
    <ant dir="test" target="test" />
  </target>

  <target name="clean">
    <!-- would fail unless freeplaneant.jar exists:
	 <ant dir="test" target="clean" />
    -->
    <delete dir="test/sorted" quiet="true" />
    <delete dir="test/bin" quiet="true" />
    <delete dir="test/log" quiet="true" />
    <delete dir="test/freeplane_plugin_latex" quiet="true" />
    <delete dir="test/freeplane_plugin_helloworld" quiet="true" />
    <delete dir="${bin}" quiet="true" />
    <delete dir="${dist}" quiet="true" />
  </target>
</project>
<project name="freeplane_ant" default="test" basedir=".">
  <property name="root" location=".." />
  <property name="freeplane.dir" location="../.." />
  <property name="src" location="src" />
  <property name="bin" location="bin" />
  <property name="test.logdir" location="log" />
  <property name="jar" value="${root}/dist/freeplaneant.jar" />
  <property name="junit.jar" value="${root}/lib/junit.jar" />
  <property name="classpath" value="${junit.jar}:${jar}" />

  <taskdef name="format-translation" classname="org.freeplane.ant.FormatTranslation" classpath="${jar}"/>
  <taskdef name="check-translation" classname="org.freeplane.ant.FormatTranslationCheck" classpath="${jar}"/>
  <taskdef name="create-plugin" classname="org.freeplane.ant.CreatePlugin" classpath="${jar}"/>

  <target name="compile-junit">
    <mkdir dir="${bin}" />
    <javac srcdir="${src}" destdir="${bin}" debug="${debug}" classpath="${classpath}" />
  </target>

  <target name="run-junit" depends="compile-junit">
    <delete dir="${test.logdir}"/>
    <mkdir dir="${test.logdir}" />
    <junit printsummary="yes" haltonfailure="off">
      <classpath>
	<pathelement path="${classpath}:bin"/>
      </classpath>
      <formatter type="xml"/>
      <batchtest todir="${test.logdir}">
	<fileset dir="${bin}">
	  <include name="**/*Test.class"/>
	</fileset>
      </batchtest>
    </junit>
  </target>
  
  <target name="check">
    <check-translation dir="unsorted" includes="*.properties" />
  </target>

   <target name="format">
    <format-translation dir="unsorted" includes="*.properties" outputDir="sorted" />
  </target>

  <target name="check-sorted">
    <check-translation dir="sorted" includes="*.properties" />
  </target>

  <target name="create-plugin">
    <create-plugin />
  </target>

  <target name="create-plugin-batch">
    <copy todir="./freeplane_plugin_latex">
      <fileset dir="${freeplane.dir}/freeplane_plugin_latex">
	<exclude name="**/dist/**" />
	<exclude name="**/build/**" />
	<exclude name="**/lib/**" />
      </fileset>
    </copy>
    <create-plugin baseDir="." pluginname="helloworld" hasAction="true" />
  </target>

  <target name="clean">
    <delete dir="sorted" quiet="true" />
    <delete dir="${bin}" quiet="true" />
    <delete dir="${test.log}" quiet="true" />
    <delete dir="freeplane_plugin_latex" quiet="true" />
    <delete dir="freeplane_plugin_helloworld" quiet="true" />
  </target>

  <target name="test" depends="run-junit">
    <antcall target="format" />
    <antcall target="check-sorted" />
    <delete dir="freeplane_plugin_helloworld" quiet="true" />
    <antcall target="create-plugin-batch" />
  </target>
</project>
<project name="freeplane" default="dist" basedir="..">
	<property name="workspace" location=".." />
	<property file="${workspace}/freeplane/viewer-resources/version.properties" />
	<property file="ant/ant.properties" />
	<property name="freeplaneant.jar" value="${workspace}/freeplane_ant/dist/freeplaneant.jar" />
	<property name="root" value="." />
	<property name="build" value="${root}/build" />
	<property name="build4mac" value="${root}/build4mac" />
	<property name="build.plugins" value="${build}/plugins" />
	<property name="dist" value="${root}/dist" />
	<property name="macappfullpath" value="${build4mac}/Freeplane.app" />

	<property name="launcher_src" value="src" />
	<property name="launcher_manifest" value="${root}/META-INF/LAUNCHER_MANIFEST.MF" />
	<property name="launcher_build" value="${root}/launcher_build" />
	<property name="launcher_classpath" value="${framework.jar}" />

	<property name="debug" value="on" />
	<property name="java_source_version" value="1.5" />
	<property name="java_target_version" value="1.5" />
	<property name="build.compiler" value="modern" />

	<condition property="ver" value="${freeplane_version}_${minor}" else="${freeplane_version}">
		<isset property="minor" />
	</condition>

	<property name="license" value="license.txt" />
	<property name="readme_src" value="readme.txt" />
	<property name="build.resources" value="${build}/resources" />
	<property name="build.doc" value="${build}/doc" />
	<property name="build.scripts" value="${build}/scripts" />
	<property name="script" value="${root}/script" />

	<!-- Mac OS X -->
	<condition property="isMacOs">
		<os family="mac" />
	</condition>

	<property name="mac-jarbundler" value="${root}/mac-jarbundler" />
	<property name="jarbundler.jar" value="jarbundler-2.1.0.jar" />
	<taskdef name="jarbundler" onerror="report" classpath="${mac-jarbundler}/${jarbundler.jar}" classname="net.sourceforge.jarbundler.JarBundler" />
	<taskdef name="create-plugin" onerror="report" classpath="${freeplaneant.jar}" classname="org.freeplane.ant.CreatePlugin" />

	<target name="makePlugin">
		<ant antfile="ant/build.xml" target="${anttarget}" dir="${workspace}/${plugindir}" inheritall="false" />
		<mkdir dir="${build}/${targetdir}/${pluginname}" />
		<copy todir="${build}/${targetdir}/${pluginname}">
			<fileset dir="${workspace}/${plugindir}/dist/${pluginname}" />
		</copy>
	</target>


	<target name="build_core">
		<echo>Freeplane Version = ${ver}.</echo>

		<mkdir dir="${build}" />
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="osgi_dist" />
			<param name="targetdir" value="core" />
			<param name="plugindir" value="freeplane" />
			<param name="pluginname" value="org.freeplane.core" />
		</antcall>
	</target>

	<target name="build_help" unless="skip_help">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist" />
			<param name="targetdir" value="plugins" />
			<param name="plugindir" value="freeplane_plugin_help" />
			<param name="pluginname" value="org.freeplane.plugin.help" />
		</antcall>
	</target>

	<target name="build_latex" unless="skip_latex">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist" />
			<param name="targetdir" value="plugins" />
			<param name="plugindir" value="freeplane_plugin_latex" />
			<param name="pluginname" value="org.freeplane.plugin.latex" />
		</antcall>
	</target>

	<target name="build_svg" unless="skip_svg">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist" />
			<param name="targetdir" value="plugins" />
			<param name="plugindir" value="freeplane_plugin_svg" />
			<param name="pluginname" value="org.freeplane.plugin.svg" />
		</antcall>
	</target>

	<target name="build_script" unless="skip_script">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist" />
			<param name="targetdir" value="plugins" />
			<param name="plugindir" value="freeplane_plugin_script" />
			<param name="pluginname" value="org.freeplane.plugin.script" />
		</antcall>
	</target>

	<target name="build_script_api" unless="skip_script">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="api" />
			<param name="targetdir" value="plugins" />
			<param name="plugindir" value="freeplane_plugin_script" />
			<param name="pluginname" value="org.freeplane.plugin.script" />
		</antcall>
	</target>

	<target name="build_formula" unless="skip_formula">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist" />
			<param name="targetdir" value="plugins" />
			<param name="plugindir" value="freeplane_plugin_formula" />
			<param name="pluginname" value="org.freeplane.plugin.formula" />
		</antcall>
	</target>

	<target name="build_bugreport" unless="skip_bugreport">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist" />
			<param name="targetdir" value="plugins" />
			<param name="plugindir" value="freeplane_plugin_bugreport" />
			<param name="pluginname" value="org.freeplane.plugin.bugreport" />
		</antcall>
	</target>

	<target name="build_remote_server" depends="build_remote_shared" unless="skip_remote_server">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist" />
			<param name="targetdir" value="plugins" />
			<param name="plugindir" value="freeplane_plugin_remote_server" />
			<param name="pluginname" value="org.freeplane.plugin.remote.server" />
		</antcall>
	</target>

	<target name="build_remote_client" depends="build_remote_shared" unless="skip_remote_client">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist" />
			<param name="targetdir" value="plugins" />
			<param name="plugindir" value="freeplane_plugin_remote_client" />
			<param name="pluginname" value="org.freeplane.plugin.remote.client" />
		</antcall>
	</target>
	
	<target name="build_remote_shared" depends="build_core" unless="skip_remote_client">
		<ant antfile="ant/build.xml" target="dist" dir="${workspace}/freeplane_plugin_remote_shared" inheritall="false" />
	</target>
	
	<target name="build_launcher" depends="build_core">
		<mkdir dir="${launcher_build}" />
		<javac srcdir="${launcher_src}" destdir="${launcher_build}" classpath="${launcher_classpath}" debug="${debug}" source="${java_source_version}" target="${java_target_version}" encoding="utf8" />
		<jar jarfile="${freeplanelauncher.jar}" manifest="${launcher_manifest}">
			<fileset dir="${launcher_build}">
				<include name="**" />
			</fileset>
		</jar>

		<copy todir="${build}">
			<fileset dir="${script}" />
			<fileset file="${framework.jar}" />
			<fileset file="${freeplanelauncher.jar}" />
			<fileset file="windows-icons/freeplaneIcons.dll" />
			<fileset dir="launch4j" includes="*.exe" />
			<fileset dir="launch4j" includes="*.ini" />
		</copy>
		<chmod file="${build}/freeplane.sh" perm="ugo+rx" />
	</target>

	<target name="build" depends="build_core, build_latex, build_svg, build_script, build_formula, build_bugreport, build_launcher, build_remote_server, build_remote_client, git_version_info">
		<mkdir dir="${build.resources}" />
		<copy todir="${build.resources}">
			<fileset dir="${workspace}/freeplane/dist/resources" />
			<fileset file="${dist}/gitinfo.properties" />
		</copy>
		<mkdir dir="${build.doc}" />
		<copy todir="${build.doc}">
			<fileset dir="${workspace}/freeplane/dist/doc" />
		</copy>
		<mkdir dir="${build.scripts}" />
		<copy todir="${build.scripts}">
			<fileset dir="${workspace}/freeplane_plugin_script/scripts" />
		</copy>

	</target>

	<target name="javadoc" depends="build_script_api">
		<mkdir dir="${build.doc}" />
		<copy todir="${build.doc}">
			<fileset dir="${workspace}/freeplane_plugin_script/dist/doc" />
		</copy>
	</target>

	<target name="mkdistdir">
		<mkdir dir="${build}" />
		<mkdir dir="${dist}" />
	</target>


	<target name="rungit" depends="mkdistdir">
		<delete file="${build}/gitinfo.txt" quiet="true" />
		<delete file="${dist}/git.properties" quiet="true" />
		<exec dir="${build}" executable="git" output="${build}/gitinfo.txt" failifexecutionfails="false" failonerror="false" logError="true" resultproperty="gitresult">
			<arg value='log' />
			<arg value='--pretty=format:git-revision=%h_%an_%ai' />
			<arg value='-n1' />
		</exec>
		<condition property="gitok" value="">
			<equals arg1="${gitresult}" arg2="0" />
		</condition>
	</target>

	<target name="git_version_info" depends="rungit" unless="giterror">
		<native2ascii src="${build}" dest="${dist}" includes="gitinfo.txt" ext=".properties" />
		<replaceregexp file="${dist}/gitinfo.properties" flags="g" byline="false" match="[^\w=-]" replace="" />
		<property file="${dist}/gitinfo.properties" />
		<exec dir="${build}" executable="git" output="${build}/gitinfo.txt" append="true" failifexecutionfails="false" failonerror="false" logError="true">
			<arg value='branch' />
		</exec>
	</target>

	<target name="binzip" depends="build">
		<zip destfile="${dist}/freeplane_bin-${ver}.zip" compress="true">
			<zipfileset dir="${build}" prefix="freeplane-${ver}">
				<exclude name="freeplane.sh" />
				<exclude name="freeplane-server.sh" />
				<exclude name="**/*-javadoc.jar" />
				<exclude name="**/*-sources.jar" />
				<exclude name="plugins/org.freeplane.plugin.remote.server/**" />
				<!-- for now excluded. Can be added when it is finished -->
				<exclude name="plugins/org.freeplane.plugin.remote.client/**" />
				
			</zipfileset>
			<zipfileset file="${build}/freeplane.sh" filemode="775" prefix="freeplane-${ver}" />
			<zipfileset dir="${root}" prefix="freeplane-${ver}">
				<include name="${license}" />
			</zipfileset>
		</zip>
	</target>
	
	<target name="serverzip" depends="build">
		<zip destfile="${dist}/freeplane_server.zip" compress="true">
			<zipfileset dir="${build}" prefix="freeplane">
				<exclude name="freeplane-server.sh" />
				<exclude name="**/*-javadoc.jar" />
				<exclude name="**/*-sources.jar" />
				<exclude name="plugins/org.freeplane.plugin.remote.client/**" />
			</zipfileset>
			<zipfileset file="${build}/freeplane-server.sh" filemode="775" prefix="freeplane" />
			<zipfileset dir="${root}" prefix="freeplane">
				<include name="${license}" />
			</zipfileset>
		</zip>
	</target>

	<target name="srczip" depends="mkdistdir, git_version_info">
		<tar destfile="${dist}/freeplane_src-${ver}.tar.gz" compression="gzip" longfile="gnu">
			<tarfileset prefix="freeplane-${ver}" dir="${workspace}" mode="664">
				<patternset id="freeplane.sources">
					<include name="build.xml" />
					<include name="freeplane/**" />
					<include name="freeplane_plugin*/**" />
					<include name="freeplane_ant/**" />
					<include name="freeplane_mac/**" />
					<include name="freeplane_framework/**" />
					<include name="freeplane_devresources/**" />
					<include name="JOrtho_0.4_freeplane/**" />
					<include name="build.xml" />
					<exclude name=".*/**" />
					<exclude name="**/~*" />
					<exclude name="**/backups/**" />
					<exclude name="bin/**" />
					<exclude name="build/**" />
					<exclude name="dist/**" />
					<exclude name="*/bin/**" />
					<exclude name="*/build/**" />
					<exclude name="*/build4mac/**" />
					<exclude name="*/dist/**" />
					<exclude name="**/.backup/**" />
					<exclude name="**/backups/**" />
					<exclude name="JOrtho_0.4_freeplane/src/dictionary_*.ortho" />
					<exclude name="freeplane_framework/windows-icons/Objects/**" />
					<exclude name="freeplane_framework/windows-icons/*.layout" />
					<exclude name="freeplane_framework/windows-icons/Makefile.win" />
				</patternset>
			</tarfileset>
			<tarfileset prefix="freeplane-${ver}" dir="${root}" mode="664">
				<include name="${license}" />
				<include name="${readme_src}" />
			</tarfileset>
		</tar>

		<tar destfile="${dist}/freeplane_srcpure-${ver}.tar.gz" compression="gzip" longfile="gnu">
			<tarfileset prefix="freeplane-${ver}" dir="${workspace}" mode="664">
				<patternset refid="freeplane.sources" />
				<exclude name="**/*.exe" />
				<exclude name="**/*.res" />
				<exclude name="**/*.jar" />
				<exclude name="**/*JavaApplicationStub*" />
			</tarfileset>
			<tarfileset prefix="freeplane-${ver}" dir="${root}" mode="664">
				<include name="${license}" />
				<include name="${readme_src}" />
			</tarfileset>
		</tar>
	</target>

	<target name="installer" depends="build, mkdistdir">
		<exec osfamily="windows" dir="${workspace}/freeplane_framework/windows-installer" executable="iscc.exe" failifexecutionfails="false" failonerror="true">
			<arg line="/Q Freeplane_without_Java.iss" />
		</exec>
	</target>

	<target name="portableinstaller" depends="build, mkdistdir">
		<property name="workingdir" value="${root}/temp/FreeplanePortable" />
		<delete quiet="true" includeemptydirs="false">
			<fileset dir="${workingdir}/.." />
		</delete>
		<mkdir dir="${workingdir}/App/Freeplane" />
		<copy todir="${workingdir}">
			<fileset dir="${root}/windows-portable" />
		</copy>
		<mkdir dir="${workingdir}/Other/Source" />
		<copy tofile="${workingdir}/Other/Source/EULA.txt">
			<fileset file="${workspace}/freeplane/resources/license.txt" />
		</copy>
		<copy tofile="${workingdir}/App/AppInfo/appicon.ico">
			<fileset file="launch4j/Freeplane_app.ico" />
		</copy>

		<copy todir="${workingdir}/App/Freeplane">
			<fileset dir="${build}">
				<exclude name="*.bat" />
				<exclude name="*.ini" />
				<exclude name="*.sh" />
			</fileset>
		</copy>
		<copy file="${root}/portableApps/portable.ini" tofile="${workingdir}/App/Freeplane/freeplane.l4j.ini" />

		<copy file="${root}/portableApps/portable.ini" tofile="${workingdir}/App/Freeplane/freeplaneConsole.l4j.ini" />

		<dirname property="workingdir.path" file="${workingdir}/file" />
		<exec osfamily="windows" executable="PortableApps.comInstaller.exe" failifexecutionfails="false" failonerror="true">
			<arg line="${workingdir.path}" />
		</exec>
		<move todir="${dist}">
			<fileset dir="${workingdir}/..">
				<include name="*.paf.exe" />
			</fileset>
		</move>

		<mkdir dir="${workingdir}/App/Freeplane/resources/images" />
		<copy file="${root}/portableApps/Splash.png" tofile="${workingdir}/App/Freeplane/resources/images/Freeplane_splash.png" />
		<exec osfamily="windows" executable="PortableApps.comInstaller.exe" failifexecutionfails="false" failonerror="true">
			<arg line="${workingdir.path}" />
		</exec>
		<move todir="${dist}">
			<mapper type="glob" from="*.paf.exe" to="*-Test.paf.exe" />
			<fileset dir="${workingdir}/..">
				<include name="*.paf.exe" />
			</fileset>
		</move>

		<delete quiet="true" includeemptydirs="true">
			<fileset dir="${workingdir}/.." />
		</delete>

	</target>

	<!-- Mac OS X -->
	<target name="macosxapp" depends="build">

		<property name="macpluginsdir" value="plugins" />
		<!-- !! TODO: Delete this unused property, and also delete its use in below in the jarbundler vmoptions field
            Disabled "command-line" parameters because the "$1" syntax is probably incorrect here:
    <property name="macparams" value="-Dorg.freeplane.param1=$1 -Dorg.freeplane.param2=$2 -Dorg.freeplane.param3=$3 -Dorg.freeplane.param4=$4" />
    -->
		<property name="macdefines" value="-Dorg.knopflerfish.framework.bundlestorage=memory -Dorg.freeplane.globalresourcedir=./resources -Dorg.knopflerfish.gosg.jars=reference:file:./core/" />

		<!-- uncomment to start remote debug session for the app
	<property name="debugparams" value="-Xdebug -Xrunjdwp:transport=dt_socket,address=localhost:8000"/>
	-->

		<condition property="debugparams" else="">
			<isset property="debugparams" />
		</condition>

		<!-- Delete any existing Freeplane.app (it's a directory) -->
		<mkdir dir="${build4mac}" />
		<delete dir="${build4mac}/Freeplane.app" />
		<jarbundler dir="${build4mac}" name="Freeplane" mainclass="org.knopflerfish.framework.Main" version="${ver}" infostring="Freeplane ${ver}" shortname="Freeplane" bundleid="org.freeplane.core" jvmversion="1.2+" vmoptions="${debugparams} -Xmx512m ${macdefines}" arguments="-xargs ./props.xargs -xargs ./init.xargs" jar="${build}/framework.jar" icon="${mac-jarbundler}/freeplane.icns" stubfile="${mac-jarbundler}/FreeplaneJavaApplicationStub" signature="FP">
			<!-- For OSGI we want the entire build/ tree except WIndows-related stuff
             Commented out to allow testing jar=framework.jar
      <jarfileset dir="${macosgidir}">
        <exclude name="**/*.bat" />
        <exclude name="**/*.exe" />
      </jarfileset>
      -->

			<!-- Commenting out the document icon until we get an appropriate image
                    iconfile="${mac-jarbundler}/Banner.icns"
      -->
			<documenttype name="Mindmap" extensions="mm" ostypes="MM" iconfile="${mac-jarbundler}/freeplanedoc.icns" role="Editor" />
		</jarbundler>
		<chmod file="${macappfullpath}/Contents/MacOS/FreeplaneJavaApplicationStub" perm="ugo+rx" />
		<!-- Patch the Info.plist file created by JarBundler, to work with Knopflerfish OSGI
           Courtesy of Volker who supplied the logic for this <replace> subtask
           Allows Freeplane to start when double-clicking on Freeplane.app in Finder
           Sets the WorkingDirectory to $JAVAROOT
              Found this idea in a post on Knopflerfish's SF site:
                http://sourceforge.net/tracker/index.php?func=detail&aid=1651148&group_id=82798&atid=567241
                The downloadable example code has problems but inspired the solution
    -->
		<echo message="Adding WorkingDirectory to Info.plist" />
		<property name="dist_macos_info" location="${macappfullpath}/Contents/Info.plist" />
		<xslt style="${mac-jarbundler}/mac_info_plist.xslt" in="${dist_macos_info}" out="${dist_macos_info}2" />
		<move file="${dist_macos_info}2" tofile="${dist_macos_info}" />
		<!-- Done. -->

		<!-- Copy the entire build/ tree except WIndows-related stuff
          Also exclude the OSGI framework.jar which is copied by the jarbundler task
          Doing this separately to allow specifying jar=framework.jar in the jarbundler task
            jarbundler allows either jar= or jarfileset but not both
            Copying after the jarbundler task which creates the Freeplane.app directory
              JarBundler may erase the directory if it already exists
                This is documented in their change log
            !! TODO: Test restoring the jarfileset inside jarbundler
                       Comment out this copy task, and delete it if jarfileset works
    -->
		<property name="macjavafullpath" value="${macappfullpath}/Contents/Resources/Java" />
		<copy todir="${macjavafullpath}">
			<fileset dir="${build}">
				<exclude name="**/*.bat" />
				<exclude name="**/*.exe" />
				<exclude name="**/framework.jar" />
			</fileset >
		</copy>

		<!-- Restore the eXecutable permission flags on the Unix script -->
		<echo message="Setting eXecutable permissions on ${macappfullpath}/Contents/Resources/Java/freeplane.sh" />
		<chmod file="${macappfullpath}/Contents/Resources/Java/freeplane.sh" perm="ugo+rx" />
	</target>

	<target name="zip4mac" depends="git_version_info, macosxapp">
		<zip destfile="${dist}/freeplane_macos_bin-${ver}.zip" compress="true">
			<zipfileset dir="${build4mac}" prefix="freeplane-${ver}">
				<exclude name="${macappfullpath}/Contents/MacOS/FreeplaneJavaApplicationStub" />
			</zipfileset>
			<zipfileset file="${macappfullpath}/Contents/MacOS/FreeplaneJavaApplicationStub" filemode="775" prefix="freeplane-${ver}/Freeplane.app/Contents/MacOS" />
		</zip>
	</target>
	<target name="dmg4mac" depends="git_version_info, macosxapp" if="isMacOs">
		<exec executable="hdiutil">
			<arg line="create -srcfolder ${macappfullpath} ${dist}/freeplane_app-${ver}.dmg" />
		</exec>
	</target>

	<target name="dist" depends="git_version_info, binzip, serverzip, srczip, installer, portableinstaller, zip4mac, dmg4mac, javadoc">
		<copy file="${workspace}/freeplane/doc/history_en.txt" todir="${dist}" />
		<copy file="${build}/gitinfo.txt" tofile="${dist}/gitinfo-${ver}.txt" failonerror="false" />
		<copy file="${workspace}/freeplane_plugin_script/dist/script-api.zip" tofile="${dist}/script-api-${ver}.zip" failonerror="false" />
	</target>

	<target name="cleandist" depends="clean,dist">
	</target>

	<target name="check-translation">
		<ant antfile="ant/build.xml" target="check-translation" dir="${workspace}/freeplane" />
	</target>
	<target name="format-translation">
		<ant antfile="ant/build.xml" target="format-translation" dir="${workspace}/freeplane" />
	</target>
	<target name="format-translation-force">
		<ant antfile="ant/build.xml" target="format-translation-force" dir="${workspace}/freeplane" />
	</target>
	<target name="create-plugin">
		<create-plugin />
	</target>
	<target name="test">
		<ant antfile="build.xml" target="test" dir="${workspace}/freeplane_ant" inheritall="false" />
		<ant antfile="ant/build.xml" target="test" dir="${workspace}/freeplane_plugin_script" inheritall="false" />
		<ant antfile="ant/build.xml" target="test" dir="${workspace}/freeplane_uitest" inheritall="false" />
	</target>

	<target name="clean">
		<delete quiet="true" includeemptydirs="true">
			<fileset dir="${build}" />
			<fileset dir="${launcher_build}" />
			<fileset dir="${build4mac}" />
			<fileset dir="${dist}" />
		</delete>
		<ant antfile="ant/build.xml" target="clean" inheritall="false" dir="${workspace}/freeplane" />
		<ant antfile="ant/build.xml" target="clean" inheritall="false" dir="${workspace}/freeplane_plugin_help" />
		<ant antfile="ant/build.xml" target="clean" inheritall="false" dir="${workspace}/freeplane_plugin_svg" />
		<ant antfile="ant/build.xml" target="clean" inheritall="false" dir="${workspace}/freeplane_plugin_latex" />
		<ant antfile="ant/build.xml" target="clean" inheritall="false" dir="${workspace}/freeplane_plugin_script" />
		<ant antfile="ant/build.xml" target="clean" inheritall="false" dir="${workspace}/freeplane_plugin_formula" />
		<ant antfile="ant/build.xml" target="clean" inheritall="false" dir="${workspace}/freeplane_plugin_bugreport" />
		<ant antfile="ant/build.xml" target="clean" inheritall="false" dir="${workspace}/freeplane_plugin_remote_server" />
		<ant antfile="ant/build.xml" target="clean" inheritall="false" dir="${workspace}/freeplane_plugin_remote_client" />
	</target>

</project>

<project name="freeplane_mac" default="dist" basedir="..">
	<property name="workspace" location=".." />
	<property name="src" value="src" />
	<property file="${workspace}/freeplane_framework/ant/ant.properties" />
	<property file="${workspace}/freeplane/ant/ant.properties" />
	<property name="build" value="build" />
	<property name="dist" value="dist" />
	<property name="debug" value="on" />
	<property name="java_source_version" value="1.5" />
	<property name="java_target_version" value="1.5" />
	<property name="build.compiler" value="modern" />
	<property name="classpath" value="${framework.jar}:${freeplane.jars}"/>

	<target name="build">
		<mkdir dir="${build}"/>
		<javac srcdir="${src}" destdir="${build}" classpath="${classpath}" debug="${debug}" 
			source="${java_source_version}" target="${java_target_version}">
		</javac>
	</target>


	<target name="dist" depends="build">
		<jar jarfile="${workspace}/freeplane/lib/freeplanemac.jar" update="false" >
			<fileset dir="${build}"/>
		</jar>
	</target>

	<target name="clean">
		<delete dir="${build}"  quiet="true"/>
		<delete>
			<fileset defaultexcludes="no" dir="${src}" includes="**/*~"/>
		</delete>
	</target>
	
</project>

<project name="freeplane_accountmanager" default="dist" basedir="..">
	<property name="workspace" location=".." />
	<property name="src" value="src" />
	<property name="resources" value="resources" />
	<property name="root" value="."/>
	<property name="osgimanifest" value="${root}/META-INF/MANIFEST.MF" />	
	<property file="${workspace}/freeplane_framework/ant/ant.properties" />
	<property file="${workspace}/freeplane/ant/ant.properties" />
	<property file="ant/ant.properties" />
	<property name="external.jars" value="" />
	<property name="build" value="${root}/build" />
	<property name="build" value="${root}/build" />
	<property name="dist" value="${root}/dist" />
	<property name="dist.osgi.dir" value="${dist}/org.freeplane.plugin.accountmanager" />
	<property name="freeplaneplugin.jar" value="${dist}/org.freeplane.plugin.accountmanager.jar"/>
	<property name="debug" value="on" />
	<property name="java_source_version" value="1.5" />
	<property name="java_target_version" value="1.5" />
	<property name="build.compiler" value="modern" />
	<property name="classpath" value="${framework.jar}:${freeplane.jars}:${external.jars}:${jhall.jar}"/>

	<target name="build">
		<mkdir dir="${build}" />
		<javac srcdir="${src}" destdir="${build}" classpath="${classpath}" debug="${debug}" 
			source="${java_source_version}" target="${java_target_version}" encoding="utf8">
		</javac>
	</target>


	<target name="dist" depends="build">
		<jar jarfile="lib/plugin.jar">
			<fileset dir="${build}"/>
			<fileset dir="${resources}"/>
            <fileset dir="${src}">
                <include name="**/*.xml"/>
                <include name="**/*.properties"/>
            </fileset>
		</jar>
		<delete dir="${dist.osgi.dir}" quiet="true"/>
		<mkdir dir="${dist.osgi.dir}" />
		<copy todir="${dist.osgi.dir}">
			<fileset dir="${root}">
				<include name="lib/**"/>
			</fileset>
		</copy>
		<mkdir dir="${dist.osgi.dir}/META-INF" />
		<copy tofile="${dist.osgi.dir}/META-INF/MANIFEST.MF" file="${osgimanifest}"/>
		<delete file="lib/plugin.jar" quiet="true"/>
	</target>

	<target name="osgi_dist_as_jar" depends="dist">
		<jar jarfile="${freeplaneplugin.jar}">
			<fileset dir="${dist.osgi.dir}">
				<include name="**" />
			</fileset>
		</jar>
	</target>
	
	<target name="clean">
		<delete dir="${build}"  quiet="true"/>
		<delete dir="${dist}"  quiet="true"/>
		<delete>
			<fileset defaultexcludes="no" dir="${src}" includes="**/*~"/>
		</delete>
	</target>
	
</project>

<project name="freeplane_script" default="dist" basedir="..">
	<property name="workspace" location=".." />
	<property name="src" value="src" />
	<property name = "root" value = "."/>
	<property name="osgimanifest" value="${root}/META-INF/MANIFEST.MF" />	
	<property file="${workspace}/freeplane_framework/ant/ant.properties" />
	<property file="${workspace}/freeplane/ant/ant.properties" />
	<property file="ant/ant.properties" />
	<property name="external.jars" value="${commons-lang.jar}:${forms.jar}:${SimplyHTML.jar}" />
	<property name="build" value="${root}/build" />
	<property name="dist" value="${root}/dist" />
	<property name="dist.osgi.dir" value="${dist}/org.freeplane.plugin.bugreport" />
	<property name="freeplaneplugin.jar" value="${dist}/org.freeplane.plugin.bugreport.jar"/>
	<property name="debug" value="on" />
	<property name="java_source_version" value="1.5" />
	<property name="java_target_version" value="1.5" />
	<property name="build.compiler" value="modern" />
	<property name="classpath" value="${framework.jar}:${freeplane.jars}:${external.jars}"/>

	<target name="build">
		<mkdir dir="${build}" />
		<javac srcdir="${src}" destdir="${build}" classpath="${classpath}" debug="${debug}" 
			source="${java_source_version}" target="${java_target_version}" encoding="utf8">
		</javac>
	</target>


	<target name="dist" depends="build">
		<jar jarfile="lib/plugin.jar">
			<fileset dir="${build}"/>
		</jar>
		<delete dir="${dist.osgi.dir}" quiet="true"/>
		<mkdir dir="${dist.osgi.dir}" />
		<copy todir="${dist.osgi.dir}">
			<fileset dir="${root}">
				<include name="lib/**"/>
			</fileset>
		</copy>
		<mkdir dir="${dist.osgi.dir}/META-INF" />
		<copy tofile="${dist.osgi.dir}/META-INF/MANIFEST.MF" file="${osgimanifest}"/>
		<delete file="lib/plugin.jar" quiet="true"/>
	</target>

	<target name="osgi_dist_as_jar" depends="dist">
		<jar jarfile="${freeplaneplugin.jar}">
			<fileset dir="${dist.osgi.dir}">
				<include name="**" />
			</fileset>
		</jar>
	</target>
	
	<target name="clean">
		<delete dir="${build}"  quiet="true"/>
		<delete dir="${dist}"  quiet="true"/>
		<delete>
			<fileset defaultexcludes="no" dir="${src}" includes="**/*~"/>
		</delete>
	</target>
	
</project>

<project name="freeplane_formula" default="dist" basedir="..">
	<property name="workspace" location=".." />
	<property name="src" value="src" />
	<property name="root" value="."/>
	<property name="osgimanifest" value="${root}/META-INF/MANIFEST.MF" />	
	<property file="${workspace}/freeplane_framework/ant/ant.properties" />
	<property file="${workspace}/freeplane/ant/ant.properties" />
	<property file="ant/ant.properties" />
	<property name="external.jars" value="" />
	<property name="build" value="${root}/build" />
	<property name="dist" value="${root}/dist" />
	<property name="dist.osgi.dir" value="${dist}/org.freeplane.plugin.formula" />
	<property name="freeplaneplugin.jar" value="${dist}/org.freeplane.plugin.formula.jar"/>
	<property name="debug" value="on" />
	<property name="java_source_version" value="1.5" />
	<property name="java_target_version" value="1.5" />
	<property name="build.compiler" value="modern" />
	<property name="classpath" value="${framework.jar}:${freeplane.jars}:${external.jars}:${freeplanescript.jar}"/>

	<target name="build">
		<mkdir dir="${build}" />
		<javac srcdir="${src}" destdir="${build}" classpath="${classpath}" debug="${debug}" 
			source="${java_source_version}" target="${java_target_version}" encoding="utf8">
		</javac>
	</target>


	<target name="dist" depends="build">
		<jar jarfile="lib/plugin.jar">
			<fileset dir="${build}"/>
			<fileset dir="${src}">
				<include name="**/*.xml"/>
				<include name="**/*.properties"/>
			</fileset>
		</jar>
		<delete dir="${dist.osgi.dir}" quiet="true"/>
		<mkdir dir="${dist.osgi.dir}" />
		<copy todir="${dist.osgi.dir}">
			<fileset dir="${root}">
				<include name="lib/**"/>
			</fileset>
		</copy>
		<mkdir dir="${dist.osgi.dir}/META-INF" />
		<copy tofile="${dist.osgi.dir}/META-INF/MANIFEST.MF" file="${osgimanifest}"/>
		<delete file="lib/plugin.jar" quiet="true"/>
	</target>

	<target name="osgi_dist_as_jar" depends="dist">
		<jar jarfile="${freeplaneplugin.jar}">
			<fileset dir="${dist.osgi.dir}">
				<include name="**" />
			</fileset>
		</jar>
	</target>
	
	<target name="clean">
		<delete dir="${build}"  quiet="true"/>
		<delete dir="${dist}"  quiet="true"/>
		<delete>
			<fileset defaultexcludes="no" dir="${src}" includes="**/*~"/>
		</delete>
	</target>
	
</project>

<project name="freeplane_help" default="dist" basedir="..">
	<property name="workspace" location=".." />
	<property name="src" value="src" />
	<property name="resources" value="resources" />
	<property name="root" value="."/>
	<property name="osgimanifest" value="${root}/META-INF/MANIFEST.MF" />	
	<property file="${workspace}/freeplane_framework/ant/ant.properties" />
	<property file="${workspace}/freeplane/ant/ant.properties" />
	<property file="ant/ant.properties" />
	<property name="external.jars" value="${commons-lang.jar}:${forms.jar}:${SimplyHTML.jar}" />
	<property name="build" value="${root}/build" />
	<property name="build" value="${root}/build" />
	<property name="dist" value="${build}/dist" />
	<property name="dist.osgi.dir" value="${dist}/org.freeplane.plugin.help" />
	<property name="freeplaneplugin.jar" value="${dist}/org.freeplane.plugin.help.jar"/>
	<property name="debug" value="on" />
	<property name="java_source_version" value="1.5" />
	<property name="java_target_version" value="1.5" />
	<property name="build.compiler" value="modern" />
	<property name="classpath" value="${framework.jar}:${freeplane.jars}:${external.jars}:${jhall.jar}"/>

	<target name="build">
		<mkdir dir="${build}" />
		<javac srcdir="${src}" destdir="${build}" classpath="${classpath}" debug="${debug}" 
			source="${java_source_version}" target="${java_target_version}" encoding="utf8">
		</javac>
	</target>


	<target name="dist" depends="build">
		<jar jarfile="lib/plugin.jar">
			<fileset dir="${build}"/>
			<fileset dir="${resources}"/>
		</jar>
		<delete dir="${dist.osgi.dir}" quiet="true"/>
		<mkdir dir="${dist.osgi.dir}" />
		<copy todir="${dist.osgi.dir}">
			<fileset dir="${root}">
				<include name="lib/**"/>
			</fileset>
		</copy>
		<mkdir dir="${dist.osgi.dir}/META-INF" />
		<copy tofile="${dist.osgi.dir}/META-INF/MANIFEST.MF" file="${osgimanifest}"/>
		<delete file="lib/plugin.jar" quiet="true"/>
	</target>

	<target name="osgi_dist_as_jar" depends="dist">
		<jar jarfile="${freeplaneplugin.jar}">
			<fileset dir="${dist.osgi.dir}">
				<include name="**" />
			</fileset>
		</jar>
	</target>
	
	<target name="clean">
		<delete dir="${build}"  quiet="true"/>
		<delete dir="${dist}"  quiet="true"/>
		<delete>
			<fileset defaultexcludes="no" dir="${src}" includes="**/*~"/>
		</delete>
	</target>
	
</project>

<project name="freeplane_latex" default="dist" basedir="..">
	<property name="workspace" location=".." />
	<property name="src" value="src" />
	<property name="root" value="."/>
	<property name="osgimanifest" value="${root}/META-INF/MANIFEST.MF" />	
	<property file="${workspace}/freeplane_framework/ant/ant.properties" />
	<property file="${workspace}/freeplane/ant/ant.properties" />
	<property file="ant/ant.properties" />
	<property name="external.jars" value="${commons-lang.jar}:${forms.jar}:${SimplyHTML.jar}:${jlatexmath.jar}" />
	<property name="build" value="${root}/build" />
	<property name="dist" value="${root}/dist" />
	<property name="dist.osgi.dir" value="${dist}/org.freeplane.plugin.latex" />
	<property name="freeplaneplugin.jar" value="${dist}/org.freeplane.plugin.latex.jar"/>
	<property name="debug" value="on" />
	<property name="java_source_version" value="1.5" />
	<property name="java_target_version" value="1.5" />
	<property name="build.compiler" value="modern" />
	<property name="classpath" value="${framework.jar}:${freeplane.jars}:${external.jars}"/>

	<target name="build">
		<mkdir dir="${build}" />
		<javac srcdir="${src}" destdir="${build}" classpath="${classpath}" debug="${debug}" 
			source="${java_source_version}" target="${java_target_version}" encoding="utf8">
		</javac>
	</target>


	<target name="dist" depends="build">
		<jar jarfile="lib/plugin.jar">
			<fileset dir="${build}"/>
		</jar>
		<delete dir="${dist.osgi.dir}" quiet="true"/>
		<mkdir dir="${dist.osgi.dir}" />
		<copy todir="${dist.osgi.dir}">
			<fileset dir="${root}">
				<include name="lib/**"/>
			</fileset>
		</copy>
		<mkdir dir="${dist.osgi.dir}/META-INF" />
		<copy tofile="${dist.osgi.dir}/META-INF/MANIFEST.MF" file="${osgimanifest}"/>
		<delete file="lib/plugin.jar" quiet="true"/>
	</target>

	<target name="osgi_dist_as_jar" depends="dist">
		<jar jarfile="${freeplaneplugin.jar}">
			<fileset dir="${dist.osgi.dir}">
				<include name="**" />
			</fileset>
		</jar>
	</target>
	
	<target name="clean">
		<delete dir="${build}"  quiet="true"/>
		<delete dir="${dist}"  quiet="true"/>
		<delete>
			<fileset defaultexcludes="no" dir="${src}" includes="**/*~"/>
		</delete>
	</target>
	
</project>

<project name="freeplane_openmaps" default="dist" basedir="..">
	<property name="workspace" location=".." />
	<property name="src" value="src" />
	<property name="root" value="."/>
	<property name="osgimanifest" value="${root}/META-INF/MANIFEST.MF" />	
	<property file="${workspace}/freeplane_framework/ant/ant.properties" />
	<property file="${workspace}/freeplane/ant/ant.properties" />
	<property file="ant/ant.properties" />
	<property name="external.jars" value="${commons-lang.jar}:${forms.jar}:${SimplyHTML.jar}:${JMapViewer.jar}" />
	<property name="build" value="${root}/build" />
	<property name="dist" value="${root}/dist" />
	<property name="dist.osgi.dir" value="${dist}/org.freeplane.plugin.openmaps" />
	<property name="freeplaneplugin.jar" value="${dist}/org.freeplane.plugin.openmaps.jar"/>
	<property name="debug" value="on" />
	<property name="java_source_version" value="1.5" />
	<property name="java_target_version" value="1.5" />
	<property name="build.compiler" value="modern" />
	<property name="classpath" value="${framework.jar}:${freeplane.jars}:${external.jars}"/>

	<target name="build">
		<mkdir dir="${build}" />
		<javac srcdir="${src}" destdir="${build}" classpath="${classpath}" debug="${debug}" 
			source="${java_source_version}" target="${java_target_version}" encoding="utf8">
		</javac>
	</target>


	<target name="dist" depends="build">
		<jar jarfile="lib/plugin.jar">
			<fileset dir="${build}"/>
		</jar>
		<delete dir="${dist.osgi.dir}" quiet="true"/>
		<mkdir dir="${dist.osgi.dir}" />
		<copy todir="${dist.osgi.dir}">
			<fileset dir="${root}">
				<include name="lib/**"/>
			</fileset>
		</copy>
		<mkdir dir="${dist.osgi.dir}/META-INF" />
		<copy tofile="${dist.osgi.dir}/META-INF/MANIFEST.MF" file="${osgimanifest}"/>
		<delete file="lib/plugin.jar" quiet="true"/>
	</target>

	<target name="osgi_dist_as_jar" depends="dist">
		<jar jarfile="${freeplaneplugin.jar}">
			<fileset dir="${dist.osgi.dir}">
				<include name="**" />
			</fileset>
		</jar>
	</target>
	
	<target name="clean">
		<delete dir="${build}"  quiet="true"/>
		<delete dir="${dist}"  quiet="true"/>
		<delete>
			<fileset defaultexcludes="no" dir="${src}" includes="**/*~"/>
		</delete>
	</target>
	
</project>

<project name="freeplane_remote_client" default="dist" basedir=".." xmlns:ivy="antlib:org.apache.ivy.ant">
	<property name="workspace" location=".." />
	<property name="src" value="src" />
	<property name="resources" value="resources" />
	<property name="root" value="." />
	<property name="osgimanifest" value="${root}/META-INF/MANIFEST.MF" />
	<property file="${workspace}/freeplane_framework/ant/ant.properties" />
	<property file="${workspace}/freeplane/ant/ant.properties" />
	<property file="ant/ant.properties" />
	<property name="build" value="${root}/build" />
	<property name="lib" value="${root}/lib" />
	<property name="dist" value="${root}/dist" />
	<property name="dist.osgi.dir" value="${dist}/org.freeplane.plugin.remote.client" />
	<property name="freeplaneplugin.jar" value="${dist}/org.freeplane.plugin.remote.client.jar" />
	<property name="debug" value="on" />
	<property name="java_source_version" value="1.5" />
	<property name="java_target_version" value="1.5" />
	<property name="build.compiler" value="modern" />
	<property name="classpath" value="${framework.jar}:${freeplane.jars}:${services.jar}:${core.jar}:${workspace.jar}:${dependencies.jars}:${client-libs}" />
	<property name="ivy.jar.dir" value="${basedir}/ivy" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
	<property name="build.dir" value="build" />
	<property name="src.dir" value="src" />
	<property name="JOrtho_0.4_freeplane.location" value="${root}/../JOrtho_0.4_freeplane" />
	<property name="freeplane.location" value="${root}/../freeplane" />
	<property name="freeplane.remote.shared.location" value="${root}/../freeplane_plugin_remote_shared" />


	<path id="JOrtho_0.4_freeplane.classpath">
		<pathelement location="${JOrtho_0.4_freeplane.location}/bin" />
	</path>

	<path id="freeplane.classpath">
		<fileset dir="${freeplane.location}/lib/" includes="**.jar" />
		<pathelement location="${freeplane.location}/bin/classes" />
		<path refid="JOrtho_0.4_freeplane.classpath" />
	</path>

	<path id="freeplane_plugin_remote_client.classpath">
		<pathelement location="bin" />
		<pathelement location="ivy/ivy.jar" />
		<fileset dir="${root}/lib/" includes="**.jar" />
		<path refid="freeplane.classpath" />
	</path>

	<target name="install-ivy" description="adds ivy ant module to ant">
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar" />
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
	</target>

	<target name="resolve-remote-shared" description="retrieve freeplane_remote_shared.jar">
		<copy file="${root}/../freeplane_plugin_remote_shared/lib/freeplane_remote_shared.jar" todir="${root}/lib" />
	</target>
			
	<target name="resolve" description="retrieve dependencies with ivy" depends="install-ivy">
		<ivy:retrieve />
	</target>

	<target name="build" depends="resolve-remote-shared,lib_fileset,git.revision">
		<mkdir dir="${build}" />
		<javac srcdir="${src}" destdir="${build}" debug="${debug}" source="${java_source_version}" target="${java_target_version}" encoding="utf8">
			<classpath>
				<fileset dir="lib">
					<include name="**/*.jar" />
				</fileset>
				<pathelement path="${classpath}/" />
			</classpath>
		</javac>
	</target>


    <target name="lib_fileset" depends="resolve">
		<fileset id="resolved_jars" dir="lib">
			<include name="*.jar" />
		</fileset>
		<pathconvert pathsep=",${line.separator} " property="resolved.jars.path" refid="resolved_jars">
			<map from="${basedir}/" to="" />
		</pathconvert>
        <delete file="${basedir}/META-INF/MANIFEST.MF" quiet="true"/>
		<copy tofile="${basedir}/META-INF/MANIFEST.MF" file="${basedir}/META-INF/MANIFEST.MF.template">
			<filterset>
				<filter token="DEPENDENCY_JARS" value="${resolved.jars.path}" />
			</filterset>
		</copy>
        <echo message="resolved"></echo>
	</target>

	<target name="dist" depends="build">
		<jar jarfile="lib/plugin.jar">
			<fileset dir="${build}" />
			<fileset dir="${resources}" />
			<fileset dir="${src}">
				<include name="**/*.xml" />
				<include name="**/*.properties" />
				<include name="**/*.txt" />
			</fileset>
		</jar>
		<delete dir="${dist.osgi.dir}" quiet="true" />
		<mkdir dir="${dist.osgi.dir}" />
		<copy todir="${dist.osgi.dir}">
			<fileset dir="${root}">
				<include name="lib/**" />
			</fileset>
		</copy>
		<mkdir dir="${dist.osgi.dir}/META-INF" />

		<copy tofile="${dist.osgi.dir}/META-INF/MANIFEST.MF" file="${osgimanifest}">
		</copy>
		<delete file="lib/plugin.jar" quiet="true" />
	</target>

	<target name="osgi_dist_as_jar" depends="dist">
		<jar jarfile="${freeplaneplugin.jar}">
			<fileset dir="${dist.osgi.dir}">
				<include name="**" />
			</fileset>
		</jar>
	</target>

	<target name="clean">
		<delete dir="${build}" quiet="true" />
		<delete dir="${dist}" quiet="true" />
		<delete dir="${lib}" quiet="true" />
		<delete>
			<fileset defaultexcludes="no" dir="${src}" includes="**/*~" />
		</delete>
	</target>
	
	<available file="../.git" type="dir" property="git.present"/>
	<target name="git.revision"  if="git.present">
		<exec executable="git" outputproperty="git.revision" failifexecutionfails="false" errorproperty="">
			<arg value="rev-parse"/>
			<arg value="HEAD"/>
		</exec>
		<condition property="repository.version" value="${git.revision}" else="unknown">
			<and>
				<isset property="git.revision"/>
				<length string="${git.revision}" trim="yes" length="0" when="greater"/>
			</and>
		</condition>
		<mkdir dir="${build}" />
		<touch file="${build}/git.commit"/> 
		<propertyfile file="${build}/git.commit">
			<entry  key="commit" value="${repository.version}"/>
		</propertyfile>
	</target>

</project>

<project name="docear_remote_server" default="dist" basedir=".." xmlns:ivy="antlib:org.apache.ivy.ant">
	<property name="workspace" location=".." />
	<property name="src" value="src" />
	<property name="resources" value="resources" />
	<property name="root" value="." />
	<property name="osgimanifest" value="${root}/META-INF/MANIFEST.MF" />
	<property file="${workspace}/freeplane_framework/ant/ant.properties" />
	<property file="${workspace}/freeplane/ant/ant.properties" />
	<property file="ant/ant.properties" />
	<property name="build" value="${root}/build" />
	<property name="lib" value="${root}/lib" />
	<property name="dist" value="${root}/dist" />
	<property name="dist.osgi.dir" value="${dist}/org.freeplane.plugin.remote.server" />
	<property name="freeplaneplugin.jar" value="${dist}/org.freeplane.plugin.remote.server.jar" />
	<property name="debug" value="on" />
	<property name="java_source_version" value="1.5" />
	<property name="java_target_version" value="1.5" />
	<property name="build.compiler" value="modern" />
	<property name="classpath" value="${framework.jar}:${freeplane.jars}:${services.jar}:${core.jar}:${workspace.jar}:${dependencies.jars}:${remote-libs}" />
	<property name="ivy.jar.dir" value="${basedir}/ivy" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
	<property name="build.dir" value="build" />
	<property name="src.dir" value="src" />
	<property name="JOrtho_0.4_freeplane.location" value="${root}/../JOrtho_0.4_freeplane" />
	<property name="freeplane.location" value="${root}/../freeplane" />
	<property name="freeplane.remote.shared.location" value="${root}/../freeplane_plugin_remote_shared" />
	


	<path id="JOrtho_0.4_freeplane.classpath">
		<pathelement location="${JOrtho_0.4_freeplane.location}/bin" />
	</path>

	<path id="freeplane.classpath">
		<fileset dir="${freeplane.location}/lib/" includes="**.jar" />
		<pathelement location="${freeplane.location}/bin/classes" />
		<path refid="JOrtho_0.4_freeplane.classpath" />
	</path>

	<path id="freeplane_plugin_remote_server.classpath">
		<pathelement location="bin" />
		<pathelement location="ivy/ivy.jar" />
		<fileset dir="${root}/lib/" includes="**.jar" />
		<path refid="freeplane.classpath" />
	</path>

	<target name="install-ivy" description="adds ivy ant module to ant">
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar" />
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
	</target>


	<target name="resolve" description="retrieve dependencies with ivy" depends="install-ivy">
		<mkdir dir="report" />		    
		<ivy:retrieve />
		<!--<ivy:report todir="report" />-->
	</target>
	
	<target name="resolve-remote-shared" description="retrieve freeplane_remote_shared.jar">
		<copy file="${root}/../freeplane_plugin_remote_shared/lib/freeplane_remote_shared.jar" todir="${root}/lib" />
	</target>

	<target name="build" depends="resolve-remote-shared,lib_fileset,git.revision">
		<mkdir dir="${build}" />
		<javac srcdir="${src}" destdir="${build}" debug="${debug}" source="${java_source_version}" target="${java_target_version}" encoding="utf8">
			<classpath>
				<fileset dir="lib">
					<include name="**/*.jar" />
				</fileset>
				<pathelement path="${classpath}/" />
			</classpath>
		</javac>
	</target>


    <target name="lib_fileset" depends="resolve">
		<fileset id="resolved_jars" dir="lib">
			<include name="*.jar" />
		</fileset>
		<pathconvert pathsep=",${line.separator} " property="resolved.jars.path" refid="resolved_jars">
			<map from="${basedir}/" to="" />
		</pathconvert>
        <delete file="${basedir}/META-INF/MANIFEST.MF" quiet="true"/>
		<copy tofile="${basedir}/META-INF/MANIFEST.MF" file="${basedir}/META-INF/MANIFEST.MF.template">
			<filterset>
				<filter token="DEPENDENCY_JARS" value="${resolved.jars.path}" />
			</filterset>
		</copy>
        <echo message="resolved"></echo>
	</target>

	<target name="dist" depends="build">
		<jar jarfile="lib/plugin.jar">
			<fileset dir="${build}" />
			<fileset dir="${resources}" />
			<fileset dir="${src}">
				<include name="**/*.xml" />
				<include name="**/*.properties" />
				<include name="**/*.txt" />
			</fileset>
		</jar>
		<delete dir="${dist.osgi.dir}" quiet="true" />
		<mkdir dir="${dist.osgi.dir}" />
		<copy todir="${dist.osgi.dir}">
			<fileset dir="${root}">
				<include name="lib/**" />
			</fileset>
		</copy>
		<mkdir dir="${dist.osgi.dir}/META-INF" />

		<copy tofile="${dist.osgi.dir}/META-INF/MANIFEST.MF" file="${osgimanifest}">
		</copy>
		<delete file="lib/plugin.jar" quiet="true" />
	</target>

	<target name="osgi_dist_as_jar" depends="dist">
		<jar jarfile="${freeplaneplugin.jar}">
			<fileset dir="${dist.osgi.dir}">
				<include name="**" />
			</fileset>
		</jar>
	</target>

	<target name="clean">
		<delete dir="${build}" quiet="true" />
		<delete dir="${dist}" quiet="true" />
		<delete dir="${lib}" quiet="true" />
		<delete>
			<fileset defaultexcludes="no" dir="${src}" includes="**/*~" />
		</delete>
	</target>
	
	<available file="../.git" type="dir" property="git.present"/>
	<target name="git.revision"  if="git.present">
		<exec executable="git" outputproperty="git.revision" failifexecutionfails="false" errorproperty="">
			<arg value="rev-parse"/>
			<arg value="HEAD"/>
		</exec>
		<condition property="repository.version" value="${git.revision}" else="unknown">
			<and>
				<isset property="git.revision"/>
				<length string="${git.revision}" trim="yes" length="0" when="greater"/>
			</and>
		</condition>
		<mkdir dir="${build}" />
		<touch file="${build}/git.commit"/> 
		<propertyfile file="${build}/git.commit">
			<entry  key="commit" value="${repository.version}"/>
		</propertyfile>
	</target>

</project>

<project name="docear_remote_tests" default="dist" basedir=".." xmlns:ivy="antlib:org.apache.ivy.ant">
	<property name="workspace" location=".." />
	<property name="src" value="src" />
	<property name="resources" value="resources" />
	<property name="root" value="." />
	<property name="osgimanifest" value="${root}/META-INF/MANIFEST.MF" />
	<property file="${workspace}/freeplane_framework/ant/ant.properties" />
	<property file="${workspace}/freeplane/ant/ant.properties" />
	<property file="ant/ant.properties" />
	<property name="build.dir" value="${root}/build" />
	<property name="lib.dir" value="${root}/lib" />
	<property name="src.dir" value="${root}/src" />
	<property name="dist.dir" value="${root}/dist" />
	<property name="classes.dir" value="${build.dir}/classes" />
	<property name="jar.dir" value="${build.dir}/jar" />
	<property name="src.tests" value="${src.dir}/tests" />
	<property name="report.dir" value="${root}/report" />
	<property name="dist.osgi.dir" value="${dist}/org.freeplane.plugin.remote" />
	<property name="freeplaneplugin.jar" value="${dist}/org.freeplane.plugin.remote.jar" />
	<property name="debug" value="on" />
	<property name="java_source_version" value="1.5" />
	<property name="java_target_version" value="1.5" />
	<property name="build.compiler" value="modern" />
	<property name="classpath" value="${framework.jar}:${freeplane.jars}:${services.jar}:${core.jar}:${workspace.jar}:${dependencies.jars}:${remote-libs}" />
	<property name="classpath.tests" value="${freeplane.jars}:${remote-libs}:${remote-tests-libs}" />
	<property name="ivy.jar.dir" value="${basedir}/ivy" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
	<property name="JOrtho_0.4_freeplane.location" value="${root}/../JOrtho_0.4_freeplane" />
	<property name="freeplane.location" value="${root}/../freeplane" />
	<property name="freeplane_plugin_remote.location" value="${root}/../freeplane_plugin_remote" />
	<property name="freeplane.remote.shared.location" value="${root}/../freeplane_plugin_remote_shared" />
	<!-- END PROPERTIES -->

	<!-- BEGIN PATH-->
	<path id="JOrtho_0.4_freeplane.classpath">
		<pathelement location="${JOrtho_0.4_freeplane.location}/bin" />
	</path>
	<path id="freeplane.classpath">
		<fileset dir="${freeplane.location}/lib/" includes="**.jar"/>
		<pathelement location="${freeplane.location}/bin/classes" />
		<path refid="JOrtho_0.4_freeplane.classpath" />
	</path>
	<path id="freeplane_plugin_remote.classpath">
		<pathelement location="${freeplane_plugin_remote.location}/bin" />
		<pathelement location="${freeplane_plugin_remote.location}/ivy/ivy.jar" />
		<fileset dir="${freeplane_plugin_remote.location}/lib/" includes="**.jar"/>
		<path refid="freeplane.classpath" />
	</path>
	<path id="freeplane_plugin_remote_tests.classpath">
		<pathelement location="bin" />
		<pathelement location="ivy/ivy.jar" />
		<fileset dir="${root}/lib/" includes="**.jar"/>
		<path refid="freeplane.classpath" />
		<path refid="freeplane_plugin_remote.classpath" />
	</path>
	<!-- END PATH -->

	<!-- BEGIN TARGETS -->
	<target name="install-ivy" description="adds ivy ant module to ant">
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar" />
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
	</target>


	<target name="resolve" description="retrieve dependencies with ivy" depends="install-ivy">
		<ivy:retrieve />
	</target>
	
	<target name="resolve-remote-shared" description="retrieve freeplane_remote_shared.jar">
		<copy file="${root}/../freeplane_plugin_remote_shared/lib/freeplane_remote_shared.jar" todir="${root}/lib" />
	</target>

	<target name="clean">
		<delete dir="${build.dir}" quiet="true" />
		<delete dir="${dist.dir}" quiet="true" />
		<delete dir="${lib.dir}" quiet="true" />
		<delete>
			<fileset defaultexcludes="no" dir="${src}" includes="**/*~" />
		</delete>
	</target>

	<target name="cleanall" depends="clean">
		<ant antfile="build.xml" dir="${JOrtho_0.4_freeplane.location}" inheritAll="false" target="clean" />
		<ant antfile="build.xml" dir="${freeplane.location}/ant" inheritAll="false" target="clean" />
		<ant antfile="build.xml" dir="${freeplane_plugin_remote.location}/ant" inheritAll="false" target="clean" />
	</target>

	<target name="dist" depends="resolve, resolve-remote-shared">
	</target>

	<target name="init">
		<mkdir dir="bin" />
		<copy includeemptydirs="false" todir="bin">
			<fileset dir="src">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<copy includeemptydirs="false" todir="bin">
			<fileset dir="resources">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>

	<target name="build" depends="resolve,init">
		<echo message="${ant.project.name}: ${ant.file}" />
		<javac debug="true" destdir="bin" includeantruntime="false">
			<src path="src/tests" />
			<src path="resources" />
			<classpath refid="freeplane_plugin_remote_tests.classpath" />
		</javac>
	</target>

	<target name="build-freeplane">
		<ant antfile="build.xml" dir="${JOrtho_0.4_freeplane.location}" />
		<ant antfile="ant/build.xml" dir="${freeplane.location}" inheritAll="false" target="build" />
		<ant antfile="ant/build.xml" dir="${freeplane_plugin_remote.location}" inheritAll="false" target="build" />
	</target>
	
    <condition property="isOSUnix">
        <os family="unix" />
    </condition>

    <condition property="isOSWindows">
        <os family="windows" />
    </condition>
	
	<target name="ifOSWindows" if="isOSWindows">
		<echo>Starting Freeplane</echo>
		<exec dir="../freeplane_framework/build/" executable="cmd" >
			<arg line="/K freeplane.bat"/>
	    </exec>
    </target>
	
	<target name="killTaskIfWindows" if="isOSWindows">	
		<echo>Killing Freeplane</echo>
		<exec executable="taskkill">
			<arg value="-F"/>
			<arg value="/PID"/>
			<arg value="${pid}"/>
		</exec>	
    </target>

	<target name="ifOSNotWindows" if="isOSUnix">
		<echo>Starting Freeplane</echo>
		<exec dir="resources/" executable="bash">
		    <arg value="runFreeplane.sh"/>
		</exec>
    </target>
	
    <target name="killTaskIfUnix" if="isOSUnix">
    	<echo>Killing Freeplane</echo>
        <exec executable="bash">
			<arg value="kill -15"/>
        	<arg value="${pid}"/>
        </exec>
    </target>

	<target name="test">
		<echo>Dummy Test Target. This needs to be replaced.</echo>
	</target>
	
	<target name="junitreport">
		<junitreport todir="${report.dir}">
			<fileset dir="${report.dir}" includes="TEST-*.xml" />
			<report todir="${report.dir}" />
		</junitreport>
	</target>

	<!-- END TARGETS -->

</project>

<project name="docear_remote_shared" default="dist" basedir=".." xmlns:ivy="antlib:org.apache.ivy.ant">
	<property name="workspace" location=".." />
	<property name="src" value="src" />
	<property name="resources" value="resources" />
	<property name="root" value="." />
	<property name="osgimanifest" value="${root}/META-INF/MANIFEST.MF" />
	<property file="${workspace}/freeplane_framework/ant/ant.properties" />
	<property file="${workspace}/freeplane/ant/ant.properties" />
	<property file="ant/ant.properties" />
	<property name="build" value="${root}/build" />
	<property name="lib" value="${root}/lib" />
	<property name="dist" value="${root}/dist" />
	<property name="dist.osgi.dir" value="${dist}/org.freeplane.plugin.remote_shared" />
	<property name="freeplaneplugin.jar" value="${dist}/org.freeplane.plugin.remote_shared.jar" />
	<property name="debug" value="on" />
	<property name="java_source_version" value="1.5" />
	<property name="java_target_version" value="1.5" />
	<property name="build.compiler" value="modern" />
	<property name="classpath" value="${framework.jar}:${freeplane.jars}:${services.jar}:${core.jar}:${workspace.jar}:${dependencies.jars}:${remote_shared-libs}" />
	<property name="ivy.jar.dir" value="${basedir}/ivy" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
	<property name="build.dir" value="build" />
	<property name="src.dir" value="src" />
	<property name="JOrtho_0.4_freeplane.location" value="${root}/../JOrtho_0.4_freeplane" />
	<property name="freeplane.location" value="${root}/../freeplane" />


	<path id="JOrtho_0.4_freeplane.classpath">
		<pathelement location="${JOrtho_0.4_freeplane.location}/bin" />
	</path>

	<path id="freeplane.classpath">
		<fileset dir="${freeplane.location}/lib/" includes="**.jar" />
		<pathelement location="${freeplane.location}/bin/classes" />
		<path refid="JOrtho_0.4_freeplane.classpath" />
	</path>

	<path id="freeplane_plugin_remote_shared.classpath">
		<pathelement location="bin" />
		<pathelement location="ivy/ivy.jar" />
		<fileset dir="${root}/lib/" includes="**.jar" />
		<path refid="freeplane.classpath" />
	</path>

	<target name="install-ivy" description="adds ivy ant module to ant">
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar" />
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
	</target>


	<target name="resolve" description="retrieve dependencies with ivy" depends="install-ivy">
		<ivy:retrieve />
	</target>


	<target name="build" depends="lib_fileset">
		<mkdir dir="${build}" />
		<javac srcdir="${src}" destdir="${build}" debug="${debug}" source="${java_source_version}" target="${java_target_version}" encoding="utf8">
			<classpath>
				<fileset dir="lib">
					<include name="**/*.jar" />
				</fileset>
				<pathelement path="${classpath}/" />
			</classpath>
		</javac>
	</target>


    <target name="lib_fileset" depends="resolve">
		<fileset id="resolved_jars" dir="lib">
			<include name="*.jar" />
		</fileset>
		<pathconvert pathsep=",${line.separator} " property="resolved.jars.path" refid="resolved_jars">
			<map from="${basedir}/" to="" />
		</pathconvert>
        <echo message="resolved"></echo>
	</target>

	<target name="dist" depends="build">
		<jar jarfile="lib/freeplane_remote_shared.jar">
			<fileset dir="${build}" />
			<fileset dir="${resources}" />
			<fileset dir="${src}">
				<include name="**/*.xml" />
				<include name="**/*.properties" />
				<include name="**/*.txt" />
			</fileset>
		</jar>
		<delete dir="${dist.osgi.dir}" quiet="true" />
		<mkdir dir="${dist.osgi.dir}" />
		<copy todir="${dist.osgi.dir}">
			<fileset dir="${root}">
				<include name="lib/**" />
			</fileset>
		</copy>
	</target>

	<target name="osgi_dist_as_jar" depends="dist">
		<jar jarfile="${freeplaneplugin.jar}">
			<fileset dir="${dist.osgi.dir}">
				<include name="**" />
			</fileset>
		</jar>
	</target>

	<target name="clean">
		<delete dir="${build}" quiet="true" />
		<delete dir="${dist}" quiet="true" />
		<delete dir="${lib}" quiet="true" />
		<delete>
			<fileset defaultexcludes="no" dir="${src}" includes="**/*~" />
		</delete>
	</target>

</project>

<project name="freeplane_script" default="dist" basedir="..">
	<property name="workspace" location=".." />
	<property name="root" value="." />
	<property name="osgimanifest" value="${root}/META-INF/MANIFEST.MF" />
	<property file="${workspace}/freeplane_framework/ant/ant.properties" />
	<property file="${workspace}/freeplane/ant/ant.properties" />
	<property file="ant/ant.properties" />
	<property name="external.jars" value="${commons-lang.jar}:${commons-io.jar}:${forms.jar}:${SimplyHTML.jar}:${groovy.jar}" />
	<property name="dist.osgi.dir" value="dist/org.freeplane.plugin.script" />
	<property name="freeplaneplugin.jar" value="dist/org.freeplane.plugin.script.jar" />
	<property name="debug" value="on" />
	<property name="java_source_version" value="1.5" />
	<property name="java_target_version" value="1.5" />
	<property name="build.compiler" value="modern" />
	<property name="classpath" value="${framework.jar}:${freeplane.jars}:${external.jars}:${jsyntaxpane.jar}" />
	<property name="apidocdir" value="dist/doc/api" />

	<target name="build">
		<mkdir dir="build" />
		<javac srcdir="src" destdir="build" classpath="${classpath}" debug="${debug}" source="${java_source_version}" target="${java_target_version}" encoding="utf8">
			<exclude name="**/*Test.*" />
		</javac>
		<javac srcdir="src-jsyntaxpane" destdir="build" classpath="${classpath}" debug="${debug}" source="${java_source_version}" target="${java_target_version}" encoding="utf8">
		</javac>
	</target>

	<target name="dist" depends="build">
		<jar jarfile="lib/plugin.jar">
			<fileset dir="build" />
			<fileset dir="resources-jsyntaxpane" />
			<fileset dir="src">
				<include name="**/*.xml" />
				<include name="**/*.properties" />
			</fileset>
		</jar>
		<delete dir="${dist.osgi.dir}" quiet="true" />
		<mkdir dir="${dist.osgi.dir}" />
		<copy todir="${dist.osgi.dir}">
			<fileset dir="${root}">
				<include name="lib/**" />
			</fileset>
		</copy>
		<copy todir="dist/scripts">
			<fileset dir="${root}/scripts">
				<include name="**/*" />
			</fileset>
		</copy>
		<mkdir dir="${dist.osgi.dir}/META-INF" />
		<copy tofile="${dist.osgi.dir}/META-INF/MANIFEST.MF" file="${osgimanifest}" />
		<delete file="lib/plugin.jar" quiet="true" />
	</target>

	<target name="api">
		<mkdir dir="${apidocdir}" />
		<javadoc destdir="${apidocdir}" overview="src/overview.html" access="public" classpath="${classpath}:build">
			<sourcefiles>
				<fileset dir="${root}">
					<include name="**/Proxy.java" />
					<include name="**/Convertible.java" />
					<include name="**/FreeplaneScriptBaseClass.java" />
					<include name="**/ScriptUtils.java" />
				</fileset>
				<fileset dir="${workspace}/freeplane">
					<include name="**/UITools.java" />
					<include name="**/TextUtils.java" />
					<include name="**/FreeplaneVersion.java" />
					<include name="**/HtmlUtils.java" />
					<include name="**/LogUtils.java" />
					<include name="**/MenuUtils.java" />
				</fileset>
			</sourcefiles>
		</javadoc>
		<zip destfile="dist/script-api.zip" basedir="dist/doc/api" />
	</target>

	<target name="osgi_dist_as_jar" depends="dist">
		<jar jarfile="${freeplaneplugin.jar}">
			<fileset dir="${dist.osgi.dir}">
				<include name="**" />
			</fileset>
		</jar>
	</target>

	<target name="test">
		<junit>
			<classpath path="${classpath}:${workspace}/freeplane_ant/lib/junit.jar:${workspace}/freeplane_uitest/bin" />
			<formatter type="brief" usefile="false" />
			<batchtest>
				<fileset dir="${workspace}/freeplane_uitest/bin" includes="**/*Test.class" excludes="**/FreeplaneFirstTest.class" />
			</batchtest>
		</junit>
		<fail message="test failed" if="test.failure" />
	</target>

	<target name="clean">
		<delete dir="build" quiet="true" />
		<delete dir="build-nodehighlighter" quiet="true" />
		<delete dir="dist" quiet="true" />
		<delete>
			<fileset defaultexcludes="no" dir="src" includes="**/*~" />
		</delete>
		<delete file="lib/jsyntaxpane/nodehighlighter.jar" quiet="true"/>
	</target>

</project>

<project name="freeplane_plugin_script_test" default="test" basedir="..">
	<property name="workspace" location=".." />
	<property file="${workspace}/freeplane_framework/ant/ant.properties" />
	<property file="${workspace}/freeplane/ant/ant.properties" />
	<property file="ant/ant.properties" />
	<target name="test">
		<junit>
			<classpath path="${classpath}:${workspace}/freeplane_ant/lib/junit.jar:${workspace}/freeplane_uitest/bin" />
			<formatter type="brief" usefile="false" />
			<batchtest>
				<fileset dir="bin" includes="**/*Test.class" />
			</batchtest>
		</junit>
		<fail message="test failed" if="test.failure" />
	</target>
</project>
<project name="freeplane_svg" default="dist" basedir="..">
	<property name="workspace" location=".." />
	<property name="src" value="src" />
	<property name = "root" value = "."/>
	<property name="osgimanifest" value="${root}/META-INF/MANIFEST.MF" />	
	<property file="${workspace}/freeplane_framework/ant/ant.properties" />
	<property file="${workspace}/freeplane/ant/ant.properties" />
	<property file="ant/ant.properties" />
	<property name="external.jars" value="${commons-lang.jar}:${forms.jar}:${SimplyHTML.jar}:${batik.jars}:${js.jar}:${pdf.jars}:${xml.jars}" />
	<property name="build" value="${root}/build" />
	<property name="dist" value="${root}/dist" />
	<property name="dist.osgi.dir" value="${dist}/org.freeplane.plugin.svg" />
	<property name="freeplaneplugin.jar" value="${dist}/org.freeplane.plugin.svg.jar"/>
	<property name="debug" value="on" />
	<property name="java_source_version" value="1.5" />
	<property name="java_target_version" value="1.5" />
	<property name="build.compiler" value="modern" />
	<property name="classpath" value="${framework.jar}:${freeplane.jars}:${external.jars}"/>

	<target name="build">
		<mkdir dir="${build}" />
		<javac srcdir="${src}" destdir="${build}" classpath="${classpath}" debug="${debug}" 
			source="${java_source_version}" target="${java_target_version}" encoding="utf8">
		</javac>
	</target>


	<target name="dist" depends="build">
		<jar jarfile="lib/plugin.jar">
			<fileset dir="${build}"/>
		</jar>
		<delete dir="${dist.osgi.dir}" quiet="true"/>
		<mkdir dir="${dist.osgi.dir}" />
		<copy todir="${dist.osgi.dir}">
			<fileset dir="${root}">
				<include name="lib/**"/>
			</fileset>
		</copy>
		<mkdir dir="${dist.osgi.dir}/META-INF" />
		<copy tofile="${dist.osgi.dir}/META-INF/MANIFEST.MF" file="${osgimanifest}"/>
		<delete file="lib/plugin.jar" quiet="true"/>
	</target>

	<target name="osgi_dist_as_jar" depends="dist">
		<jar jarfile="${freeplaneplugin.jar}">
			<fileset dir="${dist.osgi.dir}">
				<include name="**" />
			</fileset>
		</jar>
	</target>
	
	<target name="clean">
		<delete dir="${build}"  quiet="true"/>
		<delete dir="${dist}"  quiet="true"/>
		<delete>
			<fileset defaultexcludes="no" dir="${src}" includes="**/*~"/>
		</delete>
	</target>
	
</project>

<project name="freeplane_uitest" default="buildext" basedir="..">
	<target name="buildext" >
		<java fork="yes" dir="lib"
			classname="org.uispec4j.extension.ExtensionGenerator"
			classpath="ant/asm-3.1.jar:ant/asm-util-3.1.jar:lib/uispec4j-2.4-jdk16.jar"
		>
			<arg value="uispecjext.jar"/>
			<arg value="Node:org.freeplane.uispec4j.framework.Node"/>
		</java>
	</target>
</project>
<project name="freeplane_workspace" default="dist" basedir="..">
	<property name="workspace" location=".." />
	<property name="src" value="src" />
	<property name="resources" value="resources" />	
	<property name="root" value="."/>
	<property name="osgimanifest" value="${root}/META-INF/MANIFEST.MF" />	
	<property file="${workspace}/freeplane_framework/ant/ant.properties" />
	<property file="${workspace}/freeplane/ant/ant.properties" />
	<property file="ant/ant.properties" />
    <property name="external.jars" value="${commons_io.jar}:${insubstantial.jars}" />
	<property name="build" value="${root}/build" />
	<property name="build" value="${root}/build" />
	<property name="dist" value="${root}/dist" />
	<property name="dist.osgi.dir" value="${dist}/org.freeplane.plugin.workspace" />
	<property name="freeplaneplugin.jar" value="${dist}/org.freeplane.plugin.workspace.jar"/>
	<property name="debug" value="on" />
	<property name="java_source_version" value="1.5" />
	<property name="java_target_version" value="1.5" />
	<property name="build.compiler" value="modern" />
	<property name="classpath" value="${framework.jar}:${freeplane.jars}:${external.jars}:${jhall.jar}:${plugin.jar}:${jgoodies.jar}"/>

	<target name="build">
		<mkdir dir="${build}" />
		<javac srcdir="${src}" destdir="${build}" classpath="${classpath}" debug="${debug}" 
			source="${java_source_version}" target="${java_target_version}" encoding="utf8">
		</javac>
	</target>


	<target name="dist" depends="build">
		<jar jarfile="lib/plugin.jar">
			<fileset dir="${build}"/>
			<fileset dir="${resources}"/>
			<fileset dir="${src}">
                <include name="**/*.xml"/>
                <include name="**/*.properties"/>
            </fileset>
		</jar>
		<delete dir="${dist.osgi.dir}" quiet="true"/>
		<mkdir dir="${dist.osgi.dir}" />
		<copy todir="${dist.osgi.dir}">
			<fileset dir="${root}">
				<include name="lib/**"/>
			</fileset>
		</copy>
		<mkdir dir="${dist.osgi.dir}/META-INF" />
		<copy tofile="${dist.osgi.dir}/META-INF/MANIFEST.MF" file="${osgimanifest}"/>
		<delete file="lib/plugin.jar" quiet="true"/>
	</target>

	<target name="osgi_dist_as_jar" depends="dist">
		<jar jarfile="${freeplaneplugin.jar}">
			<fileset dir="${dist.osgi.dir}">
				<include name="**" />
			</fileset>
		</jar>
	</target>
	
	<target name="clean">
		<delete dir="${build}"  quiet="true"/>
		<delete dir="${dist}"  quiet="true"/>
		<delete>
			<fileset defaultexcludes="no" dir="${src}" includes="**/*~"/>
		</delete>
	</target>
	
</project>

<project name="freeplane_uitest" default="test" basedir="..">
	<property name="workspace" location=".." />
	<property file="${workspace}/freeplane_framework/ant/ant.properties" />
	<property file="${workspace}/freeplane/ant/ant.properties" />
	<property file="ant/ant.properties" />
	<property name="classpath" value="${framework.jar}:${freeplane.jars}:${external.jars}:${jsyntaxpane.jar}"/>
	<target name="test">
		<junit>
			<classpath path="${classpath}:${workspace}/freeplane_ant/lib/junit.jar:${workspace}/freeplane_uitest/bin" />
			<formatter type="brief" usefile="false" />
			<batchtest>
				<fileset dir="bin"
					includes="**/*Test.class"
					excludes="**/FreeplaneFirstTest.class" />
			</batchtest>
		</junit>
		<fail message="test failed" if="test.failure" />
	</target>
</project>
