dependencies {
    compile project(':annotations-runtime')
    compile "org.osgi:org.osgi.core:${project.ext.osgiVersion}"
    compile "javax.servlet:servlet-api:${project.ext.servletVersion}"
    compile "org.springframework.extensions.surf:spring-webscripts:${project.ext.springSurfVersion}"
    compile "org.jibx:jibx-run:${project.ext.jibxVersion}"
    compile "org.apache.felix:org.apache.felix.framework:${project.ext.felixVersion}"
    compile "com.springsource.util:com.springsource.util.osgi:${project.ext.springOsgiUtilVersion}"

    testCompile "junit:junit:${project.ext.junitVersion}"
    testCompile "org.mockito:mockito-core:${project.ext.mockitoVersion}"
    testCompile "org.springframework:spring-test:${project.ext.springVersion}"
}
configurations {
    blueprint
    bundles
    bundlesScala
}

dependencies {
    amp(project(":alfresco-integration")) {transitive = false}
    amp(project(":annotations")) {transitive = false}
    amp(project(":annotations-runtime")) {transitive = false}
    amp(project(":webscripts")) {transitive = false}

    amp("org.apache.felix:org.apache.felix.framework:${project.ext.felixVersion}") {transitive = false}
    amp "com.springsource.util:com.springsource.util.osgi:${project.ext.springOsgiUtilVersion}"
    // The core asm library is already included in Alfresco distributions, so we just add asm-commons.
    amp("asm:asm-commons:3.1") {transitive = false}

    blueprint("org.eclipse.gemini:org.eclipse.gemini.blueprint.core:${project.ext.geminiVersion}") {transitive = false}
    blueprint("org.eclipse.gemini:org.eclipse.gemini.blueprint.io:${project.ext.geminiVersion}") {transitive = false}
    blueprint("org.eclipse.gemini:org.eclipse.gemini.blueprint.extender:${project.ext.geminiVersion}") {transitive = false}
    blueprint(project(":blueprint-integration")) {transitive = false}

    bundles "org.slf4j:slf4j-api:${project.slf4jVersion}"
    bundles "org.slf4j:slf4j-log4j12:${project.slf4jVersion}"
    bundlesScala "org.scala-lang:scala-library:2.10.3"
    bundles(project(":control-panel")) {transitive = false}
    bundles fileTree(dir: '../lib', include: '*.jar')

    testCompile "junit:junit:${project.ext.junitVersion}"
    testCompile "org.mockito:mockito-core:${project.ext.mockitoVersion}"
    testCompile "org.springframework:spring-test:${project.ext.springVersion}"
    testCompile "org.springframework:spring-web:${project.ext.springVersion}"
    testCompile "org.springframework.extensions.surf:spring-webscripts:${project.ext.springSurfVersion}"
    testCompile("org.alfresco:alfresco-repository:${project.ext.alfrescoVersion}") { transitive = false }
    testCompile("org.alfresco:alfresco-data-model:${project.ext.alfrescoVersion}") { transitive = false }

    testRuntime "org.springframework:spring-beans:${project.ext.springVersion}"
}

def ampConfig = {
    from(configurations.blueprint) {
        into("config/alfresco/module/$project.group/blueprint-bundles/")
    }

    from(configurations.bundles) {
        into("config/alfresco/module/$project.group/standard-bundles")
    }

    from(configurations.amp) {
        into("lib")
    }

    from("module.properties") {
        expand(project.properties)
    }

    from("src/main/resources") {
        into("config")
    }

    from("src/main/config") {
        into("config/alfresco/module/$project.group")
    }

    extension "amp"
    destinationDir = file("$buildDir/amps")
}

task amp(type: Zip, dependsOn: jar) {
    configure ampConfig
    baseName = project.group
}

task scalaAmp(type: Zip, dependsOn: jar) {
    configure ampConfig

    from(configurations.bundlesScala) {
        into("config/alfresco/module/$project.group/standard-bundles")
    }

    baseName = project.group + '-scala'
}

build.dependsOn("amp")
build.dependsOn("scalaAmp")
dependencies {
    compile project(':annotations')
    compile project(':webscripts')
    compile "org.apache.felix:org.apache.felix.framework:${project.ext.felixVersion}"
    compile "org.slf4j:slf4j-api:${project.ext.slf4jVersion}"
    compile "org.springframework.extensions.surf:spring-webscripts:${project.ext.springSurfVersion}"
    compile "org.freemarker:freemarker:2.3.16"
    compile "javax.servlet:servlet-api:${project.ext.servletVersion}"
    compile "org.springframework:org.springframework.aop:${project.ext.springVersion}"
    compile "org.springframework:org.springframework.transaction:${project.ext.springVersion}"
    compile "org.springframework:org.springframework.jdbc:${project.ext.springVersion}"
    compile "javax.transaction:transaction-api:${project.ext.transactionApiVersion}"
    compile("org.activiti:activiti-engine:5.7") {transitive = false}
    compile("org.activiti:activiti-spring:5.7") {transitive = false}
    compile 'com.google.code.findbugs:jsr305:2.0.1'
    compile 'com.google.collections:google-collections:1.0'

    testCompile "junit:junit:${project.ext.junitVersion}"
    testCompile "org.mockito:mockito-core:${project.ext.mockitoVersion}"
    testCompile "org.springframework:spring-test:${project.ext.springVersion}"

    testRuntime "org.mybatis:mybatis:3.0.4"
    testRuntime("org.hibernate:hibernate:${project.ext.hibernateVersion}") {
        exclude group: "javax.transaction"
    }
    testRuntime 'cglib:cglib-nodep:2.2'
    testRuntime 'xerces:xercesImpl:2.8.0'
}
dependencies {
    compile("org.alfresco:alfresco-repository:${project.ext.alfrescoVersion}") { transitive = false }
    compile("org.alfresco:alfresco-data-model:${project.ext.alfrescoVersion}") { transitive = false }
    compile("org.alfresco:alfresco-core:${project.ext.alfrescoVersion}") { transitive = false }
}apply plugin: "osgi"

dependencies {
    compile project(":annotations-runtime")
    compile project(":alfresco-integration")
    compile "org.osgi:org.osgi.core:${project.ext.osgiVersion}"
    compile("org.eclipse.gemini:org.eclipse.gemini.blueprint.extender:${project.ext.geminiVersion}") {
        exclude group: "org.springframework"
    }
    compile "org.springframework.extensions.surf:spring-webscripts:${project.ext.springSurfVersion}"
    compile "javax.servlet:servlet-api:${project.ext.servletVersion}"
    compile "com.springsource.util:com.springsource.util.osgi:${project.ext.springOsgiUtilVersion}"
}

jar {
    manifest {
        instruction 'Fragment-Host', 'org.eclipse.gemini.blueprint.extender'
        instruction 'Import-Package', 'com.github.dynamicextensionsalfresco.osgi.webscripts,com.github.dynamicextensionsalfresco.annotations,*'
        instruction 'Bundle-DocURL', 'https://github.com/laurentvdl/dynamic-extensions-for-alfresco'
    }
}allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'maven'

    task sourceJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourceJar
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: 'file://' + (project.hasProperty('uploadPath') ? uploadPath : System.properties['java.io.tmpdir']))
            }
        }
    }

    [compileJava, compileTestJava,javadoc]*.options*.encoding = 'UTF-8'

    compileJava {
        sourceCompatibility = 1.6
        targetCompatibility = 1.6
        options.compilerArgs << '-Xlint:unchecked'
    }

    ext {
        alfrescoVersion = '4.0.e'
        springVersion = '3.0.5.RELEASE'
        geminiVersion = '1.0.2.RELEASE'
        slf4jVersion = '1.7.5'
        osgiVersion = '4.3.1'
        springSurfVersion = '1.2.0-M4'
        junitVersion = '4.8.2'
        transactionApiVersion = '1.1'
        felixVersion = '4.2.1'
        springOsgiUtilVersion = '2.0.5.RELEASE'
        mockitoVersion = '1.9.5'
        jibxVersion = '1.2.3'
        hibernateVersion = '3.2.6.ga'
        servletVersion = '2.5'
    }

    repositories {
        mavenCentral()
        maven {
            url "https://artifacts.alfresco.com/nexus/content/groups/public/"
        }
    }

    group = 'com.github.dynamicextensionsalfresco'
    version = '1.0.1'

    configurations.all {
        exclude group: 'jaxen'
        resolutionStrategy {
            eachDependency { details ->
                if (details.requested.group == 'org.springframework') {
                    details.useVersion project.ext.springVersion
                }
            }
        }
    }

    configurations {
        amp
        compile.extendsFrom(amp)
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}

defaultTasks 'build'
apply plugin: 'osgi'

dependencies {
    compile project(":alfresco-integration")
    compile project(":annotations")
    compile project(":webscripts")
    compile "org.osgi:org.osgi.core:${project.ext.osgiVersion}"
    compile "org.springframework.extensions.surf:spring-webscripts:${project.ext.springSurfVersion}"
    compile "com.springsource.util:com.springsource.util.osgi:${project.ext.springOsgiUtilVersion}"
    compile fileTree(dir: '../lib', include: '*.jar')
}

jar {
    manifest {
        instruction 'Alfresco-Dynamic-Extension', 'true'
        instruction 'Bundle-Description', 'Control Panel'
        instruction 'Alfresco-Spring-Configuration', 'com.github.dynamicextensionsalfresco.controlpanel'
        instruction 'Spring-Context', ';publish-context:=false'
        instruction 'Import-Package', """*,
							net.sf.cglib.core,
							net.sf.cglib.proxy,
							net.sf.cglib.reflect,
							org.aopalliance.aop,
							org.aopalliance.intercept,
							org.springframework.aop,
							org.springframework.aop.framework"""
    }
}

defaultTasks 'jar'
apply plugin: 'groovy'

dependencies {
    compile gradleApi()
    compile localGroovy()
}

defaultTasks 'build'
dependencies {
    compile "org.springframework.extensions.surf:spring-webscripts:${project.ext.springSurfVersion}"
    compile "org.osgi:org.osgi.core:${project.ext.osgiVersion}"
}