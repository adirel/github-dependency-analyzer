<?xml version="1.0" encoding="UTF-8"?>
<project name="MXAonFire" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property file="local.properties" />

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through an env var"
            unless="sdk.dir"
    />

    <!--
        Import per project custom build rules if present at the root of the project.
        This is the place to put custom intermediary targets such as:
            -pre-build
            -pre-compile
            -post-compile (This is typically used for code obfuscation.
                           Compiled code location: ${out.classes.absolute.dir}
                           If this is not done in place, override ${out.dex.input.absolute.dir})
            -post-package
            -post-build
            -pre-clean
    -->
    <import file="custom_rules.xml" optional="true" />

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->
    <import file="${sdk.dir}/tools/ant/build.xml" />

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="Magnetizer" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property file="local.properties" />

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through an env var"
            unless="sdk.dir"
    />

    <!--
        Import per project custom build rules if present at the root of the project.
        This is the place to put custom intermediary targets such as:
            -pre-build
            -pre-compile
            -post-compile (This is typically used for code obfuscation.
                           Compiled code location: ${out.classes.absolute.dir}
                           If this is not done in place, override ${out.dex.input.absolute.dir})
            -post-package
            -post-build
            -pre-clean
    -->
    <import file="custom_rules.xml" optional="true" />

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->
    <import file="${sdk.dir}/tools/ant/build.xml" />

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="MXA" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property file="local.properties" />

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through an env var"
            unless="sdk.dir"
    />

    <!--
        Import per project custom build rules if present at the root of the project.
        This is the place to put custom intermediary targets such as:
            -pre-build
            -pre-compile
            -post-compile (This is typically used for code obfuscation.
                           Compiled code location: ${out.classes.absolute.dir}
                           If this is not done in place, override ${out.dex.input.absolute.dir})
            -post-package
            -post-build
            -pre-clean
    -->
    <import file="custom_rules.xml" optional="true" />

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->
    <import file="${sdk.dir}/tools/ant/build.xml" />

</project>
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. --><project basedir="." default="build" name="MXJ">
    <property environment="env"/>
    <property name="ChargingStationUI.location" value="../../mobsda/ChargingStationUI"/>
    <property name="GWTEmulationServer.location" value="../../Emulation/GWTEmulationServer"/>
    <property name="MobilisServer_ConsoleClient.location" value="../MobilisServer_ConsoleClient"/>
    <property name="OemWS.location" value="../../mobsda/OemWS"/>
    <property name="PALatencyMeasurer.location" value="../../mobsda/PALatencyMeasurer"/>
    <property name="TestNodeModule.location" value="../../Emulation/TestNodeModule"/>
    <property name="MobilisXMPP.location" value="../MobilisXMPP"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.7"/>
    <property name="source" value="1.7"/>
    <path id="EAR Libraries.libraryclasspath"/>
    <path id="MobilisXMPP.classpath">
        <pathelement location="${MobilisXMPP.location}/bin"/>
        <path refid="EAR Libraries.libraryclasspath"/>
        <pathelement location="${MobilisXMPP.location}/libs/smack-3.2.2-ijaeckel-jar-with-dependencies.jar"/>
        <pathelement location="${MobilisXMPP.location}/libs/smack-bosh-3.2.2-ijaeckel-jar-with-dependencies.jar"/>
        <pathelement location="${MobilisXMPP.location}/libs/smackx-3.2.2-ijaeckel-jar-with-dependencies.jar"/>
        <pathelement location="${MobilisXMPP.location}/libs/smackx-debug-3.2.2-ijaeckel-jar-with-dependencies.jar"/>
        <pathelement location="${MobilisXMPP.location}/libs/smackx-jingle-3.2.2-ijaeckel-jar-with-dependencies.jar"/>
    </path>
    <path id="MXJ.classpath">
        <pathelement location="bin"/>
        <path refid="MobilisXMPP.classpath"/>
        <path refid="EAR Libraries.libraryclasspath"/>
    </path>
    <target name="init">
        <mkdir dir="bin"/>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="src">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>
    <target name="clean">
        <delete dir="bin"/>
    </target>
    <target depends="clean" name="cleanall">
        <ant antfile="build.xml" dir="${MobilisXMPP.location}" inheritAll="false" target="clean"/>
    </target>
    <target depends="build-subprojects,build-project" name="build"/>
    <target name="build-subprojects">
        <ant antfile="build.xml" dir="${MobilisXMPP.location}" inheritAll="false" target="build-project"/>
    </target>
    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" includeantruntime="false" source="${source}" target="${target}">
            <src path="src"/>
            <classpath refid="MXJ.classpath"/>
        </javac>
    </target>
    <target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects">
        <ant antfile="build.xml" dir="${ChargingStationUI.location}" inheritAll="false" target="clean"/>
        <ant antfile="build.xml" dir="${ChargingStationUI.location}" inheritAll="false" target="build"/>
        <ant antfile="build.xml" dir="${GWTEmulationServer.location}" inheritAll="false" target="clean"/>
        <ant antfile="build.xml" dir="${GWTEmulationServer.location}" inheritAll="false" target="build"/>
        <ant antfile="build.xml" dir="${MobilisServer_ConsoleClient.location}" inheritAll="false" target="clean"/>
        <ant antfile="build.xml" dir="${MobilisServer_ConsoleClient.location}" inheritAll="false" target="build"/>
        <ant antfile="build.xml" dir="${OemWS.location}" inheritAll="false" target="clean"/>
        <ant antfile="build.xml" dir="${OemWS.location}" inheritAll="false" target="build"/>
        <ant antfile="build.xml" dir="${PALatencyMeasurer.location}" inheritAll="false" target="clean"/>
        <ant antfile="build.xml" dir="${PALatencyMeasurer.location}" inheritAll="false" target="build"/>
        <ant antfile="build.xml" dir="${TestNodeModule.location}" inheritAll="false" target="clean"/>
        <ant antfile="build.xml" dir="${TestNodeModule.location}" inheritAll="false" target="build"/>
    </target>
</project>
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." default="build" name="MobilisServer">
    <property environment="env"/>
    <property name="MobilisXMPP.location" value="../MobilisXMPP"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.7"/>
    <property name="source" value="1.7"/>
    <path id="EAR Libraries.libraryclasspath"/>
    <path id="MobilisXMPP.classpath">
        <pathelement location="${MobilisXMPP.location}/bin"/>
        <path refid="EAR Libraries.libraryclasspath"/>
        <pathelement location="${MobilisXMPP.location}/libs/smack-3.2.2-ijaeckel-jar-with-dependencies.jar"/>
        <pathelement location="${MobilisXMPP.location}/libs/smack-bosh-3.2.2-ijaeckel-jar-with-dependencies.jar"/>
        <pathelement location="${MobilisXMPP.location}/libs/smackx-3.2.2-ijaeckel-jar-with-dependencies.jar"/>
        <pathelement location="${MobilisXMPP.location}/libs/smackx-debug-3.2.2-ijaeckel-jar-with-dependencies.jar"/>
        <pathelement location="${MobilisXMPP.location}/libs/smackx-jingle-3.2.2-ijaeckel-jar-with-dependencies.jar"/>
    </path>
    <path id="MobilisServer.classpath">
        <pathelement location="bin"/>
        <pathelement location="libs/swing-worker-1.1.jar"/>
        <pathelement location="libs/appframework-1.0.3.jar"/>
        <pathelement location="libs/commons-beanutils.jar"/>
        <pathelement location="libs/commons-collections-3.2.1.jar"/>
        <pathelement location="libs/commons-lang-2.4.jar"/>
        <pathelement location="libs/commons-logging-1.1.1.jar"/>
        <pathelement location="libs/jdom.jar"/>
        <pathelement location="libs/mysql-connector-java-5.1.10-bin.jar"/>
        <pathelement location="libs/hibernate-annotations.jar"/>
        <pathelement location="libs/hibernate-entitymanager.jar"/>
        <pathelement location="libs/hibernate3.jar"/>
        <pathelement location="libs/hibernate-commons-annotations.jar"/>
        <pathelement location="libs/hibernate-core.jar"/>
        <path refid="MobilisXMPP.classpath"/>
    </path>
    <target name="init">
        <mkdir dir="bin"/>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="src">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>
    <target name="clean">
        <delete dir="bin"/>
    </target>
    <target depends="clean" name="cleanall">
        <ant antfile="build.xml" dir="${MobilisXMPP.location}" inheritAll="false" target="clean"/>
    </target>
    <target depends="build-subprojects,build-project,create_run_jar" name="build"/>
    <target name="build-subprojects">
        <ant antfile="build.xml" dir="${MobilisXMPP.location}" inheritAll="false" target="build-project">
            <propertyset>
                <propertyref name="build.compiler"/>
            </propertyset>
        </ant>
    </target>
    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" includeantruntime="false" source="${source}" target="${target}" encoding="ISO-8859-1">
            <src path="src"/>
            <classpath refid="MobilisServer.classpath"/>
        </javac>
    </target>
    <target name="MobilisServer">
        <java classname="de.tudresden.inf.rn.mobilis.server.MobilisServer" failonerror="true" fork="yes">
            <classpath refid="MobilisServer.classpath"/>
        </java>
    </target>
              	
  	<target name="create_run_jar">
  	        <jar destfile="build/mobilisserver.jar" filesetmanifest="mergewithoutmain">
  	            <manifest>
  	                <attribute name="Main-Class" value="de.tudresden.inf.rn.mobilis.server.MobilisServer"/>
  	                <attribute name="Class-Path" value="."/>
  	            </manifest>
  	            <fileset dir="bin"/>
  	            <zipfileset excludes="META-INF/*.SF" src="libs/swing-worker-1.1.jar"/>
  	            <zipfileset excludes="META-INF/*.SF" src="libs/appframework-1.0.3.jar"/>
  	            <zipfileset excludes="META-INF/*.SF" src="libs/commons-beanutils.jar"/>
  	            <zipfileset excludes="META-INF/*.SF" src="libs/commons-collections-3.2.1.jar"/>
  	            <zipfileset excludes="META-INF/*.SF" src="libs/commons-lang-2.4.jar"/>
  	            <zipfileset excludes="META-INF/*.SF" src="libs/commons-logging-1.1.1.jar"/>
  	            <zipfileset excludes="META-INF/*.SF" src="libs/jdom.jar"/>
  	            <zipfileset excludes="META-INF/*.SF" src="libs/mysql-connector-java-5.1.10-bin.jar"/>
  	            <zipfileset excludes="META-INF/*.SF" src="libs/hibernate-annotations.jar"/>
  	            <zipfileset excludes="META-INF/*.SF" src="libs/hibernate-entitymanager.jar"/>
  	            <zipfileset excludes="META-INF/*.SF" src="libs/hibernate3.jar"/>
  	            <zipfileset excludes="META-INF/*.SF" src="libs/hibernate-commons-annotations.jar"/>
  	            <zipfileset excludes="META-INF/*.SF" src="libs/hibernate-core.jar"/>
  	            <fileset dir="${MobilisXMPP.location}/bin"/>
  	            <zipfileset excludes="META-INF/*.SF" src="${MobilisXMPP.location}/libs/smack-3.2.2-ijaeckel-jar-with-dependencies.jar"/>
  	            <zipfileset excludes="META-INF/*.SF" src="${MobilisXMPP.location}/libs/smack-bosh-3.2.2-ijaeckel-jar-with-dependencies.jar"/>
  	            <zipfileset excludes="META-INF/*.SF" src="${MobilisXMPP.location}/libs/smackx-3.2.2-ijaeckel-jar-with-dependencies.jar"/>
  	            <zipfileset excludes="META-INF/*.SF" src="${MobilisXMPP.location}/libs/smackx-debug-3.2.2-ijaeckel-jar-with-dependencies.jar"/>
  	            <zipfileset excludes="META-INF/*.SF" src="${MobilisXMPP.location}/libs/smackx-jingle-3.2.2-ijaeckel-jar-with-dependencies.jar"/>
  	        </jar>
  	    </target>          	
</project>
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." default="build" name="MobilisServer_ConsoleClient">
    <property environment="env"/>
    <property name="MobilisXMPP.location" value="../MobilisXMPP"/>
    <property name="MXJ.location" value="../MXJ"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.7"/>
    <property name="source" value="1.7"/>
    <path id="EAR Libraries.libraryclasspath"/>
    <path id="MobilisXMPP.classpath">
        <pathelement location="${MobilisXMPP.location}/bin"/>
        <path refid="EAR Libraries.libraryclasspath"/>
        <pathelement location="${MobilisXMPP.location}/libs/smack-3.2.2-ijaeckel-jar-with-dependencies.jar"/>
        <pathelement location="${MobilisXMPP.location}/libs/smack-bosh-3.2.2-ijaeckel-jar-with-dependencies.jar"/>
        <pathelement location="${MobilisXMPP.location}/libs/smackx-3.2.2-ijaeckel-jar-with-dependencies.jar"/>
        <pathelement location="${MobilisXMPP.location}/libs/smackx-debug-3.2.2-ijaeckel-jar-with-dependencies.jar"/>
        <pathelement location="${MobilisXMPP.location}/libs/smackx-jingle-3.2.2-ijaeckel-jar-with-dependencies.jar"/>
    </path>
    <path id="MXJ.classpath">
        <pathelement location="${MXJ.location}/bin"/>
        <path refid="MobilisXMPP.classpath"/>
        <path refid="EAR Libraries.libraryclasspath"/>
    </path>
    <path id="MobilisServer_ConsoleClient.classpath">
        <pathelement location="bin"/>
        <path refid="MXJ.classpath"/>
        <path refid="MobilisXMPP.classpath"/>
    </path>
    <target name="init">
        <mkdir dir="bin"/>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="src">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>
    <target name="clean">
        <delete dir="bin"/>
    </target>
    <target depends="clean" name="cleanall">
        <ant antfile="build.xml" dir="${MobilisXMPP.location}" inheritAll="false" target="clean"/>
        <ant antfile="build.xml" dir="${MXJ.location}" inheritAll="false" target="clean"/>
    </target>
    <target depends="build-subprojects,build-project" name="build"/>
    <target name="build-subprojects">
        <ant antfile="build.xml" dir="${MobilisXMPP.location}" inheritAll="false" target="build-project"/>
        <ant antfile="build.xml" dir="${MXJ.location}" inheritAll="false" target="build-project"/>
    </target>
    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" includeantruntime="false" source="${source}" target="${target}">
            <src path="src"/>
            <classpath refid="MobilisServer_ConsoleClient.classpath"/>
        </javac>
    </target>
    <target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects"/>
    <target name="XMPPConsoleClient">
        <java classname="de.tudresden.inf.rn.mobilis.consoleclient.XMPPConsoleClient" failonerror="true" fork="yes">
            <classpath refid="MobilisServer_ConsoleClient.classpath"/>
        </java>
    </target>
    <target depends="clean,build" name="create_run_jar">
        <jar destfile="dest/ConsoleClient.jar" filesetmanifest="mergewithoutmain">
            <manifest>
                <attribute name="Main-Class" value="de.tudresden.inf.rn.mobilis.consoleclient.XMPPConsoleClient"/>
                <attribute name="Class-Path" value="."/>
            </manifest>
            <fileset dir="bin"/>
            <fileset dir="${MXJ.location}/bin"/>
            <fileset dir="${MobilisXMPP.location}/bin"/>
            <zipfileset excludes="META-INF/*.SF" src="${MobilisXMPP.location}/libs/smack-3.2.2-ijaeckel-jar-with-dependencies.jar"/>
            <zipfileset excludes="META-INF/*.SF" src="${MobilisXMPP.location}/libs/smack-bosh-3.2.2-ijaeckel-jar-with-dependencies.jar"/>
            <zipfileset excludes="META-INF/*.SF" src="${MobilisXMPP.location}/libs/smackx-3.2.2-ijaeckel-jar-with-dependencies.jar"/>
            <zipfileset excludes="META-INF/*.SF" src="${MobilisXMPP.location}/libs/smackx-debug-3.2.2-ijaeckel-jar-with-dependencies.jar"/>
            <zipfileset excludes="META-INF/*.SF" src="${MobilisXMPP.location}/libs/smackx-jingle-3.2.2-ijaeckel-jar-with-dependencies.jar"/>
        </jar>
    </target>
</project>
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. --><project basedir="." default="build" name="MobilisXMPP">
    <property environment="env"/>
    <property name="GeoTwitterService.location" value="../../geotwitter/GeoTwitterService"/>
    <property name="MXJ.location" value="../MXJ"/>
    <property name="MobilisServer.location" value="../MobilisServer"/>
    <property name="MobilisServer_ConsoleClient.location" value="../MobilisServer_ConsoleClient"/>
    <property name="PowerAssistantServiceBeans.location" value="../../mobsda/PowerAssistantServiceBeans"/>
    <property name="PowerAssistantServiceClientBeans.location" value="../../mobsda/PowerAssistantServiceClientBeans"/>
    <property name="TreasureHunt.location" value="../DemoServices/TreasureHunt"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.7"/>
    <property name="source" value="1.7"/>
    <path id="EAR Libraries.libraryclasspath"/>
    <path id="MobilisXMPP.classpath">
        <pathelement location="bin"/>
        <path refid="EAR Libraries.libraryclasspath"/>
        <pathelement location="libs/smack-3.2.2-ijaeckel-jar-with-dependencies.jar"/>
        <pathelement location="libs/smack-bosh-3.2.2-ijaeckel-jar-with-dependencies.jar"/>
        <pathelement location="libs/smackx-3.2.2-ijaeckel-jar-with-dependencies.jar"/>
        <pathelement location="libs/smackx-debug-3.2.2-ijaeckel-jar-with-dependencies.jar"/>
        <pathelement location="libs/smackx-jingle-3.2.2-ijaeckel-jar-with-dependencies.jar"/>
    </path>
    <target name="init">
        <mkdir dir="bin"/>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="src">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>
    <target name="clean">
        <delete dir="bin"/>
    </target>
    <target depends="clean" name="cleanall"/>
    <target depends="build-subprojects,build-project" name="build"/>
    <target name="build-subprojects"/>
    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" includeantruntime="false" source="${source}" target="${target}">
            <src path="src"/>
            <classpath refid="MobilisXMPP.classpath"/>
        </javac>
    </target>
    <target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects">
        <ant antfile="build.xml" dir="${GeoTwitterService.location}" inheritAll="false" target="clean"/>
        <ant antfile="build.xml" dir="${GeoTwitterService.location}" inheritAll="false" target="build"/>
        <ant antfile="build.xml" dir="${MXJ.location}" inheritAll="false" target="clean"/>
        <ant antfile="build.xml" dir="${MXJ.location}" inheritAll="false" target="build"/>
        <ant antfile="build.xml" dir="${MobilisServer.location}" inheritAll="false" target="clean"/>
        <ant antfile="build.xml" dir="${MobilisServer.location}" inheritAll="false" target="build"/>
        <ant antfile="build.xml" dir="${MobilisServer_ConsoleClient.location}" inheritAll="false" target="clean"/>
        <ant antfile="build.xml" dir="${MobilisServer_ConsoleClient.location}" inheritAll="false" target="build"/>
        <ant antfile="build.xml" dir="${PowerAssistantServiceBeans.location}" inheritAll="false" target="clean"/>
        <ant antfile="build.xml" dir="${PowerAssistantServiceBeans.location}" inheritAll="false" target="build"/>
        <ant antfile="build.xml" dir="${PowerAssistantServiceClientBeans.location}" inheritAll="false" target="clean"/>
        <ant antfile="build.xml" dir="${PowerAssistantServiceClientBeans.location}" inheritAll="false" target="build"/>
        <ant antfile="build.xml" dir="${TreasureHunt.location}" inheritAll="false" target="clean"/>
        <ant antfile="build.xml" dir="${TreasureHunt.location}" inheritAll="false" target="build"/>
    </target>
</project>
