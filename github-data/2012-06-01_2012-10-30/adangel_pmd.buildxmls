Not FoundNot FoundNot Found<project name="pmd-jbuilder" default="compile" basedir="../">

<property name="dir.lib" value="lib\"/>
<property name="dir.src" value="src\"/>
<property name="dir.build" value="build\"/>
<property name="version" value="1.0"/>
<property name="pmd.version" value="3.3"/>

<path id="dependencies.path">
    <pathelement location="${dir.build}"/>
    <fileset dir="${dir.lib}">
        <include name="*.jar"/>
    </fileset>
</path>

<target name="delete">
    <delete dir="${dir.build}"/>
    <delete file="${dir.lib}\PMDExtension.jar"/>
    <mkdir dir="${dir.build}"/>
</target>

<target name="compile" description="Compiles the code">
    <mkdir dir="${dir.build}"/>
    <javac  deprecation="false"
            debug="true"
            optimize="false"
            srcdir="${dir.src}"
            destdir="${dir.build}">
    <classpath>

    <path refid="dependencies.path"/>
    </classpath>
    </javac>
</target>

<target name="clean" depends="delete,compile" description="Does a complete recompile"/>

<target name="jar" depends="clean" description="Jars up the classes and rulesets">
    <jar
        jarfile="${dir.lib}\PMDExtension.jar"
        includes="net/sourceforge/pmd/bluej/*.class"
        basedir="${dir.build}">
        <manifest>
            <attribute name="Main-Class" value="net.sourceforge.pmd.bluej.PMDExtension"/>
            <attribute name="Class-Path" value="pmd/pmd-${pmd.version}.jar pmd/jaxen-1.1-beta-7.jar"/>
        </manifest>
    </jar>
</target>

<target name="mergejars" depends="jar" description="Creates one uber-jar for easier deployment">
    <unjar src="${dir.lib}/jaxen-1.1-beta-7.jar" dest="lib" overwrite="true"/>
    <unjar src="${dir.lib}/pmd-${pmd.version}.jar" dest="lib" overwrite="true"/>
    <unjar src="${dir.lib}/PMDExtension.jar" dest="lib" overwrite="true"/>
    <delete file="${dir.lib}\PMDExtension.jar"/>
    <jar
        jarfile="${dir.lib}\PMDExtension.jar"
        includes="net/**/*.*,org/**/*.*,META-INF/**/*.*,rulesets/**/*.*,"
        basedir="${dir.lib}">
        <manifest>
            <attribute name="Main-Class" value="net.sourceforge.pmd.bluej.PMDExtension"/>
        </manifest>
    </jar>
    <delete dir="${dir.lib}/net"/>
    <delete dir="${dir.lib}/rulesets"/>
    <delete dir="${dir.lib}/org"/>
    <delete dir="${dir.lib}/test"/>
    <delete dir="${dir.lib}/META-INF"/>
</target>

<target name="deploy" depends="mergejars" description="Deploys new jar file to my BlueJ install">
    <copy todir="/home/tom/pmd/ides/bluej/lib/extensions">
        <fileset dir="${dir.lib}">
            <include name="PMDExtension.jar"/>
        </fileset>
    </copy>
 </target>

<target name="deploysfserver" depends="mergejars" description="Deploys new jar file to my BlueJ install">
    <echo message="Uploading jar file to SourceForge"/>
    <exec executable="scp" os="Linux">
        <arg line=" /home/tom/pmd/pmd-bluej/lib/PMDExtension.jar tomcopeland@pmd.sf.net:/home/groups/p/pm/pmd/htdocs/"/>
    </exec>
    <echo message="Uploading extensions.xml to SourceForge"/>
    <exec executable="scp" os="Linux">
        <arg line=" /home/tom/pmd/pmd-bluej/bin/extensions.xml tomcopeland@pmd.sf.net:/home/groups/p/pm/pmd/htdocs/"/>
    </exec>
 </target>

</project>
<project name="pmd-dcpd" default="compile" basedir="../">

<property name="lib" value="lib\"/>
<property name="compiletimelibsdir" value="${lib}/compiletimeonly"/>
<property name="src" value="src\"/>
<property name="build" value="build\"/>
<property name="jar" value="dcpd.jar"/>
<property name="workerzipfile" value="worker.zip"/>
<property name="build.compiler" value="jikes"/>
<property name="httpserver" value="mordor"/>

<target name="delete">
    <delete dir="${build}"/>
    <delete file="${lib}\${jar}"/>
    <mkdir dir="${build}"/>
</target>

<target name="compile">
    <javac deprecation="true" debug="true" optimize="false" srcdir="${src}" destdir="${build}">
        <classpath>
            <pathelement location="${compiletimelibsdir}/jini-core.jar"/>
            <pathelement location="${compiletimelibsdir}/jini-ext.jar"/>
            <pathelement location="${lib}/pmd-1.0rc2.jar"/>
        </classpath>
    </javac>
    <copy file="${src}net/sourceforge/pmd/dcpd/dcpd.properties" todir="${build}net/sourceforge/pmd/dcpd"/>

</target>

<target name="rmic">
    <rmic base="${build}" debug="true" classname="net.sourceforge.pmd.dcpd.JobAddedListener" >
        <classpath>
            <pathelement location="${compiletimelibsdir}/jini-core.jar"/>
            <pathelement location="${compiletimelibsdir}/jini-ext.jar"/>
        </classpath>
    </rmic>
</target>

<target name="jar">
    <jar jarfile="${lib}/${jar}" basedir="${build}" excludes="test/**/*.class"/>
</target>

<target name="clean" depends="delete,compile,rmic"/>

<target name="copytoserver" depends="clean,jar">
    <exec executable="pscp.exe" os="Windows 2000">
        <arg line=" ${lib}\${jar} tom@${httpserver}:/home/tom/projects/jini/sdk/lib/"/>
    </exec>
</target>

<target name="buildworker" depends="clean,jar">
   <delete dir="${workerzipfile}"/>
   <mkdir dir="staging"/>
   <copy file="${lib}/dcpd.jar" toDir="staging"/>
   <copy file="${lib}/pmd-1.0rc2.jar" toDir="staging"/>
   <copy file="${lib}/runtimeonly/outrigger-dl.jar" toDir="staging"/>
   <copy file="${lib}/runtimeonly/reggie.jar" toDir="staging"/>
   <copy file="etc/policy.all" toDir="staging"/>
   <copy file="etc/linuxclient_go.sh" toDir="staging"/>
   <copy file="etc/client_go.bat" toDir="staging"/>
   <zip zipfile="${workerzipfile}" basedir="staging"/>
    <exec executable="pscp.exe" os="Windows 2000">
        <arg line=" ${workerzipfile} tom@${httpserver}:/home/tom/"/>
    </exec>
    <exec executable="pscp.exe" os="Windows 2000">
        <arg line=" ${workerzipfile} tom@shire:/home/tom/"/>
    </exec>
   <delete dir="staging"/>
</target>

</project>

<project name="pmd-gel" default="compile" basedir="../">

<property name="lib" value="lib\"/>
<property name="src" value="src\"/>
<property name="classes" value="classes\"/>
<property name="build" value="classes\"/>
<property name="version" value="0.5"/>

<path id="classpath.path">
<pathelement location="${build}"/>
<fileset dir="${lib}">
<include name="*.jar"/>
</fileset>
</path>

<target name="delete">
    <delete dir="${build}"/>
    <mkdir dir="${build}"/>
</target>

<target name="compile">
    <mkdir dir="${build}"/>
    <javac  deprecation="false"
            debug="true"
            optimize="false"
            srcdir="${src}"
            destdir="${build}">
<classpath>
    <path refid="classpath.path"/>
</classpath>
    </javac>
</target>

<target name="jar" depends="compile">
    <jar jarfile="${lib}\pmd-gel-${version}.jar" basedir="${build}" manifest="etc/MANIFEST.MF"/>
</target>

<target name="clean" depends="delete,compile"/>

<target name="dist" depends="clean,jar">
 <copy file="${lib}/pmd-gel-${version}.jar" toDir="c:\gel\plugin"/>
</target>

<target name="release" depends="clean, jar, dist">
 <mkdir dir="tmp"/>
 <copy file="${lib}/pmd-gel-${version}.jar" toDir="tmp/"/>
 <copy file="${lib}/jaxen-core-1.0-fcs.jar" toDir="tmp/"/>
 <copy file="${lib}/saxpath-1.0-fcs.jar" toDir="tmp/"/>
 <copy file="${lib}/pmd-1.2.2.jar" toDir="tmp/"/>
 <copy file="${lib}/xercesImpl-2.0.2.jar" toDir="tmp/"/>
 <copy file="${lib}/xmlParserAPIs-2.0.2.jar" toDir="tmp/"/>
 <zip basedir="tmp/" zipfile="pmd-gel-${version}.zip"/>
 <delete dir="tmp"/>
</target>

</project><project name="pmd-jbuilder" default="compile" basedir="../">

<property name="dir.lib" value="lib\"/>
<property name="dir.src" value="src\"/>
<property name="dir.build" value="build\"/>
<property name="dir.rulesets" value="rulesets\"/>
<property name="dir.regress" value="regress\"/>
<property name="version" value="1.6"/>
<property name="pmd.version" value="3.7"/>

<path id="dependencies.path">
    <pathelement location="${dir.build}"/>
    <fileset dir="${dir.lib}">
        <include name="*.jar"/>
    </fileset>
</path>

<target name="delete" description="Deletes the build directory and the OpenTool jar file.">
    <delete dir="${dir.build}"/>
    <delete file="${dir.lib}\PMDOpenTool.jar"/>
    <mkdir dir="${dir.build}"/>
</target>

<target name="compile" description="Compiles the code">
    <mkdir dir="${dir.build}"/>
    <javac  deprecation="false"
            debug="true"
            optimize="false"
            srcdir="${dir.src}"
            destdir="${dir.build}">
    <classpath>

    <path refid="dependencies.path"/>
    </classpath>
    </javac>
</target>

<target name="jar" depends="compile" description="Jars up the classes and rulesets">
    <mkdir dir="build/html"/>
    <copy todir="build/html">
        <fileset dir="src/html">
            <include name="*.html"/>
        </fileset>
    </copy>
    <mkdir dir="build/images"/>
    <copy todir="build/images">
        <fileset dir="src/images">
            <include name="*.gif"/>
        </fileset>
    </copy>
    <jar
        jarfile="${dir.lib}\PMDOpenTool.jar"
        includes="net/sourceforge/pmd/**/**/*.class,html/,images/"
        basedir="${dir.build}">
        <manifest>
            <attribute name="Manifest-Version" value="1.0"/>
            <attribute name="OpenTools-UI" value="net.sourceforge.pmd.jbuilder.PMDOpenTool"/>
        </manifest>
    </jar>
</target>

<target name="jarsrc" depends="compile"  description="Jars up the source directory">
    <jar jarfile="${dir.lib}\pmd-jbuilder-src-${version}.jar" basedir="${dir.src}"/>
</target>

<target name="clean" depends="delete,compile" description="Does a complete recompile"/>

<target name="dist" depends="clean,jar" description="Recompiles and jars"/>

<target name="deploy" depends="clean,jar" description="Deploys new jar file to my JBuilder install">
    <copy todir="c:\jbuilder2005\lib\ext\">
        <fileset dir="${dir.lib}">
            <include name="PMDOpenTool.jar"/>
            <include name="pmd-${pmd.version}.jar"/>
            <include name="jaxen-1.1-beta-7.jar"/>
        </fileset>
    </copy>
 </target>

</project>




<project name="Jerry" default="jjtreeXPath" basedir="../">

	<property name="dir.bin" value="bin/" />
	<property name="dir.lib" value="lib/" />
	<property file="${dir.bin}/build.properties"/>

	<property name="parser.xpath.dir" value="src/net/sourceforge/pmd/jerry/ast/xpath"/>
	<property name="parser.xpathcore.dir" value="src/net/sourceforge/pmd/jerry/ast/xpathcore"/>

	<target name="jjtreeXPath" description="Generates the Jerry XPath parser and AST source files">
		<delete file="${parser.xpath.dir}/XPath2.jj" />
		<delete file="${parser.xpath.dir}/XPath2Parser.java" />
		<delete file="${parser.xpath.dir}/XPath2ParserConstants.java" />
		<delete file="${parser.xpath.dir}/XPath2ParserTreeConstants.java" />
		<delete file="${parser.xpath.dir}/XPath2ParserTokenManager.java" />
		<jjtree target="etc/grammar/XPath2.jjt" outputdirectory="${parser.xpath.dir}" javacchome="${javacc-home.path}" />
		<javacc target="${parser.xpath.dir}/XPath2.jj" outputdirectory="${parser.xpath.dir}" javacchome="${javacc-home.path}" />
		<delete file="${parser.xpath.dir}/XPath2.jj" />
		<replace file="${parser.xpath.dir}/XPath2ParserTokenManager.java" token="throw new Error" value="throw new RuntimeException" />
		<replace file="${parser.xpath.dir}/XPath2Parser.java" token="throw new Error" value="throw new RuntimeException" />
		<replace file="${parser.xpath.dir}/SimpleCharStream.java" token="throw new Error" value="throw new RuntimeException" />
		<replace file="${parser.xpath.dir}/ParseException.java" token="throw new Error" value="throw new RuntimeException" />
		<replace file="${parser.xpath.dir}/ParseException.java" token="extends Exception" value="extends RuntimeException" />
		<replace file="${parser.xpath.dir}/TokenMgrError.java" token="extends Error" value="extends RuntimeException" />
	</target>

	<target name="jjtreeXPathCore" description="Generates the Jerry XPath Core parser and AST source files">
		<delete file="${parser.xpathcore.dir}core/XPathCore.jj" />
		<delete file="${parser.xpathcore.dir}/XPathCoreParser.java" />
		<delete file="${parser.xpathcore.dir}/XPathCoreParserConstants.java" />
		<delete file="${parser.xpathcore.dir}/XPathCoreParserTreeConstants.java" />
		<delete file="${parser.xpathcore.dir}/XPathCoreParserTokenManager.java" />
		<jjtree target="etc/grammar/XPath2Core.jjt" outputdirectory="${parser.xpathcore.dir}" javacchome="${javacc-home.path}" />
		<javacc target="${parser.xpathcore.dir}/XPathCore.jj" outputdirectory="${parser.xpathcore.dir}" javacchome="${javacc-home.path}" />
		<delete file="${parser.xpathcore.dir}/XPathCore.jj" />
		<replace file="${parser.xpathcore.dir}/XPathCoreParserTokenManager.java" token="throw new Error" value="throw new RuntimeException" />
		<replace file="${parser.xpathcore.dir}/XPathCoreParser.java" token="throw new Error" value="throw new RuntimeException" />
		<replace file="${parser.xpathcore.dir}/SimpleCharStream.java" token="throw new Error" value="throw new RuntimeException" />
		<replace file="${parser.xpathcore.dir}/ParseException.java" token="throw new Error" value="throw new RuntimeException" />
		<replace file="${parser.xpathcore.dir}/ParseException.java" token="extends Exception" value="extends RuntimeException" />
		<replace file="${parser.xpathcore.dir}/TokenMgrError.java" token="extends Error" value="extends RuntimeException" />
	</target>

</project>




<project basedir="." default="nbm" name="PMD netbeans module">

    <import file="nbproject/build-impl.xml"/>

    <property name="pmd.jar" value="pmd-4.2.5.jar"/>
    <property name="nb.version" value="netbeans65"/>
    <property name="VERSION" value="2.2.7"/>

    <property file="build.ant.properties"/>

    <property name="keystore" value="${user.home}/.pmdkeystore"/>
        
    <target name="nblib" depends="init">
        <mkdir dir="build/libclasses"/>
        <javac srcdir="libsrc" destdir="build/libclasses" source="${javac.source}" debug="${build.compiler.debug}" deprecation="${build.compiler.deprecation}">
            <classpath>
                <pathelement location="lib/${pmd.jar}"/>
            </classpath>
        </javac>
        <copy todir="build/libclasses">
            <fileset dir="libsrc" includes="**/*.xml"/>
        </copy>
        <mkdir dir="${cluster}/modules/ext"/>
        <jar jarfile="${cluster}/modules/ext/nbpmdrules.jar" compress="false">
            <fileset dir="build/libclasses"/>
        </jar>
    </target>

    <target name="netbeans-extra" depends="init,nblib">
        <mkdir dir="${cluster}/modules/ext"/>
        <copy todir="${cluster}/modules/ext">
          <fileset dir="lib">
            <include name="${pmd.jar}"/>
            <include name="asm-3.1.jar"/>
            <include name="jaxen-1.1.1.jar"/>
          </fileset>
        </copy>
    </target>

	<target depends="clean, nbm" description="Builds the distribution" name="distribution">
		<fail unless="VERSION" message="Must define VERSION property with the version number for this distribution!"/>
		<zip compress="true" destfile="build/pmd-${nb.version}-${VERSION}-src.zip">
			<zipfileset dir="." prefix="pmd-${nb.version}-${VERSION}">
				<include name="*.txt"/>
				<include name="manifest.mf"/>
				<include name="build.xml"/>
				<include name="nbproject/*.*"/>
				<include name="javahelp/**/*"/>
				<include name="src/**/*"/>
				<include name="libsrc/**/*"/>
				<include name="lib/${pmd.jar}"/>
				<include name="lib/jaxen-1.1.1.jar"/>
                                <include name="lib/asm-3.1.jar"/>
			</zipfileset>
			<zipfileset dir="." fullpath="pmd-${nb.version}-${VERSION}/pmd.nbm" includes="build/pmd.nbm"/>
		</zip>
		<zip compress="true" destfile="build/pmd-${nb.version}-${VERSION}-bin.zip">
			<zipfileset dir="." prefix="pmd-${nb.version}-${VERSION}">
				<include name="*.txt"/>
			</zipfileset>
			<zipfileset dir="." fullpath="pmd-${nb.version}-${VERSION}/pmd.nbm" includes="build/pmd.nbm"/>
		</zip>
	</target>
	
</project>
<?xml version="1.0"?>

<project name="maven" default="maven:jar" basedir=".">

  <!-- Give user a chance to override without editing this file
       (and without typing -D each time they invoke a target) -->

  <!-- Allow any user specific values to override the defaults -->
  <property file="${user.home}/build.properties" />
  <!-- Allow user defaults for this project -->
  <property file="build.properties" />
  <!-- Set default values for the build -->
  <property file="project.properties" />

<!-- maven:start -->

<!-- ======================================================== -->
<!-- D E L E G A T O R S                                      -->
<!-- ======================================================== -->

<target name="maven:gump-descriptor">
  <ant antfile="${maven.home}/plugins/core/build.xml" target="gump-descriptor"/>
</target>

<target name="maven:maven-update">
  <ant antfile="${maven.home}/plugins/core/build.xml" target="maven-update"/>
</target>

<target name="maven:update-jars">
  <ant antfile="${maven.home}/plugins/core/build.xml" target="update-jars"/>
</target>

<target name="maven:jar">
  <ant antfile="${maven.home}/plugins/core/build.xml" target="jar"/>
</target>

<target name="maven:docs-quick">
  <ant antfile="${maven.home}/plugins/docs/build.xml" target="docs-quick"/>
</target>

<target name="maven:run-singletest">
  <ant antfile="${maven.home}/plugins/test/build.xml" target="run-singletest"/>
</target>

<target name="maven:compile">
  <ant antfile="${maven.home}/plugins/core/build.xml" target="compile"/>
</target>

<target name="maven:fo">
  <ant antfile="${maven.home}/plugins/docs/build.xml" target="fo"/>
</target>

<target name="maven:cvs-change-log">
  <ant antfile="${maven.home}/plugins/docs/build.xml" target="cvs-change-log"/>
</target>

<target name="maven:war">
  <ant antfile="${maven.home}/plugins/j2ee/build.xml" target="war"/>
</target>

<target name="maven:generate-reactor">
  <ant antfile="${maven.home}/plugins/reactor/build.xml" target="generate-reactor"/>
</target>

<target name="maven:cross-ref">
  <ant antfile="${maven.home}/plugins/docs/build.xml" target="cross-ref"/>
</target>

<target name="maven:deploy-site">
  <ant antfile="${maven.home}/plugins/docs/build.xml" target="deploy-site"/>
</target>

<target name="maven:ear">
  <ant antfile="${maven.home}/plugins/j2ee/build.xml" target="ear"/>
</target>

<target name="maven:install-jar">
  <ant antfile="${maven.home}/plugins/core/build.xml" target="install-jar"/>
</target>

<target name="maven:task-list">
  <ant antfile="${maven.home}/plugins/docs/build.xml" target="task-list"/>
</target>

<target name="maven:docs">
  <ant antfile="${maven.home}/plugins/docs/build.xml" target="docs"/>
</target>

<target name="maven:site">
  <ant antfile="${maven.home}/plugins/docs/build.xml" target="site"/>
</target>

<target name="maven:deploy-dist">
  <ant antfile="${maven.home}/plugins/core/build.xml" target="deploy-dist"/>
</target>

<target name="maven:javadocs">
  <ant antfile="${maven.home}/plugins/docs/build.xml" target="javadocs"/>
</target>

<target name="maven:announce">
  <ant antfile="${maven.home}/plugins/core/build.xml" target="announce"/>
</target>

<target name="maven:check-source">
  <ant antfile="${maven.home}/plugins/core/build.xml" target="check-source"/>
</target>

<target name="maven:dist">
  <ant antfile="${maven.home}/plugins/core/build.xml" target="dist"/>
</target>

<target name="maven:dist-build">
  <ant antfile="${maven.home}/plugins/core/build.xml" target="dist-build"/>
</target>

<target name="maven:metrics">
  <ant antfile="${maven.home}/plugins/metrics/build.xml" target="metrics"/>
</target>

<target name="maven:clean">
  <ant antfile="${maven.home}/plugins/core/build.xml" target="clean"/>
</target>

<target name="maven:env">
  <ant antfile="${maven.home}/plugins/core/build.xml" target="env"/>
</target>

<target name="maven:test">
  <ant antfile="${maven.home}/plugins/test/build.xml" target="test"/>
</target>

<target name="maven:pdf">
  <ant antfile="${maven.home}/plugins/docs/build.xml" target="pdf"/>
</target>

<target name="maven:iutest">
  <ant antfile="${maven.home}/plugins/iutest/build.xml" target="iutest"/>
</target>

<target name="maven:activity-log">
  <ant antfile="${maven.home}/plugins/docs/build.xml" target="activity-log"/>
</target>

<target name="maven:verify-project">
  <ant antfile="${maven.home}/plugins/core/build.xml" target="verify-project"/>
</target>

<target name="maven:validate-pom">
  <ant antfile="${maven.home}/plugins/core/build.xml" target="validate-pom"/>
</target>

<target name="maven:validate-war">
  <ant antfile="${maven.home}/plugins/j2ee/build.xml" target="validate-war"/>
</target>

<!-- maven:end -->

</project>
