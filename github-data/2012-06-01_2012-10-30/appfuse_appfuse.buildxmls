<?xml version="1.0" encoding="UTF-8"?>
<project name="archetypes" basedir=".">

    <property name="version" value="3.0.1-SNAPSHOT"/>
    <property name="archetype" value="${archetype}"/>
    <property name="test.dir" value="${basedir}/target"/>
    <property name="dbunit.sample-data.xml" 
    	value="${basedir}/../../data/common/src/test/resources/sample-data.xml" />

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="../lib/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

    <target name="test" description="Tests that 'mvn integration-test' works with archetype" unless="skipTests">
        <echo message="Creating archetype '${archetype}', version '${version}'"/>
        <test archetype="${archetype}" version="${version}" dao.framework="${dao.framework}"/>
    </target>

    <target name="build-archetype" description="Builds Archetypes">
        <property name="dest" value=""/>
        <buildArchetype module="${module}" dest="${dest}"/>
    </target>

    <target name="install-module" description="Installs Archetype">
        <property name="module" value="core"/>
        <property name="dir" value="target/${module}-archetype"/>
        <mkdir dir="${dir}"/>
        <copy todir="${dir}">
            <fileset dir="src"/>
        </copy>
        <!-- Fix bug that happens in Bamboo -->
        <delete dir="${dir}" includes="main/**"/>

        <mvn command="archetype:create-from-project -DpackageName=org.appfuse.webapp" dir="${dir}"/>

        <!-- Change the version number of the generated archetype -->
        <replace file="${dir}/target/generated-sources/archetype/pom.xml" value="${version}" token="1.0-SNAPSHOT"/>

        <replace file="${dir}/target/generated-sources/archetype/pom.xml">
            <replacetoken><![CDATA[</name>]]></replacetoken>
            <replacevalue><![CDATA[</name>
        <distributionManagement>
        <repository>
            <id>appfuse-releases</id>
            <name>AppFuse Release Repository</name>
            <url>http://oss.sonatype.org/service/local/staging/deploy/maven2</url>
        </repository>
        <snapshotRepository>
            <id>appfuse-snapshots</id>
            <name>AppFuse Snapshot Repository</name>
            <url>http://oss.sonatype.org/content/repositories/appfuse-snapshots</url>
        </snapshotRepository>
        <site>
            <id>appfuse-site</id>
            <name>AppFuse Maven Site</name>
            <url>scp://static.appfuse.org/var/www/appfuse-site</url>
        </site>
    </distributionManagement>]]></replacevalue>
        </replace>

        <!-- Add jdbc.password back in since archetype plugin strips it out -->
        <replace file="${dir}/target/generated-sources/archetype/src/main/resources/archetype-resources/pom.xml">
            <replacetoken><![CDATA[<jdbc.username>root</jdbc.username>]]></replacetoken>
            <replacevalue><![CDATA[<jdbc.username>root</jdbc.username>
        <jdbc.password></jdbc.password>]]></replacevalue>
        </replace>

        <mvn command="install" dir="target/${module}-archetype/target/generated-sources/archetype"/>
    </target>

    <target name="deploy" description="Deploys archetype">
        <property name="dir" value="target/${module}-archetype"/>
        <mvn command="deploy" dir="${dir}/target/generated-sources/archetype"/>
    </target>

    <macrodef name="test">
        <attribute name="archetype"/>
        <attribute name="version"/>
        <attribute name="dao.framework"/>

        <sequential>
            <delete dir="${test.dir}/@{archetype}"/>
            <maven dir="${test.dir}" archetype="@{archetype}" version="@{version}"/>
            <!-- verify: runs webtest and verifies result. locale=en as otherwise there are webtests that fail -->
            <mvn dir="${test.dir}/@{archetype}" command="verify -Duser.language=en -Ddao.framework=@{dao.framework} -Pitest"/>
        </sequential>
    </macrodef>

    <macrodef name="maven">
        <attribute name="dir"/>
        <attribute name="name" default=""/>
        <attribute name="archetype" default=""/>
        <attribute name="version" default=""/>
        <attribute name="command"
                default="archetype:generate -B -DarchetypeGroupId=org.appfuse.archetypes -DarchetypeArtifactId=@{archetype}
            -DarchetypeVersion=@{version} -DgroupId=com.mycompany -DartifactId=@{archetype} -DpackageName=com.mycompany
            -DarchetypeCatalog=local"/>

        <sequential>
            <mkdir dir="${test.dir}"/>
            <mvn dir="${test.dir}" command="@{command}"/>
        </sequential>
    </macrodef>

    <macrodef name="buildArchetype">
        <attribute name="module" default=""/>
        <attribute name="dir" default="target/@{module}-archetype"/>
        <attribute name="dest" default=""/>

        <sequential>
            <mkdir dir="@{dir}"/>
            <copy todir="@{dir}">
                <fileset dir="src"/>
            </copy>

            <copy todir="@{dir}/@{dest}">
                <fileset dir="${basedir}/../../web/common">
                    <include name="**/**"/>
                    <exclude name="pom.xml"/>
                    <exclude name="target/**"/>
                    <exclude name="**/.svn/**"/>
                    <exclude name="*.iml"/>
                    <exclude name="*.ipr"/>
                </fileset>
            </copy>
            <copy todir="@{dir}/@{dest}" overwrite="true">
                <fileset dir="${basedir}/../../web/@{module}">
                    <include name="**/**"/>
                    <exclude name="pom.xml"/>
                    <exclude name="target/**"/>
                    <exclude name="**/.svn/**"/>
                    <exclude name="*.iml"/>
                    <exclude name="*.ipr"/>
                    <exclude name="*.iws"/>
                    <exclude name="*.log"/>
                </fileset>
            </copy>
            
            <if>
                <equals arg1="@{dest}" arg2="web"/>
                <then>
                   <copy file="${dbunit.sample-data.xml}" todir="@{dir}/core/src/test/resources/" />
                   <copy file="${dbunit.sample-data.xml}" todir="@{dir}/web/src/test/resources/" />
                </then>
	            <else>
                   <copy file="${dbunit.sample-data.xml}" todir="@{dir}/src/test/resources/" />
                </else>
            </if>
            <!-- Fix bug that happens in Bamboo -->
            <delete dir="@{dir}" includes="main/**"/>

            <!-- Remove displaytag for JSF, Tapestry and GWT-->
            <if>
                <equals arg1="@{module}" arg2="jsf"/>
                <then>
                    <delete dir="@{dir}">
                        <include name="**/displaytag*.properties"/>
                        <include name="**/decorators.xml"/>
                        <include name="**/sitemesh.xml"/>
                        <include name="**/login.jsp"/>
                    </delete>
                    <delete dir="@{dir}/src/main/webapp/decorators"/>
                    <delete dir="@{dir}/src/main/webapp/WEB-INF/tags"/>
                </then>
            </if>
            <if>
                <equals arg1="@{module}" arg2="tapestry"/>
                <then>
                    <delete dir="@{dir}">
                        <include name="**/displaytag*.properties"/>
                        <include name="**/decorators.xml"/>
                        <include name="**/sitemesh.xml"/>
                        <include name="**/login.jsp"/>
                    </delete>
                    <delete dir="@{dir}/src/main/webapp/decorators"/>
                    <delete dir="@{dir}/src/main/webapp/WEB-INF/tags"/>
                </then>
            </if>
            <if>
                <equals arg1="@{module}" arg2="gwt"/>
                <then>
                    <delete dir="@{dir}" includes="**/displaytag*.properties"/>
                </then>
            </if>

            <!-- Remove hibernate.cfg.xml from web projects when creating modular archetypes -->
            <if>
                <equals arg1="@{dest}" arg2="web"/>
                <then>
                    <delete dir="@{dir}/web/src/main/resources">
                        <include name="**/hibernate.cfg.xml"/>
                    </delete>
                </then>
            </if>

            <!-- Remove JSPs and generated i18n files in Tapestry -->
            <if>
                <equals arg1="@{module}" arg2="tapestry"/>
                <then>
                    <delete dir="@{dir}" includes="**/*.jsp,**/app*.properties,**/menu-config.xml"/>
                    <move file="@{dir}/@{dest}/src/main/resources/org/appfuse/webapp"
                            tofile="@{dir}/@{dest}/src/main/resources/webapp"/>
                    <delete dir="@{dir}/@{dest}/src/main/resources/org"/>
                </then>
            </if>
        	
        	<!-- Remove unused files in GWT -->
            <if>
                <equals arg1="@{module}" arg2="gwt"/>
                <then>
                	<delete dir="@{dir}/@{dest}/src/main/java/org/appfuse/webapp/jsp" />
                	<delete dir="@{dir}/@{dest}/src/main/java/org/appfuse/webapp/taglib" />
                	<delete dir="@{dir}/@{dest}/src/test/resources/" includes="config.xmlf,login.xmlf,web-tests.xml"/>
                    <delete dir="@{dir}" includes="**/app*.properties,**/menu-config.xml,**/navbarMenu.vm,**/navlistMenu.vm" />
                    <delete dir="@{dir}" includes="**/*.jsp" excludes="**/index.jsp" />
                    <delete dir="@{dir}/@{dest}/src/main/webapp/common/" />
                    <delete dir="@{dir}/@{dest}/src/main/webapp/decorators/" />
                    <delete dir="@{dir}/@{dest}/src/main/webapp/scripts/" />
                    <move todir="@{dir}/@{dest}/src/main/resources/webapp/client/application">
                    	<fileset dir="@{dir}/@{dest}/src/main/resources/" includes="ApplicationResources**.properties" />
                    </move>
					<!-- escape unmatched single quotes -->
                    <replaceregexp byline="true" flags="gim">
                        <regexp pattern="'"/><!-- FIXME provide a regexp just for an unmatched single quote -->
                        <substitution expression="''"/>
                        <fileset dir="@{dir}/@{dest}/src/main/resources/webapp/client/application">
                            <include name="ApplicationResources**.properties"/>
                        </fileset>
                    </replaceregexp>
                </then>
            </if>

            <if>
                <equals arg1="@{module}" arg2="wicket"/>
                <then>
                    <delete dir="@{dir}/src/main/webapp/styles/lib"/>
                    <delete dir="@{dir}/src/main/webapp/styles/img"/>
                    <delete dir="@{dir}/src/main/webapp/styles/img"/>
                    <delete file="@{dir}/TODO-Wicket.txt"/>
                    <delete file="@{dir}/web/TODO-Wicket.txt"/>

                    <!-- TODO: MZA: Why deleting scripts directory removes includes for */*.html and */*.tld for
                         src/main/webapp in maven-archetype-metadata.xml ? -->
                    <!--<delete dir="@{dir}/src/main/webapp/scripts"/>-->
                </then>
            </if>

            <mvn dir="@{dir}" command="archetype:create-from-project -DpackageName=org.appfuse.webapp"/>

            <!-- Change the version number of the generated archetype -->
            <replace file="@{dir}/target/generated-sources/archetype/pom.xml" value="${version}" token="1.0-SNAPSHOT"/>

            <!-- Add a description to the archetype's pom.xml -->
            <replace file="@{dir}/target/generated-sources/archetype/pom.xml">
                <replacetoken><![CDATA[</name>]]></replacetoken>
                <replacevalue><![CDATA[</name>
  <description>AppFuse Archetype</description>]]></replacevalue>
            </replace>

            <replace file="@{dir}/target/generated-sources/archetype/pom.xml">
                <replacetoken><![CDATA[</description>]]></replacetoken>
                <replacevalue><![CDATA[</description>

  <distributionManagement>
    <repository>
      <id>appfuse-releases</id>
      <name>AppFuse Release Repository</name>
      <url>http://oss.sonatype.org/service/local/staging/deploy/maven2</url>
    </repository>
    <snapshotRepository>
      <id>appfuse-snapshots</id>
      <name>AppFuse Snapshot Repository</name>
      <url>http://oss.sonatype.org/content/repositories/appfuse-snapshots</url>
    </snapshotRepository>
    <site>
      <id>appfuse-site</id>
      <name>AppFuse Maven Site</name>
      <url>scp://static.appfuse.org/var/www/appfuse-site</url>
    </site>
  </distributionManagement>]]></replacevalue>
            </replace>

            <!-- Preserve embedded package names -->
            <replace dir="@{dir}/target/generated-sources/archetype/src">
                <replacetoken>import ${package}.Constants</replacetoken>
                <replacevalue>import org.appfuse.Constants</replacevalue>
            </replace>

            <replace dir="@{dir}/target/generated-sources/archetype/src">
                <replacetoken>import ${package}.model</replacetoken>
                <replacevalue>import org.appfuse.model</replacevalue>
            </replace>

            <replace dir="@{dir}/target/generated-sources/archetype/src">
                <replacetoken>import ${package}.service.</replacetoken>
                <replacevalue>import org.appfuse.service.</replacevalue>
            </replace>

            <replace dir="@{dir}/target/generated-sources/archetype/src">
                <replacetoken>import ${package}.util</replacetoken>
                <replacevalue>import org.appfuse.util</replacevalue>
            </replace>

            <!-- Fix messed up package name on RequestUtil -->
            <replace dir="@{dir}/target/generated-sources/archetype/src">
                <replacetoken>import org.appfuse.util.RequestUtil</replacetoken>
                <replacevalue>import ${package}.webapp.util.RequestUtil</replacevalue>
            </replace>
            <replace dir="@{dir}/target/generated-sources/archetype/src">
                <replacetoken>import org.appfuse.webapp.util.RequestUtil</replacetoken>
                <replacevalue>import ${package}.webapp.util.RequestUtil</replacevalue>
            </replace>

            <if>
                <equals arg1="@{module}" arg2="wicket"/>
                <then>
                    <!-- TODO: MZA: Can it be done automatically for all static imports? -->
                    <replace dir="@{dir}/target/generated-sources/archetype/src">
                        <replacetoken>import static ${package}.util.NumberRangeUtil</replacetoken>
                        <replacevalue>import static ${package}.webapp.util.NumberRangeUtil</replacevalue>
                    </replace>
                    <replace dir="@{dir}/target/generated-sources/archetype/src">
                        <replacetoken>import static ${package}.StaticAuthenticatedWebSession</replacetoken>
                        <replacevalue>import static ${package}.webapp.StaticAuthenticatedWebSession</replacevalue>
                    </replace>

                    <replace dir="@{dir}/target/generated-sources/archetype/src">
                        <replacetoken>${package}.pages</replacetoken>
                        <replacevalue>${package}.webapp.pages</replacevalue>
                    </replace>
                </then>
            </if>

            <replace dir="@{dir}/target/generated-sources/archetype/src">
                <replacetoken>import org.appfuse.util.MessageUtil</replacetoken>
                <replacevalue>import ${package}.util.MessageUtil</replacevalue>
            </replace>

            <!-- Add jdbc.password back in since archetype plugin strips it out -->
            <replace file="@{dir}/target/generated-sources/archetype/src/main/resources/archetype-resources/pom.xml">
                <replacetoken><![CDATA[<jdbc.username>root</jdbc.username>]]></replacetoken>
                <replacevalue><![CDATA[<jdbc.username>root</jdbc.username>
        <jdbc.password></jdbc.password>]]></replacevalue>
            </replace>

            <!-- Add snapshots=true since archetype plugin strips it out -->
            <replace file="@{dir}/target/generated-sources/archetype/src/main/resources/archetype-resources/pom.xml">
                <replacetoken><![CDATA[<snapshots>]]></replacetoken>
                <replacevalue><![CDATA[<snapshots>
                <enabled>true</enabled>]]></replacevalue>
            </replace>

            <!-- Manually add ${package} to *.tld files -->
            <replace dir="@{dir}/target/generated-sources/archetype/src">
                <include name="**/*.tld"/>
                <replacetoken>org.appfuse.webapp.taglib</replacetoken>
                <replacevalue>${package}.webapp.taglib</replacevalue>
            </replace>

            <!-- Make sure .tld files are filtered -->
            <replace dir="@{dir}/target/generated-sources/archetype">
                <include name="**/archetype-metadata.xml"/>
                <replacetoken><![CDATA[<include>**/*.tld</include>]]></replacetoken>
            </replace>
            <replace dir="@{dir}/target/generated-sources/archetype">
                <include name="**/archetype-metadata.xml"/>
                <replacetoken><![CDATA[<include>**/*.html</include>]]></replacetoken>
                <replacevalue><![CDATA[<include>**/*.html</include>
        <include>**/*.tld</include>]]></replacevalue>
            </replace>

            <!-- Fix hibernate.cfg.xml and persistence.xml -->
            <replace dir="@{dir}/target/generated-sources/archetype/src">
                <include name="**/hibernate.cfg.xml"/>
                <include name="**/persistence.xml"/>
                <replacetoken>${package}</replacetoken>
                <replacevalue>org.appfuse</replacevalue>
            </replace>

            <!-- This will cause core java files to not be included in the archetype,
                 but I think that's OK, as long as the web project is golden. -->
            <replace dir="@{dir}/target/generated-sources/archetype">
                <include name="**/archetype-metadata.xml"/>
                <replacetoken><![CDATA[<include>**/*.java</include>]]></replacetoken>
                <replacevalue><![CDATA[<include>webapp/**/*.java</include>]]></replacevalue>
            </replace>

            <!-- This eliminates duplicated html file in src/main/java/pages and src/main/java/webapp/pages - see APF-1378.
                 Could not work with every archetype as it changes also a value in src/main/webapp (for Wicket it is
                 safe as long as there is no html file). Any better idea is welcome. -->
            <if>
                <equals arg1="@{module}" arg2="wicket"/>
                <then>
                    <replace dir="@{dir}/target/generated-sources/archetype">
                        <include name="**/archetype-metadata.xml"/>
                        <replacetoken><![CDATA[<include>**/*.html</include>]]></replacetoken>
                        <replacevalue><![CDATA[<include>webapp/**/*.html</include>]]></replacevalue>
                    </replace>
                </then>
            </if>

            <if>
                <equals arg1="@{dest}" arg2=""/>
                <then>
                    <!-- For Struts and its Model-validation.xml files -->
                    <replace dir="@{dir}/target/generated-sources/archetype">
                        <include name="**/archetype-metadata.xml"/>
                        <replacetoken><![CDATA[<include>**/*.xml</include>
        <include>webapp/**/*.java</include>]]></replacetoken>
                        <replacevalue><![CDATA[<include>webapp/**/*.xml</include>
        <include>webapp/**/*.java</include>]]></replacevalue>
                    </replace>
                    <!-- Fix for APF-1324: previous replace does not work in win -->
                    <replaceregexp byline="false" flags="gim">
                        <regexp pattern="&lt;include&gt;\*\*/\*.xml&lt;/include&gt;(\s+)&lt;include&gt;webapp/\*\*/\*.java&lt;/include&gt;"/>
                        <substitution expression="&lt;include&gt;webapp/**/*.xml&lt;/include&gt;${line.separator}        &lt;include&gt;webapp/**/*.java&lt;/include&gt;"/>
                        <fileset dir="@{dir}/target/generated-sources/archetype">
                            <include name="**/archetype-metadata.xml"/>
                        </fileset>
                    </replaceregexp>
                </then>
                <else>
                    <!-- For Struts and its Model-validation.xml files -->
                    <replace dir="@{dir}/target/generated-sources/archetype">
                        <include name="**/archetype-metadata.xml"/>
                        <replacetoken><![CDATA[<include>**/*.xml</include>
            <include>webapp/**/*.java</include>]]></replacetoken>
                        <replacevalue><![CDATA[<include>webapp/**/*.xml</include>
            <include>webapp/**/*.java</include>]]></replacevalue>
                    </replace>
                    <!-- Fix for APF-1324: previous replace does not work in win -->
                    <replaceregexp byline="false" flags="gim">
                        <regexp pattern="&lt;include&gt;\*\*/\*.xml&lt;/include&gt;(\s+)&lt;include&gt;webapp/\*\*/\*.java&lt;/include&gt;"/>
                        <substitution expression="&lt;include&gt;webapp/**/*.xml&lt;/include&gt;${line.separator}        &lt;include&gt;webapp/**/*.java&lt;/include&gt;"/>
                        <fileset dir="@{dir}/target/generated-sources/archetype">
                            <include name="**/archetype-metadata.xml"/>
                        </fileset>
                    </replaceregexp>
                    <!-- Add .webapp to the package name -->
                    <replace dir="@{dir}/target/generated-sources/archetype/src/main/resources/archetype-resources/web">
                        <replacetoken>package ${package}</replacetoken>
                        <replacevalue>package ${package}.webapp</replacevalue>
                    </replace>
                    <replace dir="@{dir}/target/generated-sources/archetype/src/main/resources/archetype-resources/web">
                        <replacetoken>import ${package}</replacetoken>
                        <replacevalue>import ${package}.webapp</replacevalue>
                    </replace>
                    <replace dir="@{dir}/target/generated-sources/archetype/src/main/resources/archetype-resources/web">
                        <replacetoken>webapp.webapp</replacetoken>
                        <replacevalue>webapp</replacevalue>
                    </replace>
                </else>
            </if>

            <if>
                <equals arg1="@{dest}" arg2=""/>
                <then>
                    <replace dir="@{dir}/target/generated-sources/archetype">
                        <include name="**/archetype-metadata.xml"/>
                        <replacetoken><![CDATA[<fileSet encoding="UTF-8">
      <directory>src/main/resources</directory>
      <includes>
        <include>**/*.tml</include>
      </includes>
    </fileSet>]]></replacetoken>
                        <replacevalue><![CDATA[<fileSet packaged="true" encoding="UTF-8">
      <directory>src/main/resources</directory>
      <includes>
        <include>**/*.tml</include>
      </includes>
    </fileSet>]]></replacevalue>
                    </replace>
                    <!-- Fix for APF-1324: previous replace does not work in win -->
                    <replaceregexp byline="false" flags="gim">
                        <regexp pattern="&lt;fileSet encoding=&quot;UTF-8&quot;&gt;(\s+)&lt;directory&gt;src/main/resources&lt;/directory&gt;(\s+)&lt;includes&gt;(\s+)&lt;include&gt;\*\*/\*.tml&lt;/include&gt;(\s+)&lt;/includes&gt;(\s+)&lt;/fileSet&gt;"/>
                        <substitution expression="&lt;fileSet packaged=&quot;true&quot; encoding=&quot;UTF-8&quot;&gt;${line.separator}      &lt;directory&gt;src/main/resources&lt;/directory&gt;${line.separator}      &lt;includes&gt;${line.separator}        &lt;include&gt;**/*.tml&lt;/include&gt;${line.separator}     &lt;/includes&gt;${line.separator}    &lt;/fileSet&gt;"/>
                        <fileset dir="@{dir}/target/generated-sources/archetype">
                            <include name="**/archetype-metadata.xml"/>
                        </fileset>
                    </replaceregexp>
                </then>
                <else>
                    <replace dir="@{dir}/target/generated-sources/archetype">
                        <include name="**/archetype-metadata.xml"/>
                        <replacetoken><![CDATA[<fileSet encoding="UTF-8">
          <directory>src/main/resources</directory>
          <includes>
            <include>**/*.tml</include>
          </includes>
        </fileSet>]]></replacetoken>
                        <replacevalue><![CDATA[<fileSet packaged="true" encoding="UTF-8">
          <directory>src/main/resources</directory>
          <includes>
            <include>**/*.tml</include>
          </includes>
        </fileSet>]]></replacevalue>
                    </replace>
                    <!-- Fix for APF-1324: previous replace does not work in win -->
                    <replaceregexp byline="false" flags="gim">
                        <regexp pattern="&lt;fileSet encoding=&quot;UTF-8&quot;&gt;(\s+)&lt;directory&gt;src/main/resources&lt;/directory&gt;(\s+)&lt;includes&gt;(\s+)&lt;include&gt;\*\*/\*.tml&lt;/include&gt;(\s+)&lt;/includes&gt;(\s+)&lt;/fileSet&gt;"/>
                        <substitution expression="&lt;fileSet packaged=&quot;true&quot; encoding=&quot;UTF-8&quot;&gt;${line.separator}      &lt;directory&gt;src/main/resources&lt;/directory&gt;${line.separator}      &lt;includes&gt;${line.separator}        &lt;include&gt;**/*.tml&lt;/include&gt;${line.separator}     &lt;/includes&gt;${line.separator}    &lt;/fileSet&gt;"/>
                        <fileset dir="@{dir}/target/generated-sources/archetype">
                            <include name="**/archetype-metadata.xml"/>
                        </fileset>
                    </replaceregexp>
                </else>
            </if>

            <if>
                <equals arg1="@{module}" arg2="gwt"/>
                <then>
                	<!-- scripts to generate regexp and substitution from xml: -->
                	<!-- sed -e ':a;N;$!ba;s/\n//g' -e 's/</\&lt;/g' -e 's/>/\&gt;/g' -e 's/"/\&quot;/g' -e 's/  \+/(\\s+)/g' -e 's/\*/\\*/g' -->
                	<!-- sed -e ':a;N;$!ba;s/\n/${line.separator}/g' -e 's/</\&lt;/g' -e 's/>/\&gt;/g' -e 's/"/\&quot;/g' -->
                	
				    <!-- Set packaged="true" for ApplicationResources.properties in gwt -->
                    <replaceregexp byline="false" flags="gm">
                        <regexp pattern="&lt;fileSet filtered=&quot;true&quot; encoding=&quot;UTF-8&quot;&gt;(\s+)&lt;directory&gt;src/main/resources&lt;/directory&gt;(\s+)&lt;includes&gt;(\s+)&lt;include&gt;\*\*/\*.vm&lt;/include&gt;(\s+)&lt;include&gt;\*\*/\*.xml&lt;/include&gt;(\s+)&lt;include&gt;\*\*/\*.properties&lt;/include&gt;(\s+)&lt;/includes&gt;(\s+)&lt;/fileSet&gt;"/>
                        <substitution expression="&lt;fileSet filtered=&quot;true&quot; encoding=&quot;UTF-8&quot;&gt;${line.separator}      &lt;directory&gt;src/main/resources&lt;/directory&gt;${line.separator}      &lt;includes&gt;${line.separator}        &lt;include&gt;**/*.vm&lt;/include&gt;${line.separator}        &lt;include&gt;**/*.xml&lt;/include&gt;${line.separator}        &lt;include&gt;**/*.properties&lt;/include&gt;${line.separator}      &lt;/includes&gt;${line.separator}      &lt;excludes&gt;${line.separator}           &lt;exclude&gt;**/ApplicationResources*.properties&lt;/exclude&gt;${line.separator}      &lt;/excludes&gt;${line.separator}    &lt;/fileSet&gt;${line.separator}    &lt;fileSet filtered=&quot;true&quot; packaged=&quot;true&quot; encoding=&quot;UTF-8&quot;&gt;${line.separator}      &lt;directory&gt;src/main/resources&lt;/directory&gt;${line.separator}      &lt;includes&gt;${line.separator}        &lt;include&gt;**/ApplicationResources*.properties&lt;/include&gt;${line.separator}      &lt;/includes&gt;${line.separator}    &lt;/fileSet&gt;"/>
                        <fileset dir="@{dir}/target/generated-sources/archetype">
                            <include name="**/archetype-metadata.xml"/>
                        </fileset>
                    </replaceregexp>
                	<!-- replace <include>**/*.xml</include> by <include>webapp/**/*.xml</include> in src/main/java -->
                    <replaceregexp byline="false" flags="gm">
                        <regexp pattern="&lt;include&gt;webapp/\*\*/\*.java&lt;/include&gt;(\s+)&lt;include&gt;\*\*/\*.xml&lt;/include&gt;"/>
                        <substitution expression="&lt;include&gt;webapp/**/*.java&lt;/include&gt;${line.separator}        &lt;include&gt;webapp/**/*.xml&lt;/include&gt;"/>
                        <fileset dir="@{dir}/target/generated-sources/archetype">
                            <include name="**/archetype-metadata.xml"/>
                        </fileset>
                    </replaceregexp>                	
                </then>
            </if>

            <if>
                <equals arg1="@{dest}" arg2=""/>
                <then>
                    <!-- Make sure web.xml has proper value for Tapestry -->
                    <replace dir="@{dir}/target/generated-sources/archetype">
                        <include name="**/web.xml"/>
                        <replacetoken><![CDATA[<param-value>org.appfuse.webapp</param-value>]]></replacetoken>
                        <replacevalue><![CDATA[<param-value>${package}.webapp</param-value>]]></replacevalue>
                    </replace>
                </then>
                <else>
                    <replace dir="@{dir}/target/generated-sources/archetype">
                        <include name="**/web.xml"/>
                        <replacetoken><![CDATA[<param-value>org.appfuse.webapp</param-value>]]></replacetoken>
                        <replacevalue><![CDATA[<param-value>${package}</param-value>]]></replacevalue>
                    </replace>
                </else>
            </if>

            <if>
                <equals arg1="@{dest}" arg2=""/>
                <then>
                    <!-- Make sure all Java files are in webapp directory -->
                    <replace dir="@{dir}/target/generated-sources/archetype">
                        <include name="**/*"/>
                        <replacetoken>${package}</replacetoken>
                        <replacevalue>${package}.webapp</replacevalue>
                    </replace>
                    <replace dir="@{dir}/target/generated-sources/archetype">
                        <include name="**/*"/>
                        <replacetoken>webapp.webapp</replacetoken>
                        <replacevalue>webapp</replacevalue>
                    </replace>

                    <property name="web.root"
                            value="@{dir}/target/generated-sources/archetype/src/main/resources/archetype-resources"/>

                    <!-- sources -->
                    <move file="${web.root}/src/main/java" tofile="${web.root}/src/main/java/webapp"/>
                    <!-- tests -->
                    <move file="${web.root}/src/test/java" tofile="${web.root}/src/test/java/webapp"/>
                </then>
                <else>
                    <property name="web.root"
                            value="@{dir}/target/generated-sources/archetype/src/main/resources/archetype-resources/web"/>

                    <!-- sources -->
                    <move file="${web.root}/src/main/java" tofile="${web.root}/src/main/java/webapp"/>
                    <!-- tests -->
                    <move file="${web.root}/src/test/java" tofile="${web.root}/src/test/java/webapp"/>
                </else>
            </if>

            <!-- Fix ${artifactId}app replacement bug -->
            <replace dir="@{dir}/target/generated-sources/archetype">
                <include name="**/*"/>
                <replacetoken>${artifactId}app</replacetoken>
                <replacevalue>webapp</replacevalue>
            </replace>

            <!-- Replace org.appfuse with ${groupId} in applicationContext.xml -->
            <!-- Happens in basic archetypes -->
            <replace dir="@{dir}/target/generated-sources/archetype">
                <include name="**/applicationContext.xml"/>
                <replacetoken>base-package="org.appfuse"</replacetoken>
                <replacevalue>base-package="${groupId}"</replacevalue>
            </replace>

            <!-- Replace ${groupId}.webapp with ${groupId} in applicationContext.xml -->
            <!-- Happens in modular archetypes -->
            <replace dir="@{dir}/target/generated-sources/archetype">
                <include name="**/applicationContext.xml"/>
                <replacetoken>base-package="${package}.webapp"</replacetoken>
                <replacevalue>base-package="${package}"</replacevalue>
            </replace>

            <!-- Leave Compass as indexing org.appfuse by default -->
            <!-- Replace ${groupId}.webapp with org.appfuse in applicationContext.xml -->
            <!-- Happens in basic archetypes -->
            <replace dir="@{dir}/target/generated-sources/archetype">
                <include name="**/applicationContext.xml"/>
                <replacetoken>value="${package}.webapp"</replacetoken>
                <replacevalue>value="org.appfuse"</replacevalue>
            </replace>

            <!-- Replace ${groupId} with org.appfuse in applicationContext.xml -->
            <!-- Happens in modular archetypes -->
            <replace dir="@{dir}/target/generated-sources/archetype">
                <include name="**/applicationContext.xml"/>
                <replacetoken>value="${package}"</replacetoken>
                <replacevalue>value="org.appfuse"</replacevalue>
            </replace>

            <!-- Fix DWR -->
            <!-- Basic archetypes -->
            <replace dir="@{dir}/target/generated-sources/archetype">
                <include name="**/dwr.xml"/>
                <replacetoken>${package}.webapp</replacetoken>
                <replacevalue>org.appfuse</replacevalue>
            </replace>

            <!-- Modular archetypes -->
            <replace dir="@{dir}/target/generated-sources/archetype">
                <include name="**/dwr.xml"/>
                <replacetoken>${package}</replacetoken>
                <replacevalue>org.appfuse</replacevalue>
            </replace>

            <if>
                <equals arg1="@{dest}" arg2="web"/>
                <then>
                    <replace dir="@{dir}/target/generated-sources/archetype">
                        <include name="**/*.xml"/>
                        <include name="**/*.properties"/>
                        <replacetoken>${package}</replacetoken>
                        <replacevalue>${groupId}.webapp</replacevalue>
                    </replace>
                    <replace dir="@{dir}/target/generated-sources/archetype">
                        <include name="**/BasePageTestCase.java"/>
                        <replacetoken>appPackage = "${package}";</replacetoken>
                        <replacevalue>appPackage = "${package}.webapp";</replacevalue>
                    </replace>
                </then>
            </if>

            <!-- Fix WebTest path to ApplicationResources.properties -->
            <replace dir="@{dir}/target/generated-sources/archetype/src">
                <include name="**/web-tests.xml"/>
                <replacetoken>../../../../common/target/</replacetoken>
                <replacevalue>../../../target/</replacevalue>
            </replace>
            <mvn command="install" dir="@{dir}/target/generated-sources/archetype"/>
        </sequential>
    </macrodef>

    <macrodef name="mvn">
        <attribute name="command"/>
        <attribute name="dir"/>

        <sequential>
            <exec dir="@{dir}" executable="mvn.bat" os="Windows 7" failonerror="true">
                <arg line="@{command}"/>
            </exec>
            <exec dir="@{dir}" executable="mvn" os="Mac OS X" failonerror="true">
                <arg line="@{command}"/>
            </exec>
            <exec dir="@{dir}" executable="mvn" os="Linux" failonerror="true">
                <arg line="@{command}"/>
            </exec>
        </sequential>
    </macrodef>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="plugin-test" default="test-all" xmlns:artifact="urn:maven-artifact-ant">

    <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant">
        <classpath>
            <pathelement location="lib/maven-ant-tasks-2.0.10.jar" />
        </classpath>
    </typedef>
    
    <artifact:dependencies pathId="classpath">
        <dependency groupId="ant-contrib" artifactId="ant-contrib" version="1.0b2"/>
    </artifact:dependencies>
    
    <taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="classpath"/>

    <property name="version" value="3.0.1-SNAPSHOT"/>
    <property name="archetype" value="${archetype}"/>
    <property name="test.dir" value="${basedir}/target"/>

    <!-- Basic Archetypes -->
    <target name="test-jsf-basic" description="tests plugin with jsf basic archetype">
        <create-gen-basic archetype="appfuse-basic-jsf" name="basic-jsf"/>
    </target>

    <target name="test-spring-basic" description="tests plugin with spring basic archetype">
        <create-gen-basic archetype="appfuse-basic-spring" name="basic-spring"/>
    </target>

    <target name="test-struts-basic" description="tests plugin with struts basic archetype">
        <create-gen-basic archetype="appfuse-basic-struts" name="basic-struts"/>
    </target>

    <target name="test-tapestry-basic" description="tests plugin with tapestry basic archetype">
        <create-gen-basic archetype="appfuse-basic-tapestry" name="basic-tapestry"/>
    </target>

    <target name="test-basic" description="Runs all basic archetype tests using Ant">
        <antcall target="test-jsf-basic"/>
        <antcall target="test-spring-basic"/>
        <antcall target="test-struts-basic"/>
        <antcall target="test-tapestry-basic"/>
    </target>

    <!-- Modular Archetypes -->
    <target name="test-jsf-modular" description="tests plugin with jsf modular archetype">
        <create-gen-modular archetype="appfuse-modular-jsf" name="modular-jsf"/>
    </target>

    <target name="test-spring-modular" description="tests plugin with spring modular archetype">
        <create-gen-modular archetype="appfuse-modular-spring" name="modular-spring"/>
    </target>

    <target name="test-struts-modular" description="tests plugin with struts modular archetype">
        <create-gen-modular archetype="appfuse-modular-struts" name="modular-struts"/>
    </target>

    <target name="test-tapestry-modular" description="tests plugin with tapestry modular archetype">
        <create-gen-modular archetype="appfuse-modular-tapestry" name="modular-tapestry"/>
    </target>

    <!-- Light Archetypes -->
    <target name="test-jsf-light" description="tests plugin with jsf light archetype">
        <create-gen-basic archetype="appfuse-light-jsf" name="light-jsf"/>
    </target>

    <target name="test-spring-light" description="tests plugin with spring light archetype">
        <create-gen-basic archetype="appfuse-light-spring" name="light-spring"/>
    </target>

    <target name="test-struts-light" description="tests plugin with struts light archetype">
        <create-gen-basic archetype="appfuse-light-struts" name="light-struts"/>
    </target>

    <target name="test-tapestry-light" description="tests plugin with tapestry light archetype">
        <create-gen-basic archetype="appfuse-light-tapestry" name="light-tapestry"/>
    </target>
    
    <target name="test-wicket-light" description="tests plugin with wicket light archetype">
        <create-gen-basic archetype="appfuse-light-wicket" name="light-wicket"/>
    </target>

    <target name="test-light" description="Runs all light archetype tests using Ant">
        <antcall target="test-jsf-light"/>
        <antcall target="test-spring-light"/>
        <antcall target="test-struts-light"/>
        <antcall target="test-tapestry-light"/>
    </target>

    <target name="test-modular" description="Runs all modular archetype tests using Ant">
        <antcall target="test-jsf-modular"/>
        <antcall target="test-spring-modular"/>
        <antcall target="test-struts-modular"/>
        <antcall target="test-tapestry-modular"/>
    </target>

    <target name="test-all" description="Tests AMP, Full Source and JPA with AppFuse archetypes">
        <antcall target="test-basic"/>
        <antcall target="test-modular"/>
        <antcall target="test-basic-source"/>
        <antcall target="test-modular-source"/>
        <!--antcall target="test-ibatis"/-->
        <antcall target="test-jpa"/>
    </target>
    
    <target name="test-all-light" description="Tests AMP and Full Source with AppFuse Light">
        <antcall target="test-light"/>
        <antcall target="test-light-source"/>
    </target>

    <macrodef name="create-gen-basic">
        <attribute name="archetype"/>
        <attribute name="version" default="${version}"/>
        <attribute name="name"/>

        <sequential>
            <delete dir="${test.dir}/@{name}"/>
            <mkdir dir="${test.dir}"/>
            <maven dir="${test.dir}" archetype="@{archetype}-archetype" version="@{version}" name="@{name}"/>

            <!-- copy Person.java to src -->
            <copy todir="${test.dir}/@{name}/src/main/java/com">
                <fileset dir="src/test/java/com" includes="**/*.java"/>
            </copy>

            <!-- add Person to hibernate.cfg.xml -->
            <replace file="${test.dir}/@{name}/src/main/resources/hibernate.cfg.xml">
                <replacetoken><![CDATA[<mapping class="org.appfuse.model.Role"/>]]></replacetoken>
                <replacevalue><![CDATA[<mapping class="org.appfuse.model.Role"/>
        <mapping class="com.company.model.Person"/>]]></replacevalue>
            </replace>

            <echo level="info">Generating Generic CRUD for Person entity...</echo>
            <!-- run gen install integration-test -->
            <if>
                <contains string="@{name}" substring="light"/>
                <then>
                    <property name="test-command" value="verify -Duser.language=en -Djdbc.username=sa -Djdbc.password="/>
                </then>
                <else>
                    <property name="test-command" value="verify -Duser.language=en"/>
                </else>
            </if>
 
            <echo message="Using test command: ${test-command}"/>
            
            <maven dir="${test.dir}/@{name}" command="appfuse:gen -Dentity=Person -e"/>
            <maven dir="${test.dir}/@{name}" command="${test-command}  -e"/>

            <echo level="info">Removing Person entity...</echo>
            <maven dir="${test.dir}/@{name}" command="appfuse:remove -Dentity=Person -Dskip.areyousure=true -e"/>
            <maven dir="${test.dir}/@{name}" command="clean ${test-command} -e"/>

            <!-- copy Person.java to src -->
            <copy todir="${test.dir}/@{name}/src/main/java/com">
                <fileset dir="src/test/java/com" includes="**/*.java"/>
            </copy>

            <!-- This time, we'll test the auto-adding of <mapping class="com.company.model.Person"/> to -->
            <!-- hibernate.cfg.xml by doing nothing to add it ourselves. -->

            <echo level="info">Generating CRUD for Person entity...</echo>

            <!-- test w/o generic core -->
            <maven dir="${test.dir}/@{name}" command="appfuse:gen -Dentity=Person -Damp.genericCore=false -e"/>
            <maven dir="${test.dir}/@{name}" command="${test-command} -e"/>
        </sequential>
    </macrodef>

    <macrodef name="create-gen-modular">
        <attribute name="archetype"/>
        <attribute name="version" default="${version}"/>
        <attribute name="name"/>

        <sequential>
            <delete dir="${test.dir}/@{name}"/>
            <mkdir dir="${test.dir}"/>
            <maven dir="${test.dir}" archetype="@{archetype}-archetype" version="@{version}" name="@{name}"/>

            <!-- copy Person.java to core/src -->
            <copy todir="${test.dir}/@{name}/core/src/main/java/com">
                <fileset dir="src/test/java/com" includes="**/*.java"/>
            </copy>

            <!-- add Person to hibernate.cfg.xml -->
            <replace file="${test.dir}/@{name}/core/src/main/resources/hibernate.cfg.xml">
                <replacetoken><![CDATA[<mapping class="org.appfuse.model.Role"/>]]></replacetoken>
                <replacevalue><![CDATA[<mapping class="org.appfuse.model.Role"/>
        <mapping class="com.company.model.Person"/>]]></replacevalue>
            </replace>

            <maven dir="${test.dir}/@{name}" command="install -N -e"/>

            <!-- gen and test core -->
            <maven dir="${test.dir}/@{name}/core" command="appfuse:gen -Dentity=Person -Damp.genericCore=false -e"/>
            <maven dir="${test.dir}/@{name}/core" command="install -Duser.language=en -Dsurefire.useFile=false -e"/>

            <!-- get and test web -->
            <maven dir="${test.dir}/@{name}/web" command="appfuse:gen -Dentity=Person -Damp.genericCore=false -e"/>
            <maven dir="${test.dir}/@{name}/web" command="install -Duser.language=en -Dsurefire.useFile=false -e"/>
        </sequential>
    </macrodef>

    <target name="test-basic-source" description="Tests extracting source into basic archetypes">
        <antcall target="test-jsf-basic-source"/>
        <antcall target="test-spring-basic-source"/>
        <antcall target="test-struts-basic-source"/>
        <antcall target="test-tapestry-basic-source"/>
        <antcall target="test-core-source"/>
        <antcall target="test-ws-source"/>
    </target>

    <target name="test-modular-source" description="Tests extracting source into modular archetypes">
        <antcall target="test-jsf-modular-source"/>
        <antcall target="test-spring-modular-source"/>
        <antcall target="test-struts-modular-source"/>
        <antcall target="test-tapestry-modular-source"/>
    </target>

    <target name="test-light-source" description="Tests extracting source into light archetypes">
        <antcall target="test-jsf-light-source"/>
        <antcall target="test-spring-light-source"/>
        <antcall target="test-struts-light-source"/>
        <antcall target="test-stripes-light-source"/>
        <antcall target="test-tapestry-light-source"/>
        <antcall target="test-wicket-light-source"/>
    </target>
    
    <target name="test-jsf-basic-source" description="tests full-source plugin with jsf basic archetype">
        <full-source archetype="appfuse-basic-jsf" name="basic-jsf-source"/>
    </target>

     <target name="test-spring-basic-source" description="tests full-source plugin with spring basic archetype">
        <full-source archetype="appfuse-basic-spring" name="basic-spring-source"/>
    </target>

     <target name="test-struts-basic-source" description="tests full-source plugin with struts basic archetype">
        <full-source archetype="appfuse-basic-struts" name="basic-struts-source"/>
    </target>

     <target name="test-tapestry-basic-source" description="tests full-source plugin with tapestry basic archetype">
        <full-source archetype="appfuse-basic-tapestry" name="basic-tapestry-source"/>
    </target>

    <target name="test-core-source" description="tests full-source plugin with core archetype">
        <full-source archetype="appfuse-core" name="core-source"/>
        <!--full-source archetype="appfuse-core" name="core-ibatis-source" daoFramework="ibatis" hibernate3Config="jpaconfiguration" modular="false"/-->
        <full-source archetype="appfuse-core" name="core-jpa-source" daoFramework="jpa" hibernate3Config="jpaconfiguration" modular="false"/>
    </target>

    <target name="test-ws-source" description="tests full-source plugin with ws archetype">
        <full-source archetype="appfuse-ws" name="ws-source"/>
    </target>
    
    <target name="test-jsf-modular-source" description="tests full-source plugin with jsf modular archetype">
        <full-source archetype="appfuse-modular-jsf" name="modular-jsf-source"/>
        <!--full-source archetype="appfuse-modular-jsf" name="modular-jsf-ibatis-source" daoFramework="ibatis" hibernate3Config="annotationconfiguration"/-->
        <full-source archetype="appfuse-modular-jsf" name="modular-jsf-jpa-source" daoFramework="jpa" hibernate3Config="jpaconfiguration"/>
    </target>

     <target name="test-spring-modular-source" description="tests full-source plugin with spring modular archetype">
        <full-source archetype="appfuse-modular-spring" name="modular-spring-source"/>
        <!--full-source archetype="appfuse-modular-spring" name="modular-spring-ibatis-source" daoFramework="ibatis" hibernate3Config="annotationconfiguration"/-->
        <full-source archetype="appfuse-modular-spring" name="modular-spring-jpa-source" daoFramework="jpa" hibernate3Config="jpaconfiguration"/>
    </target>

     <target name="test-struts-modular-source" description="tests full-source plugin with struts modular archetype">
        <full-source archetype="appfuse-modular-struts" name="modular-struts-source"/>
        <!--full-source archetype="appfuse-modular-struts" name="modular-struts-ibatis-source" daoFramework="ibatis" hibernate3Config="annotationconfiguration"/-->
        <full-source archetype="appfuse-modular-struts" name="modular-struts-jpa-source" daoFramework="jpa" hibernate3Config="jpaconfiguration"/>
    </target>

     <target name="test-tapestry-modular-source" description="tests full-source plugin with tapestry modular archetype">
        <full-source archetype="appfuse-modular-tapestry" name="modular-tapestry-source"/>
        <!--full-source archetype="appfuse-modular-tapestry" name="modular-tapestry-ibatis-source" daoFramework="ibatis" hibernate3Config="annotationconfiguration"/-->
        <full-source archetype="appfuse-modular-tapestry" name="modular-tapestry-source" daoFramework="jpa" hibernate3Config="jpaconfiguration"/>
    </target>
    
    <target name="test-jsf-light-source" description="tests full-source plugin with jsf light archetype">
        <full-source archetype="appfuse-light-jsf" name="light-jsf-source"/>
    </target>

     <target name="test-spring-light-source" description="tests full-source plugin with spring light archetype">
        <full-source archetype="appfuse-light-spring" name="light-spring-source"/>
    </target>

     <target name="test-struts-light-source" description="tests full-source plugin with struts light archetype">
        <full-source archetype="appfuse-light-struts" name="light-struts-source"/>
    </target>

    <target name="test-stripes-light-source" description="tests full-source plugin with stripes light archetype">
        <full-source archetype="appfuse-light-stripes" name="light-stripes-source"/>
    </target>
    
    <target name="test-tapestry-light-source" description="tests full-source plugin with tapestry light archetype">
        <full-source archetype="appfuse-light-tapestry" name="light-tapestry-source"/>
    </target>
    
    <target name="test-wicket-light-source" description="tests full-source plugin with wicket light archetype">
        <full-source archetype="appfuse-light-wicket" name="light-wicket-source"/>
    </target>
    
    <macrodef name="full-source">
        <attribute name="archetype"/>
        <attribute name="version" default="${version}"/>
        <attribute name="name"/>
        <attribute name="modular" default="true"/>
        <attribute name="daoFramework" default="hibernate"/>
        <attribute name="hibernate3Config" default="annotationconfiguration"/>

        <sequential>
            <delete dir="${test.dir}/@{name}"/>
            <mkdir dir="${test.dir}"/>
            <maven dir="${test.dir}" archetype="@{archetype}-archetype" version="@{version}" name="@{name}"/>

            <if>
                <not><equals arg1="@{daoFramework}" arg2="hibernate"/></not>
                <then>
                    <changeDaoFramework name="@{name}" daoFramework="@{daoFramework}" hibernate3Config="@{hibernate3Config}"/>
                    <if>
                        <equals arg1="@{modular}" arg2="true"/>
                        <then>
                            <!-- The changeDaoFramework macro only changes for root pom.xml -->
                            <replace file="${test.dir}/@{name}/core/pom.xml"
                                     token="annotationconfiguration" value="@{hibernate3Config}"/>
                        </then>
                    </if>
                </then>
            </if>
            
            <!-- Don't use db profile (in Bamboo) for AppFuse Light -->
            <if>
                <contains string="@{name}" substring="light"/>
                <then>
                    <property name="test-command" value="integration-test -Duser.language=en -Dsurefire.useFile=false -Djdbc.username=sa -Djdbc.password="/>
                </then>
                <else>
                    <property name="test-command" value="verify -Duser.language=en -Dsurefire.useFile=false"/>
                </else>
            </if>
            
            <!-- run full-source verify -->
            <maven dir="${test.dir}/@{name}" command="appfuse:full-source -e"/>
            <maven dir="${test.dir}/@{name}" command="${test-command} -e"/>
        </sequential>
    </macrodef>

    <macrodef name="maven">
        <attribute name="dir"/>
        <attribute name="name" default=""/>
        <attribute name="archetype" default=""/>
        <attribute name="version" default=""/>
        <attribute name="command" default="archetype:generate -B -DarchetypeGroupId=org.appfuse.archetypes -DarchetypeArtifactId=@{archetype}
                                           -DarchetypeVersion=@{version} -DgroupId=com.company -DartifactId=@{name} -DarchetypeCatalog=local -e"/>

        <sequential>
            <exec dir="@{dir}" executable="mvn.bat" os="Windows 7" failonerror="true" errorproperty="command.failed">
                <arg line="@{command}"/>
            </exec>
            <exec dir="@{dir}" executable="mvn" os="Mac OS X" failonerror="true" errorproperty="command.failed">
                <arg line="@{command} -e"/>
            </exec>
            <exec dir="@{dir}" executable="mvn" os="Linux" failonerror="true" errorproperty="command.failed">
                <arg line="@{command}"/>
            </exec>

            <!--fail if="command.failed">Failed to run '@{command}' command</fail-->
        </sequential>
    </macrodef>
    
    <!-- Test iBATIS -->
    <target name="test-ibatis" description="creates projects, changes dao.framework to ibatis and tests generation">
        <create-project-for-daoframework archetype="appfuse-basic-jsf" name="basic-jsf-ibatis" 
            daoFramework="ibatis" hibernate3Config="annotationconfiguration"/>
        <create-project-for-daoframework archetype="appfuse-basic-struts" name="basic-struts-ibatis" 
            daoFramework="ibatis" hibernate3Config="annotationconfiguration"/>
    </target>
    
    <!-- Test JPA -->
    <target name="test-jpa" description="creates projects, changes dao.framework to jpa and tests generation">
        <create-project-for-daoframework archetype="appfuse-basic-spring" name="basic-spring-jpa" daoFramework="jpa"/>
        <create-project-for-daoframework archetype="appfuse-basic-tapestry" name="basic-tapestry-jpa" daoFramework="jpa"/>
    </target>

    <!-- Test generating POJOs from tables -->
    
    <macrodef name="create-project-for-daoframework">
        <attribute name="archetype"/>
        <attribute name="version" default="${version}"/>
        <attribute name="fullSource" default="false"/>
        <attribute name="name"/>
        <attribute name="daoFramework"/>
        <attribute name="hibernate3Config" default="jpaconfiguration"/>

        <sequential>
            <delete dir="${test.dir}/@{name}"/>
            <mkdir dir="${test.dir}"/>
            <maven dir="${test.dir}" archetype="@{archetype}-archetype" version="@{version}" name="@{name}"/>

            <!-- copy Person.java to src -->
            <copy todir="${test.dir}/@{name}/src/main/java/com">
                <fileset dir="src/test/java/com" includes="**/*.java"/>
            </copy>
            
            <if>
                <equals arg1="@{fullSource}" arg2="true"/>
                <then>
                    <!-- full-source it and verify everything works -->
                    <maven dir="${test.dir}/@{name}" command="appfuse:full-source"/>
                    <maven dir="${test.dir}/@{name}" command="test -Dsurefire.useFile=false"/>
                </then>
            </if>
            
            <changeDaoFramework name="@{name}" daoFramework="@{daoFramework}" hibernate3Config="@{hibernate3Config}"/>

            <!-- test with generic core -->
            <maven dir="${test.dir}/@{name}" command="appfuse:gen -Dentity=Person -e"/>
            <maven dir="${test.dir}/@{name}" command="verify -Duser.language=en -Dsurefire.useFile=false"/>
            <maven dir="${test.dir}/@{name}" command="appfuse:remove -Dentity=Person -Dskip.areyousure=true"/>
            
            <!-- test w/o generic core -->
            <maven dir="${test.dir}/@{name}" command="appfuse:gen -Dentity=Person -Damp.genericCore=false"/>
            <maven dir="${test.dir}/@{name}" command="verify -Duser.language=en -Dsurefire.useFile=false"/>
        </sequential>
    </macrodef>
    
    <macrodef name="changeDaoFramework">
        <attribute name="name"/>
        <attribute name="daoFramework"/>
        <attribute name="hibernate3Config" default="annotationconfiguration"/>
        
        <sequential>
            <!-- Change dao.framework property -->
            <replace file="${test.dir}/@{name}/pom.xml">
                <replacetoken><![CDATA[<dao.framework>hibernate</dao.framework>]]></replacetoken>
                <replacevalue><![CDATA[<dao.framework>@{daoFramework}</dao.framework>]]></replacevalue>
            </replace>

            <!-- Change hibernate3 plugin to use jpaconfiguration configuration -->
            <replace file="${test.dir}/@{name}/pom.xml" token="annotationconfiguration" value="@{hibernate3Config}"/>

            <!-- Remove hibernate.cfg.xml if jpaconfiguration -->
            <if>
                <equals arg1="@{hibernate3Config}" arg2="jpaconfiguration"/>
                <then>
                    <delete file="${test.dir}/@{name}/src/main/resources/hibernate.cfg.xml"/>
                </then>
            </if>
        </sequential>
    </macrodef>

    <target name="test-gen-model" description="Tests generating POJO (and UI) from a database table">
        <property name="name" value="basic-tapestry-model"/>
        <delete dir="${test.dir}/${name}"/>
        <mkdir dir="${test.dir}"/>

        <maven dir="${test.dir}" archetype="appfuse-basic-tapestry-archetype" version="${version}" name="${name}"/>
        <!-- Create database table -->
        <sql driver="com.mysql.jdbc.Driver" url="jdbc:mysql://localhost/basic_tapestry_model?createDatabaseIfNotExist=true&amp;useUnicode=true&amp;characterEncoding=utf-8"
            userid="root" password="">
            <classpath>
                <fileset dir="${user.home}/.m2/repository/mysql/mysql-connector-java/5.1.14" includes="*.jar"/>
            </classpath>
            <![CDATA[
                DROP TABLE IF EXISTS cat;
                CREATE TABLE cat (
                  cat_id int(8) auto_increment,
                  color varchar(50) NOT NULL,
                  name varchar(50) NOT NULL,
                  PRIMARY KEY (cat_id)
                );
            ]]>
        </sql>
        <maven dir="${test.dir}/${name}" command="appfuse:gen-model"/>
        <maven dir="${test.dir}/${name}" command="appfuse:gen -Dentity=Cat"/>
        <maven dir="${test.dir}/${name}" command="verify -Duser.language=en -Dsurefire.useFile=false"/>
    </target>
</project>
<?xml version="1.0"?>
<project name="appfuse-light" basedir="." default="help" xmlns:artifact="urn:maven-artifact-ant">
    <property name="src.dir" value="src/main/java"/>
    <property name="resources.dir" value="src/main/resources"/>
    <property name="web.dir" value="src/main/webapp"/>
    <property name="test.src" value="src/test/java"/>
    <property name="test.resources.dir" value="src/test/resources"/>
    <property name="dist.dir" value="dist"/>
    <property name="build.dir" value="target"/>
    <property name="test.dir" value="${build.dir}/test"/>
    
    <property file="build.properties"/>
    <property file="${build.dir}/test-classes/jdbc.properties"/>
    
    <property name="webapp.name" value="appfuse-light"/>
    <property name="webapp.version" value="1.0"/>

    <property environment="env"/>
    <property name="cargo.server" value="tomcat5x"/>
    <property name="server.home" value="${env.CATALINA_HOME}"/>
    <property name="deploy.dir" value="${server.home}/webapps"/>

    <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant">
        <classpath>
            <pathelement location="${basedir}/lib/maven-ant-tasks-2.0.9.jar"/>
        </classpath>
    </typedef>
    
    <artifact:pom file="pom.xml" id="maven.project"/>

    <artifact:dependencies pathId="compile.classpath" filesetId="compile.fileset" useScope="compile">
        <pom refid="maven.project"/>
    </artifact:dependencies>
    
    <artifact:dependencies pathId="test.classpath" filesetId="test.fileset" useScope="test">
        <pom refid="maven.project"/>
    </artifact:dependencies>
    
    <artifact:dependencies pathId="runtime.classpath" filesetId="runtime.fileset" useScope="runtime">
        <pom refid="maven.project"/>
    </artifact:dependencies>

    <target name="help">
        <echo message=""/>
        <echo message="${webapp.name} build file"/>
        <echo message="-----------------------------------"/>
        <echo message=""/>
        <echo message="Available targets are:"/>
        <echo message=""/>
        <echo message="compile      --> Compile all Java files"/>
        <echo message="test         --> Runs JUnit tests"/>
        <echo message="test-web     --> Runs jWebUnit tests in a running container"/>
        <echo message="test-tomcat  --> Starts Tomcat to run jWebUnit tests"/>
        <echo message="test-all     --> Runs all JUnit and jWebUnit tests"/>
        <echo message=""/>
        <echo message="war          --> Package as WAR file"/>
        <echo message="deploy       --> Deploy application as directory"/>
        <echo message="undeploy     --> Deletes application from server"/>
        <echo message="deploywar    --> Deploy application as a WAR file"/>
        <echo message=""/>
        <echo message="clean        --> Deletes compiled classes and WAR"/>
        <echo message="new          --> Creates a new project"/>
    </target>
        
    <target name="compile" description="Compile main source tree java files">
        <mkdir dir="${build.dir}/classes"/>
        <javac destdir="${build.dir}/classes" debug="true" optimize="false"
            deprecation="false" failonerror="true" source="1.5" target="1.5">
            <src path="${src.dir}"/>
            <classpath>
                <path refid="compile.classpath"/>
            </classpath>
        </javac>
        <!-- compile tests -->
        <mkdir dir="${test.dir}/classes"/>
        <javac destdir="${test.dir}/classes" debug="true" optimize="false"
            deprecation="false" failonerror="true" source="1.5" target="1.5">
            <src path="${test.src}"/>
            <classpath>
                <path refid="test.classpath"/>
                <path location="${build.dir}/classes"/>
            </classpath>
        </javac>
        <!-- Copy XML files to ${build.dir}/classes -->
        <copy todir="${build.dir}/classes">
            <fileset dir="${src.dir}" includes="**/*.xml"/>
        </copy>
    </target>

    <target name="test" depends="compile" description="Runs JUnit tests">
        <!-- Check that junit.jar is in $ANT_HOME/lib -->
        <available classname="junit.framework.TestCase" property="junit.present"/>
        <fail unless="junit.present"
            message="Please copy ~/.m2/repository/junit/junit/3.8.2/junit-3.8.2.jar into ${env.ANT_HOME}/lib"/>

        <mkdir dir="${test.dir}/data"/>
        <junit printsummary="no" fork="true" forkmode="once"
            errorProperty="test.failed" failureProperty="test.failed">
            <classpath>
                <path refid="compile.classpath"/>
                <path refid="test.classpath"/>
                <path location="${build.dir}/classes"/>
                <path location="${resources.dir}"/>
                <path location="${test.dir}/classes"/>
                <path location="${test.resources.dir}"/>
                <path location="${web.dir}"/>
            </classpath>
            <formatter type="xml"/>
            <formatter type="brief" usefile="false"/>
            <batchtest todir="${test.dir}/data" if="test">
                <fileset dir="${test.dir}/classes">
                    <include name="**/*${test}*"/>
                    <exclude name="**/*TestCase.class"/>
                    <exclude name="**/*$*.class"/>
                </fileset>
            </batchtest>
            <batchtest todir="${test.dir}/data" unless="test">
                <fileset dir="${test.dir}/classes">
                    <include name="**/*Test.class*"/>
                    <exclude name="**/*WebTest.class"/>
                </fileset>
            </batchtest>
        </junit>

        <fail if="test.failed">
          Unit tests failed. For error messages, check the log files in
          ${test.dir}/data or run "ant test-reports"
          to generate reports at ${test.dir}/reports.</fail>
    </target>

    <target name="test-web" depends="compile"
        description="Runs jWebUnit tests in a running server">
        <property name="test" value="WebTest"/>
        <antcall target="test"/>
    </target>

    <target name="test-tomcat" depends="war"
        description="Starts Tomcat, runs jWebUnit tests, stops Tomcat">

        <property name="cargo.wait" value="false"/>
        <taskdef resource="cargo.tasks" classpathref="test.classpath"/>

        <cargo containerId="${cargo.server}" id="cargo.server" home="${server.home}" 
            action="start" wait="${cargo.wait}">
            <configuration>
                <deployable type="war" file="${basedir}/${dist.dir}/${webapp.name}.war">
                    <property name="context" value="ROOT"/>
                </deployable>
            </configuration>
        </cargo>

        <antcall target="test-web"/>

        <cargo refid="cargo.server" action="stop"/>
    </target>

    <!-- <target name="test-all" depends="clear,test,test-tomcat", clear not needed with H2 -->
    <target name="test-all" depends="test,test-tomcat"
        description="Runs JUnit tests and starts Tomcat to run jWebUnit tests"/>
        
    <target name="test-reports" description="Generate test reports">
        <mkdir dir="${test.dir}/reports"/>
        <junitreport todir="${test.dir}">
            <fileset dir="${test.dir}/data">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${test.dir}/reports"/>
        </junitreport>
    </target>
    
    <target name="copy-jars" description="Copies JARs from local repository">
        <mkdir dir="${build.dir}/jars"/>
        <copy todir="${build.dir}/jars">
            <fileset refid="compile.fileset"/>
            <fileset refid="runtime.fileset"/>
            <mapper type="flatten"/>
        </copy>
        <delete>
            <fileset dir="${build.dir}/jars" includes="servlet-api*"/>
        </delete>
    </target>
    
    <target name="war" depends="compile,copy-jars" description="Packages app as WAR">
        <mkdir dir="${dist.dir}"/>
        <war destfile="${dist.dir}/${webapp.name}.war"
            webxml="${web.dir}/WEB-INF/web.xml" compress="true">
            <classes dir="${build.dir}/classes"/>
            <classes dir="${resources.dir}"/>
            <fileset dir="${web.dir}" excludes="**/web.xml"/>
            <zipfileset prefix="WEB-INF/lib" dir="${build.dir}/jars"/>
        </war>
    </target>

    <target name="deploy" depends="compile,copy-jars" description="Deploy application">
        <copy todir="${deploy.dir}/${webapp.name}" preservelastmodified="true">
            <fileset dir="${web.dir}"/>
        </copy>
        <copy todir="${deploy.dir}/${webapp.name}/WEB-INF/classes" preservelastmodified="true">
            <fileset dir="${build.dir}/classes"/>
            <fileset dir="${resources.dir}"/>
        </copy>
        <copy todir="${deploy.dir}/${webapp.name}/WEB-INF/lib">
            <fileset dir="${build.dir}/jars"/>
        </copy>
    </target>

    <target name="undeploy" description="Deletes application from server">
        <delete dir="${deploy.dir}/${webapp.name}"/>
    </target>
    
    <target name="deploywar" depends="war" description="Deploy application as a WAR file">
        <copy todir="${deploy.dir}" preservelastmodified="true"
            file="${dist.dir}/${webapp.name}.war"/>
    </target>

    <target name="clean" description="Clean output directories">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>
    
    <!-- Creates release (source) distribution -->
    <target name="dist" depends="clean"
        description="create zip and tar.gz of ${webapp.name} for distribution">
        <property name="archive.name" value="${webapp.name}-${webapp.version}"/>
        <mkdir dir="${dist.dir}"/>
        <property name="archive.target" value="${dist.dir}/${archive.name}"/>
        <zip zipfile="${archive.target}.zip">
            <zipfileset prefix="${webapp.name}-${webapp.version}" dir="${basedir}">
                <patternset id="srcfiles">
                    <exclude name="*.log"/>
                    <exclude name="**/*.log"/>
                    <exclude name="*.i*"/>
                    <exclude name=".classpath"/>
                    <exclude name=".project"/>
                    <exclude name="junit*.properties"/>
                    <exclude name="**/*~"/>
                    <exclude name="**/*.bak"/>
                    <exclude name="*/**.java.txt"/>
                    <exclude name="${build.dir}/**"/>
                    <exclude name="${dist.dir}/**"/>
                    <exclude name="**/${build.dir}/**"/>
                    <exclude name="db/**"/>   
                    <exclude name="sandbox/**"/>
                    <exclude name="www/**"/>
                    <exclude name="*.sh"/>
                    <exclude name=".#*"/> 
                    <exclude name="**/.#*"/>
                    <exclude name="test-all*"/>
                    <exclude name="release.*"/>
                    <include name="**"/>
                </patternset>
            </zipfileset>
        </zip>
        <tar tarfile="${archive.target}.tar">
            <tarfileset dir="${basedir}" mode="644"
                prefix="${webapp.name}"
                username="ant" group="ant">
                <patternset refid="srcfiles"/>
            </tarfileset>
        </tar>
        <gzip zipfile="${archive.target}.tar.gz" src="${archive.target}.tar"/>
        <delete file="${archive.target}.tar"/>
    </target>

    <!-- populate the database -->
    <target name="populate" description="Loads sample data into database">
        <echo message="Loading sample data..."/>
        <sql driver="${jdbc.driverClassName}" url="${jdbc.url}"
            userid="${jdbc.username}" password="${jdbc.password}">
            <classpath refid="compile.classpath"/>
            <![CDATA[ 
                INSERT INTO app_user (id, first_name, last_name) 
                    values (5, 'Abbie', 'Raible');
                INSERT INTO app_user (id, first_name, last_name) 
                    values (6, 'Jack', 'Raible');
            ]]>
        </sql>
    </target>

    <!-- clear the database -->
    <target name="clear" description="Deletes data from database">
        <echo message="Deleting data from database..."/>
        <sql driver="${jdbc.driverClassName}" url="${jdbc.url}"
            userid="${jdbc.username}" password="${jdbc.password}">
            <classpath refid="compile.classpath"/>
            <![CDATA[ 
                DELETE FROM app_user;
            ]]>
        </sql>
    </target>

    <!-- Create a new project using this one as a template -->
    <target name="new" depends="clean" description="creates a new project with the specified name">
        <!-- Prompt user for input -->
        <input message="What would you like to name your application [myapp]?" 
            addproperty="app.name" defaultvalue="myapp"/>
        <echo level="info">Creating new application named '${app.name}'...</echo>
        <copy todir="../${app.name}">
            <fileset dir="${basedir}">
                <exclude name="${dist.dir}/**"/>
                <exclude name="db/**"/>
                <exclude name="sandbox/**"/>
                <exclude name="${webapp.name}*"/>
                <exclude name="*.log"/>
                <exclude name="java-net.xml"/>
                <exclude name="**/.#**"/>
                <exclude name="*.sh"/>
                <exclude name="www/**"/>
                <include name="**"/>
            </fileset>
        </copy>

        <!-- Replace current app.name with new app.name -->
        <replaceregexp flags="g">
            <regexp pattern="appfuse-light"/>
            <substitution expression="${app.name}"/>
            <fileset dir="../${app.name}">
                <include name="build.xml"/>
                <include name="pom.xml"/>
                <include name="**/*WebTest.java"/>
            </fileset>
        </replaceregexp>
    </target>
    
    <!-- Fix carriage-return line feeds for installers -->
    <target name="fixcrlf" description="Fixed CR/LF problems for installers">
        <echo>Running fixcrlf....</echo>
        <fixcrlf eol="lf" srcdir="${basedir}"
            includes="**/*.sh,
                      **/*.properties,
                      **/*.sql,
                      **/*.java,
                      **/*.jsp,
                      **/*.ftl,
                      **/*.vm,
                      **/*.xml,
                      **/*.page,
                      **/*.html"/>
    </target>
           
    <target name="beandoc" description="Generate beandoc reports">
        <artifact:dependencies pathId="beandoc.classpath">
            <dependency groupId="org.springframework" artifactId="beandoc" version="0.7.0"/>
        </artifact:dependencies>

        <taskdef name="beandoc" classname="org.springframework.beandoc.client.AntTask">
            <classpath refid="beandoc.classpath"/>
        </taskdef>
        
        <mkdir dir="${build.dir}/beandoc"/>
        <beandoc outputDir="${build.dir}/beandoc">
            <fileset dir="${web.dir}/WEB-INF">
                <include name="*-servlet.xml"/>
                <include name="applicationContext*.xml"/>
            </fileset>
        </beandoc>
        
        <!-- To add graphs to the reports, download/install GraphViz from graphviz.org. -->
        <!-- 1. create a beandoc.properties and add the following line to it:           -->
        <!--    compiler.dotExe=C:/Program Files/ATT/GraphViz/bin/dot.exe               -->
        <!-- 2. Add beandocProps="beandoc.properties" to the <beandoc> task.            -->
    </target>
</project>
