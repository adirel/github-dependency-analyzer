description = 'Spring Integration Kafka Sample'

buildscript {
	repositories {
		mavenCentral()
		//mavenLocal()
		maven { url 'https://repo.spring.io/simple/ext-release-local' }
	}
	dependencies {
			classpath 'org.apache.maven:maven-artifact:2.2.1' // 3.x won't work
			classpath 'org.apache.avro:avro-compiler:1.7.3' // use Avro 1.7.4 to compile the Avro files
			//classpath 'org.clojars.miguno:avro-gradle-plugin:1.7.2'
			classpath "org.apache.avro:avro-gradle-plugin:1.7.2"
	}
}

apply plugin: 'base'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'avro-gradle-plugin'

ext {
	avroTaskGroup = "Avro"
	avroSource = "schemas"
	avroDest = "target/generated-avro-sources/main/java"
}

repositories {
	maven {
		url 'https://repository.apache.org/content/groups/public'
	}
	maven { url 'https://repo.springsource.org/libs-milestone' }
	mavenLocal()
}

dependencies {
	compile([
		"org.apache.avro:avro:1.7.3",
		"org.apache.avro:avro-compiler:1.7.3"
	])
	compile "org.springframework:spring-beans:3.1.3.RELEASE"
	compile "org.springframework:spring-context:3.1.3.RELEASE"
	compile "org.springframework:spring-expression:3.1.3.RELEASE"
	compile "org.springframework.integration:spring-integration-stream:2.2.0.RELEASE"
	compile("org.springframework.integration:spring-integration-kafka:0.5.0.BUILD-SNAPSHOT") {
		exclude module: 'log4j'
		exclude module: 'jms'
		exclude module: 'jmxtools'
		exclude module: 'jmxri'
	}
	compile("log4j:log4j:1.2.15") {
		exclude module: 'mail'
		exclude module: 'jms'
		exclude module: 'jmx'
		exclude module: 'jmxtools'
		exclude module: 'jmxri'
	}
	compile "commons-logging:commons-logging:1.1.1"
}

compileAvro.group = avroTaskGroup
compileAvro.description = "Generates Java code from avro schema"
compileAvro.source = avroSource
compileAvro.destinationDir = file(avroDest)

task cleanAvro(type: Delete) {
	group = avroTaskGroup
	description = "deletes generated avro code"
	delete avroDest
}

compileJava.dependsOn compileAvro

sourceSets {
	main {
		java {
			srcDir avroDest
		}
		resources {
			srcDir avroSource
		}
	}
}

task wrapper(type: Wrapper) {
	description = 'Generates gradlew[.bat] scripts'
	gradleVersion = '1.8'
}

eclipse {
	project {
		name = "spring-integration-kafka-sample"
	}
}

defaultTasks 'clean', 'build'
description = 'Spring Integration Splunk Sample'
apply plugin: 'base'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'

repositories {
	mavenLocal()
	maven { url "http://repo.springsource.org/libs-snapshot" }
}

dependencies {
	compile "org.springframework.integration:spring-integration-splunk:$springIntegrationSplunkVersion"
	compile "org.springframework.integration:spring-integration-jdbc:$springIntegrationVersion"
	compile "org.springframework:spring-jdbc:$springVersion"
	compile "org.apache.derby:derby:$derbyVersion"
}

task wrapper(type: Wrapper) {
	description = 'Generates gradlew[.bat] scripts'
	gradleVersion = '1.2'
}

eclipse {
	project {
		name = "spring-integration-splunk-sample"
	}
}

defaultTasks 'clean', 'build'
description = 'Spring Integration AWS Support'

buildscript {
	repositories {
		maven { url 'https://repo.springsource.org/plugins-snapshot' }
	}
}

apply plugin: 'java'
apply from:   "${rootProject.projectDir}/publish-maven.gradle"
apply plugin: 'eclipse'
apply plugin: 'idea'

group = 'org.springframework.integration'

repositories {
	maven { url 'http://repo.springsource.org/libs-milestone' }
	maven { url 'http://repo.springsource.org/plugins-release' }
}

sourceCompatibility=1.6
targetCompatibility=1.6

// See http://www.gradle.org/docs/current/userguide/dependency_management.html#sub:configurations
// and http://www.gradle.org/docs/current/dsl/org.gradle.api.artifacts.ConfigurationContainer.html
configurations {
	jacoco //Configuration Group used by Sonar to provide Code Coverage using JaCoCo
}

ext {
	apacheHttpclientVersion='4.1.1'
	awsSdkVersion='1.3.32'
	commonsCodecVersion='1.5'
	commonsIoVersion='2.0.1'
	javaMailVersion='1.4.4'
	jacksonVersion='1.9.11'
	junitVersion='4.11'
	log4jVersion = '1.2.12'
	mockitoVersion='1.9.0'
	springIntegrationVersion = '2.2.2.RELEASE'
	springVersion = '3.1.4.RELEASE'

	idPrefix = 'aws'

	linkHomepage = 'https://github.com/SpringSource/spring-integration-extensions'
	linkCi       = 'https://build.springsource.org/browse/INTEXT'
	linkIssue    = 'https://jira.springsource.org/browse/INTEXT'
	linkScmUrl           = 'https://github.com/SpringSource/spring-integration-extensions'
	linkScmConnection    = 'https://github.com/SpringSource/spring-integration-extensions.git'
	linkScmDevConnection = 'git@github.com:SpringSource/spring-integration-extensions.git'
}

ext.javadocLinks = [
	"http://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/"
] as String[]


dependencies {

	compile "org.springframework.integration:spring-integration-core:$springIntegrationVersion"
	compile "com.amazonaws:aws-java-sdk:$awsSdkVersion"
	compile "commons-codec:commons-codec:$commonsCodecVersion"
	compile "commons-io:commons-io:$commonsIoVersion"
	compile "org.codehaus.jackson:jackson-core-asl:$jacksonVersion"
	compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"
	compile "org.apache.httpcomponents:httpclient:$apacheHttpclientVersion"
	compile "org.apache.httpcomponents:httpcore:$apacheHttpclientVersion"

	//Amazon SES Support
	compile ("org.springframework.integration:spring-integration-mail:$springIntegrationVersion", optional)
	compile ("javax.mail:mail:$javaMailVersion", optional)

	testCompile "org.springframework.integration:spring-integration-test:$springIntegrationVersion"
	testCompile "org.hamcrest:hamcrest-all:1.1"
	testCompile "junit:junit-dep:$junitVersion"
	testCompile "org.mockito:mockito-all:$mockitoVersion"
	testCompile "org.springframework:spring-test:$springVersion"
	testCompile "log4j:log4j:$log4jVersion"

	jacoco group: "org.jacoco", name: "org.jacoco.agent", version: "0.6.2.201302030002", classifier: "runtime"

}

eclipse {
	project {
		natures += 'org.springframework.ide.eclipse.core.springnature'
	}
}

javadoc {
	group = 'Documentation'
	description = 'Generates the Javadoc API documentation.'
	title = "${rootProject.description} ${version} API"

	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = project.description
	options.overview = 'src/api/overview.html'
	options.stylesheetFile = file("src/api/stylesheet.css")
	options.splitIndex = true
	options.links(project.ext.javadocLinks)

	source = sourceSets.main.allJava
	classpath = project.sourceSets.main.compileClasspath
	destinationDir = new File(buildDir, "api")

	// suppress warnings due to cross-module @see and @link references;
	// note that global 'api' task does display all warnings.
	logging.captureStandardError LogLevel.INFO
	logging.captureStandardOutput LogLevel.INFO // suppress "## warnings" message
}

sourceSets {
	test {
		resources {
			srcDirs = ['src/test/resources', 'src/test/java']
		}
	}
}

// enable all compiler warnings; individual projects may customize further
ext.xLintArg = '-Xlint:all'
[compileJava, compileTestJava]*.options*.compilerArgs = [xLintArg]

test {
	// suppress all console output during testing unless running `gradle -i`
	logging.captureStandardOutput(LogLevel.INFO)
	jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec,includes=*"
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

apply plugin: 'sonar-runner'

sonarRunner {
	sonarProperties {
		property "sonar.jacoco.reportPath", "${buildDir.name}/jacoco.exec"
		property "sonar.links.homepage", linkHomepage
		property "sonar.links.ci", linkCi
		property "sonar.links.issue", linkIssue
		property "sonar.links.scm", linkScmUrl
		property "sonar.links.scm_dev", linkScmDevConnection
		property "sonar.java.coveragePlugin", "jacoco"
	}
}

task schemaZip(type: Zip) {
	group = 'Distribution'
	classifier = 'schema'
	description = "Builds -${classifier} archive containing all " +
		"XSDs for deployment at static.springframework.org/schema."

	def Properties schemas = new Properties();
	def shortName = idPrefix.replaceFirst("${idPrefix}-", '')

	project.sourceSets.main.resources.find {
		it.path.endsWith('META-INF/spring.schemas')
	}?.withInputStream { schemas.load(it) }

	for (def key : schemas.keySet()) {
		File xsdFile = project.sourceSets.main.resources.find {
			it.path.endsWith(schemas.get(key))
		}
		assert xsdFile != null
		into ("integration/${shortName}") {
			from xsdFile.path
		}
	}

}

task docsZip(type: Zip) {
		group = 'Distribution'
		classifier = 'docs'
		description = "Builds -${classifier} archive containing the JavaDoc api " +
			"for deployment at static.springframework.org/spring-integration/docs."

		from('.') {
			include 'README.md'
		}

		from (javadoc) {
			into 'api'
		}

}

task distZip(type: Zip, dependsOn: [docsZip, schemaZip]) {
	group = 'Distribution'
	classifier = 'dist'
	description = "Builds -${classifier} archive, containing all jars and docs, " +
		"suitable for community download page."

	ext.baseDir = "${project.name}-${project.version}";

	from('src/dist') {
		include 'license.txt'
		include 'notice.txt'
		into "${baseDir}"
	}

	from('.') {
		include 'README.md'
		into "${baseDir}"
	}

	from(zipTree(schemaZip.archivePath)) {
		into "${baseDir}/schema"
	}

	into ("${baseDir}/libs") {
		from project.jar
		from project.sourcesJar
		from project.javadocJar
	}
}

// Create an optional "with dependencies" distribution.
// Not published by default; only for use when building from source.
task depsZip(type: Zip, dependsOn: distZip) { zipTask ->
	group = 'Distribution'
	classifier = 'dist-with-deps'
	description = "Builds -${classifier} archive, containing everything " +
		"in the -${distZip.classifier} archive plus all dependencies."

	from zipTree(distZip.archivePath)

	gradle.taskGraph.whenReady { taskGraph ->
		if (taskGraph.hasTask(":${zipTask.name}")) {
			def projectName = rootProject.name
			def artifacts = new HashSet()

			rootProject.configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
				def dependency = artifact.moduleVersion.id
				if (!projectName.equals(dependency.name)) {
					artifacts << artifact.file
				}
			}

			zipTask.from(artifacts) {
				into "${distZip.baseDir}/deps"
			}
		}
	}
}

artifacts {
	archives distZip
	archives docsZip
	archives schemaZip
}

task dist(dependsOn: assemble) {
	group = 'Distribution'
	description = 'Builds -dist, -docs and -schema distribution archives.'
}

task wrapper(type: Wrapper) {
	description = 'Generates gradlew[.bat] scripts'
	gradleVersion = '1.6'
}
description = 'Spring Integration IP Extensions'

buildscript {
	repositories {
		maven { url 'https://repo.springsource.org/plugins-snapshot' }
	}
	dependencies {
		classpath 'org.springframework.build.gradle:docbook-reference-plugin:0.1.5'
	}
}

apply plugin: 'java'
apply from:   "${rootProject.projectDir}/publish-maven.gradle"
apply plugin: 'eclipse'
apply plugin: 'idea'

group = 'org.springintegration.ip.extensions'

repositories {
	maven { url 'http://repo.springsource.org/libs-milestone' }
	maven { url 'http://repo.springsource.org/plugins-release' } // for bundlor
}

sourceCompatibility=1.6
targetCompatibility=1.6

ext {
	aspectjVersion = '1.6.8'
	cglibVersion = '2.2'
	commonsNetVersion = '3.0.1'
	javaxActivationVersion = '1.1.1'
	junitVersion = '4.10'
	log4jVersion = '1.2.12'
	mockitoVersion = '1.9.0'
	springVersion = '3.1.3.RELEASE'
	springIntegrationVersion = '3.0.0.M1'
	
	linkHomepage = 'https://github.com/SpringSource/spring-integration-extensions'
	linkCi       = 'https://build.springsource.org/browse/INTEXT'
	linkIssue    = 'https://jira.springsource.org/browse/INTEXT'
	linkScmUrl           = 'https://github.com/SpringSource/spring-integration-extensions'
	linkScmConnection    = 'https://github.com/SpringSource/spring-integration-extensions.git'
	linkScmDevConnection = 'git@github.com:SpringSource/spring-integration-extensions.git'
}

eclipse {
	project {
		natures += 'org.springframework.ide.eclipse.core.springnature'
	}
}

sourceSets {
	test {
		resources {
			srcDirs = ['src/test/resources', 'src/test/java']
		}
	}
}

// See http://www.gradle.org/docs/current/userguide/dependency_management.html#sub:configurations
// and http://www.gradle.org/docs/current/dsl/org.gradle.api.artifacts.ConfigurationContainer.html
configurations {
	jacoco //Configuration Group used by Sonar to provide Code Coverage using JaCoCo
}

dependencies {
	compile "org.springframework.integration:spring-integration-ip:$springIntegrationVersion"
	compile "commons-codec:commons-codec:1.5"
	testCompile "org.springframework.integration:spring-integration-test:$springIntegrationVersion"
	testCompile "junit:junit-dep:$junitVersion"
	testCompile "log4j:log4j:$log4jVersion"
	testCompile "org.mockito:mockito-all:$mockitoVersion"
	testCompile "org.springframework:spring-test:$springVersion"
	jacoco group: "org.jacoco", name: "org.jacoco.agent", version: "0.5.6.201201232323", classifier: "runtime"
}

// enable all compiler warnings; individual projects may customize further
ext.xLintArg = '-Xlint:all'
[compileJava, compileTestJava]*.options*.compilerArgs = [xLintArg]

test {
	// suppress all console output during testing unless running `gradle -i`
	logging.captureStandardOutput(LogLevel.INFO)
	jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec,includes=*"
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

apply plugin: 'sonar-runner'

sonarRunner {
	sonarProperties {
		property "sonar.jacoco.reportPath", "${buildDir.name}/jacoco.exec"
		property "sonar.links.homepage", linkHomepage
		property "sonar.links.ci", linkCi
		property "sonar.links.issue", linkIssue
		property "sonar.links.scm", linkScmUrl
		property "sonar.links.scm_dev", linkScmDevConnection
		property "sonar.java.coveragePlugin", "jacoco"
	}
}

task api(type: Javadoc) {
	group = 'Documentation'
	description = 'Generates aggregated Javadoc API documentation.'
	title = "${rootProject.description} ${version} API"
	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = rootProject.description
	options.overview = 'src/api/overview.html'

	source = sourceSets.main.allJava
	classpath = project.sourceSets.main.compileClasspath
	destinationDir = new File(buildDir, "api")
}

task docsZip(type: Zip) {
	group = 'Distribution'
	classifier = 'docs'
	description = "Builds -${classifier} archive containing api and reference " +
		"for deployment at static.springframework.org/spring-integration/docs."

	from (api) {
		into 'api'
	}

}

task distZip(type: Zip, dependsOn: [docsZip]) {
	group = 'Distribution'
	classifier = 'dist'
	description = "Builds -${classifier} archive, containing all jars and docs, " +
		"suitable for community download page."

	ext.baseDir = "${project.name}-${project.version}";

	from('src/dist') {
		include 'readme.txt'
		include 'license.txt'
		include 'notice.txt'
		into "${baseDir}"
	}

	from(zipTree(docsZip.archivePath)) {
		into "${baseDir}/docs"
	}

	into ("${baseDir}/libs") {
		from project.jar
		from project.sourcesJar
		from project.javadocJar
	}
}

// Create an optional "with dependencies" distribution.
// Not published by default; only for use when building from source.
task depsZip(type: Zip, dependsOn: distZip) { zipTask ->
	group = 'Distribution'
	classifier = 'dist-with-deps'
	description = "Builds -${classifier} archive, containing everything " +
		"in the -${distZip.classifier} archive plus all dependencies."

	from zipTree(distZip.archivePath)

	gradle.taskGraph.whenReady { taskGraph ->
		if (taskGraph.hasTask(":${zipTask.name}")) {
			def projectName = rootProject.name
			def artifacts = new HashSet()

			rootProject.configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
				def dependency = artifact.moduleVersion.id
				if (!projectName.equals(dependency.name)) {
					artifacts << artifact.file
				}
			}

			zipTask.from(artifacts) {
				into "${distZip.baseDir}/deps"
			}
		}
	}
}

artifacts {
	archives distZip
	archives docsZip
}

task dist(dependsOn: assemble) {
	group = 'Distribution'
	description = 'Builds -dist, -docs and -schema distribution archives.'
}

task wrapper(type: Wrapper) {
	description = 'Generates gradlew[.bat] scripts'
	gradleVersion = '1.6'
}
description = 'Spring Integration Java DSL'

apply plugin: 'java'
apply from: "${rootProject.projectDir}/publish-maven.gradle"
apply plugin: 'eclipse'
apply plugin: 'idea'

group = 'org.springframework.integration'

repositories {
//	mavenLocal()
	if (version.endsWith('BUILD-SNAPSHOT')) {
		maven { url 'http://repo.spring.io/libs-snapshot' }
	}
	maven { url 'http://repo.spring.io/libs-milestone' }
}

compileJava {
	sourceCompatibility = 1.6
}

compileTestJava {
	sourceCompatibility = 1.8
}

ext {
	springIntegrationVersion = '4.0.0.BUILD-SNAPSHOT'
	log4jVersion = '1.2.17'

	linkHomepage = 'https://github.com/spring-projects/spring-integration-extensions'
	linkCi = 'https://build.springsource.org/browse/INTEXT'
	linkIssue = 'https://jira.springsource.org/browse/INTEXT'
	linkScmUrl = 'https://github.com/spring-projects/spring-integration-extensions'
	linkScmConnection = 'https://github.com/spring-projects/spring-integration-extensions.git'
	linkScmDevConnection = 'git@github.com:spring-projects/spring-integration-extensions.git'
}

eclipse.project.natures += 'org.springframework.ide.eclipse.core.springnature'

// See http://www.gradle.org/docs/current/userguide/dependency_management.html#sub:configurations
// and http://www.gradle.org/docs/current/dsl/org.gradle.api.artifacts.ConfigurationContainer.html
configurations {
	jacoco //Configuration Group used by Sonar to provide Code Coverage using JaCoCo
}

dependencies {
	compile "org.springframework.integration:spring-integration-core:$springIntegrationVersion"

	testCompile "log4j:log4j:$log4jVersion"
	testCompile "org.springframework.integration:spring-integration-test:$springIntegrationVersion"
	testCompile "org.springframework.integration:spring-integration-event:$springIntegrationVersion"
	testCompile "org.springframework.integration:spring-integration-file:$springIntegrationVersion"
	testCompile "org.springframework.integration:spring-integration-xml:$springIntegrationVersion"

	jacoco group: "org.jacoco", name: "org.jacoco.agent", version: "0.5.6.201201232323", classifier: "runtime"
}

// enable all compiler warnings; individual projects may customize further
[compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:all,-options']

test {
	// suppress all console output during testing unless running `gradle -i`
	logging.captureStandardOutput(LogLevel.INFO)
	jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec,includes=*"
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

apply plugin: 'sonar-runner'

sonarRunner {
	sonarProperties {
		property "sonar.jacoco.reportPath", "${buildDir.name}/jacoco.exec"
		property "sonar.links.homepage", linkHomepage
		property "sonar.links.ci", linkCi
		property "sonar.links.issue", linkIssue
		property "sonar.links.scm", linkScmUrl
		property "sonar.links.scm_dev", linkScmDevConnection
		property "sonar.java.coveragePlugin", "jacoco"
	}
}

task api(type: Javadoc) {
	group = 'Documentation'
	description = 'Generates the Javadoc API documentation.'
	title = "${rootProject.description} ${version} API"
	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = rootProject.description
	options.overview = 'src/api/overview.html'

	source = sourceSets.main.allJava
	classpath = project.sourceSets.main.compileClasspath
	destinationDir = new File(buildDir, "api")
}

task docsZip(type: Zip) {
	group = 'Distribution'
	classifier = 'docs'
	description = "Builds -${classifier} archive containing the api " +
			"for deployment at static.springframework.org/spring-integration/docs."

	from(api) {
		into 'api'
	}
}

task distZip(type: Zip, dependsOn: docsZip) {
	group = 'Distribution'
	classifier = 'dist'
	description = "Builds -${classifier} archive, containing all jars and docs, " +
			"suitable for community download page."

	ext.baseDir = "${project.name}-${project.version}";

	from('src/dist') {
		include 'license.txt'
		include 'notice.txt'
		into "${baseDir}"
	}

	from(zipTree(docsZip.archivePath)) {
		into "${baseDir}/docs"
	}

	into("${baseDir}/libs") {
		from project.jar
		from project.sourcesJar
		from project.javadocJar
	}
}

// Create an optional "with dependencies" distribution.
// Not published by default; only for use when building from source.
task depsZip(type: Zip, dependsOn: distZip) { zipTask ->
	group = 'Distribution'
	classifier = 'dist-with-deps'
	description = "Builds -${classifier} archive, containing everything " +
			"in the -${distZip.classifier} archive plus all dependencies."

	from zipTree(distZip.archivePath)

	gradle.taskGraph.whenReady { taskGraph ->
		if (taskGraph.hasTask(":${zipTask.name}")) {
			def projectName = rootProject.name
			def artifacts = new HashSet()

			rootProject.configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
				def dependency = artifact.moduleVersion.id
				if (!projectName.equals(dependency.name)) {
					artifacts << artifact.file
				}
			}

			zipTask.from(artifacts) {
				into "${distZip.baseDir}/deps"
			}
		}
	}
}

artifacts {
	archives distZip
	archives docsZip
}

task dist(dependsOn: assemble) {
	group = 'Distribution'
	description = 'Builds -dist, -docs and distribution archives.'
}

task wrapper(type: Wrapper) {
	description = 'Generates gradlew[.bat] scripts'
	gradleVersion = '1.11'
	distributionUrl = "http://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}
description = 'Spring Integration JGroups Support'

buildscript {
	repositories {
		maven { url 'https://repo.springsource.org/plugins-snapshot' }
	}
}

apply plugin: 'java'
apply from:   "${rootProject.projectDir}/publish-maven.gradle"
apply plugin: 'eclipse'
apply plugin: 'idea'

group = 'org.springframework.integration'

repositories {
	mavenCentral()
	maven { url 'http://repo.springsource.org/libs-milestone' }
	maven { url 'http://repo.springsource.org/plugins-release' }
}

sourceCompatibility=1.6
targetCompatibility=1.6

// See http://www.gradle.org/docs/current/userguide/dependency_management.html#sub:configurations
// and http://www.gradle.org/docs/current/dsl/org.gradle.api.artifacts.ConfigurationContainer.html
configurations {
	jacoco //Configuration Group used by Sonar to provide Code Coverage using JaCoCo
}

ext {
	junitVersion='4.11'
	log4jVersion = '1.2.12'
	mockitoVersion='1.9.0'
	springIntegrationVersion = '2.2.2.RELEASE'
	springVersion = '3.1.4.RELEASE'

	idPrefix = 'jgroups'
	
	shortName = 'jgroups'

	linkHomepage = 'https://github.com/SpringSource/spring-integration-extensions'
	linkCi       = 'https://build.springsource.org/browse/INTEXT'
	linkIssue    = 'https://jira.springsource.org/browse/INTEXT'
	linkScmUrl           = 'https://github.com/SpringSource/spring-integration-extensions'
	linkScmConnection    = 'https://github.com/SpringSource/spring-integration-extensions.git'
	linkScmDevConnection = 'git@github.com:SpringSource/spring-integration-extensions.git'
	
}

dependencies {

	compile "org.springframework.integration:spring-integration-core:$springIntegrationVersion"
	compile "org.jgroups:jgroups:3.2.8.Final"
	
	testCompile "org.springframework.integration:spring-integration-test:$springIntegrationVersion"
	testCompile "junit:junit:$junitVersion"
	testCompile "pl.pragmatists:JUnitParams:1.0.1"
	testCompile "org.easytesting:fest-assert:1.4"
	testCompile "org.mockito:mockito-all:$mockitoVersion"
	testCompile "org.springframework:spring-test:$springVersion"
	testCompile "log4j:log4j:$log4jVersion"

	jacoco group: "org.jacoco", name: "org.jacoco.agent", version: "0.6.2.201302030002", classifier: "runtime"

}

eclipse {
	project {
		natures += 'org.springframework.ide.eclipse.core.springnature'
	}
}

javadoc {
	group = 'Documentation'
	description = 'Generates the Javadoc API documentation.'
	title = "${rootProject.description} ${version} API"

	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = project.description
	options.overview = 'src/api/overview.html'
	options.stylesheetFile = file("src/api/stylesheet.css")
	options.splitIndex = true

	source = sourceSets.main.allJava
	classpath = project.sourceSets.main.compileClasspath
	destinationDir = new File(buildDir, "api")

	// suppress warnings due to cross-module @see and @link references;
	// note that global 'api' task does display all warnings.
	logging.captureStandardError LogLevel.INFO
	logging.captureStandardOutput LogLevel.INFO // suppress "## warnings" message
}

sourceSets {
	test {
		resources {
			srcDirs = ['src/test/resources', 'src/test/java']
		}
	}
}

// enable all compiler warnings; individual projects may customize further
ext.xLintArg = '-Xlint:all'
[compileJava, compileTestJava]*.options*.compilerArgs = [xLintArg]

test {
	// suppress all console output during testing unless running `gradle -i`
	logging.captureStandardOutput(LogLevel.INFO)
	jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec,includes=*"
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

apply plugin: 'sonar-runner'

sonarRunner {
	sonarProperties {
		property "sonar.jacoco.reportPath", "${buildDir.name}/jacoco.exec"
		property "sonar.links.homepage", linkHomepage
		property "sonar.links.ci", linkCi
		property "sonar.links.issue", linkIssue
		property "sonar.links.scm", linkScmUrl
		property "sonar.links.scm_dev", linkScmDevConnection
		property "sonar.java.coveragePlugin", "jacoco"

	}
}

task schemaZip(type: Zip) {
	group = 'Distribution'
	classifier = 'schema'
	description = "Builds -${classifier} archive containing all " +
		"XSDs for deployment at static.springframework.org/schema."

	def Properties schemas = new Properties();
	def shortName = idPrefix.replaceFirst("${idPrefix}-", '')

	project.sourceSets.main.resources.find {
		it.path.endsWith('META-INF/spring.schemas')
	}?.withInputStream { schemas.load(it) }

	for (def key : schemas.keySet()) {
		File xsdFile = project.sourceSets.main.resources.find {
			it.path.endsWith(schemas.get(key))
		}
		assert xsdFile != null
		into ("integration/${shortName}") {
			from xsdFile.path
		}
	}

}

task docsZip(type: Zip) {
		group = 'Distribution'
		classifier = 'docs'
		description = "Builds -${classifier} archive containing the JavaDoc api " +
			"for deployment at static.springframework.org/spring-integration/docs."

		from('.') {
			include 'README.md'
		}

		from (javadoc) {
			into 'api'
		}

}

task distZip(type: Zip, dependsOn: [docsZip, schemaZip]) {
	group = 'Distribution'
	classifier = 'dist'
	description = "Builds -${classifier} archive, containing all jars and docs, " +
		"suitable for community download page."

	ext.baseDir = "${project.name}-${project.version}";

	from('src/dist') {
		include 'license.txt'
		include 'notice.txt'
		into "${baseDir}"
	}

	from('.') {
		include 'README.md'
		into "${baseDir}"
	}

	from(zipTree(schemaZip.archivePath)) {
		into "${baseDir}/schema"
	}

	into ("${baseDir}/libs") {
		from project.jar
		from project.sourcesJar
		from project.javadocJar
	}
}

// Create an optional "with dependencies" distribution.
// Not published by default; only for use when building from source.
task depsZip(type: Zip, dependsOn: distZip) { zipTask ->
	group = 'Distribution'
	classifier = 'dist-with-deps'
	description = "Builds -${classifier} archive, containing everything " +
		"in the -${distZip.classifier} archive plus all dependencies."

	from zipTree(distZip.archivePath)

	gradle.taskGraph.whenReady { taskGraph ->
		if (taskGraph.hasTask(":${zipTask.name}")) {
			def projectName = rootProject.name
			def artifacts = new HashSet()

			rootProject.configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
				def dependency = artifact.moduleVersion.id
				if (!projectName.equals(dependency.name)) {
					artifacts << artifact.file
				}
			}

			zipTask.from(artifacts) {
				into "${distZip.baseDir}/deps"
			}
		}
	}
}

artifacts {
	archives distZip
	archives docsZip
	archives schemaZip
}

task dist(dependsOn: assemble) {
	group = 'Distribution'
	description = 'Builds -dist, -docs and -schema distribution archives.'
}

task wrapper(type: Wrapper) {
	description = 'Generates gradlew[.bat] scripts'
	gradleVersion = '1.6'
}
description = 'Spring Integration Kafka Support'

buildscript {
	repositories {
		maven { url 'https://repo.springsource.org/plugins-snapshot' }
	}
}

apply plugin: 'java'
apply from:   "${rootProject.projectDir}/publish-maven.gradle"
apply plugin: 'eclipse'
apply plugin: 'idea'

group = 'org.springframework.integration'

repositories {
	maven {
		url 'https://repository.apache.org/content/groups/public'
	}
	maven { url 'https://repo.springsource.org/libs-milestone' }
}

sourceCompatibility=1.6
targetCompatibility=1.6

ext {
	junitVersion = '4.11'
	kafkaVersion = '0.8.0-beta1'
	log4jVersion = '1.2.12'
	mockitoVersion = '1.9.5'
	scalaVersion = '2.9.2'
	springVersion = '3.1.3.RELEASE'
	springIntegrationVersion = '2.2.4.RELEASE'

	idPrefix = 'kafka'

	linkHomepage = 'https://github.com/SpringSource/spring-integration-extensions'
	linkCi       = 'https://build.springsource.org/browse/INTEXT'
	linkIssue    = 'https://jira.springsource.org/browse/INTEXT'
	linkScmUrl           = 'https://github.com/SpringSource/spring-integration-extensions'
	linkScmConnection    = 'https://github.com/SpringSource/spring-integration-extensions.git'
	linkScmDevConnection = 'git@github.com:SpringSource/spring-integration-extensions.git'

}

eclipse {
	project {
		natures += 'org.springframework.ide.eclipse.core.springnature'
	}
}

sourceSets {
	test {
		resources {
			srcDirs = ['src/test/resources', 'src/test/java']
		}
	}
}

// See http://www.gradle.org/docs/current/userguide/dependency_management.html#sub:configurations
// and http://www.gradle.org/docs/current/dsl/org.gradle.api.artifacts.ConfigurationContainer.html
configurations {
	jacoco //Configuration Group used by Sonar to provide Code Coverage using JaCoCo
}

dependencies {
	compile "org.springframework:spring-beans:$springVersion"
	compile "org.springframework:spring-context:$springVersion"
	compile "org.springframework:spring-expression:$springVersion"
	compile "org.springframework.integration:spring-integration-core:$springIntegrationVersion"
	compile "org.apache.avro:avro:1.7.3"
	compile "org.apache.avro:avro-compiler:1.7.3"
	runtime "com.yammer.metrics:metrics-core:2.2.0"
	runtime "com.yammer.metrics:metrics-annotation:2.2.0"

	compile("org.apache.kafka:kafka_$scalaVersion:$kafkaVersion") {
		exclude module: 'jms'
		exclude module: 'jmxtools'
		exclude module: 'jmxri'
	}

	compile "org.scala-lang:scala-library:$scalaVersion"
	compile "org.scala-lang:scala-compiler:$scalaVersion"

	testCompile "org.springframework.integration:spring-integration-test:$springIntegrationVersion"
	testCompile "junit:junit-dep:$junitVersion"
	testCompile("log4j:log4j:$log4jVersion") {
		exclude module: 'jms'
		exclude module: 'jmx'
		exclude module: 'jmxtools'
		exclude module: 'jmxri'
	}

	testCompile "org.mockito:mockito-all:$mockitoVersion"
	testCompile "org.springframework:spring-test:$springVersion"
	testCompile "org.springframework.integration:spring-integration-stream:$springIntegrationVersion"

	jacoco group: "org.jacoco", name: "org.jacoco.agent", version: "0.6.2.201302030002", classifier: "runtime"
}


// enable all compiler warnings; individual projects may customize further
ext.xLintArg = '-Xlint:all'
[compileJava, compileTestJava]*.options*.compilerArgs = [xLintArg]

test {
	// suppress all console output during testing unless running `gradle -i`
	logging.captureStandardOutput(LogLevel.INFO)
	jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec,includes=*"
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

apply plugin: 'sonar-runner'

sonarRunner {
	sonarProperties {
		property "sonar.jacoco.reportPath", "${buildDir.name}/jacoco.exec"
		property "sonar.links.homepage", linkHomepage
		property "sonar.links.ci", linkCi
		property "sonar.links.issue", linkIssue
		property "sonar.links.scm", linkScmUrl
		property "sonar.links.scm_dev", linkScmDevConnection
		property "sonar.java.coveragePlugin", "jacoco"
	}
}

task api(type: Javadoc) {
	group = 'Documentation'
	description = 'Generates the Javadoc API documentation.'
	title = "${rootProject.description} ${version} API"
	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = rootProject.description
	options.overview = 'src/api/overview.html'

	source = sourceSets.main.allJava
	classpath = project.sourceSets.main.compileClasspath
	destinationDir = new File(buildDir, "api")
}

task schemaZip(type: Zip) {
	group = 'Distribution'
	classifier = 'schema'
	description = "Builds -${classifier} archive containing all " +
		"XSDs for deployment at static.springframework.org/schema."

	def Properties schemas = new Properties();
	def shortName = idPrefix.replaceFirst("${idPrefix}-", '')

	project.sourceSets.main.resources.find {
		it.path.endsWith('META-INF/spring.schemas')
	}?.withInputStream { schemas.load(it) }

	for (def key : schemas.keySet()) {
		File xsdFile = project.sourceSets.main.resources.find {
			it.path.endsWith(schemas.get(key))
		}
		assert xsdFile != null
		into ("integration/${shortName}") {
			from xsdFile.path
		}
	}

}

task docsZip(type: Zip) {
	group = 'Distribution'
	classifier = 'docs'
	description = "Builds -${classifier} archive containing api " +
			"for deployment at static.springframework.org/spring-integration/docs."

	from('src/dist') {
		include 'changelog.txt'
	}

	from (api) {
		into 'api'
	}
}

task distZip(type: Zip, dependsOn: [docsZip, schemaZip]) {
	group = 'Distribution'
	classifier = 'dist'
	description = "Builds -${classifier} archive, containing all jars and docs, " +
		"suitable for community download page."

	ext.baseDir = "${project.name}-${project.version}";

	from('src/dist') {
		include 'readme.txt'
		include 'license.txt'
		include 'notice.txt'
		into "${baseDir}"
	}

	from(zipTree(docsZip.archivePath)) {
		into "${baseDir}/docs"
	}

	from(zipTree(schemaZip.archivePath)) {
		into "${baseDir}/schema"
	}

	into ("${baseDir}/libs") {
		from project.jar
		from project.sourcesJar
		from project.javadocJar
	}
}

// Create an optional "with dependencies" distribution.
// Not published by default; only for use when building from source.
task depsZip(type: Zip, dependsOn: distZip) { zipTask ->
	group = 'Distribution'
	classifier = 'dist-with-deps'
	description = "Builds -${classifier} archive, containing everything " +
		"in the -${distZip.classifier} archive plus all dependencies."

	from zipTree(distZip.archivePath)

	gradle.taskGraph.whenReady { taskGraph ->
		if (taskGraph.hasTask(":${zipTask.name}")) {
			def projectName = rootProject.name
			def artifacts = new HashSet()

			rootProject.configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
				def dependency = artifact.moduleVersion.id
				if (!projectName.equals(dependency.name)) {
					artifacts << artifact.file
				}
			}

			zipTask.from(artifacts) {
				into "${distZip.baseDir}/deps"
			}
		}
	}
}

artifacts {
	archives distZip
	archives docsZip
	archives schemaZip
}

task dist(dependsOn: assemble) {
	group = 'Distribution'
	description = 'Builds -dist, -docs and -schema distribution archives.'
}

task wrapper(type: Wrapper) {
	description = 'Generates gradlew[.bat] scripts'
	gradleVersion = '1.6'
}
description = 'Spring Integration MQTT Adapter'

buildscript {
	repositories {
		maven { url 'https://repo.springsource.org/plugins-snapshot' }
	}
}

apply plugin: 'java'
apply from:   "${rootProject.projectDir}/publish-maven.gradle"
apply plugin: 'eclipse'
apply plugin: 'idea'

group = 'org.springframework.integration'

repositories {
	maven { url 'http://repo.springsource.org/snapshot' }
	maven { url 'https://repo.eclipse.org/content/repositories/paho-releases/' }
	maven { url 'http://repo.springsource.org/plugins-release' }
}

sourceCompatibility=1.6
targetCompatibility=1.6

ext {
	junitVersion = '4.11'
	log4jVersion = '1.2.17'
	mockitoVersion = '1.9.5'
	springVersion = '3.2.8.RELEASE'
	springIntegrationVersion = '3.0.1.RELEASE'

	idPrefix = 'mqtt'

	linkHomepage = 'https://github.com/SpringSource/spring-integration-extensions'
	linkCi       = 'https://build.springsource.org/browse/INTEXT'
	linkIssue    = 'https://jira.springsource.org/browse/INTEXT'
	linkScmUrl           = 'https://github.com/SpringSource/spring-integration-extensions'
	linkScmConnection    = 'https://github.com/SpringSource/spring-integration-extensions.git'
	linkScmDevConnection = 'git@github.com:SpringSource/spring-integration-extensions.git'
}

eclipse {
	project {
		natures += 'org.springframework.ide.eclipse.core.springnature'
	}
}

sourceSets {
	test {
		resources {
			srcDirs = ['src/test/resources', 'src/test/java']
		}
	}
}

// See http://www.gradle.org/docs/current/userguide/dependency_management.html#sub:configurations
// and http://www.gradle.org/docs/current/dsl/org.gradle.api.artifacts.ConfigurationContainer.html
configurations {
	jacoco //Configuration Group used by Sonar to provide Code Coverage using JaCoCo
}

dependencies {
	compile "org.springframework.integration:spring-integration-core:$springIntegrationVersion"
	compile "org.eclipse.paho:mqtt-client:0.4.0"
	testCompile "org.springframework.integration:spring-integration-test:$springIntegrationVersion"
	testCompile "junit:junit-dep:$junitVersion"
	testCompile "log4j:log4j:$log4jVersion"
	testCompile "org.mockito:mockito-all:$mockitoVersion"
	testCompile "org.springframework:spring-test:$springVersion"
	jacoco group: "org.jacoco", name: "org.jacoco.agent", version: "0.6.2.201302030002", classifier: "runtime"
}


// enable all compiler warnings; individual projects may customize further
ext.xLintArg = '-Xlint:all'
[compileJava, compileTestJava]*.options*.compilerArgs = [xLintArg]

test {
	// suppress all console output during testing unless running `gradle -i`
	logging.captureStandardOutput(LogLevel.INFO)
	jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec,includes=*"
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

apply plugin: 'sonar-runner'

sonarRunner {
	sonarProperties {
		property "sonar.jacoco.reportPath", "${buildDir.name}/jacoco.exec"
		property "sonar.links.homepage", linkHomepage
		property "sonar.links.ci", linkCi
		property "sonar.links.issue", linkIssue
		property "sonar.links.scm", linkScmUrl
		property "sonar.links.scm_dev", linkScmDevConnection
		property "sonar.java.coveragePlugin", "jacoco"
	}
}

task api(type: Javadoc) {
	group = 'Documentation'
	description = 'Generates the Javadoc API documentation.'
	title = "${rootProject.description} ${version} API"
	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = rootProject.description
	options.overview = 'src/api/overview.html'

	source = sourceSets.main.allJava
	classpath = project.sourceSets.main.compileClasspath
	destinationDir = new File(buildDir, "api")
}

task schemaZip(type: Zip) {
	group = 'Distribution'
	classifier = 'schema'
	description = "Builds -${classifier} archive containing all " +
		"XSDs for deployment at static.springframework.org/schema."

	def Properties schemas = new Properties();
	def shortName = idPrefix.replaceFirst("${idPrefix}-", '')

	project.sourceSets.main.resources.find {
		it.path.endsWith('META-INF/spring.schemas')
	}?.withInputStream { schemas.load(it) }

	for (def key : schemas.keySet()) {
		File xsdFile = project.sourceSets.main.resources.find {
			it.path.endsWith(schemas.get(key))
		}
		assert xsdFile != null
		into ("integration/${shortName}") {
			from xsdFile.path
		}
	}

}

task docsZip(type: Zip) {
	group = 'Distribution'
	classifier = 'docs'
	description = "Builds -${classifier} archive containing the api " +
			"for deployment at static.springframework.org/spring-integration/docs."

	from('src/dist') {
		include 'changelog.txt'
	}

	from (api) {
		into 'api'
	}
}

task distZip(type: Zip, dependsOn: [docsZip, schemaZip]) {
	group = 'Distribution'
	classifier = 'dist'
	description = "Builds -${classifier} archive, containing all jars and docs, " +
		"suitable for community download page."

	ext.baseDir = "${project.name}-${project.version}";

	from('src/dist') {
		include 'readme.txt'
		include 'license.txt'
		include 'notice.txt'
		into "${baseDir}"
	}

	from(zipTree(docsZip.archivePath)) {
		into "${baseDir}/docs"
	}

	from(zipTree(schemaZip.archivePath)) {
		into "${baseDir}/schema"
	}

	into ("${baseDir}/libs") {
		from project.jar
		from project.sourcesJar
		from project.javadocJar
	}
}

// Create an optional "with dependencies" distribution.
// Not published by default; only for use when building from source.
task depsZip(type: Zip, dependsOn: distZip) { zipTask ->
	group = 'Distribution'
	classifier = 'dist-with-deps'
	description = "Builds -${classifier} archive, containing everything " +
		"in the -${distZip.classifier} archive plus all dependencies."

	from zipTree(distZip.archivePath)

	gradle.taskGraph.whenReady { taskGraph ->
		if (taskGraph.hasTask(":${zipTask.name}")) {
			def projectName = rootProject.name
			def artifacts = new HashSet()

			rootProject.configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
				def dependency = artifact.moduleVersion.id
				if (!projectName.equals(dependency.name)) {
					artifacts << artifact.file
				}
			}

			zipTask.from(artifacts) {
				into "${distZip.baseDir}/deps"
			}
		}
	}
}

artifacts {
	archives distZip
	archives docsZip
	archives schemaZip
}

task dist(dependsOn: assemble) {
	group = 'Distribution'
	description = 'Builds -dist, -docs and -schema distribution archives.'
}

task wrapper(type: Wrapper) {
	description = 'Generates gradlew[.bat] scripts'
	gradleVersion = '1.6'
}
description = 'Spring Integration Print Adapter'

buildscript {
	repositories {
		maven { url 'https://repo.springsource.org/plugins-snapshot' }
	}
}

apply plugin: 'java'
apply from:   "${rootProject.projectDir}/publish-maven.gradle"
apply plugin: 'eclipse'
apply plugin: 'idea'

group = 'org.springframework.integration'

repositories {
	maven { url 'http://repo.springsource.org/libs-milestone' }
	maven { url 'http://repo.springsource.org/plugins-release' }
}

sourceCompatibility=1.6
targetCompatibility=1.6

ext {
	easymockVersion = '2.3'
	junitVersion = '4.10'
	log4jVersion = '1.2.12'
	mockitoVersion = '1.9.0'
	springVersion = '3.1.3.RELEASE'
	springIntegrationVersion = '2.2.0.RC2'
	
	linkHomepage = 'https://github.com/SpringSource/spring-integration-extensions'
	linkCi       = 'https://build.springsource.org/browse/INTEXT'
	linkIssue    = 'https://jira.springsource.org/browse/INTEXT'
	linkScmUrl           = 'https://github.com/SpringSource/spring-integration-extensions'
	linkScmConnection    = 'https://github.com/SpringSource/spring-integration-extensions.git'
	linkScmDevConnection = 'git@github.com:SpringSource/spring-integration-extensions.git'
}

eclipse {
	project {
		natures += 'org.springframework.ide.eclipse.core.springnature'
	}
}

sourceSets {
	test {
		resources {
			srcDirs = ['src/test/resources', 'src/test/java']
		}
	}
}

// See http://www.gradle.org/docs/current/userguide/dependency_management.html#sub:configurations
// and http://www.gradle.org/docs/current/dsl/org.gradle.api.artifacts.ConfigurationContainer.html
configurations {
	jacoco //Configuration Group used by Sonar to provide Code Coverage using JaCoCo
}

dependencies {

	compile "org.springframework.integration:spring-integration-core:$springIntegrationVersion"
	testCompile "org.springframework.integration:spring-integration-test:$springIntegrationVersion"
	testCompile "junit:junit-dep:$junitVersion"
	testCompile "log4j:log4j:$log4jVersion"
	testCompile "org.easymock:easymock:$easymockVersion"
	testCompile "org.easymock:easymockclassextension:$easymockVersion"
	testCompile "org.hamcrest:hamcrest-all:1.1"
	testCompile "org.mockito:mockito-all:$mockitoVersion"
	testCompile "org.springframework:spring-test:$springVersion"
	jacoco group: "org.jacoco", name: "org.jacoco.agent", version: "0.5.6.201201232323", classifier: "runtime"
}

// enable all compiler warnings; individual projects may customize further
ext.xLintArg = '-Xlint:all'
[compileJava, compileTestJava]*.options*.compilerArgs = [xLintArg]

test {
	// suppress all console output during testing unless running `gradle -i`
	logging.captureStandardOutput(LogLevel.INFO)
	jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec,includes=*"
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

apply plugin: 'sonar-runner'

sonarRunner {
	sonarProperties {
		property "sonar.jacoco.reportPath", "${buildDir.name}/jacoco.exec"
		property "sonar.links.homepage", linkHomepage
		property "sonar.links.ci", linkCi
		property "sonar.links.issue", linkIssue
		property "sonar.links.scm", linkScmUrl
		property "sonar.links.scm_dev", linkScmDevConnection
		property "sonar.java.coveragePlugin", "jacoco"
	}
}

task api(type: Javadoc) {
	group = 'Documentation'
	description = 'Generates the Javadoc API documentation.'
	title = "${rootProject.description} ${version} API"
	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = rootProject.description
	options.overview = 'src/api/overview.html'

	source = sourceSets.main.allJava
	classpath = project.sourceSets.main.compileClasspath
	destinationDir = new File(buildDir, "api")
}

task schemaZip(type: Zip) {
	group = 'Distribution'
	classifier = 'schema'
	description = "Builds -${classifier} archive containing all " +
		"XSDs for deployment at static.springframework.org/schema."

	def Properties schemas = new Properties();
	def shortName = project.name.replaceFirst("${rootProject.name}-", '')

	project.sourceSets.main.resources.find {
		it.path.endsWith('META-INF/spring.schemas')
	}?.withInputStream { schemas.load(it) }

	for (def key : schemas.keySet()) {
		File xsdFile = project.sourceSets.main.resources.find {
			it.path.endsWith(schemas.get(key))
		}
		assert xsdFile != null
		into ("integration/${shortName}") {
			from xsdFile.path
		}
	}

}

task docsZip(type: Zip) {

		group = 'Distribution'
		classifier = 'docs'
		description = "Builds -${classifier} archive containing api and reference " +
			"for deployment at static.springframework.org/spring-integration/docs."

		from('src/dist') {
			include 'changelog.txt'
		}

		from (api) {
			into 'api'
		}

}

task distZip(type: Zip, dependsOn: [docsZip, schemaZip]) {
	group = 'Distribution'
	classifier = 'dist'
	description = "Builds -${classifier} archive, containing all jars and docs, " +
		"suitable for community download page."

	ext.baseDir = "${project.name}-${project.version}";

	from('src/dist') {
		include 'readme.txt'
		include 'license.txt'
		include 'notice.txt'
		into "${baseDir}"
	}

	from(zipTree(docsZip.archivePath)) {
		into "${baseDir}/docs"
	}

	from(zipTree(schemaZip.archivePath)) {
		into "${baseDir}/schema"
	}

	into ("${baseDir}/libs") {
		from project.jar
		from project.sourcesJar
		from project.javadocJar
	}

}

// Create an optional "with dependencies" distribution.
// Not published by default; only for use when building from source.
task depsZip(type: Zip, dependsOn: distZip) { zipTask ->
	group = 'Distribution'
	classifier = 'dist-with-deps'
	description = "Builds -${classifier} archive, containing everything " +
		"in the -${distZip.classifier} archive plus all dependencies."

	from zipTree(distZip.archivePath)

	gradle.taskGraph.whenReady { taskGraph ->
		if (taskGraph.hasTask(":${zipTask.name}")) {
			def projectName = rootProject.name
			def artifacts = new HashSet()

			rootProject.configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
				def dependency = artifact.moduleVersion.id
				if (!projectName.equals(dependency.name)) {
					artifacts << artifact.file
				}
			}

			zipTask.from(artifacts) {
				into "${distZip.baseDir}/deps"
			}
		}
	}
}

artifacts {
	archives distZip
	archives docsZip
	archives schemaZip
}

task dist(dependsOn: assemble) {
	group = 'Distribution'
	description = 'Builds -dist, -docs and -schema distribution archives.'
}

task wrapper(type: Wrapper) {
	description = 'Generates gradlew[.bat] scripts'
	gradleVersion = '1.6'
}
description = 'Spring Integration SMB Support'

buildscript {
	repositories {
		maven { url 'https://repo.springsource.org/plugins-snapshot' }
	}
	dependencies {
		classpath 'org.springframework.build.gradle:docbook-reference-plugin:0.1.5'
	}
}

apply plugin: 'java'
apply from:   "${rootProject.projectDir}/publish-maven.gradle"
apply plugin: 'eclipse'
apply plugin: 'idea'

group = 'org.springframework.integration'

repositories {
	maven { url 'http://repo.springsource.org/libs-milestone' }
	maven { url 'http://repo.springsource.org/plugins-release' } // for bundlor
}

// ensure JDK 5 compatibility (GRADLE-18; INT-1578)
sourceCompatibility=1.6
targetCompatibility=1.6

ext {
	aspectjVersion = '1.6.8'
	cglibVersion = '2.2'
	commonsNetVersion = '3.0.1'
	groovyVersion = '1.8.5'
	jacksonVersion = '1.9.2'
	javaxActivationVersion = '1.1.1'
	junitVersion = '4.11'
	log4jVersion = '1.2.12'
	mockitoVersion = '1.9.0'

	springVersion = '3.1.3.RELEASE'
	springIntegrationVersion = '2.2.1.RELEASE'

	idPrefix = 'smb'
	
	linkHomepage = 'https://github.com/SpringSource/spring-integration-extensions'
	linkCi       = 'https://build.springsource.org/browse/INTEXT'
	linkIssue    = 'https://jira.springsource.org/browse/INTEXT'
	linkScmUrl           = 'https://github.com/SpringSource/spring-integration-extensions'
	linkScmConnection    = 'https://github.com/SpringSource/spring-integration-extensions.git'
	linkScmDevConnection = 'git@github.com:SpringSource/spring-integration-extensions.git'

}

dependencies {

	compile "org.springframework.integration:spring-integration-core:$springIntegrationVersion"
	compile "org.springframework.integration:spring-integration-file:$springIntegrationVersion"
	compile "org.springframework.integration:spring-integration-stream:$springIntegrationVersion"
	compile "jcifs:jcifs:1.3.17"
	compile "org.springframework:spring-context-support:$springVersion"
	compile("javax.activation:activation:$javaxActivationVersion", optional)
	testCompile "org.springframework.integration:spring-integration-test:$springIntegrationVersion"

}


eclipse {
	project {
		natures += 'org.springframework.ide.eclipse.core.springnature'
	}
}

sourceSets {
	test {
		resources {
			srcDirs = ['src/test/resources', 'src/test/java']
		}
	}
}

// See http://www.gradle.org/docs/current/userguide/dependency_management.html#sub:configurations
// and http://www.gradle.org/docs/current/dsl/org.gradle.api.artifacts.ConfigurationContainer.html
configurations {
	jacoco //Configuration Group used by Sonar to provide Code Coverage using JaCoCo
}

// dependencies that are common across all java projects
dependencies {
	testCompile "cglib:cglib-nodep:$cglibVersion"
	testCompile "junit:junit-dep:$junitVersion"
	testCompile "log4j:log4j:$log4jVersion"
	testCompile "org.hamcrest:hamcrest-all:1.1"
	testCompile "org.mockito:mockito-all:$mockitoVersion"
	testCompile "org.springframework:spring-test:$springVersion"
	jacoco group: "org.jacoco", name: "org.jacoco.agent", version: "0.5.6.201201232323", classifier: "runtime"
}

// enable all compiler warnings; individual projects may customize further
ext.xLintArg = '-Xlint:all'
[compileJava, compileTestJava]*.options*.compilerArgs = [xLintArg]

test {
	// suppress all console output during testing unless running `gradle -i`
	logging.captureStandardOutput(LogLevel.INFO)
	jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec,includes=*"
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

apply plugin: 'docbook-reference'

reference {
	sourceDir = file('src/reference/docbook')
}

apply plugin: 'sonar-runner'

sonarRunner {
	sonarProperties {
		property "sonar.jacoco.reportPath", "${buildDir.name}/jacoco.exec"
		property "sonar.links.homepage", linkHomepage
		property "sonar.links.ci", linkCi
		property "sonar.links.issue", linkIssue
		property "sonar.links.scm", linkScmUrl
		property "sonar.links.scm_dev", linkScmDevConnection
		property "sonar.java.coveragePlugin", "jacoco"
	}
}

task api(type: Javadoc) {
	group = 'Documentation'
	description = 'Generates the Javadoc API documentation.'
	title = "${rootProject.description} ${version} API"
	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = rootProject.description
	options.overview = 'src/api/overview.html'

	source = sourceSets.main.allJava
	classpath = project.sourceSets.main.compileClasspath
	destinationDir = new File(buildDir, "api")
}

task schemaZip(type: Zip) {
	group = 'Distribution'
	classifier = 'schema'
	description = "Builds -${classifier} archive containing all " +
		"XSDs for deployment at static.springframework.org/schema."

	def Properties schemas = new Properties();
	def shortName = idPrefix.replaceFirst("${idPrefix}-", '')

	project.sourceSets.main.resources.find {
		it.path.endsWith('META-INF/spring.schemas')
	}?.withInputStream { schemas.load(it) }

	for (def key : schemas.keySet()) {
		File xsdFile = project.sourceSets.main.resources.find {
			it.path.endsWith(schemas.get(key))
		}
		assert xsdFile != null
		into ("integration/${shortName}") {
			from xsdFile.path
		}
	}

}

task docsZip(type: Zip) {
		group = 'Distribution'
		classifier = 'docs'
		description = "Builds -${classifier} archive containing api and reference " +
			"for deployment at static.springframework.org/spring-integration/docs."

		from('src/dist') {
			include 'changelog.txt'
		}

		from (api) {
			into 'api'
		}

		from (reference) {
			into 'reference'
		}
}

task distZip(type: Zip, dependsOn: [docsZip, schemaZip]) {
	group = 'Distribution'
	classifier = 'dist'
	description = "Builds -${classifier} archive, containing all jars and docs, " +
		"suitable for community download page."

	ext.baseDir = "${project.name}-${project.version}";

	from('src/dist') {
		include 'readme.txt'
		include 'license.txt'
		include 'notice.txt'
		into "${baseDir}"
	}

	from(zipTree(docsZip.archivePath)) {
		into "${baseDir}/docs"
	}

	from(zipTree(schemaZip.archivePath)) {
		into "${baseDir}/schema"
	}

	into ("${baseDir}/libs") {
		from project.jar
		from project.sourcesJar
		from project.javadocJar
	}
}

// Create an optional "with dependencies" distribution.
// Not published by default; only for use when building from source.
task depsZip(type: Zip, dependsOn: distZip) { zipTask ->
	group = 'Distribution'
	classifier = 'dist-with-deps'
	description = "Builds -${classifier} archive, containing everything " +
		"in the -${distZip.classifier} archive plus all dependencies."

	from zipTree(distZip.archivePath)

	gradle.taskGraph.whenReady { taskGraph ->
		if (taskGraph.hasTask(":${zipTask.name}")) {
			def projectName = rootProject.name
			def artifacts = new HashSet()

			rootProject.configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
				def dependency = artifact.moduleVersion.id
				if (!projectName.equals(dependency.name)) {
					artifacts << artifact.file
				}
			}

			zipTask.from(artifacts) {
				into "${distZip.baseDir}/deps"
			}
		}
	}
}

artifacts {
	archives distZip
	archives docsZip
	archives schemaZip
}

task dist(dependsOn: assemble) {
	group = 'Distribution'
	description = 'Builds -dist, -docs and -schema distribution archives.'
}

task wrapper(type: Wrapper) {
	description = 'Generates gradlew[.bat] scripts'
	gradleVersion = '1.6'
}
description = 'Spring Integration Smpp Adapter'

buildscript {
	repositories {
		maven { url 'https://repo.springsource.org/plugins-snapshot' }
	}
	dependencies {
		classpath 'org.springframework.build.gradle:docbook-reference-plugin:0.1.5'
	}
}

apply plugin: 'java'
apply from:   "${rootProject.projectDir}/publish-maven.gradle"
apply plugin: 'eclipse'
apply plugin: 'idea'

group = 'org.springframework.integration'

repositories {
	maven { url 'http://repo.springsource.org/libs-milestone' }
	maven { url 'http://repo.springsource.org/plugins-release' }
}

sourceCompatibility=1.6
targetCompatibility=1.6

ext {
	jsmppVersion = '2.1.0'
	slf4jVersion = '1.6.6'
	commonsLangVersion = '2.6'
	commonsBeanUtilsVersion= '1.8.3'
	easymockVersion = '2.3'
	junitVersion = '4.10'
	log4jVersion = '1.2.12'
	mockitoVersion = '1.9.0'
	springVersion = '3.1.3.RELEASE'
	springIntegrationVersion = '2.2.2.RELEASE'

	idPrefix = 'smpp'
	
	linkHomepage = 'https://github.com/SpringSource/spring-integration-extensions'
	linkCi       = 'https://build.springsource.org/browse/INTEXT'
	linkIssue    = 'https://jira.springsource.org/browse/INTEXT'
	linkScmUrl           = 'https://github.com/SpringSource/spring-integration-extensions'
	linkScmConnection    = 'https://github.com/SpringSource/spring-integration-extensions.git'
	linkScmDevConnection = 'git@github.com:SpringSource/spring-integration-extensions.git'
}

eclipse {
	project {
		natures += 'org.springframework.ide.eclipse.core.springnature'
	}
}

sourceSets {
	test {
		resources {
			srcDirs = ['src/test/resources', 'src/test/java']
		}
	}
}

// See http://www.gradle.org/docs/current/userguide/dependency_management.html#sub:configurations
// and http://www.gradle.org/docs/current/dsl/org.gradle.api.artifacts.ConfigurationContainer.html
configurations {
	jacoco //Configuration Group used by Sonar to provide Code Coverage using JaCoCo
}

dependencies {
	compile "com.googlecode.jsmpp:jsmpp:$jsmppVersion"
	compile "org.slf4j:slf4j-log4j12:$slf4jVersion"
	compile "commons-lang:commons-lang:$commonsLangVersion"
	compile "commons-beanutils:commons-beanutils:$commonsBeanUtilsVersion"
	compile "org.springframework.integration:spring-integration-core:$springIntegrationVersion"
	testCompile "org.springframework.integration:spring-integration-test:$springIntegrationVersion"
	testCompile "junit:junit-dep:$junitVersion"
	testCompile "log4j:log4j:$log4jVersion"
	testCompile "org.mockito:mockito-all:$mockitoVersion"
	testCompile "org.springframework:spring-test:$springVersion"
	testCompile "org.easymock:easymockclassextension:$easymockVersion"
	jacoco group: "org.jacoco", name: "org.jacoco.agent", version: "0.5.6.201201232323", classifier: "runtime"
}

// enable all compiler warnings; individual projects may customize further
ext.xLintArg = '-Xlint:all'
[compileJava, compileTestJava]*.options*.compilerArgs = [xLintArg]

test {
	// suppress all console output during testing unless running `gradle -i`
	logging.captureStandardOutput(LogLevel.INFO)
	jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec,includes=*"
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

apply plugin: 'docbook-reference'

reference {
	sourceDir = file('src/reference/docbook')
}

apply plugin: 'sonar-runner'

sonarRunner {
	sonarProperties {
		property "sonar.jacoco.reportPath", "${buildDir.name}/jacoco.exec"
		property "sonar.links.homepage", linkHomepage
		property "sonar.links.ci", linkCi
		property "sonar.links.issue", linkIssue
		property "sonar.links.scm", linkScmUrl
		property "sonar.links.scm_dev", linkScmDevConnection
		property "sonar.java.coveragePlugin", "jacoco"
	}
}

task api(type: Javadoc) {
	group = 'Documentation'
	description = 'Generates the Javadoc API documentation.'
	title = "${rootProject.description} ${version} API"
	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = rootProject.description
	options.overview = 'src/api/overview.html'

	source = sourceSets.main.allJava
	classpath = project.sourceSets.main.compileClasspath
	destinationDir = new File(buildDir, "api")
}

task schemaZip(type: Zip) {
	group = 'Distribution'
	classifier = 'schema'
	description = "Builds -${classifier} archive containing all " +
		"XSDs for deployment at static.springframework.org/schema."

	def Properties schemas = new Properties();
	def shortName = idPrefix.replaceFirst("${idPrefix}-", '')

	project.sourceSets.main.resources.find {
		it.path.endsWith('META-INF/spring.schemas')
	}?.withInputStream { schemas.load(it) }

	for (def key : schemas.keySet()) {
		File xsdFile = project.sourceSets.main.resources.find {
			it.path.endsWith(schemas.get(key))
		}
		assert xsdFile != null
		into ("integration/${shortName}") {
			from xsdFile.path
		}
	}
}

task docsZip(type: Zip) {
	group = 'Distribution'
	classifier = 'docs'
	description = "Builds -${classifier} archive containing api and reference " +
			"for deployment at static.springframework.org/spring-integration/docs."

	from('src/dist') {
		include 'changelog.txt'
	}

	from (api) {
		into 'api'
	}

	from (reference) {
		into 'reference'
	}
}

task distZip(type: Zip, dependsOn: [docsZip, schemaZip]) {
	group = 'Distribution'
	classifier = 'dist'
	description = "Builds -${classifier} archive, containing all jars and docs, " +
		"suitable for community download page."

	ext.baseDir = "${project.name}-${project.version}";

	from('src/dist') {
		include 'readme.txt'
		include 'license.txt'
		include 'notice.txt'
		into "${baseDir}"
	}

	from(zipTree(docsZip.archivePath)) {
		into "${baseDir}/docs"
	}

	from(zipTree(schemaZip.archivePath)) {
		into "${baseDir}/schema"
	}

	into ("${baseDir}/libs") {
		from project.jar
		from project.sourcesJar
		from project.javadocJar
	}
}

// Create an optional "with dependencies" distribution.
// Not published by default; only for use when building from source.
task depsZip(type: Zip, dependsOn: distZip) { zipTask ->
	group = 'Distribution'
	classifier = 'dist-with-deps'
	description = "Builds -${classifier} archive, containing everything " +
		"in the -${distZip.classifier} archive plus all dependencies."

	from zipTree(distZip.archivePath)

	gradle.taskGraph.whenReady { taskGraph ->
		if (taskGraph.hasTask(":${zipTask.name}")) {
			def projectName = rootProject.name
			def artifacts = new HashSet()

			rootProject.configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
				def dependency = artifact.moduleVersion.id
				if (!projectName.equals(dependency.name)) {
					artifacts << artifact.file
				}
			}

			zipTask.from(artifacts) {
				into "${distZip.baseDir}/deps"
			}
		}
	}
}

artifacts {
	archives distZip
	archives docsZip
	archives schemaZip
}

task dist(dependsOn: assemble) {
	group = 'Distribution'
	description = 'Builds -dist, -docs and -schema distribution archives.'
}

task wrapper(type: Wrapper) {
	description = 'Generates gradlew[.bat] scripts'
	gradleVersion = '1.6'
}
description = 'Spring Integration Splunk Adapter'

buildscript {
	repositories {
		maven { url 'http://repo.springsource.org/plugins-snapshot' }
	}
	dependencies {
		classpath 'org.springframework.build.gradle:docbook-reference-plugin:0.1.5'
	}
}

apply plugin: 'java'
apply from:   "${rootProject.projectDir}/publish-maven.gradle"
apply plugin: 'eclipse'
apply plugin: 'idea'

group = 'org.springframework.integration'

repositories {
	maven { url 'http://repo.springsource.org/libs-milestone' }
	maven { url 'http://repo.springsource.org/plugins-release' } // for bundlor
}

sourceCompatibility=1.6
targetCompatibility=1.6

ext {
	linkHomepage = 'https://github.com/SpringSource/spring-integration-extensions'
	linkCi       = 'https://build.springsource.org/browse/INTEXT'
	linkIssue    = 'https://jira.springsource.org/browse/INTEXT'
	linkScmUrl           = 'https://github.com/SpringSource/spring-integration-extensions'
	linkScmConnection    = 'https://github.com/SpringSource/spring-integration-extensions.git'
	linkScmDevConnection = 'git@github.com:SpringSource/spring-integration-extensions.git'
	
	shortName = 'splunk'
}

// See http://www.gradle.org/docs/current/userguide/dependency_management.html#sub:configurations
// and http://www.gradle.org/docs/current/dsl/org.gradle.api.artifacts.ConfigurationContainer.html
configurations {
	jacoco //Configuration Group used by Sonar to provide Code Coverage using JaCoCo
}

dependencies {
	compile("com.splunk:splunk:$splunkVersion")
	compile "org.springframework:spring-beans:$springVersion"
	compile "org.springframework:spring-context:$springVersion"
	compile "org.springframework:spring-expression:$springVersion"
	compile "org.springframework.integration:spring-integration-core:$springIntegrationVersion"
	compile "joda-time:joda-time:$jodaTimeVersion"
	compile "commons-pool:commons-pool:$commonsPoolVersion"

	testCompile "org.mockito:mockito-all:$mockitoVersion"
	testCompile "org.springframework:spring-test:$springVersion"
	testCompile "cglib:cglib-nodep:$cglibVersion"
	testCompile "junit:junit-dep:$junitVersion"
	testCompile "log4j:log4j:$log4jVersion"
	testCompile "org.springframework.integration:spring-integration-stream:$springIntegrationVersion"
	jacoco group: "org.jacoco", name: "org.jacoco.agent", version: "0.5.6.201201232323", classifier: "runtime"
}


eclipse {
	project {
		natures += 'org.springframework.ide.eclipse.core.springnature'
	}
}

sourceSets {
	test {
		resources {
			srcDirs = ['src/test/resources', 'src/test/java']
		}
	}
}



// enable all compiler warnings; individual projects may customize further
ext.xLintArg = '-Xlint:all'
[compileJava, compileTestJava]*.options*.compilerArgs = [xLintArg]

test {
	// suppress all console output during testing unless running `gradle -i`
	logging.captureStandardOutput(LogLevel.INFO)
	jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec,includes=*"
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

apply plugin: 'docbook-reference'

reference {
	sourceDir = file('src/reference/docbook')
}

apply plugin: 'sonar-runner'

sonarRunner {
	sonarProperties {
		property "sonar.jacoco.reportPath", "${buildDir.name}/jacoco.exec"
		property "sonar.links.homepage", linkHomepage
		property "sonar.links.ci", linkCi
		property "sonar.links.issue", linkIssue
		property "sonar.links.scm", linkScmUrl
		property "sonar.links.scm_dev", linkScmDevConnection
		property "sonar.java.coveragePlugin", "jacoco"
	}
}

task api(type: Javadoc) {
	group = 'Documentation'
	description = 'Generates aggregated Javadoc API documentation.'
	title = "${rootProject.description} ${version} API"
	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = rootProject.description
	options.overview = 'src/api/overview.html'
	source subprojects.collect { project ->
		project.sourceSets.main.allJava
	}
	destinationDir = new File(buildDir, "api")
	classpath = files(subprojects.collect { project ->
		project.sourceSets.main.compileClasspath
	})
}

task schemaZip(type: Zip) {
	group = 'Distribution'
	classifier = 'schema'
	description = "Builds -${classifier} archive containing all " +
		"XSDs for deployment at static.springframework.org/schema."

		def Properties schemas = new Properties();

		project.sourceSets.main.resources.find {
			it.path.endsWith('META-INF/spring.schemas')
		}?.withInputStream { schemas.load(it) }

		for (def key : schemas.keySet()) {
			File xsdFile = project.sourceSets.main.resources.find {
				it.path.endsWith(schemas.get(key))
			}
			assert xsdFile != null
			into ("integration/${shortName}") {
				from xsdFile.path
			}
		}
}

task docsZip(type: Zip) {
		group = 'Distribution'
		classifier = 'docs'
		description = "Builds -${classifier} archive containing api and reference " +
			"for deployment at static.springframework.org/spring-integration/docs."

		from('src/dist') {
			include 'changelog.txt'
		}

		from (api) {
			into 'api'
		}

		from (reference) {
			into 'reference'
		}
}

task distZip(type: Zip, dependsOn: [docsZip, schemaZip]) {
	group = 'Distribution'
	classifier = 'dist'
	description = "Builds -${classifier} archive, containing all jars and docs, " +
		"suitable for community download page."

	ext.baseDir = "${project.name}-${project.version}";

	from('src/dist') {
		include 'readme.txt'
		include 'license.txt'
		include 'notice.txt'
		into "${baseDir}"
	}

	from(zipTree(docsZip.archivePath)) {
		into "${baseDir}/docs"
	}

	from(zipTree(schemaZip.archivePath)) {
		into "${baseDir}/schema"
	}

	subprojects.each { subproject ->
		into ("${baseDir}/libs") {
			from subproject.jar
			from subproject.sourcesJar
			from subproject.javadocJar
		}
	}
}

// Create an optional "with dependencies" distribution.
// Not published by default; only for use when building from source.
task depsZip(type: Zip, dependsOn: distZip) { zipTask ->
	group = 'Distribution'
	classifier = 'dist-with-deps'
	description = "Builds -${classifier} archive, containing everything " +
		"in the -${distZip.classifier} archive plus all dependencies."

	from zipTree(distZip.archivePath)

	gradle.taskGraph.whenReady { taskGraph ->
		if (taskGraph.hasTask(":${zipTask.name}")) {
			def projectNames = rootProject.subprojects*.name
			def artifacts = new HashSet()
			subprojects.each { subproject ->
				subproject.configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
					def dependency = artifact.moduleVersion.id
					if (!projectNames.contains(dependency.name)) {
						artifacts << artifact.file
					}
				}
			}

			zipTask.from(artifacts) {
				into "${distZip.baseDir}/deps"
			}
		}
	}
}

artifacts {
	archives distZip
	archives docsZip
	archives schemaZip
}

task dist(dependsOn: assemble) {
	group = 'Distribution'
	description = 'Builds -dist, -docs and -schema distribution archives.'
}

task wrapper(type: Wrapper) {
	description = 'Generates gradlew[.bat] scripts'
	gradleVersion = '1.6'
}

defaultTasks 'build'
description = 'Spring Integration Voldemort Support'

buildscript {
	repositories {
		maven { url 'https://repo.springsource.org/plugins-snapshot' }
	}
	dependencies {
		classpath 'org.springframework.build.gradle:docbook-reference-plugin:0.1.5'
	}
}

apply plugin: 'java'
apply from:   "${rootProject.projectDir}/publish-maven.gradle"
apply plugin: 'eclipse'
apply plugin: 'idea'

group = 'org.springframework.integration'

repositories {
	maven { url 'http://repo.springsource.org/libs-milestone' }
	maven { url 'http://repo.springsource.org/plugins-release' }
}

sourceCompatibility=1.6
targetCompatibility=1.6

ext {
	junitVersion = '4.10'
	log4jVersion = '1.2.12'
	mockitoVersion = '1.9.0'
	springVersion = '3.1.3.RELEASE'
	springIntegrationVersion = '2.2.0.RELEASE'
	voldemortVersion = '0.96'

	shortName = 'voldemort'

	linkHomepage = 'https://github.com/SpringSource/spring-integration-extensions'
	linkCi       = 'https://build.springsource.org/browse/INTEXT'
	linkIssue    = 'https://jira.springsource.org/browse/INTEXT'
	linkScmUrl           = 'https://github.com/SpringSource/spring-integration-extensions'
	linkScmConnection    = 'https://github.com/SpringSource/spring-integration-extensions.git'
	linkScmDevConnection = 'git@github.com:SpringSource/spring-integration-extensions.git'

}

eclipse {
	project {
		natures += 'org.springframework.ide.eclipse.core.springnature'
	}
}

sourceSets {
	test {
		resources {
			srcDirs = ['src/test/resources', 'src/test/java']
		}
	}
}

// See http://www.gradle.org/docs/current/userguide/dependency_management.html#sub:configurations
// and http://www.gradle.org/docs/current/dsl/org.gradle.api.artifacts.ConfigurationContainer.html
configurations {
	jacoco //Configuration Group used by Sonar to provide Code Coverage using JaCoCo
}

dependencies {
	compile     "org.springframework.integration:spring-integration-core:$springIntegrationVersion"
	compile     "voldemort:voldemort:$voldemortVersion"
	testCompile "org.springframework.integration:spring-integration-test:$springIntegrationVersion"
	testCompile "junit:junit-dep:$junitVersion"
	testCompile "log4j:log4j:$log4jVersion"
	testCompile "org.mockito:mockito-all:$mockitoVersion"
	testCompile "org.springframework:spring-test:$springVersion"
	jacoco group: "org.jacoco", name: "org.jacoco.agent", version: "0.5.6.201201232323", classifier: "runtime"
}


// enable all compiler warnings; individual projects may customize further
ext.xLintArg = '-Xlint:all'
[compileJava, compileTestJava]*.options*.compilerArgs = [xLintArg]

test {
	// suppress all console output during testing unless running `gradle -i`
	logging.captureStandardOutput(LogLevel.INFO)
	// JVM settings from http://www.project-voldemort.com/voldemort/configuration.html
	jvmArgs "-XX:+UseConcMarkSweepGC", "-XX:+UseParNewGC", "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec,includes=*"
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

apply plugin: 'docbook-reference'

reference {
	sourceDir = file('src/reference/docbook')
}

apply plugin: 'sonar-runner'

sonarRunner {
	sonarProperties {
		property "sonar.jacoco.reportPath", "${buildDir.name}/jacoco.exec"
		property "sonar.links.homepage", linkHomepage
		property "sonar.links.ci", linkCi
		property "sonar.links.issue", linkIssue
		property "sonar.links.scm", linkScmUrl
		property "sonar.links.scm_dev", linkScmDevConnection
		property "sonar.java.coveragePlugin", "jacoco"

	}
}

task api(type: Javadoc) {
	group = 'Documentation'
	description = 'Generates the Javadoc API documentation.'
	title = "${rootProject.description} ${version} API"
	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = rootProject.description
	options.overview = 'src/api/overview.html'

	source = sourceSets.main.allJava
	classpath = project.sourceSets.main.compileClasspath
	destinationDir = new File(buildDir, "api")
}

task schemaZip(type: Zip) {
	group = 'Distribution'
	classifier = 'schema'
	description = "Builds -${classifier} archive containing all " +
		"XSDs for deployment at static.springframework.org/schema."

	def Properties schemas = new Properties();

	project.sourceSets.main.resources.find {
		it.path.endsWith('META-INF/spring.schemas')
	}?.withInputStream { schemas.load(it) }

	for (def key : schemas.keySet()) {
		File xsdFile = project.sourceSets.main.resources.find {
			it.path.endsWith(schemas.get(key))
		}
		assert xsdFile != null
		into ("integration/${shortName}") {
			from xsdFile.path
		}
	}

}

task docsZip(type: Zip) {
	group = 'Distribution'
	classifier = 'docs'
	description = "Builds -${classifier} archive containing api and reference " +
			"for deployment at static.springframework.org/spring-integration/docs."

	from('src/dist') {
		include 'changelog.txt'
	}

	from (api) {
		into 'api'
	}

	from (reference) {
		into 'reference'
	}
}

task distZip(type: Zip, dependsOn: [docsZip, schemaZip]) {
	group = 'Distribution'
	classifier = 'dist'
	description = "Builds -${classifier} archive, containing all jars and docs, " +
		"suitable for community download page."

	ext.baseDir = "${project.name}-${project.version}";

	from('src/dist') {
		include 'readme.txt'
		include 'license.txt'
		include 'notice.txt'
		into "${baseDir}"
	}

	from(zipTree(docsZip.archivePath)) {
		into "${baseDir}/docs"
	}

	from(zipTree(schemaZip.archivePath)) {
		into "${baseDir}/schema"
	}

	into ("${baseDir}/libs") {
		from project.jar
		from project.sourcesJar
		from project.javadocJar
	}
}

// Create an optional "with dependencies" distribution.
// Not published by default; only for use when building from source.
task depsZip(type: Zip, dependsOn: distZip) { zipTask ->
	group = 'Distribution'
	classifier = 'dist-with-deps'
	description = "Builds -${classifier} archive, containing everything " +
		"in the -${distZip.classifier} archive plus all dependencies."

	from zipTree(distZip.archivePath)

	gradle.taskGraph.whenReady { taskGraph ->
		if (taskGraph.hasTask(":${zipTask.name}")) {
			def projectName = rootProject.name
			def artifacts = new HashSet()

			rootProject.configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
				def dependency = artifact.moduleVersion.id
				if (!projectName.equals(dependency.name)) {
					artifacts << artifact.file
				}
			}

			zipTask.from(artifacts) {
				into "${distZip.baseDir}/deps"
			}
		}
	}
}

artifacts {
	archives distZip
	archives docsZip
	archives schemaZip
}

task dist(dependsOn: assemble) {
	group = 'Distribution'
	description = 'Builds -dist, -docs and -schema distribution archives.'
}

task wrapper(type: Wrapper) {
	description = 'Generates gradlew[.bat] scripts'
	gradleVersion = '1.6'
}
