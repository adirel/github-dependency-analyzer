apply plugin: 'java'

sourceCompatibility = 1.6
version = '0.7.0.7'

ext{
    srcCore = "src-core/main/java"
    srcTerminal = "src-core/main/java/com/ponysdk/ui/terminal"
    srcDefaultimpl = "src-defaultimpl/main/java"
    srcGenerator = "src-generator/main/java"
    srcGenerated = "src-generated/main/java"
    srcJetty = "src-jetty/main/java"
    srcSpring = "src-spring/main/java"
    srcPersistency = "src-persistency/main/java"
    srcHibernate = "src-hibernate/main/java"
    srcMongoDB = "src-mongodb/main/java"
    srcJasper = "src-jasper/main/java"
    resourcesCoreTest = "src-core/test/resources"
    gwtOutputDirName = buildDir.name + "/gwt"
    buildInfoOutputDirName = buildDir.name + "/buildinfo"
    warResources = "src-core/main/resources/war"
    specResources = "src-core/main/resources/spec"
    confResources = "src-spring/main/resources/conf"
    javadocResources = "src-core/main/javadoc"
}


sourceSets {
	main {
		java {
			srcDir srcCore
			srcDir srcDefaultimpl
			srcDir srcGenerator
			srcDir srcGenerated
			srcDir srcJetty
			srcDir srcSpring
			srcDir srcPersistency
			srcDir srcHibernate
			srcDir srcMongoDB
			srcDir srcJasper
		}
	}
	test {
		java {
			srcDir "src-core/test/java"
			srcDir "src-jetty/test/java"
		}
	}
}

repositories {
	mavenCentral()
    maven {
        url "https://github.com/PonySDK/Maven/raw/master/ext"
    }
    maven {
        url "http://oss.sonatype.org/content/repositories/snapshots"
    }
}

configurations {
	xjc
	gwt
	spring
	sl4j
	log4j
	commons
	hibernate
	jasper
	mongodb
	selenium
	json_jackson
    jetty
	
	compile {
		extendsFrom gwt, spring, sl4j, hibernate, jasper, mongodb, json_jackson, jetty, log4j
	}

	testCompile {
		extendsFrom selenium
	}
	
	runtime {
		extendsFrom spring, sl4j, hibernate, mongodb, json_jackson
	}
    
}

dependencies {
	xjc 'com.sun.xml.bind:jaxb-xjc:2.2.4'
	gwt 'com.google.gwt:gwt-user:2.6.0'
	gwt 'com.google.gwt:gwt-dev:2.6.0'
	gwt 'com.google.gwt:gwt-codeserver:2.6.0'
	gwt 'javax.validation:validation-api:1.0.0.GA@jar'
	gwt 'org.json:json:20090211'
	gwt 'org.timepedia.exporter:gwtexporter:2.5.1'
	spring 'org.springframework:spring-core:3.2.3.RELEASE'
	spring 'org.springframework:spring-web:3.2.3.RELEASE'
	sl4j 'org.slf4j:slf4j-api:1.6.2'
	sl4j 'org.slf4j:log4j-over-slf4j:1.6.4'
	sl4j 'ch.qos.logback:logback-classic:1.0.0'
	sl4j 'org.slf4j:jcl-over-slf4j:1.6.4'
	log4j 'log4j:log4j:1.2.16'
	log4j 'commons-io:commons-io:20030203.000550'
	commons 'commons-beanutils:commons-beanutils:1.8.3'
	commons 'commons-lang:commons-lang:2.6'
	hibernate 'org.hibernate:hibernate-core:3.6.7.Final'
	jasper 'ar.com.fdvs:DynamicJasper:3.0.13'
	mongodb 'org.mongodb:mongo-java-driver:2.7.3'
	selenium 'org.seleniumhq.selenium:selenium-java:2.33.0'
	selenium 'junit:junit:4.10'
	json_jackson 'com.fasterxml.jackson.core:jackson-databind:2.0.1'
    jetty 'org.eclipse.jetty:jetty-server:8.1.4.v20120524'
    jetty 'org.eclipse.jetty:jetty-servlet:8.1.4.v20120524'
    jetty 'org.eclipse.jetty:jetty-webapp:8.1.4.v20120524'
    jetty 'org.eclipse.jetty:jetty-servlets:8.1.4.v20120524'
    jetty 'org.eclipse.jetty:jetty-websocket:8.1.4.v20120524'
    jetty 'org.eclipse.jetty:jetty-client:8.1.4.v20120524'
    jetty 'org.eclipse.jetty:jetty-client:8.1.4.v20120524'
    jetty 'org.eclipse.jetty:jetty-io:8.1.4.v20120524'
    jetty 'org.apache.geronimo.specs:geronimo-servlet_3.0_spec:1.0'
}


jar {
	baseName = 'ponysdk'
    from sourceSets.main.output
    from sourceSets.test.output
    from gwtOutputDirName
    from warResources
    
    metaInf {
        from 'src-core/main/resources/META-INF'
        from buildInfoOutputDirName
    }

    into('conf') {
        from confResources
    }
    
    manifest {
		def cmd = "git rev-parse HEAD"
	    def proc = cmd.execute()
	    ext.revision = proc.text.trim()
	    ext.timestamp = (int)(new Date().getTime()/1000)
	    
		attributes("Manifest-Version": "1.0")
		attributes("Created-By": "PonySDK")
		attributes("Built-By": "PonySDK")
		attributes("License-Title": "Apache License 2.0")
		attributes("Specification-Title": "PonySDK")
	    attributes("Specification-Version": version)
	    attributes("Specification-Vendor": "PonySDK")
	    attributes("Implementation-Title": "PonySDK")
	    attributes("Implementation-Version": version)
	    attributes("Implementation-Vendor-Id": "com.ponysdk")
		attributes("Implementation-Vendor": "PonySDK")
	    attributes("Revision": revision)
	    attributes("Date": timestamp + " / " + new Date().toGMTString())
	}
}


javadoc {
	failOnError false
}


task cleanGenerated(type: Delete) {
	delete srcGenerated
}

task generateDatamodel {
	description = 'Model generation'
	inputs.file file('src-core/main/resources/spec/project_schema.xsd')
	outputs.dir fileTree('src-generated/main/java/com/ponysdk/generator')
	doLast {
		file(srcGenerated).mkdirs();
		ant {
			taskdef(name: 'xjc',
			classname: 'com.sun.tools.xjc.XJCTask',
			classpath: configurations.xjc.asPath)
			xjc(destdir:srcGenerated, package:'com.ponysdk.generator') {
				schema(dir:'src-core/main/resources/spec', includes: 'project_schema.xsd')
			}
		}
	}
}

task compileDatamodel(type: JavaCompile, dependsOn: generateDatamodel) {
	classpath = configurations.xjc
	source = file(srcGenerated)
	destinationDir = file("$buildDir/classes/main")
	inputs.files fileTree('src-generated/main/java/com/ponysdk/generator')
}

task compileGenerator(type: JavaCompile, dependsOn: compileDatamodel) {
	classpath = files("$buildDir/classes/main") + configurations.gwt + configurations.sl4j
	source = srcGenerator
	destinationDir = file("$buildDir/classes/main")
	inputs.files fileTree(srcGenerator)
}

task generateDictionnary(dependsOn: compileGenerator) {
	description = 'Dictionnary generation'
	inputs.file file('src-core/main/resources/spec/propertiesDictionnary.json')
    outputs.files fileTree('src-generated/main/java/com/ponysdk/ui')
    doLast {
    	javaexec {
			main = 'com.ponysdk.generator.PropertiesDictionnaryGenerator'
			classpath {
				[
					file("$buildDir/classes/main"),
					configurations.sl4j,
					configurations.gwt
				]
			}
			args = [
					'verbose=false'
			]
    	}
    }
}

task generate(dependsOn: generateDictionnary) {
	doLast {
		println 'generation done'
	}
}

task compileTerminal << {
	def result = System.getProperty('gwtc', 'true')
	println('gwtc ? ' + result)
	if(result == 'false') {
		println('[WARN] terminal compilation disabled');
	} else {
		tasks.gwtc.execute();
	}
}

task gwtc {
	description = 'GWT compile'
	inputs.files fileTree(srcTerminal)
    outputs.files fileTree(gwtOutputDirName)
    doLast {
    	javaexec {
			main = 'com.google.gwt.dev.Compiler'
			maxHeapSize = '512M'
			workingDir = buildDir
			classpath {
				[
					sourceSets.main.java.srcDirs,
					sourceSets.main.output,
					configurations.gwt
				]
			}
			args = [
				'-war',
				'gwt',
				'-localWorkers',
				Runtime.getRuntime().availableProcessors(),
				'com.ponysdk.ui.PonyTerminal'
			]
    	}
    }
}


// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
	from sourceSets.main.allJava
	from sourceSets.test.allJava
	from(srcCore) {
		include '**/*.xml'
	}
	from(srcGenerated) {
		include '**/*.xml'
	}
	from(specResources) {
		into 'spec'
	}
	
    manifest {
		def cmd = "git rev-parse HEAD"
	    def proc = cmd.execute()
	    ext.revision = proc.text.trim()
	    ext.timestamp = (int)(new Date().getTime()/1000)
	    
		attributes("Manifest-Version": "1.0")
		attributes("Created-By": "PonySDK")
		attributes("Built-By": "PonySDK")
		attributes("License-Title": "Apache License 2.0")
		attributes("Specification-Title": "PonySDK")
	    attributes("Specification-Version": version)
	    attributes("Specification-Vendor": "PonySDK")
	    attributes("Implementation-Title": "PonySDK")
	    attributes("Implementation-Version": version)
	    attributes("Implementation-Vendor-Id": "com.ponysdk")
		attributes("Implementation-Vendor": "PonySDK")
	    attributes("Revision": revision)
	    attributes("Classifier": "sources")
	    attributes("Date": timestamp + " / " + new Date().toGMTString())
	}
}

task javadocJar(type: Jar, dependsOn:javadoc) {
     classifier = 'javadoc'
     from javadoc.destinationDir
     /**
     title = 'PonySDK javadoc'
    excludes = ['com.ponysdk.ui.terminal']
    doLast {
        copy {
            from javadocResources
            into buildDir.name + '/docs/javadoc';
        }
    }
     **/
    
	manifest {
		def cmd = "git rev-parse HEAD"
	    def proc = cmd.execute()
	    ext.revision = proc.text.trim()
	    ext.timestamp = (int)(new Date().getTime()/1000)
	    
		attributes("Manifest-Version": "1.0")
		attributes("Created-By": "PonySDK")
		attributes("Built-By": "PonySDK")
		attributes("License-Title": "Apache License 2.0")
		attributes("Specification-Title": "PonySDK")
	    attributes("Specification-Version": version)
	    attributes("Specification-Vendor": "PonySDK")
	    attributes("Implementation-Title": "PonySDK")
	    attributes("Implementation-Version": version)
	    attributes("Implementation-Vendor-Id": "com.ponysdk")
		attributes("Implementation-Vendor": "PonySDK")
	    attributes("Revision": revision)
	    attributes("Classifier": "javadocs")
	    attributes("Date": timestamp + " / " + new Date().toGMTString())
	}
}

test {
    classpath = files(resourcesCoreTest, gwtOutputDirName) + classpath
    afterSuite { desc, result -> 
    	if (!desc.parent) {
    		println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
    	}
    }
}

// add javadoc/source jar tasks as artifacts
artifacts {
     archives sourcesJar
     archives javadocJar
}


def copyLib(configurations, dest) { 
	println 'copying libs to #' + dest
	copy {
		from configurations
		into dest
		rename '(.*)-(.*).jar', '$1.jar'
	}
}

task copyAllLibs << {
	copyLib(configurations.gwt, 'libs/gwt');
	copyLib(configurations.spring, 'libs/spring');
	copyLib(configurations.sl4j, 'libs/logging');
	copyLib(configurations.log4j, 'libs/logging');
	copyLib(configurations.hibernate, 'libs/hibernate');
	copyLib(configurations.jasper, 'libs/jasper');
	copyLib(configurations.mongodb, 'libs/mongodb');
	copyLib(configurations.selenium, 'libs/tests');
	copyLib(configurations.json_jackson, 'libs/json_jackson');
	copyLib(configurations.jetty, 'libs/jetty');
	copyLib(configurations.commons, 'libs/commons');
}

task sendTo(type: Copy) {
	def outputdir = System.getProperty("jar.destination", ".");
	println('copying jars to: ' + outputdir)
	
	from file("$buildDir/libs")
	into file(outputdir)
}

clean.dependsOn(cleanGenerated)
compileJava.dependsOn(generate)
jar.dependsOn(compileTerminal)
assemble.dependsOn(copyAllLibs)
apply plugin: 'java'

sourceCompatibility = 1.6

ext{
	srcSample = 'src/main/java'
	srcGenerated = 'src-generated/main/java'
	srcTrading = 'src-trading/main/java'
	ponysdkPath = project.rootDir.path + '/../' + 'ponysdk'
	packageOutputDirName = buildDir.name + '/package'
}

repositories {
    mavenCentral()
    maven {
    	url "https://github.com/PonySDK/Maven/raw/master/ext"
	}
	maven {
        url "http://oss.sonatype.org/content/repositories/snapshots"
    }
}

configurations {
	java2html
	compile {
		extendsFrom java2html
	}
	runtime {
		extendsFrom java2html
	}
}

dependencies {
	java2html 'de.java2html:java2html:1.0'
	compile project(':ponysdk')
	compile fileTree (dir: 'libs', includes: ['*.jar']) 
	runtime project(':ponysdk')
}

sourceSets {
	main {
		java {
			srcDir srcSample
			srcDir srcGenerated
			srcDir srcTrading
		}
	}
}

task cleanGenerated(type: Delete){
  delete srcGenerated
}

task cleanDebug(type: Delete) {
  delete 'debug'
}

task generateServices{
}

task generateSkeleton(type: JavaExec) {
	description = 'Generate skeletons'
	main = 'com.ponysdk.generator.Generator'
	inputs.dir file('src/main/resources/spec')
	outputs.dir file(srcGenerated)
	classpath {
		[
			project(':ponysdk').sourceSets.main.output,
			project(':ponysdk').configurations.sl4j
		]
	}
	args = [
		'src/main/resources/spec',
		srcGenerated
		]
}

task generateProxyBuilder(type: JavaExec) {
	description = 'Generate spring proxybuilder'
	main = 'com.ponysdk.spring.ProxyBuilderGenerator'
	inputs.dir file('src/main/resources/spec')
	outputs.dir file(srcGenerated)
	classpath {
		[
			project(':ponysdk').sourceSets.main.output,
			project(':ponysdk').configurations.sl4j,
			project(':ponysdk').configurations.spring
		]
	}
	args = [
		'src/main/resources/spec',
		srcGenerated
		]
}

task generateSkeleton2(type: JavaExec) {
	description = 'Generate skeletons trading sample'
	main = 'com.ponysdk.generator.Generator'
	inputs.dir file('src-trading/main/resources/spec')
	outputs.dir file(srcGenerated)
	classpath {
		[
			project(':ponysdk').sourceSets.main.output,
			project(':ponysdk').configurations.sl4j
		]
	}
	args = [
		'src-trading/main/resources/spec',
		srcGenerated
		]
}

task copyAllLibs << {
	project(':ponysdk').copyLib(configurations.java2html, 'libs/java2html');
}

task createWrapper(type: Wrapper) {
    gradleVersion = '1.7'
}

task createPackage << {

	project.ext.ponysdkWarResourcesPath = ponysdkPath + '/' + project(':ponysdk').warResources

	println 'Building war'
	println 'ponysdk path: ' + ponysdkPath
	println 'ponysdk war path: ' + ponysdkWarResourcesPath
	
	
	copy {
		from configurations.java2html
		from project(':ponysdk').configurations.sl4j
		from project(':ponysdk').configurations.spring
		from project(':ponysdk').configurations.gwt
		from project(':ponysdk').buildDir.path + '/libs'
		into packageOutputDirName + '/lib'
	}
	copy {
		from sourceSets.main.java
		from sourceSets.main.output
		into packageOutputDirName + '/war/WEB-INF/classes'
	}
	copy {
		from 'etc'
		into packageOutputDirName + '/etc'
	}
	copy {
		from ponysdkWarResourcesPath
		into packageOutputDirName + '/war'
	}

	delete packageOutputDirName + '/start.bat'
	delete packageOutputDirName + '/start.sh'

	def f = new File(packageOutputDirName + '/start.bat')
	def writer = f.newWriter("UTF-8", true)
	writer.write("java -server -cp .;etc/;lib/* com.ponysdk.core.main.Main port=8081 contextName=sample war=war/\n")
	writer.write("pause\n")
	writer.close()

	f = new File(packageOutputDirName + '/start.sh')
	writer = f.newWriter("UTF-8", true)
	writer.write("java -server -cp .:etc/:lib/* com.ponysdk.core.main.Main port=8081 contextName=sample war=war/\n")
	writer.close()
}

jar {
	doLast {
		tasks.createPackage.execute()
	}
}

assemble.dependsOn(copyAllLibs)
generateServices.dependsOn(generateSkeleton)
generateServices.dependsOn(generateSkeleton2)
generateServices.dependsOn(generateProxyBuilder)
compileJava.dependsOn(generateServices)
generateServices.dependsOn(cleanGenerated)
