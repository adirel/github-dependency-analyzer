// Establish version and status
ext.githubProjectName = rootProject.name // Change if github project name is not the same as the root project's name

apply plugin: 'idea'

buildscript {
    repositories {
        mavenCentral()
        mavenRepo url: "http://repo1.maven.org/maven2"
        mavenRepo url: "http://repo.springsource.org/libs-release/"
        mavenRepo url: "http://repo.codahale.com/"
        mavenRepo url: "http://repo.springsource.org/snapshot"
    }
    apply from: file('gradle/buildscript.gradle'), to: buildscript
}

apply plugin: 'idea-utils'

allprojects {
    repositories {
        mavenCentral()
        mavenRepo url: "http://repo1.maven.org/maven2"
        mavenRepo url: "http://repo.springsource.org/libs-release/"
        mavenRepo url: "http://repo.codahale.com/"
        mavenRepo url: "http://repo.springsource.org/snapshot"
    }
}

apply from: file('gradle/convention.gradle')
apply from: file('gradle/maven.gradle')
//apply from: file('gradle/check.gradle')
//apply from: file('gradle/license.gradle')
//apply from: file('gradle/release.gradle')

subprojects {
    group = "net.thirty2.${githubProjectName}" // TEMPLATE: Set to organization of project

    dependencies {
        testCompile(group: 'junit', name: 'junit', version: junitVersion) {
            exclude(module: 'hamcrest-core')
        }
        testCompile "org.mockito:mockito-core:${mockitoVersion}"
        testCompile "org.hamcrest:hamcrest-all:${hamcrestVersion}"
        testCompile "org.easytesting:fest-assert-core:${easytestingVersion}"
    }
}

project(':halfpipe-common') {
    apply plugin: 'java'
    description = 'Halfpipe Common'
    dependencies {
        compile "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
        compile "com.google.guava:guava:${guavaVersion}"
        compile "org.hibernate:hibernate-validator:${hibernateValidatorVersion}"
        compile(group: 'com.netflix.archaius', name: 'archaius-core', version: netfixArchaiusVersion) {
            exclude(module: 'slf4j-api')
        }
        compile "org.springframework:spring-context:${springVersion}"
    }
}

project(':halfpipe-core') {
    apply plugin: 'java'
    description = 'Halfpipe Core'

    dependencies {
        compile project(':halfpipe-common')
        compile "org.eclipse.jetty:jetty-server:${jettyVersion}"
        compile "org.eclipse.jetty:jetty-util:${jettyVersion}"
        compile "org.eclipse.jetty:jetty-servlet:${jettyVersion}"
        compile "org.eclipse.jetty:jetty-webapp:${jettyVersion}"
        compile "org.springframework:spring-webmvc:${springVersion}"
        compile(group: 'org.springframework.security', name: 'spring-security-core', version: springSecurityVersion) {
            exclude(module: 'org.springframework.aop')
        }
        compile 'org.springframework:spring-aop:${springVersion}'
        compile(group: 'org.springframework.security', name: 'spring-security-web', version: springSecurityVersion) {
            exclude(module: 'spring-jdbc')
            exclude(module: 'spring-tx')
        }
        compile "org.springframework:spring-jdbc:${springVersion}"
        compile "org.springframework:spring-tx:${springVersion}"
        compile "org.springframework.security:spring-security-config:${springSecurityVersion}"
        compile "org.springframework.security:spring-security-javaconfig:${springSecurityJavaConfigVersion}"
        compile "org.springframework.shell:spring-shell:${springShellVersion}"
        compile "cglib:cglib-nodep:${cglibVersion}"
        compile "javax.inject:javax.inject:${javaxInjectVersion}"
        compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
        compile "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${jacksonVersion}"
        compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}"
        compile "joda-time:joda-time:${jodaTimeVersion}"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:${jacksonDatatypeVersion}"
        compile "com.sun.jersey:jersey-json:${jerseyVersion}"
        compile "com.sun.jersey:jersey-core:${jerseyVersion}"
        compile "com.sun.jersey:jersey-server:${jerseyVersion}"
        compile "com.sun.jersey:jersey-servlet:${jerseyVersion}"
        compile(group: 'com.sun.jersey.contribs', name: 'jersey-spring', version: jerseyVersion) {
            exclude(module: 'spring')
            exclude(module: 'spring-aop')
            exclude(module: 'spring-core')
            exclude(module: 'spring-web')
            exclude(module: 'spring-beans')
            exclude(module: 'spring-context')
        }
        compile "com.sun.jersey:jersey-client:${jerseyVersion}"
        compile "com.netflix.archaius:archaius-core:${netfixArchaiusVersion}"
        compile "com.yammer.metrics:metrics-core:${metricsVersion}"
        compile "com.yammer.metrics:metrics-jetty:${metricsVersion}"
        compile "com.yammer.metrics:metrics-spring:${metricsVersion}"
        compile(group: 'com.yammer.metrics', name: 'metrics-jersey', version: metricsVersion) {
            exclude(module: 'jersey-core')
            exclude(module: 'jersey-json')
            exclude(module: 'jersey-server')
        }
        compile "com.yammer.metrics:metrics-servlet:${metricsVersion}"
        compile "com.yammer.metrics:metrics-web:${metricsVersion}"
        compile "com.yammer.metrics:metrics-logback:${metricsVersion}"
        compile(group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-guava', version: jacksonDatatypeVersion) {
            exclude(module: 'guava')
        }
        compile "com.google.guava:guava:${guavaVersion}"
        compile "commons-cli:commons-cli:${commonsCliVersion}"
        compile "commons-io:commons-io:${commonsIoVersion}"
        compile "javax.servlet:javax.servlet-api:${javaxServletVersion}"
        compile "org.yaml:snakeyaml:${snakeYamlVersion}"
        compile "org.slf4j:slf4j-api:${slf4jVersion}"
        compile "org.slf4j:jul-to-slf4j:${slf4jVersion}"
        compile "org.slf4j:log4j-over-slf4j:${slf4jVersion}"
        compile "ch.qos.logback:logback-core:${logbackVersion}"
        compile "ch.qos.logback:logback-classic:${logbackVersion}"

    }
}

project(':halfpipe-example') {
    jar.enabled = true
    apply plugin: 'java'
    apply plugin: 'war'
    apply plugin: 'fatjar'
    description = 'Halfpipe Example'

    dependencies {
        compile project(':halfpipe-core')
    }

    fatJar {
        dependsOn jar
        manifest { attributes 'Main-Class': 'halfpipe.example.ExampleApp' }
        exclude('META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA')
    }

    fatJarPrepareFiles {
        include 'META-INF/spring.handlers'
        include 'META-INF/spring.schemas'
    }

    assemble {
        it.dependsOn fatJar
    }
}

project(":halfpipe-scala_${scalaVersion}") {
    apply plugin: 'scala'

    description = "Halfpipe for Scala ${scalaVersion}"

    tasks.withType(ScalaCompile) {
        scalaCompileOptions.useAnt = false
    }

    dependencies {
        scalaTools "org.scala-lang:scala-compiler:${scalaVersion}"
        scalaTools "org.scala-lang:scala-library:${scalaVersion}"

        testCompile "org.scala-lang:scala-compiler:${scalaVersion}"
        testCompile "org.scalatest:scalatest_${scalaPrefixVersion}:${scalaTestVersion}"

        compile project(':halfpipe-core')
        compile "org.scala-lang:scala-library:${scalaVersion}"
        compile "com.fasterxml.jackson.module:jackson-module-scala_${scalaPrefixVersion}:${jacksonScalaVersion}"
        compile(group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-guava', version: jacksonDatatypeVersion) {
            exclude(module: 'guava')
        }
        compile "org.scala-lang:jline:${scalaVersion}"
        compile "com.netflix.archaius:archaius-scala:${netfixArchaiusVersion}"
        compile(group: 'javax.servlet', name: 'javax.servlet-api', version: javaxServletVersion) {
            ext.provided = true
        }
        compile(group: 'org.springframework.security', name: 'spring-security-openid', version: springSecurityVersion) {
            ext.provided = true
        }
    }
}

project(':halfpipe-scala-example') {
    jar.enabled = true
    apply plugin: 'war'
    apply plugin: 'fatjar'
    apply plugin: 'scala'

    description = 'Halfpipe Scala Example'

    tasks.withType(ScalaCompile) {
        scalaCompileOptions.useAnt = false
    }

    fatJar {
        dependsOn jar
        manifest { attributes 'Main-Class': 'halfpipe.scalaexample.ExampleScalaApp' }
        exclude('META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA')
    }

    fatJarPrepareFiles {
        include 'META-INF/spring.handlers'
        include 'META-INF/spring.schemas'
    }

    assemble {
        it.dependsOn fatJar
    }

    dependencies {
        scalaTools "org.scala-lang:scala-compiler:${scalaVersion}"
        scalaTools "org.scala-lang:scala-library:${scalaVersion}"

        compile project(":halfpipe-scala_${scalaVersion}")
        compile "org.freemarker:freemarker:${freemarkerVersion}"
        compile(group: 'javax.servlet', name: 'javax.servlet-api', version: javaxServletVersion) {
            ext.provided = true
        }
    }
}


project(':halfpipe-groovy-example') {
    jar.enabled = true
    apply plugin: 'groovy'
    apply plugin: 'fatjar'

    fatJar {
        dependsOn jar
        manifest { attributes 'Main-Class': 'halfpipe.groovyexample.ExampleGroovyApp' }
        exclude('META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA')
    }

    fatJarPrepareFiles {
        include 'META-INF/spring.handlers'
        include 'META-INF/spring.schemas'
    }

    assemble {
        it.dependsOn fatJar
    }

    dependencies {
        compile project(':halfpipe-core')

        compile 'org.codehaus.groovy:groovy-all:2.1.2'
    }
}

