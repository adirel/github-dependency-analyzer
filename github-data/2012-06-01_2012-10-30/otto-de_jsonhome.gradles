apply plugin: 'idea'
apply plugin: 'eclipse'

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'signing'

    group = 'de.otto'
    version = '0.3.6'

        targetCompatibility = "1.6"
        sourceCompatibility = "1.6"

    repositories {
        mavenCentral()

        add(new org.apache.ivy.plugins.resolver.FileSystemResolver()) {
            name = 'localLibRepository'
            addArtifactPattern "$projectDir/../lib/[organisation]/[module]-[revision](-[classifier]).[ext]"
            descriptor = 'optional'
            checkmodified = true
        }

        add(new org.apache.ivy.plugins.resolver.FileSystemResolver()) {
            name = 'localExampleRepository'
            addArtifactPattern "$projectDir/../../lib/[organisation]/[module]-[revision](-[classifier]).[ext]"
            descriptor = 'optional'
            checkmodified = true
        }

    }

    jar {
        manifest.attributes provider: 'gradle'
    }

    test {
        useTestNG()
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

}


dependencies {
    compile project(':jsonhome-core')
    compile 'org.apache.httpcomponents:httpclient:4.2.2'
    compile 'org.apache.httpcomponents:httpclient-cache:4.2.2'
    testCompile 'org.testng:testng:6.3.1'
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            pom.project {
                name 'jsonhome-client'
                packaging 'jar'
                description 'Generator library of the jsonhome project.'
                url 'http://github.com/otto-de/jsonhome'

                scm {
                    url 'scm:git@github.com:otto-de/jsonhome.git'
                    connection 'scm:git@github.com:otto-de/jsonhome.git'
                    developerConnection 'scm:git@github.com:otto-de/jsonhome.git'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'gsteinacker'
                        name 'Guido Steinacker'
                    }
                }
            }
        }
    }
}
dependencies {
    // uri-template library:
    compile 'com.damnhandy:handy-uri-templates:1.1.5'
    // jackson json mapper:
    compile 'org.codehaus.jackson:jackson-core-asl:1.9.2'
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.2'
    // logging:
    compile 'org.slf4j:slf4j-api:1.7.2'
    testCompile 'ch.qos.logback:logback-core:1.0.6'
    testCompile 'ch.qos.logback:logback-classic:1.0.6'
    // testng:
    testCompile 'org.testng:testng:6.3.1'
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            pom.project {
                name 'jsonhome-core'
                packaging 'jar'
                description 'Core library of the jsonhome project.'
                url 'http://github.com/otto-de/jsonhome'

                scm {
                    url 'scm:git@github.com:otto-de/jsonhome.git'
                    connection 'scm:git@github.com:otto-de/jsonhome.git'
                    developerConnection 'scm:git@github.com:otto-de/jsonhome.git'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'gsteinacker'
                        name 'Guido Steinacker'
                    }
                }
            }
        }
    }
}apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'idea'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':jsonhome-jersey')
    compile 'com.sun.jersey.contribs:jersey-freemarker:1.14'
    compile 'com.sun.jersey:jersey-core:1.14'
    compile "com.sun.jersey:jersey-json:1.14"
    compile 'com.sun.jersey:jersey-server:1.14'
    compile 'com.sun.jersey:jersey-servlet:1.14'
    compile 'ch.qos.logback:logback-core:1.0.6'
    compile 'ch.qos.logback:logback-classic:1.0.6'
    providedCompile 'javax.servlet:servlet-api:2.5'

    jettyRun.contextPath = '/hellojersey'
    jettyRun.httpPort = 8082
}apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'idea'

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.springframework:spring-webmvc:3.1.2.RELEASE'
    compile 'ch.qos.logback:logback-core:1.0.6'
    compile 'ch.qos.logback:logback-classic:1.0.6'
    compile project(':jsonhome-spring')
    providedCompile 'javax.servlet:servlet-api:2.5'
}

jettyRun.contextPath = '/helloworld'
jettyRun.httpPort = 8080apply plugin: 'war'
apply plugin: 'jetty'

dependencies {
    compile 'ch.qos.logback:logback-core:1.0.6'
    compile 'ch.qos.logback:logback-classic:1.0.6'
    compile project(':jsonhome-core')
    compile project(':jsonhome-generator')
    compile project(':jsonhome-spring')
    compile project(':jsonhome-client')
    compile project(':jsonhome-registry')
    providedCompile 'javax.servlet:servlet-api:2.5'
}

jettyRun.contextPath = '/'
jettyRun.httpPort = 8082
apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'idea'

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.springframework:spring-webmvc:3.1.3.RELEASE'
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.7.1'
    compile 'org.freemarker:freemarker:2.3.18'
    compile 'ch.qos.logback:logback-core:1.0.6'
    compile 'ch.qos.logback:logback-classic:1.0.6'
    compile project(':jsonhome-spring')
    providedCompile 'javax.servlet:servlet-api:2.5'
}

jettyRun.contextPath = '/shop'
jettyRun.httpPort = 8081

dependencies {
    compile project(':jsonhome-core')
    compile 'org.markdown:markdown4j:2.2'
    compile 'org.springframework:spring-core:3.1.3.RELEASE'
    testCompile 'org.testng:testng:6.3.1'
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            pom.project {
                name 'jsonhome-generator'
                packaging 'jar'
                description 'Generator library of the jsonhome project.'
                url 'http://github.com/otto-de/jsonhome'

                scm {
                    url 'scm:git@github.com:otto-de/jsonhome.git'
                    connection 'scm:git@github.com:otto-de/jsonhome.git'
                    developerConnection 'scm:git@github.com:otto-de/jsonhome.git'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'gsteinacker'
                        name 'Guido Steinacker'
                    }
                }
            }
        }
    }
}
dependencies {
    compile project(':jsonhome-core')
    compile project(':jsonhome-generator')
    compile 'com.sun.jersey:jersey-core:1.14'
    compile 'com.sun.jersey:jersey-json:1.14'
    compile 'com.sun.jersey:jersey-server:1.14'
    compile 'org.reflections:reflections:0.9.8'
    testCompile 'org.testng:testng:6.3.1'
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            pom.project {
                name 'jsonhome-jersey'
                packaging 'jar'
                description 'Jersey library of the jsonhome project.'
                url 'http://github.com/otto-de/jsonhome'

                scm {
                    url 'scm:git@github.com:otto-de/jsonhome.git'
                    connection 'scm:git@github.com:otto-de/jsonhome.git'
                    developerConnection 'scm:git@github.com:otto-de/jsonhome.git'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'gsteinacker'
                        name 'Guido Steinacker'
                    }
                    developer {
                        id 'SebastianSchroeder'
                        name 'Sebastian Schroeder'
                    }
                }
            }
        }
    }
}dependencies {
    compile 'org.springframework:spring-webmvc:3.1.3.RELEASE'
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.7.1'
    compile 'org.freemarker:freemarker:2.3.18'
    compile project(':jsonhome-core')
    compile project(':jsonhome-generator')
    compile project(':jsonhome-spring')
    compile project(':jsonhome-client')
    testCompile 'org.testng:testng:6.3.1'
    testCompile 'org.springframework:spring-test:3.1.3.RELEASE'
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            pom.project {
                name 'jsonhome-registry'
                packaging 'jar'
                description 'Library used to write json-home registries for multiple json-home sources.'
                url 'http://github.com/otto-de/jsonhome'

                scm {
                    url 'scm:git@github.com:otto-de/jsonhome.git'
                    connection 'scm:git@github.com:otto-de/jsonhome.git'
                    developerConnection 'scm:git@github.com:otto-de/jsonhome.git'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'gsteinacker'
                        name 'Guido Steinacker'
                    }
                }
            }
        }
    }
}dependencies {
    compile project(':jsonhome-core')
    compile project(':jsonhome-generator')
    compile 'org.freemarker:freemarker:2.3.18'
    compile 'org.springframework:spring-webmvc:3.1.3.RELEASE'
    compile 'cglib:cglib-nodep:2.2'
    compile 'javax.servlet:servlet-api:2.5'
    testCompile 'org.testng:testng:6.3.1'
    testCompile 'org.springframework:spring-test:3.1.3.RELEASE'
    testCompile 'org.springframework:spring-aop:3.1.3.RELEASE'
    testCompile "org.aspectj:aspectjrt:1.6.12"
    testCompile "org.aspectj:aspectjweaver:1.6.12"

}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            pom.project {
                name 'jsonhome-spring'
                packaging 'jar'
                description 'Spring library of the jsonhome project.'
                url 'http://github.com/otto-de/jsonhome'

                scm {
                    url 'scm:git@github.com:otto-de/jsonhome.git'
                    connection 'scm:git@github.com:otto-de/jsonhome.git'
                    developerConnection 'scm:git@github.com:otto-de/jsonhome.git'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'gsteinacker'
                        name 'Guido Steinacker'
                    }
                }
            }
        }
    }
}