<!--===========================================================================
  This is the build file for the Pentaho BI Platform API project.
  
  This build file will use the subfloor.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.
  
  See common_build.xml for more details
============================================================================-->
<project name="API" basedir="." default="default">

	<description>
	  This build file is used to create the API project
		and works with the subfloor.xml file.
	</description>

	<!-- The continuous target is used by CI ... this is the list of -->
	<!-- tasks that the CI machine will run.                         -->
	<!-- DO NOT change the CI machine's ant task .. change this list -->
	<target name="continuous" 
	        depends="clean-all,resolve,publish" />

	<!-- Import the common_build.xml file which contains all the default tasks -->
	<import file="build-res/subfloor.xml"/>

    <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN common_build.xml.
    --> 

</project>
<!-- ===============================================================================
     project    Pentaho Application Server Deployments
     description main build file for platform deployments

     For instructions on how to use this file, read the comments in each target and see
     http://wiki.pentaho.org/display/PentahoDoc/Manual+Deployment+of+Pentaho
     ================================================================================ -->
<project name="pentaho-deployments">
	<description>
            Pentaho BI Platform deployment build process...
    </description>

	<property file="override.properties" />
	<property file="version.properties" />
	<property file="build.properties" />
  
  <!-- the impl properties are used to create the manifest file -->
  <property name="impl.title" value="Pentaho BI Platform Community Edition" />
  <property name="impl.vendor" value="Pentaho Corporation" />

	<!-- library.path contains the libraries that compose the classpath, which is used in the MANIFEST.MF file -->
	<path id="library.path">
		<fileset dir="${build.third-party.dir}">
			<excludesfile name="excludejars.jboss" />
			<exclude name="**/licenses/*" />
		</fileset>
		<fileset dir="${build.jars.dir}" />
	</path>

	<!-- library.path contains the libraries that compose the classpath, which is used in the MANIFEST.MF file -->
	<path id="library.path.no.portal">
		<fileset dir="${build.third-party.dir}">
			<excludesfile name="excludejars-noportal.jboss" />
			<exclude name="**/licenses/*" />
		</fileset>
		<fileset dir="${build.jars.dir}" />
	</path>

	<!-- convert the libraries to be included in the classpath attribute of the MANIFEST.MF file -->
	<pathconvert property="lib.project.manifest.classpath" pathsep=" ">
		<path refid="library.path" />
		<mapper>
			<chainedmapper>
				<flattenmapper />
				<globmapper from="*" to="/lib/*" />
			</chainedmapper>
		</mapper>
	</pathconvert>

	<!-- convert the libraries to be included in the classpath attribute of the MANIFEST.MF file -->
	<pathconvert property="lib.project.manifest.classpath.no.portal" pathsep=" ">
		<path refid="library.path.no.portal" />
		<mapper>
			<chainedmapper>
				<flattenmapper />
				<globmapper from="*" to="/lib/*" />
			</chainedmapper>
		</mapper>
	</pathconvert>

	<!-- ============================================================================================================ -->


	<path id="hsqldb.library.path">
		<fileset dir="${build.third-party.dir}">
			<excludesfile name="excludejars.jboss" />
			<exclude name="**/licenses/*" />
			<exclude name="**/quartz-oracle-1.7.2.jar" />
		</fileset>
		<fileset dir="${build.jars.dir}" />
	</path>


	<path id="hsqldb.library.path.no.portal">
		<fileset dir="${build.third-party.dir}">
			<excludesfile name="excludejars-noportal.jboss" />
			<exclude name="**/licenses/*" />
			<exclude name="**/quartz-oracle-1.7.2.jar" />
		</fileset>
		<fileset dir="${build.jars.dir}" />
	</path>


	<path id="oracle10g.library.path">
		<fileset dir="${build.third-party.dir}">
			<excludesfile name="excludejars.jboss" />
			<exclude name="**/licenses/*" />
			<exclude name="**/quartz-1.7.2.jar" />
		</fileset>
		<fileset dir="${build.jars.dir}" />
	</path>


	<path id="oracle10g.library.path.no.portal">
		<fileset dir="${build.third-party.dir}">
			<excludesfile name="excludejars-noportal.jboss" />
			<exclude name="**/licenses/*" />
			<exclude name="**/quartz-1.7.2.jar" />
		</fileset>
		<fileset dir="${build.jars.dir}" />
	</path>


	<pathconvert property="hsqldb.lib.project.manifest.classpath" pathsep=" ">
		<path refid="hsqldb.library.path" />
		<mapper>
			<chainedmapper>
				<flattenmapper />
				<globmapper from="*" to="/lib/*" />
			</chainedmapper>
		</mapper>
	</pathconvert>


	<pathconvert property="hsqldb.lib.project.manifest.classpath.no.portal" pathsep=" ">
		<path refid="hsqldb.library.path.no.portal" />
		<mapper>
			<chainedmapper>
				<flattenmapper />
				<globmapper from="*" to="/lib/*" />
			</chainedmapper>
		</mapper>
	</pathconvert>

	<pathconvert property="oracle10g.lib.project.manifest.classpath" pathsep=" ">
		<path refid="oracle10g.library.path" />
		<mapper>
			<chainedmapper>
				<flattenmapper />
				<globmapper from="*" to="/lib/*" />
			</chainedmapper>
		</mapper>
	</pathconvert>


	<pathconvert property="oracle10g.lib.project.manifest.classpath.no.portal" pathsep=" ">
		<path refid="oracle10g.library.path.no.portal" />
		<mapper>
			<chainedmapper>
				<flattenmapper />
				<globmapper from="*" to="/lib/*" />
			</chainedmapper>
		</mapper>
	</pathconvert>



	<!-- ===================================================================
        target: init
       =================================================================== -->
	<target name="init">
		<!-- make dist directory structure -->
		<mkdir dir="${build.wars.dir}" />
	</target>

	<!-- ===================================================================
		  target: init-pentaho-wars

		  This target makes replacements for database host, port, username, and password keys
		  in the hibernate.cfg.xml files and the datasoure files used by
		  jboss. This is what makes your pentaho war database specific.
		  Check the build.properties file for the default replacements values.
		  You can override these if you'd like. Note that this file looks for
		  the defaults. If you are using this target as part of the manual
		  deployments, the files in the pentaho-res folder should not be modified
		  by the build. The entire folder is copied to the /build folder, and the
		  replacements are made there. This way, the manual deployments package 
		  stays clean, and you can run the build multiple times with different 
		  values for the host, port, usernames, and passwords.
		 =================================================================== -->
	<target name="init-pentaho-wars">
		<mkdir dir="${build.wars.dir}" />
	</target>

	<!-- ===================================================================
         target: init-pentaho-ears
         =================================================================== -->
	<target name="init-pentaho-ears">
		<mkdir dir="${build.ears.dir}" />

		<mkdir dir="${build.res.dir}" />

		<copy todir="${build.res.dir}" overwrite="true">
			<fileset dir="${server.resource.dir}">
				<include name="**/ear/**"/>
				<include name="**/jboss/datasources/**"/>
			</fileset>
		</copy>
		
		<!--
		<pathconvert property="hsqldb.ear.java.modules" pathsep=" ">
			<path refid="hsqldb.library.path" />
			<mapper>
				<chainedmapper>
					<flattenmapper />
					<globmapper from="*" to="&lt;module&gt;&lt;java&gt;lib/*&lt;/java&gt;&lt;/module&gt;" />
				</chainedmapper>
			</mapper>
		</pathconvert>

		<pathconvert property="myslq5.ear.java.modules" pathsep=" ">
			<path refid="hsqldb.library.path" />
			<mapper>
				<chainedmapper>
					<flattenmapper />
					<globmapper from="*" to="&lt;module&gt;&lt;java&gt;lib/*&lt;/java&gt;&lt;/module&gt;" />
				</chainedmapper>
			</mapper>
		</pathconvert>

		<pathconvert property="postgresql.ear.java.modules" pathsep=" ">
			<path refid="hsqldb.library.path" />
			<mapper>
				<chainedmapper>
					<flattenmapper />
					<globmapper from="*" to="&lt;module&gt;&lt;java&gt;lib/*&lt;/java&gt;&lt;/module&gt;" />
				</chainedmapper>
			</mapper>
		</pathconvert>

		<pathconvert property="oracle10g.ear.java.modules" pathsep=" ">
			<path refid="oracle10g.library.path" />
			<mapper>
				<chainedmapper>
					<flattenmapper />
					<globmapper from="*" to="&lt;module&gt;&lt;java&gt;lib/*&lt;/java&gt;&lt;/module&gt;" />
				</chainedmapper>
			</mapper>
		</pathconvert>

		<pathconvert property="hsqldb.ear.java.modules.no.portal" pathsep=" ">
			<path refid="hsqldb.library.path.no.portal" />
			<mapper>
				<chainedmapper>
					<flattenmapper />
					<globmapper from="*" to="&lt;module&gt;&lt;java&gt;lib/*&lt;/java&gt;&lt;/module&gt;" />
				</chainedmapper>
			</mapper>
		</pathconvert>

		<pathconvert property="mysql5.ear.java.modules.no.portal" pathsep=" ">
			<path refid="hsqldb.library.path.no.portal" />
			<mapper>
				<chainedmapper>
					<flattenmapper />
					<globmapper from="*" to="&lt;module&gt;&lt;java&gt;lib/*&lt;/java&gt;&lt;/module&gt;" />
				</chainedmapper>
			</mapper>
		</pathconvert>

		<pathconvert property="oracle10g.ear.java.modules.no.portal" pathsep=" ">
			<path refid="oracle10g.library.path.no.portal" />
			<mapper>
				<chainedmapper>
					<flattenmapper />
					<globmapper from="*" to="&lt;module&gt;&lt;java&gt;lib/*&lt;/java&gt;&lt;/module&gt;" />
				</chainedmapper>
			</mapper>
		</pathconvert>

		<pathconvert property="postgresql.ear.java.modules.no.portal" pathsep=" ">
			<path refid="hsqldb.library.path.no.portal" />
			<mapper>
				<chainedmapper>
					<flattenmapper />
					<globmapper from="*" to="&lt;module&gt;&lt;java&gt;lib/*&lt;/java&gt;&lt;/module&gt;" />
				</chainedmapper>
			</mapper>
		</pathconvert>
    -->
		
		<copy file="${build.res.dir}/ear/application.xml" tofile="${build.ears.dir}/jboss/portal/hsqldb/application.xml" overwrite="true" />
		<copy file="${build.res.dir}/ear/application.xml" tofile="${build.ears.dir}/jboss/portal/mysql5/application.xml" overwrite="true" />
		<copy file="${build.res.dir}/ear/application.xml" tofile="${build.ears.dir}/jboss/portal/oracle10g/application.xml" overwrite="true" />
		<copy file="${build.res.dir}/ear/application.xml" tofile="${build.ears.dir}/jboss/portal/postgresql/application.xml" overwrite="true" />

		<copy file="${build.res.dir}/ear/application.xml" tofile="${build.ears.dir}/jboss/no-portal/hsqldb/application.xml" overwrite="true" />
		<copy file="${build.res.dir}/ear/application.xml" tofile="${build.ears.dir}/jboss/no-portal/mysql5/application.xml" overwrite="true" />
		<copy file="${build.res.dir}/ear/application.xml" tofile="${build.ears.dir}/jboss/no-portal/oracle10g/application.xml" overwrite="true" />
		<copy file="${build.res.dir}/ear/application.xml" tofile="${build.ears.dir}/jboss/no-portal/postgresql/application.xml" overwrite="true" />

		<!-- using java module XML as a classpath is not appropriate (BISERVER-2515)
		 
		<replace file="${build.ears.dir}/jboss/portal/hsqldb/application.xml" token="&lt;!- additional web apps -&gt;" value="${hsqldb.ear.java.modules} &lt;!- additional web apps -&gt;" />
		<replace file="${build.ears.dir}/jboss/portal/mysql5/application.xml" token="&lt;!- additional web apps -&gt;" value="${mysql5.ear.java.modules} &lt;!- additional web apps -&gt;" />
		<replace file="${build.ears.dir}/jboss/portal/oracle10g/application.xml" token="&lt;!- additional web apps -&gt;" value="${oracle10g.ear.java.modules} &lt;!- additional web apps -&gt;" />
		<replace file="${build.ears.dir}/jboss/portal/postgresql/application.xml" token="&lt;!- additional web apps -&gt;" value="${postgresql.ear.java.modules} &lt;!- additional web apps -&gt;" />

		<replace file="${build.ears.dir}/jboss/no-portal/hsqldb/application.xml" token="&lt;!- additional web apps -&gt;" value="${hsqldb.ear.java.modules.no.portal} &lt;!- additional web apps -&gt;" />
		<replace file="${build.ears.dir}/jboss/no-portal/mysql5/application.xml" token="&lt;!- additional web apps -&gt;" value="${mysql5.ear.java.modules.no.portal} &lt;!- additional web apps -&gt;" />
		<replace file="${build.ears.dir}/jboss/no-portal/oracle10g/application.xml" token="&lt;!- additional web apps -&gt;" value="${oracle10g.ear.java.modules.no.portal} &lt;!- additional web apps -&gt;" />
		<replace file="${build.ears.dir}/jboss/no-portal/postgresql/application.xml" token="&lt;!- additional web apps -&gt;" value="${postgresql.ear.java.modules.no.portal} &lt;!- additional web apps -&gt;" />
    
    --> 
		
		<manifest file="${build.ears.dir}/jboss/portal/hsqldb/MANIFEST.MF">
			<attribute name="Implementation-Title" value="${impl.title}" />
			<attribute name="Implementation-Version" value="${impl.version}" />
			<attribute name="Implementation-Vendor" value="${impl.vendor}" />
			<attribute name="Class-Path" value="${hsqldb.lib.project.manifest.classpath}" />
		</manifest>

		<manifest file="${build.ears.dir}/jboss/portal/mysql5/MANIFEST.MF">
			<attribute name="Implementation-Title" value="${impl.title}" />
			<attribute name="Implementation-Version" value="${impl.version}" />
			<attribute name="Implementation-Vendor" value="${impl.vendor}" />
			<attribute name="Class-Path" value="${hsqldb.lib.project.manifest.classpath}" />
		</manifest>

		<manifest file="${build.ears.dir}/jboss/portal/oracle10g/MANIFEST.MF">
			<attribute name="Implementation-Title" value="${impl.title}" />
			<attribute name="Implementation-Version" value="${impl.version}" />
			<attribute name="Implementation-Vendor" value="${impl.vendor}" />
			<attribute name="Class-Path" value="${oracle10g.lib.project.manifest.classpath}" />
		</manifest>

		<manifest file="${build.ears.dir}/jboss/portal/postgresql/MANIFEST.MF">
			<attribute name="Implementation-Title" value="${impl.title}" />
			<attribute name="Implementation-Version" value="${impl.version}" />
			<attribute name="Implementation-Vendor" value="${impl.vendor}" />
			<attribute name="Class-Path" value="${hsqldb.lib.project.manifest.classpath}" />
		</manifest>

		<manifest file="${build.ears.dir}/jboss/no-portal/hsqldb/MANIFEST.MF">
			<attribute name="Implementation-Title" value="${impl.title}" />
			<attribute name="Implementation-Version" value="${impl.version}" />
			<attribute name="Implementation-Vendor" value="${impl.vendor}" />
			<attribute name="Class-Path" value="${hsqldb.lib.project.manifest.classpath.no.portal}" />
		</manifest>

		<manifest file="${build.ears.dir}/jboss/no-portal/mysql5/MANIFEST.MF">
			<attribute name="Implementation-Title" value="${impl.title}" />
			<attribute name="Implementation-Version" value="${impl.version}" />
			<attribute name="Implementation-Vendor" value="${impl.vendor}" />
			<attribute name="Class-Path" value="${hsqldb.lib.project.manifest.classpath.no.portal}" />
		</manifest>

		<manifest file="${build.ears.dir}/jboss/no-portal/oracle10g/MANIFEST.MF">
			<attribute name="Implementation-Title" value="${impl.title}" />
			<attribute name="Implementation-Version" value="${impl.version}" />
			<attribute name="Implementation-Vendor" value="${impl.vendor}" />
			<attribute name="Class-Path" value="${oracle10g.lib.project.manifest.classpath.no.portal}" />
		</manifest>

		<manifest file="${build.ears.dir}/jboss/no-portal/postgresql/MANIFEST.MF">
			<attribute name="Implementation-Title" value="${impl.title}" />
			<attribute name="Implementation-Version" value="${impl.version}" />
			<attribute name="Implementation-Vendor" value="${impl.vendor}" />
			<attribute name="Class-Path" value="${hsqldb.lib.project.manifest.classpath.no.portal}" />
		</manifest>
	</target>

	<!-- ===================================================================
        target: war-pentaho-jboss
       =================================================================== -->
	<target name="war-pentaho-jboss" depends="init, init-pentaho-wars, zip-pentaho-style-war, zip-pentaho-portal-layout-war">
		<mkdir dir="${build.wars.dir}/jboss/portal"/>

		<manifest file="${build.wars.dir}/jboss/MANIFEST.MF">
			<attribute name="Implementation-Title" value="${impl.title}" />
			<attribute name="Implementation-Version" value="${impl.version}" />
			<attribute name="Implementation-Vendor" value="${impl.vendor}" />
		</manifest>

		<!-- make war -->
		<zip destfile="${build.wars.dir}/jboss/portal/pentaho.war" duplicate="preserve">
			
			<!-- copy over any custom changes to webapp -->
			<zipfileset dir="custom-pentaho-webapp" />
			
			<zipfileset dir="${build.wars.dir}/jboss" prefix="META-INF">
				<include name="MANIFEST.MF" />
			</zipfileset>
			<zipfileset dir="${webapp.dir}" />
			<zipfileset dir="${build.doc.dir}" />
			<zipfileset dir="${build.third-party.dir}" prefix="WEB-INF/lib">
				<excludesfile name="excludejars.jboss" />
				<exclude name="dom4j.jar" />
				<exclude name="gnu-regexp.jar" />
			</zipfileset>
			<zipfileset dir="${build.jars.dir}" prefix="WEB-INF/lib">
				<!-- exclude name="pentaho-i18n*.jar" / -->
			</zipfileset>
			<zipfileset dir="${build.classes.dir}" prefix="WEB-INF/classes">
				<include name="**/messages/**" />
			</zipfileset>
			<zipfileset dir="${server.resource.dir}/jfreereport" prefix="WEB-INF/classes" />
			<zipfileset dir="${server.resource.dir}/mondrian" prefix="WEB-INF/classes" />
			<zipfileset dir="${server.resource.dir}/log4j" prefix="WEB-INF/classes" />
			<zipfileset dir="${server.resource.dir}/ehcache" prefix="WEB-INF/classes" />
	
		</zip>
	</target>

	<!-- ===================================================================
        target: war-pentaho-jboss-no-portal
       =================================================================== -->
	<target name="war-pentaho-jboss-no-portal" depends="init, init-pentaho-wars, zip-pentaho-style-war">
		<mkdir dir="${build.wars.dir}/jboss/no-portal" />

		<manifest file="${build.wars.dir}/jboss/MANIFEST.MF">
			<attribute name="Implementation-Title" value="${impl.title}" />
			<attribute name="Implementation-Version" value="${impl.version}" />
			<attribute name="Implementation-Vendor" value="${impl.vendor}" />
		</manifest>

		<!-- make war -->
		<zip destfile="${build.wars.dir}/jboss/no-portal/pentaho.war" duplicate="preserve">
			
			<!-- copy over any custom changes to webapp -->
			<zipfileset dir="custom-pentaho-webapp" />
			
			<zipfileset dir="${build.wars.dir}/jboss" prefix="META-INF">
				<include name="MANIFEST.MF" />
			</zipfileset>
			<zipfileset dir="${webapp.dir}">
				  <exclude name="**/WEB-INF/default-object.xml" />
				  <exclude name="**/WEB-INF/jboss-app.xml" />
				  <exclude name="**/WEB-INF/*portlet*.xml" />
				  <exclude name="**/WEB-INF/*portal*.xml" />
				  <exclude name="**/WEB-INF/jboss-classloading.xml" /> <!-- by default JBoss5 WARs deploy with a parent-first="false" isolated classloader -->
			</zipfileset>
			<zipfileset dir="${build.doc.dir}" />
			<zipfileset dir="${build.third-party.dir}" prefix="WEB-INF/lib">
				<!-- pentaho now has a dependency on portal-core-lib.jar. If you don't have jboss-portal installed, you need this -->
				<!-- pentaho now has a dependency on hibernate3.jar. If you don't have jboss-portal installed, you need this -->
				<!-- pentaho now has a dependency on ehcache.jar. If you don't have jboss-portal installed, you need this -->
				<excludesfile name="excludejars-noportal.jboss" />
			</zipfileset>
			<zipfileset dir="${build.jars.dir}" prefix="WEB-INF/lib">
				<excludesfile name="excludejars-noportal.jboss" />
			</zipfileset>
			<zipfileset dir="${build.classes.dir}" prefix="WEB-INF/classes">
				<include name="**/messages/**" />
			</zipfileset>
			<zipfileset dir="${server.resource.dir}/jfreereport" prefix="WEB-INF/classes" />
			<zipfileset dir="${server.resource.dir}/mondrian" prefix="WEB-INF/classes" />
			<zipfileset dir="${server.resource.dir}/log4j" prefix="WEB-INF/classes" />
			<zipfileset dir="${server.resource.dir}/ehcache" prefix="WEB-INF/classes" />
			
		</zip>

	</target>

	<!-- ===================================================================
	        target: war-pentaho-jboss-for-ear

	        This is a reusable target.

	        Current targets that use this target:
	        - war-pentaho-jboss-hsqldb-for-ear
	        - war-pentaho-jboss-mysql5-for-ear
	       =================================================================== -->
	<target name="war-pentaho-jboss-for-ear" depends="init, init-pentaho-wars, zip-pentaho-style-war, zip-pentaho-portal-layout-war">

		<mkdir dir="${build.ears.dir}/jboss/portal" />

		<!-- Remove the libraries from WEB-INF/lib. When creating the ear, they will be placed in the ear's /lib dir -->
		<zip destfile="${build.ears.dir}/jboss/portal/pentaho.war" duplicate="preserve">
			
			<!-- copy over any custom changes to webapp -->
			<zipfileset dir="custom-pentaho-webapp" />
			
			<zipfileset dir="${build.ears.dir}/jboss/portal/${rdbms}" prefix="META-INF">
				<include name="MANIFEST.MF" />
			</zipfileset>
			<zipfileset dir="${webapp.dir}">
				<exclude name="WEB-INF/jboss-app.xml" />
			</zipfileset>
			<zipfileset dir="${build.doc.dir}" />
			<zipfileset dir="${build.classes.dir}" prefix="WEB-INF/classes">
				<include name="**/messages/**" />
			</zipfileset>
			<zipfileset dir="${server.resource.dir}/jfreereport" prefix="WEB-INF/classes" />
			<zipfileset dir="${server.resource.dir}/mondrian" prefix="WEB-INF/classes" />
			<zipfileset dir="${server.resource.dir}/log4j" prefix="WEB-INF/classes" />
			<zipfileset dir="${server.resource.dir}/ehcache" prefix="WEB-INF/classes" />
	
		</zip>

	</target>

	<!-- ===================================================================
		  target: war-pentaho-jboss-for-ear-no-portal

		  This is a reusable target.

		  Current target that use this target:
		  - war-pentaho-jboss-hsqldb-for-ear-no-portal
		  - war-pentaho-jboss-mysql5-for-ear-no-portal
		 =================================================================== -->
	<target name="war-pentaho-jboss-for-ear-no-portal" depends="init, init-pentaho-wars, zip-pentaho-style-war">
		<mkdir dir="${build.wars.dir}/jboss/no-portal" />

		<manifest file="${build.wars.dir}/jboss/MANIFEST.MF">
			<attribute name="Implementation-Title" value="${impl.title}" />
			<attribute name="Implementation-Version" value="${impl.version}" />
			<attribute name="Implementation-Vendor" value="${impl.vendor}" />
		</manifest>

		<!-- make war -->
		<zip destfile="${build.ears.dir}/jboss/no-portal/pentaho.war" duplicate="preserve">
			
			<!-- copy over any custom changes to webapp -->
			<zipfileset dir="custom-pentaho-webapp" />
			
			<zipfileset dir="${build.ears.dir}/jboss/no-portal/${rdbms}" prefix="META-INF">
				<include name="MANIFEST.MF" />
			</zipfileset>
			<zipfileset dir="${webapp.dir}">
			  <exclude name="**/WEB-INF/default-object.xml" />
			  <exclude name="**/WEB-INF/jboss-app.xml" />
			  <exclude name="**/WEB-INF/*portlet*.xml" />
			  <exclude name="**/WEB-INF/*portal*.xml" />
			</zipfileset>
			<zipfileset dir="${build.doc.dir}" />
			<zipfileset dir="${build.third-party.dir}" prefix="WEB-INF/lib">
				<excludesfile name="excludejars-noportal.jboss" />
			</zipfileset>
			<zipfileset dir="${build.jars.dir}" prefix="WEB-INF/lib">
				<excludesfile name="excludejars-noportal.jboss" />
			</zipfileset>
			<zipfileset dir="${build.classes.dir}" prefix="WEB-INF/classes">
				<include name="**/messages/**" />
			</zipfileset>
			<zipfileset dir="${server.resource.dir}/jfreereport" prefix="WEB-INF/classes" />
			<zipfileset dir="${server.resource.dir}/mondrian" prefix="WEB-INF/classes" />
			<zipfileset dir="${server.resource.dir}/log4j" prefix="WEB-INF/classes" />
			<zipfileset dir="${server.resource.dir}/ehcache" prefix="WEB-INF/classes" />
			
		</zip>


	</target>


	<!-- ===================================================================
	        target: war-pentaho-tomcat
	       =================================================================== -->
	<target name="war-pentaho-tomcat" depends="init, init-pentaho-wars, zip-pentaho-style-war">
		<mkdir dir="${build.wars.dir}/tomcat/" />

		<manifest file="${build.wars.dir}/tomcat/MANIFEST.MF">
			<attribute name="Implementation-Title" value="${impl.title}" />
			<attribute name="Implementation-Version" value="${impl.version}" />
			<attribute name="Implementation-Vendor" value="${impl.vendor}" />
		</manifest>

		<!-- war pentaho -->
		<zip destfile="${build.wars.dir}/tomcat/pentaho.war" duplicate="preserve">
			
			<!-- copy over any custom changes to webapp -->
			<zipfileset dir="custom-pentaho-webapp" />
			
			<zipfileset dir="${build.wars.dir}/tomcat" prefix="META-INF">
				<include name="MANIFEST.MF" />
			</zipfileset>
			<zipfileset dir="${webapp.dir}">
				<exclude name="**/WEB-INF/default-object.xml" />
				<exclude name="**/WEB-INF/jboss-app.xml" />
				<exclude name="**/WEB-INF/jboss-portlet.xml" />
				<exclude name="**/WEB-INF/jboss-web.xml" />
				<exclude name="**/WEB-INF/portlet-instances.xml" />
			</zipfileset>
			<zipfileset dir="${build.doc.dir}" />
			<zipfileset dir="${build.third-party.dir}" prefix="WEB-INF/lib">
				<excludesfile name="excludejars.generic" />
				<exclude name="gnu-regexp.jar" />
			</zipfileset>
			<zipfileset dir="${build.jars.dir}" prefix="WEB-INF/lib">
				<!-- exclude name="pentaho-i18n*.jar" / -->
			</zipfileset>
			<zipfileset dir="${build.classes.dir}" prefix="WEB-INF/classes">
				<include name="**/messages/**" />
			</zipfileset>
			<zipfileset dir="${server.resource.dir}/jfreereport" prefix="WEB-INF/classes" />
			<zipfileset dir="${server.resource.dir}/mondrian" prefix="WEB-INF/classes" />
			<zipfileset dir="${server.resource.dir}/log4j" prefix="WEB-INF/classes" />
			<zipfileset dir="${server.resource.dir}/ehcache" prefix="WEB-INF/classes" />

		</zip>

	</target>

	<!-- ===================================================================
	       target: zip-pentaho-style-war

	       Create the pentaho-style.war.
	      =================================================================== -->
	<target name="zip-pentaho-style-war" depends="init">
		<zip destfile="${build.wars.dir}/pentaho-style.war">
			<zipfileset dir="${server.resource.dir}/styles/pentaho-style.war" />
		</zip>
	</target>

	<!-- ===================================================================
		  target: zip-pentaho-portal-layout-war

		  Create the pentaho-portal-layout.war.
		 =================================================================== -->
	<target name="zip-pentaho-portal-layout-war" depends="init">
		<zip destfile="${build.wars.dir}/pentaho-portal-layout.war">
			<zipfileset dir="${server.resource.dir}/jboss/pentaho-portal-layout.war" />
		</zip>
	</target>

	<!-- ======================================================
          target: ear-all-pentaho-jboss

          Macro target for building all pentaho jboss ears. This target
          will build pentaho wars for use in ear files.

          This target will build the following:
          - ear file configured for use in jboss with jboss portal and hsqldb
          - ear file configured for use in jboss with jboss portal and mysql
          - ear file configured for use in jboss with jboss portal and oracle10g
          - ear file configured for use in jboss with jboss portal and postgresql
          - ear file configured for use in jboss without jboss portal and hsqldb
          - ear file configured for use in jboss without jboss portal and mysql
          - ear file configured for use in jboss without jboss portal and oracle10g
          - ear file configured for use in jboss without jboss portal and postgresql

         ===================================================== -->
	<target name="ear-all-pentaho-jboss" depends="ear-pentaho-jboss-hsqldb, ear-pentaho-jboss-mysql5, ear-pentaho-jboss-oracle10g, ear-pentaho-jboss-postgresql, ear-pentaho-jboss-hsqldb-no-portal, ear-pentaho-jboss-mysql5-no-portal, ear-pentaho-jboss-oracle10g-no-portal, ear-pentaho-jboss-postgresql-no-portal" />

	<!-- ===================================================================================
          target: ear-pentaho-jboss-hsqldb

          Create a pentaho ear configured for jboss, jboss portal, and hsqldb.

          If your jboss configuration does not have jboss portal installed, use
          ear-pentaho-jboss-hsqldb-no-portal instead.
         ============================================================================ -->
	<target name="ear-pentaho-jboss-hsqldb" depends="init, init-pentaho-ears, zip-pentaho-style-war, zip-pentaho-portal-layout-war">
		
		<antcall target="war-pentaho-jboss-for-ear">
			<param name="rdbms" value="hsqldb" />
		</antcall>
    <antcall target="ear-pentaho-jboss">
      <param name="rdbms" value="hsqldb" />
    </antcall>
	</target>

	<!-- ===============================================================================
          target: ear-pentaho-jboss-hsqldb-no-portal

          Create a pentaho ear configured for jboss, no jboss portal, and hsqldb.

          If your jboss configuration has jboss portal installed, use
          ear-pentaho-jboss-hsqldb instead.
         ============================================================================= -->
	<target name="ear-pentaho-jboss-hsqldb-no-portal" depends="init, init-pentaho-ears, zip-pentaho-style-war">
		<antcall target="war-pentaho-jboss-for-ear-no-portal">
			<param name="rdbms" value="hsqldb" />
		</antcall>
    <antcall target="ear-pentaho-jboss-no-portal">
      <param name="rdbms" value="hsqldb" />
    </antcall>
	</target>

	<!-- =========================================================================
          target: ear-pentaho-jboss-mysql5

          Create a pentaho ear configured for jboss, jboss portal, and mysql.

          If your jboss configuration does not have jboss portal installed, use
          ear-pentaho-jboss-mysql5-no-portal instead.
         ========================================================================== -->
	<target name="ear-pentaho-jboss-mysql5" depends="init, init-pentaho-ears, zip-pentaho-style-war, zip-pentaho-portal-layout-war">
		<antcall target="war-pentaho-jboss-for-ear">
			<param name="rdbms" value="mysql5" />
		</antcall>
    <antcall target="ear-pentaho-jboss">
      <param name="rdbms" value="mysql5" />
    </antcall>
	</target>

	<!-- ===============================================================
          target: ear-pentaho-jboss-mysql5-no-portal

          Create a pentaho ear configured for jboss, no jboss portal, and mysql.

          If your jboss configuration has jboss portal installed, use
          ear-pentaho-jboss-mysql5 instead.
         ================================================================= -->
	<target name="ear-pentaho-jboss-mysql5-no-portal" depends="init, init-pentaho-ears, zip-pentaho-style-war">
		
		<antcall target="war-pentaho-jboss-for-ear-no-portal">
			<param name="rdbms" value="mysql5" />
		</antcall>
    <antcall target="ear-pentaho-jboss-no-portal">
      <param name="rdbms" value="mysql5" />
    </antcall>
	</target>

	<!-- =========================================================================
          target: ear-pentaho-jboss-oracle10g

          Create a pentaho ear configured for jboss, jboss portal, and oracle10g.

          If your jboss configuration does not have jboss portal installed, use
          ear-pentaho-jboss-oracle10g-no-portal instead.
         ========================================================================== -->
	<target name="ear-pentaho-jboss-oracle10g" depends="init, init-pentaho-ears, zip-pentaho-style-war, zip-pentaho-portal-layout-war">
		
		<antcall target="war-pentaho-jboss-for-ear">
			<param name="rdbms" value="oracle10g" />
		</antcall>
    <antcall target="ear-pentaho-jboss">
      <param name="rdbms" value="oracle10g" />
    </antcall>
	</target>

	<!-- ===============================================================
          target: ear-pentaho-jboss-oracle10g-no-portal

          Create a pentaho ear configured for jboss, no jboss portal, and oracle10g.

          If your jboss configuration has jboss portal installed, use
          ear-pentaho-jboss-oracle10g instead.
         ================================================================= -->
	<target name="ear-pentaho-jboss-oracle10g-no-portal" depends="init, init-pentaho-ears, zip-pentaho-style-war">
		<antcall target="war-pentaho-jboss-for-ear-no-portal">
			<param name="rdbms" value="oracle10g" />
		</antcall>
    <antcall target="ear-pentaho-jboss-no-portal">
      <param name="rdbms" value="oracle10g" />
    </antcall>
	</target>

	<!-- =========================================================================
          target: ear-pentaho-jboss-postgresql

          Create a pentaho ear configured for jboss, jboss portal, and postgresql.

          If your jboss configuration does not have jboss portal installed, use
          ear-pentaho-jboss-postgresql-no-portal instead.
         ========================================================================== -->
	<target name="ear-pentaho-jboss-postgresql" depends="init, init-pentaho-ears, zip-pentaho-style-war, zip-pentaho-portal-layout-war">
		<antcall target="war-pentaho-jboss-for-ear">
			<param name="rdbms" value="postgresql" />
		</antcall>
    <antcall target="ear-pentaho-jboss">
      <param name="rdbms" value="postgresql" />
    </antcall>
	</target>

	<!-- ===============================================================
          target: ear-pentaho-jboss-postgresql-no-portal

          Create a pentaho ear configured for jboss, no jboss portal, and postgresql.

          If your jboss configuration has jboss portal installed, use
          ear-pentaho-jboss-postgresql instead.
         ================================================================= -->
	<target name="ear-pentaho-jboss-postgresql-no-portal" depends="init, init-pentaho-ears, zip-pentaho-style-war">
		<antcall target="war-pentaho-jboss-for-ear-no-portal">
			<param name="rdbms" value="postgresql" />
		</antcall>
    <antcall target="ear-pentaho-jboss-no-portal">
      <param name="rdbms" value="postgresql" />
    </antcall>
	</target>

	<!-- ======================================================================
          target: ear-pentaho-jboss

          Create a pentaho ear file confiured for jboss and a specified rdbms.

          This is a reusable target.

          Parameters:
          - rdbms - current values include hsqldb and mysql5

          Current targets that use this target:
          - ear-pentaho-jboss-hsqldb
          - ear-pentaho-jboss-mysql5

         ======================================================================== -->
	<target name="ear-pentaho-jboss">

		<replace file="${build.ears.dir}/jboss/portal/${rdbms}/application.xml" token="&lt;!-- additional web apps --&gt;">
			<replacevalue>
				<![CDATA[
				<module>
				<web>
					<web-uri>pentaho-portal-layout.war</web-uri>
					<context-root>/pentaho-portal-layout</context-root>
				</web>
			</module>
			<!-- additional web apps -->]]>
			</replacevalue>
	</replace>

	<!-- make ear -->
	<ear destfile="${build.ears.dir}/jboss/portal/${rdbms}/pentaho.ear" appxml="${build.ears.dir}/jboss/portal/${rdbms}/application.xml" duplicate="preserve">
		
		<!-- copy over any custom changes to ear -->
		<zipfileset dir="custom-ear" />
		
		<fileset dir="${build.wars.dir}">
			<include name="pentaho-portal-layout.war" />
			<include name="pentaho-style.war" />
		</fileset>
		<zipfileset dir="${webapp.dir}/WEB-INF" prefix="META-INF">
			<include name="jboss-app.xml" />
		</zipfileset>
		<fileset dir="${build.ears.dir}/jboss/portal" includes="pentaho.war" />
		<fileset dir="${build.res.dir}/jboss/datasources/${rdbms}" />
		<!-- Include appropriate third party jars -->
		<zipfileset dir="${build.third-party.dir}" prefix="lib">
			<excludesfile name="excludejars.jboss" />
			<exclude name="gnu-regexp.jar" />
			<exclude name="dom4j.jar" />
		</zipfileset>
		<zipfileset dir="${build.jars.dir}" prefix="lib" />
		
	</ear>
</target>

<!-- ======================================================================
	          target: ear-pentaho-jboss-no-portal

	          Create a pentaho ear file confiured for jboss and a specified rdbms.

	          This is a reusable target.

	          Parameters:
	          - rdbms - current values include hsqldb and mysql5

	          Current targets that use this target:
	          - ear-pentaho-jboss-hsqldb-no-portal
	          - ear-pentaho-jboss-mysql5-no-portal

	         ======================================================================== -->
<target name="ear-pentaho-jboss-no-portal">

	<!-- make ear -->
	<ear destfile="${build.ears.dir}/jboss/no-portal/${rdbms}/pentaho.ear" appxml="${build.ears.dir}/jboss/no-portal/${rdbms}/application.xml" duplicate="preserve">
		
		<!-- copy over any custom changes to ear -->
		<zipfileset dir="custom-ear" />
		
		<fileset dir="${build.wars.dir}">
			<include name="pentaho-style.war" />
		</fileset>
		<zipfileset dir="${webapp.dir}/WEB-INF/" prefix="META-INF">
			<include name="jboss-app.xml" />
		</zipfileset>
		<zipfileset dir="${build.res.dir}/ear" prefix="META-INF">
			<include name="jboss-classloading.xml" />
		</zipfileset>
		<fileset dir="${build.ears.dir}/jboss/no-portal" includes="pentaho.war" />
		<fileset dir="${build.res.dir}/jboss/datasources/${rdbms}" />
		<!-- Include appropriate third party jars -->
	    <!-- as of JBoss5, we are no longer putting jars in the EAR due to complications with 
	         classloading and loading or resources resources when jars live in pentaho.ear/lib -->
		<!--zipfileset dir="${build.third-party.dir}" prefix="lib">
			<excludesfile name="excludejars-noportal.jboss" />
			<excludesfile name="jars-with-log4jxml.jboss" />
			<exclude name="**/licenses/*" />
			<exclude name="**/quartz-oracle-1.5.2.jar" />
		</zipfileset>
		<zipfileset dir="${build.jars.dir}" prefix="lib" /-->
		
	</ear>
</target>


<!-- ===================================================================
        target: ear-pentaho-orion2.0.5
       =================================================================== -->
<target name="ear-pentaho-orion2.0.5" depends="init, init-pentaho-ears, zip-pentaho-style-war, war-pentaho-tomcat">

	<ear destfile="${build.ears.dir}/orion/pentaho.ear" appxml="${ear.dir}/application.xml">
		<manifest>
			<attribute name="Implementation-Title" value="${impl.title}" />
			<attribute name="Implementation-Version" value="${impl.version}" />
			<attribute name="Implementation-Vendor" value="${impl.vendor}" />
		</manifest>
		<fileset dir="${build.wars.dir}">
			<include name="pentaho-style.war" />
		</fileset>
		<fileset dir="${build.wars.dir}/tomcat" includes="pentaho.war" />
		<metainf dir="${staging.resources}/orion" includes="*.xml" />
	</ear>

</target>

<!-- ===================================================================
        target: build-all
       =================================================================== -->
<target name="build-all" depends="zip-pentaho-portal-layout-war, zip-pentaho-style-war, war-pentaho-tomcat, war-pentaho-jboss, war-pentaho-jboss-no-portal, ear-all-pentaho-jboss" />
</project>
<!--===========================================================================
  This is the build file for the Pentaho BI Platform API project.
  
  This build file will use the subfloor.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.
  
  See common_build.xml for more details
============================================================================-->
<project name="core" basedir="." default="default">

	<description>
	  This build file is used to create the API project
		and works with the subfloor.xml file.
	</description>

	<!-- The continuous target is used by CI ... this is the list of -->
	<!-- tasks that the CI machine will run.                         -->
	<!-- DO NOT change the CI machine's ant task .. change this list -->
	<target name="continuous" 
	        depends="clean-all,resolve,cobertura,publish" />

	<!-- Import the common_build.xml file which contains all the default tasks -->
	<import file="build-res/subfloor.xml"/>

    <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN common_build.xml.
    --> 

    <!--=======================================================================
      generate.manifest
      
      Creates a new manifest file if one is not specified, or updates
      an existing manifest file if one is specified. 
      Overriding this target in subfloor.xml to address BISERVER-10516
      ====================================================================-->
        <target name="generate.manifest" depends="init,set-build.id">
            <delete file="${dist.manifest.file}" />
            <touch file="${dist.manifest.file}" />
            <copy file="${manifest.file}" tofile="${dist.manifest.file}" overwrite="true" failonerror="false" />

            <manifest file="${dist.manifest.file}" mode="update">
                      <attribute name="Implementation-Title" value="${impl.title}" />
                      <attribute name="Implementation-Version" value="${project.revision}${build.id}" />
                      <attribute name="Implementation-Vendor" value="${impl.vendor}" />
                      <attribute name="Implementation-ProductID" value="${impl.productID}" />
            </manifest>
          </target>

    <!--=======================================================================
      set-build.id
      
      Overriding this target in subfloor.xml to address BISERVER-10516
      ====================================================================-->
        <target name="set-build.id" unless="build.id" depends="install-antcontrib">
            <if>
                  <istrue value="${release}" />
            <then>
                  <property name="build.id" value="" />
            </then>
            <else>
                  <property name="build.id" value=".development" />
            </else>
            </if>
          </target>

</project>
<project name="pentaho-platform-dev" basedir="." default="help">

  <description>
  </description>

  <!-- This file inherits from the open assembly project -->
  <property name="assembly.dir" location="assembly" />

  <property file="dev_override.properties" />
  <property file="dev_build.properties" />
  <property file="${assembly.dir}/override.properties" />
  <property file="${assembly.dir}/assembly.properties" />
  <property name="ivy.use.symlinks" value="false" description="Flag indicating if Ivy should create symlinks when retrieving artifacts."/>

  <!--Import Open Assembly ant file -->
  <import file="${assembly.dir}/assembly.xml" />

  <!-- These are the projects that will be compiled to class files and placed in WEB-INF/classes -->
  <property name="dev-project.list" value="api,core,repository,scheduler,extensions,user-console" />


  <target name="dev-rebuild"
          description="Creates a Pentaho-ready Tomcat instance."
          depends="clean-all, dev-update" />


  <target name="dev-update"
          description="Copy changed artifacts into Tomcat instance."
          depends="install-antcontrib">
    <for list="${dev-project.list}" param="module" trim="true">
      <sequential>
        <ant antfile="build.xml" dir="@{module}" inheritall="false" >
          <property name="ivy.use.symlinks" value="false"/>
          <target name="resolve" />
          <target name="compile" />
          <target name="publish-local" />
        </ant>
      </sequential>
    </for>
    <ant antfile="assembly.xml" dir="${assembly.dir}" inheritall="false">
      <target name="clean-all" />
      <target name="resolve" />
      <target name="assemble" />
    </ant>
  </target>

  <target name="dev-resolve"
          description="Call resolve on all modules to easily populate the lib-directories of all sub-modules."
          depends="install-antcontrib">
    <for list="${dev-project.list}" param="module" trim="true">
      <sequential>
        <ant antfile="build.xml" dir="@{module}" inheritall="false" >
          <property name="ivy.use.symlinks" value="false"/>
          <target name="resolve" />
        </ant>
      </sequential>
    </for>
    <ant antfile="assembly.xml" dir="${assembly.dir}" inheritall="false">
      <target name="resolve" />
    </ant>
  </target>


  <target name="clean-all" depends="install-antcontrib">
    <for list="${dev-project.list}" param="module" trim="true">
      <sequential>
        <ant antfile="build.xml" dir="@{module}" target="clean-all" inheritall="false" />
      </sequential>
    </for>
    <ant antfile="assembly.xml" dir="${assembly.dir}" target="clean-all" inheritall="false" />
  </target>


  <target name="help" description="Displays help information.">
    <echo level="info">Run 'ant -f dev_build.xml -projecthelp' for more information.</echo>
  </target>


</project>
<!--===========================================================================
  This is the build file for the Pentaho BI Platform API project.
  
  This build file will use the subfloor.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.
  
  See common_build.xml for more details
============================================================================-->
<project name="extensions" basedir="." default="default" xmlns:ivy="antlib:org.apache.ivy.ant">

	<description>
	  This build file is used to create the API project
		and works with the subfloor.xml file.
	</description>

	<!-- The continuous target is used by CI ... this is the list of -->
	<!-- tasks that the CI machine will run.                         -->
	<!-- DO NOT change the CI machine's ant task .. change this list -->
	<target name="continuous" 
	        depends="clean-all,resolve,cobertura,publish" />

	<!-- Import the common_build.xml file which contains all the default tasks -->
	<import file="build-res/subfloor.xml"/>

    <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN common_build.xml.
    --> 
	

	<property name="enunciate.home" value="${basedir}/enunciate" />
	<property name="enunciate.bin.dir" value="${bin.dir}/enunciate" />
	
	<!-- Override package to just do enunciate. there is no native assembly or package involved -->
	<target name="package" depends="enunciate"/>
	<target name="assemble"/>
	
	<!-- Override resolve to tack on a resolve of enunciate jars needed for doc generation -->
	<target name="resolve" depends="subfloor.resolve, resolve-enunciate" />
	<target name="resolve-enunciate" depends="resolve-init">
		<ivy:resolve file="${ivyfile}" conf="enunciate" />
		<ivy:retrieve conf="enunciate" pattern="${basedir}/enunciate/lib/[module]-[revision](-[classifier]).[ext]" />
	</target>

	  <!--=======================================================================
	      enunciate
	      
	      Generates enunciate documentation for the resoruce 
	      classes comprising the BIServer REST api
	      ====================================================================-->
	<target name="enunciate">
		<path id="enunciate.classpath">
			<fileset dir="${lib.dir}">
				<include name="*.jar" />
			</fileset>
			<dirset dir="${classes.dir}" />
			<fileset dir="${dist.dir}">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${enunciate.home}/lib">
				<include name="*.jar" />
			</fileset>
		</path>

		<taskdef name="enunciate" classname="org.codehaus.enunciate.main.EnunciateTask">
			<classpath refid="enunciate.classpath" />
		</taskdef>

		<enunciate dir="${basedir}/src" 
		           configFile="${basedir}/enunciate.xml" 
		           generateDir="${enunciate.bin.dir}/generate" 
		           compileDir="${enunciate.bin.dir}/compile" 
		           buildDir="${enunciate.bin.dir}/build" 
		           packageDir="${enunciate.bin.dir}/package" 
		           verbose="true">
			<include name="**/http/api/resources/*.java" />
			<!-- have to exclude class that contains jersey multipart endpoint until http://jira.codehaus.org/browse/ENUNCIATE-537 is fixed -->
			<exclude name="**/http/api/resources/RepositoryImportResource.java" />
            <exclude name="**/http/api/resources/JobScheduleRequest.java" />
            <exclude name="**/http/api/resources/SchedulerResource.java" />
			<classpath refid="enunciate.classpath" />
			<export artifactId="docs" destination="${dist.dir}/${enunciate.packagename}.zip" />
		</enunciate>
	</target>
</project>
<!--===========================================================================
  This is the build file for the Pentaho BI Platform Repository project.
  
  This build file will use the subfloor.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.
  
  See common_build.xml for more details
============================================================================-->
<project name="Repository" basedir="." default="default"
    >
	
	<description>
	  This build file is used to create the Repository library for the BI Platform.
	</description>

  <!-- The continuous target is used by CI ... this is the list of -->
  <!-- tasks that the CI machine will run.                         -->
  <!-- DO NOT change the CI machine's ant task .. change this list -->
  <property name="junit.haltonerror" value="no" description="Fail the build if a error occurs" />
  <target name="continuous"
          depends="clean-all,resolve,cobertura,publish" />

	<!-- Import the common_build.xml file which contains all the default tasks -->
	<import file="build-res/subfloor.xml"/>

    <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN common_build.xml.
    --> 
</project>
<!--===========================================================================
  This is the build file for the Pentaho BI Platform Scheduler project.
  
  This build file will use the subfloor.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.
  
  See common_build.xml for more details
============================================================================-->
<project name="scheduler" basedir="." default="default"
    >

  <!-- The continuous target is used by CI ... this is the list of -->
  <!-- tasks that the CI machine will run.                         -->
  <!-- DO NOT change the CI machine's ant task .. change this list -->
  <target name="continuous"
          depends="clean-all,resolve,cobertura,publish" />

	<import file="build-res/subfloor.xml"/>

    <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN common_build.xml.
    --> 

</project>
<!--===========================================================================
  This is the build file for the Pentaho Mantle project.

  This build file will use the common_build.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.

  See common_build.xml for more details
============================================================================-->
<project name="Pentaho Mantle" basedir="." default="jar" xmlns:ivy="antlib:org.apache.ivy.ant">

  <description>
	  This build file is used to create the Pentaho Commons Action Sequence DOM
		project and works with the common_build.xml file.
	</description>

  <!-- Import the version information -->
  <property file="${basedir}/version.properties" />

  <!-- Define the default location of the gwt common build file -->
  <property name="gwt.common.build.file"
            value="./build-res/subfloor-gwt.xml"
            description="This is the location of the standardized subfloor-gwt.xml file" />

  <!-- Property used to change the default version in PUC's help - about -->
  <property name="user.console.revision" value="" />

  <!-- Import the common_build.xml file which contains all the default tasks -->
  <import file="${gwt.common.build.file}" />

  <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN common_build.xml.
    -->

  <!-- Directory in which the source will be copied before a compile -->
  <property name="temp-src.dir" value="${bin.dir}/src" />

  <property name="js.module.script.dir" value="source/org/pentaho/mantle/public"/>

  <!-- Import the subfloor-pkg.xml file which contains all the default ant targets -->
  <import file="build-res/subfloor-js.xml"/>

  <!-- location to expand the zipped contents of js dependencies (to be available for testing) -->
  <property name="js.expanded.lib.dir" value="package-res/resources/web/test/lib"/>

  <property name="js.requires.node" value="true"/>
  <property name="js.requires.karma" value="true"/>
  <property name="js.karma.config" value="config/karma.ci.conf.js"/>


  <property environment="env"/>

  <!--=======================================================================
      gwt-compile

      Performs the required gwt compiles
      ====================================================================-->
  <target name="gwt-compile" description="Performs the required GWT Compilation">
  	<delete dir="${stage.dir}"/>
    <copy todir="${codegenlib.dir}">
      <fileset dir="${dist.dir}">
        <include name="${ivy.artifact.id}-${project.revision}.jar" />
      </fileset>
    </copy>
    <!-- Compile the Mantle Application -->
    <ant antfile="${gwt.common.build.file}" target="gwt-compile">
      <property name="gwt-module.path" value="org.pentaho.mantle.MantleApplication" />
    </ant>
  </target>


  <!--=======================================================================
      assemble (override)

      Overriden to force gwt javascript compilation
      ====================================================================-->
  <target name="assemble" depends="gwt-compile">
    <copy todir="${stage.dir}" includeemptydirs="false">
      <fileset dir="${gwt.output.dir}">
        <exclude name=".gwt-tmp/" />
        <exclude name="*-aux/" />
        <exclude name="**/*.symbolMap" />
      </fileset>
    </copy>
  </target>

  <!--=======================================================================
      update-version-string

      Sets the user-console-revision in the MantleSettings.properties file.
      This will change the content in PUC's Help - About dialog
      ====================================================================-->
  <target name="update-versions-string">
    <echo message="Changing version information to [${user.console.revision}]" />
	<replace file="${src.dir}/org/pentaho/mantle/server/MantleSettings.properties"
		token="user-console-revision=" value="user-console-revision=${user.console.revision}" />
  </target>

  <target name="lib.dir.check">
    <condition property="lib.dir.exists">
      <available file="${approot.stage.dir}/lib" type="dir"/>
    </condition>
  </target>

  <target name="publish-local-nojar.internal" depends="install-ivy">
      <ivy:publish resolver="local" pubrevision="${project.revision}" overwrite="true" forcedeliver="true" warnonmissing="yes" haltonmissing="no">
          <artifacts pattern="${dist.dir}/[artifact]-[revision](-[classifier]).[ext]" />
      </ivy:publish>
  </target>


</project>
<!-- ======================================================================
     description: main build file for mantle
     ====================================================================== -->
<project name="mantle-demo" default="compile-mantle">
	<description>mantle build process..</description>

	<property file="dev_override.properties" />
	<property file="dev_build.properties" />

	<propertyfile file="version.properties">
		<entry pattern="####" key="release.build.number" type="int" operation="+" value="1" />
	</propertyfile>

	<property file="version.properties" />

	<path id="classpath">
		<fileset dir="war/WEB-INF/lib"/>
	</path>

	<!-- ===================================================================
        target: clean              
       =================================================================== -->
	<target name="clean" depends="">
		<delete dir="dist" />
		<delete dir="${gwt.output.dir}" />
		<delete dir="login-output" />
		<delete failonerror="no">
			<fileset dir="${pentaho-webapp-root}/WEB-INF/lib/">
				<include name="**/mantle*.jar" />
			</fileset>
		</delete>
		<delete dir="${pentaho-webapp-root}/mantle" />
	</target>


	<!-- ===================================================================
        target: init              
       =================================================================== -->
	<target name="init">
		<mkdir dir="dist/bin" />
		<copy todir="dist/bin">
			<fileset dir="source" includes="**/*.png, **/*.jpg, **/*.gif, **/*.properties, **/*.xml" />
		</copy>
		<mkdir dir="${pentaho-webapp-root}/mantle" />
	</target>

	<target name="compile" depends="init">
		<javac destdir="dist/bin" debug="${debug}" optimize="${optimize}" deprecation="${deprecation}" compiler="modern" source="1.5" target="1.5" fork="true">
			<src path="source" />
			<classpath refid="classpath" />
		</javac>
	</target>

	<target name="compile-mantle-dev" depends="compile">
		<java classname="com.google.gwt.dev.Compiler" fork="true" failonerror="true" maxmemory="1024M">
			<jvmarg value="-Xss8M"/>    	
			<classpath>
				<pathelement location="source" />
				<pathelement location="dist/bin"/>
				<path refid="classpath" />
			</classpath>
			<arg value="-localWorkers" />
			<arg value="-4" />
			<arg value="${mantle-dev.app}" />
			<!--
			<arg value="-logLevel" />
			<arg value="TRACE" />
			-->
		</java>
	</target>

	<target name="compile-mantle-login" depends="clean, compile">
		<java classname="com.google.gwt.dev.Compiler" fork="true" failonerror="true" maxmemory="1024M">
			<jvmarg value="-Xss8M"/>    	
			<classpath>
				<pathelement location="source" />
				<path refid="classpath" />
			</classpath>
			<arg value="-localWorkers" />
			<arg value="-4" />
			<arg value="org.pentaho.mantle.login.MantleLogin" />
			<!--
			<arg value="-logLevel" />
			<arg value="TRACE" />
			-->
		</java>
	</target>
  
	<target name="compile-mantle" depends="clean, compile, compile-mantle-login">
		<java classname="com.google.gwt.dev.GWTCompiler" fork="true" failonerror="true" maxmemory="512M">
			<jvmarg value="-Xss8M"/>    	
			<classpath>
				<pathelement location="source" />
				<pathelement location="dist/bin"/>
				<path refid="classpath" />
			</classpath>
			<arg value="-localWorkers" />
			<arg value="-4" />
			<arg value="${mantle.app}" />
			<!--
			<arg value="-logLevel" />
			<arg value="TRACE" />
			-->
		</java>
	</target>

	<target name="dist" depends="clean, compile">
		<mkdir dir="dist/pentaho.war/WEB-INF/lib" />
		<jar basedir="dist/bin" destfile="dist/mantle-${release.major.number}.${release.minor.number}.${release.milestone.number}.${release.build.number}.jar" />
		<copy todir="dist/pentaho.war/WEB-INF/lib">
			<fileset dir="dist" includes="mantle*.jar" />
		</copy>
		<copy todir="dist/pentaho.war/WEB-INF/" file="${pentaho-webapp-root}/WEB-INF/web.xml" />
  
  	<copy todir="dist/pentaho.war/mantle">
  		<fileset dir="${gwt.output.dir}/mantle" includes="**/*" />
  	</copy>
  	<zip destfile="dist/mantle-${release.major.number}.${release.minor.number}.${release.milestone.number}.${release.build.number}.zip">
  		<zipfileset dir="dist/pentaho.war" prefix="pentaho.war" />
  	</zip>
  	<delete dir="dist/pentaho.war" />
  </target>
  
  <target name="deploy-to-pentaho-pci" depends="">
  	<jar basedir="dist/bin" destfile="${pentaho-webapp-root}/WEB-INF/lib/mantle-${release.major.number}.${release.minor.number}.${release.milestone.number}.jar" />
  	<copy todir="${pentaho-webapp-root}/mantle"  failonerror="false">
  		<fileset dir="${gwt.output.dir}/mantle" includes="**/*" />
  	</copy>
  	<copy todir="${pentaho-webapp-root}/mantleLogin" failonerror="false">
  		<fileset dir="login-output/mantleLogin" includes="**/*" />
  	</copy>
  	<copy todir="${pentaho-webapp-root}/WEB-INF/lib">
  		<fileset dir="lib" includes="gwt-servlet-1.5.2.jar" />
  	</copy>
  <!--touch file="${pentaho-webapp-root}/WEB-INF/web.xml"/-->
  </target>
  
  <target name="compile-deploy" depends="clean, compile-mantle">
  <antcall target="deploy-to-pentaho-pci">
  </antcall>
  </target>
  
  <target name="compile-deploy-dev" depends="clean, compile-mantle-dev">
  <antcall target="deploy-to-pentaho-pci">
  </antcall>
  </target>

  <target name="compile-all-deploy-dev" depends="clean">
    <antcall target="compile-mantle-login-dev"/>
    <antcall target="compile-mantle-dev"/>
    <antcall target="deploy-to-pentaho-pci"/>
  </target>	
	
  <target name="compile-login-deploy-dev" depends="clean">
    <antcall target="compile-mantle-login-dev"/>
    <antcall target="deploy-to-pentaho-pci"/>
  </target>



</project>
