/*
 * Copyright (c) 2007-2013 Concurrent, Inc. All Rights Reserved.
 *
 * Project and contact information: http://www.cascading.org/
 *
 * This file is part of the Cascading project.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply from: "${rootDir}/etc/s3Upload.gradle"

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
/*
 * Copyright (c) 2007-2013 Concurrent, Inc. All Rights Reserved.
 *
 * Project and contact information: http://www.cascading.org/
 *
 * This file is part of the Cascading project.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  repositories {
    maven{ url 'http://dl.bintray.com/content/aalmiray/asciidoctor' }
    maven{ url 'http://jcenter.bintray.com' }
  }

  dependencies {
    classpath 'org.asciidoctor:asciidoctor-gradle-plugin:0.5.0'
  }
}

apply plugin: 'java'
apply plugin: 'asciidoctor'

asciidoctor {

  //sourceDocumentName = file( 'src/asciidoc/index.adoc' )

  // http://asciidoc.org/userguide.html#X88
  // attributed must all be lowercase

  def attributes = [
          toc2: '',
          //revnumber: version,
          'source-highlighter': 'highlightjs',
          'highlightjs-theme': 'pojoaque',
          'linkcss!': '',
          stylesdir: 'impatient-docs/src/site/stylesheets/', // should not be relative to rootDir
          stylesheet: 'cascading.css',
          'data-uri': '',
          imagesdir: 'impatient-docs/src/site/images/', // should not be relative to rootDir
          //artifactsurl: project.s3Bucket,
          //docsurl: project.s3BucketDocs,
          //projectroot: project.rootDir,
          analyticsid: System.properties[ 'analytics.id' ],
          analyticsdomain: System.properties[ 'analytics.domain' ]

          // disabled till attributes in docinfo is supported
//          docinfo1: '',
  ]
  options = [
          template_dir: 'impatient-docs/src/templates/',
          eruby: 'erubis',
          attributes: attributes
  ]
}

task zipDocs( type: Zip, dependsOn: asciidoctor ){
  baseName = "impatient"
  from (asciidoctor.outputDir){
      include '*.*'
  }
  into "impatient-docs"
}


task docDist( type: Copy, dependsOn: [asciidoctor, zipDocs] ) {
  description = "publish documentation"

  from asciidoctor.outputDir
  from zipDocs.destinationDir
  into "${rootProject.s3UploadDocs.source}/" // intentionally publish to root

  rootProject.s3UploadDocs.dependsOn docDist
}
/*
 * Copyright (c) 2007-2013 Concurrent, Inc. All Rights Reserved.
 *
 * Project and contact information: http://www.cascading.org/
 *
 * This file is part of the Cascading project.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'

apply from: "../common/providedCompile.gradle"

archivesBaseName = 'impatient'

repositories {
  mavenLocal()
  mavenCentral()
  maven{ url 'http://conjars.org/repo/' }
}

ext.cascadingVersion = '2.5.2'
ext.hadoopVersion = '2.2.0'

dependencies {
  compile( group: 'cascading', name: 'cascading-core', version: cascadingVersion )
  compile( group: 'cascading', name: 'cascading-local', version: cascadingVersion )
  compile( group: 'cascading', name: 'cascading-hadoop2-mr1', version: cascadingVersion )

  providedCompile( group: 'org.apache.hadoop', name: 'hadoop-mapreduce-client', version: hadoopVersion )
}

jar {
  description = "Assembles a Hadoop ready jar file"
  doFirst {
    into( 'lib' ) {
      from configurations.compile
    }
  }

  manifest {
    attributes( "Main-Class": "impatient/Main" )
  }
}
/*
 * Copyright (c) 2007-2013 Concurrent, Inc. All Rights Reserved.
 *
 * Project and contact information: http://www.cascading.org/
 *
 * This file is part of the Cascading project.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'

apply from: "../common/providedCompile.gradle"

archivesBaseName = 'impatient'

repositories {
  mavenLocal()
  mavenCentral()
  maven{ url 'http://conjars.org/repo/' }
}

ext.cascadingVersion = '2.5.2'
ext.hadoopVersion = '2.2.0'

dependencies {
  compile( group: 'cascading', name: 'cascading-core', version: cascadingVersion )
  compile( group: 'cascading', name: 'cascading-hadoop2-mr1', version: cascadingVersion )
  providedCompile( group: 'org.apache.hadoop', name: 'hadoop-mapreduce-client', version: hadoopVersion )
}

jar {
  description = "Assembles a Hadoop ready jar file"
  doFirst {
    into( 'lib' ) {
      from configurations.compile
    }
  }

  manifest {
    attributes( "Main-Class": "impatient/Main" )
  }
}
/*
 * Copyright (c) 2007-2012 Concurrent, Inc. All Rights Reserved.
 *
 * Project and contact information: http://www.cascading.org/
 *
 * This file is part of the Cascading project.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.text.SimpleDateFormat

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'

apply from: "../common/providedCompile.gradle"

archivesBaseName = 'impatient'

repositories {
  mavenLocal()
  mavenCentral()
  maven{ url 'http://conjars.org/repo/' }
}

ext.cascadingVersion = '2.5.2'
ext.hadoopVersion = '2.2.0'

dependencies {
  compile( group: 'cascading', name: 'cascading-core', version: cascadingVersion )
  compile( group: 'cascading', name: 'cascading-hadoop2-mr1', version: cascadingVersion )
  providedCompile( group: 'org.apache.hadoop', name: 'hadoop-mapreduce-client', version: hadoopVersion )
}

jar {
  description = "Assembles a Hadoop ready jar file"
  doFirst {
    into( 'lib' ) {
      from configurations.compile
    }
  }

  manifest {
    attributes( "Main-Class": "impatient/Main" )
  }
}

task distCopy( type: Copy, dependsOn: jar ) {
  into "${buildDir}/dist/${archivesBaseName}"

  from 'README.md'
  from 'build.gradle'
  from( 'src' ) {into 'src'}
  from( 'data' ) {into 'data'}

  from "$buildDir/libs"
}

task dist( type: Tar, dependsOn: distCopy ) {
  compression = "GZIP"
  classifier = new SimpleDateFormat( "yyyyMMdd" ).format( new Date() )

  from "${buildDir}/dist/"
}
/*
 * Copyright (c) 2007-2012 Concurrent, Inc. All Rights Reserved.
 *
 * Project and contact information: http://www.cascading.org/
 *
 * This file is part of the Cascading project.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.text.SimpleDateFormat

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'

apply from: "../common/providedCompile.gradle"

archivesBaseName = 'impatient'

repositories {
  mavenLocal()
  mavenCentral()
  maven{ url 'http://conjars.org/repo/' }
}

ext.cascadingVersion = '2.5.2'
ext.hadoopVersion = '2.2.0'

dependencies {
  compile( group: 'cascading', name: 'cascading-core', version: cascadingVersion )
  compile( group: 'cascading', name: 'cascading-hadoop2-mr1', version: cascadingVersion )
  providedCompile( group: 'org.apache.hadoop', name: 'hadoop-mapreduce-client', version: hadoopVersion )
}

jar {
  description = "Assembles a Hadoop ready jar file"
  doFirst {
    into( 'lib' ) {
      from configurations.compile
    }
  }

  manifest {
    attributes( "Main-Class": "impatient/Main" )
  }
}

task distCopy( type: Copy, dependsOn: jar ) {
  into "${buildDir}/dist/${archivesBaseName}"

  from 'README.md'
  from 'build.gradle'
  from( 'src' ) {into 'src'}
  from( 'data' ) {into 'data'}

  from "$buildDir/libs"
}

task dist( type: Tar, dependsOn: distCopy ) {
  compression = "GZIP"
  classifier = new SimpleDateFormat( "yyyyMMdd" ).format( new Date() )

  from "${buildDir}/dist/"
}
/*
 * Copyright (c) 2007-2012 Concurrent, Inc. All Rights Reserved.
 *
 * Project and contact information: http://www.cascading.org/
 *
 * This file is part of the Cascading project.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.text.SimpleDateFormat

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'

apply from: "../common/providedCompile.gradle"

archivesBaseName = 'impatient'

repositories {
  mavenLocal()
  mavenCentral()
  maven{ url 'http://conjars.org/repo/' }
}

ext.cascadingVersion = '2.5.2'
ext.hadoopVersion = '2.2.0'

dependencies {
  compile( group: 'cascading', name: 'cascading-core', version: cascadingVersion )
  compile( group: 'cascading', name: 'cascading-hadoop2-mr1', version: cascadingVersion )
  providedCompile( group: 'org.apache.hadoop', name: 'hadoop-mapreduce-client', version: hadoopVersion )
}

jar {
  description = "Assembles a Hadoop ready jar file"
  doFirst {
    into( 'lib' ) {
      from configurations.compile
    }
  }

  manifest {
    attributes( "Main-Class": "impatient/Main" )
  }
}

task distCopy( type: Copy, dependsOn: jar ) {
  into "${buildDir}/dist/${archivesBaseName}"

  from 'README.md'
  from 'build.gradle'
  from( 'src' ) {into 'src'}
  from( 'data' ) {into 'data'}

  from "$buildDir/libs"
}

task dist( type: Tar, dependsOn: distCopy ) {
  compression = "GZIP"
  classifier = new SimpleDateFormat( "yyyyMMdd" ).format( new Date() )

  from "${buildDir}/dist/"
}
/*
 * Copyright (c) 2007-2012 Concurrent, Inc. All Rights Reserved.
 *
 * Project and contact information: http://www.cascading.org/
 *
 * This file is part of the Cascading project.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.text.SimpleDateFormat

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'

apply from: "../common/providedCompile.gradle"

archivesBaseName = 'impatient'

repositories {
  mavenLocal()
  mavenCentral()
  maven{ url 'http://conjars.org/repo/' }
}

ext.cascadingVersion = '2.5.2'
ext.hadoopVersion = '2.2.0'

dependencies {
  compile group: 'cascading', name: 'cascading-core', version: cascadingVersion
  compile group: 'cascading', name: 'cascading-hadoop2-mr1', version: cascadingVersion
  providedCompile group: 'org.apache.hadoop', name: 'hadoop-mapreduce-client', version: hadoopVersion
  providedCompile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.5'
  providedCompile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.5'

  testCompile group: 'cascading', name: 'cascading-platform', version: cascadingVersion, classifier: 'tests'
  testCompile group: 'cascading', name: 'cascading-hadoop2-mr1', version: cascadingVersion, classifier: 'tests'
  testCompile group: 'cascading', name: 'cascading-core', version: cascadingVersion, classifier: 'tests'

  testCompile group: 'org.apache.hadoop', name: 'hadoop-mapreduce-client-core', version: hadoopVersion
  testCompile group: 'org.apache.hadoop', name: 'hadoop-minicluster', version: hadoopVersion
  testCompile group: 'junit', name: 'junit', version: '4.11'
  testCompile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.5'
  testCompile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.5'
}

jar {
  description = "Assembles a Hadoop ready jar file"
  doFirst {
    into( 'lib' ) {
      from configurations.compile
    }
  }

  manifest {
    attributes( "Main-Class": "impatient/Main" )
  }
}

task distCopy( type: Copy, dependsOn: jar ) {
  into "${buildDir}/dist/${archivesBaseName}"

  from 'README.md'
  from 'build.gradle'
  from( 'src' ) {into 'src'}
  from( 'data' ) {into 'data'}

  from "$buildDir/libs"
}

task dist( type: Tar, dependsOn: distCopy ) {
  compression = "GZIP"
  classifier = new SimpleDateFormat( "yyyyMMdd" ).format( new Date() )

  from "${buildDir}/dist/"
}

test {
  include 'impatient/**'

  //makes the standard streams (err and out) visible at console when running tests
  testLogging.showStandardStreams = true

  //listening to test execution events
  beforeTest { descriptor ->
     logger.lifecycle("Running test: " + descriptor)
  }
  onOutput { descriptor, event ->
     logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
  }
}
/*
 * Copyright (c) 2007-2012 Concurrent, Inc. All Rights Reserved.
 *
 * Project and contact information: http://www.cascading.org/
 *
 * This file is part of the Cascading project.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.text.SimpleDateFormat

apply plugin: 'java'
apply plugin: 'idea'

apply from: "../common/providedCompile.gradle"

archivesBaseName = 'impatient'

repositories {
  mavenLocal()
  mavenCentral()
  maven{ url 'http://conjars.org/repo/' }
}

ext.cascadingVersion = '2.5.2'
ext.hadoopVersion = '2.2.0'

dependencies {
  compile( group: 'cascading', name: 'cascading-core', version: cascadingVersion )
  compile( group: 'cascading', name: 'cascading-hadoop2-mr1', version: cascadingVersion )
  providedCompile( group: 'org.apache.hadoop', name: 'hadoop-mapreduce-client', version: hadoopVersion )

  testCompile( 'junit:junit:4.11.+' )
  testCompile group: 'org.apache.hadoop', name: 'hadoop-mapreduce-client-core', version: hadoopVersion 
  testCompile group: 'org.apache.hadoop', name: 'hadoop-minicluster', version: hadoopVersion 
  testCompile group: 'cascading', name: 'cascading-core', version: cascadingVersion, classifier: 'tests', changing: true
  testCompile group: 'cascading', name: 'cascading-hadoop2-mr1', version: cascadingVersion, classifier: 'tests', changing: true
  testCompile group: 'cascading', name: 'cascading-platform', version: cascadingVersion, classifier: 'tests', changing: true
}

jar {
  description = "Assembles a Hadoop ready jar file"
  doFirst {
    into( 'lib' ) {
      from configurations.compile
    }
  }

  manifest {
    attributes( "Main-Class": "impatient/Main" )
  }
}

task distCopy( type: Copy, dependsOn: jar ) {
  into "${buildDir}/dist/${archivesBaseName}"

  from 'README.md'
  from 'build.gradle'
  from( 'src' ) {into 'src'}
  from( 'data' ) {into 'data'}

  from "$buildDir/libs"
}

task dist( type: Tar, dependsOn: distCopy ) {
  compression = "GZIP"
  classifier = new SimpleDateFormat( "yyyyMMdd" ).format( new Date() )

  from "${buildDir}/dist/"
}

test {
  include 'impatient/**'

  //makes the standard streams (err and out) visible at console when running tests
  testLogging.showStandardStreams = true

  //listening to test execution events
  beforeTest { descriptor ->
     logger.lifecycle("Running test: " + descriptor)
  }
  onOutput { descriptor, event ->
     logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
  }
}
apply plugin: 'scala'

archivesBaseName = 'impatient'

repositories {
  mavenLocal()
  mavenCentral()
  mavenRepo name: 'conjars', url: 'http://conjars.org/repo/'
}

ext.cascadingVersion = '2.1.6'
ext.hadoopVersion = '1.1.2'

dependencies {
  // Scala compiler + related tools, and standard library
  scalaTools 'org.scala-lang:scala-compiler:2.9.2'
  compile 'org.scala-lang:scala-library:2.9.2'

  // Scalding
  compile( 'com.twitter:scalding_2.9.2:0.8.1' )

  // in case you need to add JARs from a local build
  compile fileTree( dir: 'lib', includes: ['*.jar'] )

  compile( group: 'cascading', name: 'cascading-core', version: cascadingVersion )
  compile( group: 'cascading', name: 'cascading-hadoop', version: cascadingVersion )
}

jar {
  description = "Assembles a Hadoop-ready JAR file"
  doFirst {
    into( 'lib' ) {
      from configurations.compile
    }
  }

  manifest {
    attributes( "Main-Class": "com.twitter.scalding.Tool" )
  }
}
