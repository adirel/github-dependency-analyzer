buildscript {
    repositories {
        maven { url 'http://repo.springsource.org/plugins-release' }
    }
    dependencies {
        classpath 'org.springframework.build.gradle:docbook-reference-plugin:0.1.5'
    }
}
description = 'Sample Applications for Spring for Apache Hadoop'

apply plugin: 'docbook-reference'

reference {
    sourceDir = file('docs/src/reference/docbook')
}


task docsZip(type: Zip) {
    group = 'Distribution'
    classifier = 'docs'
    description = "Builds -${classifier} archive containing api and reference for deployment"

    from (reference) {
        into 'reference'
    }
}

task distZip(type: Zip, dependsOn: [docsZip]) {
    group = 'Distribution'
    classifier = 'dist'
    description = "Builds -${classifier} archive, containing all jars and docs, " +
                  "suitable for community download page."

    ext.zipRootDir = "${project.name}-${project.version}"

    into (zipRootDir) {
        from('docs/src/info') {
            include 'readme.txt'
            include 'license.txt'
            include 'notice.txt'
            expand(copyright: new Date().format('yyyy'), version: project.version)
        }

        from(zipTree(docsZip.archivePath)) {
            into "docs"
        }


    }
}

artifacts {
    archives docsZip
}

defaultTasks 'reference'
description = 'Spring Hadoop Samples - Spring Batch WordCount'

apply plugin: 'base'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'eclipse'  // `gradle eclipse` to generate .classpath/.project
apply plugin: 'application'

repositories {
    // Public Spring artefacts
    maven { url "http://repo.springsource.org/libs-snapshot" }
}

//load version from the root folder
def props = new Properties();
new File("../gradle.properties").withInputStream { props.load(it) }
props.each({ project.ext[it.key] = it.value } )
version = project.ext.version

dependencies {
    compile "org.springframework.data:spring-data-hadoop:$version"
    compile "org.apache.hadoop:hadoop-examples:$hadoopVersion"
    compile "org.springframework.batch:spring-batch-core:$springBatchVersion"
    // update the version that comes with Batch
    compile "org.springframework:spring-tx:$springVersion"
    
    testCompile "junit:junit:$junitVersion"
    testCompile "org.springframework:spring-test:$springVersion"
}

sourceSets { main { resources { srcDir file('../resources') } } }

run {
  args 'classpath:/launch-context.xml', 'basicJob'
}
mainClassName = "org.springframework.batch.core.launch.support.CommandLineJobRunner"
defaultTasks 'run'description = 'Spring Hadoop Samples - Cascading for the Impatient - Part 2'

apply plugin: 'base'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'application'

repositories {
    // Public Spring artefacts
    maven { url "http://repo.springsource.org/libs-snapshot" }
    mavenLocal()
}

//load version from the root folder
def props = new Properties();
new File("../gradle.properties").withInputStream { props.load(it) }
props.each({ project.ext[it.key] = it.value } )
version = project.ext.version

dependencies {
    compile "org.springframework.data:spring-data-hadoop:$version"
    compile "cascading:cascading-hadoop:$cascadingVersion"
    // use the latest Spring version to showcase Spring backward compatibility
    compile "org.springframework:spring-context-support:3.2.0.RELEASE"
    
    testCompile "junit:junit:$junitVersion"
    testCompile "org.springframework:spring-test:$springVersion"
    
    runtime "log4j:log4j:$log4jVersion"
    runtime "org.slf4j:slf4j-log4j12:$slf4jVersion"
}

sourceSets { main { resources { srcDir file('../resources') } } }
mainClassName = "org.springframework.data.hadoop.samples.cascading.Main"
defaultTasks 'run'description = 'Spring Hadoop Samples - HBase CRUD'

apply plugin: 'base'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'application'

repositories {
    maven { url "http://repo.springsource.org/libs-snapshot" }
}

//load version from the root folder
def props = new Properties();
new File("../gradle.properties").withInputStream { props.load(it) }
props.each({ project.ext[it.key] = it.value } )
version = project.ext.version

dependencies {
    compile("org.springframework.data:spring-data-hadoop:$version") {
      exclude module: "hive-metastore"
    }
    compile "org.springframework:spring-tx:$springVersion"
    compile "org.apache.hadoop:hadoop-core:$hadoopVersion"
    compile "org.apache.hbase:hbase:$hbaseVersion"
    compile "javax.inject:javax.inject:1"
    compile "javax.annotation:jsr250-api:1.0"
    
    testCompile "junit:junit:$junitVersion"
    testCompile "org.springframework:spring-test:$springVersion"
}

mainClassName = "org.springframework.data.hadoop.samples.hbase.Main"
defaultTasks 'run'
description = 'Spring Hadoop Samples - Running a Pig script'

apply plugin: 'base'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'application'

repositories {
    // Public Spring artefacts
    maven { url "http://repo.springsource.org/libs-snapshot" }
}

//load version from the root folder
def props = new Properties();
new File("../gradle.properties").withInputStream { props.load(it) }
props.each({ project.ext[it.key] = it.value } )
version = project.ext.version

dependencies {
    compile "org.springframework.data:spring-data-hadoop:$version"
    compile "org.apache.hadoop:hadoop-examples:$hadoopVersion"
    compile "org.springframework.batch:spring-batch-core:$springBatchVersion"
    // update the version that comes with Batch
    compile "org.springframework:spring-tx:$springVersion"
    compile "org.apache.pig:pig:$pigVersion"
    runtime "jline:jline:0.9.94"
    runtime "com.google.guava:guava:r06"
    runtime "log4j:log4j:1.2.16"
    runtime "org.antlr:antlr-runtime:$antlrVersion"
    
    testCompile "junit:junit:$junitVersion"
    testCompile "org.springframework:spring-test:$springVersion"
}

task downloadSampleSet(type:Copy) {
   if (!new File('src/main/resources/ml-100k.zip').isFile()) {
    ant.get(src: 'http://www.grouplens.org/system/files/ml-100k.zip', 
           dest: 'src/main/resources/', usetimestamp:true)
   }
   copy {
       from zipTree('src/main/resources/ml-100k.zip')
         into ('src/main/resources/')
         include 'ml-100k/u.data'
         exclude '**/*'
   }
}

sourceSets { main { resources { srcDir file('../resources') } } }

run {  args 'classpath:META-INF/spring/context.xml', 'pigJob' }
mainClassName = "org.springframework.batch.core.launch.support.CommandLineJobRunner"
defaultTasks 'run'
description = 'Spring Hadoop Samples - WordCount'

apply plugin: 'base'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'application'

repositories {
    // Public Spring artefacts
    maven { url "http://repo.springsource.org/libs-snapshot" }
}

//load version from the root folder
def props = new Properties();
new File("../gradle.properties").withInputStream { props.load(it) }
props.each({ project.ext[it.key] = it.value } )
version = project.ext.version

dependencies {
    compile "org.springframework.data:spring-data-hadoop:$version"
    compile "org.apache.hadoop:hadoop-examples:$hadoopVersion"
    
    testCompile "junit:junit:$junitVersion"
    testCompile "org.springframework:spring-test:$springVersion"
}

sourceSets { main { resources { srcDir file('../resources') } } }
mainClassName = "org.springframework.data.hadoop.samples.wordcount.Main"
defaultTasks 'run'