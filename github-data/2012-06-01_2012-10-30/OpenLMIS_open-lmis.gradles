/*
 * This program is part of the OpenLMIS logistics management information system platform software.
 * Copyright © 2013 VillageReach
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *  
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License along with this program.  If not, see http://www.gnu.org/licenses.  For additional information contact info@OpenLMIS.org. 
 */



apply plugin: 'idea'
apply plugin: 'versions'
apply plugin: 'properties'


idea.project.languageLevel = '1.7'
idea.project.jdkName = '1.7'

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "net.saliman:gradle-cobertura-plugin:1.2.0"
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.3'
    classpath 'net.saliman:gradle-properties-plugin:1.2.0'


  }
}
subprojects {
  apply plugin: 'idea'
  apply plugin: 'properties'
  idea {
    project {
      ext.languageLevel = '1.7'
      ext.jdkName = '1.7'
    }
  }
  apply plugin: 'java'

  [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

  repositories {
    mavenCentral()
    maven {
      url "http://repo.springsource.org/plugins-release/"
    }
  }
  dependencies {
    compile 'org.projectlombok:lombok:0.10.8',
      'commons-io:commons-io:2.4'


    testCompile 'junit:junit:4.8.2',
      'org.mockito:mockito-all:1.9.5',
      'org.hamcrest:hamcrest-all:1.3',
      'cglib:cglib:2.2.2',
      'org.powermock:powermock-mockito-release-full:1.5',
      'com.natpryce:make-it-easy:3.1.0'
  }

  test {
    jvmArgs '-XX:-UseSplitVerifier'
    System.properties.get('environmentName', 'local')
    systemProperties System.properties
    useJUnit {
      includeCategories 'org.openlmis.db.categories.UnitTests'
      includeCategories 'org.openlmis.db.categories.IntegrationTests'
    }
  }

  task IntegrationTests(type: Test) {
    jvmArgs '-XX:-UseSplitVerifier'
    System.properties.get('environmentName', 'local')
    systemProperties System.properties
    useJUnit {
      includeCategories 'org.openlmis.db.categories.IntegrationTests'
    }
  }

}

configure(subprojects.findAll { it.name != 'db' }) {
  dependencies {
    testCompile project(path: ':modules:db', configuration: 'testFixtures')
  }
}
/*
 * This program is part of the OpenLMIS logistics management information system platform software.
 * Copyright © 2013 VillageReach
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *  
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License along with this program.  If not, see http://www.gnu.org/licenses.  For additional information contact info@OpenLMIS.org. 
 */

apply plugin: 'cobertura'

dependencies {
    compile 'org.springframework:spring-core:3.1.1.RELEASE',
            'org.springframework:spring-aspects:3.1.1.RELEASE',
            'org.aspectj:aspectjrt:1.7.0',
            project(':modules:db'),
            project(':modules:core'),
            'org.springframework.security:spring-security-taglibs:3.1.2.RELEASE',
            'org.springframework.security:spring-security-core:3.1.2.RELEASE',
            'org.springframework.security:spring-security-web:3.1.3.RELEASE',
            'org.springframework.security:spring-security-config:3.1.3.RELEASE',
            'javax.servlet:servlet-api:2.5'

    testCompile 'org.springframework:spring-test:3.1.1.RELEASE'
}

cobertura {
    coverageFormats << 'xml'
}/*
 * This program is part of the OpenLMIS logistics management information system platform software.
 * Copyright © 2013 VillageReach
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *  
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License along with this program.  If not, see http://www.gnu.org/licenses.  For additional information contact info@OpenLMIS.org. 
 */

apply plugin: 'cobertura'

dependencies {

    compile "postgresql:postgresql:9.1-901.jdbc4",
            'org.springframework:spring-webmvc:3.1.1.RELEASE',
            'org.springframework:spring-web:3.1.1.RELEASE',
            'org.springframework:spring-aspects:3.1.1.RELEASE',
            'org.springframework.integration:spring-integration-ftp:2.2.3.RELEASE',
            'org.aspectj:aspectjrt:1.7.0',
            'org.projectlombok:lombok:0.11.0',
            'org.codehaus.jackson:jackson-mapper-asl:1.9.11',
            'joda-time:joda-time:2.1',
            'commons-codec:commons-codec:1.7',
            'org.ict4h:atomfeed-commons:0.9.2',
            'org.ict4h:atomfeed-server:0.9.2',
            'org.ict4h:atomfeed-spring-server:0.9.2',
            project(':modules:db'),
            project(':modules:email'),
            project(':modules:upload')

    testCompile 'org.springframework:spring-test:3.1.1.RELEASE',
            project(path: ':modules:email', configuration: 'testFixtures')


    configurations {
        testFixtures {
            extendsFrom testRuntime
        }
    }

    task testJar(type: Jar) {
        from sourceSets.test.output
        classifier = 'test'
    }

    artifacts {
        testFixtures testJar
    }
}

cobertura {
    coverageFormats << 'xml'
}

/*
 * This program is part of the OpenLMIS logistics management information system platform software.
 * Copyright © 2013 VillageReach
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *  
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License along with this program.  If not, see http://www.gnu.org/licenses.  For additional information contact info@OpenLMIS.org. 
 */

import groovy.sql.Sql

configurations {
    flyway
    classpath
}

dependencies {
    compile 'com.googlecode.flyway:flyway-core:1.7',
            'com.googlecode.flyway:flyway-ant:1.7',
            'postgresql:postgresql:9.1-901.jdbc4',
            'com.mchange:c3p0:0.9.2.1',
            'org.springframework:spring-tx:3.1.1.RELEASE',
            'org.springframework:spring-jdbc:3.1.1.RELEASE',
            'org.springframework:spring-aspects:3.1.1.RELEASE',
            'org.aspectj:aspectjrt:1.7.0',
            'org.mybatis:mybatis:3.2.2',
            'org.mybatis:mybatis-spring:1.2.0'

    testCompile 'org.springframework:spring-test:3.1.1.RELEASE'

    flyway 'com.googlecode.flyway:flyway-ant:1.7',
            'postgresql:postgresql:9.1-901.jdbc4'

    classpath 'postgresql:postgresql:9.1-901.jdbc4'

    configurations {
        testFixtures {
            extendsFrom testRuntime
        }
    }

    task testJar(type: Jar) {
        from sourceSets.test.output
        classifier = 'test'
    }

    artifacts {
        testFixtures testJar
    }

}

String connectionString = "$dbUrlPrefix$databaseHostName:$databasePort/$dbName"
connectionString += (dbSslEnabled == 'true') ? "?ssl=true&sslfactory=org.postgresql.ssl.NonValidatingFactory" : ""


task setupDB << {
    tasks.dropDB.execute()
    tasks.createDB.execute()
    executeSql('create schema atomfeed', true)

    ext.flyway_classpath = files(configurations.flyway)
    ant.taskdef(name: 'flywayInit', classname: 'com.googlecode.flyway.ant.InitTask', classpath: ext.flyway_classpath.asPath)
    ant.flywayInit(driver: dbDriver, url: connectionString, user: dbUser, password: dbPassword)

    tasks.migrateDB.execute()
}

task createDB << {
    println("Creating Database..")
    executeSql("create database $dbName")
}

task dropDB << {
    println("Dropping Database..")
    if (!closeActiveConnections("procpid")) {
        closeActiveConnections("pid")
    }
    executeSql("DROP DATABASE IF EXISTS $dbName")
}

task dropSchemas << {
    executeSql('drop schema public cascade ', true)
    executeSql('drop schema atomfeed cascade ', true)
}

task createSchemas << {
    executeSql('create schema public', true)
    executeSql('create schema atomfeed', true)
}

def boolean closeActiveConnections(String pid) {
    try {
        executeSql("SELECT pg_terminate_backend($pid) FROM pg_stat_activity WHERE datname='$dbName'")
        return true
    } catch (Exception e) {
        return false
    }
}

jar.doFirst {
    tasks.migrateDB.execute()
}

task migrateDB() << {
    println("Migrating database..")
    ext.flyway_classpath = files(sourceSets.main.resources.srcDirs) + files(configurations.flyway)
    ant.taskdef(name: 'flywayMigrate', classname: 'com.googlecode.flyway.ant.MigrateTask', classpath: ext.flyway_classpath.asPath)
    ant.flywayMigrate(driver: dbDriver, url: connectionString, user: dbUser, password: dbPassword)
}

task testSeed(type: Exec) {
    environment("PGPASSWORD", dbPassword)
    commandLine 'psql', '-U', dbUser, '--file', '../../test-data/sql/seed.sql', '-h', databaseHostName, '-w', dbName
}

task seed(type: Exec) {
    environment("PGPASSWORD", dbPassword)
    commandLine 'psql', '-U', dbUser, '--file', 'src/main/resources/seed/seed.sql', '-h', databaseHostName, '-w', dbName
}

def executeSql(String statement, Boolean includeDbName = false) {
    def connectionString = "jdbc:postgresql://$databaseHostName:$databasePort"

    connectionString += (includeDbName) ? "/$dbName" : ""

    connectionString += (dbSslEnabled == 'true') ? "?ssl=true&sslfactory=org.postgresql.ssl.NonValidatingFactory" : ""

    configurations.classpath.each { file ->
        gradle.class.classLoader.addURL(file.toURI().toURL())
    }

    Class.forName(dbDriver)

    Sql.newInstance(connectionString, dbUser, dbPassword, dbDriver).execute(statement)
}

/*
 * This program is part of the OpenLMIS logistics management information system platform software.
 * Copyright © 2013 VillageReach
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *  
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License along with this program.  If not, see http://www.gnu.org/licenses.  For additional information contact info@OpenLMIS.org. 
 */

apply plugin: 'cobertura'

dependencies {
    compile 'org.springframework:spring-core:3.1.1.RELEASE',
            'org.springframework:spring-aspects:3.1.1.RELEASE',
            'org.aspectj:aspectjrt:1.7.0',
            project(':modules:db'),
            project(':modules:core'),
            'org.springframework.security:spring-security-taglibs:3.1.2.RELEASE',
            'org.springframework.security:spring-security-core:3.1.2.RELEASE',
            'org.springframework.security:spring-security-web:3.1.3.RELEASE',
            'org.springframework.security:spring-security-config:3.1.3.RELEASE',
            'javax.servlet:servlet-api:2.5'

    testCompile 'org.springframework:spring-test:3.1.1.RELEASE',
            project(':modules:db'),
            project(path: ':modules:core', configuration: 'testFixtures')

    configurations {
        testFixtures {
            extendsFrom testRuntime
        }
    }

    task testJar(type: Jar) {
        from sourceSets.test.output
        classifier = 'test'
    }

    artifacts {
        testFixtures testJar
    }
}

cobertura {
    coverageFormats << 'xml'
}/*
 * This program is part of the OpenLMIS logistics management information system platform software.
 * Copyright © 2013 VillageReach
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *  
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License along with this program.  If not, see http://www.gnu.org/licenses.  For additional information contact info@OpenLMIS.org. 
 */

apply plugin: 'cobertura'

dependencies {

    compile 'org.springframework:spring-aspects:3.1.1.RELEASE',
            'org.springframework:spring-webmvc:3.1.1.RELEASE',
            'javax.mail:mail:1.4.5',
            'org.springframework.integration:spring-integration-core:2.2.3.RELEASE',
            'org.springframework.integration:spring-integration-jdbc:2.2.3.RELEASE',
            'commons-collections:commons-collections:20040616',
            'commons-lang:commons-lang:2.6',
            project(':modules:db')

    testCompile 'org.springframework:spring-test:3.1.1.RELEASE',
            'org.springframework:spring-aspects:3.1.1.RELEASE',
            'javax.mail:mail:1.4.5'

    configurations {
        testFixtures {
            extendsFrom testRuntime
        }
    }

    task testJar(type: Jar) {
        from sourceSets.test.output
        classifier = 'test'
    }

    artifacts {
        testFixtures testJar
    }
}

cobertura {
    coverageFormats << 'xml'
}/*
 * This program is part of the OpenLMIS logistics management information system platform software.
 * Copyright © 2013 VillageReach
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *  
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License along with this program.  If not, see http://www.gnu.org/licenses.  For additional information contact info@OpenLMIS.org. 
 */

import org.apache.tools.ant.filters.ReplaceTokens
import org.apache.tools.ant.taskdefs.condition.Os
import org.gradle.api.tasks.Exec

apply plugin: 'jetty'
apply plugin: 'war'
apply plugin: 'cobertura'

task npm(type: Exec) {
  group = "Build"
  description = "Installs all Node.js dependencies defined in package.json"
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    commandLine 'cmd', '/c', 'npm', 'install'
  } else {
    commandLine 'npm', 'install'
  }
  inputs.file "package.json"
  outputs.dir "node_modules"
}

class GruntTask extends Exec {
  private String gruntExecutable = Os.isFamily(Os.FAMILY_WINDOWS) ? "grunt.cmd" : "grunt"
  private String switches = "--no-color"

  String gruntArgs = ""

  public GruntTask() {
    super()
    this.setExecutable(gruntExecutable)
  }

  public void setGruntArgs(String gruntArgs) {
    this.args = "$switches $gruntArgs".trim().split(" ") as List
  }
}

task jsHint(type: GruntTask) {
  description = 'Runs JSHint against all JS files and fails upon JSHint error'
  workingDir '.'
  gruntArgs = "jshint"
  dependsOn npm
}

task karmaRun(type: Exec) {
    description = 'Runs jasmine specs and publishes js tests coverage report'
    commandLine 'karma', 'start', 'karma.config.js', '--singleRun'
}

task lesslint(type: GruntTask) {
  description = 'Runs LessLint against all LESS files'
  workingDir '.'
  gruntArgs = "lesslint --force"
  dependsOn npm
}

task less(type: GruntTask) {
  description = 'Compiles all LESS files to CSS'
  workingDir '.'
  gruntArgs = "less"
  dependsOn npm
}

task uglify(type: GruntTask) {
  description = 'Minifies JS files'
  workingDir '.'
  gruntArgs = "uglify"
  dependsOn npm
}

task lesswatch(type: GruntTask) {
  description = 'Looks for changes in LESS and recompiles to CSS upon detecting change'
  workingDir '.'
  gruntArgs = 'watch'
  ignoreExitValue = true
  dependsOn npm
}

buildscript {
  repositories {
    mavenCentral();
    add(new org.apache.ivy.plugins.resolver.URLResolver()) {
      name = 'GitHub'
      addArtifactPattern 'http://cloud.github.com/downloads/[organisation]/[module]/[module]-[revision].[ext]'
    }
  }
}

war {
  exclude "public/less/"
  exclude "public/css/"
  exclude "public/fonts/"
  exclude "public/images/"
  exclude "public/js/"
  exclude "public/lib/"

  doFirst {
    prepareVersionedDirectory.execute();
  }

  doLast {
    cleanWorkspace.execute()
  }
}

task prepareVersionedDirectory(type: Copy) {
  ext.currentTime = System.properties.get('version', new Date().getTime() + "");
  from('src/main/webapp/public') {
    exclude 'pages/**/*.*', 'v' + ext.currentTime + '**/*';
  }
  into 'src/main/webapp/public/v' + ext.currentTime;
  includeEmptyDirs = false;
}

tasks.withType(War) {
  eachFile { FileCopyDetails fileCopy ->
    if (fileCopy.name.equals('services.js') || fileCopy.name.equals('offline.appcacheOFF')) {
      fileCopy.filter(ReplaceTokens, tokens: [version: prepareVersionedDirectory.currentTime])
    }
    if (fileCopy.name.equals('offline.appcacheOFF')) {
      fileCopy.setName('offline.appcache')
    }
    if (fileCopy.name.endsWith('html') || fileCopy.name.endsWith('css') || fileCopy.name.endsWith('appcache'))
      fileCopy.filter { String line ->
        if (!line.contains(".html"))
          line.replace('/public', '/public/v' + prepareVersionedDirectory.currentTime)
        else
          "$line"
      }
  }
}

task cleanWorkspace(type: Delete) {
  delete 'src/main/webapp/public/v' + prepareVersionedDirectory.currentTime + '/';
}

build.doLast {
  karmaRun.execute()
  jsHint.execute()
  cleanWorkspace.execute()
}

dependencies {
  compile 'org.springframework:spring-webmvc:3.1.1.RELEASE',
    'org.springframework:spring-core:3.1.1.RELEASE',
    'org.springframework:spring-web:3.1.1.RELEASE',
    'javax.servlet:servlet-api:2.5',
    'commons-collections:commons-collections:20040616',
    'org.codehaus.jackson:jackson-mapper-asl:1.9.9',
    'org.springframework.security:spring-security-taglibs:3.1.2.RELEASE',
    'org.json:json:20090211',
    'log4j:log4j:1.2.15',
    'org.aspectj:aspectjweaver:1.7.0',
    'cglib:cglib:2.2.2',
    'commons-fileupload:commons-fileupload:1.2.2',
    'javax.servlet:servlet-api:2.5',
    'org.testng:testng:6.1.1',
    'com.itextpdf:itextpdf:5.4.0',
    project(':modules:authentication'),
    project(':modules:requisition'),
    project(':modules:core'),
    project(':modules:shipment'),
    project(':modules:rest-api'),
    project(':modules:reporting'),
    project(':modules:distribution')


  testCompile 'org.springframework:spring-test:3.1.1.RELEASE',
    'org.springframework:spring-test-mvc:1.0.0.M1',
    'javax.servlet:servlet-api:2.5',
    'javax.servlet:servlet-api:2.5',
    'org.powermock:powermock-api-mockito:1.4.12',
    'org.powermock:powermock-module-junit4:1.4.12',
    'org.codehaus.jackson:jackson-mapper-asl:1.9.9',
    'cglib:cglib:2.2.2',
    project(path: ':modules:core', configuration: 'testFixtures'),
    project(path: ':modules:rest-api', configuration: 'testFixtures'),
    project(path: ':modules:requisition', configuration: 'testFixtures'),
    project(path: ':modules:shipment', configuration: 'testFixtures'),
    project(path: ':modules:distribution', configuration: 'testFixtures'),
    project(path: ':modules:reporting', configuration: 'testFixtures')
}

jettyRun {
  jettyRun.httpPort = 9091;
  contextPath = ''
  daemon = true;
  jettyRun.scanIntervalSeconds = 1
  System.properties.get('environmentName', 'local')
}

def configureHttps(keystore, password) {
  ext.connectors = [jettyRun.class.classLoader.loadClass('org.mortbay.jetty.security.SslSocketConnector').newInstance()]
  ext.connectors[0].port = 9091
  ext.connectors[0].keystore = connectors[0].truststore = keystore
  ext.connectors[0].keyPassword = connectors[0].trustPassword = password
  ext.connectors[0].wantClientAuth = true
  ext.connectors[0].needClientAuth = false
  return ext.connectors;
}

task run(dependsOn: [jettyRun, lesswatch]) {
  description = 'Runs the Jetty server and starts watching LESS files for changes'
}

task explodedWar(type: Copy) {
  description = 'Explodes WAR file'
  into "$buildDir/exploded"
  with war
}

task deployOpenLmis(type: GradleBuild) {
  tasks = ['build']
  tasks = ['cargoRedeployRemote']
}

compileJava.dependsOn less

cobertura {
  coverageFormats << 'xml'
}/*
 * This program is part of the OpenLMIS logistics management information system platform software.
 * Copyright © 2013 VillageReach
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *  
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License along with this program.  If not, see http://www.gnu.org/licenses.  For additional information contact info@OpenLMIS.org. 
 */

apply plugin: 'cobertura'

dependencies {
    compile 'org.springframework:spring-core:3.1.1.RELEASE',
            'org.springframework:spring-aspects:3.1.1.RELEASE',
            'org.springframework:spring-web:3.1.1.RELEASE',
            'org.springframework:spring-webmvc:3.1.1.RELEASE',
            'org.springframework:spring-jdbc:3.1.1.RELEASE',
            'postgresql:postgresql:9.1-901.jdbc4',
            'com.mchange:c3p0:0.9.2.1',
            'javax.servlet:servlet-api:2.5',
            'org.aspectj:aspectjrt:1.7.0',
            'commons-lang:commons-lang:2.6',
            'commons-collections:commons-collections:20040616',
            'net.sf.jasperreports:jasperreports:5.0.4',
            'org.codehaus.groovy:groovy-all:2.0.1',
            'com.lowagie:itext:4.2.0',
            'org.apache.poi:poi:3.7',
            project(':modules:core')

    testCompile 'org.springframework:spring-test:3.1.1.RELEASE',
            'postgresql:postgresql:9.1-901.jdbc4',
            project(path: ':modules:core', configuration: 'testFixtures')

    configurations {
        testFixtures {
            extendsFrom testRuntime
        }
    }

    task testJar(type: Jar) {
        from sourceSets.test.output
        classifier = 'test'
    }

    artifacts {
        testFixtures testJar
    }
}

cobertura {
    coverageFormats << 'xml'
}/*
 * This program is part of the OpenLMIS logistics management information system platform software.
 * Copyright © 2013 VillageReach
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *  
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License along with this program.  If not, see http://www.gnu.org/licenses.  For additional information contact info@OpenLMIS.org. 
 */

apply plugin: 'cobertura'

dependencies {
    compile 'org.springframework:spring-core:3.1.1.RELEASE',
            'org.springframework:spring-aspects:3.1.1.RELEASE',
            'org.aspectj:aspectjrt:1.7.0',
            'commons-lang:commons-lang:2.6',
            'commons-collections:commons-collections:20040616',
            'org.codehaus.jackson:jackson-mapper-asl:1.9.11',
            'org.ict4h:atomfeed-commons:0.9.2',
            'org.ict4h:atomfeed-server:0.9.2',
            'org.ict4h:atomfeed-spring-server:0.9.2',
            project(':modules:db'),
            project(':modules:core')

    testCompile 'org.springframework:spring-test:3.1.1.RELEASE',
            project(path : ':modules:core', configuration: 'testFixtures')

    configurations {
        testFixtures {
            extendsFrom testRuntime
        }
    }

    task testJar(type: Jar) {
        from sourceSets.test.output
        classifier = 'test'
    }

    artifacts {
        testFixtures testJar
    }
}

cobertura {
    coverageFormats << 'xml'
}/*
 * This program is part of the OpenLMIS logistics management information system platform software.
 * Copyright © 2013 VillageReach
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *  
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License along with this program.  If not, see http://www.gnu.org/licenses.  For additional information contact info@OpenLMIS.org. 
 */

apply plugin: 'cobertura'

dependencies {
    compile 'org.springframework:spring-core:3.1.1.RELEASE',
            'org.springframework:spring-aspects:3.1.1.RELEASE',
            'javax.servlet:servlet-api:2.5',
            'org.aspectj:aspectjrt:1.7.0',
            'commons-lang:commons-lang:2.6',
            'commons-collections:commons-collections:20040616',
            'org.springframework.security:spring-security-core:3.1.2.RELEASE',
            project(':modules:requisition'),
            project(':modules:shipment')

    testCompile 'org.springframework:spring-test:3.1.1.RELEASE',
            project(path: ':modules:requisition', configuration: 'testFixtures')

    configurations {
        testFixtures {
            extendsFrom testRuntime
        }
    }

    task testJar(type: Jar) {
        from sourceSets.test.output
        classifier = 'test'
    }

    artifacts {
        testFixtures testJar
    }
}

cobertura {
    coverageFormats << 'xml'
}/*
 * This program is part of the OpenLMIS logistics management information system platform software.
 * Copyright © 2013 VillageReach
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *  
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License along with this program.  If not, see http://www.gnu.org/licenses.  For additional information contact info@OpenLMIS.org. 
 */

apply plugin: 'cobertura'

dependencies {

    compile 'org.springframework:spring-core:3.1.1.RELEASE',
            'org.springframework:spring-aspects:3.1.1.RELEASE',
            'org.aspectj:aspectjrt:1.7.0',
            'javax.servlet:servlet-api:2.5',
            'commons-lang:commons-lang:2.6',
            'org.slf4j:slf4j-api:1.7.5',
            'org.springframework.integration:spring-integration-ftp:2.2.3.RELEASE',
            'org.springframework.security:spring-security-core:3.1.2.RELEASE',
            'org.apache.camel:camel-core:2.11.1',
            'org.apache.camel:camel-spring:2.11.1',
            'org.apache.camel:camel-ftp:2.11.1',
            'commons-jxpath:commons-jxpath:1.3',
            project(':modules:core'),
            project(':modules:requisition')

    compile('net.sf.supercsv:super-csv-dozer:2.0.1') {
        exclude module: 'commons-beanutils'
    }

    testCompile 'org.springframework:spring-test:3.1.1.RELEASE',
            'org.ict4h:atomfeed-commons:0.9.2',
            'org.ict4h:atomfeed-server:0.9.2',
            'org.ict4h:atomfeed-spring-server:0.9.2',
            project(path: ':modules:core', configuration: 'testFixtures'),
            project(path: ':modules:requisition', configuration: 'testFixtures')


    configurations {
        testFixtures {
            extendsFrom testRuntime
        }
    }

    task testJar(type: Jar) {
        from sourceSets.test.output
        classifier = 'test'
    }

    artifacts {
        testFixtures testJar
    }
}

cobertura {
    coverageFormats << 'xml'
}/*
 * This program is part of the OpenLMIS logistics management information system platform software.
 * Copyright © 2013 VillageReach
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *  
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License along with this program.  If not, see http://www.gnu.org/licenses.  For additional information contact info@OpenLMIS.org. 
 */

apply plugin: 'cobertura'

apply plugin: 'idea'
apply plugin: 'java'

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.projectlombok:lombok:0.11.0',
            'org.aspectj:aspectjrt:1.7.0',
            'commons-beanutils:commons-beanutils:20030211.134440',
            'commons-collections:commons-collections:20040616',
            'org.springframework:spring-context:3.1.2.RELEASE',
            'org.springframework:spring-aspects:3.1.1.RELEASE',
            'org.springframework:spring-beans:3.1.2.RELEASE',
            'org.springframework:spring-tx:3.1.1.RELEASE'

    compile('net.sf.supercsv:super-csv-dozer:2.0.1') {
        exclude module: 'commons-beanutils'
    }

    testCompile 'org.springframework:spring-test:3.1.2.RELEASE'
}

cobertura {
    coverageFormats << 'xml'
}/*
 * This program is part of the OpenLMIS logistics management information system platform software.
 * Copyright © 2013 VillageReach
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *  
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License along with this program.  If not, see http://www.gnu.org/licenses.  For additional information contact info@OpenLMIS.org. 
 */

apply plugin: 'jetty'
apply plugin: 'java'

dependencies {
    compile 'org.seleniumhq.selenium:selenium-java:2.35.0',
            'org.seleniumhq.selenium:selenium-firefox-driver:2.33.0',
            'org.seleniumhq.selenium:selenium-ie-driver:2.33.0',
            'org.seleniumhq.selenium:selenium-chrome-driver:2.33.0',
            'net.sf.json-lib:json-lib:0.9',
            'postgresql:postgresql:9.0-801.jdbc4',
            project(':test-modules:test-core')


    testCompile 'org.springframework:spring-test:3.1.1.RELEASE'
    testCompile 'org.testng:testng:6.1.1'
    testCompile group: 'com.google.inject', name: 'guice', version: '3.0'
    testCompile("org.uncommons:reportng:1.1.2") {
        exclude group: "org.testng", module: "testng"
    }
    testCompile 'net.sf.json-lib:json-lib:0.9'
    testCompile 'postgresql:postgresql:9.0-801.jdbc4'
    testCompile project(':test-modules:test-core')

    testCompile 'info.cukes:cucumber-core:1.1.2'
    testCompile 'info.cukes:cucumber-java:1.1.2'
    testCompile 'info.cukes:cucumber-html:0.2.3'
    testCompile 'info.cukes:cucumber-junit:1.1.2'
    testCompile 'info.cukes:cucumber-jvm:1.1.2'
    testCompile 'info.cukes:cucumber-jvm-deps:1.0.3'
    testCompile 'junit:junit:4.10'
    testCompile 'postgresql:postgresql:9.0-801.jdbc4'
}

String connectionString = "$dbUrlPrefix$databaseHostName:$databasePort/$dbName"

test {
    exclude '**/org/openlmis/functional/*.*'
}

task buildOpenLmis(type: GradleBuild) {
    buildFile = '../../modules/openlmis-web/build.gradle'
    tasks = ['jettyRun']
}

task smokeTest(type: Test) {
    dependsOn assemble, compileTestJava

    doLast {

        htmlformat = "html:${buildDir}/reports/tests/bddTest-report-functional"
        jsonformat = "json-pretty:${buildDir}/reports/tests/bddTest-report-functional/cucumber-report-functional.json"
        javaexec {
            System.properties.get('browser', 'firefox')
            System.properties.get('dbUrl', connectionString)
            System.properties.get('baseurl', "$baseurl")
            systemProperties System.properties
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['-f', htmlformat, '-f', jsonformat, '--glue', 'org.openlmis.functional', '--tags', '@smokeRequisition,@smokeDistribution', '--tags', '~@WIP', 'src/test/resources']
        }
    }
}

smokeTest.doFirst() {
    buildOpenLmis.execute()
}

task requisitionSmokeTest(type: Test) {
    dependsOn assemble, compileTestJava

    doLast {

        htmlformat = "html:${buildDir}/reports/tests/bddTest-report-functional"
        jsonformat = "json-pretty:${buildDir}/reports/tests/bddTest-report-functional/cucumber-report-functional.json"
        javaexec {
            System.properties.get('browser', 'firefox')
            System.properties.get('dbUrl', connectionString)
            System.properties.get('baseurl', "$baseurl")
            systemProperties System.properties
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['-f', htmlformat, '-f', jsonformat, '--glue', 'org.openlmis.functional', '--tags', '@smokeRequisition', '--tags', '~@WIP', 'src/test/resources']
        }
    }
}

requisitionSmokeTest.doFirst() {
    buildOpenLmis.execute()
}

task distributionSmokeTest(type: Test) {
    dependsOn assemble, compileTestJava

    doLast {

        htmlformat = "html:${buildDir}/reports/tests/bddTest-report-functional"
        jsonformat = "json-pretty:${buildDir}/reports/tests/bddTest-report-functional/cucumber-report-functional.json"
        javaexec {
            System.properties.get('browser', 'firefox')
            System.properties.get('dbUrl', connectionString)
            System.properties.get('baseurl', "$baseurl")
            systemProperties System.properties
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['-f', htmlformat, '-f', jsonformat, '--glue', 'org.openlmis.functional', '--tags', '@smokeDistribution', '--tags', '~@WIP', 'src/test/resources']
        }
    }
}

distributionSmokeTest.doFirst() {
    buildOpenLmis.execute()
}

task e2eTestChrome(type: Test) {
    dependsOn assemble, compileTestJava

    doLast {

        htmlformat = "html:${buildDir}/reports/tests/bddTest-report-functional"
        jsonformat = "json-pretty:${buildDir}/reports/tests/bddTest-report-functional/cucumber-report-functional.json"
        javaexec {
            System.properties.get('browser', 'chrome')
            System.properties.get('dbUrl', connectionString)
            System.properties.get('baseurl', "$baseurl")
            systemProperties System.properties
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['-f', htmlformat, '-f', jsonformat, '--glue', 'org.openlmis.functional', '--tags', '@e2e', '--tags', '~@WIP', 'src/test/resources']
        }
    }
}

e2eTestChrome.doFirst() {
    buildOpenLmis.execute()
}
task requisitionSmokeTestChrome(type: Test) {
    dependsOn assemble, compileTestJava

    doLast {
        htmlformat = "html:${buildDir}/reports/tests/bddTest-report-functional"
        jsonformat = "json-pretty:${buildDir}/reports/tests/bddTest-report-functional/cucumber-report-functional.json"
        javaexec {
            System.properties.get('browser', 'chrome')
            systemProperties System.properties
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['-f', htmlformat, '-f', jsonformat, '--glue', 'org.openlmis.functional', '--tags', '@smokeRequisition', '--tags', '~@WIP', 'src/test/resources']
        }
    }
}

requisitionSmokeTestChrome.doFirst() {
    buildOpenLmis.execute()
}

task distributionSmokeTestChrome(type: Test) {
    dependsOn assemble, compileTestJava

    doLast {
        htmlformat = "html:${buildDir}/reports/tests/bddTest-report-functional"
        jsonformat = "json-pretty:${buildDir}/reports/tests/bddTest-report-functional/cucumber-report-functional.json"
        javaexec {
            System.properties.get('browser', 'chrome')
            systemProperties System.properties
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['-f', htmlformat, '-f', jsonformat, '--glue', 'org.openlmis.functional', '--tags', '@smokeDistribution', '--tags', '~@WIP', 'src/test/resources']
        }
    }
}

distributionSmokeTestChrome.doFirst() {
    buildOpenLmis.execute()
}

task requisitionSmokeTestIE(type: Test) {
    dependsOn assemble, compileTestJava

    doLast {
        htmlformat = "html:${buildDir}/reports/tests/bddTest-report-functional"
        jsonformat = "json-pretty:${buildDir}/reports/tests/bddTest-report-functional/cucumber-report-functional.json"
        javaexec {
            System.properties.get('browser', 'ie')
            systemProperties System.properties
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['-f', htmlformat, '-f', jsonformat, '--glue', 'org.openlmis.functional', '--tags', '@smokeRequisition', '--tags', '~@WIP', 'src/test/resources']
        }
    }
}

requisitionSmokeTestIE.doFirst() {
    buildOpenLmis.execute()
}

task distributionSmokeTestIE(type: Test) {
    dependsOn assemble, compileTestJava

    doLast {
        htmlformat = "html:${buildDir}/reports/tests/bddTest-report-functional"
        jsonformat = "json-pretty:${buildDir}/reports/tests/bddTest-report-functional/cucumber-report-functional.json"
        javaexec {
            System.properties.get('browser', 'ie')
            systemProperties System.properties
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['-f', htmlformat, '-f', jsonformat, '--glue', 'org.openlmis.functional', '--tags', '@smokeDistribution', '--tags', '~@WIP', 'src/test/resources']
        }
    }
}

distributionSmokeTestIE.doFirst() {
    buildOpenLmis.execute()
}

configurations {
    cucumberRuntime {
        extendsFrom testRuntime
    }
}

repositories {
    mavenCentral()
}


task adminTest(type: Test) {
    useTestNG() {
        systemProperties['browser'] = 'firefox'
        systemProperties['dbUrl'] = connectionString
        systemProperties['baseurl'] = "$baseurl"

        suites 'src/test/java/org/openlmis/functional/testng-admin.xml'
    }
    options {
        listeners << 'org.uncommons.reportng.HTMLReporter'
        listeners << 'org.uncommons.reportng.JUnitXMLReporter'
    }
    workingDir = 'build/'
}

adminTest.doFirst() {
    buildOpenLmis.execute()
}

task requisitionTest(type: Test) {
    useTestNG() {
        systemProperties['browser'] = 'firefox'
        systemProperties['dbUrl'] = connectionString
        systemProperties['baseurl'] = "$baseurl"

        suites 'src/test/java/org/openlmis/functional/testng-requisition.xml'
    }
    options {
        listeners << 'org.uncommons.reportng.HTMLReporter'
        listeners << 'org.uncommons.reportng.JUnitXMLReporter'
    }
    workingDir = 'build/'
}

requisitionTest.doFirst() {
    buildOpenLmis.execute()
}

task distributionTest(type: Test) {
    useTestNG() {
        systemProperties['browser'] = 'firefox'
        systemProperties['dbUrl'] = connectionString
        systemProperties['baseurl'] = "$baseurl"

        suites 'src/test/java/org/openlmis/functional/testng-distribution.xml'
    }
    options {
        listeners << 'org.uncommons.reportng.HTMLReporter'
        listeners << 'org.uncommons.reportng.JUnitXMLReporter'
    }
    workingDir = 'build/'
}

distributionTest.doFirst() {
    buildOpenLmis.execute()
}

task offlineTest(type: Test) {
    useTestNG() {
        systemProperties['browser'] = 'chromeM'
        systemProperties['dbUrl'] = connectionString
        systemProperties['baseurl'] = 'https://qa-openlmis.twhosted.com'

        suites 'src/test/java/org/openlmis/functional/testng-offline.xml'
    }
    options {
        listeners << 'org.uncommons.reportng.HTMLReporter'
        listeners << 'org.uncommons.reportng.JUnitXMLReporter'
    }
    workingDir = 'build/'
}

offlineTest.doFirst() {
    buildOpenLmis.execute()
}

task createTestRequisition(type: Test) {
    useTestNG() {
        systemProperties['browser'] = 'firefox'
        systemProperties['dbUrl'] = connectionString
        systemProperties['baseurl'] = "$baseurl"

        suites 'src/test/java/org/openlmis/functional/testng-createTestRequisition.xml'
    }
    options {
        listeners << 'org.uncommons.reportng.HTMLReporter'
        listeners << 'org.uncommons.reportng.JUnitXMLReporter'
    }
    workingDir = 'build/'
}

createTestRequisition.doFirst() {
    buildOpenLmis.execute()
}

/*
 * This program is part of the OpenLMIS logistics management information system platform software.
 * Copyright © 2013 VillageReach
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *  
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License along with this program.  If not, see http://www.gnu.org/licenses.  For additional information contact info@OpenLMIS.org. 
 */

apply plugin: 'jetty'


dependencies {
    compile 'org.testng:testng:6.1.1',
            'org.seleniumhq.selenium:selenium-java:2.35.0',
            'org.seleniumhq.selenium:selenium-firefox-driver:2.33.0',
            'net.sf.json-lib:json-lib:0.9',
            'postgresql:postgresql:9.0-801.jdbc4',
            project(':modules:db')


    testCompile 'org.springframework:spring-test:3.1.1.RELEASE',
            'org.testng:testng:6.1.1',
            'net.sf.json-lib:json-lib:0.9',
            'postgresql:postgresql:9.0-801.jdbc4',
            project(':modules:db')
}



/*
 * This program is part of the OpenLMIS logistics management information system platform software.
 * Copyright © 2013 VillageReach
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *  
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License along with this program.  If not, see http://www.gnu.org/licenses.  For additional information contact info@OpenLMIS.org. 
 */

apply plugin: 'jetty'


dependencies {
    compile 'org.seleniumhq.selenium:selenium-java:2.35.0',
            'org.seleniumhq.selenium:selenium-firefox-driver:2.33.0',
            'org.seleniumhq.selenium:selenium-ie-driver:2.33.0',
            'org.seleniumhq.selenium:selenium-chrome-driver:2.33.0',
            'net.sf.json-lib:json-lib:0.9',
            'postgresql:postgresql:9.0-801.jdbc4',
            'org.codehaus.jackson:jackson-mapper-asl:1.9.9',
            project(':test-modules:test-core'),
            project(':test-modules:functional-tests'),
            project(':modules:rest-api')

    testCompile 'org.springframework:spring-test:3.1.1.RELEASE',
            'org.testng:testng:6.1.1',
            'com.google.inject:guice:3.0',
            'net.sf.json-lib:json-lib:0.9',
            'postgresql:postgresql:9.0-801.jdbc4',
            'org.codehaus.jackson:jackson-mapper-asl:1.9.9',
            project(':test-modules:test-core'),
            project(':test-modules:functional-tests'),
            project(':modules:rest-api')

    testCompile("org.uncommons:reportng:1.1.2") {
        exclude group: "org.testng", module: "testng"
    }
}

String connectionString = "$dbUrlPrefix$databaseHostName:$databasePort/$dbName"

test {
    exclude '**/org/openlmis/functional/*.*'
}

task buildOpenLmis(type: GradleBuild) {
    buildFile = '../../modules/openlmis-web/build.gradle'
    tasks = ['jettyRun']
}

task webservicetest(type: Test) {
    useTestNG() {
        systemProperties['dbUrl'] = connectionString
        systemProperties['baseurl'] = "$baseurl"

        suites 'src/test/java/org/openlmis/functional/testng-webservicetest.xml'
    }
    options {
        listeners << 'org.uncommons.reportng.HTMLReporter'
        listeners << 'org.uncommons.reportng.JUnitXMLReporter'
    }
    workingDir = 'build/'
}

webservicetest.doFirst() {
    buildOpenLmis.execute()
}

task webserviceSmokeTest(type: Test) {
    useTestNG() {
        systemProperties['dbUrl'] = connectionString
        systemProperties['baseurl'] = "$baseurl"

        suites 'src/test/java/org/openlmis/functional/testng-webserviceSmokeTest.xml'
    }
    options {
        listeners << 'org.uncommons.reportng.HTMLReporter'
        listeners << 'org.uncommons.reportng.JUnitXMLReporter'
    }
    workingDir = 'build/'
}

webserviceSmokeTest.doFirst() {
    buildOpenLmis.execute()
}


