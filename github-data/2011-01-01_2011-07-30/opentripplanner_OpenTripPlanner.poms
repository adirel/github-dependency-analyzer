<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <artifactId>otp-admin-client</artifactId>
    <packaging>war</packaging>
    <name>OpenTripPlanner Administration Client</name>

    <parent>
        <artifactId>opentripplanner</artifactId>
        <groupId>org.opentripplanner</groupId>
        <version>1.0.0-SNAPSHOT</version>
    </parent>

    <build>
        <finalName>${project.artifactId}</finalName>
        <plugins>
            <plugin>
                <groupId>ro.isdc.wro4j</groupId>
                <artifactId>wro4j-maven-plugin</artifactId>
                <version>1.3.6</version>
                <executions>
                    <execution>
                            <phase>prepare-package</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                  <targetGroups>otp-min</targetGroups>
                  <destinationFolder>${basedir}/src/main/webapp/js/</destinationFolder>
                  <contextFolder>${basedir}/src/main/webapp/</contextFolder>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <artifactId>otp-analyst-client</artifactId>
    <packaging>war</packaging>
    <name>OpenTripPlanner Analyst Client</name>

    <parent>
      <groupId>org.opentripplanner</groupId>
      <artifactId>opentripplanner</artifactId>
      <version>1.0.0-SNAPSHOT</version>
    </parent>

    <dependencies>
      <!-- all dependencies are inherited -->
    </dependencies>

    <build>
        <finalName>${project.artifactId}</finalName>
    </build>

</project>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <artifactId>otp-core</artifactId>
    <packaging>jar</packaging>
    <name>OpenTripPlanner Core</name>

    <parent>
      <groupId>org.opentripplanner</groupId>
      <artifactId>opentripplanner</artifactId>
      <version>1.0.0-SNAPSHOT</version>
    </parent>

    <dependencies>
    
      <!-- OTP MODULES -->
      
      <dependency>
        <!-- We include the client WAR artifact in the core JAR so it must be built first -->
        <groupId>org.opentripplanner</groupId>
        <artifactId>otp-leaflet-client</artifactId>
        <version>${project.version}</version>
        <type>war</type> <!-- defaults to JAR, must specify if it's WAR -->
      </dependency>
        
        <!-- SPRING -->
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-aop</artifactId>
        </dependency>
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-beans</artifactId>
        </dependency>
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-context</artifactId>
        </dependency>
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-core</artifactId>
        </dependency>
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-web</artifactId>
        </dependency>
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-jdbc</artifactId>
          <version>${spring.version}</version>
        </dependency>
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-orm</artifactId>
          <version>${spring.version}</version>
        </dependency>
        <dependency>
          <groupId>org.springframework.security</groupId>
          <artifactId>spring-security-core</artifactId>
        </dependency>
        <dependency>
          <groupId>org.springframework.security</groupId>
          <artifactId>spring-security-config</artifactId>
        </dependency>
        <dependency>
          <groupId>org.springframework.security</groupId>
          <artifactId>spring-security-web</artifactId>
        </dependency>
                
        <!-- LOGGING -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>
        <dependency>
          <!-- Jersey uses java.util logging, redirect it via slf4j API to Logback -->
          <groupId>org.slf4j</groupId>
          <artifactId>jul-to-slf4j</artifactId>
        </dependency>
        <dependency>
          <!-- Spring uses jakarta commons logging, redirect it via slf4j API to Logback -->
          <groupId>org.slf4j</groupId>
          <artifactId>jcl-over-slf4j</artifactId>
        </dependency>

        <!-- JAVA STANDARD LIBRARY EXTENSIONS -->
        <dependency>
          <groupId>com.google.guava</groupId>
          <artifactId>guava</artifactId>
        </dependency>
        <dependency>
          <groupId>org.projectlombok</groupId>
          <artifactId>lombok</artifactId>
        </dependency>
        <dependency>
          <groupId>net.lingala.zip4j</groupId>
          <artifactId>zip4j</artifactId>
          <version>1.3.1</version>
        </dependency>

        <!-- GEOTOOLS AND JTS TOPOLOGY (geometry, rasters and projection) -->
        <dependency>
          <groupId>com.vividsolutions</groupId>
          <artifactId>jts</artifactId>
        </dependency>
        <dependency>
          <groupId>org.geotools</groupId>
          <artifactId>gt-geojson</artifactId>
        </dependency>
        <dependency>
          <groupId>org.geotools</groupId>
          <artifactId>gt-referencing</artifactId>
        </dependency>
        <dependency>
          <groupId>org.geotools</groupId>
          <artifactId>gt-coverage</artifactId>
        </dependency>
        <dependency>
          <groupId>org.geotools</groupId>
          <artifactId>gt-arcgrid</artifactId>
        </dependency>
        <dependency>
          <groupId>org.geotools</groupId>
          <artifactId>gt-shapefile</artifactId>
        </dependency>
        <dependency>
          <groupId>org.geotools</groupId>
          <artifactId>gt-geotiff</artifactId>
        </dependency>
        <dependency>
          <!-- provides EPSG database for projections (shapefile loading) -->
          <groupId>org.geotools</groupId>
          <artifactId>gt-epsg-hsql</artifactId>
        </dependency>
        
        <!-- TESTING -->
        <dependency>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
        </dependency>
        <dependency>
          <!-- what is this used for? -->
          <groupId>com.sun.jersey</groupId>
          <artifactId>jersey-client</artifactId>
          <scope>test</scope> 
        </dependency>
        <dependency>
          <groupId>org.mockito</groupId>
          <artifactId>mockito-all</artifactId>
          <version>1.9.0</version>
          <scope>test</scope>
        </dependency>

        <!-- JERSEY JAX-RS annontation-driven REST -->
        <dependency>
          <groupId>com.sun.jersey</groupId>
          <artifactId>jersey-core</artifactId>
        </dependency>
        <dependency>
          <groupId>com.sun.jersey.contribs</groupId>
          <artifactId>jersey-spring</artifactId> <!-- provides SpringComponentProviderFactory -->
        </dependency>
        <dependency>
          <groupId>com.sun.jersey</groupId>
          <artifactId>jersey-servlet</artifactId> <!-- provides SpringServlet -->
        </dependency>
        <dependency>
          <!-- Jersey-Grizzly integration. -->
          <!-- Grizzly is a NIO framework we use in the embedded (standalone) server. -->
          <!-- Jersey integrates with Grizzly 2.2.16 by default -->
          <!-- But seems to work properly with 2.3.5 via artifact excludes. -->
          <groupId>com.sun.jersey</groupId>
          <artifactId>jersey-grizzly2</artifactId>
        </dependency>
        
        <!-- Asynchronous Websockets-capable client, for message-driven incremental GTFS-RT -->
        <!-- AsyncHttpClient Websockets needs a newer version of Grizzly than Jersey does. -->
        <dependency>
          <groupId>com.ning</groupId>
          <artifactId>async-http-client</artifactId>
          <version>1.7.19</version>
        </dependency>

        <!-- OTHER DEPENDENCIES -->
        <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>servlet-api</artifactId>
          <version>2.5</version>
          <scope>provided</scope> <!-- this dependency is provided by the servlet container -->
        </dependency>
        <dependency>
          <groupId>javax.annotation</groupId>
          <artifactId>jsr250-api</artifactId>
          <version>1.0</version>
        </dependency>
        <dependency>
          <groupId>cglib</groupId>
          <artifactId>cglib</artifactId>
          <version>2.2.2</version>
        </dependency>
        <dependency>
          <groupId>javax.inject</groupId>
          <artifactId>javax.inject</artifactId>
          <version>1</version>
        </dependency>
        <dependency>
          <!-- Bytecode manipulator -->
          <groupId>javassist</groupId>
          <artifactId>javassist</artifactId>
          <version>3.8.0.GA</version>
        </dependency>
        <dependency>
          <!-- Java ZeroMQ -->
          <groupId>org.jeromq</groupId>
          <artifactId>jeromq</artifactId>
          <version>0.2.0</version>
        </dependency>
        <dependency>
          <!-- OBA GTFS loader -->
          <groupId>org.onebusaway</groupId>
          <artifactId>onebusaway-gtfs</artifactId>
        </dependency>
        <dependency>
          <!-- Processing is used for the debug GUI (though we could probably use just Java2D) -->
          <groupId>org.processing</groupId>
          <artifactId>core</artifactId>
          <version>1.0.7</version>
        </dependency>
        <dependency>
          <!-- Google Protocol Buffers -->
          <groupId>com.google.protobuf</groupId>
          <artifactId>protobuf-java</artifactId>
          <version>2.5.0</version>
          <type>jar</type>
          <scope>compile</scope>
        </dependency>
        <dependency>
          <groupId>commons-lang</groupId>
          <artifactId>commons-lang</artifactId>
          <version>2.6</version>
        </dependency>
        <dependency>
          <groupId>joda-time</groupId>
          <artifactId>joda-time</artifactId>
          <version>2.1</version>
        </dependency>
        <!-- PNGJ -->
        <dependency>
          <groupId>ar.com.hjg</groupId>
          <artifactId>pngj</artifactId>
          <version>2.0.1</version>
        </dependency>

        <!-- JSON -->
        <dependency>
          <!-- Provides a message body writer for application/json instead of just XML -->
          <groupId>com.fasterxml.jackson.jaxrs</groupId>
          <artifactId>jackson-jaxrs-json-provider</artifactId>
        </dependency>
        <dependency>
            <groupId>net.sf.json-lib</groupId>
            <artifactId>json-lib</artifactId>
            <version>2.1</version>
            <classifier>jdk15</classifier>
        </dependency>
        <dependency> 
          <!-- more JSON -->
          <groupId>org.codehaus.jettison</groupId>
          <artifactId>jettison</artifactId>
          <version>1.1</version>
        </dependency>
        <dependency>
          <groupId>org.codehaus.jackson</groupId>
          <artifactId>jackson-core-asl</artifactId>
          <version>1.9.11</version>
        </dependency>
        <dependency>
          <groupId>org.codehaus.jackson</groupId>
          <artifactId>jackson-mapper-asl</artifactId>
          <version>1.9.11</version>
        </dependency>
        <dependency>
          <groupId>com.fasterxml.jackson.module</groupId>
          <artifactId>jackson-module-jaxb-annotations</artifactId>
          <version>2.0.5</version>
        </dependency>
        <dependency>
          <groupId>org.apache.axis</groupId>
          <artifactId>axis</artifactId>
          <version>1.4</version>
        </dependency>
        <dependency>
          <groupId>org.apache.axis</groupId>
          <artifactId>axis-jaxrpc</artifactId>
          <version>1.4</version>
        </dependency>
        <dependency>
          <groupId>commons-discovery</groupId>
          <artifactId>commons-discovery</artifactId>
          <version>0.4</version>
        </dependency>
        <dependency>
          <groupId>org.apache.commons</groupId>
          <artifactId>commons-compress</artifactId>
          <version>1.0</version>
        </dependency>
        <dependency>
          <groupId>net.java.dev.jets3t</groupId>
          <artifactId>jets3t</artifactId>
          <version>0.8.1</version>
        </dependency>
        <dependency>
          <!-- OpenStreetMap protobuf (PBF) definitions -->
          <groupId>crosby.binary</groupId>
          <artifactId>osmpbf</artifactId>
          <version>1.2.1</version>
        </dependency>
        <dependency>
          <!-- Command line parameter parsing -->
          <groupId>com.beust</groupId>
          <artifactId>jcommander</artifactId>
          <version>1.27</version>
        </dependency>
        <dependency>
          <!-- CSV parser -->
          <groupId>net.sourceforge.javacsv</groupId>
          <artifactId>javacsv</artifactId>
        </dependency>
        <dependency>
          <groupId>org.apache.httpcomponents</groupId>
          <artifactId>httpclient</artifactId>
          <version>4.1.2</version>
        </dependency>
        <dependency>
          <groupId>org.apache.commons</groupId>
          <artifactId>commons-math3</artifactId>
          <version>3.0</version>
        </dependency>

    </dependencies>
    
    <build>
      <resources>
        <resource>
          <!-- Filtering will perform substitution on maven-version.properties,
            see git commit id plugin below. -->
          <directory>src/main/resources</directory>
          <filtering>true</filtering>
        </resource>
      </resources>
      <plugins>
        <plugin>
          <!-- Generate REST API documentation from Jersey-annotated classes -->
          <groupId>org.codehaus.enunciate</groupId>
          <artifactId>maven-enunciate-plugin</artifactId>
          <version>1.27</version>
          <executions>
            <execution>
              <phase>site</phase> <!-- default binding for docs goal is process-sources phase -->
              <goals><goal>docs</goal></goals>
            </execution>
          </executions>
          <configuration>
            <!-- change this to wherever you want the docs -->
            <docsDir>${project.build.directory}/site/enunciate</docsDir>
          </configuration>
        </plugin>
        <plugin>
          <!-- Get current Git commit information for use in MavenVersion class.
            Commit information is stored in Maven variables, which are then substituted
            into the properties file. The plugin has a mode to generate a git.properties file,
            but we need the Maven project version as well, so we perform substitution. -->
          <groupId>pl.project13.maven</groupId>
          <artifactId>git-commit-id-plugin</artifactId>
          <version>2.1.7</version>
          <executions>
            <execution>
              <goals>
                <goal>revision</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <verbose>true</verbose>
            <dotGitDirectory>${project.basedir}/../.git</dotGitDirectory>
          </configuration>
        </plugin>
        <plugin>
        <!-- Copy the client WAR into the right place for inclusion in the standalone 
          JAR, so it can be served up. We want to copy the compressed WAR file rather 
          than list it as a dependency and have the shade plugin explode it. Note that 
          the client WAR is listed as a dependency, because the fact that it is referenced 
          by the copy goal unfortunately does not force proper reactor ordering. -->
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-dependency-plugin</artifactId>
          <version>2.8</version>
          <executions>
            <execution>
              <id>copy-client-war</id>
              <!-- Bind to the phase just before package, which prepares the unpacked package. 
                This doesn't work from within the package phase itself. -->
              <phase>prepare-package</phase>
              <goals>
                <goal>copy</goal>
              </goals>
              <configuration>
                <artifactItems>
                  <artifactItem>
                    <groupId>${project.groupId}</groupId>
                    <artifactId>otp-leaflet-client</artifactId>
                    <version>${project.version}</version>
                    <type>war</type>
                    <!-- Per-artifact directory / filename setting (also possible globally). -->
                    <!-- Mix the WAR in with the JAR contents, in classes/ -->
                    <outputDirectory>${project.build.directory}/classes</outputDirectory>
                    <destFileName>client.war</destFileName>
                  </artifactItem>
                </artifactItems>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <!-- There used to be a dependency-plugin:copy-dependencies plugin entry 
          here, but the shade-plugin will explode the dependencies even if they aren't 
          manually copied in. -->
    
        <plugin>
        <!-- We want to create a standalone jar that can be run on the command 
          line. Java does not really allow this - you cannot place jars inside of jars. 
          You must either provide all the dependency jars to the user (usually lib/ 
          under the directory containing the runnable jar) or explode all the jars 
          and repackage them into a single jar. The problem is that while class files 
          are nicely organized into the package namespace and should not collide, the 
          META-INF directories of the jars will collide. Maven's standard assembly 
          plugin does not account for this and will just clobber metadata. This then 
          causes runtime errors, particularly with Spring. Instead, we use the shade 
          plugin which has transformers that will for example append files of the same 
          name rather than overwrite them in the combined JAR. NB: Don't use a version 
          of the shade plugin older than 1.3.2, as it fixed MSHADE-76 (files not merged 
          properly if some input files are missing a terminating newline) -->
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-shade-plugin</artifactId>
          <executions>
            <execution>
              <phase>package</phase>
              <goals>
                <goal>shade</goal>
              </goals>
              <configuration>
                <finalName>otp</finalName>
                <!-- MinimizeJar removes unused classes, (classes not imported explicitly 
                  by name). Jersey auto-scans for REST resources in OTP, so use include filters 
                  to force-include classes that are dynamically loaded by name/auto-scanned. -->
                <!-- It is removing things like org/codehaus/jettison/json/JSONException 
                  even though they are explicitly imported in the source. <minimizeJar>true</minimizeJar> 
                  <filters> <filter> <artifact>com.sun.jersey:*</artifact> <includes> <include>**</include> 
                  </includes> </filter> <filter> <artifact>org.opentripplanner:*</artifact> 
                  <includes> <include>**</include> </includes> </filter> </filters> -->
                 <artifactSet>
                  <excludes>
                    <!-- Do not explode the client WAR. -->
                    <!-- Actually, shade seems to skip the WAR even without this exclusion (verify) -->
                    <exclude>org.opentripplanner:otp-leaflet-client</exclude> --&gt;
                  </excludes>
                </artifactSet>                
                <transformers>
                  <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                    <resource>META-INF/spring.handlers</resource>
                  </transformer>
                  <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                    <resource>META-INF/spring.schemas</resource>
                  </transformer>
                  <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer" />
                  <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                    <manifestEntries>
                      <Main-Class>org.opentripplanner.standalone.OTPMain</Main-Class>
                      <!-- The ImageIO lines allow some image reader plugins to work (TODO elaborate) -->
                      <Specification-Title>Java Advanced Imaging Image I/O
                        Tools</Specification-Title>
                      <Specification-Version>1.1</Specification-Version>
                      <Specification-Vendor>Sun Microsystems, Inc.</Specification-Vendor>
                      <Implementation-Title>com.sun.media.imageio</Implementation-Title>
                      <Implementation-Version>1.1</Implementation-Version>
                      <Implementation-Vendor>Sun Microsystems, Inc.</Implementation-Vendor>
                      <Extension-Name>com.sun.media.imageio</Extension-Name>
                    </manifestEntries>
                  </transformer>
                </transformers>
              </configuration>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </build>
</project>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  
  <artifactId>otp-geocoder</artifactId>
  <packaging>war</packaging>
  <name>OpenTripPlanner Geocoder</name>
  
  <parent>
    <artifactId>opentripplanner</artifactId>
    <groupId>org.opentripplanner</groupId>
    <version>1.0.0-SNAPSHOT</version>
  </parent>

  <url>http://www.opentripplanner.org</url>

  <build>
    <finalName>${project.artifactId}</finalName>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>1.6</source>
          <target>1.6</target>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <dependencies>
    <dependency>
      <groupId>com.vividsolutions</groupId>
      <artifactId>jts</artifactId>
    </dependency>
    <dependency>
      <groupId>com.sun.jersey</groupId>
      <artifactId>jersey-server</artifactId>
    </dependency>
	<dependency>
      <groupId>com.sun.jersey</groupId>
      <artifactId>jersey-servlet</artifactId>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.jaxrs</groupId>
      <artifactId>jackson-jaxrs-json-provider</artifactId>
    </dependency>
    <dependency>
      <groupId>com.sun.jersey</groupId>
      <artifactId>jersey-client</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.sun.jersey.contribs</groupId>
      <artifactId>jersey-spring</artifactId>
    </dependency>
    <dependency>
      <groupId>net.sf.json-lib</groupId>
      <artifactId>json-lib</artifactId>
      <version>2.1</version>
      <classifier>jdk15</classifier>
    </dependency>
    <dependency>
      <groupId>javax.ws.rs</groupId>
      <artifactId>jsr311-api</artifactId>
      <version>1.1.1</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.jettison</groupId>
      <artifactId>jettison</artifactId>
      <version>1.1</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-aop</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-beans</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-web</artifactId>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
    </dependency>
    <dependency>
      <groupId>net.sf.flexjson</groupId>
      <artifactId>flexjson</artifactId>
      <version>2.0</version>
      <type>jar</type>
      <scope>compile</scope>
    </dependency>
  </dependencies>
</project>
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <artifactId>otp-leaflet-client</artifactId>
    <packaging>war</packaging>
    <name>OpenTripPlanner Leaflet Client</name>

    <parent>
      <groupId>org.opentripplanner</groupId>
      <artifactId>opentripplanner</artifactId>
      <version>1.0.0-SNAPSHOT</version>
    </parent>

    <build>
      <finalName>otp-leaflet-client</finalName>
    </build>
</project>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <artifactId>otp-municoder</artifactId>
  <packaging>war</packaging>
  <name>OpenTripPlanner Municipal Boundary Reverse Geocoder</name>  

  <parent>
    <groupId>org.opentripplanner</groupId>
    <artifactId>opentripplanner</artifactId>
    <version>1.0.0-SNAPSHOT</version>
  </parent>
  
  <build>
    <finalName>${project.artifactId}</finalName>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>1.6</source>
          <target>1.6</target>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>
  
  <dependencies>
    <dependency>
      <groupId>com.vividsolutions</groupId>
      <artifactId>jts</artifactId>
    </dependency>
    <dependency>
      <groupId>com.sun.jersey</groupId>
      <artifactId>jersey-server</artifactId>
    </dependency>
    <dependency>
      <groupId>com.sun.jersey</groupId>
      <artifactId>jersey-client</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.sun.jersey.contribs</groupId>
      <artifactId>jersey-spring</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-aop</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-beans</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-web</artifactId>
    </dependency>
    <dependency>
    	<groupId>org.geotools</groupId>
    	<artifactId>gt-shapefile</artifactId>
    </dependency>
  </dependencies>
        
</project>
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <artifactId>otp-openlayers-client</artifactId>
    <packaging>war</packaging>
    <name>OpenTripPlanner OpenLayers Client</name>

    <parent>
        <groupId>org.opentripplanner</groupId>
        <artifactId>opentripplanner</artifactId>
        <version>1.0.0-SNAPSHOT</version>
    </parent>

    <build>
        <finalName>${project.artifactId}</finalName>
        <plugins>
            <plugin>
                <groupId>ro.isdc.wro4j</groupId>
                <artifactId>wro4j-maven-plugin</artifactId>
                <version>1.4.3</version>
                <executions>
                    <execution>
                            <phase>prepare-package</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                  <targetGroups>otp-min</targetGroups>
                  <destinationFolder>${basedir}/src/main/webapp/js/</destinationFolder>
                  <contextFolder>${basedir}/src/main/webapp/</contextFolder>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <!-- 
    The otp-rest-servlet module provides the OTP REST API as a WAR-packaged servlet.
    The REST resources themselves are defined in the otp-core module, which is a dependency.
     -->
    <artifactId>otp-rest-servlet</artifactId>
    <packaging>war</packaging>
    <name>OpenTripPlanner REST API Servlet</name>

    <parent>
        <groupId>org.opentripplanner</groupId>
        <artifactId>opentripplanner</artifactId>
        <version>1.0.0-SNAPSHOT</version>
    </parent>

    <dependencies>
        <!-- OTP Modules -->
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>otp-core</artifactId>
            <version>${project.version}</version>
        </dependency>
        <!-- LOGGING -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>
        <dependency>
          <!-- Spring uses jakarta commons logging, redirect it via slf4j API to Logback -->
          <groupId>org.slf4j</groupId>
          <artifactId>jcl-over-slf4j</artifactId>
        </dependency>        
        <dependency>
      	  <groupId>javax.servlet</groupId>
      	  <artifactId>servlet-api</artifactId>
      	  <version>2.5</version>
      	  <scope>provided</scope> <!-- this dependency is provided by the servlet container -->
        </dependency>
        <dependency>
      	  <groupId>javax.annotation</groupId>
      	  <artifactId>jsr250-api</artifactId>
      	  <version>1.0</version>
        </dependency>
        <dependency>
      	  <groupId>cglib</groupId>
      	  <artifactId>cglib</artifactId>
      	  <version>2.2.2</version>
        </dependency>
        <dependency>
          <groupId>org.projectlombok</groupId>
          <artifactId>lombok</artifactId>
        </dependency>
        <dependency>
          <groupId>javax.inject</groupId>
          <artifactId>javax.inject</artifactId>
          <version>1</version>
        </dependency>
        <!-- JERSEY/SPRING SERVLET INTEGRATION -->
        <dependency>
          <groupId>com.sun.jersey.contribs</groupId>
          <artifactId>jersey-spring</artifactId> <!-- provides SpringComponentProviderFactory -->
        </dependency>
        <dependency>
          <groupId>com.sun.jersey</groupId>
          <artifactId>jersey-servlet</artifactId> <!-- provides SpringServlet -->
        </dependency>
        <!-- TESTING DEPENDENCIES -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
        </dependency>
        <dependency>
          <groupId>com.sun.jersey</groupId>
          <artifactId>jersey-client</artifactId>
          <scope>test</scope> <!-- what is this used for? -->
        </dependency>
    </dependencies>

    <build>
        <finalName>${project.artifactId}</finalName>
        <plugins>
            <!-- Copy in a couple of default resources if they are not already present -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <!-- bind to the generate-resources phase, which comes just before 
                        process-resources. the WAR packaging type automatically defines a
                        resources:resources execution in the process-resources phase, which copies 
                        resources from /src/main/resources to target/classes, and this automatic 
                        execution will happen _before_ any manually declared execution in the same 
                        phase, copying the resources into target before the defaults are provided. -->
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/src/main/resources</outputDirectory>
                            <overwrite>false</overwrite>
                            <resources>
                                <resource>
                                    <directory>${basedir}/src/defaults/resources</directory>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        <!-- we now run enunciate on the REST API module not the servlet wrapper -->
        </plugins>
    </build>

</project>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <artifactId>otp-thrift-api</artifactId>
    <packaging>jar</packaging>
    <name>OpenTripPlanner Thrift API Server</name>

    <parent>
        <groupId>org.opentripplanner</groupId>
        <artifactId>opentripplanner</artifactId>
        <version>1.0.0-SNAPSHOT</version>
    </parent>

    <dependencies>
        <!-- OTHER OTP MODULES -->
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>otp-core</artifactId>
            <version>${project.version}</version>
        </dependency>
		<dependency>
    	    <groupId>org.apache.thrift</groupId>
            <artifactId>libthrift</artifactId>
            <version>0.8.0</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
	    <scope>test</scope>
        </dependency>
        <!-- SPRING -->
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-aop</artifactId>
        </dependency>
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-beans</artifactId>
        </dependency>
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-context</artifactId>
        </dependency>
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-core</artifactId>
        </dependency>
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-web</artifactId>
        </dependency>
        <dependency>
      	  <groupId>org.springframework.security</groupId>
      	  <artifactId>spring-security-core</artifactId>
        </dependency>
        <dependency>
      	  <groupId>org.springframework.security</groupId>
      	  <artifactId>spring-security-config</artifactId>
        </dependency>
        <dependency>
      	  <groupId>org.springframework.security</groupId>
      	  <artifactId>spring-security-web</artifactId>
        </dependency>
        <dependency>
      	  <groupId>javax.annotation</groupId>
      	  <artifactId>jsr250-api</artifactId>
      	  <version>1.0</version>
        </dependency>
        <dependency>
      	  <groupId>cglib</groupId>
      	  <artifactId>cglib</artifactId>
      	  <version>2.2.2</version>
        </dependency>
        <dependency>
          <groupId>org.mockito</groupId>
          <artifactId>mockito-all</artifactId>
          <version>1.9.0</version>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>org.projectlombok</groupId>
          <artifactId>lombok</artifactId>
        </dependency>
        <!-- LOGGING -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>
        <dependency>
          <groupId>org.slf4j</groupId>
          <!-- onebusaway and thrift use older versions of the slf4j API -->
          <!-- by including our newer version here, the others dependencies are omitted -->
          <artifactId>slf4j-api</artifactId>
          <version>${slf4j.version}</version>
        </dependency>
    </dependencies>

    <build>
        <finalName>${project.artifactId}</finalName>
        
        <plugins>
    	    <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.6</source>
                    <target>1.6</target>
                </configuration>
            </plugin>

            <!-- Copy in a couple of default resources if they are not already present -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <!-- bind to the generate-resources phase, which comes just before 
                        process-resources. the WAR packaging type automatically defines a
                        resources:resources execution in the process-resources phase, which copies 
                        resources from /src/main/resources to target/classes, and this automatic 
                        execution will happen _before_ any manually declared execution in the same 
                        phase, copying the resources into target before the defaults are provided. -->
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/src/main/resources</outputDirectory>
                            <overwrite>false</overwrite>
                            <resources>
                                <resource>
                                    <directory>${basedir}/src/defaults/resources</directory>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
				</executions>
			</plugin>

            <plugin>
                <groupId>org.codehaus.enunciate</groupId>
                <artifactId>maven-enunciate-plugin</artifactId>
                <version>1.25</version>
                <executions>
                  <execution>
                    <!-- default binding for docs goal is process-sources phase -->
                    <phase>site</phase>
                    <goals>
                      <goal>docs</goal>
                    </goals>
                  </execution>
                </executions>
                <configuration>
                  <!-- change this to wherever you want the docs -->
                  <docsDir>${project.build.directory}/site/enunciate</docsDir>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <mainClass>org.opentripplanner.api.thrift.OTPServerMain</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>2.4</version>
                <configuration>
                    <descriptor>src/main/assembly/distro.xml</descriptor>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.opentripplanner</groupId>
  <artifactId>opentripplanner</artifactId>
  <version>1.0.0-SNAPSHOT</version>
  <packaging>pom</packaging>

  <name>OpenTripPlanner</name>
  <url>http://opentripplanner.org/</url>

  <scm>
    <connection>scm:git:http://github.com/openplans/OpenTripPlanner.git</connection>
    <developerConnection>scm:git:ssh://git@github.com/openplans/OpenTripPlanner.git</developerConnection>
    <url>http://github.com/openplans/OpenTripPlanner</url>
  </scm>

  <modules>
    <module>otp-core</module>
    <module>otp-rest-servlet</module>
    <module>otp-thrift-api</module>    
    <module>otp-leaflet-client</module>
    <module>otp-openlayers-client</module>
    <module>otp-analyst-client</module>
    <module>otp-admin-client</module>
    <module>otp-geocoder</module>
    <module>otp-municoder</module>
  </modules>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>2.3.2</version>
        <configuration>
          <!-- Target Java versions -->
          <source>1.6</source>
          <target>1.6</target>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-release-plugin</artifactId>
        <configuration>
          <autoVersionSubmodules>true</autoVersionSubmodules>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <argLine>-Xmx2G</argLine>
          <!-- Jenkins needs XML test reports to determine whether the build is stable. -->
          <disableXmlReport>false</disableXmlReport> 
        </configuration>
      </plugin>
    </plugins>
    
    <!-- Necessary for uploading/deploying artifacts to Maven repos via WebDAV. -->
    <extensions>
      <extension>
        <groupId>org.apache.maven.wagon</groupId>
        <artifactId>wagon-webdav</artifactId>
        <version>1.0-beta-2</version>
      </extension>
    </extensions>
    
    <!-- Set default versions of plugins used by submodules -->
    <pluginManagement> 
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-resources-plugin</artifactId>
          <version>2.5</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-shade-plugin</artifactId>
          <version>2.1</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jar-plugin</artifactId>
          <version>2.4</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-release-plugin</artifactId>
          <version>2.2.2</version>
          <configuration>
            <!-- by default, release:prepare runs goals 'clean' and 'verify'. Javadoc generation 
            in release:perform requires the new release versions of our artifacts to already be 
            installed in the local repository. -->
            <preparationGoals>clean install</preparationGoals>
            <!-- The site generation step can fail. Run it in release:prepare to make sure it
            works before tagging the release. Enunciate model validation is currently failing,
            apparently due to a problem in enunciate.
            <preparationGoals>clean install site</preparationGoals>
            -->
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.12</version>
        </plugin>
        <!-- m2eclipse lifecycle mapping configuration. This controls which Maven build goals should
        be performed during incremental builds within the Eclipse IDE. There are sensible defaults
        for most plugins, but some others require manual configuration with <action><ignore /> or 
        <action><execute /> filters. This section only affects incremental builds within Eclipse,
        not command-line Maven builds. -->
        <plugin>
          <groupId>org.eclipse.m2e</groupId>
          <artifactId>lifecycle-mapping</artifactId>
          <version>1.0.0</version>
          <configuration>
            <lifecycleMappingMetadata>
              <pluginExecutions>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <versionRange>[1.0,)</versionRange>
                    <goals>
                      <goal>copy-dependencies</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore />
                  </action>
                </pluginExecution>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>pl.project13.maven</groupId>
                    <artifactId>git-commit-id-plugin</artifactId>
                    <versionRange>[1.0,)</versionRange>
                    <goals>
                      <goal>revision</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <execute />
                  </action>
                </pluginExecution>
              </pluginExecutions>
            </lifecycleMappingMetadata>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>

  <distributionManagement>
    <repository>
      <id>${distribution_id}</id>
      <name>${distribution_name}</name>
      <url>${distribution_url}</url>
    </repository>
    <snapshotRepository>
      <id>${snapshot_distribution_id}</id>
      <name>${snapshot_distribution_name}</name>
      <url>${snapshot_distribution_url}</url>
      <uniqueVersion>false</uniqueVersion>
    </snapshotRepository>
    <site>
      <id>opentripplanner-docs</id>
      <name>OpenTripPlanner Docs</name>
      <url>scp://www.opentripplanner.org:7777/var/www/opentripplanner.org/mvn-site</url>
    </site>
  </distributionManagement>

  <reporting>
    <!-- 
    Reporting plugin versions cannot be managed with entries in <build><plugins><pluginmanagement> 
    but would need a separate <reporting><plugins><pluginmanagement> section. 
    -->
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-project-info-reports-plugin</artifactId>
        <version>2.7</version>
        <reportSets>
          <reportSet>
            <reports>
              <!-- empty: disable project-info reports -->
            </reports>
          </reportSet>
        </reportSets>
      </plugin>      
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>2.9.1</version>
        <configuration>
          <links>
            <link>http://developer.onebusaway.org/modules/onebusaway-gtfs-modules/1.3.3/apidocs/</link>
          </links>
        </configuration>
        <reportSets>
          <reportSet>
            <reports>
              <!-- enable only aggregate-level javadoc generation -->
              <report>aggregate</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>
    </plugins>
  </reporting>

  <repositories>
    <!-- Hack to force maven to check central first. Maven central is inherited from the superpom,
      but ends up at the end of the list. Though most of the time the artifact is in central, 
      Maven tries to download from every other repository and fails before checking central.  
      Do not change the id from central2 to central, otherwise the entry will be ignored. -->
    <repository>
      <id>central2</id>
      <name>check central first to avoid a lot of not found warnings</name>
      <url>http://repo1.maven.org/maven2</url>
    </repository>    
    <repository>
      <id>download.java.net</id>
      <name>Java.net Repository for Maven</name>
      <url>http://download.java.net/maven/2/</url>
    </repository>
    <repository>
      <id>releases.onebusaway.org</id>
      <url>http://nexus.onebusaway.org/content/repositories/releases/</url>
      <releases><enabled>true</enabled></releases>
      <snapshots><enabled>false</enabled></snapshots>
    </repository>
    <repository>
      <id>osgeo</id>
      <name>Open Source Geospatial Foundation Repository</name>
      <url>http://download.osgeo.org/webdav/geotools/</url>
    </repository>
    <repository>
      <id>axis</id>
      <name>axis</name>
      <url>http://people.apache.org/repo/m1-ibiblio-rsync-repository/org.apache.axis2/</url>
    </repository>
    <repository>
      <id>opengeo</id>
      <name>OpenGeo Maven Repository</name>
      <url>http://repo.opengeo.org/</url>
      <!-- Avoid downloading OTP snapshots from repo -->
      <releases><enabled>true</enabled></releases>
      <snapshots><enabled>false</enabled></snapshots>
    </repository>
  </repositories>

  <!-- define no dependencies in the top-level POM to minimize artifact size -->
  <dependencies>
  </dependencies>

  <!-- version numbers that will be inherited by subprojects actually using these dependencies -->
  <dependencyManagement>
    <dependencies>
      <!-- Spring -->
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-aop</artifactId>
        <version>${spring.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-beans</artifactId>
        <version>${spring.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-context</artifactId>
        <version>${spring.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-core</artifactId>
        <version>${spring.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-web</artifactId>
        <version>${spring.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework.security</groupId>
        <artifactId>spring-security-core</artifactId>
        <version>${spring.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework.security</groupId>
        <artifactId>spring-security-config</artifactId>
        <version>${spring.version}</version>
      </dependency>
      <dependency>
        <groupId>org.springframework.security</groupId>
        <artifactId>spring-security-web</artifactId>
        <version>${spring.version}</version>
      </dependency>
      <!-- Geotools -->
      <dependency>
        <groupId>org.geotools</groupId>
        <artifactId>gt-coverage</artifactId>
        <version>${geotools.version}</version>
      </dependency>
      <dependency>
        <groupId>org.geotools</groupId>
        <artifactId>gt-geojson</artifactId>
        <version>${geotools.version}</version>
      </dependency>
      <dependency>
        <groupId>org.geotools</groupId>
        <artifactId>gt-geotiff</artifactId>
        <version>${geotools.version}</version>
      </dependency>
      <dependency>
        <groupId>org.geotools</groupId>
        <artifactId>gt-referencing</artifactId>
        <version>${geotools.version}</version>
      </dependency>
      <dependency>
        <groupId>org.geotools</groupId>
        <artifactId>gt-shapefile</artifactId>
        <version>${geotools.version}</version>
      </dependency>
        <dependency>
          <groupId>org.geotools</groupId>
          <artifactId>gt-arcgrid</artifactId>
          <version>${geotools.version}</version>
        </dependency>
      <dependency>
        <!-- provides EPSG database -->
        <groupId>org.geotools</groupId>
        <artifactId>gt-epsg-hsql</artifactId>
        <version>${geotools.version}</version>
        <exclusions>
          <exclusion>
            <groupId>org.hsqlsdb</groupId>
            <artifactId>hsqldb</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <!-- why are we excluding then re-including a different version of hsql? -->
        <groupId>org.hsqldb</groupId>
        <artifactId>hsqldb</artifactId>
        <version>2.0.0</version>
      </dependency>
      <!-- 
        JTS is a transitive dependency of Geotools, but some submodules only need JTS
        so require the same version here.
      -->
      <dependency>
        <groupId>com.vividsolutions</groupId>
        <artifactId>jts</artifactId>
        <version>1.13</version>
      </dependency>    
      <!-- Jersey -->
      <dependency>
        <groupId>com.sun.jersey</groupId>
        <artifactId>jersey-server</artifactId>
        <version>${jersey.version}</version>
      </dependency>
      <dependency>
        <groupId>com.sun.jersey</groupId>
        <artifactId>jersey-servlet</artifactId>
        <version>${jersey.version}</version>
      </dependency>
      <dependency>
        <groupId>com.sun.jersey</groupId>
        <artifactId>jersey-client</artifactId>
        <version>${jersey.version}</version>
        <scope>test</scope>
      </dependency>
        <dependency>
        <groupId>com.sun.jersey</groupId>
        <artifactId>jersey-core</artifactId>
        <version>${jersey.version}</version>
      </dependency>
      <dependency>
        <groupId>com.sun.jersey</groupId>
        <artifactId>jersey-grizzly2</artifactId>
        <version>${jersey.version}</version>
      </dependency>
      <dependency>
        <!-- jersey-spring (contrib) versioning does not match Spring itself -->
        <groupId>com.sun.jersey.contribs</groupId>
        <artifactId>jersey-spring</artifactId>
        <version>1.9.1</version>
      </dependency>
      <!-- LOGGING -->
      <dependency>
        <!-- Logback is an implemetation of the SLF4J API (basically a new and improved log4j) -->
        <groupId>ch.qos.logback</groupId>
        <artifactId>logback-classic</artifactId>
        <version>1.0.13</version>
      </dependency>
      <dependency>
        <!-- Jersey uses java.util logging, redirect it via slf4j API to Logback -->
        <groupId>org.slf4j</groupId>
        <artifactId>jul-to-slf4j</artifactId>
        <version>${slf4j.version}</version>
      </dependency>
      <dependency>
        <!-- Spring uses jakarta commons logging. Redirect that via the SLF4J API to Logback -->
        <groupId>org.slf4j</groupId>
        <artifactId>jcl-over-slf4j</artifactId>
        <version>${slf4j.version}</version>
      </dependency>
      <!-- Extensions to the Java standard library -->
      <dependency>
        <!-- Lombok provides annotation-driven field accessor methods -->
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
        <version>1.12.6</version>
      </dependency>
      <dependency>
        <!-- Guava provides improved collections -->  
        <groupId>com.google.guava</groupId>
        <artifactId>guava</artifactId>
        <version>14.0.1</version>
      </dependency>
      <!-- Other -->
      <dependency>
        <groupId>org.onebusaway</groupId>
        <artifactId>onebusaway-gtfs</artifactId>
        <version>1.3.3</version>
      </dependency>
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.8.1</version>
        <scope>test</scope>
      </dependency>      
      <dependency>
        <groupId>net.sourceforge.javacsv</groupId>
        <artifactId>javacsv</artifactId>
        <version>2.0</version>
      </dependency>
      <dependency>
        <groupId>com.fasterxml.jackson.jaxrs</groupId>
        <artifactId>jackson-jaxrs-json-provider</artifactId>
        <version>2.0.4</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <properties>
    <geotools.version>9.2</geotools.version>
    <slf4j.version>1.7.5</slf4j.version>
    <jersey.version>1.17.1</jersey.version>
    <spring.version>3.0.5.RELEASE</spring.version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <distribution_id>opengeo</distribution_id>
    <distribution_name>OpenGeo Maven Repository</distribution_name>
    <distribution_url>dav:http://repo.opengeo.org</distribution_url>
    <snapshot_distribution_id>opengeo</snapshot_distribution_id>
    <snapshot_distribution_name>OpenGeo Maven Repository</snapshot_distribution_name>
    <snapshot_distribution_url>dav:http://repo.opengeo.org</snapshot_distribution_url>
  </properties>
</project>
