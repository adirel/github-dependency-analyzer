repositories {
    mavenCentral()
    mavenLocal()

    mavenRepo name: 'jboss-nexus', url: "http://repository.jboss.org/nexus/content/groups/public/"
    mavenRepo name: "jboss-snapshots", url: "http://snapshots.jboss.org/maven2/"
}

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()

        mavenRepo name: 'jboss-nexus', url: "http://repository.jboss.org/nexus/content/groups/public/"
        mavenRepo name: "jboss-snapshots", url: "http://snapshots.jboss.org/maven2/"
    }
    dependencies {
        classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1'
        classpath 'org.hibernate.build.gradle:version-injection-plugin:1.0.0'
    }
}

apply plugin: 'java'
apply plugin: 'osgi'

apply plugin: 'version-injection'

apply plugin: 'maven-publish'
apply plugin: 'maven-publish-auth'

apply plugin: 'idea'
apply plugin: 'eclipse'

group = 'org.hibernate.common'
version = '4.0.5-SNAPSHOT'

buildDir = "target"

ext.javaLanguageLevel = "1.6"
targetCompatibility = project.javaLanguageLevel
sourceCompatibility = project.javaLanguageLevel

configurations {
    jbossLoggingTool {
        description = 'Configuration for defining dependencies needed to run the JBoss Logging AnnotationProcessor tool'
    }

    animalSniffer {
        description = 'Configuration for defining dependencies needed to run the Animal Sniffer tool'
    }

    javaApiSignature {
        description = 'Configuration for defining the Animal Sniffer signature file to use'
    }
}

dependencies {
    compile( 'org.jboss.logging:jboss-logging:3.1.3.GA' )
    compile 'org.jboss.logging:jboss-logging-annotations:1.2.0.Beta1'

    jbossLoggingTool 'org.jboss.logging:jboss-logging-processor:1.2.0.Beta1'

    testCompile( 'junit:junit:3.8.1' )

    animalSniffer 'org.codehaus.mojo:animal-sniffer-ant-tasks:1.8'
    javaApiSignature 'org.codehaus.mojo.signature:java16:1.0@signature'
}

// create a special 'compile' task that performs all the tasks normally associated with compiling a project
// via task dependencies
task compile
compile.dependsOn compileJava, processResources, compileTestJava, processTestResources


// apply the JBoss Logging tool ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

compileJava.options.define(compilerArgs: ["-proc:none", "-encoding", "UTF-8"])
compileTestJava.options.define(compilerArgs: ["-proc:none", "-encoding", "UTF-8"])

sourceSets.all {
    ext.originalJavaSrcDirs = java.srcDirs
    ext.generatedLoggingSrcDir = file( "${buildDir}/generated-src/logging/${name}" )
    java.srcDir generatedLoggingSrcDir
}

task generateMainLoggingClasses(type: JavaCompile) {
    ext.aptDumpDir = file( "${buildDir}/tmp/apt/logging" )
    classpath = compileJava.classpath + configurations.jbossLoggingTool
    source = sourceSets.main.originalJavaSrcDirs
    destinationDir = aptDumpDir
    options.define(
            compilerArgs: [
                    "-nowarn",
                    "-proc:only",
                    "-encoding", "UTF-8",
                    "-processor", "org.jboss.logging.processor.apt.LoggingToolsProcessor",
                    "-s", "$sourceSets.main.generatedLoggingSrcDir.absolutePath",
//                            "-AloggingVersion=3.0",
                    "-Adebug=true",
                    "-AskipTranslations=true",
                    "-source", rootProject.javaLanguageLevel,
                    "-target", rootProject.javaLanguageLevel,
                    "-AtranslationFilesPath=${project.rootDir}/src/main/resources"

            ]
    );
    outputs.dir sourceSets.main.generatedLoggingSrcDir;
    doFirst {
//                source = sourceSets.main.originalJavaSrcDirs
        sourceSets.main.generatedLoggingSrcDir.mkdirs()
    }
    doLast {
        aptDumpDir.delete()
    }
}

// for the time being eat the annoying output from running the annotation processors
generateMainLoggingClasses.logging.captureStandardError(LogLevel.INFO)

task generateSources( type: Task )
generateSources.dependsOn generateMainLoggingClasses

compileJava.dependsOn generateMainLoggingClasses


// Project version injection ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
versionInjection {
    into( 'org.hibernate.annotations.common.Version', 'getVersionString' )
}


// Animal Sniffer ~~~~~~~~~~~~~~~~~~
//      add animal sniffer Java API checking to the main compile tasks

// copy the resolved Animal Sniffer signature dependency artifact to a known location and name
task copyJavaApiSignature(type: Copy) {
    from configurations.javaApiSignature
    into "$buildDir/javaApiSignature/"
    rename '.*signature', 'javaApi.signature'
}

// prepare the Animal Sniffer signature copy every time (before) we compile
compileJava.dependsOn copyJavaApiSignature

// and then after compilation, run the Animal Sniffer tool
compileJava.doLast {
    ant.taskdef(
            name: 'animalSniffer',
            classname: 'org.codehaus.mojo.animal_sniffer.ant.CheckSignatureTask',
            classpath: configurations.animalSniffer.asPath
    )

    ant.animalSniffer(
            signature: "$buildDir/javaApiSignature/javaApi.signature",
            classpath: sourceSets.main.compileClasspath.asPath) {
        path( path: sourceSets.main.output.classesDir )
    }
}

jar {
    manifest = osgiManifest { manifest ->
        mainAttributes(
                'Main-Class': 'org.hibernate.annotations.common.Version'
        )

        classesDir = sourceSets.main.output.classesDir
        classpath = configurations.runtime

        instruction 'Bundle-Vendor', 'Hibernate.org'

        OsgiManifestPackagingInfo.buildInfo( project ).applyTo( manifest )

        instruction 'Implementation-Url', 'http://hibernate.org'
        instruction 'Implementation-Version', version
        instruction 'Implementation-Vendor', 'Hibernate.org'
        instruction 'Implementation-Vendor-Id', 'org.hibernate'
    }
}

// publishing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

task sourcesJar(type: Jar, dependsOn: compileJava) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourcesJar {
                classifier "sources"
            }

            pom.withXml {
                // append additional metadata
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST

                    name 'Hibernate Commons Annotations'
                    description 'Common reflection code used in support of annotation processing'
                    url 'http://hibernate.org'
                    organization {
                        name 'Hibernate.org'
                        url 'http://hibernate.org'
                    }
                    issueManagement {
                        system 'jira'
                        url 'https://hibernate.atlassian.net/browse/HCANN'
                    }
                    scm {
                        url 'http://github.com/hibernate/hibernate-commons-annotations'
                        connection 'scm:git:http://github.com/hibernate/hibernate-commons-annotations.git'
                        developerConnection 'scm:git:git@github.com:hibernate/hibernate-commons-annotations.git'
                    }
                    licenses {
                        license {
                            name 'GNU Lesser General Public License'
                            url 'http://www.gnu.org/licenses/lgpl-2.1.html'
                            comments 'See discussion at http://hibernate.org/license for more details.'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'hibernate-team'
                            name 'The Hibernate Development Team'
                            organization 'Hibernate.org'
                            organizationUrl 'http://hibernate.org'
                        }
                    }
                }

                // TEMPORARY : currently Gradle Publishing feature is exporting dependencies as 'runtime' scope,
                //      rather than 'compile'; fix that.
                asNode().dependencies[0].dependency.each {
                    it.scope[0].value = 'compile'
                }
            }
        }
    }

    repositories {
        maven {
            if ( version.endsWith( 'SNAPSHOT' ) ) {
                name 'jboss-snapshots-repository'
                url 'https://repository.jboss.org/nexus/content/repositories/snapshots'
            }
            else {
                name 'jboss-releases-repository'
                url 'https://repository.jboss.org/nexus/service/local/staging/deploy/maven2/'
            }
        }
    }

    generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
}


// OSGi manifest helpers ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

class OsgiManifestPackagingInfo {
    private String[] exportPackageInstructions;
    private String[] privatePackageInstructions;

    String[] getExportPackageInstructions() {
        return exportPackageInstructions
    }

    String[] getPrivatePackageInstructions() {
        return privatePackageInstructions
    }

    public static OsgiManifestPackagingInfo buildInfo(Project project) {
        final String exportPackageVersion = project.version.replaceAll( "-SNAPSHOT", "" )
                .replaceAll( ".Final", "" );

        final Set<String> exportPackageInstructionSet = new HashSet<String>()
        final Set<String> privatePackageInstructionSet = new HashSet<String>()

        final SourceDirectorySet sourceDirectorySet = project.sourceSets.main.java;
        sourceDirectorySet.each { javaSrcFile ->
            final String packageName = determinePackageName( sourceDirectorySet, javaSrcFile );
            if ( packageName.endsWith( ".internal" )
                    || packageName.contains( ".internal." ) ) {
                privatePackageInstructionSet.add( packageName );
            }
            else {
                exportPackageInstructionSet.add( packageName + ";version=\"" + exportPackageVersion + "\"" );
            }
        }

        return new OsgiManifestPackagingInfo(
                exportPackageInstructionSet.toArray( new String[ exportPackageInstructionSet.size() ] ),
                privatePackageInstructionSet.toArray( new String[ privatePackageInstructionSet.size() ] )
        );
    }

    private static String determinePackageName(SourceDirectorySet sourceDirectorySet, File javaFile) {
        final javaFileAbsolutePath = javaFile.absolutePath;
        for ( File sourceDirectory : sourceDirectorySet.srcDirs ) {
            final String sourceDirectoryAbsolutePath = sourceDirectory.absolutePath;
            if ( javaFileAbsolutePath.startsWith( sourceDirectoryAbsolutePath ) ) {
                final String javaFileRelativePath = javaFileAbsolutePath.substring(
                        sourceDirectoryAbsolutePath.length() + 1,
                        javaFileAbsolutePath.lastIndexOf( File.separator )
                );
                return javaFileRelativePath.replace( File.separator, "." );
            }
        }
        throw new RuntimeException( "ugh" );
    }

    private OsgiManifestPackagingInfo(String[] exportPackageInstructions, String[] privatePackageInstructions) {
        this.exportPackageInstructions = exportPackageInstructions
        this.privatePackageInstructions = privatePackageInstructions
    }

    def applyTo(def manifest) {
        if ( exportPackageInstructions.length > 0 ) {
            manifest.instruction 'Export-Package', exportPackageInstructions
        }
        if ( privatePackageInstructions.length > 0 ) {
            manifest.instruction 'Private-Package', privatePackageInstructions
        }
    }
}



// Wrapper ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

task wrapper(type: Wrapper) {
    gradleVersion = '1.7'
}

