import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        mavenCentral()
		mavenRepo name: 'Bintray Asciidoctor repo', url: 'http://dl.bintray.com/content/aalmiray/asciidoctor'
		mavenRepo name: 'Bintray JCenter', url: 'http://jcenter.bintray.com'
    }
	
    dependencies {
		classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.6.0'
		classpath 'net.saliman:gradle-cobertura-plugin:1.1.2'
        classpath group: 'org.gradlefx', name: 'gradlefx', version: '0.8.1'
		classpath 'org.asciidoctor:asciidoctor-gradle-plugin:0.5.0'
    }
}

group = 'org.graniteds'
version = granitedsVersion

// https://gist.github.com/JonasGroeger/7620911
def timestamp = new Date().format('yyyyMMddHHmmss')
try {
    // Try to get timestamp of last git commit
    def gitFolder = "$projectDir/.git/"
    def takeFromHash = 12
    def head = new File(gitFolder + 'HEAD').text.split(':') // .git/HEAD
    def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd
    def refHead = new File(gitFolder + (isCommit ? 'HEAD' : head[1].trim())) // .git/refs/heads/master
    timestamp = new Date(refHead.lastModified()).format('yyyyMMddHHmmss')
}
catch (Exception e) {
    // Ignore
}

def pluginVersion
if (granitedsVersion.indexOf('-SNAPSHOT') > 0)
    pluginVersion = granitedsVersion.replace('-SNAPSHOT', '.v' + timestamp)
else
    pluginVersion = granitedsVersion.substring(0, granitedsVersion.lastIndexOf('.')) + '.v' + timestamp

ext.javadocLinks = [
	"http://download.oracle.com/javase/1.5.0/docs/api/",
	"http://docs.oracle.com/javaee/6/api",
	"http://logging.apache.org/log4j/1.2/apidocs/",
	"http://tomcat.apache.org/tomcat-6.0-doc/api/",
	"http://tomcat.apache.org/tomcat-7.0-doc/api/",
	"http://download.eclipse.org/jetty/stable-8/apidocs/",
	"http://download.eclipse.org/jetty/stable-9/apidocs/",
	"http://docs.jboss.org/hibernate/orm/3.5/javadocs/",
	"http://docs.jboss.com/seam/2.2.0.GA/api/",
	"http://docs.spring.io/spring/docs/3.1.x/javadoc-api/"
]

// Main tasks for eclipse
task buildServer {
	dependsOn ':granite-server:buildDependents', ':granite-server:buildNeeded'
}

task buildJavaClient {
	dependsOn ':granite-client-java-advanced:buildDependents', ':granite-client-java-advanced:buildNeeded',
		':granite-client-javafx:buildDependents', ':granite-client-javafx:buildNeeded',
		':granite-client-android:buildDependents', ':granite-client-android:buildNeeded'
}

task buildFlexClient {
	dependsOn ':granite-client-flex:build', 'granite-client-flex-advanced:build', 'granite-client-flex45-advanced:build'
}

task build {
	dependsOn 'buildServer', 'buildJavaClient', 'buildFlexClient'
}


configure(subprojects) {
	
	repositories {
		mavenCentral()
		mavenRepo name: 'JBoss Nexus', url: 'https://repository.jboss.org/nexus/content/groups/public'
        mavenLocal()
	}
}

// Add Java plugin for all non-Flex subprojects
configure(subprojects.findAll { it.name.startsWith('granite') && !it.name.startsWith('granite-client-flex') && it.name != 'granite-server' && it.name != 'granite-generator-share' }) { subproject ->

	apply plugin: 'java'
	apply plugin: 'eclipse'

    compileJava {
        sourceCompatibility=1.6
        targetCompatibility=1.6
    }
    if (subproject.name.startsWith('granite-server')) {
        compileTestJava {
            sourceCompatibility=1.6
            targetCompatibility=1.6
        }
    }
    else {
        compileTestJava {
            sourceCompatibility=1.7
            targetCompatibility=1.7
        }
    }

	[compileJava, compileTestJava]*.options*.compilerArgs = [
		"-Xlint:varargs",
		"-Xlint:cast",
		"-Xlint:classfile",
		"-Xlint:dep-ann",
		"-Xlint:divzero",
		"-Xlint:empty",
		"-Xlint:finally",
		"-Xlint:overrides",
		"-Xlint:path",
		"-Xlint:processing",
		"-Xlint:static",
		"-Xlint:try",
		"-Xlint:serial",
		"-Xlint:-options",
		"-Xlint:-fallthrough",
		"-Xlint:-rawtypes",
		"-Xlint:-deprecation",
		"-Xlint:-unchecked"
	]
	
	configurations {
		create('javadoc')
	}

	task sourcesJar(type: Jar, dependsOn: 'classes') {
		classifier = 'sources'
		from sourceSets.main.allSource
	}
	
	task javadocJar(type: Jar, dependsOn: 'javadoc') {
		classifier = 'javadoc'
		from javadoc.destinationDir
	}

    jar {
        metaInf {
            from 'LICENSE.txt'
        }
    }

	artifacts {
		archives sourcesJar
		archives javadocJar
	}
	
	dependencies {
		javadoc 'log4j:log4j:1.2.17'
		
		testCompile 'junit:junit:4.11'
	}

    test {
        workingDir = subproject.rootDir
        ignoreFailures = true       // Don't break the build on test failures so bamboo can get the test results
    }

	javadoc {
		title 'GraniteDS API Documentation'
		
		classpath.add(configurations.javadoc)
		
		configure(options) {
			version = true
			author = true
			use = true
			linkSource = true
			stylesheetFile = file('../jdstyle.css')
			windowTitle = 'GraniteDS API Documentation'
			docTitle = 'GraniteDS API Documentation - ' + granitedsVersion
			links = rootProject.ext.javadocLinks
		}
	}	
}

// Add GradleFX plugin for all Flex subprojects
configure(subprojects.findAll { it.name.startsWith('granite-client-flex') }) { subproject ->
	
	apply plugin: 'gradlefx'
	apply plugin: 'flashbuilder'
	
	output = 'libs/' + subproject.name + '-' + granitedsVersion
		
	beforeEvaluate {
		if (configurations.flexSDK.resolvedConfiguration.hasError()) {
			println 'Project ' + subproject.name + ': Flex SDK not found, disable build of Flex libraries'
			subproject.configurations.remove(subproject.configurations.flexSDK)
			subproject.configurations.create('flexSDK')
			subproject.flexHome = project(':granite-client-flex').file('flex-sdk')
			subproject.tasks.each { it.enabled = false }
		}
	}
}

// Add license plugin for all subprojects
// Use a modified version of the license plugin to be compatible with GradleFX
configure(subprojects.findAll { it.name != 'granite-server' && it.name != 'granite-generator-share' && it.name != 'reference-docs' }) { subproject ->

	apply plugin: ExtLicensePlugin
	
	license {
		header rootProject.file('HEADER-' + subproject.moduleLicense + '.txt')
		strictCheck true
		ext.year = Calendar.getInstance().get(Calendar.YEAR)
		mapping('as', 'SLASHSTAR_STYLE')
	}
}

import nl.javadude.gradle.plugins.license.License
import nl.javadude.gradle.plugins.license.LicensePlugin


class ExtLicensePlugin extends LicensePlugin {
	
	private static Logger logger = Logging.getLogger(ExtLicensePlugin);
	
	void apply(Project project) {
        this.project = project

        extension = createExtension()
        configureExtensionRule()
		
        project.plugins.withType(JavaBasePlugin) {
            extension.sourceSets.all { SourceSet sourceSet ->
                def sourceSetTaskName = sourceSet.getTaskName(taskBaseName, null)
                logger.info("Adding license tasks for sourceSet ${sourceSetTaskName}");

                License checkTask = project.tasks.add(sourceSetTaskName, License)
                checkTask.check = true
                configureForSourceSet(sourceSet, checkTask)

                // Add license checking into check lifecycle, since its a type of code quality plugin
                project.tasks[JavaBasePlugin.CHECK_TASK_NAME].dependsOn checkTask

                // Add independent license task, which will perform format
                def sourceSetFormatTaskName = sourceSet.getTaskName(taskBaseName + 'Format', null)
                License formatTask = project.tasks.add(sourceSetFormatTaskName, License)
                formatTask.check = false
                configureForSourceSet(sourceSet, formatTask)
            }
        }
		
		project.plugins.withType(org.gradlefx.plugins.GradleFxPlugin) {
			logger.info("Adding license tasks for Flex");
			
			License checkTask = project.tasks.add('licenseFlex', License)
			checkTask.check = true
			checkTask.description = 'Scanning license on Flex files'
			checkTask.source = [ 'src/main/flex', 'src/test/flex' ]

			// Add license checking into check lifecycle, since its a type of code quality plugin
			project.tasks['compileFlex'].dependsOn checkTask
			
			// Add independent license task, which will perform format
			License formatTask = project.tasks.add('licenseFormatFlex', License)
			formatTask.check = false
			formatTask.description = 'Scanning license on Flex files'
			formatTask.source = [ 'src/main/flex', 'src/test/flex' ]
        }		
			
        configureTaskRule()
    }

	protected void configureForSourceSet(SourceSet sourceSet, nl.javadude.gradle.plugins.license.License task) {
		super.configureForSourceSet(sourceSet, task)
		
		// Override default allSource and apply only to all Java source files from SourceSet (excluding resources)
		task.source = sourceSet.allJava
	}	
}

// Common configuration for all subprojects
// signing + maven deployment
configure(subprojects.findAll { it.name != 'reference-docs' && !it.name.endsWith('-eclipse') && !it.name.endsWith('-tests') &&
	!it.name.startsWith('granite-common') && it.name != 'granite-amf' && it.name != 'granite-jmf' }) { subproject ->
	
	apply plugin: 'maven'
	apply plugin: 'signing'

    group = 'org.graniteds'
    version = granitedsVersion

	configurations {
		deployerJars
	}
	
	dependencies {
		deployerJars 'org.apache.maven.wagon:wagon-http:2.2'
	}
	
	signing {
		required { 
			gradle.taskGraph.hasTask(':dist:uploadArchives') 
		}
		sign configurations.archives
	}

    // Adds an install task for Flex projects because maven plugin does not add it for GradleFx projects
    if (subproject.name.startsWith('granite-client-flex')) {
        task install(type: Upload, dependsOn: 'build') {
            configuration = subproject.configurations.archives
            description = 'Installs the \'archives\' artifacts into the local Maven repository.'
            repositories.mavenInstaller()
        }
    }

    if (subproject.tasks.findByName('install') != null) {
        install {
            repositories {
                mavenInstaller {
                    // Generated dependencies are not suitable for maven pom, remove everything for now
                    pom.whenConfigured { pom -> pom.dependencies.clear() }
                }
            }
        }
    }

	uploadArchives {
		repositories {
			mavenDeployer {
				beforeDeployment { 
					MavenDeployment deployment -> signing.signPom(deployment)
				}
				
				repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
					authentication(userName: sonatypeOssUserName, password: sonatypeOssPassword)
				}

				pom.project {
					name subproject.description
					packaging 'swc'
					description subproject.description
					url 'http://www.graniteds.org'
					
					scm {
						url 'scm:git@github.com:graniteds/graniteds.git'
						connection 'scm:git@github.com:graniteds/graniteds.git'
						developerConnection 'scm:git@github.com:graniteds/graniteds.git'
					}
					
					licenses {
							if (subproject.moduleLicense == 'lgpl') {
								license {
									name 'GNU LIBRARY GENERAL PUBLIC LICENSE, Version 2.1, February 1999'
									url 'http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt'
									distribution 'repo'
								}
							}
							if (subproject.moduleLicense == 'gpl') {
								license {
									name 'GNU General Public License, Version 3, 29 June 2007'
									url 'http://www.gnu.org/licenses/gpl-3.0.en.html'
									distribution 'repo'
								}
							}
					}

					developers {
						developer {
							id 'fwolff'
							name 'Franck Wolff'
						}
						developer {
							id 'wdrai'
							name 'William Drai'
						}
					}
				}

                // Generated dependencies are not suitable for maven pom, remove everything for now
                pom.whenConfigured { pom -> pom.dependencies.clear() }
            }
		}
	}
}

// Common project
// Minimal config + common classes for client and server
project('granite-common') {

	description = 'GraniteDS Common library'
	
	dependencies {
		compile 'log4j:log4j:1.2.17',
			'org.slf4j:slf4j-api:1.7.0'
	}	
}

// AMF Serialization implementation
project('granite-amf') {
	
	description = 'GraniteDS AMF Serialization library'
	
	dependencies {
		compile project(':granite-common')
	}
}

// JMF Serialization implementation
project('granite-jmf') {
	
	description = 'GraniteDS JMF Serialization library'
	
	dependencies {
		compile project(':granite-common')
		
		testCompile 'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final'
	}
}

// Core project
// AMF/JMF Serialization + Remoting + Gravity + Tide server-side data management
project('granite-server-core') {
	
	description = 'GraniteDS Core server library'
	
	dependencies {
		compile 'javax.servlet:javax.servlet-api:3.0.1'				// Should use 2.5 but 3.0 required by ServletGraniteContext.BasicRequest

		compile 'javassist:javassist:3.12.1.GA'
        compile 'log4j:log4j:1.2.17'
        compile 'org.slf4j:slf4j-api:1.7.0'

		// Tide dependencies
		compile 'org.jboss.spec.javax.interceptor:jboss-interceptors-api_1.1_spec:1.0.1.Final'
		compile 'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final'
		compile 'javax.jdo:jdo2-api:2.3-eb'
		compile 'javax.jms:jms-api:1.1-rev-1'
		compile 'javax.transaction:transaction-api:1.1-rev-1'
		compile 'javax.enterprise:cdi-api:1.0-SP4'					// Required for @NonBinding annotation on @DataEnabled
    }

	sourceSets {
		main {
			java {
				source project(':granite-common').sourceSets.main.java
				source project(':granite-amf').sourceSets.main.java
				source project(':granite-jmf').sourceSets.main.java
			}
			resources {
				source project(':granite-common').sourceSets.main.resources
				source project(':granite-amf').sourceSets.main.resources
				source project(':granite-jmf').sourceSets.main.resources
			}
		}
		
		test {
			java {
				exclude 'org/granite/test/amf/**'
			}
		}
	}
	
	javadoc {
		source = sourceSets.main.java		// Redefine here so filter is applied
	}
	
	jar {
		metaInf {
			from 'LICENSE.txt'
		}
	}

}

// Servlet 3 Integration for Gravity async I/O and auto configuration
project('granite-server-servlet3') {
	
	description = 'GraniteDS Servlet 3 support server library'
	
	dependencies {
		compile 'javax.servlet:javax.servlet-api:3.0.1'
        compile 'org.jboss.spec.javax.websocket:jboss-websocket-api_1.0_spec:1.0.0.Final'
		
		compile project(':granite-server-core')
	}
}

// Tomcat 6 support (security + gravity)
project('granite-server-tomcat6') {
	
	description = 'GraniteDS Tomcat 6 support server library'
	
	dependencies {
		compile 'org.apache.tomcat:catalina:6.0.32'
		
		compile project(':granite-server-core')
	}
}

// Tomcat 7+ support (security + gravity + websockets)
project('granite-server-tomcat7') {
	
	description = 'GraniteDS Tomcat 7 support server library'
	
	dependencies {
		compile 'org.apache.tomcat:tomcat-catalina:7.0.42'
		compile 'org.apache.tomcat:tomcat-coyote:7.0.42'
		
		compile project(':granite-server-core')

        testCompile 'org.jboss.shrinkwrap:shrinkwrap-impl-base:1.1.3',
                'org.apache.tomcat.embed:tomcat-embed-core:7.0.42',
                'org.apache.tomcat.embed:tomcat-embed-logging-juli:7.0.42',
                'org.apache.tomcat.embed:tomcat-embed-jasper:7.0.42'

        testCompile project(':granite-server-core').sourceSets.test.output
    }
}

// Jetty 6 support (security + gravity)
project('granite-server-jetty6') {
	
	description = 'GraniteDS Jetty 6 support server library'
	
	dependencies {
		compile 'org.mortbay.jetty:jetty:6.1.26'
		compile 'org.mortbay.jetty:jetty-util:6.1.26'
		
		compile project(':granite-server-core')
	}
}

// Jetty 8 support (security + gravity + websockets)
project('granite-server-jetty8') {
	
	description = 'GraniteDS Jetty 8 support server library'
	
	dependencies {
		compile 'org.eclipse.jetty:jetty-server:8.1.14.v20131031'
		compile 'org.eclipse.jetty:jetty-util:8.1.14.v20131031'
		compile 'org.eclipse.jetty:jetty-websocket:8.1.14.v20131031'
		
		compile project(':granite-server-core')

        testCompile 'org.jboss.shrinkwrap:shrinkwrap-impl-base:1.1.3',
                'org.jboss.shrinkwrap.container:shrinkwrap-extension-jetty-70:1.0.0-beta-1',
                'org.eclipse.jetty:jetty-webapp:8.1.14.v20131031',
                'org.eclipse.jetty:jetty-util:8.1.14.v20131031',
                'org.eclipse.jetty:jetty-plus:8.1.14.v20131031',
                'org.eclipse.jetty:jetty-annotations:8.1.14.v20131031'

        testCompile project(':granite-server-core').sourceSets.test.output
	}
}

// Jetty 9 support (websockets)
project('granite-server-jetty9') {

    description = 'GraniteDS Jetty 9 support server library'

    dependencies {
        compile 'org.eclipse.jetty:jetty-server:9.1.2.v20140210'
        compile 'org.eclipse.jetty:jetty-util:9.1.2.v20140210'
        compile 'org.eclipse.jetty.websocket:websocket-server:9.1.2.v20140210'

        compile project(':granite-server-core')

        testCompile 'org.jboss.shrinkwrap:shrinkwrap-impl-base:1.1.3',
                'org.jboss.shrinkwrap.container:shrinkwrap-extension-jetty-70:1.0.0-beta-1',
                'org.eclipse.jetty:jetty-server:9.1.2.v20140210',
                'org.eclipse.jetty:jetty-util:9.1.2.v20140210',
                'org.eclipse.jetty:jetty-plus:9.1.2.v20140210',
                'org.eclipse.jetty:jetty-annotations:9.1.2.v20140210'

        testCompile project(':granite-server-core').sourceSets.test.output
    }
}

// JBossWeb support (gravity)
project('granite-server-jboss') {
	
	description = 'GraniteDS JBoss support server library'
	
	dependencies {
		compile files('lib/jbossweb.jar')

        compile files('lib/jboss-vfs.jar')							// Used conditionally by VFSScanner impl
        compile files('lib/jboss-vfs3.jar')							// Used conditionally by VFS3Scanner impl
        compile files('lib/jbossmq.jar')							// Used by JBossMQSelector impl

        compile project(':granite-server-core')

        testCompile 'org.jboss.shrinkwrap:shrinkwrap-impl-base:1.1.3',
                'org.jboss.as:jboss-as-embedded:7.1.3.Final',
                'org.jboss.as:jboss-as-server:7.1.3.Final'

        testCompile project(':granite-server-core').sourceSets.test.output
	}
}

// WildFly support (gravity)
project('granite-server-wildfly') {

    description = 'GraniteDS WildFly support server library'

    dependencies {

        compile 'io.undertow:undertow-servlet:1.0.0.Final',      // Used by WildFly security service
                'io.undertow:undertow-core:1.0.0.Final'

        compile project(':granite-server-core')

        testCompile 'org.jboss.shrinkwrap:shrinkwrap-impl-base:1.1.3',
                'org.wildfly:wildfly-embedded:8.0.0.Final'

        testCompile project(':granite-server-core').sourceSets.test.output
    }
}

// GlassFish v2 support (security)
project('granite-server-glassfishv2') {
	
	description = 'GraniteDS GlassFish v2 support server library'
	
	dependencies {
		compile files('lib/appserv-rt.jar')
		
		compile project(':granite-server-core')
	}
}

// GlassFish v3 support (security + gravity + websockets)
project('granite-server-glassfishv3') {
	
	description = 'GraniteDS GlassFish v3+ support server library'
	
	dependencies {
		compile 'javax.servlet:javax.servlet-api:3.0.1'			// Must add because catalina comes with 2.5
        compile group: 'org.glassfish.main.web', name: 'web-core', version: '3.1.2.2', transitive: false
        compile group: 'org.glassfish.main.security', name: 'websecurity', version: '3.1.2.2', transitive: false
		compile 'com.sun.grizzly:grizzly-utils:1.9.59'
		compile 'com.sun.grizzly:grizzly-websockets:1.9.59'
		
		compile project(':granite-server-core')

        testCompile 'org.jboss.shrinkwrap:shrinkwrap-impl-base:1.1.3',
                'org.glassfish.main.extras:glassfish-embedded-all:3.1.2.2'

        testCompile project(':granite-server-core').sourceSets.test.output
	}
}

// UDP Integration for Gravity
project('granite-server-udp') {
	
	description = 'GraniteDS UDP support server library'
	
	dependencies {
		compile project(':granite-server-core')
	}
}

// WebLogic support (security + gravity)
project('granite-server-weblogic') {
	
	description = 'GraniteDS WebLogic 10+ support server library'
	
	dependencies {
		compile files('lib/weblogic10-compat.jar')
		
		compile project(':granite-server-core')
	}
}

// Google App Engine support (serialization + gravity)
project('granite-server-appengine') {
	
	description = 'GraniteDS Google AppEngine support server library'
	
	dependencies {
		compile 'javax.servlet:javax.servlet-api:3.0.1'
		compile 'com.google.appengine:appengine-api-1.0-sdk:1.6.4'	// KeyConverter
		
		compile project(':granite-server-core')
	}
}


// ActiveMQ integration
project('granite-server-activemq') {
	
	description = 'GraniteDS ActiveMQ integration server library'
	
	dependencies {
		compile 'org.apache.activemq:activemq-core:5.7.0'
		
		compile project(':granite-server-core')
	}
}

// Hazelcast integration
//project('granite-server-hazelcast') {
//	
//	description = 'GraniteDS Hazelcast integration server library'
//	
//	dependencies {
//		compile 'com.hazelcast:hazelcast:3.2'
//		
//		compile project(':granite-server-core')
//	}
//}


def coreProjects = [
        ':granite-server-core',
        ':granite-server-servlet3',
        ':granite-server-tomcat6',
        ':granite-server-tomcat7',
        ':granite-server-jetty6',
        ':granite-server-jetty8',
        ':granite-server-jetty9',
        ':granite-server-jboss',
        ':granite-server-wildfly',
        ':granite-server-glassfishv2',
        ':granite-server-glassfishv3',
        ':granite-server-weblogic',
        ':granite-server-activemq'
]

def allProjects = coreProjects + [
        ':granite-server-cdi',
        ':granite-server-ejb',
        ':granite-server-spring',
        ':granite-server-spring2',
        ':granite-server-seam',
        ':granite-server-hibernate',
        ':granite-server-hibernate4',
        ':granite-server-datanucleus',
        ':granite-server-eclipselink',
        ':granite-server-openjpa',
        ':granite-server-toplink',
        ':granite-server-beanvalidation',
        ':granite-server-appengine'
]

// All server libs
project('granite-server') {

	description = 'GraniteDS Server all libs'
	
	apply plugin: 'java'
	
	configurations {
		create('sources')
		create('javadoc')
	}
	
	task sourcesJar(type: Jar, dependsOn: 'classes') {
		classifier = 'sources'
		
		coreProjects.each { 
			from project(it).sourceSets.main.allSource 
		}
	}
	
	task javadocJar(type: Jar, dependsOn: 'javadoc') {
		classifier = 'javadoc'

        from javadoc.destinationDir
	}
	
	jar {
        def server = it
		coreProjects.each {
            server.dependsOn it + ':classes'
			from project(it).sourceSets.main.output.classesDir
			from project(it).sourceSets.main.output.resourcesDir
		}
		
		metaInf {
			from 'LICENSE.txt'
		}
	}
	
	artifacts {
		archives sourcesJar
		archives javadocJar
	}
	
	dependencies {
		javadoc 'log4j:log4j:1.2.17'
	}

	javadoc {
		title 'GraniteDS API Documentation'

        allProjects.each {
            source project(it).sourceSets.main.allJava
        }
		
		classpath.add(configurations.javadoc)

        allProjects.each {
            classpath.add(project(it).sourceSets.main.compileClasspath)
        }
		
		configure(options) {
			version = true
			author = true
			use = true
			linkSource = true
			stylesheetFile = file('../jdstyle.css')
			windowTitle = 'GraniteDS API Documentation'
			docTitle = 'GraniteDS API Documentation - ' + granitedsVersion
			links = rootProject.ext.javadocLinks
		}
	}
}

// Lib shared with generator (don't delete, used in flexmojos)
project('granite-generator-share') {

    description = 'GraniteDS generator shared'

    apply plugin: 'java'

    dependencies {
        compile project(':granite-server-core')
    }

    configurations {
        create('sources')
        create('javadoc')
    }

    task sourcesJar(type: Jar, dependsOn: 'classes') {
        classifier = 'sources'

        from project(':granite-server-core').sourceSets.main.allSource
        include 'org/granite/messaging/amf/io/util/Property.java',
                'org/granite/messaging/amf/io/util/externalizer/Externalizer.java',
                'org/granite/messaging/amf/io/util/externalizer/annotation/**',
                'org/granite/messaging/service/annotations/**',
                'org/granite/messaging/annotations/**',
                'org/granite/messaging/service/security/*DestinationSecurizer.java',
                'org/granite/tide/annotations/**',
                'org/granite/tide/data/Lazy.java'
    }

    task javadocJar(type: Jar, dependsOn: 'javadoc') {
        classifier = 'javadoc'

        from project(':granite-server-core').javadoc.destinationDir
        include 'org/granite/messaging/amf/io/util/Property.html',
                'org/granite/messaging/amf/io/util/externalizer/Externalizer.html',
                'org/granite/messaging/amf/io/util/externalizer/annotation/**',
                'org/granite/messaging/service/annotations/**',
                'org/granite/messaging/annotations/**',
                'org/granite/messaging/service/security/*DestinationSecurizer.html',
                'org/granite/tide/annotations/**',
                'org/granite/tide/data/Lazy.html'
    }

    jar {
        from project(':granite-server-core').sourceSets.main.output.classesDir
        include 'org/granite/messaging/amf/io/util/Property.class',
                'org/granite/messaging/amf/io/util/externalizer/Externalizer.class',
                'org/granite/messaging/amf/io/util/externalizer/annotation/**',
                'org/granite/messaging/service/annotations/**',
                'org/granite/messaging/annotations/**',
                'org/granite/messaging/service/security/*DestinationSecurizer.class',
                'org/granite/tide/annotations/**',
                'org/granite/tide/data/Lazy.class'

        metaInf {
            from 'LICENSE.txt'
        }
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    dependencies {
        javadoc 'log4j:log4j:1.2.17'

        testCompile 'junit:junit:4.11'
    }

    javadoc {
        title 'GraniteDS API Documentation'

        classpath.add(configurations.javadoc)

        configure(options) {
            version = true
            author = true
            use = true
            linkSource = true
            stylesheetFile = file('../jdstyle.css')
            windowTitle = 'GraniteDS API Documentation'
            docTitle = 'GraniteDS API Documentation - ' + granitedsVersion
            links = rootProject.ext.javadocLinks
        }
    }
}


// Generator (engine + ant task)
project('granite-generator') {

    description = 'GraniteDS Code generator'

    dependencies {
        compile 'org.codehaus.groovy:groovy:1.6.4'
        compile 'org.apache.ant:ant:1.8.4'
        compile 'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final'
        compile 'javax.jdo:jdo2-api:2.3-eb'

        compile project(':granite-generator-share')
    }

    test {
        it.dependsOn ':granite-client-java:jar', ':granite-client-javafx:jar', ':granite-client-android:jar'
    }
}

// Generator Eclipse plugins
project('granite-eclipse') {

    description = 'GraniteDS Eclipse plugins'

    configurations {
        create('lib')
        create('mvn')
        create('eclipse')

        lib { transitive = false }
    }

    dependencies {
        lib 'antlr:antlr:2.7.7',
                'asm:asm:2.2.3',
                'org.codehaus.groovy:groovy:1.6.4',
                'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final',
                'javax.jdo:jdo2-api:2.3-eb',
                'xpp3:xpp3:1.1.4c',
                'com.thoughtworks.xstream:xstream:1.3.1'

        lib project(':granite-generator')
        lib project(':granite-generator-share')

        mvn 'org.apache.maven:maven-ant-tasks:2.1.3'
    }

    build {
        it.dependsOn ':granite-generator:jar'
        it.dependsOn ':granite-generator-share:jar'
    } << {
        copy {
            into project(':granite-eclipse').file('granite-eclipse-builder-plugin/lib')
            from configurations.lib
            rename {
                it.startsWith('granite-generator') ? it.substring(0, it.length()-5-granitedsVersion.length()) + '.jar' : null
            }
        }

        mkdir project(':granite-eclipse').file('build/tycho')

        copy {
            into project(':granite-eclipse').file('build/tycho')
            from project(':granite-eclipse').file('.')
            include 'granite-eclipse-*/**'
        }
    }

    task buildUpdateSite(dependsOn: 'build') << {
        def mvnHome = mavenHome
        if (!mvnHome)
            mvnHome = System.env['MAVEN_HOME']
        if (!mvnHome) {
            println 'MAVEN_HOME not set, disable build of Eclipse plugin'
        }
        else {
            ant.taskdef(name: 'mvn', classname: 'org.apache.maven.artifact.ant.Mvn', classpath: configurations.mvn.asPath)

            mkdir project(':granite-eclipse').file('build/tycho/granite-eclipse-builder-plugin/bin')

            println 'Building update site for plugin version ' + pluginVersion

            ant.mvn(pom: project(':granite-eclipse').file('build/tycho/granite-eclipse-parent/pom.xml').absolutePath, mavenHome: mvnHome, fork: true) {
                arg(value: 'tycho-versions:set-version')
                arg(value: '-DnewVersion=' + pluginVersion)
            }

            ant.mvn(pom: project(':granite-eclipse').file('build/tycho/granite-eclipse-parent/pom.xml').absolutePath, mavenHome: mvnHome, fork: true) {
                arg(value: 'install')
            }
        }
    }

    task uploadUpdateSite(dependsOn: 'buildUpdateSite') << {
        def mvnHome = mavenHome
        if (!mvnHome)
            mvnHome = System.env['MAVEN_HOME']
        if (!mvnHome) {
            println 'MAVEN_HOME not set, disable build of Eclipse plugin'
        }
        else {
            ant.taskdef(name: 'mvn', classname: 'org.apache.maven.artifact.ant.Mvn', classpath: configurations.mvn.asPath)

            ant.mvn(pom: project(':granite-eclipse').file('build/tycho/granite-eclipse-parent/pom.xml').absolutePath, mavenHome: mvnHome, fork: true) {
                arg(value: 'install')
                arg(value: '-Pupload')
            }
        }
    }
}


// EJB 3 integration
project('granite-server-ejb') {
	
	description = 'GraniteDS EJB integration server library'
	
	dependencies {
		compile 'org.jboss.spec.javax.ejb:jboss-ejb-api_3.1_spec:1.0.2.Final'
		
		compile project(':granite-server-core')
		
		testCompile 'org.apache.openejb:openejb-lite:4.5.0'
		testCompile 'org.glassfish.main.extras:glassfish-embedded-all:3.1.2.2'
		testCompile 'org.apache.geronimo.specs:geronimo-jms_1.1_spec:1.1.1'
		testCompile 'org.apache.geronimo.specs:geronimo-j2ee-management_1.1_spec:1.0.1'
		testCompile 'org.apache.geronimo.specs:geronimo-jta_1.0.1B_spec:1.0.1'
		testCompile 'org.jboss.shrinkwrap:shrinkwrap-impl-base:1.1.3'
		testCompile 'org.jboss.shrinkwrap:shrinkwrap-extension-openejb:1.0.0-alpha-13'
		testCompile 'org.jboss.shrinkwrap:shrinkwrap-extension-glassfish:1.0.0-alpha-13'
		
		testCompile project(':granite-server-core').sourceSets.test.output
	}
	
	task testGlassFish(type: Test) {
		systemProperties = [ 'ejb.container.className' : 'org.granite.test.tide.ejb.GlassFishV3Container' ]
        ignoreFailures = true       // Don't break the build on test failures so bamboo can get the test results

		includes = [ 'org/granite/test/tide/ejb/Test*' ]
		
		// Only GlassFish jars on the classpath
		classpath = project.sourceSets.test.runtimeClasspath.filter { !it.name.startsWith('openejb') }
	}
	
	task testOpenEJB(type: Test) {
		systemProperties = [ 'ejb.container.className' : 'org.granite.test.tide.ejb.OpenEJBContainer' ]
        ignoreFailures = true       // Don't break the build on test failures so bamboo can get the test results

		includes = [ 'org/granite/test/tide/ejb/Test*' ]
		
		// Only OpenEJB jars on the classpath
		classpath = project.sourceSets.test.runtimeClasspath.filter { !it.name.startsWith('glassfish') }
	}
	
	test {
		it.dependsOn 'testGlassFish', 'testOpenEJB'
		
		excludes = [ '**' ]
	}
}

// CDI integration
project('granite-server-cdi') {
	
	description = 'GraniteDS CDI integration server library'
	
	dependencies {
		compile 'javax.enterprise:cdi-api:1.0-SP4'
		compile 'javax.el:el-api:2.2.1-b04'
		compile 'javax.inject:javax.inject:1'
		compile 'org.jboss.weld:weld-api:1.1.Final'
		compile 'org.jboss.weld:weld-spi:1.1.Final'
		compile 'org.jboss.weld:weld-core:1.1.14.Final'
		compile 'org.jboss.weld.servlet:weld-servlet:1.1.14.Final'
		compile 'org.jboss.interceptor:jboss-interceptor-core:2.0.0.Final'
        compile 'org.apache.openwebbeans:openwebbeans-web:1.2.0'
		
		compile project(':granite-server-core')
		
		testCompile 'org.jboss.weld.se:weld-se-core:1.1.14.Final'
		
		testRuntime 'org.hibernate:hibernate-core:3.6.10.Final'
		testRuntime 'org.hibernate:hibernate-entitymanager:3.6.10.Final'
		testRuntime 'org.hsqldb:hsqldb:2.3.0'
	}
	
	// Include core sources for tests for compilation
	// Note: force same output folder for resources and classes otherwise Weld does not find beans.xml
	sourceSets {
		main {
			output.resourcesDir = output.classesDir			
		}
		
		test {
			java {
				source project(':granite-server-core').sourceSets.test.java
			}
			resources {
				source project(':granite-server-core').sourceSets.test.resources
			}
			
			output.resourcesDir = output.classesDir
		}
	}
	
	test {
		includes = [ 'org/granite/test/tide/cdi/Test*' ]
	}
}

// Spring 3+ integration
project('granite-server-spring') {
	
	description = 'GraniteDS Spring 3+ integration server library'
	
	dependencies {
		compile 'javax.inject:javax.inject:1'
		compile 'org.springframework:spring-core:3.1.4.RELEASE'
		compile 'org.springframework:spring-context:3.1.4.RELEASE'
		compile 'org.springframework:spring-beans:3.1.4.RELEASE'
		compile 'org.springframework:spring-tx:3.1.4.RELEASE'
		compile 'org.springframework:spring-orm:3.1.4.RELEASE'
		compile 'org.springframework:spring-web:3.1.4.RELEASE'
		compile 'org.springframework:spring-webmvc:3.1.4.RELEASE'
		compile 'org.springframework.security:spring-security-core:3.1.4.RELEASE'
		compile 'org.springframework.security:spring-security-web:3.1.4.RELEASE'
		compile 'org.springframework.security:spring-security-acl:3.1.4.RELEASE'
		compile 'org.springframework.data:spring-data-jpa:1.4.1.RELEASE'
		
		compile 'org.hibernate:hibernate-core:4.0.1.Final'
		
		compile project(':granite-server-core')
		
		testCompile 'org.springframework:spring-test:3.1.4.RELEASE'
		testCompile project(':granite-server-core').sourceSets.test.output
		
		testRuntime 'cglib:cglib:3.0'
		testRuntime 'org.ow2.asm:asm-util:4.0'
        testRuntime 'org.aspectj:aspectjrt:1.7.3'
        testRuntime 'org.aspectj:aspectjweaver:1.7.3'
		testRuntime 'com.h2database:h2:1.3.173'
		testRuntime project(':granite-server-activemq')
	}

	test {
		includes = [ 'org/granite/test/tide/spring/Test*' ]
	}
}

// Spring 2 integration
project('granite-server-spring2') {
	
	apply plugin: 'java'
	
	description = 'GraniteDS Spring 2 integration server library'
	
	dependencies {
		compile 'org.springframework:spring-orm:3.1.4.RELEASE'								// Use Spring 3 to compile because of generics
		compile 'org.springframework:spring-webmvc:3.1.4.RELEASE'
		compile 'org.springframework.security:spring-security-core:2.0.7.RELEASE'			// 2.0.8 broken in maven central
		compile 'org.springframework.security:spring-security-core-tiger:2.0.7.RELEASE'
		compile 'org.springframework.security:spring-security-acl:2.0.7.RELEASE'
		compile 'org.acegisecurity:acegi-security:1.0.7'
		compile 'org.aspectj:aspectjrt:1.5.4'
		compile 'org.hibernate:hibernate-core:3.6.10.Final'
		
		compile project(':granite-server-core')
	}
	
	sourceSets {
		main {
			java {
				source project(':granite-server-spring').sourceSets.main.java
			}
		}
	}
	
	// For some reaons excludes must be applied on filter after the sourceSets definitions
	sourceSets.main.java.filter.exclude 'org/granite/spring/data/*', 
		'org/granite/spring/security/*',
		'org/granite/tide/spring/data/*',
		'org/granite/tide/spring/security/*',
		'org/granite/tide/spring/Hibernate4*'

	javadoc {
		source = sourceSets.main.java		// Redefine here so filter is applied
	}
}

// Seam 2.1 integration
project('granite-server-seam') {
	
	description = 'GraniteDS Seam 2.1+ integration server library'
	
	dependencies {
		compile files('lib/jboss-seam.jar')
		compile 'javax.faces:jsf-api:1.2_15'
		compile 'javax.ejb:ejb-api:3.0'
		
		compile project(':granite-server-core')
		compile project(':granite-server-hibernate')
		
		testCompile project(':granite-server-core').sourceSets.test.output
		
		testRuntime 'javassist:javassist:3.12.0.GA'
		testRuntime 'javax.el:el-api:1.0'
		testRuntime 'org.hibernate:hibernate-entitymanager:3.3.2.GA'
		testRuntime project(':granite-server-hibernate').files('lib/hibernate-validator.jar')
		testRuntime files('lib/jboss-el.jar')
		testRuntime 'org.hsqldb:hsqldb:2.3.0'
	}
	
	// Ensure tests find seam.properties and other resources
	sourceSets.main.output.resourcesDir = sourceSets.main.output.classesDir
	sourceSets.test.output.resourcesDir = sourceSets.test.output.classesDir
}


// Hibernate 3.x support
project('granite-server-hibernate') {
	
	description = 'GraniteDS Hibernate 3.x support library'
	
	dependencies {
		compile 'org.hibernate:hibernate-core:3.6.10.Final'
		compile files('lib/hibernate-validator.jar')			// Not in maven central
		compile project(':granite-server-core')
		
		testCompile('org.hibernate:hibernate-entitymanager:3.6.10.Final')
		testCompile 'org.springframework:spring-orm:3.1.4.RELEASE'
		testCompile 'org.springframework:spring-webmvc:3.1.4.RELEASE'
		testCompile 'org.springframework:spring-test:3.1.4.RELEASE'
		testCompile 'com.h2database:h2:1.3.173'
		testCompile project(':granite-jmf').sourceSets.test.output		
		testCompile project(':granite-server-core').sourceSets.test.output
		testCompile(project(':granite-server-spring')) { transitive = false }
		
		testRuntime 'cglib:cglib:3.0'
		testRuntime 'org.ow2.asm:asm-util:4.0'
		testRuntime 'org.springframework.security:spring-security-web:3.1.4.RELEASE'
	}

	// Recompile abstract test classes from Spring module with Hibernate 3
	sourceSets {
		test {
			java {
				source project(':granite-server-spring').sourceSets.test.java
			}
			resources {
				source project(':granite-server-spring').sourceSets.test.resources
			}
		}
	}

	test {
		includes = [ 
			'org/granite/test/hibernate/**/Test*', 
			'org/granite/test/tide/hibernate/**/Test*' 
		]
	}
}

// Hibernate 4+ support
project('granite-server-hibernate4') {
	
	description = 'GraniteDS Hibernate 4.x support library'
	
	dependencies {
		
		compile 'org.hibernate:hibernate-core:4.0.1.Final'
		compile project(':granite-server-core')
		
		testCompile 'org.hibernate:hibernate-entitymanager:4.0.1.Final'
		testCompile 'org.springframework:spring-orm:3.1.4.RELEASE'
		testCompile 'org.springframework:spring-webmvc:3.1.4.RELEASE'
		testCompile 'org.springframework:spring-test:3.1.4.RELEASE'
		testCompile 'com.h2database:h2:1.3.173'
		testCompile project(':granite-jmf').sourceSets.test.output		
		testCompile project(':granite-server-core').sourceSets.test.output
		testCompile(project(':granite-server-spring')) { transitive = false }
		
		testRuntime 'cglib:cglib:3.0'
		testRuntime 'org.ow2.asm:asm-util:4.0'
		testRuntime 'org.springframework.security:spring-security-web:3.1.4.RELEASE'
	}
	
	// Recompile abstract test classes from Spring module with Hibernate 3
	sourceSets {
		test {
			java {
				source project(':granite-server-spring').sourceSets.test.java
			}
			resources {
				source project(':granite-server-spring').sourceSets.test.resources
			}
		}
	}
	
	test {
		includes = [ 
			'org/granite/test/hibernate4/**/Test*', 
			'org/granite/test/tide/hibernate4/**/Test*' 
		]
	}
}

// EclipseLink support
project('granite-server-eclipselink') {
	
	description = 'GraniteDS EclipseLink support library'
	
	dependencies {
		compile 'org.eclipse.persistence:eclipselink:2.5.0'
		
		compile project(':granite-server-core')
		
		testCompile project(':granite-server-core').sourceSets.test.output
		
		testRuntime 'com.h2database:h2:1.3.173'
	}
	
	File eclipselink = configurations.compile.find { it.name.startsWith('eclipselink') }
	
	test {
		jvmArgs = [ '-javaagent:' + eclipselink.path ]
		
		includes = [ 'org/granite/test/eclipselink/**/Test*' ]
	}
}

// TopLink Essentials support
project('granite-server-toplink') {
	
	description = 'GraniteDS TopLink Essentials support library'
	
	dependencies {
		compile files('lib/toplink-essentials.jar')
		
		compile project(':granite-server-core')
	}
}

// DataNucleus support
project('granite-server-datanucleus') {
	
	description = 'GraniteDS DataNucleus support library'
	
	dependencies {
		compile 'org.datanucleus:datanucleus-core:3.2.7'
		compile 'org.datanucleus:datanucleus-api-jpa:3.2.5'
		compile 'org.datanucleus:datanucleus-api-jdo:3.2.4'
		
		compile project(':granite-server-core')
		
		testCompile project(':granite-server-core').sourceSets.test.output
		
		testRuntime 'com.h2database:h2:1.3.173'
		testRuntime 'org.datanucleus:datanucleus-rdbms:3.2.6'
	}
	
	// Fore same output folder for test resources and classes otherwise tests don't work
	// sourceSets.test.output.resourcesDir = sourceSets.test.output.classesDir
	
	File datanucleusCore = configurations.compile.find { it.name.startsWith('datanucleus-core') }
	
	// Enhance test classes for JPA
	task testJPA(type: Test) {
		jvmArgs = [ '-javaagent:' + datanucleusCore.path + '=-api=JPA,org.granite.test.externalizers' ]
		
		includes = [ 'org/granite/test/datanucleus/**/TestDataNucleus*' ]
	}
	
	// Enhance test classes for JDO
	task testJDO(type: Test) {
		jvmArgs = [ '-javaagent:' + datanucleusCore.path + '=-api=JDO,org.granite.test.externalizers' ]
		
		includes = [ 'org/granite/test/datanucleus/**/TestJDODataNucleus*' ]
	}
	
	test {
		it.dependsOn 'testJPA', 'testJDO'
		
		excludes = [ '**' ]
	}
}

// OpenJPA support
project('granite-server-openjpa') {
	
	description = 'GraniteDS OpenJPA support library'
	
	dependencies {
		compile 'org.apache.openjpa:openjpa:2.2.2'
		
		compile project(':granite-server-core')
		testCompile project(':granite-server-core').sourceSets.test.output
		
		testRuntime 'org.hsqldb:hsqldb:2.3.0'
	}
	
	File openjpa = configurations.compile.find { it.name.startsWith('openjpa') }
	
	test {
		jvmArgs = [ '-javaagent:' + openjpa ]
		
		includes = [ 'org/granite/test/openjpa/**/Test*' ]
	}
}

// Bean Validation support
project('granite-server-beanvalidation') {
	
	description = 'GraniteDS Bean Validation support library'

	dependencies {
		compile 'javax.validation:validation-api:1.0.0.GA'
		
		compile project(':granite-server-core')
	}
}


// Flex client library
project('granite-client-flex') {
	
	description = "GraniteDS Flex client library"
	
	type = 'swc'
	srcDirs = [ 'src/main/flex' ]
	
	dependencies {
		flexSDK group: 'com.adobe', name: 'flex-sdk', version: '3.6', ext: 'zip'
		
		external group: 'org.graniteds', name: 'flex-websocket-client', version: '1.0', ext: 'swc'
	}

	asdoc {
		outputDir 'build/docs/asdoc'
		
		additionalASDocOptions = [
			"-window-title", "GraniteDS Flex API Documentation",
			"-main-title", "GraniteDS Flex API Documentation - " + granitedsVersion
		]
	}

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from srcDirs
	}
	
	task javadocJar(type: Jar, dependsOn: 'asdoc') {
		classifier = 'javadoc'
		from asdoc.outputDir
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}
	
	build {
		it.dependsOn 'sourcesJar'
		it.dependsOn 'javadocJar'
	}
}


// Flex advanced client library (tide, math, validation)
project('granite-client-flex-advanced') {
	
	description = "GraniteDS Advanced Flex client library"
	
	type = 'swc'
	srcDirs = [ 'src/main/flex' ]
	
	additionalCompilerOptions = [
		'-define=CONFIG::debugging,false',
		'-define=CONFIG::flex40,true',
		'-define=CONFIG::flex45,false'
	]
	
	dependencies {
		flexSDK group: 'com.adobe', name: 'flex-sdk', version: '3.6', ext: 'zip'
		
		external project(':granite-client-flex')
		
		external group: 'org.graniteds', name: 'flex-websocket-client', version: '1.0', ext: 'swc'
	}

	asdoc {
		outputDir 'build/docs/asdoc'

        additionalASDocOptions = [
            "-window-title", "GraniteDS Flex API Documentation",
            "-main-title", "GraniteDS Flex API Documentation - " + granitedsVersion
        ]
	}

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from srcDirs
	}
	
	task javadocJar(type: Jar, dependsOn: 'asdoc') {
		classifier = 'javadoc'
		from asdoc.outputDir
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}
	
	build {
		it.dependsOn 'sourcesJar'
		it.dependsOn 'javadocJar'
	}
}

// Flex 4.5+ advanced client library (tide, math, validation)
project('granite-client-flex45-advanced') {
	
	description = "GraniteDS Advanced Flex 4.5+ client library"
	
	type = 'swc'
	// Use the same source dir than Flex 3.5-4.1
	srcDirs = [ project(':granite-client-flex-advanced').file('src/main/flex').path ]
	
	additionalCompilerOptions = [
		'-define=CONFIG::debugging,false',
		'-define=CONFIG::flex40,false',
		'-define=CONFIG::flex45,true'
	]
	
	dependencies {
		flexSDK group: 'com.adobe', name: 'flex-sdk', version: '4.5', ext: 'zip'
		
		external project(':granite-client-flex')
		
		external group: 'org.graniteds', name: 'flex-websocket-client', version: '1.0', ext: 'swc'
	}

	asdoc {
		outputDir 'build/docs/asdoc'

        additionalASDocOptions = [
            "-window-title", "GraniteDS Flex API Documentation",
            "-main-title", "GraniteDS Flex API Documentation - " + granitedsVersion
        ]
	}

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from srcDirs
	}
		
	task javadocJar(type: Jar, dependsOn: 'asdoc') {
		classifier = 'javadoc'
		from asdoc.outputDir
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}
	
	build {
		it.dependsOn 'sourcesJar'
		it.dependsOn 'javadocJar'
	}
}

// Flex UDP client library
project('granite-client-flex-udp') {
	
	description = "GraniteDS Flex UDP client library"
	
	type = 'swc'
	srcDirs = [ 'src/main/flex' ]
	
	dependencies {
		flexSDK group: 'com.adobe', name: 'flex-sdk', version: '4.5', ext: 'zip'
		
		external project(':granite-client-flex')
        external project(':granite-client-flex-advanced')
	}

    // Use afterEvaluate because the flexHome variable is defined after project configuration
	afterEvaluate {
		dependencies {
			external files(flexHome + '/frameworks/libs/air/aircore.swc')
			external files(flexHome + '/frameworks/libs/air/airglobal.swc')
			external files(flexHome + '/frameworks/libs/air/airframework.swc')
		}
	}

	asdoc {
		outputDir 'build/docs/asdoc'

        additionalASDocOptions = [
            "-window-title", "GraniteDS Flex API Documentation",
            "-main-title", "GraniteDS Flex API Documentation - " + granitedsVersion
        ]
	}

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from srcDirs
	}
	
	task javadocJar(type: Jar, dependsOn: 'asdoc') {
		classifier = 'javadoc'
		from asdoc.outputDir
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}
	
	build {
		it.dependsOn 'sourcesJar'
		it.dependsOn 'javadocJar'
	}
}

// Flex 4.5+ tests: must be compiled as main project because gradlefx does not support additional compiler options
// when running flexunit
project('granite-client-flex45-tests') {
	
	description = "GraniteDS Advanced Flex 4.5+ client library"
	
	type = 'swf'
	srcDirs = [ 'src/test/flex' ]
	mainClass = 'TestRunner'
	
	additionalCompilerOptions = [
		'-debug=true',
		'-keep-as3-metadata=Managed,ChangeEvent,NonCommittingChangeEvent,Transient,'
			+ 'Id,Version,Lazy,Name,In,Inject,Out,Produces,ManagedEvent,Observer,PostConstruct,Destroy,'
			+ 'Valid,Size,Test,Ignore,Suite,RunWith'
	]
	
	dependencies {
		flexSDK group: 'com.adobe', name: 'flex-sdk', version: '4.5', ext: 'zip'
		
		internal project(':granite-client-flex')
		merged project(':granite-client-flex45-advanced')
		
		merged files('lib/flexunit-core-flex-4.1.0.swc')
		merged files('lib/flexunit-cilistener-4.1.0.swc')
		merged files('lib/flexunit-uilistener-4.1.0.swc')
		
		test files('lib/flexUnitTasks-4.1.0.jar')
	}

    beforeEvaluate {
        File cmd = new File(flexUnitCommand)
        if (!cmd.exists()) {
            println 'Flash Player location not defined correctly, skip FlexUnit tests'
            tasks.getByName('test').enabled = false
            tasks.getByName('testFlex').enabled = false
        }
    }

	flexUnit {
		excludes = [ '**' ]			// Disable default GradleFX task
		
		toDir = new File(buildDir, 'test-results')
	}
	
	// Use FlexUnit ant task directly, GradleFX built-in test task tries to compile the tests 
	task testFlex << {
		ant.taskdef(resource: 'flexUnitTasks.tasks', classpath: configurations.test.asPath)
		
		File reportDir = file(flexUnit.toDir)
		
		// you can't write to a directory that doesn't exist
		if (!reportDir.exists()) reportDir.mkdirs()
		
		Set<File> libraries = configurations.internal.files +
				configurations.external.files +
				configurations.merged.files +
				configurations.test.files
		
		ant.flexunit (
			swf:			 buildDir.name + '/' + output + '.swf',
			player:          flexUnit.player,
			command:         flexUnitCommand,
			toDir:           flexUnit.toDir,
            workingDir:      buildDir.name,
			haltonfailure:   flexUnit.haltOnFailure,
			verbose:         flexUnit.verbose,
			localTrusted:    flexUnit.localTrusted,
			port:            flexUnit.port,
			buffer:          flexUnit.buffer,
			timeout:         flexUnit.timeout,
			failureproperty: flexUnit.failureProperty,
			headless:        flexUnitHeadless,
			display:         flexUnit.display) {
			
			libraries.each { File libraryFile ->
				library(dir: libraryFile.parent) {
					include(name: libraryFile.name)
				}
			}
		}
		
		if (ant.properties[flexUnit.failureProperty] == "true") {
			println "Tests failed"
		}

	}
	
	test {
		it.dependsOn 'copytestresources', 'testFlex'
	}
}


List<String> clientResourceExcludes = [
	'org/granite/config/granite-config.xml'
]


// Java client library
project('granite-client-java') {
    description = 'GraniteDS Java client'

    configurations {
        create('testJetty8ClientRuntime')
        create('testJetty9ClientRuntime')
        create('testTyrusClientRuntime')

        create('testTomcat7Runtime')
        // create('testTomcat8Runtime')
        create('testJetty8Runtime')
        create('testJetty9Runtime')
        create('testGlassFishv31RuntimePatch')
        create('testGlassFishv31Runtime')
        create('testGlassFishv4RuntimePatch')
        create('testGlassFishv4Runtime')
        create('testJBossAS7Runtime')
    }

    dependencies {

		// Dependencies from granite-common
		compile 'log4j:log4j:1.2.17'

        compile 'org.apache.httpcomponents:httpasyncclient:4.0.1',
                'net.sf.extcos:extcos:0.3b'

        compile group: 'org.eclipse.jetty', name: 'jetty-continuation', version: '8.1.14.v20131031', transitive: false
        compile group: 'org.eclipse.jetty', name: 'jetty-http', version: '8.1.14.v20131031', transitive: false
        compile group: 'org.eclipse.jetty', name: 'jetty-io', version: '8.1.14.v20131031', transitive: false
        compile group: 'org.eclipse.jetty', name: 'jetty-server', version: '8.1.14.v20131031', transitive: false
        compile group: 'org.eclipse.jetty', name: 'jetty-websocket', version: '8.1.14.v20131031', transitive: false

        compile group: 'org.eclipse.jetty.websocket', name: 'websocket-client', version: '9.1.2.v20140210', transitive: false
        compile group: 'org.eclipse.jetty.websocket', name: 'websocket-common', version: '9.1.2.v20140210', transitive: false
        compile group: 'org.eclipse.jetty.websocket', name: 'websocket-api', version: '9.1.2.v20140210', transitive: false
        compile group: 'org.eclipse.jetty.websocket', name: 'javax-websocket-client-impl', version: '9.1.2.v20140210', transitive: false

        compile 'org.glassfish.tyrus:tyrus-client:1.4'

        compile files('lib/jetty-util-89.jar')     // Use custom merged jar to compile both Jetty 8 and Jetty 9 websocket clients
		
        testRuntime 'org.slf4j:slf4j-api:1.7.5',
                'org.slf4j:slf4j-log4j12:1.7.5'
				
        testTyrusClientRuntime 'org.glassfish.tyrus:tyrus-container-grizzly-client:1.4'

        testJetty8ClientRuntime 'org.eclipse.jetty:jetty-websocket:8.1.14.v20131031',
                'org.eclipse.jetty:jetty-io:8.1.14.v20131031',
                'org.eclipse.jetty:jetty-client:8.1.14.v20131031',
                'org.eclipse.jetty:jetty-util:8.1.14.v20131031'

        testJetty9ClientRuntime 'org.eclipse.jetty.websocket:websocket-client:9.1.2.v20140210',
                'org.eclipse.jetty.websocket:javax-websocket-client-impl:9.1.2.v20140210'

        testCompile project(':granite-server-servlet3')

        testCompile 'org.jboss.spec.javax.ejb:jboss-ejb-api_3.1_spec:1.0.2.Final'

        testCompile project(':granite-server-core')
        testCompile project(':granite-server-core').sourceSets.test.output

        testCompile 'org.jboss.shrinkwrap:shrinkwrap-impl-base:1.1.3'

        testTomcat7Runtime 'org.apache.tomcat.embed:tomcat-embed-core:7.0.52',
                'org.apache.tomcat.embed:tomcat-embed-jasper:7.0.52',
                'org.apache.tomcat.embed:tomcat-embed-websocket:7.0.52',
                'org.apache.tomcat.embed:tomcat-embed-logging-juli:7.0.52'

        testTomcat7Runtime(project(':granite-server-tomcat7')) { transitive = false }
        testTomcat7Runtime project(':granite-server-tomcat7').sourceSets.test.output

        // Problem with embedded tomcat 8: scans all classpath
//        testTomcat8Runtime 'org.apache.tomcat.embed:tomcat-embed-core:8.0.3',
//                'org.apache.tomcat.embed:tomcat-embed-jasper:8.0.3',
//                'org.apache.tomcat.embed:tomcat-embed-el:8.0.3',
//                'org.apache.tomcat.embed:tomcat-embed-logging-juli:8.0.3',
//                'org.apache.tomcat.embed:tomcat-embed-websocket:8.0.3'
//
//        testTomcat8Runtime(project(':granite-server-tomcat7')) { transitive = false }
//        testTomcat8Runtime project(':granite-server-tomcat7').sourceSets.test.output

        testJetty8Runtime 'org.eclipse.jetty:jetty-webapp:8.1.14.v20131031',
                'org.eclipse.jetty:jetty-plus:8.1.14.v20131031',
                'org.eclipse.jetty:jetty-annotations:8.1.14.v20131031',
                'org.eclipse.jetty:jetty-websocket:8.1.14.v20131031',
                'org.jboss.shrinkwrap.container:shrinkwrap-extension-jetty-70:1.0.0-beta-1'

        testJetty8Runtime(project(':granite-server-jetty8')) { transitive = false }
        testJetty8Runtime project(':granite-server-jetty8').sourceSets.test.output

        testJetty9Runtime 'org.eclipse.jetty:jetty-webapp:9.1.2.v20140210',
                'org.eclipse.jetty:jetty-plus:9.1.2.v20140210',
                'org.eclipse.jetty:jetty-annotations:9.1.2.v20140210',
                'org.eclipse.jetty.websocket:websocket-server:9.1.2.v20140210',
                'org.eclipse.jetty.websocket:javax-websocket-server-impl:9.1.2.v20140210',
                'org.jboss.shrinkwrap.container:shrinkwrap-extension-jetty-70:1.0.0-beta-1'

        testJetty9Runtime(project(':granite-server-jetty9')) { transitive = false }
        testJetty9Runtime project(':granite-server-jetty9').sourceSets.test.output

        // Patch for proper session interoperability between websockets and http (see https://java.net/jira/browse/GRIZZLY-1289)
        testGlassFishv31RuntimePatch group: 'com.sun.grizzly', name: 'grizzly-websockets', version: '1.9.51', transitive: false
        testGlassFishv31Runtime 'org.glassfish.main.extras:glassfish-embedded-all:3.1.2.2'

        testGlassFishv31Runtime(project(':granite-server-glassfishv3')) { transitive = false }
        testGlassFishv31Runtime project(':granite-server-glassfishv3').sourceSets.test.output
        testGlassFishv31Runtime(project(':granite-server-ejb')) { transitive = false }
        testGlassFishv31Runtime(project(':granite-server-eclipselink')) { transitive = false }

        testGlassFishv4RuntimePatch 'org.glassfish.tyrus:tyrus-container-glassfish-cdi:1.4',
                'org.glassfish.tyrus:tyrus-container-servlet:1.4',
                'org.glassfish.tyrus:tyrus-core:1.4'

        testGlassFishv4Runtime 'org.glassfish.main.extras:glassfish-embedded-all:4.0'

        testGlassFishv4Runtime(project(':granite-server-glassfishv3')) { transitive = false }
        testGlassFishv4Runtime project(':granite-server-glassfishv3').sourceSets.test.output
        testGlassFishv4Runtime(project(':granite-server-ejb')) { transitive = false }
        testGlassFishv4Runtime(project(':granite-server-eclipselink')) { transitive = false }
    }
	
	sourceSets {
		main {
			java {
				source project(':granite-common').sourceSets.main.java
				source project(':granite-amf').sourceSets.main.java
				source project(':granite-jmf').sourceSets.main.java
			}
			resources {
				source project(':granite-common').sourceSets.main.resources
				source project(':granite-amf').sourceSets.main.resources
				source project(':granite-jmf').sourceSets.main.resources
				
				exclude clientResourceExcludes
			}
		}
		
		compact {
			java {
				source project(':granite-common').sourceSets.main.java
				source project(':granite-jmf').sourceSets.main.java
				srcDir 'src/main/java'
			}
			resources {
				source project(':granite-common').sourceSets.main.resources
				source project(':granite-jmf').sourceSets.main.resources
				srcDir 'src/main/resources'
			}
		}
	}
	
	// For some reasons excludes must be applied on filter after the sourceSets definitions 
	sourceSets.main.resources.filter.exclude clientResourceExcludes
	
	javadoc {
		source = sourceSets.main.java		// Redefine here so filter is applied
	}

    def runtimeExcludes = { f ->
        (!f.name.matches('jetty-.*\\.jar')
        && !f.name.matches('websocket-.*\\.jar')
        && !f.name.matches('javax-websocket-.*\\.jar')
        && !f.name.matches('.*tyrus.*\\.jar')
        && !f.name.matches('.*servlet-api.*\\.jar')
        && !f.name.matches('.*websocket-api.*\\.jar')
        && !f.name.matches('.*ejb-api.*\\.jar')
        && !f.name.matches('.*jpa.*api.*\\.jar')
        && !f.name.matches('.*validation.*api.*\\.jar')
        && !f.name.matches('.*jms-api.*\\.jar')
        && !f.name.matches('.*cdi-api.*\\.jar')
        && !f.name.matches('.*transaction-api.*\\.jar')
        && !f.name.matches('asm-.*-3.*\\.jar')
        && !f.name.matches('extcos.*\\.jar'))
    }

    task testTomcat7(type: Test, dependsOn: [ ':granite-server-core:jar', ':granite-server-servlet3:jar', ':granite-server-tomcat7:jar' ]) {
        systemProperties = [
                'container.className' : 'org.granite.test.container.tomcat7.EmbeddedTomcat7',
                'channel.types' : 'long-polling,websocket'
        ]
        ignoreFailures = true       // Don't break the build on test failures so bamboo can get the test results

        includes = [ 'org/granite/client/test/server/TestMessaging*' ]
        excludes = [ 'org/granite/client/test/server/TestMessagingReconnect*' ]   // How to persist sessions on embedded tomcat 7 ???

        workingDir = rootDir
        reports.junitXml.destination = new File(buildDir, 'test-results/tomcat7')
        reports.html.destination = new File(buildDir, 'reports/tests/tomcat7')

        // Add Tomcat jars to the classpath
        classpath = project.sourceSets.test.runtimeClasspath.filter(runtimeExcludes) + project.configurations.testJetty8ClientRuntime + project.configurations.testTomcat7Runtime
    }

    task testTomcat7JWS(type: Test, dependsOn: [ ':granite-server-core:jar', ':granite-server-servlet3:jar', ':granite-server-tomcat7:jar' ]) {
        systemProperties = [
                'container.className' : 'org.granite.test.container.tomcat7.EmbeddedTomcat7JWS',
                'channel.types' : 'long-polling,websocket-std-jetty9,websocket-std-tyrus'
        ]
        ignoreFailures = true       // Don't break the build on test failures so bamboo can get the test results

        includes = [ 'org/granite/client/test/server/TestMessaging*' ]
        excludes = [ 'org/granite/client/test/server/TestMessagingReconnect*' ]   // How to persist sessions on embedded tomcat 8 ???

        workingDir = rootDir
        reports.junitXml.destination = new File(buildDir, 'test-results/tomcat7JWS')
        reports.html.destination = new File(buildDir, 'reports/tests/tomcat7JWS')

        // Add Tomcat jars to the classpath
        classpath = (project.sourceSets.test.runtimeClasspath.filter(runtimeExcludes)
            + project.configurations.testJetty9ClientRuntime + project.configurations.testTyrusClientRuntime + project.configurations.testTomcat7Runtime)
    }

//    task testTomcat8JWS(type: Test, dependsOn: [ ':granite-server-core:jar', ':granite-server-servlet3:jar', ':granite-server-tomcat7:jar' ]) {
//        systemProperties = [
//                'container.className' : 'org.granite.test.container.tomcat7.EmbeddedTomcat7JWS',
//                'channel.types' : 'long-polling,websocket-jetty9,websocket-std-jetty9,websocket-std-tyrus'
//        ]
//        ignoreFailures = true       // Don't break the build on test failures so bamboo can get the test results
//
//        includes = [ 'org/granite/client/test/server/TestMessaging*' ]
//        excludes = [ 'org/granite/client/test/server/TestMessagingReconnect*' ]   // How to persist sessions on embedded tomcat 8 ???
//
//        workingDir = rootDir
//        reports.junitXml.destination = new File(buildDir, 'test-results/tomcat8JWS')
//        reports.html.destination = new File(buildDir, 'reports/tests/tomcat8JWS')
//
//        // Add Tomcat jars to the classpath
//        classpath = project.sourceSets.test.runtimeClasspath.filter(runtimeExcludes) + project.configurations.testJetty9ClientRuntime + project.configurations.testTomcat8Runtime
//
//        classpath.each { println it.absolutePath }
//    }

    task testJetty8(type: Test, dependsOn: [ ':granite-server-core:jar', ':granite-server-servlet3:jar', ':granite-server-jetty8:jar' ]) {
        systemProperties = [
                'container.className' : 'org.granite.test.container.jetty8.EmbeddedJetty8',
                'channel.types' : 'long-polling,websocket'
        ]
        ignoreFailures = true       // Don't break the build on test failures so bamboo can get the test results

        includes = [ 'org/granite/client/test/server/TestMessaging*' ]

        workingDir = rootDir
        reports.junitXml.destination = new File(buildDir, 'test-results/jetty8')
        reports.html.destination = new File(buildDir, 'reports/tests/jetty8')

        // Add Jetty jars to the classpath but exclude jetty 9
        classpath = project.sourceSets.test.runtimeClasspath.filter(runtimeExcludes) + project.configurations.testJetty8ClientRuntime + project.configurations.testJetty8Runtime
    }

    task testJetty9(type: Test, dependsOn: [ ':granite-server-core:jar', ':granite-server-servlet3:jar', ':granite-server-jetty9:jar' ]) {
        systemProperties = [
            'container.className' : 'org.granite.test.container.jetty9.EmbeddedJetty9',
            'channel.types' : 'long-polling,websocket-jetty9,websocket-std-tyrus'
        ]
        ignoreFailures = true       // Don't break the build on test failures so bamboo can get the test results

        includes = [ 'org/granite/client/test/server/TestMessaging*' ]

        workingDir = rootDir
        reports.junitXml.destination = new File(buildDir, 'test-results/jetty9')
        reports.html.destination = new File(buildDir, 'reports/tests/jetty9')

        // Add Jetty jars to the classpath (excluding jar from client compile classpath)
        classpath = (project.sourceSets.test.runtimeClasspath.filter(runtimeExcludes)
            + project.configurations.testJetty9ClientRuntime + project.configurations.testTyrusClientRuntime + project.configurations.testJetty9Runtime)
    }

    task testJetty9JWS(type: Test, dependsOn: [ ':granite-server-core:jar', ':granite-server-servlet3:jar', ':granite-server-jetty9:jar' ]) {
        systemProperties = [
                'container.className' : 'org.granite.test.container.jetty9.EmbeddedJetty9JWS',
                'channel.types' : 'long-polling,websocket-std-jetty9,websocket-std-tyrus'
        ]
        ignoreFailures = true       // Don't break the build on test failures so bamboo can get the test results

        includes = [ 'org/granite/client/test/server/TestMessaging*' ]

        workingDir = rootDir
        reports.junitXml.destination = new File(buildDir, 'test-results/jetty9JWS')
        reports.html.destination = new File(buildDir, 'reports/tests/jetty9JWS')

        // Add Jetty jars to the classpath (excluding jar from client compile classpath)
        classpath = (project.sourceSets.test.runtimeClasspath.filter(runtimeExcludes)
            + project.configurations.testJetty9ClientRuntime + project.configurations.testTyrusClientRuntime + project.configurations.testJetty9Runtime)
    }

    task testGlassFishv31(type: Test, dependsOn: [ ':granite-server-core:jar', ':granite-server-servlet3:jar', ':granite-server-ejb:jar', ':granite-server-glassfishv3:jar', ':granite-server-eclipselink:jar', ':granite-server-beanvalidation:jar' ]) {
        systemProperties = [
                'container.className' : 'org.granite.test.container.glassfishv31.EmbeddedGlassFishv31',
                'channel.types' : 'websocket-std-jetty9'    // long-polling fails randomly on GF 3.1
        ]
        ignoreFailures = true       // Don't break the build on test failures so bamboo can get the test results

        includes = [ 'org/granite/client/test/server/Test*' ]

        workingDir = rootDir
        reports.junitXml.destination = new File(buildDir, 'test-results/glassfishv31')
        reports.html.destination = new File(buildDir, 'reports/tests/glassfishv31')
		
        // Add GlassFish jars to the classpath (excluding jar from client compile classpath)
        classpath = (project.sourceSets.test.runtimeClasspath.filter(runtimeExcludes) + project.configurations.testJetty9ClientRuntime
                + project.configurations.testGlassFishv31RuntimePatch + project.configurations.testGlassFishv31Runtime)
    }
	
    task testGlassFishv4JWS(type: Test, dependsOn: [ ':granite-server-core:jar', ':granite-server-servlet3:jar', ':granite-server-ejb:jar', ':granite-server-glassfishv3:jar', ':granite-server-eclipselink:jar', ':granite-server-beanvalidation:jar' ]) {
        systemProperties = [
                'container.className' : 'org.granite.test.container.glassfishv31.EmbeddedGlassFishv4JWS',
                'channel.types' : 'long-polling,websocket-std-jetty9'
        ]
        ignoreFailures = true       // Don't break the build on test failures so bamboo can get the test results

        includes = [ 'org/granite/client/test/server/Test*' ]

        workingDir = rootDir
        reports.junitXml.destination = new File(buildDir, 'test-results/glassfishv4JWS')
        reports.html.destination = new File(buildDir, 'reports/tests/glassfishv4JWS')

        // Add GlassFish jars to the classpath (excluding jar from client compile classpath)
        classpath = (project.sourceSets.test.runtimeClasspath.filter(runtimeExcludes) + project.configurations.testJetty9ClientRuntime
                + project.configurations.testGlassFishv4Runtime)
    }

    test {
        it.dependsOn 'testTomcat7', 'testJetty8', 'testJetty9', 'testTomcat7JWS', 'testJetty9JWS', 'testGlassFishv4JWS'

        excludes = [ 'org/granite/client/test/server/Test*' ]
    }
}

// Java Advanced client library
project('granite-client-java-advanced') {
	description = 'GraniteDS Advanced Java client'

    configurations {
        create('testJetty8ClientRuntime')
        create('testJetty9ClientRuntime')
        create('testTyrusClientRuntime')

        create('testTomcat7Runtime')
        create('testJetty8Runtime')
        create('testJetty9Runtime')
        create('testJBossAS7Runtime')
        create('testWildFly8Runtime')
        create('testGlassFishv4Runtime')
    }

	dependencies {
		compile project(':granite-client-java')
        compile project(':granite-server-core')

        compile 'org.springframework:spring-context:3.1.4.RELEASE'
        compile 'javax.validation:validation-api:1.0.0.GA'

        testRuntime 'org.slf4j:slf4j-api:1.7.5',
                'org.slf4j:slf4j-log4j12:1.7.5'

        testCompile(project(':granite-server-servlet3'))

        testCompile 'org.jboss.spec.javax.ejb:jboss-ejb-api_3.1_spec:1.0.2.Final'

        testCompile project(':granite-client-java').sourceSets.main.output
        testCompile project(':granite-client-java').sourceSets.test.output
        testCompile project(':granite-server-core').sourceSets.main.output
        testCompile project(':granite-server-core').sourceSets.test.output

        testCompile 'org.jboss.shrinkwrap:shrinkwrap-impl-base:1.1.3'

        testTyrusClientRuntime 'org.glassfish.tyrus:tyrus-container-grizzly-client:1.4'

        testJetty8ClientRuntime 'org.eclipse.jetty:jetty-websocket:8.1.14.v20131031',
                'org.eclipse.jetty:jetty-io:8.1.14.v20131031',
                'org.eclipse.jetty:jetty-client:8.1.14.v20131031',
                'org.eclipse.jetty:jetty-util:8.1.14.v20131031'

        testJetty9ClientRuntime 'org.eclipse.jetty.websocket:websocket-client:9.1.2.v20140210',
                'org.eclipse.jetty.websocket:javax-websocket-client-impl:9.1.2.v20140210'

        testTomcat7Runtime 'org.apache.tomcat.embed:tomcat-embed-core:7.0.52',
                'org.apache.tomcat.embed:tomcat-embed-jasper:7.0.52',
                'org.apache.tomcat.embed:tomcat-embed-websocket:7.0.52',
                'org.apache.tomcat.embed:tomcat-embed-logging-juli:7.0.52'

        testTomcat7Runtime(project(':granite-server-tomcat7')) { transitive = false }
        testTomcat7Runtime project(':granite-server-tomcat7').sourceSets.test.output

        testJetty8Runtime 'org.eclipse.jetty:jetty-webapp:8.1.14.v20131031',
                'org.eclipse.jetty:jetty-plus:8.1.14.v20131031',
                'org.eclipse.jetty:jetty-annotations:8.1.14.v20131031',
                'org.eclipse.jetty:jetty-websocket:8.1.14.v20131031',
                'org.jboss.shrinkwrap.container:shrinkwrap-extension-jetty-70:1.0.0-beta-1'

        testJetty8Runtime(project(':granite-server-jetty8')) { transitive = false }
        testJetty8Runtime project(':granite-server-jetty8').sourceSets.test.output

        testJetty9Runtime 'org.eclipse.jetty:jetty-webapp:9.1.2.v20140210',
                'org.eclipse.jetty:jetty-plus:9.1.2.v20140210',
                'org.eclipse.jetty:jetty-annotations:9.1.2.v20140210',
                'org.eclipse.jetty.websocket:websocket-server:9.1.2.v20140210',
                'org.eclipse.jetty.websocket:javax-websocket-server-impl:9.1.2.v20140210',
                'org.jboss.shrinkwrap.container:shrinkwrap-extension-jetty-70:1.0.0-beta-1'

        testJetty9Runtime(project(':granite-server-jetty9')) { transitive = false }
        testJetty9Runtime project(':granite-server-jetty9').sourceSets.test.output

        testJBossAS7Runtime 'org.jboss.as:jboss-as-embedded:7.1.3.Final'

        testJBossAS7Runtime(project(':granite-server-tomcat7')) { transitive = false }
        testJBossAS7Runtime project(':granite-server-tomcat7').sourceSets.test.output
        testJBossAS7Runtime(project(':granite-server-jboss')) { transitive = false }
        testJBossAS7Runtime project(':granite-server-jboss').sourceSets.test.output

        testWildFly8Runtime 'org.wildfly:wildfly-embedded:8.0.0.Final',
                'org.jboss.logging:jboss-logging:3.1.4.GA'

        testWildFly8Runtime(project(':granite-server-jboss')) { transitive = false }
        testWildFly8Runtime project(':granite-server-jboss').sourceSets.test.output
        testWildFly8Runtime(project(':granite-server-wildfly')) { transitive = false }
        testWildFly8Runtime project(':granite-server-wildfly').sourceSets.test.output

        testGlassFishv4Runtime 'org.glassfish.main.extras:glassfish-embedded-all:4.0'

        testGlassFishv4Runtime(project(':granite-server-glassfishv3')) { transitive = false }
        testGlassFishv4Runtime project(':granite-server-glassfishv3').sourceSets.test.output
        testGlassFishv4Runtime(project(':granite-server-eclipselink')) { transitive = false }
	}
	
    def runtimeExcludes = { f ->
        (!f.name.matches('jetty-.*\\.jar')
                && !f.name.matches('websocket-.*\\.jar')
                && !f.name.matches('javax-websocket-.*\\.jar')
                && !f.name.matches('.*tyrus.*\\.jar')
                && !f.name.matches('.*servlet-api.*\\.jar')
                && !f.name.matches('.*websocket-api.*\\.jar')
                && !f.name.matches('.*ejb-api.*\\.jar')
                && !f.name.matches('.*jpa.*api.*\\.jar')
                && !f.name.matches('.*validation.*api.*\\.jar')
                && !f.name.matches('.*jms-api.*\\.jar')
                && !f.name.matches('.*cdi-api.*\\.jar')
                && !f.name.matches('.*transaction-api.*\\.jar')
                && !f.name.matches('asm-.*-3.*\\.jar')
                && !f.name.matches('extcos.*\\.jar'))
    }
	
	beforeEvaluate {
		File jbossHome = new File(jbossas7Home)
		if (!jbossHome.exists()) {
			println 'JBoss AS 7 location not defined correctly, skip JBoss tests'
			tasks.getByName('testJBossAS7').enabled = false
		}
		
		File wildflyHome = new File(wildflyHome)
		if (!wildflyHome.exists()) {
			println 'WildFly location not defined correctly, skip WildFly tests'
			tasks.getByName('testWildFly8').enabled = false
		}
	}

    task testTomcat7(type: Test, dependsOn: [ ':granite-server-core:jar', ':granite-server-servlet3:jar', ':granite-server-tomcat7:jar' ]) {
        systemProperties = [ 'container.className' : 'org.granite.test.container.tomcat7.EmbeddedTomcat7' ]
        ignoreFailures = true       // Don't break the build on test failures so bamboo can get the test results

        includes = [ 'org/granite/client/test/tide/server/Test*' ]

        workingDir = rootDir
        reports.junitXml.destination = new File(buildDir, 'test-results/tomcat7')
        reports.html.destination = new File(buildDir, 'reports/tests/tomcat7')

        // Add Tomcat jars to the classpath
        classpath = project.sourceSets.test.runtimeClasspath.filter(runtimeExcludes) + project.configurations.testJetty8ClientRuntime + project.configurations.testTomcat7Runtime
    }

    task testTomcat7JWS(type: Test, dependsOn: [ ':granite-server-core:jar', ':granite-server-servlet3:jar', ':granite-server-tomcat7:jar' ]) {
        systemProperties = [
                'container.className' : 'org.granite.test.container.tomcat7.EmbeddedTomcat7JWS',
                'websocket.transport.className' : 'org.granite.client.messaging.transport.jetty9.JettyWebSocketTransport',
        ]
        ignoreFailures = true       // Don't break the build on test failures so bamboo can get the test results

        includes = [ 'org/granite/client/test/tide/server/Test*' ]

        workingDir = rootDir
        reports.junitXml.destination = new File(buildDir, 'test-results/tomcat7JWS')
        reports.html.destination = new File(buildDir, 'reports/tests/tomcat7JWS')

        // Add Tomcat jars to the classpath
        classpath = project.sourceSets.test.runtimeClasspath.filter(runtimeExcludes) + project.configurations.testJetty9ClientRuntime + project.configurations.testTomcat7Runtime
    }

    task testJetty8(type: Test, dependsOn: [ ':granite-server-core:jar', ':granite-server-servlet3:jar', ':granite-server-jetty8:jar' ]) {
        systemProperties = [ 'container.className' : 'org.granite.test.container.jetty8.EmbeddedJetty8' ]
        ignoreFailures = true       // Don't break the build on test failures so bamboo can get the test results

        includes = [ 'org/granite/client/test/tide/server/Test*' ]

        workingDir = rootDir
        reports.junitXml.destination = new File(buildDir, 'test-results/jetty8')
        reports.html.destination = new File(buildDir, 'reports/tests/jetty8')

        // Add Tomcat jars to the classpath
        classpath = project.sourceSets.test.runtimeClasspath.filter(runtimeExcludes) + project.configurations.testJetty8ClientRuntime + project.configurations.testJetty8Runtime
    }

    task testJetty9(type: Test, dependsOn: [ ':granite-server-core:jar', ':granite-server-servlet3:jar', ':granite-server-jetty9:jar' ]) {
        systemProperties = [ 'container.className' : 'org.granite.test.container.jetty9.EmbeddedJetty9' ]
        ignoreFailures = true       // Don't break the build on test failures so bamboo can get the test results

        includes = [ 'org/granite/client/test/tide/server/Test*' ]

        workingDir = rootDir
        reports.junitXml.destination = new File(buildDir, 'test-results/jetty9')
        reports.html.destination = new File(buildDir, 'reports/tests/jetty9')

        // Add Jetty jars to the classpath
        classpath = project.sourceSets.test.runtimeClasspath.filter(runtimeExcludes) + project.configurations.testJetty9ClientRuntime + project.configurations.testJetty9Runtime
    }

    task testJetty9JWS(type: Test, dependsOn: [ ':granite-server-core:jar', ':granite-server-servlet3:jar', ':granite-server-jetty9:jar' ]) {
        systemProperties = [ 'container.className' : 'org.granite.test.container.jetty9.EmbeddedJetty9JWS' ]
        ignoreFailures = true       // Don't break the build on test failures so bamboo can get the test results

        includes = [ 'org/granite/client/test/tide/server/Test*' ]

        workingDir = rootDir
        reports.junitXml.destination = new File(buildDir, 'test-results/jetty9JWS')
        reports.html.destination = new File(buildDir, 'reports/tests/jetty9JWS')

        // Add Jetty jars to the classpath
        classpath = project.sourceSets.test.runtimeClasspath.filter(runtimeExcludes) + project.configurations.testJetty9ClientRuntime + project.configurations.testJetty9Runtime
    }

    task testJBossAS7(type: Test, dependsOn: [ ':granite-server-core:jar', ':granite-server-servlet3:jar', ':granite-server-tomcat7:jar', ':granite-server-jboss:jar' ]) {
        systemProperties = [
                'container.className' : 'org.granite.test.container.jbossas.EmbeddedJBossAS',
                'channel.types' : 'long-polling',
                'jboss.home' : jbossas7Home
        ]
        ignoreFailures = true       // Don't break the build on test failures so bamboo can get the test results

        includes = [ 'org/granite/client/test/tide/server/Test*' ]

        workingDir = rootDir
        reports.junitXml.destination = new File(buildDir, 'test-results/jbossas7')
        reports.html.destination = new File(buildDir, 'reports/tests/jbossas7')

        // Add JBoss AS jars to the classpath
        def cpjbossas = project.sourceSets.test.runtimeClasspath.filter(runtimeExcludes) + project.configurations.testJBossAS7Runtime
        classpath = cpjbossas.filter { !it.name.startsWith('granite-server') && !it.name.startsWith('granite-client') }
    }

    task testWildFly8(type: Test, dependsOn: [ ':granite-server-core:jar', ':granite-server-servlet3:jar', ':granite-server-jboss:jar', ':granite-server-wildfly:jar' ]) {
        systemProperties = [
                'container.className' : 'org.granite.test.container.wildfly.EmbeddedWildFly',
                'websocket.transport.className' : 'org.granite.client.messaging.transport.jetty9.JettyStdWebSocketTransport',
                'java.util.logging.manager' : 'org.jboss.logmanager.LogManager',
                'jboss.home' : wildflyHome
        ]
        ignoreFailures = true       // Don't break the build on test failures so bamboo can get the test results

        includes = [ 'org/granite/client/test/tide/server/Test*' ]

        workingDir = rootDir
        reports.junitXml.destination = new File(buildDir, 'test-results/wildfly')
        reports.html.destination = new File(buildDir, 'reports/tests/wildfly')

        // Add WildFly jars to the classpath
        def cpwildfly = project.sourceSets.test.runtimeClasspath.filter(runtimeExcludes) + project.configurations.testJetty9ClientRuntime + project.configurations.testWildFly8Runtime
        classpath = cpwildfly.filter { !it.name.startsWith('granite-server') && !it.name.startsWith('granite-client') }
    }

    task testGlassFishv4(type: Test, dependsOn: [ ':granite-server-core:jar', ':granite-server-servlet3:jar', ':granite-server-glassfishv3:jar', ':granite-server-eclipselink:jar', ':granite-server-beanvalidation:jar' ]) {
        systemProperties = [
                'container.className' : 'org.granite.test.container.glassfishv31.EmbeddedGlassFishv4JWS',
                'websocket.transport.className' : 'org.granite.client.messaging.transport.jetty9.JettyWebSocketTransport'
        ]
        ignoreFailures = true       // Don't break the build on test failures so bamboo can get the test results

        includes = [ 'org/granite/client/test/tide/server/Test*' ]

        workingDir = rootDir
        reports.junitXml.destination = new File(buildDir, 'test-results/glassfishv4')
        reports.html.destination = new File(buildDir, 'reports/tests/glassfishv4')

        // Add GlassFish jars to the classpath (excluding jar from client compile classpath)
        classpath = (project.sourceSets.test.runtimeClasspath.filter(runtimeExcludes) + project.configurations.testJetty9ClientRuntime
                + project.configurations.testGlassFishv4Runtime)
    }

    test {
        it.dependsOn 'testTomcat7', 'testTomcat7JWS', 'testJBossAS7', 'testWildFly8', 'testGlassFishv4', 'testJetty8', 'testJetty9', 'testJetty9JWS'

        excludes = [ 'org/granite/client/test/tide/server/Test*' ]
    }
}

// UDP Integration for Gravity (Java client)
project('granite-client-java-udp') {

    description = 'GraniteDS UDP support client library (Java)'

    configurations {
        create('testTomcat7Runtime')
    }

    dependencies {
        compile project(':granite-server-udp')
        compile project(':granite-client-java')
        compile project(':granite-server-servlet3')

        testRuntime 'org.slf4j:slf4j-api:1.7.3',
                'org.slf4j:slf4j-log4j12:1.7.3'

        testCompile project(':granite-server-servlet3')

        testCompile project(':granite-server-core').sourceSets.test.output
        testCompile project(':granite-client-java').sourceSets.test.output

        testCompile 'org.jboss.shrinkwrap:shrinkwrap-impl-base:1.1.3'

        testTomcat7Runtime 'org.apache.tomcat.embed:tomcat-embed-core:7.0.42',
                'org.apache.tomcat.embed:tomcat-embed-jasper:7.0.42',
                'org.apache.tomcat.embed:tomcat-embed-logging-juli:7.0.42'

        testTomcat7Runtime project(':granite-server-tomcat7').sourceSets.test.output
    }

    task testTomcat7(type: Test, dependsOn: [ ':granite-server-core:jar', ':granite-server-servlet3:jar', ':granite-server-tomcat7:jar', ':granite-server-udp:jar' ]) {
        systemProperties = [ 'container.className' : 'org.granite.test.container.tomcat7.EmbeddedTomcat7' ]
        ignoreFailures = true       // Don't break the build on test failures so bamboo can get the test results

        includes = [ 'org/granite/client/test/udp/server/TestUdpMessaging*' ]

        workingDir = rootDir
        reports.junitXml.destination = new File(buildDir, 'test-results/tomcat7')
        reports.html.destination = new File(buildDir, 'reports/tests/tomcat7')

        // Add Tomcat jars to the classpath
        classpath = project.sourceSets.test.runtimeClasspath + project.configurations.testTomcat7Runtime
    }

    test {
        it.dependsOn 'testTomcat7'

        excludes = [ 'org/granite/client/test/udp/server/Test*' ]
    }
}

// JavaFX client library
project('granite-client-javafx') {
	
	apply plugin: 'cobertura'
	
	dependencies {
		
		compile files(System.properties.'java.home' + '/lib/jfxrt.jar')
		
		// Dependencies from granite-common
		compile 'log4j:log4j:1.2.17'
		
		compile group: 'org.eclipse.jetty', name: 'jetty-continuation', version: '8.1.14.v20131031', transitive: false
		compile group: 'org.eclipse.jetty', name: 'jetty-http', version: '8.1.14.v20131031', transitive: false
		compile group: 'org.eclipse.jetty', name: 'jetty-io', version: '8.1.14.v20131031', transitive: false
		compile group: 'org.eclipse.jetty', name: 'jetty-server', version: '8.1.14.v20131031', transitive: false
		compile group: 'org.eclipse.jetty', name: 'jetty-websocket', version: '8.1.14.v20131031', transitive: false

		compile group: 'org.eclipse.jetty.websocket', name: 'websocket-client', version: '9.1.2.v20140210', transitive: false
		compile group: 'org.eclipse.jetty.websocket', name: 'websocket-common', version: '9.1.2.v20140210', transitive: false
		compile group: 'org.eclipse.jetty.websocket', name: 'websocket-api', version: '9.1.2.v20140210', transitive: false
		compile group: 'org.eclipse.jetty.websocket', name: 'javax-websocket-client-impl', version: '9.1.2.v20140210', transitive: false

		compile 'org.glassfish.tyrus:tyrus-client:1.4'

		compile project(':granite-client-java').files('lib/jetty-util-89.jar')     // Use custom merged jar to compile both Jetty 8 and Jetty 9 websocket clients
		
		compile 'org.apache.httpcomponents:httpasyncclient:4.0.1',
				'net.sf.extcos:extcos:0.3b'
		
        testCompile project(':granite-server-core')
        testCompile project(':granite-server-hibernate')
		
		testCompile project(':granite-client-java').sourceSets.test.output
	}
	
	// Include sources of advanced java client
	sourceSets {
		main {
			java {
				source project(':granite-client-java').sourceSets.main.java
			}
			resources {
				source project(':granite-client-java').sourceSets.main.resources
			}
		}
	}
	
	javadoc {
		source = sourceSets.main.java		// Redefine here so filter is applied
	}
}

// JavaFX client library
project('granite-client-javafx-advanced') {
	
	apply plugin: 'cobertura'
	
	dependencies {
		
		compile 'javax.enterprise:cdi-api:1.0-SP4',
			'javax.inject:javax.inject:1',
			'javax.validation:validation-api:1.0.0.GA',
			'org.springframework:spring-beans:3.1.4.RELEASE',
			'org.springframework:spring-context:3.1.4.RELEASE'
		
		compile files(System.properties.'java.home' + '/lib/jfxrt.jar')
		
		compile project(':granite-client-javafx')
		
		testCompile 'org.hibernate:hibernate-core:3.6.10.Final',
			'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final',
			'antlr:antlr:2.7.7'
		
		testCompile project(':granite-server-core')
		testCompile project(':granite-server-hibernate')
		
		testCompile project(':granite-client-java').sourceSets.test.output
		testCompile project(':granite-client-java-advanced').sourceSets.test.output
	}
	
	// Include sources of advanced java client
	sourceSets {
		main {
			java {
				source project(':granite-client-java-advanced').sourceSets.main.java
			}
			resources {
				source project(':granite-client-java-advanced').sourceSets.main.resources
			}
		}
	}
	
	javadoc {
		source = sourceSets.main.java		// Redefine here so filter is applied
	}
}


List androidJavaExcludes = [
	'org/granite/config/api/**',
	'org/granite/config/flex/**',
	'org/granite/collections/**',
	'org/granite/context/**',
	'org/granite/logging/impl/**',
	'org/granite/messaging/persistence/*Externalizable*',
	'org/granite/scan/**',
	'org/granite/client/configuration/Client*',
	'org/granite/client/configuration/Simple*',
	'org/granite/client/messaging/alias/**',
	'org/granite/client/messaging/amf/**',
	'org/granite/client/messaging/channel/AMF*',
	'org/granite/client/messaging/channel/amf/AMF*',
	'org/granite/client/messaging/codec/AMF*',
	'org/granite/client/messaging/codec/ClientJavaClassDescriptor*',
	'org/granite/client/messaging/transport/jetty9/**',
	'org/granite/client/messaging/transport/jetty/**',
	'org/granite/client/messaging/transport/apache/**',
	'org/granite/client/validation/Default*',
	'org/granite/client/validation/Notifying*',
	'org/granite/client/validation/Server*',
	'org/granite/client/validation/Validation*',
	'org/granite/client/tide/spring/**',
	'org/granite/client/tide/cdi/**',
	'org/granite/client/tide/validation/**'
]

List androidResourceExcludes = [
	'org/granite/config/*.xsd',
	'org/granite/config/*.dtd',
	'org/granite/config/*.xml',
	'org/granite/client/configuration/granite-config.xml'
]


// Android client library
project('granite-client-android') {

	dependencies {

		compile 'com.google.android:android:4.0.1.2'
		
        compile 'org.jboss.spec.javax.websocket:jboss-websocket-api_1.0_spec:1.0.0.Final',
			'org.glassfish.tyrus:tyrus-client:1.4'
		
		compile files('lib/android-async-http-1.4.3.jar')
		
		testCompile project(':granite-client-java').sourceSets.test.output
		
		testCompile 'org.hibernate:hibernate-core:3.6.10.Final',
			'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final',
			'antlr:antlr:2.7.7'
			
		testCompile project(':granite-server-core'), project(':granite-server-hibernate')
	}
	
	// Include sources of java client
	sourceSets {
		main {
			java {
				source project(':granite-common').sourceSets.main.java
				source project(':granite-jmf').sourceSets.main.java
				source project(':granite-client-java').sourceSets.compact.java
				
				exclude androidJavaExcludes
			}
			resources {
				source project(':granite-common').sourceSets.main.resources
				source project(':granite-jmf').sourceSets.main.resources
				source project(':granite-client-java').sourceSets.compact.resources
				
				exclude androidResourceExcludes
			}
		}
	}

	sourceSets.main.java.filter.exclude androidJavaExcludes
	
	sourceSets.main.resources.filter.exclude androidResourceExcludes
	
	javadoc {
		source = sourceSets.main.java		// Redefine here so filter is applied
	}
}

// Android advanced client library
project('granite-client-android-advanced') {

	dependencies {

		compile 'javax.inject:javax.inject:1',
			'com.google.android:android:4.0.1.2'
		
		compile 'org.jboss.spec.javax.websocket:jboss-websocket-api_1.0_spec:1.0.0.Final',
			'org.glassfish.tyrus:tyrus-client:1.4'
		
		compile files('lib/android-async-http-1.4.3.jar')
		
		compile project(':granite-client-android')
		
		testCompile project(':granite-client-java').sourceSets.test.output
		
		testCompile 'org.hibernate:hibernate-core:3.6.10.Final',
			'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final',
			'antlr:antlr:2.7.7'
			
		testCompile project(':granite-server-core'), project(':granite-server-hibernate')
	}
	
	// Include sources of java client
	sourceSets {
		main {
			java {
				source project(':granite-client-java-advanced').sourceSets.main.java
				
				exclude androidJavaExcludes
			}
			resources {
				source project(':granite-client-java-advanced').sourceSets.main.resources
				
				exclude androidResourceExcludes
			}
		}
	}
	
	sourceSets.main.java.filter.exclude androidJavaExcludes
	
	sourceSets.main.resources.filter.exclude androidResourceExcludes
	
	javadoc {
		source = sourceSets.main.java		// Redefine here so filter is applied
	}
}


// Reference docs
project('reference-docs') {
	
	apply plugin: 'asciidoctor'
	
	task docFlex(type: org.asciidoctor.gradle.AsciidoctorTask) {
        sourceDocumentName = new File(sourceDir, 'graniteds-refguide-flex.adoc')
		outputDir = new File("$buildDir/docs/flex")
		options = [
			doctype: 'book',
			attributes: [
                version: granitedsVersion,
				flex: '',
				copycss: '',
                toc2: '',
				'source-highlighter': 'highlightjs',
				idprefix: '',
				idseparator: '-'
			]
		]

        copy {
            from new File(sourceDir, 'images')
            into new File(outputDir, 'images')
        }
	}
	
	task docJava(type: org.asciidoctor.gradle.AsciidoctorTask) {
        sourceDocumentName = new File(sourceDir, 'graniteds-refguide-java.adoc')
		outputDir = new File("$buildDir/docs/java")
		options = [
			doctype: 'book',
			attributes: [
                version: granitedsVersion,
				java: '',
				copycss: '',
                toc2: '',
				'source-highlighter': 'highlightjs',
				idprefix: '',
				idseparator: '-'
			]
		]

        copy {
            from new File(sourceDir, 'images')
            into new File(outputDir, 'images')
        }
	}
	
	task asciidoctor(overwrite: true, dependsOn: [ 'docFlex', 'docJava' ]) {		
	}
}


// Distribution
project('dist') {

    defaultTasks 'dist'
	
	configurations {
		create('server')
		create('javaClient')
		create('flexClient')
		create('generator')
        create('javaClientDeps')
        create('androidClientDeps')
        create('javaClientWebsocket')

        server { transitive = false }
        serverCore { transitive = false }
        javaClient { transitive = false }
        flexClient { transitive = false }
        generator { transitive = false }
	}

    def serverProjects = rootProject.subprojects.findAll { it.name.startsWith('granite-server') && !coreProjects.contains(it.path) }
    def serverCoreProjects = rootProject.subprojects.findAll { it.name.startsWith('granite-server') && coreProjects.contains(it.path) }
    def javaClientProjects = rootProject.subprojects.findAll { it.name.startsWith('granite-client-java') || it.name.startsWith('granite-client-android') }
    def flexClientProjects = rootProject.subprojects.findAll { it.name.startsWith('granite-client-flex') && !it.name.endsWith('-tests') }
    def generatorProjects = rootProject.subprojects.findAll { it.name.startsWith('granite-generator') }

	dependencies {
		server serverProjects
        serverCore serverCoreProjects
		javaClient javaClientProjects
		flexClient flexClientProjects
		generator generatorProjects

        javaClientDeps 'org.apache.httpcomponents:httpasyncclient:4.0'

        androidClientDeps project(':granite-client-android').files('lib/android-async-http-1.4.3.jar')

        javaClientWebsocket 'org.eclipse.jetty:jetty-client:8.1.14.v20131031',
            'org.eclipse.jetty:jetty-websocket:8.1.14.v20131031'
	}
	
	task dist(type: Zip, dependsOn: ':granite-eclipse:buildUpdateSite') {
		archiveName = 'graniteds-dist-' + granitedsVersion + '.zip'

        into ('graniteds-' + granitedsVersion)

        from file('README.adoc')

        from file('LICENSES.adoc')

        into ('licenses') {
            from fileTree('licenses')
            exclude 'LICENSES.adoc'
        }
		
		into ('libraries/server') {
			from configurations.server
		}
        into ('libraries/server/submodules') {
            from configurations.serverCore
        }
		into ('libraries/java-client') {
			from configurations.javaClient
		}
        into ('libraries/java-client/dependencies') {
            from configurations.javaClientDeps
        }
        into ('libraries/java-client/dependencies-android') {
            from configurations.androidClientDeps
        }
        into ('libraries/java-client/optional-websocket') {
            from configurations.javaClientWebsocket
        }
		into ('libraries/flex-client') {
			from configurations.flexClient
		}
		
		into ('tools') {
            from project(':granite-eclipse').configurations.lib
            rename { it.startsWith('granite-generator') ? it.substring(0, it.length()-5-granitedsVersion.length()) + '.jar' : null }
        }

        into ('tools/eclipse') {
            from project(':granite-eclipse').file('build/tycho/granite-eclipse-builder-plugin/target/org.granite.builder-' + pluginVersion + '.jar')
        }

        (serverProjects + serverCoreProjects + javaClientProjects).each { subproject ->
            subproject.configurations.archives.allArtifacts.findAll { it.classifier == 'sources' }.each { artifact ->
                into ('sources/java') { from artifact.file }
            }
        }
        flexClientProjects.each { subproject ->
            subproject.configurations.archives.allArtifacts.findAll { it.classifier == 'sources' }.each { artifact ->
                into ('sources/as3') { from artifact.file }
            }
        }
	}

    task docs(type: Zip, dependsOn: [ ':reference-docs:asciidoctor' ]) {

        archiveName = 'graniteds-docs-' + granitedsVersion + '.zip'

        into ('graniteds-' + granitedsVersion)

        from file('LICENSES.adoc')

        into ('licenses') {
            from fileTree('licenses')
            exclude 'LICENSES.adoc'
        }

        into ('docs/reference') {
            from project(':reference-docs').fileTree('build/docs')
        }

        into ('docs/server/api') {
            from project(':granite-server').fileTree('build/docs/javadoc')
        }
        into ('docs/server-udp/api') {
            from project(':granite-server-udp').fileTree('build/docs/javadoc')
        }
        into ('docs/client-flex/api') {
            from project(':granite-client-flex45-advanced').fileTree('build/docs/asdoc')
        }
        into ('docs/client-flex-udp/api') {
            from project(':granite-client-flex-udp').fileTree('build/docs/asdoc')
        }
        into ('docs/client-java/api') {
            from project(':granite-client-java').fileTree('build/docs/javadoc')
        }
        into ('docs/client-java-udp/api') {
            from project(':granite-client-java-udp').fileTree('build/docs/javadoc')
        }
        into ('docs/client-javafx/api') {
            from project(':granite-client-javafx').fileTree('build/docs/javadoc')
        }
        into ('docs/client-android/api') {
            from project(':granite-client-android').fileTree('build/docs/javadoc')
        }
    }
}
