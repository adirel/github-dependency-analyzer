<project 
	name="enough-polish-build" 
	default="bin-dist">

	<!-- global properties -->
	<property file="${user.name}.properties" />
	<property name="device" value="Generic/AnyPhone" />
	<property file="version.properties" />
	
	<property name="all.jars" value="wmapi.jar,nokia-ui.jar,mmapi.jar,siemens-color-game-api.jar,siemens-extension-api.jar,btapi.jar,m3g.jar,fileconnection.jar,pim.jar,pdaapi.jar,m2g.jar,cldc-1.0.jar,cldc-1.0-java5.0.jar,cldc-1.1.jar,cldc-1.1-java5.0.jar,midp-1.0.jar,midp-2.0.jar,blackberry-4.0.jar,blackberry-4.1.0.jar,blackberry-4.2.0.jar,blackberry-4.3.0.jar,doja-1.5.jar,doja-2.5.jar,location.jar,javase-1.0.jar" />
	<property name="all.library.jars" value="enough-*,asm-all.jar,jdom.jar,proguard.jar,proguard2.jar,yguard-lib.jar,retroguard.jar,retroweaver-all.jar,svgSalamander.jar,ant.jar,javax.servlet.jar" />
	<!--
	<property name="all.library.jars" value="enough-j2mepolish-*,enough-j2mepolish-extensions.jar,enough-j2mepolish-runtime.jar,asm-all.jar,enough-bytecode.jar,enough-license.jar,enough-floater.jar,jdom.jar,proguard.jar,proguard2.jar,yguard-lib.jar,retroguard.jar,retroweaver-all.jar,svgSalamander.jar,ant.jar" />
	-->
	<property name="update.jars" value="asm-all.jar,enough-bytecode.jar,enough-floater.jar,pim.jar,fileconnection.jar,pdaapi.jar,m2g.jar,cldc-1.0.jar,cldc-1.1.jar,midp-1.0.jar,midp-2.0.jar,blackberry-4.0.jar,svgSalamander.jar,doja-1.5.jar,doja-2.5.jar,location.jar" />
	
	<property name="izpack.dir" value="/home/enough/dev/IzPack" />
	<property name="polish.home" location="."/>
	<property name="wtk.home" value="/home/enough/dev/WTK2.2" />
	<property name="preverify.cmd" value="${wtk.home}/bin/preverify" />
	<property name="dir.import" location="import" />
	
	
	<!-- task definitions -->
	
	<taskdef name="j2mepolish" classname="de.enough.polish.ant.PolishTask" classpath=".:bin/classes:build/bootstrapclasses:lib/jdom.jar" onerror="report" />
	<taskdef name="indexWriter" classname="de.enough.polish.ant.WriteFileListTask" classpath="bin/classes:build/bootstrapclasses" onerror="report" />
	<taskdef name="propertyWriter" classname="de.enough.polish.ant.PropertyWriterTask" classpath="bin/classes:build/bootstrapclasses" onerror="report" />
	<taskdef name="deviceExport" classname="de.enough.polish.ant.HtmlExporterTask" classpath="bin/classes:build/bootstrapclasses:lib/jdom.jar" onerror="report" />
	<taskdef name="convertToWindowsLineEndings" classname="de.enough.polish.ant.ConvertToWindowsLineEndingsTask" classpath=".:bin/classes:build/bootstrapclasses" onerror="report" />
	<taskdef name="appendDateToProperties" classname="de.enough.polish.ant.AppendDateToPropertiesTask" classpath="bin/classes:build/bootstrapclasses" onerror="report" />
	<taskdef name="setAttribute" classname="de.enough.polish.ant.SetAttributeTask" classpath=".:bin/classes:build/bootstrapclasses" onerror="report" />
	<taskdef resource="genjar.properties" classpath="import/GenJar.jar" />
	<taskdef resource="proguard/ant/task.properties" classpath="lib/proguard.jar" />	
	<taskdef resource="checkstyletask.properties" classpath="lib/checkstyle-all-5.0.jar" />
	
	<!-- build targets, each target can be called via "ant [name]", e.g. "ant clean" -->
	
	<target name="init">
		<!-- Create the time stamp -->
	    <tstamp/>
	 </target>
	
	<!-- Creates the Source Code documentation -->
	<target name="javadoc"
		description="generates the javadoc documentation for the build framework"
		>
	    <javadoc 
	    	destdir="doc" 
	    	access="protected" 
	    	use="true" 
	    	notree="false" 
	    	nonavbar="false" 
	    	noindex="false" 
	    	splitindex="true" 
	    	author="true" 
	    	version="true" 
	    	nodeprecatedlist="false" 
	    	nodeprecated="false" 
	    	packagenames="de.enough.*" 
	    	sourcepath="source/src" 
	    	classpath="bin/classes:../enough-polish-j2me/bin/classes:build/clientdummy:lib/ant.jar:lib/junit.jar:lib/jdom.jar:lib/AppleJavaExtensions.jar:lib/bluecove-2.0.3.jar:lib/javax.servlet.jar:lib/osgi-3.0.1.jar"
	    	doctitle="The J2ME Polish Build Framework, Version ${Version}"
		>
				<link href="http://java.sun.com/javase/6/docs/api/" />
		</javadoc>	
	</target>
	
	<target name="build-init">
		<delete dir="dist" />
		<mkdir dir="dist" />
	</target>

	<target name="build-client-dummy"
		depends="build-init"
		description="compiles some needed classes from client side for build side">
		<mkdir dir="build/clientdummy" />
		<javac
			srcdir="../enough-polish-j2me/source/src"
			destdir="build/clientdummy"
			encoding="latin1"
			source="1.5"
			target="1.5">
			<classpath>
				<pathelement path="import/cldc-1.1.jar" />
				<pathelement path="import/midp-2.1.jar" />
				<pathelement path="import/advancedmultimedia-1.0.jar" />
				<pathelement path="import/android-2.1.jar" />
				<pathelement path="import/btapi.jar" />
				<pathelement path="import/blackberry-6.0.0.jar" />
				<pathelement path="import/doja-2.5.jar" />
				<pathelement path="import/m3g.jar" />
				<pathelement path="import/mmapi.jar" />
				<pathelement path="import/nokia-ui-1.6.jar" />
				<pathelement path="import/samsung-api.jar" />
				<pathelement path="import/sensor.jar" />
				<pathelement path="import/siemens-extension-api.jar" />
				<pathelement path="import/windows.jar" />
				<pathelement path="import/wmapi-2.0.jar" />
				<pathelement path="import/android-1.5.jar" />
			</classpath>
		</javac>
	</target>
	
	<target name="build-build" 
		depends="build-client-dummy"
		description="builds the enough-j2mepolish-build.jar">
		<!-- create a list of all J2ME source files: -->
		<indexWriter 
			target="build/j2mepolish.index.txt"
			>
			<fileset dir="../enough-polish-j2me/source/src" includes="**/*.java" />
		</indexWriter>
		<!-- update the version -->
		<appendDateToProperties source="version.properties" target="tmp/version.properties" />
		<!-- compile the core code -->
		<mkdir dir="build/coreclasses" />
		<javac
			srcdir="source/src"
			destdir="build/coreclasses"
			debug="true"
			source="1.5"
			target="1.5">
			<classpath>
				<pathelement path="lib/jdom.jar" />
				<pathelement path="lib/javax.servlet.jar" />
				<pathelement path="lib/bluecove-2.0.3.jar" />
				<pathelement path="lib/swing-layout-1.0.jar" />
				<pathelement path="lib/osgi-3.0.1.jar" />
				<pathelement path="lib/AppleJavaExtensions.jar" />
				<pathelement path="build/clientdummy" />
			</classpath>
		</javac>
		<!-- compile the legacy code 
		<javac 
			srcdir="source/legacy"
			destdir="bin/classes" >
			<classpath path="bin/classes:import/proguard2.jar" />
		</javac>
		-->
			
		<!-- create the binary build distribution -->
		<jar destfile="dist/enough-j2mepolish-build.jar"
		     basedir="build/coreclasses"
			 excludes="**/*.html"
			 index="true"
			 manifest="META-INF/MANIFEST.MF"
		     >
			<fileset dir="build/clientdummy" includes="ThemeContainer.class" />
			<fileset dir="." includes="capabilities.xml,configurations.xml,platforms.xml,extensions.xml,custom-extensions.xml,custom-devices.xml,apis.xml,vendors.xml,groups.xml,devices.xml,bugs.xml,css-attributes.xml,build/j2mepolish.index.txt,translations.txt,default.css" />
			<fileset dir="../enough-polish-j2me/source" includes="src/**/*.java" />
			<fileset dir="setup" includes="icons/*.*" />
			<fileset dir="tmp" includes="version.properties" />
			<zipgroupfileset dir="lib" includes="jdom.jar"/>
		</jar>	
	</target>

	<target name="build-build-source" 
		depends="build-init"
		description="builds the enough-j2mepolish-build-src.jar">
		<!-- This source jar is suitable for inclusion as a source location in eclipse -->
		<jar destfile="dist/enough-j2mepolish-build-src.jar">
			<fileset dir="source/src">
			    <include name="**/*.java"/>
			</fileset>
			<fileset dir="source/extensions">
			    <include name="**/*.java"/>
			</fileset>
		</jar>
	</target>

	<target name="build-extension" 
		depends="build-init"
		description="builds the enough-j2mepolish-extension.jar">
		<!-- compile extensions -->
		<mkdir dir="build/extensionsclasses" />
		<javac
			srcdir="source/extensions"
			destdir="build/extensionsclasses"
			debug="true"
			source="1.5"
			target="1.5">
			<classpath>
				<pathelement path="lib/asm-all.jar" />
				<pathelement path="lib/enough-bytecode.jar" />
				<pathelement path="lib/enough-license.jar" />
				<pathelement path="lib/jdom.jar" />
				<pathelement path="lib/jode-1.1.2-pre1.jar" />
				<pathelement path="lib/kenv.zip" />
				<pathelement path="lib/retroweaver-all.jar" />
				<pathelement path="lib/svgSalamander.jar" />
				<pathelement path="lib/yguard-lib.jar" />
				<pathelement path="lib/ZKM.jar" />
				<pathelement path="build/coreclasses" />
			</classpath>
		</javac>
		<!-- create the binary extensions distribution -->
		<jar destfile="dist/enough-j2mepolish-extensions.jar"
		     basedir="build/extensionsclasses"
			 excludes="**/*.html"
			 index="true"
		     >
		</jar>
	</target>

	<target name="build-client" 
		depends="build-init"
		description="builds the enough-j2mepolish-client.jar"
		>
		<delete dir="build/tmp" />
		<delete dir="build/clientsource" />
		<delete dir="build/clientclasses" />
		<delete dir="build/clientresources" />
		<mkdir dir="build/clientsource" />
		<mkdir dir="build/clientclasses" />
		<mkdir dir="build/clientresources" />
		<j2mepolish>
		    <!-- general settings -->
			<info 
				copyright="Copyright 2011 Enough Software. All rights reserved." 
				description="Used for building the enough-j2mepolish-client.jar." 
				infoUrl="http://www.j2mepolish.org" 
				jarName="${ nospace(polish.vendor) }-${ nospace(polish.name) }-${polish.locale}-j2mepolish.jar" 
				jarUrl="${deploy-url}${polish.jarName}" 
				name="J2ME Polish" 
				vendorName="Enough Software" 
				version="2.3.0"
		    />
			<!-- selection of supported devices -->
			<deviceRequirements>
				<requirement name="Identifier" value="${device}"/>
			</deviceRequirements>
		    <!-- build settings -->
			<build 
				fullscreen="menu" 
	            polishDir="../enough-polish-j2me/source/src" 
	            usePolishGui="always"
	            sourceDir="build/clientsource"
				workDir="build/tmp"
				compilerMode="true"
				compilerDestDir="build/clientclasses"
				compilerModePreverify="true"
				>
	
				<!-- project-wide variables - used for preprocessing  -->
				<variables 
					replacePropertiesWithoutDirective="false"
					>
					<variable name="polish.hasPointerEvents" value="true" />
					<variable name="polish.LibraryBuild" value="true" />
		            <variable name="polish.css.allowAllAttributes" value="true"/>
					<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
					<variable name="polish.TextField.showHelpText" value="true" />
				</variables>
				<resources
					dir="build/clientresources" 
					defaultexcludes="yes"
					excludes="*.db"
					filterZeroLengthFiles="true"
				 >
					<localization locales="en_US" />
				</resources>
			</build>
		</j2mepolish>
		<!-- now package the compiled classes -->
		<jar destfile="dist/enough-j2mepolish-client.jar"
		     basedir="build/clientclasses"
			 excludes="**/*.html"
			 index="true"
		     >
		</jar>
		<!-- preverify the binary J2ME distribution - otherwise some IDEs complain 
		<mkdir dir="../enough-polish-j2me/bin/preverified" />
		<echo message="Invoking preverifier ${preverify.cmd}..." />
		<exec executable="${preverify.cmd}" failonerror="true">
			<arg line="-classpath"/>
			<arg line="import/cldc-1.1.jar:import/midp-2.0.jar:import/blackberry-4.0.jar:import/pdaapi.jar:import/mmapi.jar:import/m3g.jar:import/btapi.jar:import/doja-2.5.jar"/>
			-->
			<!-- unix:
			-->
			<!-- windows 
			<arg line="import/mmapi.jar;import/blackberry-4.0.jar;import/pdaapi.jar;import/m3g.jar;import/cldc-1.1.jar;import/midp-2.0.jar;import/btapi.jar;import/doja-2.5.jar"/>
			-->
		<!-- 
			<arg line="-d"/>
			<arg line="../enough-polish-j2me/bin/preverified"/>
			<arg line="../enough-polish-j2me/bin/classes"/>
		</exec>
		-->
		<!-- create the binary J2ME distribution -->
		<!-- 
		<jar destfile="dist/enough-j2mepolish-client.jar"
		     basedir="../enough-polish-j2me/bin/preverified"
			 excludes="**/*.html"
			 index="true"
		     >
		</jar>
		-->
	</target>

	<target name="build-client-java5" 
		depends="build-init"
		description="builds the enough-j2mepolish-client-java5.jar"
		>
		<delete dir="build/tmp" />
		<mkdir dir="build/java5source" />
		<mkdir dir="build/java5classes" />
		<mkdir dir="build/java5resources" />
		<j2mepolish>
		    <!-- general settings -->
			<info 
				copyright="Copyright 2011 Enough Software. All rights reserved." 
				description="Used for building versions for Java 5 syntax support." 
				infoUrl="http://www.j2mepolish.org" 
				jarName="${ nospace(polish.vendor) }-${ nospace(polish.name) }-${polish.locale}-j2mepolish.jar" 
				jarUrl="${deploy-url}${polish.jarName}" 
				name="J2ME Polish" 
				vendorName="Enough Software" 
				version="2.0.0"
		    />
			<!-- selection of supported devices -->
			<deviceRequirements>
				<requirement name="Identifier" value="${device}"/>
			</deviceRequirements>
		    <!-- build settings -->
			<build 
				fullscreen="menu" 
	            polishDir="../enough-polish-j2me/source/src" 
	            symbols="polish.Java5" 
	            usePolishGui="always"
	            sourceDir="build/java5source"
				workDir="build/tmp"
				compilerMode="true"
				compilerDestDir="build/java5classes"
				>

				<!-- project-wide variables - used for preprocessing  -->
				<variables 
					replacePropertiesWithoutDirective="false"
					>
					<variable name="polish.LibraryBuild" value="true" />
		            <variable name="polish.css.allowAllAttributes" value="true"/>
					<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
					<variable name="polish.TextField.showHelpText" value="true" />
				</variables>
				<resources
					dir="build/java5resources" 
					defaultexcludes="yes"
					excludes="*.db"
					filterZeroLengthFiles="true"
				 >
					<localization locales="en_US" />
				</resources>
				<postcompiler name="java5" />
			</build>
		</j2mepolish>
		<!-- now package the compiled classes -->
		<jar destfile="dist/enough-j2mepolish-client-java5.jar"
		     basedir="build/java5classes"
			 excludes="**/*.html"
			 index="true"
		     >
		</jar>
	</target>
	
	<target name="build-client-editor" 
			depends="build-init"
			description="builds the dist/editor/enough-j2mepolish-client.jar"
			>
			<delete dir="build/tmp" />
			<delete dir="build/clientsource" />
			<delete dir="build/clientclasses" />
			<delete dir="build/clientresources" />
			<mkdir dir="build/clientsource" />
			<mkdir dir="build/clientclasses" />
			<mkdir dir="build/clientresources" />
			<j2mepolish>
			    <!-- general settings -->
				<info 
					copyright="Copyright 2008 Enough Software. All rights reserved." 
					description="Used for building the enough-j2mepolish-client.jar." 
					infoUrl="http://www.j2mepolish.org" 
					jarName="${ nospace(polish.vendor) }-${ nospace(polish.name) }-${polish.locale}-j2mepolish.jar" 
					jarUrl="${deploy-url}${polish.jarName}" 
					name="J2ME Polish" 
					vendorName="Enough Software" 
					version="2.0.0"
			    />
				<!-- selection of supported devices -->
				<deviceRequirements>
					<requirement name="Identifier" value="${device}"/>
				</deviceRequirements>
			    <!-- build settings -->
				<build 
					fullscreen="menu" 
		            polishDir="../enough-polish-j2me/source/src" 
		            usePolishGui="always"
		            sourceDir="build/clientsource"
					workDir="build/tmp"
					compilerMode="true"
					compilerDestDir="build/clientclasses"
					compilerModePreverify="true"
					>
		
					<!-- project-wide variables - used for preprocessing  -->
					<variables 
						replacePropertiesWithoutDirective="false"
						>
						<!-- 
						<variable name="polish.LibraryBuild" value="true" /> 
						-->
			            <variable name="polish.css.allowAllAttributes" value="true"/>
						<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
						<variable name="polish.useScrollBar" value="true" />
						<variable name="polish.hasCommandKeyEvents" value="true" />
						<variable name="polish.hasPointerEvents" value="true" />
					</variables>
					<resources
						dir="build/clientresources" 
						defaultexcludes="yes"
						excludes="*.db"
						filterZeroLengthFiles="true"
					 >
						<localization locales="en_US" />
					</resources>
				</build>
			</j2mepolish>
			<!-- now package the compiled classes -->
			<mkdir dir="dist/editor" />
			<jar destfile="dist/editor/enough-j2mepolish-client.jar"
			     basedir="build/clientclasses"
				 excludes="**/*.html"
				 index="true"
			     >
			</jar>
		</target>

	<target name="build-rmi" 
		depends="build-client"
		description="builds the enough-j2mepolish-rmi.jar">
		<mkdir dir="tmp/core/runtime" />
		<unjar src="lib/enough-j2mepolish-runtime.jar" dest="tmp/core/runtime" />
		<delete file="tmp/core/runtime/META-INF/INDEX.LIST" />
		<!-- create the binary rmi distribution -->
		<jar destfile="dist/enough-j2mepolish-rmi.jar"
		     basedir="build/coreclasses"
			 excludes="**/*.html"
			 includes="de/enough/polish/rmi/*"
			 index="true"
		     >
			<!--
			<fileset dir="build/coreclasses" includes="de/enough/polish/util/*" />
			-->
			<fileset dir="build/coreclasses" includes="de/enough/polish/rmi/bluetooth/*" />
			<fileset dir="build/clientclasses" includes="de/enough/polish/rmi/*" />
			<!-- We need un-preprocessed classes for server-side rmi. -->
			<fileset dir="build/clientdummy" includes="de/enough/polish/io/*" />
			<fileset dir="tmp/core/runtime" />
		</jar>
	</target>

	<target name="bootstrap"
		depends="build-client-dummy"
		description="bootstraps the core framework"
		>
		<!-- compile the core code for bootstrap -->
		<mkdir dir="build/bootstrapclasses" />
		<javac
			srcdir="source/src"
			destdir="build/bootstrapclasses"
			debug="true"
			source="1.5"
			target="1.5">
			<classpath>
				<pathelement path="lib/jdom.jar" />
				<pathelement path="lib/javax.servlet.jar" />
				<pathelement path="lib/bluecove-2.0.3.jar" />
				<pathelement path="lib/swing-layout-1.0.jar" />
				<pathelement path="lib/osgi-3.0.1.jar" />
				<pathelement path="lib/AppleJavaExtensions.jar" />
				<pathelement path="build/clientdummy" />
			</classpath>
		</javac>
		<!-- compile extensions for bootstrap -->
		<javac
			srcdir="source/extensions"
			destdir="build/bootstrapclasses"
			debug="true"
			source="1.5"
			target="1.5">
			<classpath>
				<pathelement path="lib/asm-all.jar" />
				<pathelement path="lib/enough-bytecode.jar" />
				<pathelement path="lib/enough-license.jar" />
				<pathelement path="lib/jdom.jar" />
				<pathelement path="lib/jode-1.1.2-pre1.jar" />
				<pathelement path="lib/kenv.zip" />
				<pathelement path="lib/retroweaver-all.jar" />
				<pathelement path="lib/svgSalamander.jar" />
				<pathelement path="lib/yguard-lib.jar" />
				<pathelement path="lib/ZKM.jar" />
				<pathelement path="build/bootstrapclasses" />
			</classpath>
		</javac>
		<!-- compile website for bootstrap -->
		<mkdir dir="build/bootstrapwebsite" />
		<javac
			srcdir="source/website"
			destdir="build/bootstrapwebsite"
			debug="true"
			source="1.5"
			target="1.5">
			<classpath>
				<pathelement path="lib/enough-webprocessor.jar" />
				<pathelement path="build/bootstrapclasses" />
			</classpath>
		</javac>
	</target>
	
	<target name="bin-dist" 
		depends="build-build, build-extension, build-client, build-client-java5, build-client-editor, build-rmi, build-build-source"
		description="creates the binary distribution"
		>
		<mkdir dir="tmp/core/lib" />
		<copy todir="tmp/core/lib">
			<fileset dir="lib" includes="${all.library.jars}" />
			<fileset dir="dist" includes="enough-j2mepolish-rmi.jar" />
			<fileset dir="dist" includes="enough-j2mepolish-build.jar" />
			<fileset dir="dist" includes="enough-j2mepolish-extensions.jar" />
		</copy>	
		<mkdir dir="tmp/core/lib/microemulator" />
		<copy todir="tmp/core/lib/microemulator">
			<fileset dir="lib/microemulator" excludes="**/*CVS" />
		</copy>
		<mkdir dir="tmp/core/import" />
		<copy todir="tmp/core/import">
			<fileset dir="import" includes="*.jar" />
			<fileset dir="dist" includes="enough-j2mepolish-client*" />
		</copy>	
		<mkdir dir="tmp/core/legal" />
		<copy todir="tmp/core/legal">
			<fileset dir="setup/legal" includes="*" />
		</copy>
		<copy todir="tmp/core">
			<fileset dir="." includes="custom-devices.xml,custom-css-attributes.xml,custom-extensions.xml" />
		</copy>
		
		<!-- create the update zip file containing the jars -->
		<zip destfile="dist/j2mepolish-${Version}.zip" basedir="tmp/core">
			<!-- <fileset dir="tmp/core" includes="**/*" /> -->
		</zip>
	</target>
		
	<target name="macstandalone" 
			description="creates the standalone packages for Mac OS X."
			depends="bin-dist"
			>
			<delete dir="tmp" />
			<mkdir dir="tmp/macosx/tmp" />
			<copy todir="tmp/macosx" >
				<fileset dir="setup/macosx" excludes="**/CVS/**" />
			</copy>
			<mkdir dir="tmp/macosx/binaryeditor.app/Contents/Resources/Java" />
			<mkdir dir="tmp/macosx/fonteditor.app/Contents/Resources/Java" />
			<!-- generate the binary editor-application: -->
			<genjar 
				jarfile="dist/enough-j2mepolish-editor.jar"
				destdir="tmp/macosx/tmp">
				<class name="de.enough.polish.font.FontCreator" />
				<class name="de.enough.polish.dataeditor.swing.SwingDataEditor" />
				<class name="de.enough.polish.swing.MacOsXIntegration" />
				<classpath>
				    <pathelement location="import/jdom.jar"/>
				    <pathelement location="import/AppleJavaExtensions.jar"/>
				    <pathelement location="dist/enough-j2mepolish-build.jar"/>
				</classpath>
				<classfilter>
					<exclude name="com.apple." />
				</classfilter>
			</genjar>
			<delete dir="tmp/macosx/tmp" />
		<!--
		-->
			<proguard>
		  		-libraryjars ${java.home}/lib/rt.jar
		  		-libraryjars import/AppleJavaExtensions.jar
		  		-injars      dist/enough-j2mepolish-editor.jar
		  		-outjars     tmp/macosx/binaryeditor.app/Contents/Resources/Java/enough-j2mepolish-binaryeditor.jar
	
		  		-keep class de.enough.polish.dataeditor.swing.SwingDataEditor {
			    	public static void main(java.lang.String[]);
				}
				-keep class de.enough.polish.swing.MacOsXIntegration
				-keep class org.apache.xerces.parsers.SAXParser
				
				-allowaccessmodification
				-defaultpackage
				-overloadaggressively
			</proguard>
			<!-- generate the font editor-application: -->
		<!--
			<delete dir="tmp/macosx/tmp" />
			<mkdir dir="tmp/macosx/tmp" />
		-->
		<!--
			<genjar 
				jarfile="tmp/macosx/fonteditor.app/Contents/Resources/Java/enough-j2mepolish-fonteditor.jar"
				destdir="tmp/macosx/tmp">
				<class name="de.enough.polish.font.FontCreator" />
				<class name="de.enough.polish.swing.MacOsXIntegration" />
				<classpath>
				    <pathelement location="import/jdom.jar"/>
				    <pathelement location="import/AppleJavaExtensions.jar"/>
				    <pathelement location="dist/enough-j2mepolish-build.jar"/>
				</classpath>
				<classfilter>
					<exclude name="com.apple." />
				</classfilter>
			</genjar>
		-->
			<proguard>
	  			-libraryjars ${java.home}/lib/rt.jar
	  			-libraryjars import/AppleJavaExtensions.jar
		  		-injars      dist/enough-j2mepolish-editor.jar
	  			-outjars     tmp/macosx/fonteditor.app/Contents/Resources/Java/enough-j2mepolish-fonteditor.jar
	
				-keep class de.enough.polish.font.FontCreator {
			    	public static void main(java.lang.String[]);
				}
		  		-keep class de.enough.polish.dataeditor.swing.SwingDataEditor {
			    	public static void main(java.lang.String[]);
				}
				-keep class de.enough.polish.swing.MacOsXIntegration
				-keep class org.apache.xerces.parsers.SAXParser
			
				-allowaccessmodification
				-defaultpackage
				-overloadaggressively
			</proguard>
		<!--
			<delete dir="tmp/macosx/tmp" />
		-->
		</target>
	
	<target name="floater"
		description="creates a new floater version"
		>
		<ant dir="../enough-floater" target="deploy" ></ant>
	</target>
	
	<target name="tmpsetup" 
		description="cleans ant sets up the temporary folder for all J2ME Polish installation files"
		depends="bin-dist" >
		<delete dir="tmp" />
		<mkdir dir="tmp/import" />
		<mkdir dir="tmp/lib" />
		<!--
		<mkdir dir="tmp/menu" />
		<mkdir dir="tmp/sysinfo" />
		-->
	</target>

	<target name="copylibs" 
		description="copies library files" 
		depends="tmpsetup" >
		<!-- copy the core files of J2ME Polish -->
		<copy todir="tmp/" >
			<fileset dir="." includes="capabilities.xml,platforms.xml,configurations.xml,custom-extensions.xml,custom-devices.xml,apis.xml,vendors.xml,groups.xml,devices.xml,bugs.xml,LICENSE.txt,Readme.txt" />
		</copy>
		<copy todir="tmp/import">
			<fileset dir="import" includes="*.jar" />
			<fileset dir="dist" includes="enough-j2mepolish-client.jar,enough-j2mepolish-client-java5.jar"  />
		</copy>
		<copy todir="tmp/lib">
			<fileset dir="lib" includes="${all.library.jars}" />
			<fileset dir="dist" includes="*.jar" />
		</copy>
		<mkdir dir="tmp/lib/microemulator" />
		<copy todir="tmp/lib/microemulator">
			<fileset dir="lib/microemulator" excludes="**/*CVS" />
		</copy>
		<!-- copy android files -->
		<mkdir dir="tmp/android" />
		<copy todir="tmp/android">
			<fileset dir="android" excludes="**/CVS" />
		</copy>
	</target>

	<target name="copylegal" 
		description="copies legal information files" 
		depends="tmpsetup" >
		<!-- copy the legal files of J2ME Polish -->
		<mkdir dir="tmp/legal" />
		<copy todir="tmp/legal">
			<fileset dir="setup/legal" excludes="**/CVS" />
		</copy>
		</target>

	<target name="copyplugins" 
		description="copies IDE integration files" 
		depends="tmpsetup" >
		<!-- copy netbeans integration -->
		<mkdir dir="tmp/ide/netbeans" />
		<copy todir="tmp/ide/netbeans">
			<fileset dir="setup/netbeans" excludes="**/CVS" />
		</copy>
		<!-- copy eclipse integration (mepose) -->
		<mkdir dir="tmp/ide/eclipse" />
		<copy todir="tmp/ide/eclipse">
			<fileset dir="setup/eclipse" excludes="**/CVS, **/de.enough.mepose.core*" />
		</copy>
		<!--
		<setAttribute property="mepose.core" dir="setup/eclipse/plugins" fileValue="de.enough.mepose.core*" />
		add current enough-j2mepolish-build.jar to mepose:
		<mkdir dir="tmp/ide/mepose_core" />
		<unjar overwrite="true" dest="tmp/ide/mepose_core" src="setup/eclipse/plugins/${mepose.core}" />
		<copy file="dist/enough-j2mepolish-build.jar" todir="tmp/ide/mepose_core/lib" />
		<jar basedir="tmp/ide/mepose_core" 
			destfile="tmp/ide/eclipse/plugins/${mepose.core}" 
			excludes="**/*src.zip" 
			manifest="tmp/ide/mepose_core/META-INF/MANIFEST.MF"
		/>
		-->
	</target>

	<target name="copysamples" 
		description="copies sample projects files" 
		depends="tmpsetup" >
		<!-- copy blank application -->
		<mkdir dir="tmp/samples/blank/source/src" />
		<copy todir="tmp/samples/blank/source/src">
			<fileset dir="../enough-polish-sample-blank/source/src" includes="**/*.java, **/*.txt" />
		</copy>
		<copy todir="tmp/samples/blank/" 
			>
			<fileset dir="setup/samples/blank" excludes="**/macosx/**,**/CVS" />
			<fileset dir="../enough-polish-sample-blank" includes="resources/**/*.*" excludes="**/CVS"/>
		</copy>
		<!-- copy authenticate-facebook application -->
		<mkdir dir="tmp/samples/authenticate-facebook/source/src" />
		<copy todir="tmp/samples/authenticate-facebook/source/src">
			<fileset dir="../enough-polish-sample-authenticate-facebook/source/src" includes="**/*.java, **/*.txt" />
		</copy>
		<copy todir="tmp/samples/authenticate-facebook/" 
			>
			<fileset dir="setup/samples/authenticate-facebook" excludes="**/macosx/**,**/CVS" />
			<fileset dir="../enough-polish-sample-authenticate-facebook" includes="resources/**/*.*" excludes="**/CVS"/>
		</copy>
		<!-- copy messaging application -->
		<mkdir dir="tmp/samples/messaging/source/src" />
		<copy todir="tmp/samples/messaging/source/src">
			<fileset dir="../enough-polish-sample-messaging/source/src" includes="**/*.java, **/*.txt" />
		</copy>
		<copy todir="tmp/samples/messaging/" 
			>
			<fileset dir="setup/samples/messaging" excludes="**/macosx/**,**/CVS" />
			<fileset dir="../enough-polish-sample-messaging" includes="resources/**/*.*" excludes="**/CVS"/>
		</copy>
		<!-- copy menu application -->
		<mkdir dir="tmp/samples/menu/source/src" />
		<copy todir="tmp/samples/menu/source/src">
			<fileset dir="../enough-polish-sample-localization/source/src" includes="**/*.java" />
		</copy>
		<copy todir="tmp/samples/menu/" 
			>
			<fileset dir="setup/samples/menu" excludes="**/macosx/**,**/CVS" />
			<fileset dir="../enough-polish-sample-localization" includes="resources/**/*.*" excludes="**/CVS"/>
			<fileset dir="../enough-polish-sample-localization" includes="resources2/**/*.*" excludes="**/CCVS"/>
			<fileset dir="../enough-polish-sample-localization" includes="resources3/**/*.*" excludes="**/CCVS"/>
		</copy>
		<!-- copy animation application -->
		<mkdir dir="tmp/samples/animation/source/src" />
		<copy todir="tmp/samples/animation/source/src">
			<fileset dir="../enough-polish-sample-animation/source/src" includes="**/*.java" />
		</copy>
		<copy todir="tmp/samples/animation/" 
			>
			<fileset dir="setup/samples/animation" excludes="**/macosx/**,**/CVS" />
			<fileset dir="../enough-polish-sample-animation" includes="resources/**/*.*" excludes="**/CVS"/>
		</copy>
		<!-- copy processing-tree application -->
		<mkdir dir="tmp/samples/processing-tree/source/src" />
		<copy todir="tmp/samples/processing-tree/source/src">
			<fileset dir="../enough-polish-sample-processing-tree/source/src" includes="**/*.java" />
		</copy>
		<copy todir="tmp/samples/processing-tree/" 
			>
			<fileset dir="setup/samples/processing-tree" excludes="**/macosx/**,**/CVS" />
			<fileset dir="../enough-polish-sample-processing-tree" includes="resources/**/*.*" excludes="**/CVS"/>
		</copy>
		<!-- copy fisheye application -->
		<mkdir dir="tmp/samples/fisheye/source/src" />
		<copy todir="tmp/samples/fisheye/source/src">
			<fileset dir="../enough-polish-sample-fisheye/source/src" includes="**/*.java" />
		</copy>
		<copy todir="tmp/samples/fisheye/" 
			>
			<fileset dir="setup/samples/fisheye" excludes="**/macosx/**,**/CVS" />
			<fileset dir="../enough-polish-sample-fisheye" includes="resources/**/*.*" excludes="**/CVS"/>
		</copy>
		<!-- copy sysinfo application -->
		<mkdir dir="tmp/samples/sysinfo/source/src" />
		<copy todir="tmp/samples/sysinfo/source/src">
			<fileset dir="../enough-polish-sysinfo/source/src" includes="**/*.java" />
		</copy>
		<copy todir="tmp/samples/sysinfo/" 
			>
			<fileset dir="../enough-polish-sysinfo" includes="AUTHORS,COPYING,ChangeLog,INSTALL,README,TODO" />
			<fileset dir="setup/samples/sysinfo" excludes="**/macosx/**,**/CVS" />
			<fileset dir="../enough-polish-sysinfo" includes="resources/**/*.*" excludes="CVS"/>
		</copy>
		<!-- copy logviewer sample application -->
		<mkdir dir="tmp/samples/logviewer/source/src" />
		<copy todir="tmp/samples/logviewer/source/src">
			<fileset dir="../enough-polish-logviewer/source/src" includes="**/*.java" />
		</copy>
		<copy todir="tmp/samples/logviewer/" 
			>
			<fileset dir="setup/samples/logviewer" excludes="**/macosx/**,**/CVS" />
			<fileset dir="../enough-polish-logviewer" includes="resources/**/*.*" excludes="CVS"/>
		</copy>
		<!-- copy serialization sample application -->
		<mkdir dir="tmp/samples/serialization/source/src" />
		<copy todir="tmp/samples/serialization/source/src">
			<fileset dir="../enough-polish-sample-serialization/source/src" includes="**/*.java" />
		</copy>
		<copy todir="tmp/samples/serialization/" 
			>
			<fileset dir="setup/samples/serialization" excludes="**/macosx/**,**/CVS" />
			<fileset dir="../enough-polish-sample-serialization" includes="resources/**/*.*" excludes="CVS"/>
		</copy>
		<!-- copy rgbfilter sample application -->
		<mkdir dir="tmp/samples/rgbfilter/source" />
		<copy todir="tmp/samples/rgbfilter/source">
			<fileset dir="../enough-polish-sample-rgbfilter/source" includes="**/*.java,**/*.xml" excludes="**/macosx/**,**/CVS" />
		</copy>
		<copy todir="tmp/samples/rgbfilter/" 
			>
			<fileset dir="setup/samples/rgbfilter" excludes="**/macosx/**,**/CVS" />
			<fileset dir="../enough-polish-sample-rgbfilter" includes="resources/**/*.*" excludes="**/CVS"/>
		</copy>
		<!-- copy rmi sample application -->
		<mkdir dir="tmp/samples/rmi/source" />
		<copy todir="tmp/samples/rmi/source">
			<fileset dir="../enough-polish-sample-rmi/source" includes="**/*.java,**/*.xml" excludes="**/macosx/**,**/CVS" />
		</copy>
		<copy todir="tmp/samples/rmi/" 
			>
			<fileset dir="setup/samples/rmi" excludes="**/macosx/**,**/CVS" />
			<fileset dir="../enough-polish-sample-rmi" includes="resources/**/*.*" excludes="**/CVS"/>
		</copy>
		<!-- copy rmi-xmlrpc sample application -->
		<mkdir dir="tmp/samples/rmi-xmlrpc/source" />
		<copy todir="tmp/samples/rmi-xmlrpc/source">
			<fileset dir="../enough-polish-sample-rmi-xmlrpc/source" includes="**/*.java,**/*.xml" excludes="**/macosx/**,**/CVS" />
		</copy>
		<copy todir="tmp/samples/rmi-xmlrpc/" 
			>
			<fileset dir="setup/samples/rmi-xmlrpc" excludes="**/macosx/**,**/CVS" />
			<fileset dir="../enough-polish-sample-rmi-xmlrpc" includes="resources/**/*.*" excludes="**/CVS"/>
		</copy>
		<!-- copy java5 sample application -->
		<mkdir dir="tmp/samples/java5/source/src" />
		<copy todir="tmp/samples/java5/source/src">
			<fileset dir="../enough-polish-sample-java5/source/src" includes="**/*.java" />
		</copy>
		<copy todir="tmp/samples/java5/" 
			>
			<fileset dir="setup/samples/java5" excludes="**/macosx/**,**/CVS" />
			<fileset dir="../enough-polish-sample-java5" includes="resources/**/*.*" excludes="**/CVS"/>
		</copy>
		<!-- copy browser sample application -->
		<mkdir dir="tmp/samples/browser/source/src" />
		<copy todir="tmp/samples/browser/source/src">
			<fileset dir="../enough-polish-sample-browser/source/src" includes="**/*.java" />
		</copy>
		<copy todir="tmp/samples/browser/" 
			>
			<fileset dir="setup/samples/browser" excludes="**/macosx/**, **/CVS" />
			<fileset dir="../enough-polish-sample-browser" includes="resources/**/*.*" excludes="**/CVS"/>
		</copy>
		<!-- copy rss sample application -->
		<mkdir dir="tmp/samples/rss/source/src" />
		<copy todir="tmp/samples/rss/source/src">
			<fileset dir="../enough-polish-sample-rssbrowser/source/src" includes="**/*.java" />
		</copy>
		<copy todir="tmp/samples/rss/" 
			>
			<fileset dir="setup/samples/rss" excludes="**/macosx/**, **/CVS" />
			<fileset dir="../enough-polish-sample-rssbrowser" includes="resources/**/*.*" excludes="**/CVS"/>
		</copy>
		<!-- copy chartitem sample application -->
		<mkdir dir="tmp/samples/chartitem/source/src" />
		<copy todir="tmp/samples/chartitem/source/src">
			<fileset dir="../enough-polish-sample-chartitem/source/src" includes="**/*.java" />
		</copy>
		<copy todir="tmp/samples/chartitem/" 
			>
			<fileset dir="setup/samples/chartitem" excludes="**/macosx/**, **/CVS" />
			<fileset dir="../enough-polish-sample-chartitem" includes="resources/**/*.*" excludes="**/CVS"/>
		</copy>
		<!-- copy datefield sample application -->
		<mkdir dir="tmp/samples/datefield/source/src" />
		<copy todir="tmp/samples/datefield/source/src">
			<fileset dir="../enough-polish-sample-datefield/source/src" includes="**/*.java" />
		</copy>
		<copy todir="tmp/samples/datefield/" 
			>
			<fileset dir="setup/samples/datefield" excludes="**/macosx/**, **/CVS" />
			<fileset dir="../enough-polish-sample-datefield" includes="resources/**/*.*" excludes="**/CVS"/>
		</copy>
		<!-- copy roadrunner sample application -->
		<mkdir dir="tmp/samples/roadrunner/source/src" />
		<copy todir="tmp/samples/roadrunner/source/src">
			<fileset dir="../enough-polish-sample-roadrunner/source/src" includes="**/*.java" />
		</copy>
		<copy todir="tmp/samples/roadrunner/" 
			>
			<fileset dir="setup/samples/roadrunner" excludes="**/macosx/**,**/CVS" />
			<fileset dir="../enough-polish-sample-roadrunner" includes="resources/**/*.*" excludes="CVS"/>
		</copy>
		<!-- copy email sample application -->
		<mkdir dir="tmp/samples/email/source/src" />
		<copy todir="tmp/samples/email/source/src">
			<fileset dir="../enough-polish-sample-email/source/src" includes="**/*.java" />
		</copy>
		<copy todir="tmp/samples/email/" 
			>
			<fileset dir="setup/samples/email" excludes="**/macosx/**,**/CVS" />
			<fileset dir="../enough-polish-sample-email" includes="resources/**/*.*" excludes="CVS"/>
		</copy>
		<!-- copy framedform sample application -->
		<mkdir dir="tmp/samples/framedform/source/src" />
		<copy todir="tmp/samples/framedform/source/src">
			<fileset dir="../enough-polish-sample-framedform/source/src" includes="**/*.java" />
		</copy>
		<copy todir="tmp/samples/framedform/" 
			>
			<fileset dir="setup/samples/framedform" excludes="**/macosx/**,**/CVS" />
			<fileset dir="../enough-polish-sample-framedform" includes="resources/**/*.*" excludes="CVS"/>
		</copy>
		<!-- copy tabbedform sample application -->
		<mkdir dir="tmp/samples/tabbedform/source/src" />
		<copy todir="tmp/samples/tabbedform/source/src">
			<fileset dir="../enough-polish-sample-tabbedform/source/src" includes="**/*.java" />
		</copy>
		<copy todir="tmp/samples/tabbedform/" 
			>
			<fileset dir="setup/samples/tabbedform" excludes="**/macosx/**" />
			<fileset dir="../enough-polish-sample-tabbedform" includes="resources/**/*.*" excludes="CVS"/>
		</copy>
		<!-- copy tabbedpane sample application -->
		<mkdir dir="tmp/samples/tabbedpane/source/src" />
		<copy todir="tmp/samples/tabbedpane/source/src">
			<fileset dir="../enough-polish-sample-tabbedpane/source/src" includes="**/*.java" />
		</copy>
		<copy todir="tmp/samples/tabbedpane/" 
			>
			<fileset dir="setup/samples/tabbedpane" excludes="**/macosx/**" />
			<fileset dir="../enough-polish-sample-tabbedpane" includes="resources/**/*.*" excludes="CVS"/>
		</copy>
		<!-- copy accessible application -->
		<mkdir dir="tmp/samples/accessible/source/src" />
		<copy todir="tmp/samples/accessible/source/src">
			<fileset dir="../enough-polish-sample-accessible/source/src" includes="**/*.java" />
		</copy>
		<copy todir="tmp/samples/accessible/" 
			>
			<fileset dir="setup/samples/accessible" excludes="**/macosx/**,**/CVS" />
			<fileset dir="../enough-polish-sample-accessible" includes="resources/**/*.*" excludes="**/CVS"/>
		</copy>
		<!-- copy table application -->
		<mkdir dir="tmp/samples/tableitem/source/src" />
		<copy todir="tmp/samples/tableitem/source/src">
			<fileset dir="../enough-polish-sample-tableitem/source/src" includes="**/*.java" />
		</copy>
		<copy todir="tmp/samples/tableitem/" 
			>
			<fileset dir="setup/samples/tableitem" excludes="**/macosx/**,**/CVS" />
			<fileset dir="../enough-polish-sample-tableitem" includes="resources/**/*.*" excludes="**/CVS"/>
		</copy>
		<!-- copy doja sample application -->
		<mkdir dir="tmp/samples/doja/source/src" />
		<copy todir="tmp/samples/doja/source/src">
			<fileset dir="../enough-polish-sample-doja/source/src" includes="**/*.java" />
		</copy>
		<copy todir="tmp/samples/doja/" 
			>
			<fileset dir="setup/samples/doja" excludes="**/macosx/**,**/CVS" />
			<fileset dir="../enough-polish-sample-doja" includes="resources/**/*.*" excludes="CVS"/>
		</copy>
		<!-- copy thirdparty-smaato-blackbox application 
		<mkdir dir="tmp/samples/thirdparty-smaato-blackbox/source/src" />
		<copy todir="tmp/samples/thirdparty-smaato-blackbox/source/src">
			<fileset dir="../smaato-blackbox/source/src" includes="**/*.java" />
		</copy>
		<copy todir="tmp/samples/thirdparty-smaato-blackbox/" 
			>
			<fileset dir="setup/samples/thirdparty-smaato-blackbox" excludes="**/macosx/**,**/CVS" />
			<fileset dir="../smaato-blackbox" includes="resources/**/*.*" excludes="**/CVS"/>
		</copy>
		-->
		<!-- copy thirdparty-nutiteq-openstreetmap application -->
		<mkdir dir="tmp/samples/thirdparty-nutiteq-openstreetmap/source/src" />
		<copy todir="tmp/samples/thirdparty-nutiteq-openstreetmap/source/src">
			<fileset dir="../enough-polish-sample-nutiteq/src" includes="**/*.java" />
		</copy>
		<copy todir="tmp/samples/thirdparty-nutiteq-openstreetmap/" 
			>
			<fileset dir="setup/samples/thirdparty-nutiteq-openstreetmap" excludes="**/macosx/**,**/CVS" />
			<fileset dir="../enough-polish-sample-nutiteq" includes="resources/**/*.*" excludes="**/CVS"/>
			<fileset dir="../enough-polish-sample-nutiteq" includes="nutiteq_maps_lib_src_1_1_0/**/*.*" excludes="**/CVS"/>
		</copy>
		
	</target>

	<target name="copyosx" 
		description="copies mac os x standalone apps" 
		depends="tmpsetup" >
		<!-- copy mac os x standalone applications -->
		<mkdir dir="tmp/macosx" />
		<copy todir="tmp/macosx" >
			<fileset dir="setup/macosx" excludes="**/CVS/**" />
		</copy>
	</target>

	<target name="copyfiles" 
		description="copies all library and sample project files" 
		depends="copylibs, copyplugins, copysamples, copyosx, copylegal" >
	</target>

	<target name="convertWindowsLineEndings" 
		description="converts all text files to windows line endings, so that the stupid windows default text editor can show them correctly. Just sad." 
		>
		<convertToWindowsLineEndings>
			<fileset dir="tmp" includes="**/*.txt,**/*.css,**/*.xml"></fileset>
		</convertToWindowsLineEndings>
	</target>

	<target name="installer"
			 depends="bin-dist, copyfiles, convertWindowsLineEndings"
			 description="creates the j2mepolish-installer." 
		>
		<taskdef name="izpack" 
			classpath="${izpack.dir}/lib/compiler.jar"
			classname="com.izforge.izpack.ant.IzPackTask"/>
		<taskdef name="webprocessor" 
			classname="de.enough.webprocessor.WebProcessorTask" 
			classpath="../enough-webprocessor/bin/classes:../enough-webprocessor/dist/enough-webprocessor.jar:${polish.home}/bin/website:build/bootstrapwebsite:${polish.home}/bin/classes:${polish.home}/build/coreclasses:${polish.home}/lib/jdom.jar:${polish.home}/dist/enough-j2mepolish-client.jar:${polish.home}/import/enough-j2mepolish-client.jar:${polish.home}/import/cldc-1.1.jar:${polish.home}/import/midp-2.0.jar:${polish.home}/import/mmapi.jar" />
		<!--
		<taskdef name="webprocessor" 
			classname="de.enough.webprocessor.WebProcessorTask" 
			classpath="bin/website:../enough-webprocessor/bin/classes:dist/enough-webprocessor.jar:${polish.home}/bin/website:build/bootstrapwebsite:${polish.home}/bin/classes:${polish.home}/lib/jdom.jar:../enough-polish-j2me/bin/classes"
		/>
		-->

		<!-- copy source of J2ME Polish -->
		<mkdir dir="tmp/j2mepolish-src/build" />
		<copy todir="tmp/j2mepolish-src/build">
			<fileset dir="../enough-polish-build/source" includes="**/*.java" />
		</copy>
		<mkdir dir="tmp/j2mepolish-src/j2me" />
		<copy todir="tmp/j2mepolish-src/j2me">
			<fileset dir="../enough-polish-j2me/source" includes="**/*.java" />
		</copy>
		<!-- create / copy documentation -->
		<mkdir dir="tmp/doc/javadoc/build" />
		<mkdir dir="tmp/doc/javadoc/j2me" />
		<copy todir="tmp/doc" >
			<fileset dir="setup" includes="javadoc.html" />
			<!--
			<fileset dir="../enough-polish-website/site/source/downloads" includes="Complete_Guide_to_J2ME_Polish.pdf" />			
			-->
		</copy>
		<javadoc 
		    	destdir="tmp/doc/javadoc/build" 
		    	access="protected" 
		    	use="true" 
		    	notree="false" 
		    	nonavbar="false" 
		    	noindex="false" 
		    	splitindex="true" 
		    	author="true" 
		    	version="true" 
		    	nodeprecatedlist="false" 
		    	nodeprecated="false" 
		    	packagenames="de.enough.*" 
		    	sourcepath="source/src" 
		    	classpath="bin/classes:../enough-polish-j2me/bin/classes:build/clientdummy:lib/ant.jar:lib/junit.jar:lib/jdom.jar:lib/AppleJavaExtensions.jar:lib/bluecove-2.0.3.jar:lib/javax.servlet.jar:lib/osgi-3.0.1.jar"
		    	doctitle="The J2ME Polish Build Framework, Version ${Version}"
		>
				<link href="http://java.sun.com/javase/6/docs/api/" />
		</javadoc>	
		<javadoc 
		    	destdir="tmp/doc/javadoc/j2me" 
		    	access="protected" 
		    	use="true" 
		    	notree="false" 
		    	nonavbar="false" 
		    	noindex="false" 
		    	splitindex="true" 
		    	author="true" 
		    	version="true" 
		    	nodeprecatedlist="false" 
		    	nodeprecated="false" 
		    	packagenames="de.enough.*" 
		    	sourcepath="../enough-polish-j2me/source/src" 
		    	classpath="../enough-polish-j2me/bin/classes:import/cldc-1.1.jar:import/midp-2.0.jar:import/windows.jar:import/advancedmultimedia-1.0.jar:import/android-2.1.jar:import/blackberry-6.0.0.jar:import/doja-2.5.jar:import/m3g.jar:import/nokia-ui.jar:import/sensor.jar:import/siemens-extension-api.jar"
		    	doctitle="The J2ME Polish Client Framework, Version ${Version}"
		>
			<link href="http://java.sun.com/javame/reference/apis/jsr118/" />
		</javadoc>
		<!-- copy the whole website to the documentation -->
		<echo message="starting webprocessor (1/2)" />
		<webprocessor 
			srcdir="../enough-polish-website/site/source"
		 	includedir="../enough-polish-website/site/includes"
			destdir="tmp/doc/html"
			clean="false"
			update="atoz.html, documentation.html, index.html, news.html, docs/install.html"
			keywordsFile="../enough-polish-website/keywords.txt"
			excludes="downloads/**/*,download.html"
			symbols="excludeDownload"
			>
			<variable name="PolishVersion" value="${Version}" />
		 	<variable name="LatestBetaDownload" value="j2mepolish-${BetaVersion}.html" />
			<variable name="LatestDownload" value="j2mepolish_${Version}.html" />
			<variable name="Author" value="Robert Virkus" />
			<variable name="basedir" value="" />
			<variable name="javadocdir" value="../" />
			<variable name="newsbasedir" value="http://www.j2mepolish.org/" />
			<variable name="index.h1" value="h1index" />
			<variable name="index.h2" value="h2index" />
			<variable name="index.h3" value="h3index" />
			<variable name="index.h4" value="h4index" />
			<variable name="index.h5" value="h5index" />
			<directive name="cssattributes" class="de.enough.polish.website.CssDirectiveHandler" />
			<directive name="cssmappings" class="de.enough.polish.website.CssMappingsDirectiveHandler" />
		</webprocessor>
		<!-- created & copy the device database 
		<echo message="starting device export" />
		<deviceExport />
		<echo message="starting webprocessor (1/2)" />
		<webprocessor 
			srcdir="../enough-polish-website/tmp"
		 	includedir="../enough-polish-website/site/includes"
			destdir="tmp/doc/html"
			clean="false"
			symbols="excludeDownload"
			>
			<variable name="PolishVersion" value="${Version}" />
			<variable name="LatestDownload" value="j2mepolish_${Version}.html" />
			<variable name="Author" value="Robert Virkus" />
			<variable name="basedir" value="" />
			<variable name="index.h1" value="h1index" />
			<variable name="index.h2" value="h2index" />
			<variable name="index.h3" value="h3index" />
			<variable name="index.h4" value="h4index" />
			<variable name="index.h5" value="h5index" />
		</webprocessor>
		-->
		<!-- copy the documentation.html to the root -->
		<echo message="starting webprocessor (2/2)" />
		<webprocessor 
			srcdir="../enough-polish-website/site/source"
		 	includedir="../enough-polish-website/site/includes"
			destdir="tmp/doc"
			clean="false"
			update="documentation.html"
			keywordsFile="../enough-polish-website/keywords.txt"
			includes="documentation.html"
			symbols="excludeDownload, onlyDocumentation"
			>
			<variable name="PolishVersion" value="${Version}" />
			<variable name="LatestDownload" value="j2mepolish_${Version}.html" />
			<variable name="Author" value="Robert Virkus" />
			<variable name="basedir" value="html/" />
			<variable name="index.h1" value="h1index" />
			<variable name="index.h2" value="h2index" />
			<variable name="index.h3" value="h3index" />
			<variable name="index.h4" value="h4index" />
			<variable name="index.h5" value="h5index" />
			<directive name="cssattributes" class="de.enough.polish.website.CssDirectiveHandler" />
			<directive name="cssmappings" class="de.enough.polish.website.CssMappingsDirectiveHandler" />
		</webprocessor>
		<echo message="updating installation settings" />
		<!-- update installation settings -->
		<propertyWriter srcfile="setup/install.xml"
			            destfile="tmp/install.xml" />
		<propertyWriter srcfile="setup/UserInputSpec.xml"
			            destfile="tmp/userInputSpec.xml"
						ignore="polish.home" />
		<!--
		<propertyWriter srcfile="setup/Readme.txt"
			            destfile="tmp/Readme.txt" />
		-->
		<copy file="setup/Readme.txt" todir="tmp" />
		<!-- create installation file -->
		<echo message="starting izpack..." />
		<izpack input="tmp/install.xml"
		        output="dist/j2mepolish-${Version}.jar"
		        installerType="standard"
		        basedir="tmp"
		        izPackDir="${izpack.dir}"
		/>
		 <tstamp>
		    <format property="builddate" pattern="yyyy-MM-dd" />
		  </tstamp>
		 <tstamp>
		    <format property="buildtime" pattern="HH:mm:ss"/>
		  </tstamp>

		<echo message="Finished J2ME Polish installer on ${builddate} at ${buildtime}." />
		<exec executable="java">
			<arg line="-cp" />
			<arg line="dist/enough-j2mepolish-build.jar" />
			<arg line="de.enough.polish.Notify" />
			<arg line="&quot;Build Finished&quot;" />
			<arg line="&quot;Finished J2ME Polish installer on ${builddate} at ${buildtime}.&quot;" />
		</exec>
	</target>
		
	<target name="izpack" description="calls only IzPack for generating the installer">
		<taskdef name="izpack" 
			classpath="${izpack.dir}/lib/compiler.jar"
			classname="com.izforge.izpack.ant.IzPackTask"/>
		<!-- update installation settings -->
		<propertyWriter srcfile="setup/install.xml"
			            destfile="tmp/install.xml" />
		<propertyWriter srcfile="setup/UserInputSpec.xml"
			            destfile="tmp/userInputSpec.xml"
						ignore="polish.home" />
		<propertyWriter srcfile="setup/Readme.txt"
			            destfile="tmp/Readme.txt" />
		<copy file="setup/eng.xml" todir="tmp" />
		<!-- create installation file -->
		<izpack input="tmp/install.xml"
		        output="dist/j2mepolish-${Version}.jar"
		        installerType="standard"
		        basedir="tmp"
	        izPackDir="${izpack.dir}"
		/>
	</target>
	
	<target name="fullinstall"
		description="creates a floater evaluation version along with the J2ME Polish installer"
		depends="floater, installer"
	/>
	<target name="fullinstaller"
		depends="fullinstall"
	/>
		
	<target name="webprocessor">
		<webprocessor 
			srcdir="../enough-polish-website/site/source"
		 	includedir="../enough-polish-website/site/includes"
			destdir="tmp/doc/html"
			clean="false"
			update="atoz.html, documentation.html, index.html, news.html, docs/install.html"
			keywordsFile="../enough-polish-website/keywords.txt"
			excludes="downloads/**/*,download.html"
			symbols="excludeDownload"
			>
			<variable name="PolishVersion" value="${Version}" />
			<variable name="LatestDownload" value="j2mepolish_${Version}.html" />
			<variable name="Author" value="Robert Virkus" />
			<variable name="basedir" value="" />
			<variable name="index.h1" value="h1index" />
			<variable name="index.h2" value="h2index" />
			<variable name="index.h3" value="h3index" />
			<variable name="index.h4" value="h4index" />
			<directive name="cssattributes" class="de.enough.polish.website.CssDirectiveHandler" />
		</webprocessor>
	</target>
		
	<target name="device-export">
		<deviceExport />
		<webprocessor 
			srcdir="../enough-polish-website/tmp"
		 	includedir="../enough-polish-website/site/includes"
			destdir="tmp/doc/html"
			clean="false"
			>
			<variable name="PolishVersion" value="${Version}" />
			<variable name="LatestDownload" value="j2mepolish_${Version}.html" />
			<variable name="Author" value="Robert Virkus" />
			<variable name="basedir" value="" />
			<variable name="index.h1" value="h1index" />
			<variable name="index.h2" value="h2index" />
			<variable name="index.h3" value="h3index" />
		</webprocessor>
	</target>
		
	<target name="test" depends="bin-dist">
		<copy file="dist/enough-j2mepolish-build.jar" todir="../enough-polish-dict/import/" />
		<copy file="dist/enough-j2mepolish-build.jar" todir="../enough-polish-example/import/" />
	</target>
	

	<target name="really-clean" depends="clean">
		<delete dir="bin" />
	</target>
	
	<target name="clean" depends="init">
		<delete dir="build" />
		<delete dir="dist" />
		<delete dir="doc" />
		<delete dir="tmp" />
	</target>
	
	<target name="generic-dist" depends="init" description="creates a source build ">
		<delete dir="dist" />
		<mkdir dir="dist" />
		<j2mepolish>
		      <info
		        license="GPL"
		        name="Generic"
		        version="0.1.0"
		        vendorName="Enough Software"
		        infoUrl="http://www.enough.de"
		        jarName="nothing.jar"
		        jarUrl="${deploy-url}${polish.jarName}"
		        copyright="Copyright 2006 Enough Software"
		    />
			<devicerequirements>
				<requirement name="Identifier" value="Generic/Midp2Cldc11" />
			</devicerequirements>
			<build
				usePolishGui="always"
				sourceDir="../enough-polish-j2me/source/src"
				polishDir="../enough-polish-j2me/source/src"
				compilerMode="true"
				>
				<variables>
			          <variable name="polish.css.allowAllAttributes" value="true"/>
					  <variable name="polish.StyleSheet.exclude" value="true"/>
					  <variable name="polish.LibraryBuild" value="true"/>
				</variables>
				<resources>
					<localization>
						<locale name="en_US" />
					</localization>
				</resources>
			</build>
		</j2mepolish>
	</target>

	<target name="check-build">
		<mkdir dir="build/testclasses" />
		<javac
			srcdir="source/test"
			destdir="build/testclasses"
			debug="true"
			source="1.5"
			target="1.5">
			<classpath>
				<pathelement location="lib/asm-all.jar" />
				<pathelement location="lib/enough-bytecode.jar" />
				<pathelement location="lib/junit.jar" />
				<pathelement location="build/clientclasses" />
				<pathelement location="build/coreclasses" />
				<pathelement location="build/extensionsclasses" />
			</classpath>
		</javac>

		<junit printsummary="yes" fork="yes" haltonfailure="no" showoutput="no">
			<classpath>
				<pathelement location="source/test" />
				<pathelement location="lib/asm-all.jar" />
				<pathelement location="lib/enough-bytecode.jar" />
				<pathelement location="lib/jdom.jar" />
				<pathelement location="lib/junit.jar" />
				<pathelement location="build/clientclasses" />
				<pathelement location="build/coreclasses" />
				<pathelement location="build/extensionsclasses" />
				<pathelement location="build/testclasses" />
			</classpath>
			<formatter type="plain" />
			<batchtest>
				<fileset dir="source/test">
					<!-- Never test these classes directly. They are used by SerializationVisitorTest. -->
					<exclude name="**/TestSerialization_*.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="check-client">
		<mkdir dir="build/clienttestclasses" />
		<javac
			srcdir="../enough-polish-j2me/source/test"
			encoding="latin1"
			destdir="build/clienttestclasses"
			debug="true"
			source="1.5"
			target="1.5">
			<classpath>
				<pathelement location="import/cldc-1.1.jar" />
				<pathelement location="import/midp-2.1.jar" />
				<pathelement location="lib/junit.jar" />
				<pathelement location="build/clientclasses" />
			</classpath>
			<exclude name="**/TestL2CapConnection.java" />
			<exclude name="**/L2CapStreamTest.java" />
			<exclude name="**/LayerManagerTest.java" />
			<exclude name="**/HashMapTest.java" />
		</javac>

		<junit printsummary="yes" fork="yes" haltonfailure="no" showoutput="no">
			<classpath>
				<pathelement location="lib/junit.jar" />
				<pathelement location="import/cldc-1.1.jar" />
				<pathelement location="import/midp-2.1.jar" />
				<pathelement location="build/clientclasses" />
				<pathelement location="build/clienttestclasses" />
				<pathelement location="../enough-polish-j2me" />
			</classpath>
			<formatter type="plain" />
			<batchtest>
				<fileset dir="../enough-polish-j2me/source/test">
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="checkstyle">
		<mkdir dir="build" />
		<checkstyle config="checkstyle-config.xml" failOnViolation="false">
			<fileset dir="source/src" includes="**/*.java"/>
			<fileset dir="source/extensions" includes="**/*.java"/>
			<formatter type="plain"/>
			<formatter type="xml" toFile="build/checkstyle_errors.xml"/>
		</checkstyle>
		<checkstyle config="checkstyle-config-client.xml" failOnViolation="false">
			<fileset dir="../enough-polish-j2me/source/src" includes="**/*.java"/>
			<formatter type="plain"/>
			<formatter type="xml" toFile="build/checkstyle_errors_client.xml"/>
		</checkstyle>
	</target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="enough-polish-build" default="default" basedir=".">
    <description>Builds, tests, and runs the project enough-polish-build.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar-with-manifest:    JAR building (if you are using a manifest)
      -do-jar-without-manifest: JAR building (if you are not using a manifest)
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="enough-polish-build-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->
</project>
<!-- This file controls the build process.                    -->
<!-- The most important target is the "j2mepolish",           -->
<!-- which controls for what devices the application should   -->
<!-- be created and so on.                                    -->
<!--                                                          -->
<!-- Call the "emulator" target to skip the obfuscation       -->
<!-- and to build the example for only one handsets.          -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->
<project 
	name="enough-j2mepolish-accessible" 
	default="j2mepolish">
	
	<!-- import user specific properties                          -->
	<property file="${user.name}.properties" />
	
	<!-- The polish.home property needs to point to the directory -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" location="%{INSTALL_PATH}" />
	
	<!-- import global properties                                 -->
	<property file="${polish.home}/global.properties" />


		
	<!-- the device for the test mode - you can define it on the command-line
	     using the -D switch, e.g. ant -Ddevice=Generic/AnyMsaPhone emulator -->
	<property name="device" value="Generic/AnyPhone"/>
	<property name="devices" value="${device},Generic/AnyMsaPhone,Nokia/Series40E3,Nokia/Series60E3,Sony-Ericsson/JavaPlatform7,Sony-Ericsson/JavaPlatform8"/>
	


	<!-- Definition of the J2ME Polish task:                      -->
	<taskdef name="j2mepolish" 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/lib/enough-j2mepolish-build.jar"
	/>
	
		
	<!-- build targets, each target can be called via "ant [name]" on the command line, 
		 e.g. "ant clean", "ant clean j2mepolish" or just "ant" for calling the default-target -->
	
	<target name="setdeploy" 
		description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
		>
		<property name="deploy-url" value="http://www.company.com/download/" />
	</target>
	
	<target name="enableDebug" 
		description="Call this target first to skip the obfuscation step, call the emulator and start the debugger, e.g. ant enableDebug j2mepolish"
		>
		<property name="debug" value="true" />
	</target>
	
		
	<target name="test" 
		description="Call this target first to skip the obfuscation step and call the emulator, e.g. ant test j2mepolish"
		>
		<property name="test" value="true" />
		<property name="dir.work" value="build/test" />
	</target>
			
	<target name="init">
	  	<property name="test" value="false" />
		<property name="dir.work" value="build/real" />
		<property name="deploy-url" value="" />
		<property name="resource.dir" value="resources" />
	</target>
	 
	<!-- In this target the J2ME Polish task is used.             -->
	<!-- It has 3 sections:                                       -->
	<!--    1. The info-section defines some general information  -->
	<!--    2. The deviceRequirements-section chooses the devices -->
	<!--       for which the application is optimized.            -->
	<!--    3. The build-section controls the actual build        -->
	<!--       process.                                           -->	
	<target name="j2mepolish" 
			depends="init"
			description="This is the controller for the J2ME build process." 
			>
		<j2mepolish>
		    <!-- general settings, these settings basically form the JAD-attributes. -->
		    <!-- Have a look at the <jad>-section for setting specialised attributes.
		         You can also define localized attributes in the resources/messages.txt files -->
			<info
				name="Accessible"
				version="1.3.4"
				description="Shows how to deactivate and activate User Interface components during runtime."
				vendorName="Enough Software"
				infoUrl="http://www.j2mepolish.org"
				icon="dot.png"
				jarName="${polish.vendor}-${polish.name}-${polish.locale}-accessible.jar" 
				jarUrl="${deploy-url}${polish.jarName}"
				copyright="Copyright 2005 - 2012 Enough Software. All rights reserved."
			/>
			<!-- selection of supported devices -->
			<!-- In the test mode the application is build only for the  -->
			<!-- Generic/midp1 phone, but when the test-property is set to false, -->
			<!-- the second deviceRequirements will be used instead. -->
			<deviceRequirements if="test">
				<requirement name="Identifier" value="${device}" />
			</deviceRequirements>
			<deviceRequirements unless="test">
				<requirement name="Identifier" value="${devices}" />
				<!-- on could use other devices for real builds, e.g. :
				<or>
					<and>
						<requirement name="JavaPackage" value="nokia-ui" />
						<requirement name="BitsPerPixel" value="16+" />
					</and>
				</or>
				 -->
			</deviceRequirements>
		    <!-- build settings -->
			<!-- 
			 -->
			<build
				symbols="ExampleSymbol, AnotherExample"
				usePolishGui="true"
				workDir="${dir.work}"
			>
				<!-- midlets definition -->
				<midlet class="de.enough.polish.sample.accessible.MenuMidlet" name="Accessible" />
				<!-- project-wide variables - used for preprocessing.  -->
				<!-- You can set localized variables in the resources/messages.txt files as well.  -->
				<variables includeAntProperties="true" >
					<!-- example variables:
					In your Java-code you can use the following snipet to use this variable:
					//#= private static final String UPDATE_URL = "${ update-url }";
					-->
					<variable name="update-url" value="http://www.enough.de/update" />
					<variable
						name="polish.FullScreen"
						value="menu" 
						unless="polish.blackberry || polish.android" 
					/>
				</variables>
				<!-- Configure the resource assembling: -->
				<resources
					dir="${resource.dir}"
					defaultexcludes="yes"
					excludes="readme.txt"
				>
					<!-- add the localization element for created localized
					     versions of your application: -->
					<localization locales="de_DE, en_US" unless="test" />
					<localization locales="en_US" if="test" />
				</resources>
				<!-- obfuscator settings: do not obfuscate when the test-property is true -->
				<obfuscator name="ProGuard" unless="test or polish.blackberry" >
					<!--
					You can set additional parameters here, e.g.:
					<parameter name="optimize" value="false" />
					-->
				</obfuscator>
				<!-- debug settings: only include debug setting when the test-property is true -->
				<debug if="test or log" verbose="true" level="error">
					<filter pattern="de.enough.polish.example.*" level="debug" />
					<filter pattern="de.enough.polish.ui.*" level="warn" />
				</debug>
				<!-- user defined JAD attributes can also be used: -->
				<jad>
					<attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
				</jad>	
			</build>
			
			<!-- execution of emulator(s) -->
			<emulator
				wait="true"
				securityDomain="trusted"
				enableProfiler="true"
				enableMemoryMonitor="true"
				enableNetworkMonitor="true"
				if="debug"
				>
				<!--
				<parameter name="-Xjam" value="transient=http://localhost:8080/${polish.jadName}" />
				-->
			</emulator>
                        
			<emulator
				wait="true"
				trace="class"
				securityDomain="trusted"
				enableProfiler="false"
				enableMemoryMonitor="false"
				enableNetworkMonitor="false"
				if="test and not debug"
				>
				<!-- this is an example for connecting to a debugger - use the ${polish.debug.port} Ant property
				     for getting to know the port of the debugger. In this example the 
				     "connect-debugger" target is also required.
				-->
				<!--
				<debugger name="antcall" target="connect-debugger" port="6001" />
				-->
			</emulator>

		
		</j2mepolish>
	</target>
	
	<target 
		name="emulator"
		depends="test,j2mepolish"
		description="invokes the emulator"
	>
	</target>

	<target name="clean" 
	  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
		<delete dir="build" />
		<mkdir dir="dist" />
		<delete dir="dist" includes="**/*" />
	</target>

	<target  
		name="cleanbuild"
		description="allows a clean build. You should call [ant cleanbuild] whenever you made changes to devices.xml, vendors.xml or groups.xml"
		depends="clean, j2mepolish"
	/>

	
    <target name="debug" description="debugs the project" depends="enableDebug, test, j2mepolish" />

</project>
<!-- This file controls the build process.                    -->
<!-- The most important target is the "j2mepolish",           -->
<!-- which controls for what devices the application should   -->
<!-- be created and so on.                                    -->
<!--                                                          -->
<!-- Call the "emulator" target to skip the obfuscation       -->
<!-- and to build the example for only one handsets.          -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->
<project 
	name="enough-j2mepolish-animation" 
	default="j2mepolish">
	
	<!-- import user specific properties                          -->
	<property file="${user.name}.properties" />
	
	<!-- The polish.home property needs to point to the directory -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" location="%{INSTALL_PATH}" />
	
	<!-- import global properties                                 -->
	<property file="${polish.home}/global.properties" />


		
	<!-- the device for the test mode - you can define it on the command-line
	     using the -D switch, e.g. ant -Ddevice=Generic/midp2 emulator -->
	<property name="device" value="Generic/AnyPhone"/>
	<property name="devices" value="${device},Nokia/Series40E4,Nokia/Series40E5,Nokia/Series60E3,Sony-Ericsson/JavaPlatform7,Sony-Ericsson/JavaPlatform8"/>
	


	<!-- Definition of the J2ME Polish task:                      -->
	<taskdef name="j2mepolish" 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/lib/enough-j2mepolish-build.jar"
	/>
	
		
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default-target -->
	
	<target name="setdeploy" 
		description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
		>
		<property name="deploy-url" value="http://www.company.com/download/" />
	</target>
	
	<target name="enableDebug" 
		description="Call this target first to skip the obfuscation step, call the emulator and start the debugger, e.g. ant enableDebug j2mepolish"
		>
		<property name="debug" value="true" />
	</target>
	
		
	<target name="test" 
		description="Call this target first to skip the obfuscation step and call the emulator, e.g. ant test j2mepolish"
		>
		<property name="test" value="true" />
		<property name="dir.work" value="build/test" />
	</target>
			
	<target name="init">
	  	<property name="test" value="false" />
		<property name="dir.work" value="build/real" />
		<property name="deploy-url" value="" />
		<property name="resource.dir" value="resources" />
	</target>
	 
	<!-- In this target the J2ME Polish task is used.             -->
	<!-- It has 3 sections:                                       -->
	<!--    1. The info-section defines some general information  -->
	<!--    2. The deviceRequirements-section chooses the devices -->
	<!--       for which the application is optimized.            -->
	<!--    3. The build-section controls the actual build        -->
	<!--       process.                                           -->	
	<target name="j2mepolish" 
			depends="init"
			description="This is the controller for the J2ME build process." 
			>
		<j2mepolish>
		    <!-- general settings, these settings basically form the JAD-attributes. -->
		    <!-- Have a look at the <jad>-section for setting specialised attributes.
		         You can also define localized attributes in the resources/messages.txt files -->
			<info
				name="Animation"
				version="1.3.4"
				description="A midlet that shows some CSS animations."
				vendorName="Enough Software"
				infoUrl="http://www.j2mepolish.org"
				icon="icon.png"
				jarName="${polish.vendor}-${polish.name}-${polish.locale}-animation.jar" 
				jarUrl="${deploy-url}${polish.jarName}"
				copyright="Copyright 2011 Enough Software. All rights reserved."
			/>
			<!-- selection of supported devices -->
			<!-- In the test mode the application is build only for the  -->
			<!-- Generic/midp1 phone, but when the test-property is set to false, -->
			<!-- the second deviceRequirements will be used instead. -->
			<deviceRequirements if="test">
				<requirement name="Identifier" value="${device}" />
			</deviceRequirements>
			<deviceRequirements unless="test">
				<requirement name="Identifier" value="${devices}" />
				<!-- on could use other devices for real builds, e.g. :
				<or>
					<and>
						<requirement name="JavaPackage" value="nokia-ui" />
						<requirement name="BitsPerPixel" value="16+" />
					</and>
				</or>
				 -->
			</deviceRequirements>
		    <!-- build settings -->
			<!-- 
			 -->
			<build
				symbols="ExampleSymbol, AnotherExample"
				usePolishGui="true"
				workDir="${dir.work}"
			>
				<!-- midlets definition -->
				<midlet class="de.enough.polish.sample.animation.AnimationMidlet" name="Animations" />

				<!-- project-wide variables - used for preprocessing.  -->
				<!-- You can set localized variables in the resources/messages.txt files as well.  -->
				<variables includeAntProperties="true" >
					<variable name="polish.MenuBar.useExtendedMenubar" value="true" />
					<variable
						name="polish.FullScreen"
						value="menu" 
						unless="polish.blackberry || polish.android" 
					/>
				</variables>
				<resources
					dir="${resource.dir}"
					defaultexcludes="yes"
					excludes="readme.txt"
				>
					<!-- add the localization element for created localized
					     versions of your application: -->
					<localization locales="de_DE, en_US" unless="test" />
					<localization locales="en_US" if="test" />
				</resources>
				<!-- obfuscator settings: do not obfuscate when the test-property is true -->
				<obfuscator name="ProGuard" unless="test or polish.blackberry" >
					<!--
					You can set additional parameters here, e.g.:
					<parameter name="optimize" value="false" />
					-->
				</obfuscator>
				<!-- debug settings: only include debug setting when the test-property is true -->
				<debug if="test or log" verbose="true" level="error">
					<filter pattern="de.enough.polish.example.*" level="debug" />
					<filter pattern="de.enough.polish.ui.*" level="warn" />
				</debug>
				<!-- user defined JAD attributes can also be used: -->
				<jad>
					<attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
				</jad>	
			</build>
			
			<!-- execution of emulator(s) -->
			<emulator
				wait="true"
				securityDomain="trusted"
				enableProfiler="true"
				enableMemoryMonitor="true"
				enableNetworkMonitor="true"
				if="debug"
				>
				<!--
				<parameter name="-Xjam" value="transient=http://localhost:8080/${polish.jadName}" />
				-->
			</emulator>
                        
			<emulator
				wait="true"
				trace="class"
				securityDomain="trusted"
				enableProfiler="false"
				enableMemoryMonitor="false"
				enableNetworkMonitor="false"
				if="test and not debug"
				>
				<!-- this is an example for connecting to a debugger - use the ${polish.debug.port} Ant property
				     for getting to know the port of the debugger. In this example the 
				     "connect-debugger" target is also required.
				-->
				<!--
				<debugger name="antcall" target="connect-debugger" port="6001" />
				-->
			</emulator>

		
		</j2mepolish>
	</target>
	
	<target 
		name="emulator"
		depends="test,j2mepolish"
		description="invokes the emulator"
	>
	</target>

	<target name="clean" 
	  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
		<delete dir="build" />
		<mkdir dir="dist" />
		<delete dir="dist" includes="**/*" />
	</target>

	<target  
		name="cleanbuild"
		description="allows a clean build. You should call [ant cleanbuild] whenever you made changes to devices.xml, vendors.xml or groups.xml"
		depends="clean, j2mepolish"
	/>
	
    <target name="debug" description="debugs the project" depends="enableDebug, test, j2mepolish" />

</project>
<!-- This file controls the build process.                    -->
<!-- The most important target is the "j2mepolish",           -->
<!-- which controls for what devices the application should   -->
<!-- be created and so on.                                    -->
<!--                                                          -->
<!-- Call the "emulator" target to skip the obfuscation       -->
<!-- and to build the example for only one handsets.          -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->
<project 
	name="authenticate-facebook" 
	default="j2mepolish">
	
	<!-- import user specific properties                          -->
	<property file="${user.name}.properties" />
	
	<!-- The polish.home property needs to point to the directory -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" location="%{INSTALL_PATH}" />
	
	<!-- import global properties                                 -->
	<property file="${polish.home}/global.properties" />

		
	<!-- the device for the test mode - you can define it on the command-line
	     using the -D switch, e.g. ant -Ddevice=Generic/midp2 emulator -->
	<property name="device" value="Generic/AnyPhone"/>
	<property name="devices" value="${device},Generic/AnyMsaPhone,Nokia/Series40E3,Nokia/Series60E3,Sony-Ericsson/JavaPlatform7,Sony-Ericsson/JavaPlatform8"/>
	
	

	<!-- Definition of the J2ME Polish task:                      -->
	<taskdef name="j2mepolish" 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/lib/enough-j2mepolish-build.jar"
	/>
	
		
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default-target -->
				
	<target name="init">
	  	<property name="test" value="false" />
	  	<property name="customization" value="" /><!-- use empty value in case none has been set before -->
		<property name="dir.work" value="build/real/${customization}" />
		<property name="dir.dist" value="dist/${customization}" />
		<property name="deploy-url" value="" />
	</target>
	 
	<!-- In this target the J2ME Polish task is used.             -->
	<!-- It has 4 sections:                                       -->
	<!--    1. The info-section defines some general information  -->
	<!--    2. The deviceRequirements-section chooses the devices -->
	<!--       for which the application is build.                -->
	<!--    3. The build-section controls the actual build        -->
	<!--       process.                                           -->	
	<!--    4. The emulator-section calls the emulator            -->
	<target name="j2mepolish" 
			depends="init"
			description="This is the controller for the J2ME build process." 
			>
		<j2mepolish>
		    <!-- general settings, these settings basically form the JAD-attributes. -->
		    <!-- Have a look at the <jad>-section for setting specialised attributes.
		         You can also define localized attributes in the resources/messages.txt files -->
			<info 
				copyright="Copyright 2012 Enough Software. All rights reserved." 
				description="Demonstrates a Facebook login." 
				infoUrl="http://www.enough.de" 
				jarName="${polish.vendor}-${polish.name}-${polish.locale}-authenticate-facebook.jar" 
				jarUrl="${deploy-url}${polish.jarName}" 
				name="Facebook Login" 
				vendorName="Enough Software" 
				version="1.0.4"
		    />
			<!-- selection of supported devices -->
			<deviceRequirements if="test">
				<requirement name="Identifier" value="${device}" />
			</deviceRequirements>
			<deviceRequirements unless="test">
				<requirement name="Identifier" value="${devices}" />
				<!-- on could use other devices for real builds, e.g. :
				<requirement name="Term" value="polish.api.nokia-ui and polish.midp2" />
				or:
				<or>
					<and>
						<requirement name="JavaPackage" value="nokia-ui" />
						<requirement name="BitsPerPixel" value="16+" />
					</and>
				</or>
				 -->
			</deviceRequirements>
		    <!-- build settings -->
			<build
				symbols="ExampleSymbol, AnotherExample"
				usePolishGui="true"
				workDir="${dir.work}"
				destDir="${dir.dist}"
			>
				<!-- midlets definition -->
				<!-- CHANGE THIS!       -->
				<midlet class="de.enough.polish.app.App" name="BlankApp" />
				<!-- project-wide variables - used for preprocessing.  -->
				<!-- You can set localized variables in the resources/messages.txt files as well.  -->
				<variables includeAntProperties="true" >
					<variable file="configuration/configuration.properties" />
					<!-- allow customized configuration settings: -->
					<variable file="configuration/${customization}/configuration.properties" />
					<variable
						name="polish.FullScreen"
						value="menu" 
						unless="polish.blackberry || polish.android" 
					/>
					<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
					<variable name="polish.ScreenInfo.enable" value="true" />
					<variable name="polish.useScrollBar" value="true" />
					<variable name="polish.TextField.useDirectInput" value="true" />
					<variable name="polish.ScreenInfo.enable" value="true" />
					<!-- Sample configuration options for J2ME Polish
					<variable name="polish.TextField.useDirectInput" value="true" />
					<variable name="polish.TextField.supportSymbolsEntry" value="true" />
					-->
				</variables>
				<!-- Configure the customization settings here: -->
				<resources
					dir="resources/base"
					defaultexcludes="yes"
					excludes="readme.txt"
				>
					<root dir="resources/base/i18n" />
					<root dir="resources/base/images" />
					<root dir="resources/base/sounds" />
					<root dir="resources/base/style" />
					<root dir="resources/${customization}" if="build.${customization}" />
					<root dir="resources/${customization}/i18n" if="build.${customization}" />
					<root dir="resources/${customization}/images" if="build.${customization}" />
					<root dir="resources/${customization}/sounds" if="build.${customization}" />
					<root dir="resources/${customization}/style" if="build.${customization}" />
					<!-- add the localization element for created localized
					     versions of your application: 
					-->
					<localization>
						<locale name="en_US" />
						<locale name="de_DE" encoding="utf-8" unless="test" />
					</localization>
				</resources>
				<!-- obfuscator settings: do not obfuscate when the test-property is true -->
				<obfuscator name="ProGuard" unless="test or polish.blackberry" >
					<!--
					You can set additional parameters here, e.g.:
					<parameter name="optimize" value="false" />
					-->
				</obfuscator>
				<!-- log settings: only use debug setting when the test-property is true -->
				<debug if="test or log" verbose="true" level="error">
					<filter pattern="de.enough.polish.example.*" level="debug" />
					<filter pattern="de.enough.polish.ui.*" level="warn" />
					<!-- example for writing log entries to the Recordstore Management System: 
					<handler name="rms" />
					-->
				</debug>
				<!-- user defined JAD attributes can also be used: -->
				<jad>
					<attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
				</jad>	
			</build>
			
			<!-- execution of emulator(s) -->
			<emulator
				wait="true"
				securityDomain="trusted"
				enableProfiler="true"
				enableMemoryMonitor="true"
				enableNetworkMonitor="true"
				if="debug"
				>
				<!-- this is an example for connecting to a debugger - use the ${polish.debug.port} Ant property
				     for getting to know the port of the debugger. In this example the 
				     "connect-debugger" target is also required.
				-->
				<!--
				<debugger name="antcall" target="connect-debugger" port="6001" />
				-->
			</emulator>
                        
			<emulator
				wait="true"
				trace="none"
				securityDomain="trusted"
				enableProfiler="false"
				enableMemoryMonitor="false"
				enableNetworkMonitor="false"
				if="test and not debug"
				>
			</emulator>

		
		</j2mepolish>
	</target>
	
	<target name="setdeploy" 
		description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
		>
		<property name="deploy-url" value="http://www.company.com/download/" />
	</target>
	
	<target name="enableDebug" 
		>
		<property name="debug" value="true" />
	</target>
	
		
	<target name="enableEmulator" 
		>
		<property name="test" value="true" />
	  	<property name="customization" value="" /><!-- use empty value in case none has been set before -->
		<property name="dir.work" value="build/test/${customization}" />
	</target>

	<target 
		name="emulator"
		depends="enableEmulator,j2mepolish"
		description="invokes the emulator"
	>
	</target>

	<target name="clean" 
	  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
		<delete dir="build" />
		<delete dir="dist" includes="**/*" />
	</target>

	<target  
		name="cleanbuild"
		description="allows a clean build. You should call [ant cleanbuild] whenever you made changes to devices.xml, vendors.xml or groups.xml"
		depends="clean, j2mepolish"
	/>
	
    <target name="debug" description="debugs the project" depends="enableDebug, enableEmulator, j2mepolish" />
	
	<target name="enableCustomization1">
		<property name="customization" value="customization1" />
		<property name="build.customization1" value="true" />
	</target>
		
	<target name="buildCustomization1"
			description="customizes this project with the settings found in resources/customization1"
			depends="enableCustomization1, j2mepolish"
	/>
	
	<target name="enableCustomization2">
		<property name="customization" value="customization2" />
		<property name="build.customization2" value="true" />
	</target>
		
	<target name="buildCustomization2"
			description="customizes this project with the settings found in resources/customization2"
			depends="enableCustomization2, j2mepolish"
	/>
	
	<target 
		name="buildAllCustomizations"
		description="Builds your application in all customizations." 
		>
		<subant target="buildCustomization1" buildpath="." genericantfile="build.xml" inheritall="false" ></subant>
		<subant target="buildCustomization2" buildpath="." genericantfile="build.xml" inheritall="false" ></subant>
	</target>

	

</project>
<!-- This file controls the build process.                    -->
<!-- The most important target is the "j2mepolish",           -->
<!-- which controls for what devices the application should   -->
<!-- be created and so on.                                    -->
<!--                                                          -->
<!-- Call the "emulator" target to skip the obfuscation       -->
<!-- and to build the example for only one handsets.          -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->
<project 
	name="blank" 
	default="j2mepolish">
	
	<!-- import user specific properties                          -->
	<property file="${user.name}.properties" />
	
	<!-- The polish.home property needs to point to the directory -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" location="%{INSTALL_PATH}" />
	
	<!-- import global properties                                 -->
	<property file="${polish.home}/global.properties" />

		
	<!-- the device for the test mode - you can define it on the command-line
	     using the -D switch, e.g. ant -Ddevice=Generic/midp2 emulator -->
	<property name="device" value="Generic/AnyPhone"/>
	<property name="devices" value="${device},Generic/AnyMsaPhone,Nokia/Series40E3,Nokia/Series60E3,Sony-Ericsson/JavaPlatform7,Sony-Ericsson/JavaPlatform8"/>
	
	

	<!-- Definition of the J2ME Polish task:                      -->
	<taskdef name="j2mepolish" 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/lib/enough-j2mepolish-build.jar"
	/>
	
		
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default-target -->
				
	<target name="init">
	  	<property name="test" value="false" />
	  	<property name="customization" value="" /><!-- use empty value in case none has been set before -->
		<property name="dir.work" value="build/real/${customization}" />
		<property name="dir.dist" value="dist/${customization}" />
		<property name="deploy-url" value="" />
	</target>
	 
	<!-- In this target the J2ME Polish task is used.             -->
	<!-- It has 4 sections:                                       -->
	<!--    1. The info-section defines some general information  -->
	<!--    2. The deviceRequirements-section chooses the devices -->
	<!--       for which the application is build.                -->
	<!--    3. The build-section controls the actual build        -->
	<!--       process.                                           -->	
	<!--    4. The emulator-section calls the emulator            -->
	<target name="j2mepolish" 
			depends="init"
			description="This is the controller for the J2ME build process." 
			>
		<j2mepolish>
		    <!-- general settings, these settings basically form the JAD-attributes. -->
		    <!-- Have a look at the <jad>-section for setting specialised attributes.
		         You can also define localized attributes in the resources/messages.txt files -->
			<info
				name="Blank"
				version="1.0.0"
				description="Please describe me"
				vendorName="Enough Software"
				infoUrl="http://www.j2mepolish.org"
				jarName="${polish.vendor}-${polish.name}-${polish.locale}-blank.jar" 
				jarUrl="${deploy-url}${polish.jarName}"
				copyright="Copyright 2011 Your Company. All rights reserved."
			/>
			<!-- selection of supported devices -->
			<deviceRequirements if="test">
				<requirement name="Identifier" value="${device}" />
			</deviceRequirements>
			<deviceRequirements unless="test">
				<requirement name="Identifier" value="${devices}" />
				<!-- on could use other devices for real builds, e.g. :
				<requirement name="Term" value="polish.api.nokia-ui and polish.midp2" />
				or:
				<or>
					<and>
						<requirement name="JavaPackage" value="nokia-ui" />
						<requirement name="BitsPerPixel" value="16+" />
					</and>
				</or>
				 -->
			</deviceRequirements>
		    <!-- build settings -->
			<build
				symbols="ExampleSymbol, AnotherExample"
				usePolishGui="true"
				workDir="${dir.work}"
				destDir="${dir.dist}"
			>
				<!-- midlets definition -->
				<!-- CHANGE THIS!       -->
				<midlet class="de.enough.polish.app.App" name="BlankApp" />
				<!-- project-wide variables - used for preprocessing.  -->
				<!-- You can set localized variables in the resources/messages.txt files as well.  -->
				<variables includeAntProperties="true" >
					<variable file="configuration/configuration.properties" />
					<!-- allow customized configuration settings: -->
					<variable file="configuration/${customization}/configuration.properties" />
					<variable
						name="polish.FullScreen"
						value="menu" 
						unless="polish.blackberry || polish.android" 
					/>
					<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
					<variable name="polish.ScreenInfo.enable" value="true" />
					<variable name="polish.useScrollBar" value="true" />
					<!-- Sample configuration options for J2ME Polish
					<variable name="polish.TextField.useDirectInput" value="true" />
					<variable name="polish.TextField.supportSymbolsEntry" value="true" />
					-->
				</variables>
				<!-- Configure the customization settings here: -->
				<resources
					dir="resources/base"
					defaultexcludes="yes"
					excludes="readme.txt"
				>
					<root dir="resources/base/i18n" />
					<root dir="resources/base/images" />
					<root dir="resources/base/sounds" />
					<root dir="resources/base/style" />
					<root dir="resources/${customization}" if="build.${customization}" />
					<root dir="resources/${customization}/i18n" if="build.${customization}" />
					<root dir="resources/${customization}/images" if="build.${customization}" />
					<root dir="resources/${customization}/sounds" if="build.${customization}" />
					<root dir="resources/${customization}/style" if="build.${customization}" />
					<!-- add the localization element for created localized
					     versions of your application: 
					-->
					<localization>
						<locale name="en_US" />
						<locale name="de_DE" encoding="utf-8" unless="test" />
					</localization>
				</resources>
				<!-- obfuscator settings: do not obfuscate when the test-property is true -->
				<obfuscator name="ProGuard" unless="test or polish.blackberry" >
					<!--
					You can set additional parameters here, e.g.:
					<parameter name="optimize" value="false" />
					-->
				</obfuscator>
				<!-- log settings: only use debug setting when the test-property is true -->
				<debug if="test or log" verbose="true" level="error">
					<filter pattern="de.enough.polish.example.*" level="debug" />
					<filter pattern="de.enough.polish.ui.*" level="warn" />
					<!-- example for writing log entries to the Recordstore Management System: 
					<handler name="rms" />
					-->
				</debug>
				<!-- user defined JAD attributes can also be used: -->
				<jad>
					<attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
				</jad>	
			</build>
			
			<!-- execution of emulator(s) -->
			<emulator
				wait="true"
				securityDomain="trusted"
				enableProfiler="true"
				enableMemoryMonitor="true"
				enableNetworkMonitor="true"
				if="debug"
				>
				<!-- this is an example for connecting to a debugger - use the ${polish.debug.port} Ant property
				     for getting to know the port of the debugger. In this example the 
				     "connect-debugger" target is also required.
				-->
				<!--
				<debugger name="antcall" target="connect-debugger" port="6001" />
				-->
			</emulator>
                        
			<emulator
				wait="true"
				trace="none"
				securityDomain="trusted"
				enableProfiler="false"
				enableMemoryMonitor="false"
				enableNetworkMonitor="false"
				if="test and not debug"
				>
			</emulator>

		
		</j2mepolish>
	</target>
	
	<target name="setdeploy" 
		description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
		>
		<property name="deploy-url" value="http://www.company.com/download/" />
	</target>
	
	<target name="enableDebug" 
		>
		<property name="debug" value="true" />
	</target>
	
		
	<target name="enableEmulator" 
		>
		<property name="test" value="true" />
	  	<property name="customization" value="" /><!-- use empty value in case none has been set before -->
		<property name="dir.work" value="build/test/${customization}" />
	</target>

	<target 
		name="emulator"
		depends="enableEmulator,j2mepolish"
		description="invokes the emulator"
	>
	</target>

	<target name="clean" 
	  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
		<delete dir="build" />
		<delete dir="dist" includes="**/*" />
	</target>

	<target  
		name="cleanbuild"
		description="allows a clean build. You should call [ant cleanbuild] whenever you made changes to devices.xml, vendors.xml or groups.xml"
		depends="clean, j2mepolish"
	/>
	
    <target name="debug" description="debugs the project" depends="enableDebug, enableEmulator, j2mepolish" />
	
	<target name="enableCustomization1">
		<property name="customization" value="customization1" />
		<property name="build.customization1" value="true" />
	</target>
		
	<target name="buildCustomization1"
			description="customizes this project with the settings found in resources/customization1"
			depends="enableCustomization1, j2mepolish"
	/>
	
	<target name="enableCustomization2">
		<property name="customization" value="customization2" />
		<property name="build.customization2" value="true" />
	</target>
		
	<target name="buildCustomization2"
			description="customizes this project with the settings found in resources/customization2"
			depends="enableCustomization2, j2mepolish"
	/>
	
	<target 
		name="buildAllCustomizations"
		description="Builds your application in all customizations." 
		>
		<subant target="buildCustomization1" buildpath="." genericantfile="build.xml" inheritall="false" ></subant>
		<subant target="buildCustomization2" buildpath="." genericantfile="build.xml" inheritall="false" ></subant>
	</target>

	

</project>
<!-- This file controls the build process.                    -->
<!-- The most important target is the "j2mepolish",           -->
<!-- which controls for what devices the application should   -->
<!-- be created and so on.                                    -->
<!--                                                          -->
<!-- Call the "emulator" target to skip the obfuscation       -->
<!-- and to build the example for only one handsets.          -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->
<project 
	name="enough-polish-browser" 
	default="j2mepolish">
	
	<!-- import user specific properties                          -->
	<property file="${user.name}.properties" />
	
	<!-- The polish.home property needs to point to the directory -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" location="%{INSTALL_PATH}" />
	
	<!-- import global properties                                 -->
	<property file="${polish.home}/global.properties" />

		
	<!-- the device for the test mode - you can define it on the command-line
	     using the -D switch, e.g. ant -Ddevice=Generic/midp2 emulator -->
	<property name="device" value="Generic/AnyPhone"/>
	<property name="devices" value="${device},Generic/AnyMsaPhone,Nokia/Series40E3,Nokia/Series60E3,Sony-Ericsson/JavaPlatform7,Sony-Ericsson/JavaPlatform8"/>
	
	

	<!-- Definition of the J2ME Polish task:                      -->
	<taskdef name="j2mepolish" 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/lib/enough-j2mepolish-build.jar"
	/>
	
		
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default-target -->
	
	<target name="setdeploy" 
		description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
		>
		<property name="deploy-url" value="http://www.company.com/download/" />
	</target>
	
	<target name="enableDebug" 
		description="Call this target first to skip the obfuscation step, call the emulator and start the debugger, e.g. ant enableDebug j2mepolish"
		>
		<property name="debug" value="true" />
	</target>
	
		
	<target name="test" 
		description="Call this target first to skip the obfuscation step and call the emulator, e.g. ant test j2mepolish"
		>
		<property name="test" value="true" />
		<property name="dir.work" value="build/test" />
	</target>
			
	<target name="init">
	  	<property name="test" value="false" />
		<property name="dir.work" value="build/real" />
		<property name="deploy-url" value="" />
	</target>
	 
	<!-- In this target the J2ME Polish task is used.             -->
	<!-- It has 3 sections:                                       -->
	<!--    1. The info-section defines some general information  -->
	<!--    2. The deviceRequirements-section chooses the devices -->
	<!--       for which the application is optimized.            -->
	<!--    3. The build-section controls the actual build        -->
	<!--       process.                                           -->	
	<target name="j2mepolish" 
			depends="init"
			description="This is the controller for the J2ME build process." 
			>
		<j2mepolish>
		    <!-- general settings, these settings basically form the JAD-attributes. -->
		    <!-- Have a look at the <jad>-section for setting specialised attributes.
		         You can also define localized attributes in the resources/messages.txt files -->
			<info
				name="Browser"
				version="1.0.0"
				description="A demonstration of the Browser."
				vendorName="Enough Software"
				infoUrl="http://www.j2mepolish.org"
				jarName="${polish.vendor}-${polish.name}-${polish.locale}-browser.jar" 
				jarUrl="${deploy-url}${polish.jarName}"
				copyright="Copyright 2011 Enough Software. All rights reserved."
			/>
			<!-- selection of supported devices -->
			<deviceRequirements if="test">
				<requirement name="Identifier" value="${device}" />
			</deviceRequirements>
			<deviceRequirements unless="test">
				<requirement name="Identifier" value="${devices}" />
				<!-- on could use other devices for real builds, e.g. :
				<requirement name="Term" value="polish.api.nokia-ui and polish.midp2" />
				or:
				<or>
					<and>
						<requirement name="JavaPackage" value="nokia-ui" />
						<requirement name="BitsPerPixel" value="16+" />
					</and>
				</or>
				 -->
			</deviceRequirements>
		    <!-- build settings -->
			<build
				symbols="ExampleSymbol, AnotherExample"
				usePolishGui="true"
				workDir="${dir.work}"
			>
				<!-- midlets definition -->
				<midlet class="de.enough.polish.sample.browser.BrowserMidlet" name="Browser" />
				<!-- project-wide variables - used for preprocessing.  -->
				<!-- You can set localized variables in the resources/messages.txt files as well.  -->
				<variables includeAntProperties="true" >
					<variable
						name="polish.FullScreen"
						value="menu" 
						unless="polish.blackberry || polish.android" 
					/>
					<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
					<variable name="polish.useScrollBar" value="true" />
					<variable name="polish.Browser.UserAgent" value="J2ME-Polish 2.0" />
					<variable name="polish.Browser.MaxRedirects" value="5" />
					<variable name="polish.Browser.Gzip" value="false" />
					<variable name="polish.Browser.PaintDownloadIndicator" value="true" />
					<variable name="polish.useScrollBar" value="true" />
				</variables>
				<!-- Configure the customization settings here: -->
				<resources
					dir="resources"
					defaultexcludes="yes"
					excludes="readme.txt"
				>
					<!-- add the localization element for created localized
					     versions of your application: 
					<localization>
						<locale name="en_US" />
						<locale name="de_DE" encoding="utf-8" unless="test" />
					</localization>
					-->
				</resources>
				<!-- obfuscator settings: do not obfuscate when the test-property is true -->
				<obfuscator name="ProGuard" unless="test or polish.blackberry" />
				<!-- log settings: only use debug setting when the test-property is true -->
				<debug if="test or log" verbose="true" level="error">
					<filter pattern="de.enough.polish.example.*" level="debug" />
					<filter pattern="de.enough.polish.ui.*" level="warn" />
					<!-- example for writing log entries to the Recordstore Management System: 
					<handler name="rms" />
					-->
				</debug>
				<!-- user defined JAD attributes can also be used: -->
				<jad>
					<attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
				</jad>	
			</build>
			
			<!-- execution of emulator(s) -->
			<emulator
				wait="true"
				securityDomain="trusted"
				enableProfiler="true"
				enableMemoryMonitor="true"
				enableNetworkMonitor="true"
				if="debug"
				>
				<!-- this is an example for connecting to a debugger - use the ${polish.debug.port} Ant property
				     for getting to know the port of the debugger. In this example the 
				     "connect-debugger" target is also required.
				-->
				<!--
				<debugger name="antcall" target="connect-debugger" port="6001" />
				-->
			</emulator>
                        
			<emulator
				wait="true"
				trace="none"
				securityDomain="trusted"
				enableProfiler="false"
				enableMemoryMonitor="false"
				enableNetworkMonitor="false"
				if="test and not debug"
				>
			</emulator>

		
		</j2mepolish>
	</target>
	
	<target 
		name="emulator"
		depends="test,j2mepolish"
		description="invokes the emulator"
	>
	</target>

	<target name="clean" 
	  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
		<delete dir="build" />
		<mkdir dir="dist" />
		<delete dir="dist" includes="**/*" />
	</target>

	<target  
		name="cleanbuild"
		description="allows a clean build. You should call [ant cleanbuild] whenever you made changes to devices.xml, vendors.xml or groups.xml"
		depends="clean, j2mepolish"
	/>
	
    <target name="debug" description="debugs the project" depends="enableDebug, test, j2mepolish" />
	
	<target name="enableCustomization1">
		<property name="dir.work" value="build/customization1" />
		<property name="cfg.customization1" value="true" />
	</target>
		
	<target name="customization1"
			description="customizes this project with the settings found in resources/customization1"
			depends="enableCustomization1, j2mepolish"
	/>
	
	<target name="enableCustomization2">
		<property name="dir.work" value="build/customization2" />
		<property name="cfg.customization2" value="true" />
	</target>
		
	<target name="customization2"
			description="customizes this project with the settings found in resources/customization2"
			depends="enableCustomization2, j2mepolish"
	/>
	

</project>
<!-- This file controls the build process.                    -->
<!-- The most important target is the "j2mepolish",           -->
<!-- which controls for what devices the application should   -->
<!-- be created and so on.                                    -->
<!--                                                          -->
<!-- Call the "emulator" target to skip the obfuscation       -->
<!-- and to build the example for only one handsets.          -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->
<project 
	name="enough-polish-chartitem" 
	default="j2mepolish">
	
	<!-- import user specific properties                          -->
	<property file="${user.name}.properties" />
	
	<!-- The polish.home property needs to point to the directory -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" location="%{INSTALL_PATH}" />
	
	<!-- import global properties                                 -->
	<property file="${polish.home}/global.properties" />

		
	<!-- the device for the test mode - you can define it on the command-line
	     using the -D switch, e.g. ant -Ddevice=Generic/midp2 emulator -->
	<property name="device" value="Generic/AnyPhone"/>
	<property name="devices" value="${device},Generic/AnyMsaPhone,Nokia/Series40E3,Nokia/Series60E3,Sony-Ericsson/JavaPlatform7,Sony-Ericsson/JavaPlatform8"/>
	
	

	<!-- Definition of the J2ME Polish task:                      -->
	<taskdef name="j2mepolish" 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/lib/enough-j2mepolish-build.jar"
	/>
	
		
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default-target -->
	
	<target name="setdeploy" 
		description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
		>
		<property name="deploy-url" value="http://www.company.com/download/" />
	</target>
	
	<target name="enableDebug" 
		description="Call this target first to skip the obfuscation step, call the emulator and start the debugger, e.g. ant enableDebug j2mepolish"
		>
		<property name="debug" value="true" />
	</target>
	
		
	<target name="test" 
		description="Call this target first to skip the obfuscation step and call the emulator, e.g. ant test j2mepolish"
		>
		<property name="test" value="true" />
		<property name="dir.work" value="build/test" />
	</target>
			
	<target name="init">
	  	<property name="test" value="false" />
		<property name="dir.work" value="build/real" />
		<property name="deploy-url" value="" />
	</target>
	 
	<!-- In this target the J2ME Polish task is used.             -->
	<!-- It has 3 sections:                                       -->
	<!--    1. The info-section defines some general information  -->
	<!--    2. The deviceRequirements-section chooses the devices -->
	<!--       for which the application is optimized.            -->
	<!--    3. The build-section controls the actual build        -->
	<!--       process.                                           -->	
	<target name="j2mepolish" 
			depends="init"
			description="This is the controller for the J2ME build process." 
			>
		<j2mepolish>
		    <!-- general settings, these settings basically form the JAD-attributes. -->
		    <!-- Have a look at the <jad>-section for setting specialised attributes.
		         You can also define localized attributes in the resources/messages.txt files -->
			<info
				name="Chart"
				version="1.0.0"
				description="A demonstration of the J2ME Polish ChartItem."
				vendorName="Enough Software"
				infoUrl="http://www.j2mepolish.org"
				jarName="${polish.vendor}-${polish.name}-${polish.locale}-chartitem.jar" 
				jarUrl="${deploy-url}${polish.jarName}"
				copyright="Copyright 2011 Enough Software. All rights reserved."
			/>
			<!-- selection of supported devices -->
			<deviceRequirements if="test">
				<requirement name="Identifier" value="${device}" />
			</deviceRequirements>
			<deviceRequirements unless="test">
				<requirement name="Identifier" value="${devices}" />
				<!-- on could use other devices for real builds, e.g. :
				<requirement name="Term" value="polish.api.nokia-ui and polish.midp2" />
				or:
				<or>
					<and>
						<requirement name="JavaPackage" value="nokia-ui" />
						<requirement name="BitsPerPixel" value="16+" />
					</and>
				</or>
				 -->
			</deviceRequirements>
		    <!-- build settings -->
			<build
				symbols="ExampleSymbol, AnotherExample"
				usePolishGui="true"
				workDir="${dir.work}"
			>
				<!-- midlets definition -->
				<midlet class="de.enough.polish.sample.chart.ChartMidlet" name="Chart" />
				<!-- project-wide variables - used for preprocessing.  -->
				<!-- You can set localized variables in the resources/messages.txt files as well.  -->
				<variables includeAntProperties="true" >
					<!-- Sample configuration options for J2ME Polish
					<variable name="polish.TextField.useDirectInput" value="true" />
					<variable name="polish.TextField.supportSymbolsEntry" value="true" />
					-->
					<variable
						name="polish.FullScreen"
						value="menu" 
						unless="polish.blackberry || polish.android" 
					/>
					<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
					<variable name="polish.useScrollBar" value="true" />
				</variables>
				<!-- Configure the customization settings here: -->
				<resources
					dir="resources"
					defaultexcludes="yes"
					excludes="readme.txt"
				>
					<!-- add the localization element for created localized
					     versions of your application: 
					<localization>
						<locale name="en_US" />
						<locale name="de_DE" encoding="utf-8" unless="test" />
					</localization>
					-->
				</resources>
				<!-- obfuscator settings: do not obfuscate when the test-property is true -->
				<obfuscator name="ProGuard" unless="test or polish.blackberry" >
					<!--
					You can set additional parameters here, e.g.:
					<parameter name="optimize" value="false" />
					-->
				</obfuscator>
				<!-- log settings: only use debug setting when the test-property is true -->
				<debug if="test or log" verbose="true" level="error">
					<filter package="de.enough.polish.sample.chartitem" level="debug" />
					<filter package="de.enough.polish.ui" level="warn" />
					<!-- example for writing log entries to the Recordstore Management System: 
					<handler name="rms" />
					-->
				</debug>
				<!-- user defined JAD attributes can also be used: -->
				<jad>
					<!--
					<attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
					-->
				</jad>	
			</build>
			
			<!-- execution of emulator(s) -->
			<emulator
				wait="true"
				securityDomain="trusted"
				enableProfiler="true"
				enableMemoryMonitor="true"
				enableNetworkMonitor="true"
				if="debug"
				>
				<!-- this is an example for connecting to a debugger - use the ${polish.debug.port} Ant property
				     for getting to know the port of the debugger. In this example the 
				     "connect-debugger" target is also required.
				-->
				<!--
				<debugger name="antcall" target="connect-debugger" port="6001" />
				-->
			</emulator>
                        
			<emulator
				wait="true"
				trace="none"
				securityDomain="trusted"
				enableProfiler="false"
				enableMemoryMonitor="false"
				enableNetworkMonitor="false"
				if="test and not debug"
				>
			</emulator>

		
		</j2mepolish>
	</target>
	
	<target 
		name="emulator"
		depends="test,j2mepolish"
		description="invokes the emulator"
	>
	</target>

	<target name="clean" 
	  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
		<delete dir="build" />
		<mkdir dir="dist" />
		<delete dir="dist" includes="**/*" />
	</target>

	<target  
		name="cleanbuild"
		description="allows a clean build. You should call [ant cleanbuild] whenever you made changes to devices.xml, vendors.xml or groups.xml"
		depends="clean, j2mepolish"
	/>
	
    <target name="debug" description="debugs the project" depends="enableDebug, test, j2mepolish" />
	
</project>
<!-- This file controls the build process.                    -->
<!-- The most important target is the j2mepolish-target,      -->
<!-- which controls for what devices the application should   -->
<!-- be created and so on.                                    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->
<project 
	name="enough-polish-chartitem" 
	default="j2mepolish">
	
	<!-- import user specific properties                          -->
	<property file="${user.name}.properties" />
	
	<!-- The polish.home property needs to point to the directory -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" location="%{INSTALL_PATH}" />
	
	<!-- import global properties                                 -->
	<property file="${polish.home}/global.properties" />

		
	<!-- the device for the test mode - you can define it on the command-line
	     using the -D switch, e.g. ant -Ddevice=Generic/midp2 emulator -->
	<property name="device" value="Generic/AnyPhone"/>
	<property name="devices" value="${device},Generic/AnyMsaPhone,Nokia/Series40E3,Nokia/Series60E3,Sony-Ericsson/JavaPlatform7,Sony-Ericsson/JavaPlatform8"/>
	
	

	<!-- Definition of the J2ME Polish task:                      -->
	<taskdef name="j2mepolish" 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/lib/enough-j2mepolish-build.jar"
	/>
	
		
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default-target -->
	
	<target name="setdeploy" 
		description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
		>
		<property name="deploy-url" value="http://www.company.com/download/" />
	</target>
	
	<target name="enableDebug" 
		description="Call this target first to skip the obfuscation step, call the emulator and start the debugger, e.g. ant enableDebug j2mepolish"
		>
		<property name="debug" value="true" />
	</target>
	
		
	<target name="test" 
		description="Call this target first to skip the obfuscation step and call the emulator, e.g. ant test j2mepolish"
		>
		<property name="test" value="true" />
		<property name="dir.work" value="build/test" />
	</target>
			
	<target name="init">
	  	<property name="test" value="false" />
		<property name="dir.work" value="build/real" />
		<property name="deploy-url" value="" />
	</target>
	 
	<!-- In this target the J2ME Polish task is used.             -->
	<!-- It has 3 sections:                                       -->
	<!--    1. The info-section defines some general information  -->
	<!--    2. The deviceRequirements-section chooses the devices -->
	<!--       for which the application is optimized.            -->
	<!--    3. The build-section controls the actual build        -->
	<!--       process.                                           -->	
	<target name="j2mepolish" 
			depends="init"
			description="This is the controller for the J2ME build process." 
			>
		<j2mepolish>
		    <!-- general settings, these settings basically form the JAD-attributes. -->
		    <!-- Have a look at the <jad>-section for setting specialised attributes.
		         You can also define localized attributes in the resources/messages.txt files -->
			<info
				name="DateField"
				version="1.0.0"
				description="A demonstration of the J2ME Polish DateField."
				vendorName="Enough Software"
				infoUrl="http://www.j2mepolish.org"
				jarName="${polish.vendor}-${polish.name}-${polish.locale}-datefield.jar" 
				jarUrl="${deploy-url}${polish.jarName}"
				copyright="Copyright 2011 Enough Software. All rights reserved."
			/>
			<!-- selection of supported devices -->
			<deviceRequirements if="test">
				<requirement name="Identifier" value="${device}" />
			</deviceRequirements>
			<deviceRequirements unless="test">
				<requirement name="Identifier" value="${devices}" />
				<!-- on could use other devices for real builds, e.g. :
				<requirement name="Term" value="polish.api.nokia-ui and polish.midp2" />
				or:
				<or>
					<and>
						<requirement name="JavaPackage" value="nokia-ui" />
						<requirement name="BitsPerPixel" value="16+" />
					</and>
				</or>
				 -->
			</deviceRequirements>
		    <!-- build settings -->
			<build
				symbols="ExampleSymbol, AnotherExample"
				usePolishGui="true"
				workDir="${dir.work}"
			>
				<!-- midlets definition -->
				<midlet class="de.enough.polish.sample.DateFieldMidlet" name="DateField"/>
				
				<!-- project-wide variables - used for preprocessing.  -->
				<!-- You can set localized variables in the resources/messages.txt files as well.  -->
				<variables includeAntProperties="true" >
					<!-- Sample configuration options for J2ME Polish
					<variable name="polish.TextField.useDirectInput" value="true" />
					<variable name="polish.TextField.supportSymbolsEntry" value="true" />
					-->
					<variable name="polish.DateField.useDirectInput" value="true" />
					<variable name="polish.DateField.useDirectInputForPointer" value="true" />
					<variable
						name="polish.FullScreen"
						value="menu" 
						unless="polish.blackberry || polish.android" 
					/>
					<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
					<variable name="polish.useScrollBar" value="true" />
				</variables>
				<!-- Configure the customization settings here: -->
				<resources
					dir="resources"
					defaultexcludes="yes"
					excludes="readme.txt"
				>
					<root dir="resources/images" />
					<!-- add the localization element for created localized
					     versions of your application: 
					<localization>
						<locale name="en_US" />
						<locale name="de_DE" encoding="utf-8" unless="test" />
					</localization>
					-->
				</resources>
				<!-- obfuscator settings: do not obfuscate when the test-property is true -->
				<obfuscator name="ProGuard" unless="test or polish.blackberry" >
					<!--
					You can set additional parameters here, e.g.:
					<parameter name="optimize" value="false" />
					-->
				</obfuscator>
				<!-- log settings: only use debug setting when the test-property is true -->
				<debug if="test or log" verbose="true" level="error">
					<filter package="de.enough.polish.sample.chartitem" level="debug" />
					<filter package="de.enough.polish.ui" level="warn" />
					<!-- example for writing log entries to the Recordstore Management System: 
					<handler name="rms" />
					-->
				</debug>
				<!-- user defined JAD attributes can also be used: -->
				<jad>
					<!--
					<attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
					-->
				</jad>	
			</build>
			
			<!-- execution of emulator(s) -->
			<emulator
				wait="true"
				securityDomain="trusted"
				enableProfiler="true"
				enableMemoryMonitor="true"
				enableNetworkMonitor="true"
				if="debug"
				>
				<!-- this is an example for connecting to a debugger - use the ${polish.debug.port} Ant property
				     for getting to know the port of the debugger. In this example the 
				     "connect-debugger" target is also required.
				-->
				<!--
				<debugger name="antcall" target="connect-debugger" port="6001" />
				-->
			</emulator>
                        
			<emulator
				wait="true"
				trace="none"
				securityDomain="trusted"
				enableProfiler="false"
				enableMemoryMonitor="false"
				enableNetworkMonitor="false"
				if="test and not debug"
				>
			</emulator>

		
		</j2mepolish>
	</target>
	
	<target 
		name="emulator"
		depends="test,j2mepolish"
		description="invokes the emulator"
	>
	</target>

	<target name="clean" 
	  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
		<delete dir="build" />
		<mkdir dir="dist" />
		<delete dir="dist" includes="**/*" />
	</target>

	<target  
		name="cleanbuild"
		description="allows a clean build. You should call [ant cleanbuild] whenever you made changes to devices.xml, vendors.xml or groups.xml"
		depends="clean, j2mepolish"
	/>
	
    <target name="debug" description="debugs the project" depends="enableDebug, test, j2mepolish" />
	
</project>
<!-- important: you might need to set the doja.home property! -->

<!-- This file controls the build process.                    -->
<!-- The most important target is the "j2mepolish",           -->
<!-- which controls for what devices the application should   -->
<!-- be created and so on.                                    -->
<!--                                                          -->
<!-- Call the "emulator" target to skip the obfuscation       -->
<!-- and to build the example for only one handsets.          -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->
<project 
	name="enough-j2mepolish-doja" 
	default="j2mepolish">
	
	<!-- import user specific properties                          -->
	<property file="${user.name}.properties" />
	
	<!-- The polish.home property needs to point to the directory -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" location="%{INSTALL_PATH}" />
	
	<!-- import global properties                                 -->
	<property file="${polish.home}/global.properties" />
		
	<!-- the device for the test mode - you can define it on the command-line
	     using the -D switch, e.g. ant -Ddevice=Generic/midp2 emulator -->
	<property name="device" value="DoJa/os25"/>
	<property name="devices" value="DoJa/os25"/>
	
	<!-- Definition of the J2ME Polish task:                      -->
	<taskdef name="j2mepolish" 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/lib/enough-j2mepolish-build.jar"
	/>
	
		
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default-target -->
	
	<target name="setdeploy" 
		description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
		>
		<property name="deploy-url" value="http://www.company.com/download/" />
	</target>
	
	<target name="enableDebug" 
		description="Call this target first to skip the obfuscation step, call the emulator and start the debugger, e.g. ant enableDebug j2mepolish"
		>
		<property name="debug" value="true" />
	</target>
	
		
	<target name="test" 
		description="Call this target first to skip the obfuscation step and call the emulator, e.g. ant test j2mepolish"
		>
		<property name="test" value="true" />
		<property name="dir.work" value="build/test" />
	</target>
			
	<target name="init">
	  	<property name="test" value="false" />
		<property name="dir.work" value="build/real" />
		<property name="deploy-url" value="" />
	</target>
	 
	<!-- In this target the J2ME Polish task is used.             -->
	<!-- It has 3 sections:                                       -->
	<!--    1. The info-section defines some general information  -->
	<!--    2. The deviceRequirements-section chooses the devices -->
	<!--       for which the application is optimized.            -->
	<!--    3. The build-section controls the actual build        -->
	<!--       process.                                           -->	
	<target name="j2mepolish" 
			depends="init"
			description="This is the controller for the J2ME build process." 
			>
		<j2mepolish>
		    <!-- general settings, these settings basically form the JAD-attributes. -->
		    <!-- Have a look at the <jad>-section for setting specialised attributes.
		         You can also define localized attributes in the resources/messages.txt files -->
			<info
				name="Tetris"
				version="1.0.0"
				description="Sun's Tetris sample project"
				vendorName="Sun"
				jarName="${polish.vendor}-${polish.name}-${polish.locale}-tetris.jar" 
				jarUrl="${deploy-url}${polish.jarName}"
				copyright="Copyright 2005 Sun. All rights reserved."
			/>
			<!-- selection of supported devices -->
			<deviceRequirements if="test">
				<requirement name="Identifier" value="${device}" />
			</deviceRequirements>
			<deviceRequirements unless="test">
				<requirement name="Identifier" value="${devices}" />
			</deviceRequirements>
		    <!-- build settings -->
			<build
				symbols=""
				fullscreen="menu"
				usePolishGui="true"
				workDir="${dir.work}"
			>
				<!-- iApplication definition -->
				<iappli class="tetris.Tetris" />
				<!-- project-wide variables - used for preprocessing.  -->
				<!-- You can set localized variables in the resources/messages.txt files as well.  -->
				<variables includeAntProperties="true" >
					<!-- reserve a size of 5120 bytes =5Kbytes for the scratch pad: -->
					<variable name="doja.SPsize" value="5120" />
				</variables>
				<!-- Here you can set the dir attribute to "resources2" for an alternative design. -->
				<resources
					dir="resources"
					defaultexcludes="yes"
					excludes="readme.txt"
				>
					<localization locales="en_US" />
				</resources>
				<!-- obfuscator settings: do not obfuscate when the test-property is true -->
				<obfuscator name="ProGuard" unless="test" >
					<!--
					You can set additional parameters here, e.g.:
					<parameter name="optimize" value="false" />
					-->
				</obfuscator>
				<!-- debug settings: only include debug setting when the test-property is true -->
				<debug if="test or log" verbose="true" level="error">
					<filter pattern="de.enough.polish.example.*" level="debug" />
					<filter pattern="de.enough.polish.ui.*" level="warn" />
				</debug>
			</build>
			
			<!-- execution of emulator(s) -->
			<emulator
				wait="true"
				if="test"
			>
			</emulator>
		</j2mepolish>
	</target>
	
	<target 
		name="emulator"
		depends="test,j2mepolish"
		description="invokes the emulator"
	>
	</target>

	<target name="clean" 
	  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
		<delete dir="build" />
		<mkdir dir="dist" />
		<delete dir="dist" includes="**/*" />
	</target>

	<target  
		name="cleanbuild"
		description="allows a clean build. You should call [ant cleanbuild] whenever you made changes to devices.xml, vendors.xml or groups.xml"
		depends="clean, j2mepolish"
	/>
	
</project>
<!-- This file controls the build process.                    -->
<!-- The most important target is the "j2mepolish",           -->
<!-- which controls for what devices the application should   -->
<!-- be created and so on.                                    -->
<!--                                                          -->
<!-- Call the "emulator" target to skip the obfuscation       -->
<!-- and to build the example for only one handsets.          -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->
<project 
	name="enough-j2mepolish-email" 
	default="j2mepolish">
	
	<!-- import user specific properties                          -->
	<property file="${user.name}.properties" />
	
	<!-- The polish.home property needs to point to the directory -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" location="%{INSTALL_PATH}" />
	
	<!-- import global properties                                 -->
	<property file="${polish.home}/global.properties" />

		
	<!-- the device for the test mode - you can define it on the command-line
	     using the -D switch, e.g. ant -Ddevice=Generic/midp2 emulator -->
	<property name="device" value="Generic/AnyPhone"/>
	<property name="devices" value="${device},Generic/AnyMsaPhone,Nokia/Series40E3,Nokia/Series60E3,Sony-Ericsson/JavaPlatform7,Sony-Ericsson/JavaPlatform8"/>
	
	

	<!-- Definition of the J2ME Polish task:                      -->
	<taskdef name="j2mepolish" 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/lib/enough-j2mepolish-build.jar"
	/>
	
		
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default-target -->
	
	<target name="setdeploy" 
		description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
		>
		<property name="deploy-url" value="http://www.company.com/download/" />
	</target>
	
	<target name="enableDebug" 
		description="Call this target first to skip the obfuscation step, call the emulator and start the debugger, e.g. ant enableDebug j2mepolish"
		>
		<property name="debug" value="true" />
	</target>
	
		
	<target name="test" 
		description="Call this target first to skip the obfuscation step and call the emulator, e.g. ant test j2mepolish"
		>
		<property name="test" value="true" />
		<property name="dir.work" value="build/test" />
	</target>
			
	<target name="init">
	  	<property name="test" value="false" />
		<property name="dir.work" value="build/real" />
		<property name="deploy-url" value="" />
		<property name="resource.dir" value="resources" />
	</target>
	 
	<!-- In this target the J2ME Polish task is used.             -->
	<!-- It has 3 sections:                                       -->
	<!--    1. The info-section defines some general information  -->
	<!--    2. The deviceRequirements-section chooses the devices -->
	<!--       for which the application is optimized.            -->
	<!--    3. The build-section controls the actual build        -->
	<!--       process.                                           -->	
	<target name="j2mepolish" 
			depends="init"
			description="This is the controller for the J2ME build process." 
			>
		<j2mepolish>
		    <!-- general settings, these settings basically form the JAD-attributes. -->
		    <!-- Have a look at the <jad>-section for setting specialised attributes.
		         You can also define localized attributes in the resources/messages.txt files -->
			<info
				name="Email"
				version="1.0.0"
				description="A sample project that shows subcommands and an advanced TextField in action."
				vendorName="Enough Software"
				infoUrl="http://www.j2mepolish.org"
				jarName="${polish.vendor}-${polish.name}-${polish.locale}-email.jar" 
				jarUrl="${deploy-url}${polish.jarName}"
				copyright="Copyright 2011 Enough Software. All rights reserved."
				icon="icon.png"
			/>
			<!-- selection of supported devices -->
			<!-- In the test mode the application is build only for the  -->
			<!-- Generic/midp1 phone, but when the test-property is set to false, -->
			<!-- the second deviceRequirements will be used instead. -->
			<deviceRequirements if="test">
				<requirement name="Identifier" value="${device}" />
			</deviceRequirements>
			<deviceRequirements unless="test">
				<requirement name="Identifier" value="${devices}" />
				<!-- on could use other devices for real builds, e.g. :
				<or>
					<and>
						<requirement name="JavaPackage" value="nokia-ui" />
						<requirement name="BitsPerPixel" value="16+" />
					</and>
				</or>
				 -->
			</deviceRequirements>
		    <!-- build settings -->
			<!-- 
			 -->
			<build
				symbols="ExampleSymbol, AnotherExample"
				usePolishGui="true"
				workDir="${dir.work}"
			>
				<!-- midlets definition -->
				<midlet class="de.enough.polish.sample.email.EmailMidlet" name="Email" />
				<!-- project-wide variables - used for preprocessing.  -->
				<!-- You can set localized variables in the resources/messages.txt files as well.  -->
				<variables includeAntProperties="true" >
					<variable name="polish.TextField.useDirectInput" value="true" />
					<variable name="polish.TextField.usePredictiveInput" value="true" />
					<variable name="polish.TextField.includeInputInfo" value="true" />
					<variable name="polish.TextField.supportSymbolsEntry" value="true" />
					<variable
						name="polish.FullScreen"
						value="menu" 
						unless="polish.blackberry || polish.android" 
					/>
					<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
					<variable name="polish.useScrollBar" value="true" />
					<variable name="polish.ScreenInfo.enable" value="true" />
				</variables>
				<!-- Here you can set the dir attribute to "resources2" for an alternative design. -->
				<resources
					dir="${resource.dir}"
					defaultexcludes="yes"
					excludes="readme.txt"
				>
					<!-- add the localization element for created localized
					     versions of your application: 
					<localization locales="de_DE, en_US" unless="test" />
					<localization locales="en_US" if="test" />
					-->
				</resources>
				<!-- obfuscator settings: do not obfuscate when the test-property is true -->
				<obfuscator name="ProGuard" unless="test or polish.blackberry" >
					<!--
					You can set additional parameters here, e.g.:
					<parameter name="optimize" value="false" />
					-->
				</obfuscator>
				<!-- debug settings: only include debug setting when the test-property is true -->
				<debug if="test or log" verbose="true" level="error">
					<filter pattern="de.enough.polish.example.*" level="debug" />
					<filter pattern="de.enough.polish.ui.*" level="warn" />
				</debug>
				<!-- user defined JAD attributes can also be used: -->
				<jad>
					<attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
				</jad>	
			</build>
			
			<!-- execution of emulator(s) -->
			<emulator
				wait="true"
				securityDomain="trusted"
				enableProfiler="true"
				enableMemoryMonitor="true"
				enableNetworkMonitor="true"
				if="debug"
				>
				<!-- this is an example for connecting to a debugger - use the ${polish.debug.port} Ant property
				     for getting to know the port of the debugger. In this example the 
				     "connect-debugger" target is also required.
				-->
				<!--
				<debugger name="antcall" target="connect-debugger" port="6001" />
				-->
			</emulator>
                        
			<emulator
				wait="true"
				trace="none"
				securityDomain="trusted"
				enableProfiler="false"
				enableMemoryMonitor="false"
				enableNetworkMonitor="false"
				if="test and not debug"
				>
			</emulator>

		
		</j2mepolish>
	</target>
	
	<target 
		name="emulator"
		depends="test,j2mepolish"
		description="invokes the emulator"
	>
	</target>

	<target name="clean" 
	  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
		<delete dir="build" />
		<delete dir="dist" includes="**/*" />
	</target>

	<target  
		name="cleanbuild"
		description="allows a clean build. You should call [ant cleanbuild] whenever you made changes to devices.xml, vendors.xml or groups.xml"
		depends="clean, j2mepolish"
	/>
	
    <target name="debug" description="debugs the project" depends="enableDebug, test, j2mepolish" />

</project>
<!-- This file controls the build process.                    -->
<!-- The most important target is the "j2mepolish",           -->
<!-- which controls for what devices the application should   -->
<!-- be created and so on.                                    -->
<!--                                                          -->
<!-- Call the "emulator" target to skip the obfuscation       -->
<!-- and to build the example for only one handsets.          -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->
<project 
	name="enough-j2mepolish-menu" 
	default="j2mepolish">
	
	<!-- import user specific properties                          -->
	<property file="${user.name}.properties" />
	
	<!-- The polish.home property needs to point to the directory -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" location="%{INSTALL_PATH}" />
	
	<!-- import global properties                                 -->
	<property file="${polish.home}/global.properties" />


		
	<!-- the device for the test mode - you can define it on the command-line
	     using the -D switch, e.g. ant -Ddevice=Generic/midp2 emulator -->
	<property name="device" value="Generic/AnyPhone"/>
	<property name="devices" value="${device},Generic/AnyMsaPhone,Nokia/Series40E3,Nokia/Series60E3,Sony-Ericsson/JavaPlatform7,Sony-Ericsson/JavaPlatform8"/>
	


	<!-- Definition of the J2ME Polish task:                      -->
	<taskdef name="j2mepolish" 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/lib/enough-j2mepolish-build.jar"
	/>
	
		
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default-target -->
	
	<target name="setdeploy" 
		description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
		>
		<property name="deploy-url" value="http://www.company.com/download/" />
	</target>
	
	<target name="enableDebug" 
		description="Call this target first to skip the obfuscation step, call the emulator and start the debugger, e.g. ant enableDebug j2mepolish"
		>
		<property name="debug" value="true" />
	</target>
	
		
	<target name="test" 
		description="Call this target first to skip the obfuscation step and call the emulator, e.g. ant test j2mepolish"
		>
		<property name="test" value="true" />
		<property name="dir.work" value="build/test" />
	</target>
			
	<target name="init">
	  	<property name="test" value="false" />
		<property name="dir.work" value="build/real" />
		<property name="deploy-url" value="" />
		<property name="resource.dir" value="resources" />
	</target>
	 
	<!-- In this target the J2ME Polish task is used.             -->
	<!-- It has 3 sections:                                       -->
	<!--    1. The info-section defines some general information  -->
	<!--    2. The deviceRequirements-section chooses the devices -->
	<!--       for which the application is optimized.            -->
	<!--    3. The build-section controls the actual build        -->
	<!--       process.                                           -->	
	<target name="j2mepolish" 
			depends="init"
			description="This is the controller for the J2ME build process." 
			>
		<j2mepolish>
		    <!-- general settings, these settings basically form the JAD-attributes. -->
		    <!-- Have a look at the <jad>-section for setting specialised attributes.
		         You can also define localized attributes in the resources/messages.txt files -->
			<info
				name="FishEye"
				version="2.1.4"
				description="A simple project that uses the fisheye view-type."
				vendorName="Enough Software"
				infoUrl="http://www.j2mepolish.org"
				icon="iconlarge0.png"
				jarName="${polish.vendor}-${polish.name}-${polish.locale}-fisheye.jar" 
				jarUrl="${deploy-url}${polish.jarName}"
				copyright="Copyright 2011 Enough Software. All rights reserved."
				deleteConfirm="Do you really want to kill me?" 
			/>
			<!-- selection of supported devices -->
			<!-- In the test mode the application is build only for the  -->
			<!-- Generic/midp1 phone, but when the test-property is set to false, -->
			<!-- the second deviceRequirements will be used instead. -->
			<deviceRequirements if="test">
				<requirement name="Identifier" value="${device}" />
			</deviceRequirements>
			<deviceRequirements unless="test">
				<requirement name="Identifier" value="${devices}" />
				<!-- on could use other devices for real builds, e.g. :
				<or>
					<and>
						<requirement name="JavaPackage" value="nokia-ui" />
						<requirement name="BitsPerPixel" value="16+" />
					</and>
				</or>
				 -->
			</deviceRequirements>
		    <!-- build settings -->
			<!-- 
			 -->
			<build
				symbols="ExampleSymbol, AnotherExample"
				usePolishGui="true"
				workDir="${dir.work}"
			>
				<!-- midlets definition -->
				<midlet class="de.enough.polish.example.MenuMidlet" name="FishEye" />
				<!-- project-wide variables - used for preprocessing.  -->
				<!-- You can set localized variables in the resources/messages.txt files as well.  -->
				<variables includeAntProperties="true" >
					<!-- example variables:
					You can change the title of the sample application with the "title"-var.
					-->
					<variable name="title" value="J2ME Polish" />
					<variable
						name="polish.FullScreen"
						value="menu" 
						unless="polish.blackberry || polish.android" 
					/>
					<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
				</variables>
				<!-- Here you can set the dir attribute to "resources2" for an alternative design. -->
				<resources
					dir="${resource.dir}"
					defaultexcludes="yes"
					excludes="readme.txt"
				>
					<!-- you can add resources based on complex criterias: 
					<fileset 
						dir="resources/multimedia" 
						includes="*.wav" 
						if="polish.audio.wav" 
					/>
					<fileset 
						dir="resources/multimedia" 
						includes="*.mid" 
						if="polish.audio.midi and not polish.audio.wav" 
					/>
					-->
					<!-- you can also use several root directories for your resource assembling.
					     This is useful for customizations and for having a cleanly structured 
					     resources directory (for example seperating images from sounds, etc):
					<root dir="resources/images" />
					<root dir="resources/sounds" />
					<root dir="resources/customer1" if="customer1" />
					<root dir="resources/customer2" if="customer2" />
					-->
					<!-- add the localization element for created localized
					     versions of your application: -->
					<localization locales="de_DE, en_US" unless="test" />
					<localization locales="en_US" if="test" />
				</resources>
				<!-- obfuscator settings: do not obfuscate when the test-property is true -->
				<obfuscator name="ProGuard" unless="test or polish.blackberry" >
					<!--
					You can set additional parameters here, e.g.:
					<parameter name="optimize" value="false" />
					-->
				</obfuscator>
				<!-- debug settings: only include debug setting when the test-property is true -->
				<debug if="test or log" verbose="true" level="error">
					<filter pattern="de.enough.polish.example.*" level="debug" />
					<filter pattern="de.enough.polish.ui.*" level="warn" />
				</debug>
				<!-- user defined JAD attributes can also be used: -->
				<jad>
					<attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
				</jad>	
				<!-- 
				   This is an example for signing MIDlets with J2ME Polish. 
				   You can set the password on the commandline by calling "ant -Dpassword=secret",
				   or by setting the Ant property above.
				   Signing is done only for MIDP/2.0 devices.
				-->
				<!--
				<sign
					key="SignMIDlet"
					keystore="midlets.ks"
					password="${password}"
					unless="test"
				/>
				-->
			</build>
			
			<!-- execution of emulator(s) -->
			<emulator
				wait="true"
				securityDomain="trusted"
				enableProfiler="true"
				enableMemoryMonitor="true"
				enableNetworkMonitor="true"
				if="debug"
				>
				<!--
				<parameter name="-Xjam" value="transient=http://localhost:8080/${polish.jadName}" />
				-->
			</emulator>
                        
			<emulator
				wait="true"
				trace="class"
				securityDomain="trusted"
				enableProfiler="false"
				enableMemoryMonitor="false"
				enableNetworkMonitor="false"
				if="test and not debug"
				>
				<!-- this is an example for connecting to a debugger - use the ${polish.debug.port} Ant property
				     for getting to know the port of the debugger. In this example the 
				     "connect-debugger" target is also required.
				-->
				<!--
				<debugger name="antcall" target="connect-debugger" port="6001" />
				-->
			</emulator>

		
		</j2mepolish>
	</target>
	
	<target 
		name="emulator"
		depends="test,j2mepolish"
		description="invokes the emulator"
	>
	</target>

	<target name="clean" 
	  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
		<delete dir="build" />
		<delete dir="dist" includes="**/*" />
	</target>

	<target  
		name="cleanbuild"
		description="allows a clean build. You should call [ant cleanbuild] whenever you made changes to devices.xml, vendors.xml or groups.xml"
		depends="clean, j2mepolish"
	/>

	<target name="enableBarbie" >
		<property name="resource.dir" value="resources2" />
		<property name="dir.work" value="build/barbie" />
	</target>
	
    <target name="barbie" description="launches the application with the barbie design" depends="enableBarbie, test, j2mepolish" />

	<target name="enableFrog" >
		<property name="resource.dir" value="resources3" />
		<property name="dir.work" value="build/frog" />
	</target>
	
    <target name="frog" description="launches the application with the frog design" depends="enableFrog, test, j2mepolish" />
	
    <target name="debug" description="debugs the project" depends="enableDebug, test, j2mepolish" />

</project>
<!-- This file controls the build process.                    -->
<!-- The most important target is the "j2mepolish",           -->
<!-- which controls for what devices the application should   -->
<!-- be created and so on.                                    -->
<!--                                                          -->
<!-- Call the "emulator" target to skip the obfuscation       -->
<!-- and to build the example for only one handsets.          -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->
<project 
	name="enough-j2mepolish-framedform" 
	default="j2mepolish">
	
	<!-- import user specific properties                          -->
	<property file="${user.name}.properties" />
	
	<!-- The polish.home property needs to point to the directory -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" location="%{INSTALL_PATH}" />
	
	<!-- import global properties                                 -->
	<property file="${polish.home}/global.properties" />

		
	<!-- the device for the test mode - you can define it on the command-line
	     using the -D switch, e.g. ant -Ddevice=Generic/midp2 emulator -->
	<property name="device" value="Generic/AnyPhone"/>
	<property name="devices" value="${device},Generic/AnyMsaPhone,Nokia/Series40E3,Nokia/Series60E3,Sony-Ericsson/JavaPlatform7,Sony-Ericsson/JavaPlatform8"/>
	

	<!-- Definition of the J2ME Polish task:                      -->
	<taskdef name="j2mepolish" 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/lib/enough-j2mepolish-build.jar"
	/>
	
		
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default-target -->
	
	<target name="setdeploy" 
		description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
		>
		<property name="deploy-url" value="http://www.company.com/download/" />
	</target>
	
	<target name="enableDebug" 
		description="Call this target first to skip the obfuscation step, call the emulator and start the debugger, e.g. ant enableDebug j2mepolish"
		>
		<property name="debug" value="true" />
	</target>
	
		
	<target name="test" 
		description="Call this target first to skip the obfuscation step and call the emulator, e.g. ant test j2mepolish"
		>
		<property name="test" value="true" />
		<property name="dir.work" value="build/test" />
	</target>
			
	<target name="init">
	  	<property name="test" value="false" />
		<property name="dir.work" value="build/real" />
		<property name="deploy-url" value="" />
		<property name="resource.dir" value="resources" />
	</target>
	 
	<!-- In this target the J2ME Polish task is used.             -->
	<!-- It has 3 sections:                                       -->
	<!--    1. The info-section defines some general information  -->
	<!--    2. The deviceRequirements-section chooses the devices -->
	<!--       for which the application is optimized.            -->
	<!--    3. The build-section controls the actual build        -->
	<!--       process.                                           -->	
	<target name="j2mepolish" 
			depends="init"
			description="This is the controller for the J2ME build process." 
			>
		<j2mepolish>
		    <!-- general settings, these settings basically form the JAD-attributes. -->
		    <!-- Have a look at the <jad>-section for setting specialised attributes.
		         You can also define localized attributes in the resources/messages.txt files -->
			<info
				name="FramedForm"
				version="1.0.0"
				description="A demonstration of the FramedForm."
				vendorName="Enough Software"
				infoUrl="http://www.j2mepolish.org"
				jarName="${ nospace(polish.vendor) }-${ nospace(polish.name) }-framedform.jar" 
				jarUrl="${deploy-url}${polish.jarName}"
				copyright="Copyright 2011 Enough Software. All rights reserved."
			/>
			<!-- selection of supported devices -->
			<!-- In the test mode the application is build only for the  -->
			<!-- Generic/midp1 phone, but when the test-property is set to false, -->
			<!-- the second deviceRequirements will be used instead. -->
			<deviceRequirements if="test">
				<requirement name="Identifier" value="${device}" />
			</deviceRequirements>
			<deviceRequirements unless="test">
				<requirement name="Identifier" value="${devices}" />
			</deviceRequirements>
		    <!-- build settings -->
			<!-- 
			 -->
			<build
				symbols="ExampleSymbol, AnotherExample"
				usePolishGui="true"
				workDir="${dir.work}"
			>
				<!-- midlets definition -->
				<midlet class="de.enough.polish.sample.framedform.FramedFormDemo" name="FramedForm"/>
				<!-- project-wide variables - used for preprocessing.  -->
				<!-- You can set localized variables in the resources/messages.txt files as well.  -->
				<variables includeAntProperties="true" >
					<variable
						name="polish.FullScreen"
						value="menu" 
						unless="polish.blackberry || polish.android" 
					/>
					<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
					<variable name="polish.TextField.useDirectInput" value="true" />
				</variables>
				<!-- Here you can set the dir attribute to "resources2" for an alternative design. -->
				<resources
					dir="${resource.dir}"
					defaultexcludes="yes"
					excludes="readme.txt"
				>
					<!-- add the localization element for created localized
					     versions of your application: 
					<localization locales="de_DE, en_US" unless="test" />
					<localization locales="en_US" if="test" />
					-->
				</resources>
				<!-- obfuscator settings: do not obfuscate when the test-property is true -->
				<obfuscator name="ProGuard" unless="test or polish.blackberry" >
					<!--
					You can set additional parameters here, e.g.:
					<parameter name="optimize" value="false" />
					-->
				</obfuscator>
				<!-- debug settings: only include debug setting when the test-property is true -->
				<debug if="test or log" verbose="true" level="error">
					<filter pattern="de.enough.polish.example.*" level="debug" />
					<filter pattern="de.enough.polish.ui.*" level="warn" />
				</debug>
				<!-- user defined JAD attributes can also be used: -->
				<jad>
					<attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
				</jad>	
			</build>
			
			<!-- execution of emulator(s) -->
			<emulator
				wait="true"
				securityDomain="trusted"
				enableProfiler="true"
				enableMemoryMonitor="true"
				enableNetworkMonitor="true"
				if="debug"
				>
				<!-- this is an example for connecting to a debugger - use the ${polish.debug.port} Ant property
				     for getting to know the port of the debugger. In this example the 
				     "connect-debugger" target is also required.
				-->
				<!--
				<debugger name="antcall" target="connect-debugger" port="6001" />
				-->
			</emulator>
                        
			<emulator
				wait="true"
				trace="none"
				securityDomain="trusted"
				enableProfiler="false"
				enableMemoryMonitor="false"
				enableNetworkMonitor="false"
				if="test and not debug"
				>
			</emulator>

		
		</j2mepolish>
	</target>
	
	<target 
		name="emulator"
		depends="test,j2mepolish"
		description="invokes the emulator"
	>
	</target>

	<target name="clean" 
	  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
		<delete dir="build" />
		<delete dir="dist" includes="**/*" />
	</target>

	<target  
		name="cleanbuild"
		description="allows a clean build. You should call [ant cleanbuild] whenever you made changes to devices.xml, vendors.xml or groups.xml"
		depends="clean, j2mepolish"
	/>
	
    <target name="debug" description="debugs the project" depends="enableDebug, test, j2mepolish" />

</project>
<!-- Java 5 Syntax is possible by adding a postcompiler       -->
<!-- in your build.xml script like shown below:               -->
<!-- <postcompiler name="java5" />                            -->

<!-- This file controls the build process.                    -->
<!-- The most important target is the "j2mepolish",           -->
<!-- which controls for what devices the application should   -->
<!-- be created and so on.                                    -->
<!--                                                          -->
<!-- Call the "emulator" target to skip the obfuscation       -->
<!-- and to build the example for only one handsets.          -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->
<project 
	name="enough-j2mepolish-java5" 
	default="j2mepolish">
	
	<!-- import user specific properties                          -->
	<property file="${user.name}.properties" />
	
	<!-- The polish.home property needs to point to the directory -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" location="%{INSTALL_PATH}" />
	
	<!-- import global properties                                 -->
	<property file="${polish.home}/global.properties" />

		
	<!-- the device for the test mode - you can define it on the command-line
	     using the -D switch, e.g. ant -Ddevice=Generic/midp2 emulator -->
	<property name="device" value="Generic/AnyPhone"/>
	<property name="devices" value="${device},Generic/AnyMsaPhone,Nokia/Series40E3,Nokia/Series60E3,Sony-Ericsson/JavaPlatform7,Sony-Ericsson/JavaPlatform8"/>
	
	<!-- Definition of the J2ME Polish task:                      -->
	<taskdef name="j2mepolish" 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/lib/enough-j2mepolish-build.jar"
	/>
	
		
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default-target -->
	
	<target name="setdeploy" 
		description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
		>
		<property name="deploy-url" value="http://www.company.com/download/" />
	</target>
	
	<target name="enableDebug" 
		description="Call this target first to skip the obfuscation step, call the emulator and start the debugger, e.g. ant enableDebug j2mepolish"
		>
		<property name="debug" value="true" />
	</target>
	
		
	<target name="test" 
		description="Call this target first to skip the obfuscation step and call the emulator, e.g. ant test j2mepolish"
		>
		<property name="test" value="true" />
		<property name="dir.work" value="build/test" />
	</target>
			
	<target name="init">
	  	<property name="test" value="false" />
		<property name="dir.work" value="build/real" />
		<property name="deploy-url" value="" />
		<property name="resource.dir" value="resources" />
	</target>
	 
	<!-- In this target the J2ME Polish task is used.             -->
	<!-- It has 3 sections:                                       -->
	<!--    1. The info-section defines some general information  -->
	<!--    2. The deviceRequirements-section chooses the devices -->
	<!--       for which the application is optimized.            -->
	<!--    3. The build-section controls the actual build        -->
	<!--       process.                                           -->	
	<target name="j2mepolish" 
			depends="init"
			description="This is the controller for the J2ME build process." 
			>
		<j2mepolish>
		    <!-- general settings, these settings basically form the JAD-attributes. -->
		    <!-- Have a look at the <jad>-section for setting specialised attributes.
		         You can also define localized attributes in the resources/messages.txt files -->
			<info
				name="Java5"
				version="1.0.0"
				description="A demonstration of the Serialization Framework and of the Java 5 Syntax Support."
				vendorName="Enough Software"
				infoUrl="http://www.j2mepolish.org"
				jarName="${ nospace(polish.vendor) }-${ nospace(polish.name) }-java5.jar" 
				jarUrl="${deploy-url}${polish.jarName}"
				copyright="Copyright 2011 Enough Software. All rights reserved."
			/>
			<!-- selection of supported devices -->
			<!-- In the test mode the application is build only for the  -->
			<!-- Generic/midp1 phone, but when the test-property is set to false, -->
			<!-- the second deviceRequirements will be used instead. -->
			<deviceRequirements if="test">
				<requirement name="Identifier" value="${device}" />
			</deviceRequirements>
			<deviceRequirements unless="test">
				<requirement name="Identifier" value="${devices}" />
			</deviceRequirements>
		    <!-- build settings -->
			<!-- 
			 -->
			<build
				symbols="ExampleSymbol, AnotherExample"
				usePolishGui="true"
				workDir="${dir.work}"
			>
				<!-- midlets definition -->
				<midlet class="de.enough.polish.sample.serialization.NotesMidlet" name="Notes"/>
				<!-- project-wide variables - used for preprocessing.  -->
				<!-- You can set localized variables in the resources/messages.txt files as well.  -->
				<variables includeAntProperties="true" >
					<!-- activate text input over J2ME Polish TextFields (without opening a new TextBox for each input: -->
					<variable name="polish.TextField.useDirectInput" value="true" />
					<!-- activate input of symbols: -->
					<variable name="polish.TextField.supportSymbolsEntry" value="true" />
					<variable name="polish.TextField.Symbols" value="&quot;@#()&lt;&gt;&amp;;,.:!/\~$%^*" />
					<!-- activate switching to the native (e.g.T9) input mode: -->
					<variable name="polish.TextField.allowNativeModeSwitch" value="true" />
					<!-- use the advanced menubar mode that offers near-native command handling and positioning, on BB and Android use native commands: -->
					<variable
						name="polish.FullScreen"
						value="menu" 
						unless="polish.blackberry || polish.android" 
					/>
					<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
					<variable name="polish.useScrollBar" value="true" />
					<!-- suppress List-select commands -->
					<variable name="polish.List.suppressSelectCommand" value="true" />
					<!--
					You can also suppress ir rename the Add Symbol command:
					<variable name="polish.TextField.suppressAddSymbolCommand" value="true" if="polish.key.AddSymbolKey:defined" />
					<variable name="polish.command.entersymbol" value="Add Symbol" />
					-->
				</variables>
				<!-- Here you can set the dir attribute to "resources2" for an alternative design. -->
				<resources
					dir="${resource.dir}"
					defaultexcludes="yes"
					excludes="readme.txt"
				>
					<!-- add the localization element for created localized
					     versions of your application: 
					<localization locales="de_DE, en_US" unless="test" />
					<localization locales="en_US" if="test" />
					-->
				</resources>
				
				<!-- activate Java 5 Syntax Support for this project: -->
				<postcompiler name="java5" />
				
				<!-- obfuscator settings: do not obfuscate when the test-property is true  
				-->
				<obfuscator  name="ProGuard" unless="test or polish.blackberry">
					<parameter name="optimize" value="true" />
				</obfuscator>
				<!-- debug/log settings: only include debug setting when the test-property is true -->
				<debug level="info" verbose="true" logTimestamp="true" >
					<filter level="debug" package="de.enough.polish.sample.serialization"/>
					<!--
					<filter level="debug" class="de.enough.polish.ui.TabbedForm"/>
					<filter level="debug" class="de.enough.polish.ui.Container"/>
					<filter level="debug" class="de.enough.polish.ui.Screen"/>
					<filter level="debug" class="de.enough.polish.ui.MenuBar"/>
					-->
				</debug>
				<!-- user defined JAD attributes can also be used: -->
				<jad>
					<attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
				</jad>	
			</build>
			
			<!-- execution of emulator(s) -->
			<emulator
				wait="true"
				securityDomain="trusted"
				enableProfiler="true"
				enableMemoryMonitor="true"
				enableNetworkMonitor="true"
				if="debug"
				>
				<!-- this is an example for connecting to a debugger - use the ${polish.debug.port} Ant property
				     for getting to know the port of the debugger. In this example the 
				     "connect-debugger" target is also required.
				-->
				<!--
				<debugger name="antcall" target="connect-debugger" port="6001" />
				-->
			</emulator>
                        
			<emulator
				wait="true"
				trace="none"
				securityDomain="trusted"
				enableProfiler="false"
				enableMemoryMonitor="false"
				enableNetworkMonitor="false"
				if="test and not debug"
				>
			</emulator>

		
		</j2mepolish>
	</target>
	
	<target 
		name="emulator"
		depends="test,j2mepolish"
		description="invokes the emulator"
	>
	</target>

	<target name="clean" 
	  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
		<delete dir="build" />
		<delete dir="dist" includes="**/*" />
	</target>

	<target  
		name="cleanbuild"
		description="allows a clean build. You should call [ant cleanbuild] whenever you made changes to devices.xml, vendors.xml or groups.xml"
		depends="clean, j2mepolish"
	/>
	
    <target name="debug" description="debugs the project" depends="enableDebug, test, j2mepolish" />

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!-- This file controls the build process.                    -->
<!-- The most important target is the "j2mepolish",           -->
<!-- which controls for what devices the application should   -->
<!-- be created and so on.                                    -->
<!--                                                          -->
<!-- Call the "emulator" target to skip the obfuscation       -->
<!-- and to build the example for only one handsets.          -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->
<project basedir="." default="j2mepolish" name="enough-polish-example">

	<!-- import user specific properties                          -->
	<property file="${user.name}.properties" />
	
	<!-- The polish.home property needs to point to the directory -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" location="%{INSTALL_PATH}" />
	
	<!-- import global properties                                 -->
	<property file="${polish.home}/global.properties" />
	
	<!-- the device for the test mode - you can define it on the command-line
	     using the -D switch, e.g. ant -Ddevice=Generic/midp2 emulator -->
	<property name="device" value="Generic/AnyPhone"/>
	<property name="devices" value="${device},Generic/AnyMsaPhone,Nokia/Series40E3,Nokia/Series60E3,Sony-Ericsson/JavaPlatform7,Sony-Ericsson/JavaPlatform8"/>


	<!-- Definition of the J2ME Polish task:                      -->
	<taskdef name="j2mepolish" 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/lib/enough-j2mepolish-build.jar"
	/>

			
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant notest j2mepolish" or just "ant" for calling the default-target -->
	
	<target name="test">
		<property name="test" value="true"/>
		<property name="dir.work" value="build/test" />
	</target>
		

	<target name="init">
	  	<property name="test" value="false"/>
		<property name="deploy-url" value=""/>
		<property name="dir.work" value="build/real" />
	</target>
    
	<target depends="init" name="j2mepolish">
		<j2mepolish>
		    <!-- general settings -->
			<info 
				copyright="Copyright 2005 - 2011 Enough Software. All rights reserved." 
				description="A log viewer." 
				jarName="${polish.vendor}-${polish.name}-logviewer.jar" 
				name="Logviewer" 
				vendorName="Enough Software" 
				version="0.9.0"
		    />
			<!-- selection of supported devices -->
			<deviceRequirements if="test">
				<requirement name="Identifier" value="${device}"/>
			</deviceRequirements>
			<deviceRequirements unless="test">
				<requirement name="Identifier" value="${devices}"/>
			</deviceRequirements>
		    <!-- build settings -->
			<build 
	            usePolishGui="yes"
	            sourceDir="source/src"
				workDir="${dir.work}"
				abortOnError="true"
				>
				<!-- midlets definition -->
				<midlet class="de.enough.polish.log.rms.LogViewerMidlet" name="Log Viewer"/>
				<!-- project-wide variables - used for preprocessing  -->
				<variables>
					<!-- use the advanced menubar mode that offers near-native command handling and positioning, on BB and Android use native commands: -->
					<variable
						name="polish.FullScreen"
						value="menu" 
						unless="polish.blackberry || polish.android" 
					/>
					<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
					<variable name="polish.classes.ApplicationInitializer" value="de.enough.polish.log.rms.LogViewerMidlet" />
					<variable name="polish.TextField.useDirectInput" value="true" unless="polish.hasPointerEvents" />
					<!--
					You need to change the polish.log.MIDletSuite and polish.log.Vendor
					preprocessing variables if you want to use the Logviewer for showing
					RMS logfiles of your application.
					See the readme.txt file for further explanations.
					-->
					<!-- example:
					<variable name="polish.log.MIDletSuite" value="Demonstrator" />
					<variable name="polish.log.Vendor" value="Enough Software" />
					-->
				</variables>
				<!-- obfuscator settings: do not obfuscate when the test-property is true unless="test" -->
				<obfuscator name="ProGuard" unless="test or polish.blackberry" >
				</obfuscator>
				
				<resources
					dir="resources" 
					defaultexcludes="yes"
					excludes="*.db"
				 >
					 <localization
						locales="en"
					 />
				</resources>
			</build>
			
			<!-- execution of emulator(s) -->
			<emulator if="test"	/>
		</j2mepolish>
	</target>
	
	
	<target description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml" name="clean">
		<delete dir="build"/>
		<delete dir="dist" includes="**/*" />
	</target>

</project>
<!-- This file controls the build process.                    -->
<!-- The most important target is the "j2mepolish",           -->
<!-- which controls for what devices the application should   -->
<!-- be created and so on.                                    -->
<!--                                                          -->
<!-- Call the "emulator" target to skip the obfuscation       -->
<!-- and to build the example for only one handsets.          -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->
<project 
	name="enough-j2mepolish-menu" 
	default="j2mepolish">
	
	<!-- import user specific properties                          -->
	<property file="${user.name}.properties" />
	
	<!-- The polish.home property needs to point to the directory -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" location="%{INSTALL_PATH}" />
	
	<!-- import global properties                                 -->
	<property file="${polish.home}/global.properties" />


		
	<!-- the device for the test mode - you can define it on the command-line
	     using the -D switch, e.g. ant -Ddevice=Generic/midp2 emulator -->
	<property name="device" value="Generic/AnyPhone"/>
	<property name="devices" value="${device},Generic/AnyMsaPhone,Nokia/Series40E3,Nokia/Series60E3,Sony-Ericsson/JavaPlatform7,Sony-Ericsson/JavaPlatform8"/>
	


	<!-- Definition of the J2ME Polish task:                      -->
	<taskdef name="j2mepolish" 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/lib/enough-j2mepolish-build.jar"
	/>
	
		
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default-target -->
	
	<target name="setdeploy" 
		description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
		>
		<property name="deploy-url" value="http://www.company.com/download/" />
	</target>
	
	<target name="enableDebug" 
		description="Call this target first to skip the obfuscation step, call the emulator and start the debugger, e.g. ant enableDebug j2mepolish"
		>
		<property name="debug" value="true" />
	</target>
	
		
	<target name="test" 
		description="Call this target first to skip the obfuscation step and call the emulator, e.g. ant test j2mepolish"
		>
		<property name="test" value="true" />
		<property name="dir.work" value="build/test" />
	</target>
			
	<target name="init">
	  	<property name="test" value="false" />
		<property name="deploy-url" value="" />
		<property name="resource.dir" value="resources" />
		<property name="customization" value="" />
		<property name="dir.work" value="build/real/${customization}" />
		<property name="dir.dist" value="dist/${customization}" />
	</target>
	 
	<!-- In this target the J2ME Polish task is used.             -->
	<!-- It has 3 sections:                                       -->
	<!--    1. The info-section defines some general information  -->
	<!--    2. The deviceRequirements-section chooses the devices -->
	<!--       for which the application is optimized.            -->
	<!--    3. The build-section controls the actual build        -->
	<!--       process.                                           -->	
	<target name="j2mepolish" 
			depends="init"
			description="This is the controller for the J2ME build process." 
			>
		<j2mepolish>
		    <!-- general settings, these settings basically form the JAD-attributes. -->
		    <!-- Have a look at the <jad>-section for setting specialised attributes.
		         You can also define localized attributes in the resources/messages.txt files -->
			<info
				name="J2ME Polish"
				version="1.3.4"
				description="A simple project that uses localization."
				vendorName="Enough Software"
				infoUrl="http://www.j2mepolish.org"
				icon="dot.png"
				jarName="${polish.vendor}-${polish.name}-${polish.locale}-menu.jar" 
				jarUrl="${deploy-url}${polish.jarName}"
				copyright="Copyright 2005 - 2011 Enough Software. All rights reserved."
				deleteConfirm="Do you really want to kill me?" 
			/>
			<!-- selection of supported devices -->
			<!-- In the test mode the application is build only for the  -->
			<!-- Generic/midp1 phone, but when the test-property is set to false, -->
			<!-- the second deviceRequirements will be used instead. -->
			<deviceRequirements if="test">
				<requirement name="Identifier" value="${device}" />
			</deviceRequirements>
			<deviceRequirements unless="test">
				<requirement name="Identifier" value="${devices}" />
				<!-- on could use other devices for real builds, e.g. :
				<or>
					<and>
						<requirement name="JavaPackage" value="nokia-ui" />
						<requirement name="BitsPerPixel" value="16+" />
					</and>
				</or>
				 -->
			</deviceRequirements>
		    <!-- build settings -->
			<!-- 
			 -->
			<build
				usePolishGui="true"
				workDir="${dir.work}"
				destDir="${dir.dist}"
			>
				<!-- midlets definition -->
				<midlet class="de.enough.polish.example.MenuMidlet" name="Example" />
				<!-- project-wide variables - used for preprocessing.  -->
				<!-- You can set localized variables in the resources/messages.txt files as well.  -->
				<variables includeAntProperties="true" >
					<!-- use the advanced menubar mode that offers near-native command handling and positioning, on BB and Android use native commands: -->
					<variable
						name="polish.FullScreen"
						value="menu" 
						unless="polish.blackberry || polish.android" 
					/>
					<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
					<!-- example variables:
					In your Java-code you can use the following snipet to use this variable:
					//#= private static final String UPDATE_URL = "${ update-url }";
					You can change the title of the sample application with the "title"-var.
					-->
					<variable name="update-url" value="http://www.enough.de/update" />
					<variable name="title" value="J2ME Polish" />
				</variables>
				<!-- Configure the resource assembling: -->
				<resources
					dir="resources/base"
					defaultexcludes="yes"
					excludes="readme.txt"
				>
					<root dir="resources/customizations/${customization}" if="${customization}.enabled" />
					<!-- add the localization element for created localized
					     versions of your application: -->
					<localization locales="de_DE, en_US" unless="test" />
					<localization locales="en_US" if="test" />
				</resources>
				<!-- obfuscator settings: do not obfuscate when the test-property is true -->
				<obfuscator name="ProGuard" unless="test or polish.blackberry" >
					<!--
					You can set additional parameters here, e.g.:
					<parameter name="optimize" value="false" />
					-->
				</obfuscator>
				<!-- debug settings: only include debug setting when the test-property is true -->
				<debug if="test or log" verbose="true" level="error">
					<filter pattern="de.enough.polish.example.*" level="debug" />
					<filter pattern="de.enough.polish.ui.*" level="warn" />
					<!-- activate display handler to see log entries in real time:
					<handler name="display" />
					-->
				</debug>
				<!-- user defined JAD attributes can also be used: -->
				<jad>
					<attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
				</jad>	
				<!-- 
				   This is an example for signing MIDlets with J2ME Polish. 
				   You can set the password on the commandline by calling "ant -Dpassword=secret",
				   or by setting the Ant property above.
				   Signing is done only for MIDP/2.0 devices.
				-->
				<!--
				<sign
					key="SignMIDlet"
					keystore="midlets.ks"
					password="${password}"
					unless="test"
				/>
				-->
			</build>
			
			<!-- execution of emulator(s) -->
			<emulator
				wait="true"
				securityDomain="trusted"
				enableProfiler="true"
				enableMemoryMonitor="true"
				enableNetworkMonitor="true"
				if="debug"
				>
				<!--
				<parameter name="-Xjam" value="transient=http://localhost:8080/${polish.jadName}" />
				-->
			</emulator>
                        
			<emulator
				wait="true"
				trace="class"
				securityDomain="trusted"
				enableProfiler="false"
				enableMemoryMonitor="false"
				enableNetworkMonitor="false"
				if="test and not debug"
				>
				<!-- this is an example for connecting to a debugger - use the ${polish.debug.port} Ant property
				     for getting to know the port of the debugger. In this example the 
				     "connect-debugger" target is also required.
				-->
				<!--
				<debugger name="antcall" target="connect-debugger" port="6001" />
				-->
			</emulator>

		
		</j2mepolish>
	</target>
	
	<target 
		name="emulator"
		depends="test,j2mepolish"
		description="invokes the emulator"
	>
	</target>

	<target name="clean" 
	  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
		<delete dir="build" />
		<delete dir="dist" includes="**/*" />
	</target>

	<target  
		name="cleanbuild"
		description="allows a clean build. You should call [ant cleanbuild] whenever you made changes to devices.xml, vendors.xml or groups.xml"
		depends="clean, j2mepolish"
	/>

	<target name="enableBarbie">
		<property name="customization" value="Barbie" />
		<property name="Barbie.enabled" value="true" />
	</target>
		
	<target name="barbie"
			description="customizes this project with the settings found in resources/customizations/Barbie"
			depends="enableBarbie, j2mepolish"
	/>

	
	<target name="enableFrogger">
		<property name="customization" value="Frogger" />
		<property name="Frogger.enabled" value="true" />
	</target>
		
	<target name="frogger"
			description="customizes this project with the settings found in resources/customizations/Barbie"
			depends="enableFrogger, j2mepolish"
	/>

	<target name="enableAnimations">
		<property name="customization" value="Animations" />
		<property name="Animations.enabled" value="true" />
		<property name="polish.MenuBar.useExtendedMenubar" value="true" />
	</target>
		
	<target name="animations"
			description="customizes this project with the settings found in resources/customizations/Animations"
			depends="enableAnimations, j2mepolish"
	/>
	
	<target 
		name="build-all"
		description="Builds your application in all customizations." 
		>
		<subant target="j2mepolish" buildpath="." genericantfile="build.xml" inheritall="false" ></subant>
		<subant target="frogger" buildpath="." genericantfile="build.xml" inheritall="false" ></subant>
		<subant target="barbie" buildpath="." genericantfile="build.xml" inheritall="false" ></subant>
		<subant target="animations" buildpath="." genericantfile="build.xml" inheritall="false" ></subant>
	</target>

</project>
<!-- This file controls the build process.                    -->
<!-- The most important target is the "j2mepolish",           -->
<!-- which controls for what devices the application should   -->
<!-- be created and so on.                                    -->
<!--                                                          -->
<!-- Call the "emulator" target to skip the obfuscation       -->
<!-- and to build the example for only one handsets.          -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->
<project 
	name="messaging" 
	default="j2mepolish">
	
	<!-- import user specific properties                          -->
	<property file="${user.name}.properties" />
	
	<!-- The polish.home property needs to point to the directory -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" location="%{INSTALL_PATH}" />
	
	<!-- import global properties                                 -->
	<property file="${polish.home}/global.properties" />

		
	<!-- the device for the test mode - you can define it on the command-line
	     using the -D switch, e.g. ant -Ddevice=Generic/midp2 emulator -->
	<property name="device" value="Generic/AnyPhone"/>
	<property name="devices" value="${device},Generic/AnyMsaPhone,Sony-Ericsson/JavaPlatform8,Nokia/Series40SDK20"/>
	
	

	<!-- Definition of the J2ME Polish task:                      -->
	<taskdef name="j2mepolish" 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/lib/enough-j2mepolish-build.jar"
	/>
	
		
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default-target -->
				
	<target name="init">
	  	<property name="test" value="false" />
	  	<property name="customization" value="" /><!-- use empty value in case none has been set before -->
		<property name="dir.work" value="build/real/${customization}" />
		<property name="dir.dist" value="dist/${customization}" />
		<property name="deploy-url" value="" />
	</target>
	 
	<!-- In this target the J2ME Polish task is used.             -->
	<!-- It has 4 sections:                                       -->
	<!--    1. The info-section defines some general information  -->
	<!--    2. The deviceRequirements-section chooses the devices -->
	<!--       for which the application is build.                -->
	<!--    3. The build-section controls the actual build        -->
	<!--       process.                                           -->	
	<!--    4. The emulator-section calls the emulator            -->
	<target name="j2mepolish" 
			depends="init"
			description="This is the controller for the J2ME build process." 
			>
		<j2mepolish>
		    <!-- general settings, these settings basically form the JAD-attributes. -->
		    <!-- Have a look at the <jad>-section for setting specialised attributes.
		         You can also define localized attributes in the resources/messages.txt files -->
			<info
				name="Messaging"
				version="1.0.0"
				description="Please describe me"
				vendorName="Enough Software"
				infoUrl="http://www.j2mepolish.org"
				jarName="${polish.vendor}-${polish.name}-${polish.locale}-messaging.jar" 
				jarUrl="${deploy-url}${polish.jarName}"
				copyright="Copyright 2013 Your Company. All rights reserved."
			/>
			<!-- selection of supported devices -->
			<deviceRequirements if="test">
				<requirement name="Identifier" value="${device}" />
			</deviceRequirements>
			<deviceRequirements unless="test">
				<requirement name="Identifier" value="${devices}" />
				<!-- on could use other devices for real builds, e.g. :
				<requirement name="Term" value="polish.api.nokia-ui and polish.midp2" />
				or:
				<or>
					<and>
						<requirement name="JavaPackage" value="nokia-ui" />
						<requirement name="BitsPerPixel" value="16+" />
					</and>
				</or>
				 -->
			</deviceRequirements>
		    <!-- build settings -->
			<build
				usePolishGui="true"
				workDir="${dir.work}"
				destDir="${dir.dist}"
			>
				<!-- midlets definition -->
				<!-- CHANGE THIS!       -->
				<midlet class="de.enough.polish.app.App" name="Messaging" />
				<!-- project-wide variables - used for preprocessing.  -->
				<!-- You can set localized variables in the resources/messages.txt files as well.  -->
				<variables includeAntProperties="true" >
					<variable file="configuration/configuration.properties" />
					<!-- allow customized configuration settings: -->
					<variable file="configuration/${customization}/configuration.properties" />
					<variable
						name="polish.FullScreen"
						value="menu" 
						unless="polish.blackberry or polish.android or (polish.NokiaUiApiVersion >= 1.1b)" 
					/>
					<variable
						name="polish.useNativeAlerts"
						value="true" 
						if="polish.blackberry or polish.android or (polish.NokiaUiApiVersion >= 1.1b)" 
					/>
					<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
					<variable name="polish.ScreenInfo.enable" value="true" />
					<variable name="polish.useScrollBar" value="true" />
					<variable name="polish.TextField.useDirectInput" value="true" />
					<variable name="polish.TextField.includeInputInfo" value="true" />
					<variable name="polish.TextField.supportSymbolsEntry" value="true" />
				</variables>
				<!-- Configure the customization settings here: -->
				<resources
					dir="resources/base"
					defaultexcludes="yes"
					excludes="readme.txt"
				>
					<root dir="resources/base/i18n" />
					<root dir="resources/base/images" />
					<root dir="resources/base/sounds" />
					<root dir="resources/base/style" />
					<root dir="resources/${customization}" if="build.${customization}" />
					<root dir="resources/${customization}/i18n" if="build.${customization}" />
					<root dir="resources/${customization}/images" if="build.${customization}" />
					<root dir="resources/${customization}/sounds" if="build.${customization}" />
					<root dir="resources/${customization}/style" if="build.${customization}" />
					<!-- add the localization element for created localized
					     versions of your application: 
					-->
					<localization>
						<locale name="en_US" />
						<locale name="de_DE" encoding="utf-8" unless="test" />
					</localization>
				</resources>
				<!-- obfuscator settings: do not obfuscate when the test-property is true -->
				<obfuscator name="ProGuard" unless="test or polish.blackberry" >
					<!--
					You can set additional parameters here, e.g.:
					<parameter name="optimize" value="false" />
					-->
				</obfuscator>
				<!-- log settings: only use debug setting when the test-property is true -->
				<debug if="test or log" verbose="true" level="error">
					<filter pattern="de.enough.polish.example.*" level="debug" />
					<filter pattern="de.enough.polish.ui.*" level="warn" />
					<!-- example for writing log entries to the Recordstore Management System: 
					<handler name="rms" />
					-->
				</debug>
				<!-- user defined JAD attributes can also be used: -->
				<jad>
					<attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
				</jad>	
			</build>
			
			<!-- execution of emulator(s) -->
			<emulator
				wait="true"
				securityDomain="trusted"
				enableProfiler="true"
				enableMemoryMonitor="true"
				enableNetworkMonitor="true"
				if="debug"
				>
				<!-- this is an example for connecting to a debugger - use the ${polish.debug.port} Ant property
				     for getting to know the port of the debugger. In this example the 
				     "connect-debugger" target is also required.
				-->
				<!--
				<debugger name="antcall" target="connect-debugger" port="6001" />
				-->
			</emulator>
                        
			<emulator
				wait="true"
				trace="none"
				securityDomain="trusted"
				enableProfiler="false"
				enableMemoryMonitor="false"
				enableNetworkMonitor="false"
				if="test and not debug"
				>
			</emulator>

		
		</j2mepolish>
	</target>
	
	<target name="setdeploy" 
		description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
		>
		<property name="deploy-url" value="http://www.company.com/download/" />
	</target>
	
	<target name="enableDebug" 
		>
		<property name="debug" value="true" />
	</target>
	
		
	<target name="enableEmulator" 
		>
		<property name="test" value="true" />
	  	<property name="customization" value="" /><!-- use empty value in case none has been set before -->
		<property name="dir.work" value="build/test/${customization}" />
	</target>

	<target 
		name="emulator"
		depends="enableEmulator,j2mepolish"
		description="invokes the emulator"
	>
	</target>

	<target name="clean" 
	  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
		<delete dir="build" />
		<delete dir="dist" includes="**/*" />
	</target>

	<target  
		name="cleanbuild"
		description="allows a clean build. You should call [ant cleanbuild] whenever you made changes to devices.xml, vendors.xml or groups.xml"
		depends="clean, j2mepolish"
	/>
	
    <target name="debug" description="debugs the project" depends="enableDebug, enableEmulator, j2mepolish" />
	
	<target name="enableCustomization1">
		<property name="customization" value="customization1" />
		<property name="build.customization1" value="true" />
	</target>
		
	<target name="buildCustomization1"
			description="customizes this project with the settings found in resources/customization1"
			depends="enableCustomization1, j2mepolish"
	/>
	
	<target name="enableCustomization2">
		<property name="customization" value="customization2" />
		<property name="build.customization2" value="true" />
	</target>
		
	<target name="buildCustomization2"
			description="customizes this project with the settings found in resources/customization2"
			depends="enableCustomization2, j2mepolish"
	/>
	
	<target 
		name="buildAllCustomizations"
		description="Builds your application in all customizations." 
		>
		<subant target="buildCustomization1" buildpath="." genericantfile="build.xml" inheritall="false" ></subant>
		<subant target="buildCustomization2" buildpath="." genericantfile="build.xml" inheritall="false" ></subant>
	</target>

	

</project>
<!-- This file controls the build process.                    -->
<!-- The most important target is the "j2mepolish",           -->
<!-- which controls for what devices the application should   -->
<!-- be created and so on.                                    -->
<!--                                                          -->
<!-- Call the "emulator" target to skip the obfuscation       -->
<!-- and to build the example for only one handsets.          -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->
<project 
	name="enough-j2mepolish-processing-tree" 
	default="j2mepolish">
	
	<!-- import user specific properties                          -->
	<property file="${user.name}.properties" />
	
	<!-- The polish.home property needs to point to the directory -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" location="%{INSTALL_PATH}" />
	
	<!-- import global properties                                 -->
	<property file="${polish.home}/global.properties" />

		
	<!-- the device for the test mode - you can define it on the command-line
	     using the -D switch, e.g. ant -Ddevice=Generic/midp2 emulator -->
	<property name="device" value="Generic/AnyPhone"/>
	<property name="devices" value="${device},Generic/AnyMsaPhone,Nokia/Series40E3,Nokia/Series60E3,Sony-Ericsson/JavaPlatform7,Sony-Ericsson/JavaPlatform8"/>
	
	

	<!-- Definition of the J2ME Polish task:                      -->
	<taskdef name="j2mepolish" 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/lib/enough-j2mepolish-build.jar"
	/>
	
		
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default-target -->
	
	<target name="setdeploy" 
		description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
		>
		<property name="deploy-url" value="http://www.company.com/download/" />
	</target>
	
	<target name="enableDebug" 
		description="Call this target first to skip the obfuscation step, call the emulator and start the debugger, e.g. ant enableDebug j2mepolish"
		>
		<property name="debug" value="true" />
	</target>
	
		
	<target name="test" 
		description="Call this target first to skip the obfuscation step and call the emulator, e.g. ant test j2mepolish"
		>
		<property name="test" value="true" />
		<property name="dir.work" value="build/test" />
	</target>
			
	<target name="init">
	  	<property name="test" value="false" />
		<property name="dir.work" value="build/real" />
		<property name="deploy-url" value="" />
		<property name="resource.dir" value="resources" />
	</target>
	 
	<!-- In this target the J2ME Polish task is used.             -->
	<!-- It has 3 sections:                                       -->
	<!--    1. The info-section defines some general information  -->
	<!--    2. The deviceRequirements-section chooses the devices -->
	<!--       for which the application is optimized.            -->
	<!--    3. The build-section controls the actual build        -->
	<!--       process.                                           -->	
	<target name="j2mepolish" 
			depends="init"
			description="This is the controller for the J2ME build process." 
			>
		<j2mepolish>
		    <!-- general settings, these settings basically form the JAD-attributes. -->
		    <!-- Have a look at the <jad>-section for setting specialised attributes.
		         You can also define localized attributes in the resources/messages.txt files -->
			<info
				name="Processing Tree Sample"
				version="1.0.0"
				description="Using Processing in J2ME Polish."
				vendorName="Enough Software"
				infoUrl="http://www.j2mepolish.org"
				jarName="${polish.vendor}-${polish.name}-${polish.locale}-processing-tree.jar" 
				jarUrl="${deploy-url}${polish.jarName}"
				copyright="Copyright 2011 Enough Software. All rights reserved."
				icon="icon.png"
			/>
			<!-- selection of supported devices -->
			<!-- In the test mode the application is build only for the  -->
			<!-- Generic/midp1 phone, but when the test-property is set to false, -->
			<!-- the second deviceRequirements will be used instead. -->
			<deviceRequirements if="test">
				<requirement name="Identifier" value="${device}" />
			</deviceRequirements>
			<deviceRequirements unless="test">
				<requirement name="Identifier" value="${devices}" />
				<!-- on could use other devices for real builds, e.g. :
				<or>
					<and>
						<requirement name="JavaPackage" value="nokia-ui" />
						<requirement name="BitsPerPixel" value="16+" />
					</and>
				</or>
				 -->
			</deviceRequirements>
		    <!-- build settings -->
			<!-- 
			 -->
			<build
				symbols="ExampleSymbol, AnotherExample"
				usePolishGui="true"
				workDir="${dir.work}"
			>
				<!-- midlets definition -->
				<midlet class="de.enough.polish.sample.processing.tree.ProcessingTreeMidlet" name="Processing Sample - Tree"/>
				<!-- project-wide variables - used for preprocessing.  -->
				<!-- You can set localized variables in the resources/messages.txt files as well.  -->
				<variables includeAntProperties="true" >
					<!-- use the advanced menubar mode that offers near-native command handling and positioning, on BB and Android use native commands: -->
					<variable
						name="polish.FullScreen"
						value="menu" 
						unless="polish.blackberry || polish.android" 
					/>
					<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
					<variable name="polish.useScrollBar" value="true" />
				</variables>
				<!-- Here you can set the dir attribute to "resources2" for an alternative design. -->
				<resources
					dir="resources"
					defaultexcludes="yes"
					excludes="readme.txt"
				>
					<!-- add the localization element for created localized
					     versions of your application: -->
					<localization locales="en_US" unless="test" />
				</resources>
				<!-- obfuscator settings: do not obfuscate when the test-property is true -->
				<obfuscator name="ProGuard" unless="test or polish.blackberry" >
					<!--
					You can set additional parameters here, e.g.:
					<parameter name="optimize" value="false" />
					-->
				</obfuscator>
				<!-- debug settings: only include debug setting when the test-property is true -->
				<debug if="test or log" verbose="true" level="error">
					<filter pattern="de.enough.polish.example.*" level="debug" />
					<filter pattern="de.enough.polish.ui.*" level="warn" />
				</debug>
				<!-- user defined JAD attributes can also be used: -->
				<jad>
					<attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
				</jad>	
			</build>
			
			<!-- execution of emulator(s) -->
			<emulator
				wait="true"
				securityDomain="trusted"
				enableProfiler="true"
				enableMemoryMonitor="true"
				enableNetworkMonitor="true"
				if="debug"
				>
				<!-- this is an example for connecting to a debugger - use the ${polish.debug.port} Ant property
				     for getting to know the port of the debugger. In this example the 
				     "connect-debugger" target is also required.
				-->
				<!--
				<debugger name="antcall" target="connect-debugger" port="6001" />
				-->
			</emulator>
                        
			<emulator
				wait="true"
				trace="none"
				securityDomain="trusted"
				enableProfiler="false"
				enableMemoryMonitor="false"
				enableNetworkMonitor="false"
				if="test and not debug"
				>
			</emulator>

		
		</j2mepolish>
	</target>
	
	<target 
		name="emulator"
		depends="test,j2mepolish"
		description="invokes the emulator"
	>
	</target>

	<target name="clean" 
	  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
		<delete dir="build" />
		<delete dir="dist" includes="**/*" />
	</target>

	<target  
		name="cleanbuild"
		description="allows a clean build. You should call [ant cleanbuild] whenever you made changes to devices.xml, vendors.xml or groups.xml"
		depends="clean, j2mepolish"
	/>
	
    <target name="debug" description="debugs the project" depends="enableDebug, test, j2mepolish" />

</project>
<!-- This file controls the build process.                    -->
<!-- The most important target is the "j2mepolish",           -->
<!-- which controls for what devices the application should   -->
<!-- be created and so on.                                    -->
<!--                                                          -->
<!-- Call the "emulator" target to skip the obfuscation       -->
<!-- and to build the example for only one handsets.          -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->
<project 
	name="enough-j2mepolish-rgbfilter" 
	default="j2mepolish">
	
	<!-- import user specific properties                          -->
	<property file="${user.name}.properties" />
	
	<!-- The polish.home property needs to point to the directory -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" location="%{INSTALL_PATH}" />
	
	<!-- import global properties                                 -->
	<property file="${polish.home}/global.properties" />


		
	<!-- the device for the test mode - you can define it on the command-line
	     using the -D switch, e.g. ant -Ddevice=Generic/AnyMsaPhone emulator -->
	<property name="device" value="Generic/AnyPhone"/>
	<property name="devices" value="${device},Nokia/Series40E3,Nokia/Series60E2,Nokia/Series60E3,Sony-Ericsson/JavaPlatform7,Sony-Ericsson/JavaPlatform8"/>
	


	<!-- Definition of the J2ME Polish task:                      -->
	<taskdef name="j2mepolish" 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/lib/enough-j2mepolish-build.jar"
	/>
	
		
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default-target -->
	
	<target name="setdeploy" 
		description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
		>
		<property name="deploy-url" value="http://www.company.com/download/" />
	</target>
	
	<target name="enableDebug" 
		description="Call this target first to skip the obfuscation step, call the emulator and start the debugger, e.g. ant enableDebug j2mepolish"
		>
		<property name="debug" value="true" />
	</target>
	
		
	<target name="test" 
		description="Call this target first to skip the obfuscation step and call the emulator, e.g. ant test j2mepolish"
		>
		<property name="test" value="true" />
		<property name="dir.work" value="build/test" />
	</target>
			
	<target name="init">
	  	<property name="test" value="false" />
		<property name="dir.work" value="build/real" />
		<property name="deploy-url" value="" />
		<property name="resource.dir" value="resources" />
	</target>
	 
	<!-- In this target the J2ME Polish task is used.             -->
	<!-- It has 3 sections:                                       -->
	<!--    1. The info-section defines some general information  -->
	<!--    2. The deviceRequirements-section chooses the devices -->
	<!--       for which the application is optimized.            -->
	<!--    3. The build-section controls the actual build        -->
	<!--       process.                                           -->	
	<target name="j2mepolish" 
			depends="init"
			description="This is the controller for the J2ME build process." 
			>
		<j2mepolish>
		    <!-- general settings, these settings basically form the JAD-attributes. -->
		    <!-- Have a look at the <jad>-section for setting specialised attributes.
		         You can also define localized attributes in the resources/messages.txt files -->
			<info
				name="RGB Filter"
				version="2.1.4"
				description="A simple project that uses RGB filter."
				vendorName="Enough Software"
				infoUrl="http://www.j2mepolish.org"
				icon="icon0.png"
				jarName="${polish.vendor}-${polish.name}-${polish.locale}-rgbfilter.jar" 
				jarUrl="${deploy-url}${polish.jarName}"
				copyright="Copyright 2011 Enough Software. All rights reserved."
			/>
			<!-- selection of supported devices -->
			<!-- In the test mode the application is build only for the  -->
			<!-- Generic/midp1 phone, but when the test-property is set to false, -->
			<!-- the second deviceRequirements will be used instead. -->
			<deviceRequirements if="test">
				<requirement name="Identifier" value="${device}" />
			</deviceRequirements>
			<deviceRequirements unless="test">
				<requirement name="Identifier" value="${devices}" />
				<!-- on could use other devices for real builds, e.g. :
				<or>
					<and>
						<requirement name="JavaPackage" value="nokia-ui" />
						<requirement name="BitsPerPixel" value="16+" />
					</and>
				</or>
				 -->
			</deviceRequirements>
		    <!-- build settings -->
			<!-- 
			 -->
			<build
				symbols="ExampleSymbol, AnotherExample"
				usePolishGui="true"
				workDir="${dir.work}"
			>
				<!-- midlets definition -->
				<midlet class="de.enough.polish.example.MenuMidlet" name="RGB Filter" />
				<!-- project-wide variables - used for preprocessing.  -->
				<!-- You can set localized variables in the resources/messages.txt files as well.  -->
				<variables includeAntProperties="true" >
					<!-- use the advanced menubar mode that offers near-native command handling and positioning, on BB and Android use native commands: -->
					<variable
						name="polish.FullScreen"
						value="menu" 
						unless="polish.blackberry || polish.android" 
					/>
					<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
					<!-- example variables:
					You can change the title of the sample application with the "title"-var.
					-->
					<variable name="title" value="J2ME Polish" />
				</variables>
				<!-- Here you can set the dir attribute to "resources2" for an alternative design. -->
				<resources
					dir="${resource.dir}"
					defaultexcludes="yes"
					excludes="readme.txt"
				>
					<!-- you can also use several root directories for your resource assembling.
					     This is useful for customizations and for having a cleanly structured 
					     resources directory (for example seperating images from sounds, etc):
					<root dir="resources/images" />
					<root dir="resources/sounds" />
					<root dir="resources/customer1" if="customer1" />
					<root dir="resources/customer2" if="customer2" />
					-->
					<!-- add the localization element for created localized
					     versions of your application: -->
					<localization locales="de_DE, en_US" unless="test" />
					<localization locales="en_US" if="test" />
				</resources>
				<!-- obfuscator settings: do not obfuscate when the test-property is true -->
				<obfuscator name="ProGuard" unless="test or polish.blackberry" >
					<!--
					You can set additional parameters here, e.g.:
					<parameter name="optimize" value="false" />
					-->
				</obfuscator>
				<!-- debug settings: only include debug setting when the test-property is true -->
				<debug if="test or log" verbose="true" level="error">
					<filter pattern="de.enough.polish.example.*" level="debug" />
					<filter pattern="de.enough.polish.ui.*" level="warn" />
				</debug>
				<!-- user defined JAD attributes can also be used: -->
				<jad>
					<attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
				</jad>	
				<!-- 
				   This is an example for signing MIDlets with J2ME Polish. 
				   You can set the password on the commandline by calling "ant -Dpassword=secret",
				   or by setting the Ant property above.
				   Signing is done only for MIDP/2.0 devices.
				-->
				<!--
				<sign
					key="SignMIDlet"
					keystore="midlets.ks"
					password="${password}"
					unless="test"
				/>
				-->
			</build>
			
			<!-- execution of emulator(s) -->
			<emulator
				wait="true"
				securityDomain="trusted"
				enableProfiler="true"
				enableMemoryMonitor="true"
				enableNetworkMonitor="true"
				if="debug"
				>
				<!--
				<parameter name="-Xjam" value="transient=http://localhost:8080/${polish.jadName}" />
				-->
			</emulator>
                        
			<emulator
				wait="true"
				trace="class"
				securityDomain="trusted"
				enableProfiler="false"
				enableMemoryMonitor="false"
				enableNetworkMonitor="false"
				if="test and not debug"
				>
				<!-- this is an example for connecting to a debugger - use the ${polish.debug.port} Ant property
				     for getting to know the port of the debugger. In this example the 
				     "connect-debugger" target is also required.
				-->
				<!--
				<debugger name="antcall" target="connect-debugger" port="6001" />
				-->
			</emulator>

		
		</j2mepolish>
	</target>
	
	<target 
		name="emulator"
		depends="test,j2mepolish"
		description="invokes the emulator"
	>
	</target>

	<target name="clean" 
	  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
		<delete dir="build" />
		<delete dir="dist" includes="**/*" />
	</target>

	<target  
		name="cleanbuild"
		description="allows a clean build. You should call [ant cleanbuild] whenever you made changes to devices.xml, vendors.xml or groups.xml"
		depends="clean, j2mepolish"
	/>

	<target name="enableBarbie" >
		<property name="resource.dir" value="resources2" />
		<property name="dir.work" value="build/barbie" />
	</target>
	
    <target name="barbie" description="launches the application with the barbie design" depends="enableBarbie, test, j2mepolish" />

	<target name="enableFrog" >
		<property name="resource.dir" value="resources3" />
		<property name="dir.work" value="build/frog" />
	</target>
	
    <target name="frog" description="launches the application with the frog design" depends="enableFrog, test, j2mepolish" />
	
    <target name="debug" description="debugs the project" depends="enableDebug, test, j2mepolish" />

</project>
<!-- This file controls the build process.                    -->
<!-- The most important target is the "j2mepolish",           -->
<!-- which controls for what devices the application should   -->
<!-- be created and so on.                                    -->
<!--                                                          -->
<!-- Call the "emulator" target to skip the obfuscation       -->
<!-- and to build the example for only one handsets.          -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->
<project 
	name="enough-j2mepolish-rmi" 
	default="j2mepolish">
	
	<!-- import user specific properties                          -->
	<property file="${user.name}.properties" />
	
	<!-- The polish.home property needs to point to the directory -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" location="%{INSTALL_PATH}" />
	
	<!-- import global properties                                 -->
	<property file="${polish.home}/global.properties" />

		
	<!-- the home of the server based web application - is needed in the deploy-war target -->
	<property name="webapps.home" location="/Users/robertvirkus/dev/apache-tomcat-5.5.17/webapps" />
	<!-- the device for the test mode - you can define it on the command-line
	     using the -D switch, e.g. ant -Ddevice=Generic/midp2 emulator -->
	<property name="device" value="Generic/AnyPhone"/>
	<property name="devices" value="${device},Generic/AnyMsaPhone,Nokia/Series40E3,Nokia/Series60E3,Sony-Ericsson/JavaPlatform7,Sony-Ericsson/JavaPlatform8"/>
	
	

	<!-- Definition of the J2ME Polish task:                      -->
	<taskdef name="j2mepolish" 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/lib/enough-j2mepolish-build.jar"
	/>
	
	<!-- Definition of the present helper task:                      -->
	<taskdef name="present" 
		classname="de.enough.polish.ant.PresentTask" 
		classpath="${polish.home}/bin/classes:${polish.home}/lib/enough-j2mepolish-build.jar"/>

	
		
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default-target -->
	
	<target name="setdeploy" 
		description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
		>
		<property name="deploy-url" value="http://www.company.com/download/" />
	</target>
	
	<target name="enableDebug" 
		description="Call this target first to skip the obfuscation step, call the emulator and start the debugger, e.g. ant enableDebug j2mepolish"
		>
		<property name="debug" value="true" />
	</target>
	
		
	<target name="test" 
		description="Call this target first to skip the obfuscation step and call the emulator, e.g. ant test j2mepolish"
		>
		<property name="test" value="true" />
		<property name="dir.work" value="build/test" />
	</target>
			
	<target name="init">
	  	<property name="test" value="false" />
		<property name="dir.work" value="build/real" />
		<property name="deploy-url" value="" />
		<property name="resource.dir" value="resources" />
	</target>
	 
	<!-- In this target the J2ME Polish task is used.             -->
	<!-- It has 3 sections:                                       -->
	<!--    1. The info-section defines some general information  -->
	<!--    2. The deviceRequirements-section chooses the devices -->
	<!--       for which the application is optimized.            -->
	<!--    3. The build-section controls the actual build        -->
	<!--       process.                                           -->	
	<target name="j2mepolish" 
			depends="init"
			description="This is the controller for the J2ME build process." 
			>
		<j2mepolish>
		    <!-- general settings, these settings basically form the JAD-attributes. -->
		    <!-- Have a look at the <jad>-section for setting specialised attributes.
		         You can also define localized attributes in the resources/messages.txt files -->
			<info
				name="WordTracker"
				version="1.0.0"
				description="A demonstration of the RMI Framework."
				vendorName="Enough Software"
				infoUrl="http://www.j2mepolish.org"
				jarName="${ nospace(polish.vendor) }-${ nospace(polish.name) }-xmlrpc.jar" 
				jarUrl="${deploy-url}${polish.jarName}"
				copyright="Copyright 2011 Enough Software. All rights reserved."
			/>
			<!-- selection of supported devices -->
			<!-- In the test mode the application is build only for the  -->
			<!-- Generic/midp1 phone, but when the test-property is set to false, -->
			<!-- the second deviceRequirements will be used instead. -->
			<deviceRequirements if="test">
				<requirement name="Identifier" value="${device}" />
			</deviceRequirements>
			<deviceRequirements unless="test">
				<requirement name="Identifier" value="${device}" />
			</deviceRequirements>
		    <!-- build settings -->
			<!-- 
			 -->
			<build
				symbols="ExampleSymbol, AnotherExample"
				usePolishGui="true"
				workDir="${dir.work}"
			>
				<!-- midlets definition -->
				<midlet class="de.enough.polish.sample.rmi.WordTrackerMidlet" name="Word Tracker"/>
				<!-- project-wide variables - used for preprocessing.  -->
				<!-- You can set localized variables in the resources/messages.txt files as well.  -->
				<variables includeAntProperties="true" >
					<!-- use the advanced menubar mode that offers near-native command handling and positioning, on BB and Android use native commands: -->
					<variable
						name="polish.FullScreen"
						value="menu" 
						unless="polish.blackberry || polish.android" 
					/>
					<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
					<variable name="polish.useScrollBar" value="true" />
					<!-- activate text input over J2ME Polish TextFields (without opening a new TextBox for each input: 
					<variable name="polish.TextField.useDirectInput" value="true" />
					- activate input of symbols: -
					<variable name="polish.TextField.supportSymbolsEntry" value="true" />
					<variable name="polish.TextField.Symbols" value="&quot;@#()&lt;&gt;&amp;;,.:!/\~$%^*" />
					- activate switching to the native (e.g.T9) input mode: -
					<variable name="polish.TextField.allowNativeModeSwitch" value="true" />
					- suppress List-select commands -
					<variable name="polish.List.suppressSelectCommand" value="true" />
					-
					You can also suppress ir rename the Add Symbol command:
					<variable name="polish.TextField.suppressAddSymbolCommand" value="true" if="polish.key.AddSymbolKey:defined" />
					<variable name="polish.command.entersymbol" value="Add Symbol" />
					-->
					<variable name="polish.TextField.useDirectInput" value="true" />
					<variable name="polish.rmi.redirects" value="false" />
					<variable name="polish.rmi.xmlrpc" value="true" />
					<variable name="polish.useScrollBar" value="true" />
					<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
				</variables>
				<!-- Here you can set the dir attribute to "resources2" for an alternative design. -->
				<resources
					dir="${resource.dir}"
					defaultexcludes="yes"
					excludes="readme.txt"
				>
					<!-- add the localization element for created localized
					     versions of your application: 
					<localization locales="de_DE, en_US" unless="test" />
					<localization locales="en_US" if="test" />
					-->
				</resources>
				<!-- obfuscator settings: always obfuscate -->
				<obfuscator name="ProGuard" unless="dontobfuscate or test" />
				
				<!-- debug/log settings: only include debug setting when the test-property is true -->
				<debug level="info" verbose="true" logTimestamp="true"  if="test">
					<filter level="debug" package="de.enough.polish.sample.rmi"/>
					<!--
					<filter level="debug" class="de.enough.polish.ui.TabbedForm"/>
					<filter level="debug" class="de.enough.polish.ui.Container"/>
					<filter level="debug" class="de.enough.polish.ui.Screen"/>
					<filter level="debug" class="de.enough.polish.ui.MenuBar"/>
					-->
				</debug>
				<!-- user defined JAD attributes can also be used: -->
				<jad>
					<attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
				</jad>	
			</build>
			
			<!-- execution of emulator(s) -->
			<emulator
				wait="true"
				securityDomain="trusted"
				enableProfiler="true"
				enableMemoryMonitor="true"
				enableNetworkMonitor="true"
				if="debug"
				>
				<!-- this is an example for connecting to a debugger - use the ${polish.debug.port} Ant property
				     for getting to know the port of the debugger. In this example the 
				     "connect-debugger" target is also required.
				-->
				<!--
				<debugger name="antcall" target="connect-debugger" port="6001" />
				-->
			</emulator>
                        
			<emulator
				wait="true"
				trace="none"
				securityDomain="trusted"
				enableProfiler="false"
				enableMemoryMonitor="false"
				enableNetworkMonitor="false"
				if="test and not debug"
				>
			</emulator>

		
		</j2mepolish>
	</target>
	
	<target 
		name="emulator"
		depends="test,j2mepolish"
		description="invokes the emulator"
	>
	</target>
	
	<target name="build-war" description="builds the server war file for Tomcat or other J2EE/Servlet Containers.">
		<present file="dist/client-rmi-classes.jar" failMessage="Please run either the j2mepolish or the build-all target first." />
		<copy file="${polish.home}/lib/enough-j2mepolish-rmi.jar" todir="dist" />
		<delete dir="bin/server" />
		<mkdir dir="bin/server" />
		<javac srcdir="source/server" destdir="bin/server" classpath="dist/client-rmi-classes.jar:dist/enough-j2mepolish-rmi.jar" />
		<jar destfile="dist/gameserver.jar" basedir="bin/server" excludes="**/CVS" />
	 	<war 
			destfile="dist/gameserver.war"
	 		webxml="source/server/web.xml"
		>
	 		<lib dir="dist" includes="client-rmi-classes.jar,enough-j2mepolish-rmi.jar,gameserver.jar" />
		</war>
	</target>
	
	<target name="deploy-war" depends="build-war" description="builds and deploys the war file to $webapps.home">
		<copy file="dist/gameserver.war" todir="${webapps.home}" />
	</target>
		

	<target name="build-all" depends="clean,j2mepolish,build-war" description="builds both the client and the server code of the application"/>

	<target name="clean" 
	  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
		<delete dir="build" />
		<delete dir="dist" includes="**/*" />
	</target>

	<target  
		name="cleanbuild"
		description="allows a clean build. You should call [ant cleanbuild] whenever you made changes to devices.xml, vendors.xml or groups.xml"
		depends="clean, j2mepolish"
	/>
	
    <target name="debug" description="debugs the project" depends="enableDebug, test, j2mepolish" />

</project>
<!-- This file controls the build process.                    -->
<!-- The most important target is the "j2mepolish",           -->
<!-- which controls for what devices the application should   -->
<!-- be created and so on.                                    -->
<!--                                                          -->
<!-- Call the "emulator" target to skip the obfuscation       -->
<!-- and to build the example for only one handsets.          -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->
<project 
	name="enough-j2mepolish-rmi" 
	default="j2mepolish">
	
	<!-- import user specific properties                          -->
	<property file="${user.name}.properties" />
	
	<!-- The polish.home property needs to point to the directory -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" location="%{INSTALL_PATH}" />
	
	<!-- import global properties                                 -->
	<property file="${polish.home}/global.properties" />

		
	<!-- the home of the server based web application - is needed in the deploy-war target -->
	<property name="webapps.home" location="/Users/robertvirkus/dev/apache-tomcat-5.5.17/webapps" />
	<!-- the device for the test mode - you can define it on the command-line
	     using the -D switch, e.g. ant -Ddevice=Generic/midp2 emulator -->
	<property name="device" value="Generic/AnyPhone"/>
	<property name="devices" value="${device},Generic/AnyMsaPhone,Nokia/Series40E3,Nokia/Series60E3,Sony-Ericsson/JavaPlatform7,Sony-Ericsson/JavaPlatform8"/>
	
	

	<!-- Definition of the J2ME Polish task:                      -->
	<taskdef name="j2mepolish" 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/lib/enough-j2mepolish-build.jar"
	/>
	
	<!-- Definition of the present helper task:                      -->
	<taskdef name="present" 
		classname="de.enough.polish.ant.PresentTask" 
		classpath="${polish.home}/bin/classes:${polish.home}/lib/enough-j2mepolish-build.jar"/>

	
		
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default-target -->
	
	<target name="setdeploy" 
		description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
		>
		<property name="deploy-url" value="http://www.company.com/download/" />
	</target>
	
	<target name="enableDebug" 
		description="Call this target first to skip the obfuscation step, call the emulator and start the debugger, e.g. ant enableDebug j2mepolish"
		>
		<property name="debug" value="true" />
	</target>
	
		
	<target name="test" 
		description="Call this target first to skip the obfuscation step and call the emulator, e.g. ant test j2mepolish"
		>
		<property name="test" value="true" />
		<property name="dir.work" value="build/test" />
	</target>
			
	<target name="init">
	  	<property name="test" value="false" />
		<property name="dir.work" value="build/real" />
		<property name="deploy-url" value="" />
		<property name="resource.dir" value="resources" />
	</target>
	 
	<!-- In this target the J2ME Polish task is used.             -->
	<!-- It has 3 sections:                                       -->
	<!--    1. The info-section defines some general information  -->
	<!--    2. The deviceRequirements-section chooses the devices -->
	<!--       for which the application is optimized.            -->
	<!--    3. The build-section controls the actual build        -->
	<!--       process.                                           -->	
	<target name="j2mepolish" 
			depends="init"
			description="This is the controller for the J2ME build process." 
			>
		<j2mepolish>
		    <!-- general settings, these settings basically form the JAD-attributes. -->
		    <!-- Have a look at the <jad>-section for setting specialised attributes.
		         You can also define localized attributes in the resources/messages.txt files -->
			<info
				name="GameMidlet"
				version="1.0.0"
				description="A demonstration of the RMI Framework."
				vendorName="Enough Software"
				infoUrl="http://www.j2mepolish.org"
				jarName="${ nospace(polish.vendor) }-${ nospace(polish.name) }-rmi.jar" 
				jarUrl="${deploy-url}${polish.jarName}"
				copyright="Copyright 2011 Enough Software. All rights reserved."
			/>
			<!-- selection of supported devices -->
			<!-- In the test mode the application is build only for the  -->
			<!-- Generic/midp1 phone, but when the test-property is set to false, -->
			<!-- the second deviceRequirements will be used instead. -->
			<deviceRequirements if="test">
				<requirement name="Identifier" value="${device}" />
			</deviceRequirements>
			<deviceRequirements unless="test">
				<requirement name="Identifier" value="${device}" />
			</deviceRequirements>
		    <!-- build settings -->
			<!-- 
			 -->
			<build
				symbols="ExampleSymbol, AnotherExample"
				usePolishGui="true"
				workDir="${dir.work}"
			>
				<!-- midlets definition -->
				<midlet class="de.enough.polish.sample.rmi.GameMidlet" name="Remote Gaming"/>
				<!-- project-wide variables - used for preprocessing.  -->
				<!-- You can set localized variables in the resources/messages.txt files as well.  -->
				<variables includeAntProperties="true" >
					<!-- use the advanced menubar mode that offers near-native command handling and positioning, on BB and Android use native commands: -->
					<variable
						name="polish.FullScreen"
						value="menu" 
						unless="polish.blackberry || polish.android" 
					/>
					<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
					<variable name="polish.useScrollBar" value="true" />
					<!-- 
					You can use following mockup implementation for testing this application without using a server:
					-->
					<variable 
						name="polish.rmi.mockup.de.enough.polish.sample.rmi.GameServer" 
						value="new de.enough.polish.sample.rmi.test.MockupGameServer()"
						if="mockup"
					/>
					<!-- activate text input over J2ME Polish TextFields (without opening a new TextBox for each input: 
					<variable name="polish.TextField.useDirectInput" value="true" />
					- activate input of symbols: -
					<variable name="polish.TextField.supportSymbolsEntry" value="true" />
					<variable name="polish.TextField.Symbols" value="&quot;@#()&lt;&gt;&amp;;,.:!/\~$%^*" />
					- activate switching to the native (e.g.T9) input mode: -
					<variable name="polish.TextField.allowNativeModeSwitch" value="true" />
					- suppress List-select commands -
					<variable name="polish.List.suppressSelectCommand" value="true" />
					-
					You can also suppress ir rename the Add Symbol command:
					<variable name="polish.TextField.suppressAddSymbolCommand" value="true" if="polish.key.AddSymbolKey:defined" />
					<variable name="polish.command.entersymbol" value="Add Symbol" />
					-->
				</variables>
				<!-- Here you can set the dir attribute to "resources2" for an alternative design. -->
				<resources
					dir="${resource.dir}"
					defaultexcludes="yes"
					excludes="readme.txt"
				>
					<!-- add the localization element for created localized
					     versions of your application: 
					<localization locales="de_DE, en_US" unless="test" />
					<localization locales="en_US" if="test" />
					-->
				</resources>
				<!-- obfuscator settings: always obfuscate -->
				<obfuscator name="ProGuard" unless="polish.blackberry or dontobfuscate" />
				
				<!-- debug/log settings: only include debug setting when the test-property is true -->
				<debug level="info" verbose="true" logTimestamp="true"  if="test">
					<filter level="debug" package="de.enough.polish.sample.rmi"/>
					<!--
					<filter level="debug" class="de.enough.polish.ui.TabbedForm"/>
					<filter level="debug" class="de.enough.polish.ui.Container"/>
					<filter level="debug" class="de.enough.polish.ui.Screen"/>
					<filter level="debug" class="de.enough.polish.ui.MenuBar"/>
					-->
				</debug>
				<!-- user defined JAD attributes can also be used: -->
				<jad>
					<attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
				</jad>	
			</build>
			
			<!-- execution of emulator(s) -->
			<emulator
				wait="true"
				securityDomain="trusted"
				enableProfiler="true"
				enableMemoryMonitor="true"
				enableNetworkMonitor="true"
				if="debug"
				>
				<!-- this is an example for connecting to a debugger - use the ${polish.debug.port} Ant property
				     for getting to know the port of the debugger. In this example the 
				     "connect-debugger" target is also required.
				-->
				<!--
				<debugger name="antcall" target="connect-debugger" port="6001" />
				-->
			</emulator>
                        
			<emulator
				wait="true"
				trace="none"
				securityDomain="trusted"
				enableProfiler="false"
				enableMemoryMonitor="false"
				enableNetworkMonitor="false"
				if="test and not debug"
				>
			</emulator>

		
		</j2mepolish>
	</target>
	
	<target 
		name="emulator"
		depends="test,j2mepolish"
		description="invokes the emulator"
	>
	</target>
	
	<target name="build-war" description="builds the server war file for Tomcat or other J2EE/Servlet Containers.">
		<present file="dist/client-rmi-classes.jar" failMessage="Please run either the j2mepolish or the build-all target first." />
		<copy file="${polish.home}/lib/enough-j2mepolish-rmi.jar" todir="dist" />
		<delete dir="bin/server" />
		<mkdir dir="bin/server" />
		<javac srcdir="source/server" destdir="bin/server" classpath="dist/client-rmi-classes.jar:dist/enough-j2mepolish-rmi.jar:${polish.home}/lib/javax.servlet.jar" />
		<jar destfile="dist/gameserver.jar" basedir="bin/server" excludes="**/CVS" />
	 	<war 
			destfile="dist/gameserver.war"
	 		webxml="source/server/web.xml"
		>
	 		<lib dir="dist" includes="client-rmi-classes.jar,enough-j2mepolish-rmi.jar,gameserver.jar" />
		</war>
	</target>
	
	<target name="deploy-war" depends="build-war" description="builds and deploys the war file to $webapps.home">
		<copy file="dist/gameserver.war" todir="${webapps.home}" />
	</target>
		

	<target name="build-all" depends="clean,j2mepolish,build-war" description="builds both the client and the server code of the application"/>

	<target name="clean" 
	  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
		<delete dir="build" />
		<delete dir="dist" includes="**/*" />
	</target>

	<target  
		name="cleanbuild"
		description="allows a clean build. You should call [ant cleanbuild] whenever you made changes to devices.xml, vendors.xml or groups.xml"
		depends="clean, j2mepolish"
	/>
	
	<target name="enableMockup" >
		<property name="mockup" value="true" />
	</target>

	<target name="mockup"
			description="Builds the application with using a mockup server implementation for testing purposes"
			depends="enableMockup, j2mepolish" 
	/>

	
    <target name="debug" description="debugs the project" depends="enableDebug, test, j2mepolish" />

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!-- This file controls the build process.                    -->
<!-- The most important target is the "j2mepolish",           -->
<!-- which controls for what devices the application should   -->
<!-- be created and so on.                                    -->
<!--                                                          -->
<!-- Call the "emulator" target to skip the obfuscation       -->
<!-- and to build the example for only one handsets.          -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->
<project basedir="." default="j2mepolish" name="enough-polish-roadrunner">
	
	<!-- import user specific properties                          -->
	<property file="${user.name}.properties" />
	
	<!-- The device which is used for the emulator.               -->
	<!-- You can call Ant from the command line with another      -->
	<!-- device like this: ant -Ddevice=Generic/midp2 emulator    -->
	<property name="device" value="Generic/AnyPhone"/>
	<property name="devices" value="${device},Generic/AnyMsaPhone,Nokia/Series40E3,Nokia/Series60E3,Sony-Ericsson/JavaPlatform7,Sony-Ericsson/JavaPlatform8"/>

	<!-- The polish.home property needs to point to the directory -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" location="%{INSTALL_PATH}" />
	
	<!-- import global properties                                 -->
	<property file="${polish.home}/global.properties" />

		
	<!-- Definition of the J2ME Polish task:                      -->
	<taskdef name="j2mepolish" 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/lib/enough-j2mepolish-build.jar"
	/>
		
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant notest j2mepolish" or just "ant" for calling the default-target -->
	
	<target name="test">
		<property name="test" value="true"/>
		<property name="dir.work" value="build/test"/>
	</target>
		
	<target name="deploy">
		<property name="deploy-url" value="http://193.22.164.185:8080/"/>
	</target>
			
	<target name="init">
	  	<property name="test" value="false"/>
		<property name="deploy-url" value=""/>
		<property name="dir.work" value="build/real"/>
	</target>
	    
	<target depends="init" name="j2mepolish">
		<j2mepolish>
		    <!-- general settings -->
			<info 
				name="RoadRunner" 
				vendorName="Enough Software" 
				version="1.0.1"
				copyright="Copyright 2005 - 2011 Enough Software. All rights reserved." 
				description="A frogger clone." 
				icon="icon.png"
				infoUrl="http://www.enough.de" 
				jarName="${polish.vendor}-${polish.name}-${polish.locale}-roadrunner.jar" 
				jarUrl="${deploy-url}${polish.jarName}" 
				deleteConfirm="Do you really want to remove Roadrunner?" 
		    />
			<!-- selection of supported devices -->
			<deviceRequirements if="test">
				<requirement name="Identifier" value="${device}"/>
			</deviceRequirements>
			<deviceRequirements unless="test">
				<requirement name="Identifier" value="${devices}"/>
			</deviceRequirements>
		    <!-- build settings -->
			<build	 
					usePolishGui="true"
					sourceDir="source/src"
					workDir="${dir.work}"
				>
				<!-- midlets definition -->
				<midlet class="de.enough.roadrunner.RoadRunner" name="RoadRunner"/>
				<!-- project-wide variables - used for preprocessing  -->
				<variables>
					<!-- use the advanced menubar mode that offers near-native command handling and positioning, on BB and Android use native commands: -->
					<variable
						name="polish.FullScreen"
						value="menu" 
						unless="polish.blackberry || polish.android" 
					/>
					<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
					<variable name="polish.TiledLayer.useBackBuffer" value="true"/>
					<variable name="polish.TiledLayer.TransparentTileColor" value="0x00FF00"/>
				</variables>
				<manifestFilter if="polish.vendor == Samsung">
					Manifest-Version, MIDlet-Name, MIDlet-Version, 
					MIDlet-Vendor, MIDlet-1*,MIDlet-Icon?, MIDlet-Data-Size?, 
					MIDlet-Description?, MIDlet-Info-URL?,
					MicroEdition-Profile?, MicroEdition-Configuration?
				</manifestFilter>
				<jad>
					<filter if="polish.vendor == Samsung">
						MIDlet-Name, MIDlet-Version, MIDlet-Vendor,  
						MIDlet-1*,MIDlet-Icon?, MIDlet-Data-Size?, MIDlet-Description?,
						MIDlet-Info-URL?, MicroEdition-Profile?, MicroEdition-Configuration?
					</filter>
				</jad>
				<!-- obfuscator settings: do not obfuscate when the test-property is true -->
				<obfuscator name="ProGuard" unless="test or polish.blackberry" />
				<!-- debug settings: only include debug setting when the test-property is true -->
				<debug level="error" verbose="true" if="test">
					<filter level="debug" pattern="de.enough.roadrunner.*"/>
					<filter level="info" pattern="de.enough.polish.ui.*"/>
					<filter level="debug" pattern="de.enough.polish.ui.game.*"/>
				</debug>
				<resources
					dir="resources"
					defaultexcludes="yes"
					excludes="readme.txt, *.definition"
				>
					<localization dynamic="true" >
						<locale name="en_US" />
						<locale name="de_DE" encoding="UTF-8" />
					</localization>
						
				</resources>
			</build>
			<!-- launch emulator		-->
			<emulator if="test" />
	
		</j2mepolish>
	</target>
	
	<target 
		name="emulator"
		depends="test,j2mepolish"
		description="invokes the emulator"
	>
	</target>
	
	<target description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml" name="clean">
		<delete dir="build"/>
		<delete dir="dist" includes="**/*" />
	</target>

	<target  
		name="cleanbuild"
		description="allows a clean build. You should call [ant cleanbuild] whenever you made changes to devices.xml, vendors.xml or groups.xml"
		depends="clean, j2mepolish"
	/>

</project>
<!-- This file controls the build process.                    -->
<!-- The most important target is the "j2mepolish",           -->
<!-- which controls for what devices the application should   -->
<!-- be created and so on.                                    -->
<!--                                                          -->
<!-- Call the "emulator" target to skip the obfuscation       -->
<!-- and to build the example for only one handsets.          -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->
<project 
	name="enough-j2mepolish-rss" 
	default="j2mepolish">
	
	<!-- import user specific properties                          -->
	<property file="${user.name}.properties" />
	
	<!-- The polish.home property needs to point to the directory -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" location="%{INSTALL_PATH}" />
	
	<!-- import global properties                                 -->
	<property file="${polish.home}/global.properties" />

		
	<!-- the device for the test mode - you can define it on the command-line
	     using the -D switch, e.g. ant -Ddevice=Generic/midp2 emulator -->
	<property name="device" value="Generic/AnyPhone"/>
	<property name="devices" value="${device},Generic/AnyMsaPhone,Nokia/Series40E3,Nokia/Series60E3,Sony-Ericsson/JavaPlatform7,Sony-Ericsson/JavaPlatform8"/>
	
	

	<!-- Definition of the J2ME Polish task:                      -->
	<taskdef name="j2mepolish" 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/lib/enough-j2mepolish-build.jar"
	/>
	
		
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default-target -->
	
	<target name="setdeploy" 
		description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
		>
		<property name="deploy-url" value="http://www.company.com/download/" />
	</target>
	
	<target name="enableDebug" 
		description="Call this target first to skip the obfuscation step, call the emulator and start the debugger, e.g. ant enableDebug j2mepolish"
		>
		<property name="debug" value="true" />
	</target>
	
		
	<target name="test" 
		description="Call this target first to skip the obfuscation step and call the emulator, e.g. ant test j2mepolish"
		>
		<property name="test" value="true" />
		<property name="dir.work" value="build/test" />
	</target>
			
	<target name="init">
	  	<property name="test" value="false" />
		<property name="dir.work" value="build/real" />
		<property name="deploy-url" value="" />
		<property name="resource.dir" value="resources" />
	</target>
	 
	<!-- In this target the J2ME Polish task is used.             -->
	<!-- It has 3 sections:                                       -->
	<!--    1. The info-section defines some general information  -->
	<!--    2. The deviceRequirements-section chooses the devices -->
	<!--       for which the application is optimized.            -->
	<!--    3. The build-section controls the actual build        -->
	<!--       process.                                           -->	
	<target name="j2mepolish" 
			depends="init"
			description="This is the controller for the J2ME build process." 
			>
		<j2mepolish>
		    <!-- general settings, these settings basically form the JAD-attributes. -->
		    <!-- Have a look at the <jad>-section for setting specialised attributes.
		         You can also define localized attributes in the resources/messages.txt files -->
			<info
				name="News Reader"
				version="1.0.0"
				description="Using RSS in J2ME Polish."
				vendorName="Enough Software"
				infoUrl="http://www.j2mepolish.org"
				jarName="${polish.vendor}-${polish.name}-${polish.locale}-rss.jar" 
				jarUrl="${deploy-url}${polish.jarName}"
				copyright="Copyright 2011 Enough Software. All rights reserved."
				icon="rss.png"
			/>
			<!-- selection of supported devices -->
			<!-- In the test mode the application is build only for the  -->
			<!-- Generic/midp1 phone, but when the test-property is set to false, -->
			<!-- the second deviceRequirements will be used instead. -->
			<deviceRequirements if="test">
				<requirement name="Identifier" value="${device}" />
			</deviceRequirements>
			<deviceRequirements unless="test">
				<requirement name="Identifier" value="${devices}" />
				<!-- on could use other devices for real builds, e.g. :
				<or>
					<and>
						<requirement name="JavaPackage" value="nokia-ui" />
						<requirement name="BitsPerPixel" value="16+" />
					</and>
				</or>
				 -->
			</deviceRequirements>
		    <!-- build settings -->
			<!-- 
			 -->
			<build
				symbols="ExampleSymbol, AnotherExample"
				usePolishGui="true"
				workDir="${dir.work}"
			>
				<!-- midlets definition -->
				<midlet class="de.enough.polish.sample.rss.RssMidlet" name="News Reader" />
				<!-- project-wide variables - used for preprocessing.  -->
				<!-- You can set localized variables in the resources/messages.txt files as well.  -->
				<variables includeAntProperties="true" >
					<!-- use the advanced menubar mode that offers near-native command handling and positioning, on BB and Android use native commands: -->
					<variable
						name="polish.FullScreen"
						value="menu" 
						unless="polish.blackberry || polish.android" 
					/>
					<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
					<variable name="polish.useScrollBar" value="true" />
					<variable name="polish.TextField.useDirectInput" value="true" />
					<variable name="polish.TextField.usePredictiveInput" value="false" />
					<variable name="polish.TextField.includeInputInfo" value="true" />
					<variable name="polish.TextField.supportSymbolsEntry" value="true" />
					<variable name="polish.handleEvents" value="true" />
					<variable name="polish.Item.ShowCommandsOnHold" value="true" />
				</variables>
				<!-- Here you can set the dir attribute to "resources2" for an alternative design. -->
				<resources
					dir="resources/base"
					defaultexcludes="yes"
					excludes="readme.txt"
				>
					<root dir="resources/base/images" />
					<root dir="resources/base/sounds" />
					<!-- add the localization element for created localized
					     versions of your application: -->
					<localization locales="en_US" unless="test" />
				</resources>
				<!-- obfuscator settings: do not obfuscate when the test-property is true -->
				<obfuscator name="ProGuard" unless="test or polish.blackberry" >
					<!--
					You can set additional parameters here, e.g.:
					<parameter name="optimize" value="false" />
					-->
				</obfuscator>
				<!-- debug settings: only include debug setting when the test-property is true -->
				<debug if="test or log" verbose="true" level="error">
					<filter pattern="de.enough.polish.example.*" level="debug" />
					<filter pattern="de.enough.polish.ui.*" level="warn" />
				</debug>
				<!-- user defined JAD attributes can also be used: -->
				<jad>
					<attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
				</jad>	
			</build>
			
			<!-- execution of emulator(s) -->
			<emulator
				wait="true"
				securityDomain="trusted"
				enableProfiler="true"
				enableMemoryMonitor="true"
				enableNetworkMonitor="true"
				if="debug"
				>
				<!-- this is an example for connecting to a debugger - use the ${polish.debug.port} Ant property
				     for getting to know the port of the debugger. In this example the 
				     "connect-debugger" target is also required.
				-->
				<!--
				<debugger name="antcall" target="connect-debugger" port="6001" />
				-->
			</emulator>
                        
			<emulator
				wait="true"
				trace="none"
				securityDomain="trusted"
				enableProfiler="false"
				enableMemoryMonitor="false"
				enableNetworkMonitor="false"
				if="test and not debug"
				>
			</emulator>

		
		</j2mepolish>
	</target>
	
	<target 
		name="emulator"
		depends="test,j2mepolish"
		description="invokes the emulator"
	>
	</target>

	<target name="clean" 
	  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
		<delete dir="build" />
		<delete dir="dist" includes="**/*" />
	</target>

	<target  
		name="cleanbuild"
		description="allows a clean build. You should call [ant cleanbuild] whenever you made changes to devices.xml, vendors.xml or groups.xml"
		depends="clean, j2mepolish"
	/>
	
    <target name="debug" description="debugs the project" depends="enableDebug, test, j2mepolish" />

</project>
<!-- This file controls the build process.                    -->
<!-- The most important target is the "j2mepolish",           -->
<!-- which controls for what devices the application should   -->
<!-- be created and so on.                                    -->
<!--                                                          -->
<!-- Call the "emulator" target to skip the obfuscation       -->
<!-- and to build the example for only one handsets.          -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->
<project 
	name="enough-j2mepolish-serialization" 
	default="j2mepolish">
	
	<!-- import user specific properties                          -->
	<property file="${user.name}.properties" />
	
	<!-- The polish.home property needs to point to the directory -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" location="%{INSTALL_PATH}" />
	
	<!-- import global properties                                 -->
	<property file="${polish.home}/global.properties" />

		
	<!-- the device for the test mode - you can define it on the command-line
	     using the -D switch, e.g. ant -Ddevice=Generic/midp2 emulator -->
	<property name="device" value="Generic/AnyPhone"/>
	<property name="devices" value="${device},Generic/AnyMsaPhone,Nokia/Series40E3,Nokia/Series60E3,Sony-Ericsson/JavaPlatform7,Sony-Ericsson/JavaPlatform8"/>
	
	

	<!-- Definition of the J2ME Polish task:                      -->
	<taskdef name="j2mepolish" 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/lib/enough-j2mepolish-build.jar"
	/>
	
		
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default-target -->
	
	<target name="setdeploy" 
		description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
		>
		<property name="deploy-url" value="http://www.company.com/download/" />
	</target>
	
	<target name="enableDebug" 
		description="Call this target first to skip the obfuscation step, call the emulator and start the debugger, e.g. ant enableDebug j2mepolish"
		>
		<property name="debug" value="true" />
	</target>
	
		
	<target name="test" 
		description="Call this target first to skip the obfuscation step and call the emulator, e.g. ant test j2mepolish"
		>
		<property name="test" value="true" />
		<property name="dir.work" value="build/test" />
	</target>
			
	<target name="init">
	  	<property name="test" value="false" />
		<property name="dir.work" value="build/real" />
		<property name="deploy-url" value="" />
		<property name="resource.dir" value="resources" />
	</target>
	 
	<!-- In this target the J2ME Polish task is used.             -->
	<!-- It has 3 sections:                                       -->
	<!--    1. The info-section defines some general information  -->
	<!--    2. The deviceRequirements-section chooses the devices -->
	<!--       for which the application is optimized.            -->
	<!--    3. The build-section controls the actual build        -->
	<!--       process.                                           -->	
	<target name="j2mepolish" 
			depends="init"
			description="This is the controller for the J2ME build process." 
			>
		<j2mepolish>
		    <!-- general settings, these settings basically form the JAD-attributes. -->
		    <!-- Have a look at the <jad>-section for setting specialised attributes.
		         You can also define localized attributes in the resources/messages.txt files -->
			<info
				name="Serializer"
				version="1.0.0"
				description="A demonstration of the Serialization Framework."
				vendorName="Enough Software"
				infoUrl="http://www.j2mepolish.org"
				jarName="${ nospace(polish.vendor) }-${ nospace(polish.name) }-serialization.jar" 
				jarUrl="${deploy-url}${polish.jarName}"
				copyright="Copyright 2011 Enough Software. All rights reserved."
			/>
			<!-- selection of supported devices -->
			<!-- In the test mode the application is build only for the  -->
			<!-- Generic/midp1 phone, but when the test-property is set to false, -->
			<!-- the second deviceRequirements will be used instead. -->
			<deviceRequirements if="test">
				<requirement name="Identifier" value="${device}" />
			</deviceRequirements>
			<deviceRequirements unless="test">
				<requirement name="Identifier" value="${devices}" />
			</deviceRequirements>
		    <!-- build settings -->
			<!-- 
			 -->
			<build
				symbols="ExampleSymbol, AnotherExample"
				usePolishGui="true"
				workDir="${dir.work}"
			>
				<!-- midlets definition -->
				<midlet class="de.enough.polish.sample.serialization.NotesMidlet" name="Notes"/>
				<!-- project-wide variables - used for preprocessing.  -->
				<!-- You can set localized variables in the resources/messages.txt files as well.  -->
				<variables includeAntProperties="true" >
					<!-- activate text input over J2ME Polish TextFields (without opening a new TextBox for each input: -->
					<variable name="polish.TextField.useDirectInput" value="true" />
					<!-- activate input of symbols: -->
					<variable name="polish.TextField.supportSymbolsEntry" value="true" />
					<variable name="polish.TextField.Symbols" value="&quot;@#()&lt;&gt;&amp;;,.:!/\~$%^*" />
					<!-- activate switching to the native (e.g.T9) input mode: -->
					<variable name="polish.TextField.allowNativeModeSwitch" value="true" />
					<!-- use the advanced menubar mode that offers near-native command handling and positioning, on BB and Android use native commands: -->
					<variable
						name="polish.FullScreen"
						value="menu" 
						unless="polish.blackberry || polish.android" 
					/>
					<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
					<variable name="polish.useScrollBar" value="true" />
					<!-- suppress List-select commands -->
					<variable name="polish.List.suppressSelectCommand" value="true" />
					<!--
					You can also suppress ir rename the Add Symbol command:
					<variable name="polish.TextField.suppressAddSymbolCommand" value="true" if="polish.key.AddSymbolKey:defined" />
					<variable name="polish.command.entersymbol" value="Add Symbol" />
					-->
				</variables>
				<!-- Here you can set the dir attribute to "resources2" for an alternative design. -->
				<resources
					dir="${resource.dir}"
					defaultexcludes="yes"
					excludes="readme.txt"
				>
					<!-- add the localization element for created localized
					     versions of your application: 
					<localization locales="de_DE, en_US" unless="test" />
					<localization locales="en_US" if="test" />
					-->
				</resources>
				<!-- obfuscator settings: do not obfuscate when the test-property is true -->
				<obfuscator  name="ProGuard" unless="test or polish.blackberry" />
				<!-- debug/log settings: only include debug setting when the test-property is true -->
				<debug level="info" verbose="true" logTimestamp="true" >
					<filter level="debug" package="de.enough.polish.sample.serialization"/>
					<!--
					<filter level="debug" class="de.enough.polish.ui.TabbedForm"/>
					<filter level="debug" class="de.enough.polish.ui.Container"/>
					<filter level="debug" class="de.enough.polish.ui.Screen"/>
					<filter level="debug" class="de.enough.polish.ui.MenuBar"/>
					-->
				</debug>
				<!-- user defined JAD attributes can also be used: -->
				<jad>
					<attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
				</jad>	
			</build>
			
			<!-- execution of emulator(s) -->
			<emulator
				wait="true"
				securityDomain="trusted"
				enableProfiler="true"
				enableMemoryMonitor="true"
				enableNetworkMonitor="true"
				if="debug"
				>
				<!-- this is an example for connecting to a debugger - use the ${polish.debug.port} Ant property
				     for getting to know the port of the debugger. In this example the 
				     "connect-debugger" target is also required.
				-->
				<!--
				<debugger name="antcall" target="connect-debugger" port="6001" />
				-->
			</emulator>
                        
			<emulator
				wait="true"
				trace="none"
				securityDomain="trusted"
				enableProfiler="false"
				enableMemoryMonitor="false"
				enableNetworkMonitor="false"
				if="test and not debug"
				>
			</emulator>

		
		</j2mepolish>
	</target>
	
	<target 
		name="emulator"
		depends="test,j2mepolish"
		description="invokes the emulator"
	>
	</target>

	<target name="clean" 
	  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
		<delete dir="build" />
		<delete dir="dist" includes="**/*" />
	</target>

	<target  
		name="cleanbuild"
		description="allows a clean build. You should call [ant cleanbuild] whenever you made changes to devices.xml, vendors.xml or groups.xml"
		depends="clean, j2mepolish"
	/>
	
    <target name="debug" description="debugs the project" depends="enableDebug, test, j2mepolish" />

</project>
<!-- This file controls the build process.                    -->
<!-- The most important target is the "j2mepolish",           -->
<!-- which controls for what devices the application should   -->
<!-- be created and so on.                                    -->
<!--                                                          -->
<!-- Call the "emulator" target to skip the obfuscation       -->
<!-- and to build the example for only one handsets.          -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->
<project 
	name="enough-j2mepolish-sysinfo" 
	default="j2mepolish">
	
	<!-- import user specific properties                          -->
	<property file="${user.name}.properties" />

	<!-- The polish.home property needs to point to the directory -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" location="%{INSTALL_PATH}" />
	
	<!-- import global properties                                 -->
	<property file="${polish.home}/global.properties" />

	
	<!-- Definition of the J2ME Polish task:                      -->
	<taskdef name="j2mepolish" 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/lib/enough-j2mepolish-build.jar:${polish.home}/import/proguard.jar:${polish.home}/yguard-lib.jar:${wtk.home}/wtklib/kenv.zip"/>
	
		
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default-target -->
	
	<target name="setdeploy" 
		description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
		>
		<property name="deploy-url" value="http://www.company.com/download/" />
	</target>
		
	<target name="test" 
		description="Call this target first to skip the obfuscation step, e.g. ant test j2mepolish"
		>
		<property name="test" value="true" />
		<property name="dir.work" value="build/test" />
	</target>
			
	<target name="init">
	  	<property name="test" value="false" />
		<property name="dir.work" value="build/real" />
		<property name="deploy-url" value="" />
	</target>
	 
	<!-- In this target the J2ME Polish task is used.             -->
	<!-- It has 3 sections:                                       -->
	<!--    1. The info-section defines some general information  -->
	<!--    2. The deviceRequirements-section chooses the devices -->
	<!--       for which the application is optimized.            -->
	<!--    3. The build-section controls the actual build        -->
	<!--       process.                                           -->	
	<target name="j2mepolish" 
			depends="init"
			description="This is the controller for the J2ME build process." 
			>
		<j2mepolish>
		    <!-- general settings, these settings basically form the JAD-attributes. -->
		    <!-- Have a look at the <jad>-section for setting specialised attributes.
		         You can also define localized attributes in the resources/messages.txt files 
		         In this example we are setting the profile and configuration regardless
		         of the capabilities of the target-devices, since we want to use one
		         build for all devices.
		         -->
			<info
				copyright="Copyright 2004, 2005 Grimo Software, Enough Software and Mark Schrijver. All rights reserved." 
				description="Extracts information from MIDP capable devices." 
				icon="icon.png" 
				infoUrl="www.grimo-software.com" 
				jarName="sysinfo.jar" 
				jarUrl="${deploy-url}${polish.jarName}" 
				name="MIDPSysInfo" 
				vendorName="Grimo Software" 
				version="0.9.0"
				profile="MIDP-1.0"
				configuration="CLDC-1.0"
			/>
			<!-- selection of the target device -->
			<deviceRequirements>
				<requirement name="Identifier" value="Generic/multi"/>
			</deviceRequirements>
		    <!-- build settings -->
			<!-- 
			 -->
			<build
	            usePolishGui="false"
				workDir="${dir.work}"
			>
				<!-- midlets definition -->
				<midlet class="de.enough.sysinfo.MIDPSysInfoMIDlet" name="MIDP SysInfo"/>
				<resources>
					<localization locale="en" />
				</resources>
				<jad>
					<filter>
						MIDlet-Name, MIDlet-Version, 
						MIDlet-Vendor, MIDlet-Jar-URL, MIDlet-Jar-Size, 
						MIDlet-Description?, MIDlet-Icon?, MIDlet-Info-URL?,
						MIDlet-Data-Size?, MIDlet-*, *
					</filter>
	 			</jad>
				<manifestFilter>
					Manifest-Version, MIDlet-Name, 
					MIDlet-1, MIDlet-2?, MIDlet-3?, MIDlet-4?, MIDlet-5?, 
					MIDlet-Version, MIDlet-Vendor,
					MicroEdition-Profile, MicroEdition-Configuration,
					MIDlet-Data-Size?
				</manifestFilter>
				<!-- obfuscator settings: do not obfuscate when the test-property is true -->
				<obfuscator name="ProGuard" unless="test" >
					<keep class="NokiaFullCanvasTest" />
					<keep class="Midp2FullCanvasTest" />
				</obfuscator>
				<!-- debug settings: only include debug setting when the test-property is true -->
				<debug level="error" verbose="true" if="test">
					<filter level="debug" package="com.grimo.me.product.midpsysinfo"/>
				</debug>
			</build>
			
			<!-- execution of emulator(s) -->
			<emulator if="test"	/>	
		</j2mepolish>
	</target>

	<target 
		name="emulator"
		depends="test,j2mepolish"
		description="invokes the emulator"
	>
	</target>

	<target name="clean" 
	  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
		<delete dir="build" />
		<mkdir dir="dist" />
		<delete dir="dist" includes="**/*" />
	</target>
	
	<target  
		name="cleanbuild"
		description="allows a clean build. You should call [ant cleanbuild] whenever you made changes to devices.xml, vendors.xml or groups.xml"
		depends="clean, j2mepolish"
	/>


</project>
<!-- This file controls the build process.                    -->
<!-- The most important target is the "j2mepolish",           -->
<!-- which controls for what devices the application should   -->
<!-- be created and so on.                                    -->
<!--                                                          -->
<!-- Call the "emulator" target to skip the obfuscation       -->
<!-- and to build the example for only one handsets.          -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->
<project 
	name="enough-j2mepolish-tabbedform" 
	default="j2mepolish">
	
	<!-- import user specific properties                          -->
	<property file="${user.name}.properties" />
	
	<!-- The polish.home property needs to point to the directory -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" location="%{INSTALL_PATH}" />
	
	<!-- import global properties                                 -->
	<property file="${polish.home}/global.properties" />

		
	<!-- the device for the test mode - you can define it on the command-line
	     using the -D switch, e.g. ant -Ddevice=Generic/midp2 emulator -->
	<property name="device" value="Generic/AnyPhone"/>
	<property name="devices" value="${device},Generic/AnyMsaPhone,Nokia/Series40E3,Nokia/Series60E3,Sony-Ericsson/JavaPlatform7,Sony-Ericsson/JavaPlatform8"/>
	
	

	<!-- Definition of the J2ME Polish task:                      -->
	<taskdef name="j2mepolish" 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/lib/enough-j2mepolish-build.jar"
	/>
	
		
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default-target -->
	
	<target name="setdeploy" 
		description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
		>
		<property name="deploy-url" value="http://www.company.com/download/" />
	</target>
	
	<target name="enableDebug" 
		description="Call this target first to skip the obfuscation step, call the emulator and start the debugger, e.g. ant enableDebug j2mepolish"
		>
		<property name="debug" value="true" />
	</target>
	
		
	<target name="test" 
		description="Call this target first to skip the obfuscation step and call the emulator, e.g. ant test j2mepolish"
		>
		<property name="test" value="true" />
		<property name="dir.work" value="build/test" />
	</target>
			
	<target name="init">
	  	<property name="test" value="false" />
		<property name="dir.work" value="build/real" />
		<property name="deploy-url" value="" />
		<property name="resource.dir" value="resources" />
	</target>
	 
	<!-- In this target the J2ME Polish task is used.             -->
	<!-- It has 3 sections:                                       -->
	<!--    1. The info-section defines some general information  -->
	<!--    2. The deviceRequirements-section chooses the devices -->
	<!--       for which the application is optimized.            -->
	<!--    3. The build-section controls the actual build        -->
	<!--       process.                                           -->	
	<target name="j2mepolish" 
			depends="init"
			description="This is the controller for the J2ME build process." 
			>
		<j2mepolish>
		    <!-- general settings, these settings basically form the JAD-attributes. -->
		    <!-- Have a look at the <jad>-section for setting specialised attributes.
		         You can also define localized attributes in the resources/messages.txt files -->
			<info
				name="TabbedForm"
				version="1.0.0"
				description="A demonstration of the TabbedForm."
				vendorName="Enough Software"
				infoUrl="http://www.j2mepolish.org"
				jarName="${ nospace(polish.vendor) }-${ nospace(polish.name) }-tabbedform.jar" 
				jarUrl="${deploy-url}${polish.jarName}"
				copyright="Copyright 2011 Enough Software. All rights reserved."
			/>
			<!-- selection of supported devices -->
			<!-- In the test mode the application is build only for the  -->
			<!-- Generic/midp1 phone, but when the test-property is set to false, -->
			<!-- the second deviceRequirements will be used instead. -->
			<deviceRequirements if="test">
				<requirement name="Identifier" value="${device}" />
			</deviceRequirements>
			<deviceRequirements unless="test">
				<requirement name="Identifier" value="${devices}" />
			</deviceRequirements>
		    <!-- build settings -->
			<!-- 
			 -->
			<build
				symbols="ExampleSymbol, AnotherExample"
				usePolishGui="true"
				workDir="${dir.work}"
			>
				<!-- midlets definition -->
				<midlet class="de.enough.polish.sample.tabbedform.TabbedFormDemo" name="TabbedForm"/>
				<!-- project-wide variables - used for preprocessing.  -->
				<!-- You can set localized variables in the resources/messages.txt files as well.  -->
				<variables includeAntProperties="true" >
					<!-- example variables:
					In your Java-code you can use the following snipet to use this variable:
					//#= private static final String UPDATE_URL = "${ update-url }";
					You can change the title of the sample application with the "title"-var.
					-->
					<variable name="polish.TextField.useDirectInput" value="true" />
					<variable name="polish.TextField.supportSymbolsEntry" value="true" />
					<variable name="polish.TextField.Symbols" value="&quot;@#()&lt;&gt;&amp;;,.:!/\~$%^*" />
					<variable name="polish.TextField.allowNativeModeSwitch" value="true" />
					<!--
					You can also suppress ir rename the Add Symbol command:
					<variable name="polish.TextField.suppressAddSymbolCommand" value="true" if="polish.key.AddSymbolKey:defined" />
					<variable name="polish.command.entersymbol" value="Add Symbol" />
					-->
					<!-- use the advanced menubar mode that offers near-native command handling and positioning, on BB and Android use native commands: -->
					<variable
						name="polish.FullScreen"
						value="menu" 
						unless="polish.blackberry || polish.android" 
					/>
					<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
				</variables>
				<!-- Here you can set the dir attribute to "resources2" for an alternative design. -->
				<resources
					dir="${resource.dir}"
					defaultexcludes="yes"
					excludes="readme.txt"
				>
					<!-- add the localization element for created localized
					     versions of your application: 
					<localization locales="de_DE, en_US" unless="test" />
					<localization locales="en_US" if="test" />
					-->
				</resources>
				<!-- obfuscator settings: do not obfuscate when the test-property is true -->
				<obfuscator  name="ProGuard" unless="test or polish.blackberry" />
				<!-- debug/log settings: only include debug setting when the test-property is true -->
				<debug level="info" verbose="true" logTimestamp="true" >
					<filter level="debug" package="de.enough.polish.sample.tabbedform"/>
					<!--
					<filter level="debug" class="de.enough.polish.ui.TabbedForm"/>
					<filter level="debug" class="de.enough.polish.ui.Container"/>
					<filter level="debug" class="de.enough.polish.ui.Screen"/>
					<filter level="debug" class="de.enough.polish.ui.MenuBar"/>
					-->
				</debug>
				<!-- user defined JAD attributes can also be used: -->
				<jad>
					<attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
				</jad>	
			</build>
			
			<!-- execution of emulator(s) -->
			<emulator
				wait="true"
				securityDomain="trusted"
				enableProfiler="true"
				enableMemoryMonitor="true"
				enableNetworkMonitor="true"
				if="debug"
				>
				<!-- this is an example for connecting to a debugger - use the ${polish.debug.port} Ant property
				     for getting to know the port of the debugger. In this example the 
				     "connect-debugger" target is also required.
				-->
				<!--
				<debugger name="antcall" target="connect-debugger" port="6001" />
				-->
			</emulator>
                        
			<emulator
				wait="true"
				trace="none"
				securityDomain="trusted"
				enableProfiler="false"
				enableMemoryMonitor="false"
				enableNetworkMonitor="false"
				if="test and not debug"
				>
			</emulator>

		
		</j2mepolish>
	</target>
	
	<target 
		name="emulator"
		depends="test,j2mepolish"
		description="invokes the emulator"
	>
	</target>

	<target name="clean" 
	  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
		<delete dir="build" />
		<delete dir="dist" includes="**/*" />
	</target>

	<target  
		name="cleanbuild"
		description="allows a clean build. You should call [ant cleanbuild] whenever you made changes to devices.xml, vendors.xml or groups.xml"
		depends="clean, j2mepolish"
	/>
	
    <target name="debug" description="debugs the project" depends="enableDebug, test, j2mepolish" />

</project>
<!-- This file controls the build process.                    -->
<!-- The most important target is the "j2mepolish",           -->
<!-- which controls for what devices the application should   -->
<!-- be created and so on.                                    -->
<!--                                                          -->
<!-- Call the "emulator" target to skip the obfuscation       -->
<!-- and to build the example for only one handsets.          -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->
<project 
	name="enough-j2mepolish-tabbedpane" 
	default="j2mepolish">
	
	<!-- import user specific properties                          -->
	<property file="${user.name}.properties" />
	
	<!-- The polish.home property needs to point to the directory -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" location="%{INSTALL_PATH}" />
	
	<!-- import global properties                                 -->
	<property file="${polish.home}/global.properties" />

		
	<!-- the device for the test mode - you can define it on the command-line
	     using the -D switch, e.g. ant -Ddevice=Generic/midp2 emulator -->
	<property name="device" value="Generic/AnyPhone"/>
	<property name="devices" value="${device},Generic/AnyMsaPhone,Nokia/Series40E3,Nokia/Series60E3,Sony-Ericsson/JavaPlatform7,Sony-Ericsson/JavaPlatform8"/>
	
	

	<!-- Definition of the J2ME Polish task:                      -->
	<taskdef name="j2mepolish" 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/lib/enough-j2mepolish-build.jar"
	/>
	
		
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default-target -->
	
	<target name="setdeploy" 
		description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
		>
		<property name="deploy-url" value="http://www.company.com/download/" />
	</target>
	
	<target name="enableDebug" 
		description="Call this target first to skip the obfuscation step, call the emulator and start the debugger, e.g. ant enableDebug j2mepolish"
		>
		<property name="debug" value="true" />
	</target>
	
		
	<target name="test" 
		description="Call this target first to skip the obfuscation step and call the emulator, e.g. ant test j2mepolish"
		>
		<property name="test" value="true" />
		<property name="dir.work" value="build/test" />
	</target>
			
	<target name="init">
	  	<property name="test" value="false" />
		<property name="dir.work" value="build/real" />
		<property name="deploy-url" value="" />
	</target>
	 
	<!-- In this target the J2ME Polish task is used.             -->
	<!-- It has 3 sections:                                       -->
	<!--    1. The info-section defines some general information  -->
	<!--    2. The deviceRequirements-section chooses the devices -->
	<!--       for which the application is optimized.            -->
	<!--    3. The build-section controls the actual build        -->
	<!--       process.                                           -->	
	<target name="j2mepolish" 
			depends="init"
			description="This is the controller for the J2ME build process." 
			>
		<j2mepolish>
		    <!-- general settings, these settings basically form the JAD-attributes. -->
		    <!-- Have a look at the <jad>-section for setting specialised attributes.
		         You can also define localized attributes in the resources/messages.txt files -->
			<info
				name="TabbedPane"
				version="1.0.0"
				description="A demonstration of the TabbedPane."
				vendorName="Enough Software"
				infoUrl="http://www.j2mepolish.org"
				jarName="${ nospace(polish.vendor) }-${ nospace(polish.name) }-tabbedpane.jar" 
				jarUrl="${deploy-url}${polish.jarName}"
				copyright="Copyright 2011 Enough Software. All rights reserved."
			/>
			<!-- selection of supported devices -->
			<!-- In the test mode the application is build only for the  -->
			<!-- Generic/midp1 phone, but when the test-property is set to false, -->
			<!-- the second deviceRequirements will be used instead. -->
			<deviceRequirements if="test">
				<requirement name="Identifier" value="${device}" />
			</deviceRequirements>
			<deviceRequirements unless="test">
				<requirement name="Identifier" value="${devices}" />
			</deviceRequirements>
		    <!-- build settings -->
			<!-- 
			 -->
			<build
				symbols="ExampleSymbol, AnotherExample"
				usePolishGui="true"
				workDir="${dir.work}"
			>
				<!-- midlets definition -->
				<midlet class="de.enough.polish.sample.tabbedpane.TabbedPaneMidlet" name="TabbedPane" />
				<!-- project-wide variables - used for preprocessing.  -->
				<!-- You can set localized variables in the resources/messages.txt files as well.  -->
				<variables includeAntProperties="true" >
					<!-- example variables:
					In your Java-code you can use the following snipet to use this variable:
					//#= private static final String UPDATE_URL = "${ update-url }";
					You can change the title of the sample application with the "title"-var.
					-->
					<variable name="polish.TextField.useDirectInput" value="true" />
					<variable name="polish.TextField.supportSymbolsEntry" value="true" />
					<variable name="polish.TextField.Symbols" value="&quot;@#()&lt;&gt;&amp;;,.:!/\~$%^*" />
					<variable name="polish.TextField.allowNativeModeSwitch" value="true" />
					<!--
					You can also suppress ir rename the Add Symbol command:
					<variable name="polish.TextField.suppressAddSymbolCommand" value="true" if="polish.key.AddSymbolKey:defined" />
					<variable name="polish.command.entersymbol" value="Add Symbol" />
					-->
					<!-- use the advanced menubar mode that offers near-native command handling and positioning, on BB and Android use native commands: -->
					<variable
						name="polish.FullScreen"
						value="menu" 
						unless="polish.blackberry || polish.android" 
					/>
					<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
					<variable name="polish.useScrollBar" value="true" />
				</variables>
				<!-- Here you can set the dir attribute to "resources2" for an alternative design. -->
				<resources
					dir="resources"
					defaultexcludes="yes"
					excludes="readme.txt"
				>
					<root dir="resources/images" />
					<!-- add the localization element for created localized
					     versions of your application: 
					<localization locales="de_DE, en_US" unless="test" />
					<localization locales="en_US" if="test" />
					-->
				</resources>
				<!-- obfuscator settings: do not obfuscate when the test-property is true -->
				<obfuscator  name="ProGuard" unless="test or polish.blackberry" />
				<!-- debug/log settings: only include debug setting when the test-property is true -->
				<debug level="info" verbose="true" logTimestamp="true" >
					<filter level="debug" package="de.enough.polish.sample.tabbedpane"/>
					<!--
					<filter level="debug" class="de.enough.polish.ui.TabbedForm"/>
					<filter level="debug" class="de.enough.polish.ui.Container"/>
					<filter level="debug" class="de.enough.polish.ui.Screen"/>
					<filter level="debug" class="de.enough.polish.ui.MenuBar"/>
					-->
				</debug>
				<!-- user defined JAD attributes can also be used: -->
				<jad>
					<attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
				</jad>	
			</build>
			
			<!-- execution of emulator(s) -->
			<emulator
				wait="true"
				securityDomain="trusted"
				enableProfiler="true"
				enableMemoryMonitor="true"
				enableNetworkMonitor="true"
				if="debug"
				>
				<!-- this is an example for connecting to a debugger - use the ${polish.debug.port} Ant property
				     for getting to know the port of the debugger. In this example the 
				     "connect-debugger" target is also required.
				-->
				<!--
				<debugger name="antcall" target="connect-debugger" port="6001" />
				-->
			</emulator>
                        
			<emulator
				wait="true"
				trace="none"
				securityDomain="trusted"
				enableProfiler="false"
				enableMemoryMonitor="false"
				enableNetworkMonitor="false"
				if="test and not debug"
				>
			</emulator>

		
		</j2mepolish>
	</target>
	
	<target 
		name="emulator"
		depends="test,j2mepolish"
		description="invokes the emulator"
	>
	</target>

	<target name="clean" 
	  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
		<delete dir="build" />
		<delete dir="dist" includes="**/*" />
	</target>

	<target  
		name="cleanbuild"
		description="allows a clean build. You should call [ant cleanbuild] whenever you made changes to devices.xml, vendors.xml or groups.xml"
		depends="clean, j2mepolish"
	/>
	
    <target name="debug" description="debugs the project" depends="enableDebug, test, j2mepolish" />

</project>
<!-- This file controls the build process.                    -->
<!-- The most important target is the j2mepolish-target,      -->
<!-- which controls for what devices the application should   -->
<!-- be created and so on.                                    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->
<project 
	name="enough-polish-tableitem" 
	default="j2mepolish">
	
	<!-- import user specific properties                          -->
	<property file="${user.name}.properties" />
	
	<!-- The polish.home property needs to point to the directory -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" location="%{INSTALL_PATH}" />
	
	<!-- import global properties                                 -->
	<property file="${polish.home}/global.properties" />

		
	<!-- the device for the test mode - you can define it on the command-line
	     using the -D switch, e.g. ant -Ddevice=Generic/midp2 emulator -->
	<property name="device" value="Generic/AnyPhone"/>
	<property name="devices" value="${device},Generic/jtwi,Generic/Midp2Cldc11,Nokia/Series40E3,Nokia/Series60E2,Nokia/Series60E3,Sony-Ericsson/JavaPlatform7,Sony-Ericsson/JavaPlatform8"/>
	
	

	<!-- Definition of the J2ME Polish task:                      -->
	<taskdef name="j2mepolish" 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/lib/enough-j2mepolish-build.jar"
	/>
	
		
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default-target -->
	
	<target name="setdeploy" 
		description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
		>
		<property name="deploy-url" value="http://www.company.com/download/" />
	</target>
	
	<target name="enableDebug" 
		description="Call this target first to skip the obfuscation step, call the emulator and start the debugger, e.g. ant enableDebug j2mepolish"
		>
		<property name="debug" value="true" />
	</target>
	
		
	<target name="test" 
		description="Call this target first to skip the obfuscation step and call the emulator, e.g. ant test j2mepolish"
		>
		<property name="test" value="true" />
		<property name="dir.work" value="build/test" />
	</target>
			
	<target name="init">
	  	<property name="test" value="false" />
		<property name="dir.work" value="build/real" />
		<property name="deploy-url" value="" />
	</target>
	 
	<!-- In this target the J2ME Polish task is used.             -->
	<!-- It has 3 sections:                                       -->
	<!--    1. The info-section defines some general information  -->
	<!--    2. The deviceRequirements-section chooses the devices -->
	<!--       for which the application is optimized.            -->
	<!--    3. The build-section controls the actual build        -->
	<!--       process.                                           -->	
	<target name="j2mepolish" 
			depends="init"
			description="This is the controller for the J2ME build process." 
			>
		<j2mepolish>
		    <!-- general settings, these settings basically form the JAD-attributes. -->
		    <!-- Have a look at the <jad>-section for setting specialised attributes.
		         You can also define localized attributes in the resources/messages.txt files -->
			<info
				name="Table"
				version="1.0.0"
				description="A demonstration of the J2ME Polish TableItem."
				vendorName="Enough Software"
				infoUrl="http://www.j2mepolish.org"
				jarName="${polish.vendor}-${polish.name}-${polish.locale}-tableitem.jar" 
				jarUrl="${deploy-url}${polish.jarName}"
				copyright="Copyright 2011 Enough Software. All rights reserved."
			/>
			<!-- selection of supported devices -->
			<deviceRequirements if="test">
				<requirement name="Identifier" value="${device}" />
			</deviceRequirements>
			<deviceRequirements unless="test">
				<requirement name="Identifier" value="${devices}" />
				<!-- on could use other devices for real builds, e.g. :
				<requirement name="Term" value="polish.api.nokia-ui and polish.midp2" />
				or:
				<or>
					<and>
						<requirement name="JavaPackage" value="nokia-ui" />
						<requirement name="BitsPerPixel" value="16+" />
					</and>
				</or>
				 -->
			</deviceRequirements>
		    <!-- build settings -->
			<build
				symbols="ExampleSymbol, AnotherExample"
				usePolishGui="true"
				workDir="${dir.work}"
			>
				<!-- midlets definition -->
				<midlet class="de.enough.polish.sample.table.TableMidlet" name="Table" />
				<!-- project-wide variables - used for preprocessing.  -->
				<!-- You can set localized variables in the resources/messages.txt files as well.  -->
				<variables includeAntProperties="true" >
					<!-- Sample configuration options for J2ME Polish
					<variable name="polish.TextField.useDirectInput" value="true" />
					<variable name="polish.TextField.supportSymbolsEntry" value="true" />
					-->
					<!-- use the advanced menubar mode that offers near-native command handling and positioning, on BB and Android use native commands: -->
					<variable
						name="polish.FullScreen"
						value="menu" 
						unless="polish.blackberry || polish.android" 
					/>
					<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
					<variable name="polish.useScrollBar" value="true" />
				</variables>
				<!-- Configure the customization settings here: -->
				<resources
					dir="resources"
					defaultexcludes="yes"
					excludes="readme.txt"
				>
					<!-- add the localization element for created localized
					     versions of your application: 
					<localization>
						<locale name="en_US" />
						<locale name="de_DE" encoding="utf-8" unless="test" />
					</localization>
					-->
				</resources>
				<!-- obfuscator settings: do not obfuscate when the test-property is true -->
				<obfuscator name="ProGuard" unless="test or polish.blackberry" >
					<!--
					You can set additional parameters here, e.g.:
					<parameter name="optimize" value="false" />
					-->
				</obfuscator>
				<!-- log settings: only use debug setting when the test-property is true -->
				<debug if="test or log" verbose="true" level="error">
					<filter package="de.enough.polish.sample.tableitem" level="debug" />
					<filter package="de.enough.polish.ui" level="warn" />
					<!-- example for writing log entries to the Recordstore Management System: 
					<handler name="rms" />
					-->
				</debug>
				<!-- user defined JAD attributes can also be used: -->
				<jad>
					<!--
					<attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
					-->
				</jad>	
			</build>
			
			<!-- execution of emulator(s) -->
			<emulator
				wait="true"
				securityDomain="trusted"
				enableProfiler="true"
				enableMemoryMonitor="true"
				enableNetworkMonitor="true"
				if="debug"
				>
				<!-- this is an example for connecting to a debugger - use the ${polish.debug.port} Ant property
				     for getting to know the port of the debugger. In this example the 
				     "connect-debugger" target is also required.
				-->
				<!--
				<debugger name="antcall" target="connect-debugger" port="6001" />
				-->
			</emulator>
                        
			<emulator
				wait="true"
				trace="none"
				securityDomain="trusted"
				enableProfiler="false"
				enableMemoryMonitor="false"
				enableNetworkMonitor="false"
				if="test and not debug"
				>
			</emulator>

		
		</j2mepolish>
	</target>
	
	<target 
		name="emulator"
		depends="test,j2mepolish"
		description="invokes the emulator"
	>
	</target>

	<target name="clean" 
	  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
		<delete dir="build" />
		<mkdir dir="dist" />
		<delete dir="dist" includes="**/*" />
	</target>

	<target  
		name="cleanbuild"
		description="allows a clean build. You should call [ant cleanbuild] whenever you made changes to devices.xml, vendors.xml or groups.xml"
		depends="clean, j2mepolish"
	/>
	
    <target name="debug" description="debugs the project" depends="enableDebug, test, j2mepolish" />
	
</project>
<project name="thirdparty-nutiteq-openstreetmap" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" default="j2mepolish">

	<!-- import user specific properties                          -->
	<property file="${user.name}.properties" />

	<!-- The polish.home property needs to point to the directory -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" location="%{INSTALL_PATH}" />
	
	<!-- import global properties                                 -->
	<property file="${polish.home}/global.properties" />


	<!-- the device for the test mode - you can define it on the command-line
	     using the -D switch, e.g. ant -Ddevice=Generic/midp2 emulator -->
	<property name="device" value="Generic/AnyMsaPhone" />
	<property name="devices" value="${device}" />

	<!-- Definition of the J2ME Polish task:                      -->
	<taskdef name="j2mepolish" 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/lib/enough-j2mepolish-build.jar"
	/>


	<target name="init">
		<property name="emulate" value="false" />
		<property name="dir.work" value="build/real" />
		<property name="deploy-url" value="" />
		<property name="nutiteq.home" value="nutiteq_maps_lib_src_1_1_0" />
		<property name="lib.dir" value="${nutiteq.home}/ivy-libs" />
		<property name="dir.work" value="build/real" />
	</target>

	<target name="j2mepolish" depends="init" description="This is the controller for the J2ME build process." >


	<j2mepolish>
		<info name="J2ME Polish Map" 
			vendorName="Nutiteq" 
			jarName="J2MEPolishMap_${polish.vendor}_${polish.name}_${polish.locale}.jar" 
			icon="/nutiteq.png" 
			jarUrl="${polish.jarName}" 
			version="1.0.0"
			copyright="Nutiteq 2011"
		/>
		<deviceRequirements if="test">
			<requirement name="Identifier" value="${device}" />
		</deviceRequirements>
		<deviceRequirements unless="test">
			<requirement name="Identifier" value="${devices}" />
		</deviceRequirements>
		<build 
			usePolishGui="true"
			workDir="${dir.work}"
			>
			<jad>
				<attribute name="MIDlet-Web-Session" value="EMT WAP" if="polish.vendor == Motorola" />
			</jad>
			
			<sources>
				<source dir="source/src" />
				<!-- include nutiteq sources: -->
				<source dir="${nutiteq.home}/src" />
				<source dir="${nutiteq.home}/thirdparty/src" />
			</sources>

			<midlet class="com.nutiteq.polish.J2MEPolishSample" name="J2ME Polish Map" 	/>
			
			<variables>
				<!-- use the advanced menubar mode that offers near-native command handling and positioning, on BB and Android use native commands: -->
				<variable
					name="polish.FullScreen"
					value="menu" 
					unless="polish.blackberry || polish.android" 
				/>
				<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
				<variable name="polish.useScrollBar" value="true" />
			</variables>

			<resources dir="resources" defaultexcludes="yes">
				<localization locales="en_US" />
				<root dir="${nutiteq.home}/resources" includeSubDirs="true" includeBaseDir="false" />
			</resources>

			<obfuscator name="ProGuard" unless="emulate || polish.blackberry" />
		</build>
		
		<emulator if="emulate"/>
	</j2mepolish>
	
	</target>

	<target name="init-ivy">
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant">
			<classpath>
				<pathelement location="${basedir}/lib/ivy-2.0.0-beta2.jar" />
			</classpath>
		</taskdef>
	</target>

	<target name="retrieve-jars" depends="init-ivy" description="Retrieves all Ivy dependencies into the libs directory">
		<ivy:retrieve pattern="${basedir}/ivy-libs/[artifact]-[revision].[ext]" />
	</target>

	<target name="enableEmulator">
		<property name="emulate" value="true" />
		<property name="dir.work" value="build/test" />
	</target>
	
	<target name="emulator" depends="enableEmulator, j2mepolish" description="Starts a build and launches an emulator at the end" />
	
	<target name="clean" 
	  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
		<delete dir="build" />
		<mkdir dir="dist" />
		<delete dir="dist" includes="**/*" />
	</target>

	<target  
		name="cleanbuild"
		description="allows a clean build. You should call [ant cleanbuild] whenever you made changes to devices.xml, vendors.xml or groups.xml"
		depends="clean, j2mepolish"
	/>


</project><!-- This file controls the build process.                    -->
<!-- The most important target is the j2mepolish target,      -->
<!-- which controls for what devices the application should   -->
<!-- be created.                                              -->
<!--                                                          -->
<!-- Important: when you have no Wireless Toolkit installed   -->
<!-- you need to define the "preverify"-attribute             -->
<!-- of the <build>-element of the J2ME Polish task.          -->
<!--                                                          -->
<!-- When you call Ant from the command-line, you can         -->
<!-- call "ant test j2mepolish" to skip the obfuscation       -->
<!-- and to build the example for fewer handsets.             -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->

<project 
	name="smaato-blackbox" 
	default="j2mepolish">
	
	
	<property file="${user.name}.properties" />
	
	<!-- The polish.home property should point to the directory   -->
	<!-- containing the J2ME Polish installation.                 -->

	<property name="polish.home" location="%{INSTALL_PATH}" />
	<property file="${polish.home}/global.properties" />
	<property name="smaato.home" location="${polish.home}/thirdparty/smaato" />
	<property file="${smaato.home}/integration/j2mepolish/soma.properties" />

	<property name="device" value="Generic/AnyPhone" />
	<property name="devices" value="Generic/AnyPhone,Motorola/Razr2V8,Motorola/V3xx,Nokia/E61,Nokia/E70,Nokia/N95,Nokia/6680,Sony-Ericsson/W850i,BlackBerry/4.2TrackBall,BlackBerry/4.3" />
	
	
	<!-- Definition of the J2ME Polish task:                      -->
	
	<taskdef name="j2mepolish" 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/lib/enough-j2mepolish-build.jar"/>
	
		
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default target -->
			
	<target name="test" 
		description="Call this target first to skip the obfuscation step, e.g. ant test j2mepolish"
		>
		<property name="test" value="true" />
		<property name="dir.work" value="build/test" />
	</target>
			
	<target name="init">
	  	<property name="test" value="false" />
		<property name="dir.work" value="build/real" />
	</target>
	 
	<!-- In this target the J2ME Polish task is used.             -->
	<!-- It has 3 sections:                                       -->
	<!--    1. The info-section defines some general information  -->
	<!--    2. The deviceRequirements-section chooses the devices -->
	<!--       for which the application is optimized.            -->
	<!--    3. The build-section controls the actual build        -->
	<!--       process.                                           -->	
	<target name="j2mepolish" 
			depends="init"
			description="This is the controller for the J2ME build process." 
			>
		<j2mepolish>
		    <!-- general settings, these settings basically form the JAD-attributes. -->
		    <!-- Have a look at the <jad>-section for setting specialised attributes.
		         You can also define localized attributes in the resources/messages.txt files -->
			<info
				name="Black Box"
				version="1.3.4"
				description="Displays RSS feeds and ads advertisements"
				vendorName="Smaato, Inc."
				infoUrl="http://www.smaato.com"
				icon="rss.png"
				jarName="${polish.vendor}-${polish.name}-${polish.locale}-blackbox.jar" 
				copyright="Copyright 2010 Smaato, Inc. All rights reserved."
			/>
			
			<!-- selection of supported devices -->
			<!-- In the test mode the application is build only for the  -->
			<!-- Generic/midp1 phone, but when the test-property is set to false, -->
			<!-- the second deviceRequirements will be used instead. -->
			<deviceRequirements if="test">
				<requirement name="Identifier" value="${device}" />
			</deviceRequirements>
			<deviceRequirements unless="test">
				<requirement name="Identifier" value="${devices}" />
			</deviceRequirements>
			
		    <!-- build settings -->
			<!-- 
			 -->
			<build
				fullscreen="menu"
				usePolishGui="true"
				workDir="${dir.work}"
			>
				<!-- midlets definition -->
				<midlet class="com.smaato.blackbox.BlackBox" name="BlackBox" />
				
				<!-- project-wide variables - used for preprocessing.  -->
				<!-- You can set localized variables in the resources/messages.txt files as well.  -->
				<variables includeAntProperties="true" >
					<!-- advertisement settings: -->
					<variable name="soma.publisherId"   value="0" />
					<variable name="soma.applicationId" value="0" />
					<variable name="soma.adspaceId"     value="0" />
					<variable name="soma.enableAdvertisements" 	value="true" />
					<variable name="soma.networkMode" 			value="online" />
					<variable name="soma.banner.backgroundcolor" value="0" />
					<!-- J2ME Polish settings: -->
					<variable name="polish.Browser.MaxRedirects" value="5" />
					<variable name="polish.Browser.Gzip" value="false" />
					<variable name="polish.Browser.PaintDownloadIndicator" value="true" />
					<variable name="polish.Browser.MemorySaver" value="true" />
					<variable name="polish.TextField.useDirectInput" value="true" />
					<variable name="polish.TextField.supportSymbolsEntry" value="true" />
					<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
					<variable name="polish.useScrollBar" value="true" />
					<variable name="soma.banner.backgroundcolor" value="0" />
				</variables>
				<!-- Here you can set the dir attribute to "resources2" for an alternative design. -->
				<resources
					dir="resources/base"
					defaultexcludes="yes"
					excludes="readme.txt"
				>
					<root dir="resources/base/images" />
					<root dir="resources/base/sounds" />
					<root dir="resources/base/feeds" />
					<!-- add the localization element for created localized
					     versions of your application: -->
					<localization locales="en_US" unless="test" />
				</resources>
				
				<!-- obfuscator settings: do not obfuscate when the test-property is true -->
				<obfuscator name="ProGuard" unless="test || polish.blackberry" >
					<!--
					You can set additional parameters here, e.g.:
					<parameter name="optimize" value="false" />
					-->
				</obfuscator>
				
				<!-- debug settings: only include debug setting when the test-property is true 
				if="test" 
				-->
				<debug verbose="true" level="error" if="test" >
					<filter package="com.smaato.blackbox" level="debug" />
				</debug>
				
			</build>
			
			<!-- execution of emulator(s) -->
			<emulator
				wait="true"
				securityDomain="trusted"
				enableProfiler="false"
				enableMemoryMonitor="false"
				enableNetworkMonitor="false"
				if="test and not debug"
				>
			</emulator>
		
			<emulator
				wait="true"
				securityDomain="trusted"
				enableProfiler="false"
				enableMemoryMonitor="false"
				enableNetworkMonitor="false"
				if="debug">
				<debugger port="8000" />
			</emulator>
			
		</j2mepolish>
	</target>
	
	<target name="emulator" depends="test,j2mepolish" />
	
	<target name="clean" 
	  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
		<delete dir="build" />
		<delete dir="dist" />
	</target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="j2mepolish" name="enough-polish-example">
	
<!-- task definitions -->
<!-- classpath="import/enough-j2mepolish-build.jar:import/jdom.jar:import/proguard.jar" -->
	<property file="${user.name}.properties" />
	<!-- The polish.home property should point to the directory   -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" value="%{INSTALL_PATH}"/>
	<property file="${polish.home}/global.properties" />
	<!-- The smaato.home property should point to the directory   -->
	<!-- containing the smaato SOMA installation.                 -->
	<property name="smaato.home" location="${polish.home}/thirdparty/smaato" />

	<taskdef 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/lib/enough-j2mepolish-build.jar:${polish.home}/lib/jdom.jar" 
		name="j2mepolish"/>

			
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant notest j2mepolish" or just "ant" for calling the default-target -->
	
	<target name="test">
		<property name="test" value="true"/>
		<property name="dir.work" value="build/test" />
	</target>
		
	<target name="deploy">
		<property name="deploy-url" value="http://193.22.164.185:8080/"/>
	</target>
			
	<target name="init">
	  	<property name="test" value="false"/>
		<property name="deploy-url" value=""/>
		<property name="dir.work" value="build/real" />
	</target>
    
<target depends="init" name="j2mepolish" description="builds the sample application">
	<j2mepolish>
	    <!-- general settings -->
		<info 
			copyright="Copyright 2007 smaato, Inc. All rights reserved." 
			description="Demonstrates the usage of the smaato SOMA Library." 
			icon="icon.png" 
			infoUrl="www.smaato.com" 
			jarName="soma-sample.jar" 
			jarUrl="${deploy-url}${polish.jarName}" 
			name="SOMA-Sample" 
			vendorName="smaato" 
			version="1.1.0"
	    />
		<!-- selection of supported devices -->
		<deviceRequirements>
			<requirement name="Identifier" value="Generic/multi"/>
		</deviceRequirements>
	    <!-- build settings -->
		<build 
            usePolishGui="false"
			workDir="${dir.work}"
			sourceDir="source"
			>
			<!-- midlets definition -->
			<midlet class="com.smaato.soma.sample.SomaSampleMidlet" name="SOMA-Sample"/>
			<libraries>
				<library file="${smaato.home}/import/smaato-somaclient-online.jar" />
			</libraries>
			<resources>
				<localization locale="en" />
			</resources>
			<jad>
				<filter>
					MIDlet-Name, MIDlet-Version, 
					MIDlet-Vendor, MIDlet-Jar-URL, MIDlet-Jar-Size, 
					MIDlet-Description?, MIDlet-Icon?, MIDlet-Info-URL?,
					MIDlet-Data-Size?, MIDlet-*, *
				</filter>
 			</jad>
			<manifestFilter>
				Manifest-Version, MIDlet-Name, 
				MIDlet-1, MIDlet-2?, MIDlet-3?, MIDlet-4?, MIDlet-5?, 
				MIDlet-Version, MIDlet-Vendor,
				MicroEdition-Profile, MicroEdition-Configuration,
				MIDlet-Data-Size?
			</manifestFilter>
			
			<!-- obfuscator settings: do not obfuscate when the test-property is true -->
			<obfuscator name="ProGuard" useDefaultPackage="false" unless="test" >
			</obfuscator>
			<!-- debug settings: only include debug setting when the test-property is true -->
			<debug level="error" showLogOnError="true" verbose="true" if="test">
				<filter level="debug" package="com.smaato.soma"/>
			</debug>
			
		</build>
		
		<!-- execution of emulator(s) -->
		<emulator
			wait="true"
			if="test"
			/>		
	</j2mepolish>
</target>


<target name="clean"
	description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml"
	>
	<delete dir="build"/>
	<delete dir="dist"/>
</target>
	
	<target 
		name="emulator"
		description="Builds and starts the emulator" 
		depends="test, j2mepolish"
	/>


</project>
<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="j2mepolish" name="enough-polish-example">
	
<!-- task definitions -->
<!-- classpath="import/enough-j2mepolish-build.jar:import/jdom.jar:import/proguard.jar" -->
	<property file="${user.name}.properties" />
	<!-- The smaato.home property should point to the directory   -->
	<!-- containing the smaato SOMA installation.                 -->
	<property name="smaato.home" location="%{INSTALL_PATH}" />
	<!-- The polish.home property should point to the directory   -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" value="%{POLISH_HOME}"/>
	<property file="${polish.home}/global.properties" />

	<taskdef 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/lib/enough-j2mepolish-build.jar:${polish.home}/lib/jdom.jar" 
		name="j2mepolish"/>

			
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant notest j2mepolish" or just "ant" for calling the default-target -->
	
	<target name="test">
		<property name="test" value="true"/>
		<property name="dir.work" value="build/test" />
	</target>
		
	<target name="deploy">
		<property name="deploy-url" value="http://193.22.164.185:8080/"/>
	</target>
			
	<target name="init">
	  	<property name="test" value="false"/>
		<property name="deploy-url" value=""/>
		<property name="dir.work" value="build/real" />
	</target>
    
<target depends="init" name="j2mepolish" description="builds the sample application">
	<j2mepolish>
	    <!-- general settings -->
		<info 
			copyright="Copyright 2007 smaato, Inc. All rights reserved." 
			description="Demonstrates the usage of the smaato SOMA Library." 
			icon="icon.png" 
			infoUrl="www.smaato.com" 
			jarName="soma-sample.jar" 
			jarUrl="${deploy-url}${polish.jarName}" 
			name="SOMA-Sample" 
			vendorName="smaato" 
			version="1.1.0"
	    />
		<!-- selection of supported devices -->
		<deviceRequirements>
			<requirement name="Identifier" value="Generic/multi"/>
		</deviceRequirements>
	    <!-- build settings -->
		<build 
            usePolishGui="false"
			workDir="${dir.work}"
			sourceDir="source"
			>
			<!-- midlets definition -->
			<midlet class="com.smaato.soma.sample.SomaSampleMidlet" name="SOMA-Sample"/>
			<libraries>
				<library file="${smaato.home}/import/smaato-soma.jar" />
			</libraries>
			<resources>
				<localization locale="en" />
			</resources>
			<jad>
				<filter>
					MIDlet-Name, MIDlet-Version, 
					MIDlet-Vendor, MIDlet-Jar-URL, MIDlet-Jar-Size, 
					MIDlet-Description?, MIDlet-Icon?, MIDlet-Info-URL?,
					MIDlet-Data-Size?, MIDlet-*, *
				</filter>
 			</jad>
			<manifestFilter>
				Manifest-Version, MIDlet-Name, 
				MIDlet-1, MIDlet-2?, MIDlet-3?, MIDlet-4?, MIDlet-5?, 
				MIDlet-Version, MIDlet-Vendor,
				MicroEdition-Profile, MicroEdition-Configuration,
				MIDlet-Data-Size?
			</manifestFilter>
			
			<!-- obfuscator settings: do not obfuscate when the test-property is true -->
			<obfuscator name="ProGuard" useDefaultPackage="false" unless="test" >
			</obfuscator>
			<!-- debug settings: only include debug setting when the test-property is true -->
			<debug level="error" showLogOnError="true" verbose="true" if="test">
				<filter level="debug" package="com.smaato.soma"/>
			</debug>
			
		</build>
		
		<!-- execution of emulator(s) -->
		<emulator
			wait="true"
			if="test"
			/>		
	</j2mepolish>
</target>


<target name="clean"
	description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml"
	>
	<delete dir="build"/>
	<delete dir="dist"/>
</target>
	
	<target 
		name="emulator"
		description="Builds and starts the emulator" 
		depends="test, j2mepolish"
	/>


</project>
<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="j2mepolish" name="enough-polish-example">
	
<!-- task definitions -->
<!-- classpath="import/enough-j2mepolish-build.jar:import/jdom.jar:import/proguard.jar" -->
	<property file="${user.name}.properties" />
	<!-- The polish.home property should point to the directory   -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" value="%{INSTALL_PATH}"/>
	<property file="${polish.home}/global.properties" />
	<!-- The smaato.home property should point to the directory   -->
	<!-- containing the smaato SOMA installation.                 -->
	<property name="smaato.home" location="${polish.home}/thirdparty/smaato" />

	<taskdef 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/lib/enough-j2mepolish-build.jar:${polish.home}/lib/jdom.jar" 
		name="j2mepolish"/>

			
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant notest j2mepolish" or just "ant" for calling the default-target -->
	
	<target name="test">
		<property name="test" value="true"/>
		<property name="dir.work" value="build/test" />
	</target>
		
	<target name="deploy">
		<property name="deploy-url" value="http://193.22.164.185:8080/"/>
	</target>
			
	<target name="init">
	  	<property name="test" value="false"/>
		<property name="deploy-url" value=""/>
		<property name="dir.work" value="build/real" />
	</target>
    
<target depends="init" name="j2mepolish" description="builds the sample application">
	<j2mepolish>
	    <!-- general settings -->
		<info 
			copyright="Copyright 2007 smaato, Inc. All rights reserved." 
			description="Demonstrates the usage of the smaato SOMA Library." 
			icon="icon.png" 
			infoUrl="www.smaato.com" 
			jarName="soma-sample.jar" 
			jarUrl="${deploy-url}${polish.jarName}" 
			name="SOMA-Sample" 
			vendorName="smaato" 
			version="1.1.0"
	    />
		<!-- selection of supported devices -->
		<deviceRequirements>
			<requirement name="Identifier" value="Generic/multi"/>
		</deviceRequirements>
	    <!-- build settings -->
		<build 
            usePolishGui="false"
			workDir="${dir.work}"
			sourceDir="source"
			>
			<!-- midlets definition -->
			<midlet class="com.smaato.soma.sample.SomaSampleMidlet" name="SOMA-Sample"/>
			<libraries>
				<library file="${smaato.home}/import/smaato-somaclient-online.jar" />
			</libraries>
			<resources>
				<localization locale="en" />
			</resources>
			<jad>
				<filter>
					MIDlet-Name, MIDlet-Version, 
					MIDlet-Vendor, MIDlet-Jar-URL, MIDlet-Jar-Size, 
					MIDlet-Description?, MIDlet-Icon?, MIDlet-Info-URL?,
					MIDlet-Data-Size?, MIDlet-*, *
				</filter>
 			</jad>
			<manifestFilter>
				Manifest-Version, MIDlet-Name, 
				MIDlet-1, MIDlet-2?, MIDlet-3?, MIDlet-4?, MIDlet-5?, 
				MIDlet-Version, MIDlet-Vendor,
				MicroEdition-Profile, MicroEdition-Configuration,
				MIDlet-Data-Size?
			</manifestFilter>
			
			<!-- obfuscator settings: do not obfuscate when the test-property is true -->
			<obfuscator name="ProGuard" useDefaultPackage="false" unless="test" >
			</obfuscator>
			<!-- debug settings: only include debug setting when the test-property is true -->
			<debug level="error" showLogOnError="true" verbose="true" if="test">
				<filter level="debug" package="com.smaato.soma"/>
			</debug>
			
		</build>
		
		<!-- execution of emulator(s) -->
		<emulator
			wait="true"
			if="test"
			/>		
	</j2mepolish>
</target>


<target name="clean"
	description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml"
	>
	<delete dir="build"/>
	<delete dir="dist"/>
</target>
	
	<target 
		name="emulator"
		description="Builds and starts the emulator" 
		depends="test, j2mepolish"
	/>


</project>
<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="j2mepolish" name="enough-polish-example">
	
<!-- task definitions -->
<!-- classpath="import/enough-j2mepolish-build.jar:import/jdom.jar:import/proguard.jar" -->
	<property file="${user.name}.properties" />
	<!-- The smaato.home property should point to the directory   -->
	<!-- containing the smaato SOMA installation.                 -->
	<property name="smaato.home" location="%{INSTALL_PATH}" />
	<!-- The polish.home property should point to the directory   -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" value="%{POLISH_HOME}"/>
	<property file="${polish.home}/global.properties" />

	<taskdef 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/lib/enough-j2mepolish-build.jar:${polish.home}/lib/jdom.jar" 
		name="j2mepolish"/>

			
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant notest j2mepolish" or just "ant" for calling the default-target -->
	
	<target name="test">
		<property name="test" value="true"/>
		<property name="dir.work" value="build/test" />
	</target>
		
	<target name="deploy">
		<property name="deploy-url" value="http://193.22.164.185:8080/"/>
	</target>
			
	<target name="init">
	  	<property name="test" value="false"/>
		<property name="deploy-url" value=""/>
		<property name="dir.work" value="build/real" />
	</target>
    
<target depends="init" name="j2mepolish" description="builds the sample application">
	<j2mepolish>
	    <!-- general settings -->
		<info 
			copyright="Copyright 2007 smaato, Inc. All rights reserved." 
			description="Demonstrates the usage of the smaato SOMA Library." 
			icon="icon.png" 
			infoUrl="www.smaato.com" 
			jarName="soma-sample.jar" 
			jarUrl="${deploy-url}${polish.jarName}" 
			name="SOMA-Sample" 
			vendorName="smaato" 
			version="1.1.0"
	    />
		<!-- selection of supported devices -->
		<deviceRequirements>
			<requirement name="Identifier" value="Generic/multi"/>
		</deviceRequirements>
	    <!-- build settings -->
		<build 
            usePolishGui="false"
			workDir="${dir.work}"
			sourceDir="source"
			>
			<!-- midlets definition -->
			<midlet class="com.smaato.soma.sample.SomaSampleMidlet" name="SOMA-Sample"/>
			<libraries>
				<library file="${smaato.home}/import/smaato-soma.jar" />
			</libraries>
			<resources>
				<localization locale="en" />
			</resources>
			<jad>
				<filter>
					MIDlet-Name, MIDlet-Version, 
					MIDlet-Vendor, MIDlet-Jar-URL, MIDlet-Jar-Size, 
					MIDlet-Description?, MIDlet-Icon?, MIDlet-Info-URL?,
					MIDlet-Data-Size?, MIDlet-*, *
				</filter>
 			</jad>
			<manifestFilter>
				Manifest-Version, MIDlet-Name, 
				MIDlet-1, MIDlet-2?, MIDlet-3?, MIDlet-4?, MIDlet-5?, 
				MIDlet-Version, MIDlet-Vendor,
				MicroEdition-Profile, MicroEdition-Configuration,
				MIDlet-Data-Size?
			</manifestFilter>
			
			<!-- obfuscator settings: do not obfuscate when the test-property is true -->
			<obfuscator name="ProGuard" useDefaultPackage="false" unless="test" >
			</obfuscator>
			<!-- debug settings: only include debug setting when the test-property is true -->
			<debug level="error" showLogOnError="true" verbose="true" if="test">
				<filter level="debug" package="com.smaato.soma"/>
			</debug>
			
		</build>
		
		<!-- execution of emulator(s) -->
		<emulator
			wait="true"
			if="test"
			/>		
	</j2mepolish>
</target>


<target name="clean"
	description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml"
	>
	<delete dir="build"/>
	<delete dir="dist"/>
</target>
	
	<target 
		name="emulator"
		description="Builds and starts the emulator" 
		depends="test, j2mepolish"
	/>


</project>
<project 
	name="enough-installer" 
	default="bin-dist">

<!-- global properties -->
	<property file="${user.name}.properties" />
	<property name="izpack.dir" value="/home/enough/dev/IzPack" />

<!-- build targets, each target can be called via "ant [name]", e.g. "ant clean" -->

<target name="init">
	<!-- Create the time stamp -->
    <tstamp/>
    <!-- Create distribution dirs -->
	<mkdir dir="dist" />
</target>

<!-- Creates the Source Code documentation -->
<target name="javadoc">
    <javadoc 
    	destdir="doc" 
    	access="public" 
    	use="true" 
    	notree="false" 
    	nonavbar="false" 
    	noindex="false" 
    	splitindex="true" 
    	author="true" 
    	version="true" 
    	nodeprecatedlist="false" 
    	nodeprecated="false" 
    	packagenames="*" 
    	sourcepath="source/src" 
    	classpath="bin/classes:import/ant.jar:import/junit.jar" 
    />
 </target>

<target name="bin-dist" depends="init">
	<delete dir="bin/classes" />
	<mkdir dir="bin/classes" />
	<unjar src="import/TargetPanel.jar" dest="bin/classes"/>
	<unjar src="import/InstallPanel.jar" dest="bin/classes"/>

	<!-- compile the classes -->
	<echo message="compiling" />
	<javac classpath="import/installer.jar:import/TargetPanel.jar:import/UserInputPanel.jar:InstallPanel.jar"
		srcdir="source/src"
		destdir="bin/classes"
		source="1.4"
		target="1.4"
	/>
	<!-- create and copy the jar file for the ChooseLicensePanel -->
	<echo message="creating jar" />
	<jar destfile="${izpack.dir}/bin/panels/ChooseLicensePanel.jar"
	     basedir="bin/classes"
		 includes="**/ChooseLicensePanel.class"
		 index="false"
	     >
	</jar>
	<!-- copy the single ChooseLicensePanel class -->
	<echo message="copying class-file" />
	<copy file="bin/classes/com/izforge/izpack/panels/ChooseLicensePanel.class" 
	      todir="${izpack.dir}/bin/panels/ChooseLicensePanel/com/izforge/izpack/panels"/>
	
	<!-- create and copy the jar file for the ChooseTargetPanel -->
	<echo message="creating jar" />
	<jar destfile="${izpack.dir}/bin/panels/ChooseTargetPanel.jar"
	     basedir="bin/classes"
		 index="false"
	     >
	</jar>
	<!-- copy the single ChooseTargetPanel class -->
	<echo message="copying class-file" />
	<copy file="bin/classes/com/izforge/izpack/panels/ChooseTargetPanel.class" 
	      todir="${izpack.dir}/bin/panels/ChooseTargetPanel/com/izforge/izpack/panels"/>
	
	<!-- create and copy the jar file for the SetPropertiesPanel -->
	<echo message="creating jar" />
	<jar destfile="${izpack.dir}/bin/panels/SetPropertiesPanel.jar"
	     basedir="bin/classes"
		 index="false"
	     >
		<fileset dir="source/src/" includes="**/*.properties" />
		
	</jar>
	<!-- copy the single SetPropertiesPanel class -->
	<echo message="copying class-file" />
	<copy file="bin/classes/com/izforge/izpack/panels/SetPropertiesPanel.class" 
	      todir="${izpack.dir}/bin/panels/SetPropertiesPanel/com/izforge/izpack/panels"/>
	
	<!-- create and copy the jar file for the CustomInstallPanel -->
	<echo message="creating jar" />
	<jar destfile="${izpack.dir}/bin/panels/CustomInstallPanel.jar"
	     basedir="bin/classes"
		 index="false"
	     >
	</jar>
	<!-- copy the single CustomInstallPanel class -->
	<echo message="copying class-file" />
	<copy file="bin/classes/com/izforge/izpack/panels/CustomInstallPanel.class" 
	      todir="${izpack.dir}/bin/panels/CustomInstallPanel/com/izforge/izpack/panels"/>
	
	<!-- create and copy the jar file for the ChooseLicensePanel -->
	<echo message="creating jar" />
	<jar destfile="${izpack.dir}/bin/panels/FinishInstallationPanel.jar"
	     basedir="bin/classes"
		 index="false"
	     >
	</jar>
	<!-- copy the single ChooseLicensePanel class -->
	<echo message="copying class-file" />
	<copy file="bin/classes/com/izforge/izpack/panels/FinishInstallationPanel.class" 
	      todir="${izpack.dir}/bin/panels/FinishInstallationPanel/com/izforge/izpack/panels"/>
	
	
	<echo message="done." />
</target>
			
<target name="clean" depends="init">
	<delete dir="build" />
	<delete dir="dist" />
	<delete dir="tmp" />
</target>


</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="enough-polish" default="doc">

	<property file="../enough-polish-build/version.properties" />
    <target name="doc">
       
		<javadoc 
		    	destdir="doc" 
		    	access="protected" 
		    	use="true" 
		    	notree="false" 
		    	nonavbar="false" 
		    	noindex="false" 
		    	splitindex="true" 
		    	author="true" 
		    	version="true" 
		    	nodeprecatedlist="false" 
		    	nodeprecated="false" 
		    	packagenames="de.enough.*" 
		    	sourcepath="../enough-polish-j2me/source/src" 
			    classpath="bin/classes:../enough-polish-build/import/cldc-1.1.jar:../enough-polish-build/import/midp-2.0.jar:../enough-polish-build/import/windows.jar:../enough-polish-build/import/advancedmultimedia-1.0.jar:../enough-polish-build/import/android-2.1.jar:../enough-polish-build/import/blackberry-6.0.0.jar:../enough-polish-build/import/doja-2.5.jar:../enough-polish-build/import/m3g.jar:../enough-polish-build/import/nokia-ui.jar:../enough-polish-build/import/sensor.jar:../enough-polish-build/import/siemens-extension-api.jar"
		    	doctitle="The J2ME Polish Client Framework, Version ${Version}"
		>
			<link href="http://java.sun.com/javame/reference/apis/jsr118/" />
		</javadoc>
    </target>
    
	
</project>
<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="enough-polish-j2me" default="default" basedir=".">
    <description>Builds, tests, and runs the project enough-polish-j2me.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar-with-manifest:    JAR building (if you are using a manifest)
      -do-jar-without-manifest: JAR building (if you are not using a manifest)
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="enough-polish-j2me-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->
</project>
<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="j2mepolish" name="enough-polish-example">

<!-- task definitions -->
<!-- classpath="import/enough-j2mepolish-build.jar:import/jdom.jar:import/proguard.jar" -->
	<property file="${user.name}.properties" />
	<property name="wtk.home" value="/home/enough/dev/WTK2.2"/>
	<!-- The polish.home property should point to the directory   -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" value="../enough-polish-build"/>
	<property name="nokia.home" value="/home/enough/dev/Nokia" />
	<property name="device" value="Generic/multi"/>
	<taskdef 
		name="j2mepolish"
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/bin/classes:${polish.home}/import/jdom.jar" 
	/>

			
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant notest j2mepolish" or just "ant" for calling the default-target -->
	
	<target name="test">
		<property name="test" value="true"/>
		<property name="dir.work" value="build/test" />
	</target>
		

	<target name="init">
	  	<property name="test" value="false"/>
		<property name="deploy-url" value=""/>
		<property name="dir.work" value="build/real" />
	</target>
    
<target depends="init" name="j2mepolish">
	<j2mepolish>
	    <!-- general settings -->
		<info 
			license="GPL"
			copyright="Copyright 2005 Enough Software. All rights reserved." 
			description="A log viewer." 
			jarName="${polish.vendor}-${polish.name}-logviewer.jar" 
			name="Log Viewer" 
			vendorName="Enough Software" 
			version="1.1.0"
	    />
		<!-- selection of supported devices -->
		<deviceRequirements if="test">
			<requirement name="Identifier" value="${device}"/>
			<!--
			<requirement name="Identifier" value="Generic/multi"/>
			<requirement name="Identifier" value="Nokia/Series60"/>
			<requirement name="Identifier" value="Sony-Ericsson/P900"/>
			<requirement name="Identifier" value="Siemens/S55"/>
			<requirement name="Identifier" value="Sony-Ericsson/K700"/>
			-->
		</deviceRequirements>
		<deviceRequirements unless="test">
			<requirement name="Identifier" value="Nokia/6630, Motorola/A1000, Sony-Ericsson/K700, Siemens/S65, Nokia/6600, Generic/midp2"/>
			<!--  
			<requirement name="Identifier" value="Generic/PlainMidp2, Sony-Ericsson/K700, Nokia/Series60, Nokia/Series60Midp2, Motorola/V525, Siemens/S65, Motorola/A1000"/>
			<requirement name="Identifier" value="Siemens/S55"/>
			<requirement name="Identifier" value="Generic/PlainMidp2, Sony-Ericsson/K700, Nokia/Series60, Nokia/Series60Midp2, Motorola/V525, Siemens/S65"/>
			<requirement name="Identifier" value="Nokia/Series60, Nokia/Series60Midp2"/>
			<requirement name="Identifier" value="Siemens/S55"/>
			-->
		</deviceRequirements>
	    <!-- build settings -->
		<build 
			fullscreen="menu" 
            polishDir="../enough-polish-j2me/source/src" 
            symbols="polish.skipArgumentCheck" 
            usePolishGui="yes"
            sourceDir="source/src"
			workDir="${dir.work}"
			>
			<!-- midlets definition -->
			<midlet class="de.enough.polish.log.rms.LogViewerMidlet" name="Log Viewer"/>
			<!-- project-wide variables - used for preprocessing  -->
			<variables>
				<variable name="polish.classes.ApplicationInitializer" value="de.enough.polish.log.rms.LogViewerMidlet" />
				<variable name="polish.TextField.useDirectInput" value="true" unless="polish.hasPointerEvents" />
				<variable name="polish.log.UploadServer" value="http://213.133.111.51/logger/upload.jsp" />
				<variable name="polish.log.MIDletSuite" value="MN_5" />
				<variable name="polish.log.Vendor" value="Navigon AG" />
				<!--
				<variable name="polish.log.MIDletSuite" value="Demonstrator" />
				<variable name="polish.log.Vendor" value="Enough Software" />
				-->
				<!--
				<variable file="cfg/${ lowercase(polish.vendor) }.properties" />
				<variable name="polish.TextField.suppressCommands" value="true"/>
				<variable name="polish.ChoiceGroup.handleDefaultCommandFirst" value="true"/>
				<variable name="polish.Container.allowCycling" value="true"/>
				<variable name="polish.Screen.FireTriggersOkCommand" value="false"/>
				<variable name="polish.ChoiceGroup.suppressMarkCommands" value="true"/>
				<variable name="polish.ChoiceGroup.suppressSelectCommand" value="false"/>
				<variable name="polish.TextField.charactersKey2" value="abc2äæåàáâãç"/>
				<variable name="polish.TextField.suppressClearCommand" value="true"/>
				<variable name="update-url" value="http://www.enough.de/update"/>
				<variable name="polish.usePolishTitle" value="true" unless="polish.vendor == Nokia"/>
				<variable name="polish.GameCanvas.useFullScreen" value="menu"/>
				<variable name="polish.FullScreenXX" value="no" if="polish.vendor == Sony-Ericsson" />
				<variable name="Test1" value="Test1 is SET!!!" if="polish.vendor == Sony-Ericsson" />
				<variable name="Test2" value="Test2 is SET!!!" if="polish.Identifier.Nokia/Series60" />
				<variable name="polish.classes.ImageLoader" value="de.enough.polish.demo.TestImageLoader" />
				<variable name="polish.classes.ApplicationInitializer" value="de.enough.polish.demo.DemoMidlet" />
				<variable name="polish.DateFormat" value="de" />
				<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
				<variable name="polish.TextField.useDirectInput" value="true" if="!polish.hasPointerEvents"/>
				<variable name="polish.TextField.showInputInfo" value="false" />
				<variable name="polish.Menu.MarginBottom" value="3"/>
				<variable name="polish.Menu.MarginTop" value="12"/>
				<variable name="polish.Menu.MarginLeft" value="10"/>
				<variable name="polish.Menu.MarginRight" value="0"/>
				<variable name="polish.TextField.showInputInfo" value="false" />
				-->
			</variables>
			<!--
			-->
			<!-- obfuscator settings: do not obfuscate when the test-property is true unless="test" -->
			<obfuscator unless="test" useDefaultPackage="true" name="ProGuard" >
			</obfuscator>
			<!-- debug settings: only include debug setting when the test-property is true -->
			<!--
			if="test"
			-->
			<debug level="error" showLogOnError="true" verbose="false" if="test">
				<filter level="debug" pattern="de.enough.polish.demo.*"/>
				<filter level="debug" pattern="de.enough.polish.ui.Screen"/>
				<filter level="debug" pattern="de.enough.polish.ui.containerviews.*"/>

				<!--
				<filter level="debug" pattern="de.enough.polish.ui.CustomItem"/>
				<filter level="debug" pattern="de.enough.polish.ui.Container"/>
				<filter level="debug" pattern="de.enough.polish.ui.TabbedForm"/>
				<filter level="debug" pattern="de.enough.polish.ui.Screen"/>
				<filter level="debug" pattern="de.enough.polish.ui.TextField"/>
				-->
				<filter level="info" pattern="de.enough.polish.ui.game.GameCanvas"/>
			</debug>
			
			<resources
				dir="resources" 
				defaultexcludes="yes"
				excludes="*.db"
			 >
				 <localization
					locales="en"
				 />
			</resources>
		</build>
		
		<!-- execution of emulator(s) -->
		<emulator if="test"	
			enableNetworkMonitor="true"
		/>
	</j2mepolish>
</target>


<target description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml" name="clean">
	<delete dir="build"/>
	<delete dir="dist"/>
</target>
	
	<target 
		name="emulator"
		description="Starts the emulator" 
		depends="test, j2mepolish"
		>
	</target>
	
	<target 
		name="cleanbuild"
		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml" 
		depends="clean, j2mepolish"
		>
	</target>


</project>
<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="j2mepolish" name="enough-polish-sample-accessible">
	

<property file="${user.name}.properties" />
<property name="wtk.home" location="/home/enough/dev/WTK2.1" />
<property name="nokia.home" location="/home/enough/dev/Nokia" />
<property name="polish.home" location="../enough-polish-build" />
<property  name="mpp.home" location="/home/enough/dev/mpp-sdk"/>
	<property  name="device" value="Nokia/Series60E2" />

	
	<!-- task definitions -->
	<!-- classpath="import/enough-j2mepolish-build.jar:import/jdom.jar:import/proguard.jar" -->
	<taskdef 
		name="j2mepolish"
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/bin/classes:${polish.home}/lib/jdom.jar" 
	/>

		
<!-- build targets, each target can be called via "ant [name]", 
	 e.g. "ant clean", "ant notest j2mepolish" or just "ant" for calling the default-target -->

<target name="test">
	<property name="test" value="true"/>
</target>
	
<target name="deploy">
	<property name="deploy-url" value="http://193.22.164.185:8080/"/>
</target>
		
<target name="init">
  	<property name="test" value="false"/>
	<property name="deploy-url" value=""/>
</target>
    
<target depends="init" name="j2mepolish">
	<j2mepolish>
	    <!-- general settings -->
		<info copyright="Copyright 2007 Enough Software. All rights reserved." 
			deleteConfirm="Do you really want to kill me?" 
			description="A simple menu screen." 
			icon="dot.png" 
			infoUrl="http://www.enough.de/dictionary" 
			jarName="${polish.vendor}-${polish.name}-${polish.locale}-accessible.jar" 
			jarUrl="${deploy-url}${polish.jarName}" 
			license="GPL" 
			name="J2ME Polish Example" 
			vendorName="Enough Software" 
			version="1.3.4"
	    />
		<!-- selection of supported devices -->
		<deviceRequirements if="test">
			<requirement name="Identifier" value="${device}"/>
		</deviceRequirements>
		<deviceRequirements unless="test">
			<requirement name="Identifier" value="${device}"/>
		</deviceRequirements>
	    <!-- build settings -->
		<build fullscreen="menu" 
                imageLoadStrategy="foreground" 
                polishDir="../enough-polish-j2me/source/src" 
                symbols="polish.skipArgumentCheck" 
                usePolishGui="true"
            	sourceDir="source/src"
			>
			<!-- 			polishDir="../enough-polish-j2me/source/src"
			-->
			<!-- midlets definition -->
			<midlet class="de.enough.polish.sample.accessible.MenuMidlet" name="Accesssible"/>
			<!-- project-wide variables - used for preprocessing  -->
			<variables>
				<variable name="update-url" value="http://www.enough.de/update"/>
			</variables>
			<!--
			<jad>
				 <attribute 
					name="MIDlet-Push-1" 
					value="socket://:79, com.sun.example.SampleChat, *" 
					if="polish.midp2" 
					/>
				<attribute name="MyAttribute1" value="Value1" />
				<attribute name="MyAttribute2" value="Value2" />
				<attribute name="MyAttribute3" value="Value3" />
			</jad>
			-->
			<!-- obfuscator settings: do not obfuscate when the test-property is true -->
			<obfuscator useDefaultPackage="true" name="ProGuard" unless="test">
			</obfuscator>
			<!-- debug settings: only include debug setting when the test-property is true -->
			<debug if="test" level="error" showLogOnError="true" verbose="true">
				<!--
				<filter level="debug" class="de.enough.polish.ui.MasterCanvas"/>
				<filter level="debug" class="de.enough.polish.ui.Alert"/>
				<filter level="debug" class="de.enough.polish.ui.StyleSheet"/>
				<filter level="info" class="de.enough.polish.ui.Container"/>
				<filter level="debug" class="de.enough.polish.ui.Screen"/>
				<filter level="debug" pattern="de.enough.polish.example.*"/>
				-->
				<filter level="debug" class="de.enough.polish.ui.ContainerView"/>
				<filter level="info" pattern="de.enough.polish.ui.*"/>
			</debug>
			<resources
				dir="resources"
				defaultexcludes="yes"
				excludes="readme.txt"
			>
				<localization dynamic="false" defaultLocale="en_US" locales="de_DE, en_US"  unless="test"/>
				<localization locales="en_US" if="test" />
			</resources>
		</build>
		<emulator if="test" />
	</j2mepolish>
</target>


<target description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml" name="clean">
	<delete dir="build"/>
	<delete dir="dist"/>
</target>
	
	<target name="emulator" depends="test,j2mepolish" />

	<target name="cleanbuild" depends="clean,j2mepolish" />

</project>
<!-- This file controls the build process.                    -->
<!-- The most important target is the j2mepolish target,      -->
<!-- which controls for what devices the application should   -->
<!-- be created.                                              -->
<!--                                                          -->
<!-- Important: when you have no Wireless Toolkit installed   -->
<!-- you need to define the "preverify"-attribute             -->
<!-- of the <build>-element of the J2ME Polish task.          -->
<!--                                                          -->
<!-- When you call Ant from the command-line, you can         -->
<!-- call "ant test j2mepolish" to skip the obfuscation       -->
<!-- and to build the example for fewer handsets.             -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->

<project 
	name="enough-j2mepolish-animation" 
	default="j2mepolish">
	
	
<property file="${user.name}.properties" />
<property file="midlet.properties" />
	
<!-- The polish.home property should point to the directory   -->
<!-- containing the J2ME Polish installation.                 -->

<property name="polish.home" value="../enough-polish-build" />
<property file="${polish.home}/global.properties" />

<!-- The wtk.home property should point to the directory      -->
<!-- containing the Wireless Toolkit.                         -->




<!-- The siemens.home, nokia.home and motorola.home-          -->
<!-- properties can be necessary when their emulators         -->
<!-- should be started.                                       -->
<!-- The directory which contains the Siemens-SMTK
	<property name="siemens.home" value="C:\siemens" />
-->
<!-- The directory which contains the Nokia-emulators
	<property name="nokia.home" value="C:\Nokia" />
-->
<!-- The path to the Sony-Ericsson SDK
	<property name="sony-ericsson.home" value="C:\SonyEricsson\J2ME_SDK" />
-->
<!-- The directory which contains the Motorola-emulators
	<property name="motorola.home" value="C:\Program Files\Motorola\SDK v4.3 for J2ME" />
-->

	
	<property name="device" value="Generic/AnyPhone" />
	
	
	
<!-- Definition of the J2ME Polish task:                      -->

<taskdef name="j2mepolish" 
	classname="de.enough.polish.ant.PolishTask" 
	classpath="${polish.home}/bin/classes:${polish.home}/lib/enough-j2mepolish-build.jar:${polish.home}/lib/jdom.jar"/>

	
<!-- build targets, each target can be called via "ant [name]", 
	 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default target -->

<target name="setdeploy" 
	description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
	>
	<property name="deploy-url" value="http://www.company.com/download/" />
</target>
	
<target name="test" 
	description="Call this target first to skip the obfuscation step, e.g. ant test j2mepolish"
	>
	<property name="test" value="true" />
	<property name="dir.work" value="build/test" />
</target>
		
<target name="init">
  	<property name="test" value="false" />
	<property name="dir.work" value="build/real" />
	<property name="deploy-url" value="" />
</target>
 
<!-- In this target the J2ME Polish task is used.             -->
<!-- It has 3 sections:                                       -->
<!--    1. The info-section defines some general information  -->
<!--    2. The deviceRequirements-section chooses the devices -->
<!--       for which the application is optimized.            -->
<!--    3. The build-section controls the actual build        -->
<!--       process.                                           -->	
<target name="j2mepolish" 
		depends="init"
		description="This is the controller for the J2ME build process." 
		>
	<j2mepolish>
	    <!-- general settings, these settings basically form the JAD-attributes. -->
	    <!-- Have a look at the <jad>-section for setting specialised attributes.
	         You can also define localized attributes in the resources/messages.txt files -->
		<info
			name="J2ME Polish"
			version="1.3.4"
			description=""
			vendorName="Enough Software"
			infoUrl="http://www.j2mepolish.org"
			icon="icon.png"
			jarName="${polish.vendor}-${polish.name}-${polish.locale}-animation.jar" 
			jarUrl="${deploy-url}${polish.jarName}"
			copyright="Copyright 2008 Enough Software. All rights reserved."
		/>
		
		<!-- selection of supported devices -->
		<!-- In the test mode the application is build only for the  -->
		<!-- Generic/midp1 phone, but when the test-property is set to false, -->
		<!-- the second deviceRequirements will be used instead. -->
		<deviceRequirements if="test">
			<requirement name="Identifier" value="${device}" />
		</deviceRequirements>
		<deviceRequirements unless="test">
			<requirement name="Identifier" value="${device}" />
		</deviceRequirements>
		
		
	    <!-- build settings -->
		<!-- 
		 -->
		<build
			symbols="ExampleSymbol, AnotherExample"
			fullscreen="menu"
			usePolishGui="true"
			workDir="${dir.work}"
		>
		    
			<!-- midlets definition -->
			<midlet class="de.enough.polish.sample.animation.AnimationMidlet" name="Animations" /> 
			
			<!-- project-wide variables - used for preprocessing.  -->
			<!-- You can set localized variables in the resources/messages.txt files as well.  -->
			<variables includeAntProperties="true" >
				<!-- example variables:
				In your Java-code you can use the following snipet to use this variable:
				//#= private static final String UPDATE_URL = "${ update-url }";
				You can change the title of the sample application with the "title"-var.
				-->
				<variable name="polish.useScrollBar" value="true" />
				<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
				<variable name="polish.Item.suppressDefaultCommand" value="true" />
			</variables>
			<!-- Here you can set the dir attribute to "resources2" for an alternative design. -->
			<resources
				dir="resources"
				defaultexcludes="yes"
				excludes="readme.txt"
			>
				
			</resources>
			
			<!-- obfuscator settings: do not obfuscate when the test-property is true -->
			<obfuscator name="ProGuard" unless="test || polish.blackberry" >
				<!--
				You can set additional parameters here, e.g.:
				<parameter name="optimize" value="false" />
				-->
			</obfuscator>
			
			<!-- debug settings: only include debug setting when the test-property is true -->
			<debug if="test" showLogOnError="true" verbose="true" level="error">
				<filter pattern="de.enough.polish.example.*" level="debug" />
				<filter pattern="de.enough.polish.ui.*" level="warn" />
			</debug>
			
			
		</build>
		
		<!-- execution of emulator(s) -->
		<emulator
			wait="true"
			securityDomain="trusted"
			enableProfiler="false"
			enableMemoryMonitor="false"
			enableNetworkMonitor="false"
			if="test and not debug"
			>
		</emulator>
	
		<emulator
			wait="false"
			securityDomain="trusted"
			enableProfiler="false"
			enableMemoryMonitor="false"
			enableNetworkMonitor="false"
			if="debug">
			<debugger port="8000" />
		</emulator>
		
	</j2mepolish>
</target>

<target name="emulator" depends="test,j2mepolish" />

<target name="clean" 
  		description="allows a clean build. You should call [ant clean] whenever you made changes to the device database.">
	<delete dir="build" />
	<delete dir="dist" />
</target>

	<target name="cleanbuild" depends="clean,j2mepolish" />

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="j2mepolish" name="enough-polish-authenticate-facebook">

	<property file="${user.name}.properties" />
	<!-- the device used for test builds:                         -->
	<property  name="device" value="Generic/AnyPhone" />


	<property name="polish.home" location="../enough-polish-build" />

	
	<!-- task definitions -->
	<taskdef 
		name="j2mepolish"
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/bin/classes:${polish.home}/lib/jdom.jar" 
	/>

		
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant notest j2mepolish" or just "ant" for calling the default-target -->
	
	<target name="test">
		<property name="test" value="true"/>
	</target>
		
	<target name="deploy">
		<property name="deploy-url" value="http://193.22.164.185:8080/"/>
	</target>
			
	<target name="init">
	  	<property name="test" value="false"/>
		<property name="deploy-url" value=""/>
	</target>
	    
	<target depends="init" name="j2mepolish">
		<j2mepolish>
		    <!-- general settings -->
			<info 
				copyright="Copyright 2012 Enough Software. All rights reserved." 
				description="Demonstrates a Facebook login." 
				infoUrl="http://www.enough.de" 
				jarName="${polish.vendor}-${polish.name}-${polish.locale}-authenticate-facebook.jar" 
				jarUrl="${deploy-url}${polish.jarName}" 
				name="Facebook Login" 
				vendorName="Enough Software" 
				version="1.0.4"
		    />
			<!-- selection of supported devices -->
			<deviceRequirements if="test">
				<requirement name="Identifier" value="${device}"/>
			</deviceRequirements>
			<deviceRequirements unless="test">
				<requirement name="Identifier" value="${device}"/>
			</deviceRequirements>
		    <!-- build settings -->
			<build fullscreen="menu" 
	                usePolishGui="true"
				>
				<!-- midlets definition -->
				<midlet class="de.enough.polish.app.App" name="OAuth" />
				<!-- project-wide variables - used for preprocessing  -->
				<variables>
					<variable name="polish.TextField.useDirectInput" value="true" />
					<variable name="polish.TextField.useDirectInput" value="true" />
					<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
					<variable name="polish.useScrollBar" value="true" />
					<variable name="polish.ScreenInfo.enable" value="true" />
					<variable name="polish.build.android.permissions" value="INTERNET" />
				</variables>
				<!-- obfuscator settings: do not obfuscate when the test-property is true -->
				<obfuscator useDefaultPackage="false" name="ProGuard" unless="test">
					<keep class="de.enough.polish.example.Dummy" />
				</obfuscator>
				<!-- debug settings: only include debug setting when the test-property is true -->
				<debug if="test" level="error" verbose="true">
					<filter level="debug" package="de.enough.polish.app"/>
					<!--
					<filter level="info" pattern="de.enough.polish.ui.*"/>
					<filter level="debug" class="de.enough.polish.ui.Container" />
					<filter level="debug" class="de.enough.polish.ui.ChoiceTextField" />
					<filter level="debug" class="de.enough.polish.ui.TreeItem" />
					-->
				</debug>
				<resources
					dir="resources/base"
					defaultexcludes="yes"
					excludes="readme.txt"
				>
					<root dir="resources/base" />
					<root dir="resources/base/images" />
					<root dir="resources/base/i18n" />
					<root dir="resources/base/style" />
					<localization>
						<locale name="de" encoding="UTF8"/>
					</localization>
				</resources>
			</build>
			<emulator if="test" />
		</j2mepolish>
	</target>
	
	
	<target description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml" name="clean">
		<delete dir="build"/>
		<delete dir="dist"/>
	</target>
	
	<target name="emulator" depends="test,j2mepolish" />

	<target name="cleanbuild" depends="clean,j2mepolish" />

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="j2mepolish" name="enough-polish-example">

	<property file="${user.name}.properties" />
	<!-- the device used for test builds:                         -->
	<property  name="device" value="Generic/AnyPhone" />


	<property name="polish.home" location="../enough-polish-build" />

	
	<!-- task definitions -->
	<taskdef 
		name="j2mepolish"
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/bin/classes:${polish.home}/lib/jdom.jar" 
	/>

		
<!-- build targets, each target can be called via "ant [name]", 
	 e.g. "ant clean", "ant notest j2mepolish" or just "ant" for calling the default-target -->

<target name="test">
	<property name="test" value="true"/>
</target>
	
<target name="deploy">
	<property name="deploy-url" value="http://193.22.164.185:8080/"/>
</target>
		
<target name="init">
  	<property name="test" value="false"/>
	<property name="deploy-url" value=""/>
</target>
    
<target depends="init" name="j2mepolish">
	<j2mepolish>
	    <!-- general settings -->
		<info 
			copyright="Copyright 2012 Enough Software. All rights reserved." 
			description="An application stub." 
			infoUrl="http://www.enough.de" 
			jarName="${polish.vendor}-${polish.name}-${polish.locale}-app.jar" 
			jarUrl="${deploy-url}${polish.jarName}" 
			name="App" 
			vendorName="Enough Software" 
			version="1.0.4"
	    />
		<!-- selection of supported devices -->
		<deviceRequirements if="test">
			<requirement name="Identifier" value="${device}"/>
		</deviceRequirements>
		<deviceRequirements unless="test">
			<requirement name="Identifier" value="${device}"/>
		</deviceRequirements>
	    <!-- build settings -->
		<build fullscreen="menu" 
                usePolishGui="true"
			>
			<!-- midlets definition -->
			<midlet class="de.enough.polish.app.App" name="BlankApp" />
			<!-- project-wide variables - used for preprocessing  -->
			<variables>
				<variable name="polish.TextField.useDirectInput" value="true" />
				<variable name="polish.TextField.supportSymbolsEntry" value="true" />
				<!--
				<variable name="polish.Container.allowCycling" value="false" />
				<variable name="polish.MenuBar.OptionsPosition" value="right" />
				-->
				<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
				<variable name="polish.useScrollBar" value="true" />
				<variable name="polish.ScreenInfo.enable" value="true" />
			</variables>
			<!-- obfuscator settings: do not obfuscate when the test-property is true -->
			<obfuscator useDefaultPackage="false" name="ProGuard" unless="test">
				<keep class="de.enough.polish.example.Dummy" />
			</obfuscator>
			<!-- debug settings: only include debug setting when the test-property is true -->
			<debug if="test" level="error" showLogOnError="true" verbose="true">
				<filter level="debug" package="de.enough.polish.sample.mail"/>
				<filter level="info" pattern="de.enough.polish.ui.*"/>
				<filter level="debug" class="de.enough.polish.ui.Container" />
				<!--
				<filter level="debug" class="de.enough.polish.ui.ChoiceTextField" />
				<filter level="debug" class="de.enough.polish.ui.TreeItem" />
				-->
			</debug>
			<resources
				dir="resources/base"
				defaultexcludes="yes"
				excludes="readme.txt"
			>
				<root dir="resources/base" />
				<root dir="resources/base/images" />
				<root dir="resources/base/i18n" />
				<root dir="resources/base/style" />
				<localization>
					<locale name="de" encoding="UTF8"/>
				</localization>
			</resources>
		</build>
		<emulator if="test" />
	</j2mepolish>
</target>


<target description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml" name="clean">
	<delete dir="build"/>
	<delete dir="dist"/>
</target>
	
	<target name="emulator" depends="test,j2mepolish" />

	<target name="cleanbuild" depends="clean,j2mepolish" />

</project>
<!-- This file controls the build process.                    -->
<!-- The most important target is the j2mepolish target,      -->
<!-- which controls for what devices the application should   -->
<!-- be created.                                              -->
<!--                                                          -->
<!-- Important: when you have no Wireless Toolkit installed   -->
<!-- you need to define the "preverify"-attribute             -->
<!-- of the <build>-element of the J2ME Polish task.          -->
<!--                                                          -->
<!-- When you call Ant from the command-line, you can         -->
<!-- call "ant test j2mepolish" to skip the obfuscation       -->
<!-- and to build the example for fewer handsets.             -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->

<project 
	name="enough-j2mepolish-browser" 
	default="j2mepolish">
	
	
<property file="${user.name}.properties" />
	
<!-- The polish.home property should point to the directory   -->
<!-- containing the J2ME Polish installation.                 -->
<property name="polish.home" value="../enough-polish-build/" />

<property file="${polish.home}/global.properties" />

	
	
<!-- Definition of the J2ME Polish task:                      -->

<taskdef name="j2mepolish" 
	classname="de.enough.polish.ant.PolishTask" 
	classpath="${polish.home}:${polish.home}/bin/classes:
			${polish.home}/lib/enough-j2mepolish-build.jar:
			${polish.home}/lib/jdom.jar"
/>
	
	
<!-- build targets, each target can be called via "ant [name]", 
	 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default target -->

<target name="setdeploy" 
	description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
	>
	<property name="deploy-url" value="http://www.company.com/download/" />
</target>
	
<target name="test" 
	description="Call this target first to skip the obfuscation step, e.g. ant test j2mepolish"
	>
	<property name="test" value="true" />
	<property name="dir.work" value="build/test" />
</target>
		
<target name="init">
  	<property name="test" value="false" />
	<property name="dir.work" value="build/real" />
	<property name="deploy-url" value="" />
</target>
 
<!-- In this target the J2ME Polish task is used.             -->
<!-- It has 3 sections:                                       -->
<!--    1. The info-section defines some general information  -->
<!--    2. The deviceRequirements-section chooses the devices -->
<!--       for which the application is optimized.            -->
<!--    3. The build-section controls the actual build        -->
<!--       process.                                           -->	
<target name="j2mepolish" 
		depends="init"
		description="This is the controller for the J2ME build process." 
		>
	<j2mepolish>
		<lifecyclemanager name="mea">
			<parameter name="fallbackDevice" value="Generic/AnyPhone" />
			<parameter name="access" value="pseudoprivate" />
		</lifecyclemanager>
	    <!-- general settings, these settings basically form the JAD-attributes. -->
	    <!-- Have a look at the <jad>-section for setting specialised attributes.
	         You can also define localized attributes in the resources/messages.txt files -->
		<info
			name="Browser"
			version="1.3.5"
			description=""
			vendorName="Enough Software"
			infoUrl="http://www.j2mepolish.org"
			jarName="${polish.vendor}-${polish.name}-${polish.locale}-browser.jar" 
			jarUrl="${deploy-url}${polish.jarName}"
			copyright="Copyright 2007 Enough Software. All rights reserved."
		/>
		
		<!-- selection of supported devices -->
		<!-- In the test mode the application is build only for the  -->
		<!-- Generic/midp1 phone, but when the test-property is set to false, -->
		<!-- the second deviceRequirements will be used instead. -->
		<deviceRequirements if="test">
			<requirement name="Identifier" value="${device}" />
		</deviceRequirements>
		<deviceRequirements if="!test and device:defined">
			<requirement name="Identifier" value="${device}" />
		</deviceRequirements>
		<deviceRequirements unless="test or device:defined">
			<or>
						<requirement name="Identifier" value="Generic/DefaultColorPhone" />
						<requirement name="Identifier" value="Generic/DefaultGrayPhone" />
						<requirement name="Identifier" value="Generic/JtwiCldc11" />
						<requirement name="Identifier" value="Generic/MediaControlSkin" />
						<requirement name="Identifier" value="Generic/Midp2Cldc11" />
						<requirement name="Identifier" value="Generic/Midp2Cldc11Pointer" />
						<requirement name="Identifier" value="Generic/MppPhone" />
						<requirement name="Identifier" value="Generic/PlainMidp2Cldc11" />
						<requirement name="Identifier" value="Generic/QwertyDevice" />
						<requirement name="Identifier" value="Generic/multi" />
						<requirement name="Identifier" value="Nokia/Series40DP2" />
						<requirement name="Identifier" value="Nokia/Series40DP3" />
						<requirement name="Identifier" value="Nokia/Series40Midp2" />
						<requirement name="Identifier" value="Nokia/Series60E2FP2" />
						<requirement name="Identifier" value="Nokia/Series60E2FP3" />
						<requirement name="Identifier" value="Nokia/Series60E3" />
						<requirement name="Identifier" value="Siemens/x65" />
						<requirement name="Identifier" value="Siemens/x75" />
						<requirement name="Identifier" value="Sony-Ericsson/JavaPlatform2" />
						<requirement name="Identifier" value="Sony-Ericsson/JavaPlatform3" />
						<requirement name="Identifier" value="Sony-Ericsson/JavaPlatform4" />
						<requirement name="Identifier" value="Sony-Ericsson/JavaPlatform5" />
						<requirement name="Identifier" value="Sony-Ericsson/JavaPlatform6" />
						</or>
		</deviceRequirements>
		
	    <!-- build settings -->
		<!-- 
		 -->
		<build
			symbols="ExampleSymbol, AnotherExample"
			fullscreen="menu"
			usePolishGui="true"
			workDir="${dir.work}"
		>
			<!-- midlets definition -->
			<midlet class="de.enough.polish.sample.browser.BrowserMidlet" name="Browser" />
			
			<!-- project-wide variables - used for preprocessing.  -->
			<!-- You can set localized variables in the resources/messages.txt files as well.  -->
			<variables includeAntProperties="true" >
				<variable name="polish.usePopupItem" value="true" />
				<variable name="polish.Browser.UserAgent" value="J2ME-Polish 2.0" />
				<variable name="polish.Browser.MaxRedirects" value="5" />
				<variable name="polish.Browser.Gzip" value="true" />
				<variable name="polish.Browser.PaintDownloadIndicator" value="true" />
				<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
				<variable name="polish.useScrollBar" value="true" />
				<!--
				<variable name="polish.RemoteBluetoothScreen" value="true" />
				-->
			</variables>
			<resources
				dir="resources"
				defaultexcludes="yes"
				excludes="readme.txt"
			>
				<!-- add the localization element for created localized
				     versions of your application: -->
				<localization locales="en_US" unless="test" />
				<localization locales="en_US" if="test" />
			</resources>
			
			<!-- obfuscator settings: do not obfuscate when the test-property is true -->
			<obfuscator name="ProGuard" unless="test || polish.blackberry" > 
				<!--
				You can set additional parameters here, e.g.:
				<parameter name="optimize" value="false" />
				-->
			</obfuscator>
			
			<!-- debug settings: only include debug setting when the test-property is true -->
			<debug if="test or log" level="error">
				<filter pattern="de.enough.polish.ui.*" level="warn" />
				<filter pattern="de.enough.polish.browser.html.*" level="info" />
		         <handler name="display">
                   <parameter name="timeout" value="100s" />
                   <parameter name="max-entries" value="30" />
                   <parameter name="background-color" value="#a333" />
                   <parameter name="font-color" value="yellow" />
                   <parameter name="shadow-color" value="rgb(0,0,0)" />
                </handler>                     
				<!--
				<filter class="de.enough.polish.ui.ChoiceGroup" level="debug" />
				<filter package="de.enough.polish.sample.browser" level="debug" />
				<filter class="de.enough.polish.browser.Browser" level="debug" />
				<filter class="de.enough.polish.browser.html.HtmlBrowser" level="debug" />
				<filter class="de.enough.polish.ui.containerviews.MIDP2LayoutView" level="debug" />
				<filter class="de.enough.polish.ui.ContainerView" level="debug" />
				<filter class="de.enough.polish.ui.Container" level="debug" />
				-->
			</debug>
			
			<!-- user defined JAD attributes can also be used: -->
			<jad>
				<attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
			</jad>	
			
			
		</build>
		
		<!-- execution of emulator(s) -->
		<emulator
			wait="true"
			securityDomain="trusted"
			enableProfiler="false"
			enableMemoryMonitor="false"
			enableNetworkMonitor="false"
			if="test and not debug"
			>
		</emulator>
	
		<emulator
			wait="true"
			securityDomain="trusted"
			enableProfiler="false"
			enableMemoryMonitor="false"
			enableNetworkMonitor="false"
			if="debug">
			<debugger port="8000" />
		</emulator>
		
	</j2mepolish>
</target>

<target name="emulator" depends="test,j2mepolish" />

<target name="clean" 
  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
	<delete dir="build" />
	<delete dir="dist" />
</target>

	<target name="cleanbuild" depends="clean,j2mepolish" />

</project>
<!-- This file controls the build process.                    -->
<!-- The most important target is the j2mepolish target,      -->
<!-- which controls for what devices the application should   -->
<!-- be created.                                              -->
<!--                                                          -->
<!-- Important: when you have no Wireless Toolkit installed   -->
<!-- you need to define the "preverify"-attribute             -->
<!-- of the <build>-element of the J2ME Polish task.          -->
<!--                                                          -->
<!-- When you call Ant from the command-line, you can         -->
<!-- call "ant test j2mepolish" to skip the obfuscation       -->
<!-- and to build the example for fewer handsets.             -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->

<project 
	name="enough-j2mepolish-example" 
	default="j2mepolish">
	
	
<property file="${user.name}.properties" />
<property file="midlet.properties" />
	
<!-- The polish.home property should point to the directory   -->
<!-- containing the J2ME Polish installation.                 -->

<property name="polish.home" value="../enough-polish-build" />
<property file="${polish.home}/global.properties" />

<!-- The wtk.home property should point to the directory      -->
<!-- containing the Wireless Toolkit.                         -->




<!-- The siemens.home, nokia.home and motorola.home-          -->
<!-- properties can be necessary when their emulators         -->
<!-- should be started.                                       -->
<!-- The directory which contains the Siemens-SMTK
	<property name="siemens.home" value="C:\siemens" />
-->
<!-- The directory which contains the Nokia-emulators
	<property name="nokia.home" value="C:\Nokia" />
-->
<!-- The path to the Sony-Ericsson SDK
	<property name="sony-ericsson.home" value="C:\SonyEricsson\J2ME_SDK" />
-->
<!-- The directory which contains the Motorola-emulators
	<property name="motorola.home" value="C:\Program Files\Motorola\SDK v4.3 for J2ME" />
-->

	
<property name="mpp.home" value="/Applications/mpp-sdk" />
	
	
	
<!-- Definition of the J2ME Polish task:                      -->

<taskdef name="j2mepolish" 
	classname="de.enough.polish.ant.PolishTask" 
	classpath="${polish.home}/bin/classes:${polish.home}/lib/enough-j2mepolish-build.jar:${polish.home}/lib/jdom.jar"/>

	
<!-- build targets, each target can be called via "ant [name]", 
	 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default target -->

<target name="setdeploy" 
	description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
	>
	<property name="deploy-url" value="http://www.company.com/download/" />
</target>
	
<target name="test" 
	description="Call this target first to skip the obfuscation step, e.g. ant test j2mepolish"
	>
	<property name="test" value="true" />
	<property name="dir.work" value="build/test" />
</target>
		
<target name="init">
  	<property name="test" value="false" />
	<property name="dir.work" value="build/real" />
	<property name="deploy-url" value="" />
</target>
 
<!-- In this target the J2ME Polish task is used.             -->
<!-- It has 3 sections:                                       -->
<!--    1. The info-section defines some general information  -->
<!--    2. The deviceRequirements-section chooses the devices -->
<!--       for which the application is optimized.            -->
<!--    3. The build-section controls the actual build        -->
<!--       process.                                           -->	
<target name="j2mepolish" 
		depends="init"
		description="This is the controller for the J2ME build process." 
		>
	<j2mepolish>
	    <!-- general settings, these settings basically form the JAD-attributes. -->
	    <!-- Have a look at the <jad>-section for setting specialised attributes.
	         You can also define localized attributes in the resources/messages.txt files -->
		<info
			license="GPL"
			name="J2ME Polish"
			version="1.3.4"
			description=""
			vendorName="Enough Software"
			infoUrl="http://www.j2mepolish.org"
			icon="dot.png"
			jarName="${polish.vendor}-${polish.name}-${polish.locale}-example.jar" 
			jarUrl="${deploy-url}${polish.jarName}"
			copyright="Copyright 2004 Enough Software. All rights reserved."
			deleteConfirm="Do you really want to kill me?" 
		/>
		
		<!-- selection of supported devices -->
		<!-- In the test mode the application is build only for the  -->
		<!-- Generic/midp1 phone, but when the test-property is set to false, -->
		<!-- the second deviceRequirements will be used instead. -->
		<deviceRequirements if="test">
			<requirement name="Identifier" value="${device}" />
		</deviceRequirements>
		<deviceRequirements unless="test">
			<requirement name="Identifier" value="${device}" />
		</deviceRequirements>
		<deviceRequirements if="false" unless="test and !device:defined">
			<or>
						<requirement name="Identifier" value="Generic/DefaultColorPhone" />
						<requirement name="Identifier" value="Generic/DefaultGrayPhone" />
						<requirement name="Identifier" value="Generic/JtwiCldc11" />
						<requirement name="Identifier" value="Generic/MediaControlSkin" />
						<requirement name="Identifier" value="Generic/Midp2Cldc11" />
						<requirement name="Identifier" value="Generic/Midp2Cldc11Pointer" />
						<requirement name="Identifier" value="Generic/MppPhone" />
						<requirement name="Identifier" value="Generic/PlainMidp2Cldc11" />
						<requirement name="Identifier" value="Generic/QwertyDevice" />
						<requirement name="Identifier" value="Generic/multi" />
						<requirement name="Identifier" value="Nokia/Series40DP2" />
						<requirement name="Identifier" value="Nokia/Series40DP3" />
						<requirement name="Identifier" value="Nokia/Series40Midp2" />
						<requirement name="Identifier" value="Nokia/Series60E2FP2" />
						<requirement name="Identifier" value="Nokia/Series60E2FP3" />
						<requirement name="Identifier" value="Nokia/Series60E3" />
						<requirement name="Identifier" value="Siemens/x65" />
						<requirement name="Identifier" value="Siemens/x75" />
						<requirement name="Identifier" value="Sony-Ericsson/JavaPlatform2" />
						<requirement name="Identifier" value="Sony-Ericsson/JavaPlatform3" />
						<requirement name="Identifier" value="Sony-Ericsson/JavaPlatform4" />
						<requirement name="Identifier" value="Sony-Ericsson/JavaPlatform5" />
						<requirement name="Identifier" value="Sony-Ericsson/JavaPlatform6" />
						</or>
		</deviceRequirements>
		
	    <!-- build settings -->
		<!-- 
		 -->
		<build
			symbols="ExampleSymbol, AnotherExample"
			fullscreen="menu"
			usePolishGui="true"
			workDir="${dir.work}"
			polishDir="../enough-polish-j2me/source/src"
		>
		    
			<!-- midlets definition -->
			<!-- <midlet class="de.enough.polish.example.MenuMidlet" name="Example" /> -->
			
			<!-- project-wide variables - used for preprocessing.  -->
			<!-- You can set localized variables in the resources/messages.txt files as well.  -->
			<variables includeAntProperties="true" >
				<!-- example variables:
				In your Java-code you can use the following snipet to use this variable:
				//#= private static final String UPDATE_URL = "${ update-url }";
				You can change the title of the sample application with the "title"-var.
				-->
				<variable name="update-url" value="http://www.enough.de/update" />
				<variable name="title" value="J2ME Polish" />
				<variable name="polish.useScrollBar" value="true" />
				<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
			</variables>
			<!-- Here you can set the dir attribute to "resources2" for an alternative design. -->
			<resources
				dir="resources"
				defaultexcludes="yes"
				excludes="readme.txt"
			>
				<!-- you can add resources based on complex criterias: 
				<fileset 
					dir="resources/multimedia" 
					includes="*.wav" 
					if="polish.audio.wav" 
				/>
				<fileset 
					dir="resources/multimedia" 
					includes="*.mid" 
					if="polish.audio.midi and not polish.audio.wav" 
				/>
				-->
				<!-- add the localization element for created localized
				     versions of your application: -->
				<localization locales="de_DE, en_US" unless="test" />
				<localization locales="en_US" if="test" />
			</resources>
			
			<!-- obfuscator settings: do not obfuscate when the test-property is true -->
			<obfuscator name="ProGuard" useDefaultPackage="true" unless="test || polish.blackberry" >
				<!--
				You can set additional parameters here, e.g.:
				<parameter name="optimize" value="false" />
				-->
			</obfuscator>
			
			<!-- debug settings: only include debug setting when the test-property is true -->
			<debug if="test" showLogOnError="true" verbose="true" level="error">
				<filter pattern="de.enough.polish.example.*" level="debug" />
				<filter pattern="de.enough.polish.ui.*" level="warn" />
			</debug>
			
			<!-- user defined JAD attributes can also be used: -->
			<jad>
				<attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
			</jad>	
			
			
		</build>
		
		<!-- execution of emulator(s) -->
		<emulator
			wait="true"
			securityDomain="trusted"
			enableProfiler="false"
			enableMemoryMonitor="false"
			enableNetworkMonitor="false"
			if="test and not debug"
			>
		</emulator>
	
		<emulator
			wait="false"
			securityDomain="trusted"
			enableProfiler="false"
			enableMemoryMonitor="false"
			enableNetworkMonitor="false"
			if="debug">
			<debugger port="8000" />
		</emulator>
		
	</j2mepolish>
</target>

<target name="emulator" depends="test,j2mepolish" />

<target name="clean" 
  		description="allows a clean build. You should call [ant clean] whenever you made changes to the device database.">
	<delete dir="build" />
	<delete dir="dist" />
</target>

	<target name="cleanbuild" depends="clean,j2mepolish" />

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="j2mepolish" name="enough-polish-sample-localization">
	

	<property file="${user.name}.properties" />
	<property name="polish.home" location="C://Program Files/J2ME-Polish2.1.0-Preview" />
	<property file="${polish.home}/global.properties" />

	<property  name="device" value="Generic/AnyPhone" />
	<property  name="devices" value="${device}" />

	
	<!-- task definitions -->
	<!-- classpath="import/enough-j2mepolish-build.jar:import/jdom.jar:import/proguard.jar" -->
	<taskdef 
		name="j2mepolish"
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/bin/classes:${polish.home}/lib/enough-j2mepolish-client.jar:${polish.home}/lib/jdom.jar" 
	/>

		
<!-- build targets, each target can be called via "ant [name]", 
	 e.g. "ant clean", "ant notest j2mepolish" or just "ant" for calling the default-target -->

<target name="test">
	<property name="test" value="true"/>
</target>
	
<target name="deploy">
	<property name="deploy-url" value="http://193.22.164.185:8080/"/>
</target>
		
<target name="init">
  	<property name="test" value="false"/>
	<property name="deploy-url" value=""/>
</target>
    
<target depends="init" name="j2mepolish">
	<j2mepolish>
	    <!-- general settings -->
		<info copyright="Copyright 2009 Enough Software. All rights reserved." 
			description="A simple datefield example." 
			icon="logo.png" 
			jarName="${polish.vendor}-${polish.name}-${polish.locale}-datefield.jar" 
			jarUrl="${deploy-url}${polish.jarName}" 
			name="DateField" 
			vendorName="Enough Software" 
			version="1.3.0"
	    />
		<!-- selection of supported devices -->
		<deviceRequirements if="test">
			<requirement name="Identifier" value="${device}"/>
		</deviceRequirements>
		<deviceRequirements unless="test">
			<requirement name="Identifier" value="${devices}"/>
		</deviceRequirements>
	    <!-- build settings -->
		<build fullscreen="menu" 
                imageLoadStrategy="foreground" 
                symbols="polish.skipArgumentCheck" 
                usePolishGui="true"
			>
			<sources>
				<source dir="source/src" />
			</sources>
			<!-- midlets definition -->
			<midlet class="de.enough.polish.sample.DateFieldMidlet" name="DateField"/>
			<!-- project-wide variables - used for preprocessing  -->
			<variables>
				<variable name="polish.DateField.useDirectInput" value="true" />
				<variable name="polish.DateField.useDirectInputForPointer" value="true" />
				<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
				<variable name="polish.useScrollBar" value="true" />
			</variables>
			<!-- obfuscator settings: do not obfuscate when the test-property is true -->
			<obfuscator name="ProGuard" unless="test">
			</obfuscator>
			<!-- debug settings: only include debug setting when the test-property is true -->
			<debug if="test" level="error" showLogOnError="true" verbose="true">
				<!--
				<handler name="display" />
				-->
				<filter level="info" pattern="de.enough.polish.ui.*"/>
				<!--
				<filter level="debug" class="de.enough.polish.ui.Container"/>
				<filter level="debug" class="de.enough.polish.ui.MasterCanvas"/>
				<filter level="debug" class="de.enough.polish.ui.Alert"/>
				<filter level="debug" class="de.enough.polish.ui.StyleSheet"/>
				<filter level="debug" class="de.enough.polish.ui.Screen"/>
				<filter level="debug" package="de.enough.polish.example"/>
				<filter level="debug" class="de.enough.polish.ui.ContainerView"/>
				-->
			</debug>
			<resources
				dir="resources"
				defaultexcludes="yes"
				excludes="readme.txt"
			>
				<root dir="resources/images" />
				<localization locales="en" />
			</resources>
			<jad>
				<attribute name="LGE-MIDlet-Height"   value="400" />
				<attribute name="LGE-MIDlet-TargetLCD-Height" value="380" />
			</jad>
		</build>
		<emulator if="test" />
	</j2mepolish>
</target>


<target description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml" name="clean">
	<delete dir="build"/>
	<mkdir dir="dist" />
	<delete dir="dist/*"/>
</target>
	
	<target name="emulator" depends="test,j2mepolish" />

	<target name="cleanbuild" depends="clean,j2mepolish" />

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="j2mepolish" name="enough-polish-sample-doja">
	
	<property file="${user.name}.properties" />
	<property  name="polish.home" location="../enough-polish-build"/>
	<property  name="wtk.home" location="/home/enough/dev/WTK2.2"/>
	<property  name="doja.home" location="/home/enough/dev/doja/jDKDoJa2.5"/>
	<property  name="device" value="DoJa/os15" />

	<!-- task definitions -->
	<!-- classpath="import/enough-j2mepolish-build.jar:import/jdom.jar:import/proguard.jar" -->
	<taskdef classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/bin/classes:${polish.home}/lib/jdom.jar" 
		name="j2mepolish"/>
	
			
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant notest j2mepolish" or just "ant" for calling the default-target -->
	
	<target name="test">
		<property name="test" value="true"/>
		<property name="dir.work" value="build/test"/>
	</target>
		
	<target name="deploy">
		<property name="deploy-url" value="http://193.22.164.185:8080/"/>
	</target>
			
	<target name="init">
	  	<property name="test" value="false"/>
		<property name="deploy-url" value=""/>
		<property name="dir.work" value="build/real"/>
	</target>
	    
	<target depends="init" name="j2mepolish">
		<j2mepolish>
		    <!-- general settings -->
			<info 
				license="GPL" 
				name="Tetris" 
				vendorName="Enough Software" 
				version="1.0.20"
				copyright="Copyright 2004, 2005 Enough Software. All rights reserved." 
				description="A tetris clone." 
				icon="icon.png" 
				infoUrl="http://www.enough.de" 
				jarName="${ nospace( polish.vendor ) }-${ nospace( polish.name ) }-tetris.jar" 
				jarUrl="${deploy-url}${polish.jarName}" 
		    />
			<!-- selection of supported devices -->
			<deviceRequirements if="test">
				<requirement name="Identifier" value="${device}"/>
			</deviceRequirements>
			<deviceRequirements unless="test">
				<!--
				<or>
					<requirement name="MaxJarSize" value="148+ kb" type="Memory"/>
					<and>
						<requirement name="StorageSize" value="148+ kb" type="Memory"/>
						<requirement name="MaxJarSize" value="undefined" type="Memory"/>
					</and>
				</or>
				-->
				<requirement name="Identifier" value="${device}"/>
				<!--
				<requirement name="Identifier" value="Sony-Ericsson/K700, Nokia/6630"/>
				BlackBerry/7290,
				<requirement name="SoundFormat" value="midi" />
				<requirement name="Identifier" value="BlackBerry/7290,Sony-Ericsson/K700"/>
				<requirement name="Identifier" value="Nokia/Series40, Sony-Ericsson/K700, Nokia/Series60, Nokia/Series60Midp2, Motorola/V525"/>
				-->
			</deviceRequirements>
		    <!-- build settings -->
			<build fullscreen="menu" 
	                polishDir="../enough-polish-j2me/source/src" 
	                symbols="" 
	                usePolishGui="true"
					workDir="${dir.work}"
					abortOnError="true"
					onError="errorhandling"
				>
				<!-- 			polishDir="../enough-polish-j2me/source/src"
				-->
				<!-- iApplication definition 
				-->
				<iappli class="tetris.Tetris" />
				<!-- project-wide variables - used for preprocessing  -->
				<variables>
					<!-- reserve a size of 5120 bytes =5Kbytes for the scratch pad: -->
					<variable name="doja.SPsize" value="5120" />
				</variables>
				<!--
				<manifestFilter if="polish.vendor == Samsung">
				        Manifest-Version, MIDlet-Name, MIDlet-Version, 
				        MIDlet-Vendor,  
				        MIDlet-1*,MIDlet-Icon?, MIDlet-Data-Size?, MIDlet-Description?,
						MIDlet-Info-URL?,
				        MicroEdition-Profile?, MicroEdition-Configuration?
				</manifestFilter>
				<jad>
					 <attribute 
						name="MIDlet-Push-1" 
						value="socket://:79, com.sun.example.SampleChat, *" 
						if="polish.midp2" 
						/>
					<attribute name="MyAttribute1" value="Value1" />
					<attribute name="MyAttribute2" value="Value2" />
					<attribute name="MyAttribute3" value="Value3" />
				</jad>
				-->
				<!-- obfuscator settings: do not obfuscate when the test-property is true -->
				<obfuscator useDefaultPackage="false" name="ProGuard" unless="test">
					<!--
					<parameter name="enableFlowObfuscation" value="true" />
					<parameter name="enableOptimization" value="false" />
					<parameter name="enableFlowObfuscation" value="false" />
					<keep class="de.enough.polish.example.Dummy" />
					-->
				</obfuscator>
				<!-- debug settings: only include debug setting when the test-property is true  -->
				<debug level="error" showLogOnError="true" verbose="false"  if="test" >
					<filter level="debug" package="de.enough.polish.ui.containerviews"/>
					<filter level="debug" pattern="de.enough.roadrunner.*"/>
					<filter level="info" pattern="de.enough.polish.ui.*"/>
					<filter level="info" class="de.enough.polish.ui.Screen"/>
					<filter level="debug" class="de.enough.polish.ui.StyleSheet"/>
					<filter level="debug" pattern="de.enough.polish.ui.game.*"/>
				</debug>
				<!-- play around with an additional preprocessor: 
				<preprocessor 
					class="de.enough.polish.extensions.TestProcessor" 
					classPath="../enough-polish-extensions/bin/classes" 
					>
					<parameter name="message" value="hallo welt" />
					<parameter name="relativeFile" value="../enough-polish-extensions/source" />
					<parameter name="absoluteFile" value="/home/enough/Documents/Text.swt" />
				</preprocessor>
				-->
				<resources
					dir="resources"
					defaultexcludes="yes"
					excludes="readme.txt, *.definition"
				>
					<localization defaultLocale="en_US" dynamic="true" locales="en_US, de_DE" if="test" />
					<localization dynamic="true" locales="en_US, de_DE" unless="test" />
				</resources>
				<!--
				<packager
					executable="jar"
					arguments="cvfM;;${polish.jarPath};;-C;;${polish.packageDir};;."
				/>
				-->
			</build>
			<!-- launch emulator		-->
			<emulator if="test" enableMemoryMonitor="false" />
	
		</j2mepolish>
	</target>
	
	
	
	<target 
		name="rename"
		description="renames the JAR and JAD files"
	>
		<echo message="renaming ${polish.finalize.jar} to dist/S60E2_RoadRunner.jar" />
		<move file="${polish.finalize.jad}" tofile="dist/S60E2FP3_RoadRunner.jad" />
		<move file="${polish.finalize.jar}" tofile="dist/S60E2FP3_RoadRunner.jar" />
	</target>


	<target 
		name="emulator"
		depends="test,j2mepolish"
		description="invokes the emulator"
	>
	</target>

	<target 
		name="clean"
		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml" 
	>
		<delete dir="build"/>
		<delete dir="dist"/>
	</target>
	
	<target 
		name="cleanbuild"
		depends="clean, j2mepolish"
	>
	</target>

	<target 
		name="errorhandling"
	>
		<echo level="error" message="Error enabled: ${j2mepolish.error}"> </echo>
		<echo level="error" message="${j2mepolish.error.message}"> </echo>
	</target>

	
</project>
<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="j2mepolish" name="enough-polish-example">

	<property file="${user.name}.properties" />
	<property name="polish.home" location="../enough-polish-build" />
	<property  name="device" value="Nokia/Series60E2" />
	<property  name="devices" value="${device}, Nokia/Series60E2, Sony-Ericsson/W900" />
	<property file="../blackberry/blackberry.properties"/>


	<property name="wtk.home" location="C:/WTK22" />
	<property name="nokia.home" location="C:/Nokia" />

	
	<!-- task definitions -->
	<taskdef 
		name="j2mepolish"
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/bin/classes:${polish.home}/lib/jdom.jar:${polish.home}/lib/enough-j2mepolish-build.jar" 
	/>

		
<!-- build targets, each target can be called via "ant [name]", 
	 e.g. "ant clean", "ant notest j2mepolish" or just "ant" for calling the default-target -->

<target name="test">
	<property name="test" value="true"/>
</target>
	
<target name="deploy">
	<property name="deploy-url" value="http://193.22.164.185:8080/"/>
</target>
		
<target name="init">
  	<property name="test" value="false"/>
	<property name="deploy-url" value=""/>
</target>
    
<target depends="init" name="j2mepolish">
	<j2mepolish>
	    <!-- general settings -->
		<info copyright="Copyright 2011 Enough Software. All rights reserved." 
			description="A TreeItem example." 
			infoUrl="http://www.enough.de" 
			jarName="${polish.vendor}-${polish.name}-${polish.locale}-email.jar" 
			jarUrl="${deploy-url}${polish.jarName}" 
			name="MobileMail" 
			vendorName="Enough Software" 
			version="1.0.4"
			icon="icon.png"
	    />
	    <!--
		<lifeCycleManager name="mea" />
		-->
		<!-- selection of supported devices -->
		<deviceRequirements if="test">
			<requirement name="Identifier" value="${device}"/>
			<!--
			<requirement name="Name" value="MppPhone"/>
			-->
		</deviceRequirements>
		<deviceRequirements unless="test">
			<requirement name="Identifier" value="${devices}"/>
		</deviceRequirements>
	    <!-- build settings -->
		<build usePolishGui="true"
			>
			<!-- midlets definition -->
			<midlet class="de.enough.polish.sample.email.EmailMidlet" name="MobileMail"/>
			<!-- project-wide variables - used for preprocessing  -->
			<variables>
				<variable name="polish.FullScreen" value="menu" unless="polish.blackberry or polish.android or (polish.NokiaUiApiVersion >= 1.1) or cfg.NoFullScreen" />
				<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
				<variable name="polish.TextField.includeInputInfo" value="false" />
				<variable name="polish.TextField.usePredictiveInput" value="true" />
				<variable name="polish.TextField.useDirectInput" value="true" />
				<variable name="polish.TextField.supportSymbolsEntry" value="true" />
				<variable name="polish.Screen.ManualOrientationChange" value="true" />
				<!--
				<variable name="polish.TextField.suppressCommands" value="true"/>
				<variable name="polish.MenuBar.PaddingLeft" value="5" />
				<variable name="polish.MenuBar.PaddingRight" value="5" />
				<variable name="polish.MenuBar.PaddingTop" value="5" />
				<variable name="polish.MenuBar.PaddingBottom" value="1" />
				<variable name="polish.Container.allowCycling" value="false" />
				<variable name="polish.MenuBar.OptionsPosition" value="" />
				<variable name="polish.MenuBar.OkPosition" value="" />
				-->
				<variable name="polish.useScrollBar" value="true" />
				<variable name="polish.ScreenInfo.enable" value="true" />
			</variables>
			<!-- obfuscator settings: do not obfuscate when the test-property is true -->
			<obfuscator useDefaultPackage="false" name="ProGuard" unless="test or polish.blackberry">
				<keep class="de.enough.polish.example.Dummy" />
			</obfuscator>
			<!-- debug settings: only include debug setting when the test-property is true -->
			<debug level="error" showLogOnError="false" verbose="true" if="test">
				<filter level="debug" package="de.enough.polish.sample.email"/>
				<!--
				<handler name="rms" />
				<filter level="debug" class="de.enough.polish.ui.ChoiceTextField" />
				<filter level="debug" class="de.enough.polish.ui.FilteredChoiceGroup" />
				<filter level="debug" class="de.enough.polish.ui.FilteredList" />
				<filter level="debug" class="de.enough.polish.ui.Screen" />
				<filter level="debug" class="de.enough.polish.ui.ChoiceGroup" />
				<filter level="debug" package="de.enough.polish.ui"/>
				<filter level="debug" class="de.enough.polish.ui.Container" />
				<filter level="debug" class="de.enough.polish.ui.TextField"/>
				<filter level="debug" class="de.enough.polish.ui.StringItem"/>
				<filter level="debug" class="de.enough.polish.ui.ChoiceTextField" />
				<filter level="debug" class="de.enough.polish.ui.Screen"/>
				<filter level="debug" class="de.enough.polish.ui.Ticker"/>
				<filter level="debug" class="de.enough.polish.ui.AnimationThread"/>
				<filter level="debug" class="de.enough.polish.ui.TreeItem" />
				-->
			</debug>
			<resources
				dir="resources"
				defaultexcludes="yes"
				excludes="readme.txt"
			>
				<localization>
					<locale name="en" encoding="UTF8"/>
				</localization>
			</resources>
		</build>
		<!-- execution of emulator(s) -->
		<emulator
			wait="true"
			securityDomain="trusted"
			enableProfiler="false"
			enableMemoryMonitor="false"
			enableNetworkMonitor="false"
			if="test and not debug"
			>
		</emulator>
	
		<emulator
			wait="false"
			securityDomain="trusted"
			enableProfiler="false"
			enableMemoryMonitor="false"
			enableNetworkMonitor="false"
			if="debug">
			<debugger port="8000" />
		</emulator>
	</j2mepolish>
</target>


<target description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml" name="clean">
	<delete dir="build"/>
	<delete dir="dist"/>
</target>
	
	<target name="emulator" depends="test,j2mepolish" />

	<target name="cleanbuild" depends="clean,j2mepolish" />

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="j2mepolish" name="enough-polish-sample-localization">
	

<property file="${user.name}.properties" />
<property name="wtk.home" location="/home/enough/dev/WTK2.1" />
<property name="nokia.home" location="/home/enough/dev/Nokia" />
<property name="polish.home" location="../enough-polish-build" />
<property  name="mpp.home" location="/home/enough/dev/mpp-sdk"/>
	<property  name="device" value="Nokia/Series60E2" />
	<property  name="devices" value="${device}" />

	
	<!-- task definitions -->
	<!-- classpath="import/enough-j2mepolish-build.jar:import/jdom.jar:import/proguard.jar" -->
	<taskdef 
		name="j2mepolish"
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/bin/classes:${polish.home}/lib/jdom.jar" 
	/>

		
<!-- build targets, each target can be called via "ant [name]", 
	 e.g. "ant clean", "ant notest j2mepolish" or just "ant" for calling the default-target -->

<target name="test">
	<property name="test" value="true"/>
</target>
	
<target name="deploy">
	<property name="deploy-url" value="http://193.22.164.185:8080/"/>
</target>
		
<target name="init">
  	<property name="test" value="false"/>
	<property name="deploy-url" value=""/>
</target>
    
<target depends="init" name="j2mepolish">
	<j2mepolish>
	    <!-- general settings -->
		<info copyright="Copyright 2011 Enough Software. All rights reserved." 
			deleteConfirm="Do you really want to kill me?" 
			description="A simple menu screen." 
			icon="iconlarge0.png" 
			infoUrl="http://www.enough.de" 
			jarName="${polish.vendor}-${polish.name}-${polish.locale}-fisheye.jar" 
			jarUrl="${deploy-url}${polish.jarName}" 
			name="FishEye" 
			vendorName="Enough Software" 
			version="1.3.4"
	    />
		<!-- selection of supported devices -->
		<deviceRequirements if="test">
			<requirement name="Identifier" value="${device}"/>
		</deviceRequirements>
		<deviceRequirements unless="test">
			<requirement name="Identifier" value="${devices}"/>
		</deviceRequirements>
	    <!-- build settings -->
		<build fullscreen="menu"  usePolishGui="true" >
			<sources>
				<source dir="source/src" />
			</sources>
			<!-- midlets definition -->
			<midlet class="de.enough.polish.example.MenuMidlet" name="FishEye"/>
			<!-- project-wide variables - used for preprocessing  -->
			<variables>
				<variable name="polish.TextField.useDirectInput" value="true" />
				<variable name="polish.TextField.supportSymbolsEntry" value="true" />
				<variable name="polish.TextField.includeInputInfo" value="true" />
				<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
				<variable name="polish.Screen.dontBufferPreviousScreen" value="true" />
				<variable name="update-url" value="http://www.enough.de/update"/>
				<!--
				<variable name="polish.css.allowAllAttributes" value="true" />
				-->
			</variables>
			<!-- obfuscator settings: do not obfuscate when the test-property is true -->
			<obfuscator useDefaultPackage="true" name="ProGuard" unless="test || polish.blackberry">
			</obfuscator>
			<!-- debug settings: only include debug setting when the test-property is true -->
			<debug if="test" level="error" showLogOnError="true" verbose="true">
				<filter level="info" pattern="de.enough.polish.ui.*"/>
				<!--
				<filter level="debug" class="de.enough.polish.ui.Container"/>
				<filter level="debug" class="de.enough.polish.ui.MasterCanvas"/>
				<filter level="debug" class="de.enough.polish.ui.Alert"/>
				<filter level="debug" class="de.enough.polish.ui.StyleSheet"/>
				<filter level="debug" class="de.enough.polish.ui.Screen"/>
				<filter level="debug" pattern="de.enough.polish.example.*"/>
				<filter level="debug" class="de.enough.polish.ui.ContainerView"/>
				-->
			</debug>
			<!-- play around with an additional preprocessor: 
			<preprocessor 
				class="de.enough.polish.extensions.TestProcessor" 
				classPath="../enough-polish-extensions/bin/classes" 
				>
				<parameter name="message" value="hallo welt" />
				<parameter name="relativeFile" value="../enough-polish-extensions/source" />
				<parameter name="absoluteFile" value="/home/enough/Documents/Text.swt" />
			</preprocessor>
			-->
			<resources
				dir="resources"
				defaultexcludes="yes"
				excludes="readme.txt"
			>
				<!--
				<root dir="resources/smallresolutions" />
				-->
				<localization locales="en_US" />
				<!--
				<localization dynamic="false" defaultLocale="en_US" locales="de_DE, en_US"  unless="test"/>
				<localization locales="en_US" if="test" />
				-->
			</resources>
		</build>
		<emulator if="test" />
	</j2mepolish>
</target>


<target description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml" name="clean">
	<delete dir="build"/>
	<delete dir="dist"/>
</target>
	
	<target name="emulator" depends="test,j2mepolish" />

	<target name="cleanbuild" depends="clean,j2mepolish" />

</project>
<!-- This file controls the build process.                    -->
<!-- The most important target is the j2mepolish target,      -->
<!-- which controls for what devices the application should   -->
<!-- be created.                                              -->
<!--                                                          -->
<!-- Important: when you have no Wireless Toolkit installed   -->
<!-- you need to define the "preverify"-attribute             -->
<!-- of the <build>-element of the J2ME Polish task.          -->
<!--                                                          -->
<!-- When you call Ant from the command-line, you can         -->
<!-- call "ant test j2mepolish" to skip the obfuscation       -->
<!-- and to build the example for fewer handsets.             -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->

<project 
	name="enough-j2mepolish-example" 
	default="j2mepolish">
	
	
	<property file="${user.name}.properties" />
	<property file="midlet.properties" />
		
	<!-- The polish.home property should point to the directory   -->
	<!-- containing the J2ME Polish installation.                 -->
	
	<property name="polish.home" value="../enough-polish-build" />
	<property file="${polish.home}/global.properties" />
	
	<!-- The wtk.home property should point to the directory      -->
	<!-- containing the Wireless Toolkit.                         -->
	
	
	
	
	<!-- The siemens.home, nokia.home and motorola.home-          -->
	<!-- properties can be necessary when their emulators         -->
	<!-- should be started.                                       -->
	<!-- The directory which contains the Siemens-SMTK
		<property name="siemens.home" value="C:\siemens" />
	-->
	<!-- The directory which contains the Nokia-emulators
		<property name="nokia.home" value="C:\Nokia" />
	-->
	<!-- The path to the Sony-Ericsson SDK
		<property name="sony-ericsson.home" value="C:\SonyEricsson\J2ME_SDK" />
	-->
	<!-- The directory which contains the Motorola-emulators
		<property name="motorola.home" value="C:\Program Files\Motorola\SDK v4.3 for J2ME" />
	-->
	
	<property name="nokia.home" value="/" />
	
	<property name="sony-ericsson.home" value="/" />
		
	<property name="motorola.home" value="/" />
		
	<property name="mpp.home" value="/Applications/mpp-sdk" />
		
	<property name="siemens.home" value="/" />
		
		
	<!-- Definition of the J2ME Polish task:                      -->
		<taskdef 
			name="j2mepolish"
			classname="de.enough.polish.ant.PolishTask" 
			classpath="${polish.home}/bin/classes:${polish.home}/lib/enough-j2mepolish-build.jar:${polish.home}/lib/jdom.jar:../enough-polish-extensions/bin/classes" 
		/>
	
		
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default target -->
	
	<target name="setdeploy" 
		description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
		>
		<property name="deploy-url" value="http://www.company.com/download/" />
	</target>
		
	<target name="test" 
		description="Call this target first to skip the obfuscation step, e.g. ant test j2mepolish"
		>
		<property name="test" value="true" />
		<property name="dir.work" value="build/test" />
	</target>
			
	<target name="init">
	  	<property name="test" value="false" />
		<property name="dir.work" value="build/real" />
		<property name="deploy-url" value="" />
	</target>
	 
	<!-- In this target the J2ME Polish task is used.             -->
	<!-- It has 3 sections:                                       -->
	<!--    1. The info-section defines some general information  -->
	<!--    2. The deviceRequirements-section chooses the devices -->
	<!--       for which the application is optimized.            -->
	<!--    3. The build-section controls the actual build        -->
	<!--       process.                                           -->	
	<target name="j2mepolish" 
			depends="init"
			description="This is the controller for the J2ME build process." 
			>
		<j2mepolish>
		    <!-- general settings, these settings basically form the JAD-attributes. -->
		    <!-- Have a look at the <jad>-section for setting specialised attributes.
		         You can also define localized attributes in the resources/messages.txt files -->
			<info
				name="FramedForm"
				version="1.3.4"
				description=""
				vendorName="Enough Software"
				infoUrl="http://www.j2mepolish.org"
				jarName="${polish.vendor}-${polish.name}-${polish.locale}-example.jar" 
				jarUrl="${deploy-url}${polish.jarName}"
				copyright="Copyright 2009 Enough Software. All rights reserved."
				deleteConfirm="Do you really want to kill me?" 
			/>
			
			<!-- selection of supported devices -->
			<!-- In the test mode the application is build only for the  -->
			<!-- Generic/midp1 phone, but when the test-property is set to false, -->
			<!-- the second deviceRequirements will be used instead. -->
			<deviceRequirements if="test">
				<requirement name="Identifier" value="${device}" />
			</deviceRequirements>
			<deviceRequirements unless="test or devices:defined">
				<requirement name="Term" value="${ bytes(polish.MaxJarSize)} > 100" />
			</deviceRequirements>
			<deviceRequirements if="!test and devices:defined">
				<requirement name="Identifier" value="${devices}" />
			</deviceRequirements>
			<!--
			<deviceRequirements if="!test and device:defined">
				<requirement name="Identifier" value="${device}" />
			</deviceRequirements>
			-->
			<deviceRequirements if="false" unless="test">
				<or>
							<requirement name="Identifier" value="Generic/DefaultColorPhone" />
							<requirement name="Identifier" value="Generic/DefaultGrayPhone" />
							<requirement name="Identifier" value="Generic/JtwiCldc11" />
							<requirement name="Identifier" value="Generic/MediaControlSkin" />
							<requirement name="Identifier" value="Generic/Midp2Cldc11" />
							<requirement name="Identifier" value="Generic/Midp2Cldc11Pointer" />
							<requirement name="Identifier" value="Generic/MppPhone" />
							<requirement name="Identifier" value="Generic/PlainMidp2Cldc11" />
							<requirement name="Identifier" value="Generic/QwertyDevice" />
							<requirement name="Identifier" value="Generic/multi" />
							<requirement name="Identifier" value="Nokia/Series40DP2" />
							<requirement name="Identifier" value="Nokia/Series40DP3" />
							<requirement name="Identifier" value="Nokia/Series40Midp2" />
							<requirement name="Identifier" value="Nokia/Series60E2FP2" />
							<requirement name="Identifier" value="Nokia/Series60E2FP3" />
							<requirement name="Identifier" value="Nokia/Series60E3" />
							<requirement name="Identifier" value="Siemens/x65" />
							<requirement name="Identifier" value="Siemens/x75" />
							<requirement name="Identifier" value="Sony-Ericsson/JavaPlatform2" />
							<requirement name="Identifier" value="Sony-Ericsson/JavaPlatform3" />
							<requirement name="Identifier" value="Sony-Ericsson/JavaPlatform4" />
							<requirement name="Identifier" value="Sony-Ericsson/JavaPlatform5" />
							<requirement name="Identifier" value="Sony-Ericsson/JavaPlatform6" />
							</or>
			</deviceRequirements>
			
		    <!-- build settings -->
			<!-- 
			 -->
			<build
				symbols="ExampleSymbol, AnotherExample"
				fullscreen="menu"
				usePolishGui="true"
				workDir="${dir.work}"
	            polishDir="../enough-polish-j2me/source/src" 
			>
			    
				<!-- midlets definition -->
				<midlet class="de.enough.polish.sample.framedform.FramedFormDemo" name="FramedForm"/>
				
				<!-- project-wide variables - used for preprocessing.  -->
				<!-- You can set localized variables in the resources/messages.txt files as well.  -->
				<variables includeAntProperties="true" >
					<!-- example variables:
					In your Java-code you can use the following snipet to use this variable:
					//#= private static final String UPDATE_URL = "${ update-url }";
					You can change the title of the sample application with the "title"-var.
					-->
					 <variable name="polish.TextField.suppressCommands" value="true" />
					<variable name="polish.useScrollBar" value="true" />
				</variables>
				<!-- Here you can set the dir attribute to "resources2" for an alternative design. -->
				<resources
					dir="resources"
					defaultexcludes="yes"
					excludes="readme.txt"
				>
					<!-- you can add resources based on complex criterias: 
					<fileset 
						dir="resources/multimedia" 
						includes="*.wav" 
						if="polish.audio.wav" 
					/>
					<fileset 
						dir="resources/multimedia" 
						includes="*.mid" 
						if="polish.audio.midi and not polish.audio.wav" 
					/>
					-->
					<!-- add the localization element for created localized
					     versions of your application: -->
					<localization locales="de_DE, en_US" unless="test" />
					<localization locales="en_US" if="test" />
				</resources>

				<!-- obfuscator settings: do not obfuscate when the test-property is true -->
				<obfuscator name="ProGuard" unless="test || polish.blackberry" >
					<!--
					You can set additional parameters here, e.g.:
					<parameter name="optimize" value="false" />
					-->
				</obfuscator>
				
				<!-- debug settings: only include debug setting when the test-property is true -->
				<debug if="test" showLogOnError="true" verbose="true" level="error">
					<filter pattern="de.enough.polish.example.*" level="debug" />
					<filter pattern="de.enough.polish.ui.*" level="warn" />
					<filter class="de.enough.polish.ui.TextField" level="debug" />
					<!--
					<filter level="debug" package="de.enough.polish.ui.Container" />
					<filter level="debug" package="de.enough.polish.sample.framedform"/>
					<filter level="debug" package="de.enough.polish.ui.ContainerView" />
					<filter level="debug" package="de.enough.polish.ui.ChoiceGroup" />
					<filter level="debug" package="de.enough.polish.ui.containerviews.ExclusiveSingleLineView" />
					-->
				</debug>
				
				<!-- user defined JAD attributes can also be used: -->
				<jad>
					<attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
					<attribute name="Nokia-MIDlet-On-Screen-Keyboard" value="no" />
				</jad>	
				
				
			</build>
			
			<!-- execution of emulator(s) -->
			<emulator
				wait="true"
				securityDomain="trusted"
				enableProfiler="false"
				enableMemoryMonitor="false"
				enableNetworkMonitor="false"
				if="test and not debug"
				>
			</emulator>
		
			<emulator
				wait="false"
				securityDomain="trusted"
				enableProfiler="false"
				enableMemoryMonitor="false"
				enableNetworkMonitor="false"
				if="debug">
				<debugger port="8000" />
			</emulator>
			
		</j2mepolish>
	</target>
	
	<target name="emulator" depends="test,j2mepolish" />
	
	<target name="clean" 
	  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
		<delete dir="build" />
		<mkdir dir="dist" />
		<delete dir="dist" includes="**/*"	/>
	</target>

	<target name="cleanbuild" 
	  		description="makes a clean build."
			depends="clean,j2mepolish"
	/>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="j2mepolish" name="enough-polish-sample-serialization">

	<property file="${user.name}.properties" />
	<!-- the device used for test builds:                         -->
	<property  name="device" value="Nokia/Series60E2FP3" />


	<property name="wtk.home" location="/home/enough/dev/WTK2.2" />
	<property name="nokia.home" location="/home/enough/dev/Nokia" />
	<property name="polish.home" location="../enough-polish-build" />
	<property  name="mpp.home" location="/home/enough/dev/mpp-sdk"/>

	
	<!-- task definitions -->
	<taskdef 
		name="j2mepolish"
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/bin/classes:${polish.home}/lib/jdom.jar" 
	/>

		
<!-- build targets, each target can be called via "ant [name]", 
	 e.g. "ant clean", "ant notest j2mepolish" or just "ant" for calling the default-target -->

<target name="test">
	<property name="test" value="true"/>
</target>
	
<target name="deploy">
	<property name="deploy-url" value="http://193.22.164.185:8080/"/>
</target>
		
<target name="init">
  	<property name="test" value="false"/>
	<property name="deploy-url" value=""/>
</target>
    
<target depends="init" name="j2mepolish">
	<j2mepolish>
	    <!-- general settings -->
		<info copyright="Copyright 2006 Enough Software. All rights reserved." 
			description="A serialization example." 
			infoUrl="http://www.enough.de" 
			jarName="${polish.vendor}-${polish.name}-${polish.locale}-serialization.jar" 
			jarUrl="${deploy-url}${polish.jarName}" 
			license="GPL" 
			name="Notes" 
			vendorName="Enough Software" 
			version="1.0.4"
	    />
		<!-- selection of supported devices -->
		<deviceRequirements if="test">
			<requirement name="Identifier" value="${device}"/>
		</deviceRequirements>
		<deviceRequirements unless="test">
			<requirement name="Identifier" value="${device}"/>
		</deviceRequirements>
	    <!-- build settings -->
		<build fullscreen="menu" 
                polishDir="../enough-polish-j2me/source/src" 
                symbols="polish.skipArgumentCheck" 
                usePolishGui="true"
			>
			<!-- midlets definition -->
			<midlet class="de.enough.polish.sample.serialization.NotesMidlet" name="Notes"/>
			<!-- project-wide variables - used for preprocessing  -->
			<variables>
				<!-- activate text input over J2ME Polish TextFields (without opening a new TextBox for each input: -->
				<variable name="polish.TextField.useDirectInput" value="true" />
				<!-- activate input of symbols: -->
				<variable name="polish.TextField.supportSymbolsEntry" value="true" />
				<!-- activate switching to the native (e.g.T9) input mode: -->
				<variable name="polish.TextField.allowNativeModeSwitch" value="true" />
				<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
				<variable name="polish.useScrollBar" value="true" />
			</variables>
			<!-- activate Java 5 syntax support -->
			<postcompiler name="java5" />
			<!-- obfuscator settings: do not obfuscate when the test-property is true -->
			<obfuscator useDefaultPackage="false" name="ProGuard" unless="test">
			</obfuscator>
			<!-- debug settings: only include debug setting when the test-property is true -->
			<debug if="test" level="error" showLogOnError="true" verbose="true">
				<handler name="rms" />
				<filter level="debug" package="de.enough.polish.sample.serialization"/>
				<filter level="info" pattern="de.enough.polish.ui.*"/>
			</debug>
			<resources
				dir="resources"
				defaultexcludes="yes"
				excludes="readme.txt"
			>
			</resources>
		</build>
		<emulator if="test" />
	</j2mepolish>
</target>


<target description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml" name="clean">
	<delete dir="build"/>
	<delete dir="dist"/>
</target>
	
	<target name="emulator" depends="test,j2mepolish" />

	<target name="cleanbuild" depends="clean,j2mepolish" />

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="j2mepolish" name="enough-polish-sample-localization">
	

	<property file="${user.name}.properties" />
	<property name="polish.home" location="../enough-polish-build" />
	<property file="${polish.home}/global.properties" />
	<property  name="device" value="Generic/AnyPhone" />

	
	<!-- task definitions -->
	<!-- classpath="import/enough-j2mepolish-build.jar:import/jdom.jar:import/proguard.jar" -->
	<taskdef 
		name="j2mepolish"
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/bin/classes:${polish.home}/lib/jdom.jar" 
	/>

		
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant notest j2mepolish" or just "ant" for calling the default-target -->
	
	<target name="test">
		<property name="test" value="true"/>
		<property name="dir.work" value="build/test" />
	</target>
		
	<target name="deploy">
		<property name="deploy-url" value="http://193.22.164.185:8080/"/>
	</target>
			
	<target name="init">
	  	<property name="test" value="false"/>
		<property name="deploy-url" value=""/>
		<property name="customization" value="" />
		<property name="dir.work" value="build/real/${customization}" />
		<property name="dir.dist" value="dist/${customization}" />
	</target>
	    
	<target depends="init" name="j2mepolish">
		<j2mepolish>
		    <!-- general settings -->
			<info copyright="Copyright 2009 enough software. All rights reserved." 
				deleteConfirm="Do you really want to kill me?" 
				description="A simple menu screen." 
				icon="dot.png" 
				infoUrl="http://www.enough.de/dictionary" 
				jarName="${polish.vendor}-${polish.name}-${polish.locale}-example.jar" 
				jarUrl="${deploy-url}${polish.jarName}" 
				name="J2ME Polish Example" 
				vendorName="Enough Software" 
				version="1.3.4"
				optionalPermissions="javax.microedition.io.Connector.http"
		    />
			<!-- selection of supported devices -->
			<deviceRequirements if="test">
				<requirement name="Identifier" value="${device}"/>
			</deviceRequirements>
			<deviceRequirements unless="test">
				<requirement name="Identifier" value="${device}"/>
			</deviceRequirements>
		    <!-- build settings -->
			<build  
	                symbols="polish.skipArgumentCheck" 
	                usePolishGui="true"
					workDir="${dir.work}"
					destDir="${dir.dist}"
				>
				<!-- midlets definition -->
				<midlet class="de.enough.polish.example.MenuMidlet" name="J2ME Polish"/>
				<!-- project-wide variables - used for preprocessing  -->
				<variables>
					<variable name="update-url" value="http://www.enough.de/update"/>
					<variable name="polish.css.allowAllAttributes" value="true" />
					<variable
						name="polish.FullScreen"
						value="menu" 
						unless="polish.blackberry || polish.android" 
					/>
					<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
					<!-- use available height instead of the CSS standard width for min-height, min-item-height, max-height, etc: -->
					<variable name="polish.Item.useHeightInsteadOfWidth" value="true" />
				</variables>
				<!--
				<jad>
					 <attribute 
						name="MIDlet-Push-1" 
						value="socket://:79, com.sun.example.SampleChat, *" 
						if="polish.midp2" 
						/>
					<attribute name="MyAttribute1" value="Value1" />
					<attribute name="MyAttribute2" value="Value2" />
					<attribute name="MyAttribute3" value="Value3" />
				</jad>
				-->
				<!-- obfuscator settings: do not obfuscate when the test-property is true -->
				<obfuscator  name="ProGuard" unless="test">
					<keep class="de.enough.polish.example.Dummy" />
				</obfuscator>
				<!-- debug settings: only include debug setting when the test-property is true -->
				<debug if="test" level="error"  verbose="true">
					<!--
					<filter level="debug" class="de.enough.polish.ui.MasterCanvas"/>
					<filter level="debug" class="de.enough.polish.ui.Alert"/>
					<filter level="debug" class="de.enough.polish.ui.StyleSheet"/>
					<filter level="info" class="de.enough.polish.ui.Container"/>
					<filter level="debug" class="de.enough.polish.ui.Screen"/>
					<filter level="debug" pattern="de.enough.polish.example.*"/>
					<filter level="debug" class="de.enough.polish.ui.Screen"/>
					<filter level="debug" class="de.enough.polish.ui.ContainerView"/>
					-->
					<filter level="info" pattern="de.enough.polish.ui.*"/>
					<filter level="debug" pattern="de.enough.polish.util.*"/>
				</debug>
				<!-- play around with an additional preprocessor: 
				<preprocessor 
					class="de.enough.polish.extensions.TestProcessor" 
					classPath="../enough-polish-extensions/bin/classes" 
					>
					<parameter name="message" value="hallo welt" />
					<parameter name="relativeFile" value="../enough-polish-extensions/source" />
					<parameter name="absoluteFile" value="/home/enough/Documents/Text.swt" />
				</preprocessor>
				-->
				<resources
					dir="resources/base"
					defaultexcludes="yes"
					excludes="readme.txt"
				>
					<root dir="resources/customizations/${customization}" if="${customization}.enabled" />
					<localization dynamic="false" locales="en_US" if="test" />
					<localization dynamic="true" defaultLocale="en_US" locales="en_US" unless="test" />
				</resources>
			</build>
			<emulator if="test" />
		</j2mepolish>
	</target>


	<target description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml" name="clean">
		<delete dir="build"/>
		<delete dir="dist"/>
	</target>
	
	<target name="emulator" depends="test,j2mepolish" description="launches the emulator after building." />

	<target name="cleanbuild" depends="clean,j2mepolish" />
	
	<target name="enableBarbie">
		<property name="customization" value="Barbie" />
		<property name="Barbie.enabled" value="true" />
	</target>
		
	<target name="barbie"
			description="customizes this project with the settings found in resources/customizations/Barbie"
			depends="enableBarbie, j2mepolish"
	/>

	<target name="emulatorBarbie" depends="test,enableBarbie,j2mepolish" description="launches the emulator after building with the barbie customization." />
	
	<target name="enableFrogger">
		<property name="customization" value="Frogger" />
		<property name="Frogger.enabled" value="true" />
	</target>
		
	<target name="frogger"
			description="customizes this project with the settings found in resources/customizations/Frogger"
			depends="enableFrogger, j2mepolish"
	/>
	
	<target name="emulatorFrogger" depends="test,enableFrogger,j2mepolish" description="launches the emulator after building with the frogger customization." />

	<target name="enableAnimations">
		<property name="customization" value="Animations" />
		<property name="Animations.enabled" value="true" />
		<property name="polish.MenuBar.useExtendedMenubar" value="true" />
	</target>
		
	<target name="animations"
			description="customizes this project with the settings found in resources/customizations/Animations"
			depends="enableAnimations, j2mepolish"
	/>

	<target name="emulatorAnimations" depends="test,enableAnimations,j2mepolish" description="launches the emulator after building with the animations customization." />

	<target 
		name="build-all"
		description="Builds your application in all customizations." 
		>
		<subant target="j2mepolish" buildpath="." genericantfile="build.xml" inheritall="false" ></subant>
		<subant target="frogger" buildpath="." genericantfile="build.xml" inheritall="false" ></subant>
		<subant target="barbie" buildpath="." genericantfile="build.xml" inheritall="false" ></subant>
		<subant target="animations" buildpath="." genericantfile="build.xml" inheritall="false" ></subant>
	</target>


</project>
<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="j2mepolish" name="enough-polish-example">

	<property file="${user.name}.properties" />
	<!-- the device used for test builds:                         -->
	<property  name="device" value="Generic/AnyPhone" />


	<property name="polish.home" location="../enough-polish-build" />

	
	<!-- task definitions -->
	<taskdef 
		name="j2mepolish"
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/bin/classes:${polish.home}/lib/jdom.jar" 
	/>

		
<!-- build targets, each target can be called via "ant [name]", 
	 e.g. "ant clean", "ant notest j2mepolish" or just "ant" for calling the default-target -->

<target name="test">
	<property name="test" value="true"/>
</target>
	
<target name="deploy">
	<property name="deploy-url" value="http://193.22.164.185:8080/"/>
</target>
		
<target name="init">
  	<property name="test" value="false"/>
	<property name="deploy-url" value=""/>
</target>
    
<target depends="init" name="j2mepolish">
	<j2mepolish>
	    <!-- general settings -->
		<info 
			copyright="Copyright 2013 Enough Software. All rights reserved." 
			description="An application stub." 
			infoUrl="http://www.enough.de" 
			jarName="${polish.vendor}-${polish.name}-${polish.locale}-messaging.jar" 
			jarUrl="${deploy-url}${polish.jarName}" 
			name="Messaging" 
			vendorName="Enough Software" 
			version="1.0.4"
	    />
		<!-- selection of supported devices -->
		<deviceRequirements if="test">
			<requirement name="Identifier" value="${device}"/>
		</deviceRequirements>
		<deviceRequirements unless="test">
			<requirement name="Identifier" value="${device}"/>
		</deviceRequirements>
	    <!-- build settings -->
		<build usePolishGui="true">
			<!-- midlets definition -->
			<midlet class="de.enough.polish.app.App" name="Messaging" />
			<!-- project-wide variables - used for preprocessing  -->
			<variables>
				<variable name="polish.TextField.useDirectInput" value="true" />
				<variable name="polish.TextField.supportSymbolsEntry" value="true" />
				<variable name="polish.TextField.includeInputInfo" value="true" />
				<variable
                        name="polish.FullScreen"
                        value="menu"
                        unless="polish.blackberry || polish.android || polish.vendor.Nokia"
                />
				<variable
                        name="polish.useNativeAlerts"
                        value="true"
                        if="polish.blackberry || polish.android || polish.vendor.Nokia"
                />
								<!--
				<variable name="polish.Container.allowCycling" value="false" />
				<variable name="polish.MenuBar.OptionsPosition" value="right" />
				-->
				<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
				<variable name="polish.useScrollBar" value="true" />
				<variable name="polish.ScreenInfo.enable" value="true" />
			</variables>
			<!-- obfuscator settings: do not obfuscate when the test-property is true -->
			<obfuscator useDefaultPackage="false" name="ProGuard" unless="test">
				<keep class="de.enough.polish.example.Dummy" />
			</obfuscator>
			<!-- debug settings: only include debug setting when the test-property is true -->
			<debug if="test || log" level="error" showLogOnError="false" verbose="false">
			    <handler name="display" if="log">
				     <!-- hide entries after 10 seconds: -->
				     <parameter name="timeout" value="10s" />
				     <!-- show maximum 30 log entries: -->
				     <parameter name="max-entries" value="30" />
				     <!-- specify used colors: -->
				     <parameter name="background-color" value="#a333" />
				     <parameter name="font-color" value="yellow" />
				     <parameter name="shadow-color" value="rgb(0,0,0)" />
				  </handler>
				<filter level="info" pattern="de.enough.polish.ui.*"/>
								<!--
				<filter level="debug" class="de.enough.polish.ui.TextField" />
				<filter level="debug" class="de.enough.polish.ui.ChoiceTextField" />
				<filter level="debug" class="de.enough.polish.ui.TreeItem" />
				-->
			</debug>
			<resources
				dir="resources/base"
				defaultexcludes="yes"
				excludes="readme.txt"
			>
				<root dir="resources/base" />
				<root dir="resources/base/images" />
				<root dir="resources/base/i18n" />
				<root dir="resources/base/style" />
				<localization>
					<locale name="de" encoding="UTF8"/>
				</localization>
			</resources>
		</build>
		<emulator if="test" />
	</j2mepolish>
</target>


<target description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml" name="clean">
	<delete dir="build"/>
	<delete dir="dist"/>
</target>
	
	<target name="emulator" depends="test,j2mepolish" />

	<target name="cleanbuild" depends="clean,j2mepolish" />

</project>
<project name="J2MEPolishSample" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" default="j2mepolish">

	<!-- import user specific properties                          -->
	<property file="${user.name}.properties" />

	<!-- The polish.home property needs to point to the directory -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" location="C:\Program Files\J2ME-Polish2.10-Preview" />

	<!-- import global properties                                 -->
	<property file="${polish.home}/global.properties" />


	<!-- the device for the test mode - you can define it on the command-line
	     using the -D switch, e.g. ant -Ddevice=Generic/midp2 emulator -->
	<property name="device" value="Generic/AnyMsaPhone" />
	<property name="devices" value="${device}" />

	<!-- Definition of the J2ME Polish task:                      -->
	<taskdef name="j2mepolish" classname="de.enough.polish.ant.PolishTask" classpath="${polish.home}/bin/classes:${polish.home}/lib/jdom.jar" />

	<target name="clean">
		<delete dir="${basedir}/build" />
	</target>

	<target name="init">
		<property name="emulate" value="false" />
		<property name="dir.work" value="build/real" />
		<property name="deploy-url" value="" />
		<property name="nutiteq.home" value="nutiteq_maps_lib_src_1_1_0" />
		<property name="lib.dir" value="${nutiteq.home}/ivy-libs" />
		<property name="dir.work" value="build/real" />
	</target>

	<target name="j2mepolish" depends="init" description="This is the controller for the J2ME build process." >


	<j2mepolish>
		<info name="J2ME Polish Map" 
			vendorName="Nutiteq" 
			jarName="J2MEPolishMap_${polish.vendor}_${polish.name}_${polish.locale}.jar" 
			icon="/nutiteq.png" 
			jarUrl="${polish.jarName}" 
			version="1.0.0" 
		/>
		<deviceRequirements if="test">
			<requirement name="Identifier" value="${device}" />
		</deviceRequirements>
		<deviceRequirements unless="test">
			<requirement name="Identifier" value="${devices}" />
		</deviceRequirements>
		<build 
			fullscreen="menu" 
			usePolishGui="true"
			workDir="${dir.work}"
			>
			<jad>
				<attribute name="MIDlet-Web-Session" value="EMT WAP" if="polish.vendor == Motorola" />
			</jad>
			
			<sources>
				<source dir="src" />
				<!-- include nutiteq sources: -->
				<source dir="${nutiteq.home}/src" />
				<source dir="${nutiteq.home}/thirdparty/src" />
			</sources>

			<midlet class="com.nutiteq.polish.J2MEPolishSample" name="J2ME Polish Map" 	/>
			
			<variables>
				<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
				<variable name="polish.useScrollBar" value="true" />
			</variables>

			<resources dir="resources" defaultexcludes="yes">
				<localization locales="en_US" />
				<root dir="${nutiteq.home}/resources" includeSubDirs="true" includeBaseDir="false" />
			</resources>

			<obfuscator name="ProGuard" unless="emulate || polish.blackberry" />
		</build>
		
		<emulator if="emulate"/>
	</j2mepolish>
	
	</target>

	<target name="init-ivy">
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant">
			<classpath>
				<pathelement location="${basedir}/lib/ivy-2.0.0-beta2.jar" />
			</classpath>
		</taskdef>
	</target>

	<target name="retrieve-jars" depends="init-ivy" description="Retrieves all Ivy dependencies into the libs directory">
		<ivy:retrieve pattern="${basedir}/ivy-libs/[artifact]-[revision].[ext]" />
	</target>

	<target name="enableEmulator">
		<property name="emulate" value="true" />
		<property name="dir.work" value="build/test" />
	</target>
	<target name="emulator" depends="enableEmulator, j2mepolish" />

	<target name="cleanbuild" depends="clean,j2mepolish" />

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="j2mepolish" name="enough-polish-sample-localization">
	

<property file="${user.name}.properties" />
<property name="wtk.home" location="C:/WTK2.5.2" />

<property name="polish.home" location="../enough-polish-build" />

	<property  name="device" value="Generic/AnyPhone" />
	<property  name="devices" value="${device}" />

	
	<!-- task definitions -->
	<!-- classpath="import/enough-j2mepolish-build.jar:import/jdom.jar:import/proguard.jar" -->
	<taskdef 
		name="j2mepolish"
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/bin/classes:${polish.home}/lib/jdom.jar" 
	/>

		
<!-- build targets, each target can be called via "ant [name]", 
	 e.g. "ant clean", "ant notest j2mepolish" or just "ant" for calling the default-target -->

<target name="test">
	<property name="test" value="true"/>
</target>
	
<target name="deploy">
	<property name="deploy-url" value="http://193.22.164.185:8080/"/>
</target>
		
<target name="init">
  	<property name="test" value="false"/>
	<property name="deploy-url" value=""/>
</target>
    
<target depends="init" name="j2mepolish">
	<j2mepolish>
	    <!-- general settings -->
		<info copyright="Copyright 2004 enough software. All rights reserved." 
			deleteConfirm="Do you really want to kill me?" 
			description="A simple twitter demo" 
			icon="iconlarge0.png" 
			infoUrl="http://www.enough.de/dictionary" 
			jarName="${polish.vendor}-${polish.name}-${polish.locale}-example.jar" 
			jarUrl="${deploy-url}${polish.jarName}" 
			name="PIM Demo" 
			vendorName="Enough Software" 
			version="1.0.0"
	    />
		<!-- selection of supported devices -->
		<deviceRequirements if="test">
			<requirement name="Identifier" value="${device}"/>
		</deviceRequirements>
		<deviceRequirements unless="test">
			<requirement name="Identifier" value="${devices}"/>
		</deviceRequirements>
	    <!-- build settings -->
		<build fullscreen="menu" 
                imageLoadStrategy="foreground" 
                polishDir="../enough-polish-j2me/source/src" 
                symbols="polish.skipArgumentCheck" 
                usePolishGui="true"
			>
			<!-- 			polishDir="../enough-polish-j2me/source/src"
			-->
			<sources>
				<source dir="source/src" />
			</sources>
			<!-- midlets definition -->
			<midlet class="de.enough.polish.example.PimMidlet" name="PimExample"/>
			<!-- project-wide variables - used for preprocessing  -->
			<variables>
				<variable name="polish.TextField.useDirectInput" value="true" />
				<variable name="polish.TextField.supportSymbolsEntry" value="true" />
				<variable name="polish.TextField.includeInputInfo" value="true" />
				<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
				<variable name="polish.Screen.dontBufferPreviousScreen" value="true" />
				<variable name="update-url" value="http://www.enough.de/update"/>
				<!--
				<variable name="polish.css.allowAllAttributes" value="true" />
				-->
			</variables>
			<!-- obfuscator settings: do not obfuscate when the test-property is true -->
			<!--
			<obfuscator useDefaultPackage="true" name="ProGuard" unless="test">
			</obfuscator>
			-->
			<!-- debug settings: only include debug setting when the test-property is true -->
			<debug if="test" level="error" showLogOnError="true" verbose="true">
				<filter level="info" pattern="de.enough.polish.ui.*"/>
				<!--
				<filter level="debug" class="de.enough.polish.ui.Container"/>
				<filter level="debug" class="de.enough.polish.ui.MasterCanvas"/>
				<filter level="debug" class="de.enough.polish.ui.Alert"/>
				<filter level="debug" class="de.enough.polish.ui.StyleSheet"/>
				<filter level="debug" class="de.enough.polish.ui.Screen"/>
				<filter level="debug" pattern="de.enough.polish.example.*"/>
				<filter level="debug" class="de.enough.polish.ui.ContainerView"/>
				-->
			</debug>
			<!-- play around with an additional preprocessor: 
			<preprocessor 
				class="de.enough.polish.extensions.TestProcessor" 
				classPath="../enough-polish-extensions/bin/classes" 
				>
				<parameter name="message" value="hallo welt" />
				<parameter name="relativeFile" value="../enough-polish-extensions/source" />
				<parameter name="absoluteFile" value="/home/enough/Documents/Text.swt" />
			</preprocessor>
			-->
			<!--resources
				dir="resources"
				defaultexcludes="yes"
				excludes="readme.txt"
			>
				<root dir="resources/smallresolutions" />
				<localization locales="en_US" />
				<!-
				<localization dynamic="false" defaultLocale="en_US" locales="de_DE, en_US"  unless="test"/>
				<localization locales="en_US" if="test" />
				-->
			<!--resources-->
		</build>
		<emulator if="test" />
	</j2mepolish>
</target>


<target description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml" name="clean">
	<delete dir="build"/>
	<delete dir="dist"/>
</target>
	
	<target name="emulator" depends="test,j2mepolish" />

	<target name="cleanbuild" depends="clean,j2mepolish" />

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="j2mepolish" name="enough-polish-sample-processing-screen">


<property file="${user.name}.properties" />
<property name="wtk.home" location="C:\Program Files (x86)\NetBeans 6.8 M1\mobility8\Java_ME_platform_SDK_3.0" />
<property name="nokia.home" location="C:\S60\devices\S60_5th_Edition_SDK_v1.0" />
<property name="polish.home" location="../enough-polish-build" />
	<property  name="device" value="Generic/AnyPhone" />
	<property  name="devices" value="${device}" />


	<!-- task definitions -->
	<!-- classpath="import/enough-j2mepolish-build.jar:import/jdom.jar:import/proguard.jar" -->
	<taskdef
		name="j2mepolish"
		classname="de.enough.polish.ant.PolishTask"
		classpath="${polish.home}/bin/classes:${polish.home}/lib/jdom.jar"
	/>


<!-- build targets, each target can be called via "ant [name]",
	 e.g. "ant clean", "ant notest j2mepolish" or just "ant" for calling the default-target -->

<target name="test">
	<property name="test" value="true"/>
</target>

<target name="deploy">
	<property name="deploy-url" value="http://193.22.164.185:8080/"/>
</target>

<target name="init">
	<property name="deploy-url" value=""/>
</target>

<target depends="init" name="j2mepolish">
	<j2mepolish>
	    <!-- general settings -->
		<info copyright="Copyright 2011 enough software. All rights reserved."
			deleteConfirm="Do you really want to kill me?"
			description="A J2ME Polish Processing sample application that renders a dynamically generated tree. Taken from http://www.openprocessing.org/visuals/?visualID=4732 and modified slightly."
			infoUrl="http://www.enough.de/"
			jarName="${polish.vendor}-${polish.name}-${polish.locale}-sample-processing-tree.jar"
			jarUrl="${deploy-url}${polish.jarName}"
			name="Processing Sample - Tree"
			vendorName="Enough Software"
			version="1.3.4"
	    />
		<!-- selection of supported devices -->
		<deviceRequirements if="test">
			<requirement name="Identifier" value="${device}"/>
		</deviceRequirements>
		<deviceRequirements unless="test">
			<requirement name="Identifier" value="${devices}"/>
		</deviceRequirements>
	    <!-- build settings -->
		<build fullscreen="menu" 
                imageLoadStrategy="foreground" 
                symbols="polish.skipArgumentCheck" 
                usePolishGui="true"
			>
			<!-- midlets definition -->
			<midlet class="de.enough.polish.sample.processing.tree.ProcessingTreeMidlet" name="Processing Sample - Tree"/>
			<!-- project-wide variables - used for preprocessing  -->
			<variables>
				<variable name="polish.TextField.useDirectInput" value="true" />
				<variable name="polish.TextField.supportSymbolsEntry" value="true" />
				<variable name="polish.TextField.includeInputInfo" value="true" />
				<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
				<variable name="polish.Screen.dontBufferPreviousScreen" value="true" />
				<variable name="polish.useScrollBar" value="true" />
				<variable name="update-url" value="http://www.enough.de/update"/>
				<!--
				<variable name="polish.css.allowAllAttributes" value="true" />
				-->
			</variables>


                        <compiler optimize="true"/>
			<!-- obfuscator settings: do not obfuscate when the test-property is true -->
			<obfuscator name="ProGuard" unless="noobfuscator">
			</obfuscator>
			<!-- debug settings: only include debug setting when the test-property is true -->
			<debug level="ovidiu" showLogOnError="true" verbose="false">
                                <filter level="ovidiu" pattern="de.enough.polish.example.*"/>
                                <filter level="benchmark" pattern="de.enough.polish.benchmark.*"/>

			</debug>
			<!-- play around with an additional preprocessor:
			<preprocessor
				class="de.enough.polish.extensions.TestProcessor"
				classPath="../enough-polish-extensions/bin/classes"
				>
				<parameter name="message" value="hallo welt" />
				<parameter name="relativeFile" value="../enough-polish-extensions/source" />
				<parameter name="absoluteFile" value="/home/enough/Documents/Text.swt" />
			</preprocessor>
			-->
			<resources
				dir="resources"
				defaultexcludes="yes"
				excludes="readme.txt"
			>
				<localization locales="en_US" />
				<!--
				<localization dynamic="false" defaultLocale="en_US" locales="de_DE, en_US"  unless="test"/>
				<localization locales="en_US" if="test" />
				-->
			</resources>
		</build>
		<emulator unless="noemulator" if="test" />
	</j2mepolish>
</target>


<target description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml" name="clean">
	<delete dir="build"/>
	<delete dir="dist"/>
</target>

	<target name="noemulator">
		<property name="noemulator" value="true"/>
	</target>

        <target name="noobfuscator">
		<property name="noobfuscator" value="true"/>
	</target>

	<target name="wtkemulator" depends="test,j2mepolish">
		<exec executable="${wtk.home}/bin/emulator.exe">
			<arg value="-Xdescriptor:D:\Programare\Eclipse Workspace\enough-polish-sample-processing-screen\dist\Generic-AnyPhone-en_US-sample-processing-screen.jad"/>
		</exec>

	</target>
	
	<target name="emulator" depends="test,j2mepolish" />

	<target name="cleanbuild" depends="clean,j2mepolish" />

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="j2mepolish" name="enough-polish-sample-localization">
	

<property file="${user.name}.properties" />
<property name="wtk.home" location="/home/enough/dev/WTK2.1" />
<property name="nokia.home" location="/home/enough/dev/Nokia" />
<property name="polish.home" location="../enough-polish-build" />
<property  name="mpp.home" location="/home/enough/dev/mpp-sdk"/>
	<property  name="device" value="Nokia/Series60E2" />
	<property  name="devices" value="${device}" />

	
	<!-- task definitions -->
	<!-- classpath="import/enough-j2mepolish-build.jar:import/jdom.jar:import/proguard.jar" -->
	<taskdef 
		name="j2mepolish"
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/bin/classes:${polish.home}/lib/jdom.jar" 
	/>

		
<!-- build targets, each target can be called via "ant [name]", 
	 e.g. "ant clean", "ant notest j2mepolish" or just "ant" for calling the default-target -->

<target name="test">
	<property name="test" value="true"/>
</target>
	
<target name="deploy">
	<property name="deploy-url" value="http://193.22.164.185:8080/"/>
</target>
		
<target name="init">
  	<property name="test" value="false"/>
	<property name="deploy-url" value=""/>
</target>
    
<target depends="init" name="j2mepolish">
	<j2mepolish>
		  <lifeCycleManager name="mea">
		    <parameter name="fallbackDevice" value="Generic/AnyPhone" />
		    <parameter name="access" value="public" />
		  </lifeCycleManager>
	    <!-- general settings -->
		<info copyright="Copyright 2009 Enough Software. All rights reserved." 
			description="Animation example." 
			icon="icon0.png" 
			infoUrl="http://www.enough.de/dictionary" 
			jarName="${polish.vendor}-${polish.name}-${polish.locale}-rgbfilter.jar" 
			jarUrl="${deploy-url}${polish.jarName}" 
			name="Animated Menu" 
			vendorName="Enough Software" 
			version="2.1.3"
	    />
		<!-- selection of supported devices -->
		<deviceRequirements if="test">
			<requirement name="Identifier" value="${device}"/>
		</deviceRequirements>
		<deviceRequirements unless="test">
			<requirement name="Identifier" value="${devices}"/>
		</deviceRequirements>
	    <!-- build settings -->
		<build fullscreen="menu" 
                imageLoadStrategy="foreground" 
                polishDir="../enough-polish-j2me/source/src" 
                symbols="polish.skipArgumentCheck" 
                usePolishGui="true"
			>
			<!-- 			polishDir="../enough-polish-j2me/source/src"
			-->
			<sources>
				<source dir="source/src" />
			</sources>
			<!-- midlets definition -->
			<midlet class="de.enough.polish.example.MenuMidlet" name="Animated Menu"/>
			<!-- project-wide variables - used for preprocessing  -->
			<variables>
				<variable name="polish.TextField.useDirectInput" value="true" />
				<variable name="polish.TextField.supportSymbolsEntry" value="true" />
				<variable name="polish.TextField.includeInputInfo" value="true" />
				<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
				<variable name="polish.Screen.dontBufferPreviousScreen" value="true" />
				<variable name="polish.useScrollBar" value="true" />
				<variable name="update-url" value="http://www.enough.de/update"/>
				<!--
				<variable name="polish.css.allowAllAttributes" value="true" />
				-->
			</variables>
			<!-- obfuscator settings: do not obfuscate when the test-property is true -->
			<obfuscator useDefaultPackage="true" name="ProGuard" unless="test">
			</obfuscator>
			<!-- debug settings: only include debug setting when the test-property is true -->
			<debug if="test" level="error" showLogOnError="true" verbose="true">
				<filter level="info" pattern="de.enough.polish.ui.*"/>
				<!--
				<filter level="debug" class="de.enough.polish.ui.Container"/>
				<filter level="debug" class="de.enough.polish.ui.MasterCanvas"/>
				<filter level="debug" class="de.enough.polish.ui.Alert"/>
				<filter level="debug" class="de.enough.polish.ui.StyleSheet"/>
				<filter level="debug" class="de.enough.polish.ui.Screen"/>
				<filter level="debug" pattern="de.enough.polish.example.*"/>
				<filter level="debug" class="de.enough.polish.ui.ContainerView"/>
				-->
			</debug>
			<!-- play around with an additional preprocessor: 
			<preprocessor 
				class="de.enough.polish.extensions.TestProcessor" 
				classPath="../enough-polish-extensions/bin/classes" 
				>
				<parameter name="message" value="hallo welt" />
				<parameter name="relativeFile" value="../enough-polish-extensions/source" />
				<parameter name="absoluteFile" value="/home/enough/Documents/Text.swt" />
			</preprocessor>
			-->
			<resources
				dir="resources"
				defaultexcludes="yes"
				excludes="readme.txt"
			>
				<localization locales="en_US" />
				<!--
				<localization dynamic="false" defaultLocale="en_US" locales="de_DE, en_US"  unless="test"/>
				<localization locales="en_US" if="test" />
				-->
			</resources>
		</build>
		<emulator if="test" />
	</j2mepolish>
</target>


<target description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml" name="clean">
	<delete dir="build"/>
	<delete dir="dist"/>
</target>
	
	<target name="emulator" depends="test,j2mepolish" />

	<target name="cleanbuild" depends="clean,j2mepolish" />

</project>
<!-- This file controls the build process.                    -->
<!-- The most important target is the j2mepolish target,      -->
<!-- which controls for what devices the application should   -->
<!-- be created.                                              -->
<!--                                                          -->
<!-- Important: when you have no Wireless Toolkit installed   -->
<!-- you need to define the "preverify"-attribute             -->
<!-- of the <build>-element of the J2ME Polish task.          -->
<!--                                                          -->
<!-- When you call Ant from the command-line, you can         -->
<!-- call "ant test j2mepolish" to skip the obfuscation       -->
<!-- and to build the example for fewer handsets.             -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->

<project 
	name="enough-j2mepolish-rmi-xmlrpc" 
	default="j2mepolish">
	
	
<property file="${user.name}.properties" />
<property file="midlet.properties" />
	
<!-- The polish.home property should point to the directory   -->
<!-- containing the J2ME Polish installation.                 -->

<property name="polish.home" value="../enough-polish-build/" />

<!-- Definition of the J2ME Polish task:                      -->

<taskdef name="j2mepolish" 
	classname="de.enough.polish.ant.PolishTask" 
	classpath="${polish.home}/bin/classes:${polish.home}/lib/enough-j2mepolish-build.jar:${polish.home}/lib/jdom.jar"/>

	<!-- Definition of the present helper task:                      -->

	<taskdef name="present" 
		classname="de.enough.polish.ant.PresentTask" 
		classpath="${polish.home}/bin/classes:${polish.home}/lib/enough-j2mepolish-build.jar"/>

	
<!-- build targets, each target can be called via "ant [name]", 
	 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default target -->

<target name="setdeploy" 
	description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
	>
	<property name="deploy-url" value="http://www.company.com/download/" />
</target>
	
<target name="test" 
	description="Call this target first to skip the obfuscation step, e.g. ant test j2mepolish"
	>
	<property name="test" value="true" />
	<property name="dir.work" value="build/test" />
</target>
		
<target name="init">
  	<property name="test" value="false" />
	<property name="dir.work" value="build/real" />
	<property name="deploy-url" value="" />
</target>
 
<!-- In this target the J2ME Polish task is used.             -->
<!-- It has 3 sections:                                       -->
<!--    1. The info-section defines some general information  -->
<!--    2. The deviceRequirements-section chooses the devices -->
<!--       for which the application is optimized.            -->
<!--    3. The build-section controls the actual build        -->
<!--       process.                                           -->	
<target name="j2mepolish" 
		depends="init"
		description="This is the controller for the J2ME build process." 
		>
	<j2mepolish>
	    <!-- general settings, these settings basically form the JAD-attributes. -->
	    <!-- Have a look at the <jad>-section for setting specialised attributes.
	         You can also define localized attributes in the resources/messages.txt files -->
		<info
			license="GPL"
			name="WordTracker"
			version="1.3.4"
			description=""
			vendorName="Enough Software"
			infoUrl="http://www.j2mepolish.org"
			icon="dot.png"
			jarName="${polish.vendor}-${polish.name}-${polish.locale}-wordtracker.jar" 
			jarUrl="${deploy-url}${polish.jarName}"
			copyright="Copyright 2007 Enough Software. All rights reserved."
		/>
		
		<!-- selection of supported devices -->
		<!-- In the test mode the application is build only for the  -->
		<!-- Generic/midp1 phone, but when the test-property is set to false, -->
		<!-- the second deviceRequirements will be used instead. -->
		<deviceRequirements if="test">
			<requirement name="Identifier" value="${device}" />
		</deviceRequirements>
		<deviceRequirements if="!test and device:defined">
			<requirement name="Identifier" value="${device}" />
		</deviceRequirements>
		<deviceRequirements unless="test or device:defined">
			<or>
						<requirement name="Identifier" value="Generic/Midp2Cldc11Pointer" />
						<requirement name="Identifier" value="Generic/MppPhone" />
						<requirement name="Identifier" value="Nokia/Series40DP3" />
						<requirement name="Identifier" value="Nokia/Series60E2FP2" />
						<requirement name="Identifier" value="Nokia/Series60E2FP3" />
						<requirement name="Identifier" value="Nokia/Series60E3" />
						<requirement name="Identifier" value="Sony-Ericsson/JavaPlatform6" />
						</or>
		</deviceRequirements>
		
	    <!-- build settings -->
		<!-- 
		 -->
		<build
			symbols="ExampleSymbol, AnotherExample"
			fullscreen="menu"
			usePolishGui="always"
			workDir="${dir.work}"
			polishDir="../enough-polish-j2me/source/src"
		>
		    <sources>
		    	<source dir="source/src" />
			</sources>
			
			<!-- midlets definition -->
			<!-- <midlet class="de.enough.polish.example.MenuMidlet" name="Example" /> -->
			
			<!-- project-wide variables - used for preprocessing.  -->
			<!-- You can set localized variables in the resources/messages.txt files as well.  -->
			<variables includeAntProperties="true" >
				<!-- example variables:
				In your Java-code you can use the following snipet to use this variable:
				//#= private static final String UPDATE_URL = "${ update-url }";
				You can change the title of the sample application with the "title"-var.
				-->
				<variable name="update-url" value="http://www.enough.de/update" />
				<variable name="title" value="J2ME Polish" />
				<variable name="polish.TextField.useDirectInput" value="true" />
				<variable name="polish.rmi.redirects" value="false" />
				<variable name="polish.rmi.xmlrpc" value="true" />
				<variable name="polish.useScrollBar" value="true" />
				<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
				<variable name="polish.css.allowAllAttributes" value="true" />
			</variables>
			<!-- Here you can set the dir attribute to "resources2" for an alternative design. -->
			<resources
				dir="resources"
				defaultexcludes="yes"
				excludes="readme.txt"
			>
				<!-- add the localization element for created localized
				     versions of your application: -->
				<localization locales="en_US" />
			</resources>
			
			<!-- obfuscator settings: do not obfuscate when the test-property is true -->
			<obfuscator name="ProGuard" useDefaultPackage="false" unless="polish.blackberry or dontobfuscate or test" >
				<!--
				You can set additional parameters here, e.g.:
				<parameter name="optimize" value="false" />
				-->
			</obfuscator>
			
			<!-- debug settings: only include debug setting when the test-property is true -->
			<debug if="test" showLogOnError="false" verbose="true" level="error">
				<filter pattern="de.enough.polish.sample.*" level="debug" />
				<filter pattern="de.enough.polish.browser.*" level="debug" />
			</debug>
			
			<!-- user defined JAD attributes can also be used: -->
			<jad>
				<attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
			</jad>	
			
			
		</build>
		
		<!-- execution of emulator(s) -->
		<emulator
			wait="true"
			securityDomain="trusted"
			enableProfiler="false"
			enableMemoryMonitor="false"
			enableNetworkMonitor="false"
			if="test and not debug"
			>
		</emulator>
	
		<emulator
			wait="false"
			securityDomain="trusted"
			enableProfiler="false"
			enableMemoryMonitor="false"
			enableNetworkMonitor="false"
			if="debug">
			<debugger port="8000" />
		</emulator>
		
	</j2mepolish>
</target>

<target name="emulator" depends="test,j2mepolish" />

	
<target name="clean" 
  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
	<delete dir="build" />
	<delete dir="dist" />
</target>

	<target name="cleanbuild" depends="clean,j2mepolish" />

</project>
<!-- This file controls the build process.                    -->
<!-- The most important target is the j2mepolish target,      -->
<!-- which controls for what devices the application should   -->
<!-- be created.                                              -->
<!--                                                          -->
<!-- Important: when you have no Wireless Toolkit installed   -->
<!-- you need to define the "preverify"-attribute             -->
<!-- of the <build>-element of the J2ME Polish task.          -->
<!--                                                          -->
<!-- When you call Ant from the command-line, you can         -->
<!-- call "ant test j2mepolish" to skip the obfuscation       -->
<!-- and to build the example for fewer handsets.             -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->

<project 
	name="enough-j2mepolish-rmi" 
	default="build-all">
	
	
<property file="${user.name}.properties" />
<property file="midlet.properties" />
	
<!-- The polish.home property should point to the directory   -->
<!-- containing the J2ME Polish installation.                 -->

<property name="polish.home" value="../enough-polish-build/" />
<property name="webapps.home" location="/Users/robertvirkus/Downloads/apache-tomcat-5.5.17/webapps" />

<!-- Definition of the J2ME Polish task:                      -->

<taskdef name="j2mepolish" 
	classname="de.enough.polish.ant.PolishTask" 
	classpath="${polish.home}/bin/classes:${polish.home}/lib/enough-j2mepolish-build.jar:${polish.home}/lib/jdom.jar"/>

	<!-- Definition of the present helper task:                      -->

	<taskdef name="present" 
		classname="de.enough.polish.ant.PresentTask" 
		classpath="${polish.home}/bin/classes:${polish.home}/lib/enough-j2mepolish-build.jar"/>

	
<!-- build targets, each target can be called via "ant [name]", 
	 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default target -->

<target name="setdeploy" 
	description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
	>
	<property name="deploy-url" value="http://www.company.com/download/" />
</target>
	
<target name="test" 
	description="Call this target first to skip the obfuscation step, e.g. ant test j2mepolish"
	>
	<property name="test" value="true" />
	<property name="dir.work" value="build/test" />
</target>
		
<target name="init">
  	<property name="test" value="false" />
	<property name="dir.work" value="build/real" />
	<property name="deploy-url" value="" />
</target>
 
<!-- In this target the J2ME Polish task is used.             -->
<!-- It has 3 sections:                                       -->
<!--    1. The info-section defines some general information  -->
<!--    2. The deviceRequirements-section chooses the devices -->
<!--       for which the application is optimized.            -->
<!--    3. The build-section controls the actual build        -->
<!--       process.                                           -->	
<target name="j2mepolish" 
		depends="init"
		description="This is the controller for the J2ME build process." 
		>
	<j2mepolish>
	    <!-- general settings, these settings basically form the JAD-attributes. -->
	    <!-- Have a look at the <jad>-section for setting specialised attributes.
	         You can also define localized attributes in the resources/messages.txt files -->
		<info
			license="GPL"
			name="Browser"
			version="1.3.4"
			description=""
			vendorName="Enough Software"
			infoUrl="http://www.j2mepolish.org"
			icon="dot.png"
			jarName="${polish.vendor}-${polish.name}-${polish.locale}-browser.jar" 
			jarUrl="${deploy-url}${polish.jarName}"
			copyright="Copyright 2004 Enough Software. All rights reserved."
		/>
		
		<!-- selection of supported devices -->
		<!-- In the test mode the application is build only for the  -->
		<!-- Generic/midp1 phone, but when the test-property is set to false, -->
		<!-- the second deviceRequirements will be used instead. -->
		<deviceRequirements if="test">
			<requirement name="Identifier" value="${device}" />
		</deviceRequirements>
		<deviceRequirements if="!test and device:defined">
			<requirement name="Identifier" value="${device}" />
		</deviceRequirements>
		<deviceRequirements unless="test or device:defined">
			<or>
						<requirement name="Identifier" value="Generic/Midp2Cldc11Pointer" />
						<requirement name="Identifier" value="Generic/MppPhone" />
						<requirement name="Identifier" value="Nokia/Series40DP3" />
						<requirement name="Identifier" value="Nokia/Series60E2FP2" />
						<requirement name="Identifier" value="Nokia/Series60E2FP3" />
						<requirement name="Identifier" value="Nokia/Series60E3" />
						<requirement name="Identifier" value="Sony-Ericsson/JavaPlatform6" />
						</or>
		</deviceRequirements>
		
	    <!-- build settings -->
		<!-- 
		 -->
		<build
			usePolishGui="always"
			workDir="${dir.work}"
		>
		    <sources>
		    	<source dir="source/src" />
			</sources>
			<postcompiler name="floater" />
			<postcompiler name="java5" />			
			<!--
			--> 
			
			<!-- midlets definition -->
			<!-- <midlet class="de.enough.polish.example.MenuMidlet" name="Example" /> -->
			
			<!-- project-wide variables - used for preprocessing.  -->
			<!-- You can set localized variables in the resources/messages.txt files as well.  -->
			<variables includeAntProperties="true" >
				<!-- example variables:
				In your Java-code you can use the following snipet to use this variable:
				//#= private static final String UPDATE_URL = "${ update-url }";
				You can change the title of the sample application with the "title"-var.
				-->
				<variable name="update-url" value="http://www.enough.de/update" />
				<variable name="title" value="J2ME Polish" />
				<variable name="polish.DateField.useDirectInput" value="true" />
				<variable name="polish.TextField.useDirectInput" value="true" />
				<variable name="polish.useScrollBar" value="true" />
				<variable name="polish.rmi.redirect" value="false" />
				<variable
					name="polish.FullScreen"
					value="menu" 
					unless="polish.blackberry || polish.android" 
				/>
				<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />

				<!-- 
				You can use following mockup implementation for testing this application without using a server:
				-->
				<variable 
					name="polish.rmi.mockup.de.enough.polish.sample.rmi.GameServer" 
					value="new de.enough.polish.sample.rmi.test.MockupGameServer()"
					if="mockup"
				/>
			</variables>
			<!-- Here you can set the dir attribute to "resources2" for an alternative design. -->
			<resources
				dir="resources"
				defaultexcludes="yes"
				excludes="readme.txt"
			>
				<!-- add the localization element for created localized
				     versions of your application: -->
				<localization locales="en_US" />
			</resources>
			
			<!-- obfuscator settings: do not obfuscate when the test-property is true -->
			<obfuscator name="ProGuard" unless="polish.blackberry or dontobfuscate" >
				<!--
				You can set additional parameters here, e.g.:
				<parameter name="optimize" value="false" />
				-->
			</obfuscator>
			<!-- debug settings: only include debug setting when the test-property is true -->
			<debug if="test" showLogOnError="false" verbose="true" level="error">
				<filter pattern="de.enough.polish.sample.*" level="debug" />
				<filter pattern="de.enough.polish.browser.*" level="debug" />
			</debug>
			
			<!-- user defined JAD attributes can also be used: -->
			<jad>
				<attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
			</jad>	
			
			
		</build>
		
		<!-- execution of emulator(s) -->
		<emulator
			wait="true"
			securityDomain="trusted"
			enableProfiler="false"
			enableMemoryMonitor="false"
			enableNetworkMonitor="false"
			if="test and not debug"
			>
		</emulator>
	
		<emulator
			wait="false"
			securityDomain="trusted"
			enableProfiler="false"
			enableMemoryMonitor="false"
			enableNetworkMonitor="false"
			if="debug">
			<debugger port="8000" />
		</emulator>
		
	</j2mepolish>
</target>

<target name="emulator" depends="test,j2mepolish" />

<target name="build-war" description="builds the server war file for Tomcat or other J2EE/Servlet Containers.">
	<present file="dist/client-rmi-classes.jar" failMessage="Please run either the j2mepolish or the build-all target first." />
	<copy file="${polish.home}/dist/enough-j2mepolish-rmi.jar" todir="dist" />
	<delete dir="bin/server" />
	<mkdir dir="bin/server" />
	<javac srcdir="source/server" destdir="bin/server" classpath="dist/client-rmi-classes.jar:dist/enough-j2mepolish-rmi.jar:${polish.home}/lib/javax.servlet.jar" />
	<jar destfile="dist/gameserver.jar" basedir="bin/server" excludes="**/CVS" />
 	<war 
		destfile="dist/gameserver.war"
 		webxml="source/server/web.xml"
	>
 		<lib dir="dist" includes="client-rmi-classes.jar,enough-j2mepolish-rmi.jar,gameserver.jar" />
	</war>
</target>
	
<target name="deploy-war" depends="build-war" description="copies the war to the applications root of the application server">
	<copy file="dist/gameserver.war" todir="${webapps.home}" />
</target>
	

<target name="build-all" depends="clean,j2mepolish,build-war" description="builds both the client and the server code of the application"/>
	
	<target name="clean" 
	  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
		<delete dir="build" />
		<delete dir="dist" />
	</target>
	
	<target name="cleanbuild"
			description="Builds the application and the server cleanly"
			depends="clean, build-all" 
	/>

	
	<target name="enableMockup" >
		<property name="mockup" value="true" />
	</target>

	<target name="mockup"
			description="Builds the application with using a mockup server implementation for testing purposes"
			depends="enableMockup, j2mepolish" 
	/>
	

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="j2mepolish" name="enough-polish-example">
	
	<property file="${user.name}.properties" />
	<property  name="polish.home" location="../enough-polish-build"/>
	<!--
	<property  name="wtk.home" location="/home/enough/dev/WTK2.2"/>
	-->
	<property  name="mpp.home" location="/home/enough/dev/mpp-sdk"/>
	<property  name="nokia.home" location="/home/enough/dev/Nokia"/>
	<property name="blackberry.home" 	location="/home/enough/.wine/fake_windows/Program Files/Research In Motion/BlackBerry JDE 4.0" />
	<property  name="device" value="Nokia/Series60E2" />

	<!-- task definitions -->
	<!-- classpath="import/enough-j2mepolish-build.jar:import/jdom.jar:import/proguard.jar" -->
	<taskdef classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/bin/classes:${polish.home}/lib/jdom.jar:${polish.home}/lib/proguard.jar" 
		name="j2mepolish"/>
	
			
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant notest j2mepolish" or just "ant" for calling the default-target -->
	
	<target name="test">
		<property name="test" value="true"/>
		<property name="dir.work" value="build/test"/>
	</target>
		
	<target name="deploy">
		<property name="deploy-url" value="http://193.22.164.185:8080/"/>
	</target>
			
	<target name="init">
	  	<property name="test" value="false"/>
		<property name="deploy-url" value=""/>
		<property name="dir.work" value="build/real"/>
	</target>
	    
	<target depends="init" name="j2mepolish">
		<j2mepolish>
		    <!-- general settings -->
			<info 
				name="RoadRunner" 
				vendorName="Enough Software" 
				version="1.0.20"
				copyright="Copyright 2004 - 2007 Enough Software. All rights reserved." 
				deleteConfirm="Do you really want to remove Roadrunner?" 
				description="A frogger clone." 
				icon="icon.png" 
				infoUrl="http://www.enough.de" 
				jarName="${ nospace( polish.vendor ) }-${ nospace( polish.name ) }-roadrunner.jar" 
				jarUrl="${deploy-url}${polish.jarName}" 
		    />
			<!-- selection of supported devices -->
			<deviceRequirements if="test">
				<requirement name="Identifier" value="${device}"/>
			</deviceRequirements>
			<deviceRequirements unless="test">
				<!--
				<or>
					<requirement name="MaxJarSize" value="148+ kb" type="Memory"/>
					<and>
						<requirement name="StorageSize" value="148+ kb" type="Memory"/>
						<requirement name="MaxJarSize" value="undefined" type="Memory"/>
					</and>
				</or>
				-->
				<requirement name="Identifier" value="${device}"/>
				<!--
				<requirement name="Identifier" value="${device}, Siemens/SX1, Generic/PlainMidp1, Nokia/Series60, Nokia/Series60Midp2, Sony-Ericsson/K700, Generic/midp1, Siemens/S65, Samsung/SGH-D500"/>
				<requirement name="Identifier" value="Sony-Ericsson/K700, Nokia/6630"/>
				BlackBerry/7290,
				<requirement name="SoundFormat" value="midi" />
				<requirement name="Identifier" value="BlackBerry/7290,Sony-Ericsson/K700"/>
				<requirement name="Identifier" value="Nokia/Series40, Sony-Ericsson/K700, Nokia/Series60, Nokia/Series60Midp2, Motorola/V525"/>
				-->
			</deviceRequirements>
		    <!-- build settings -->
			<build 
	                imageLoadStrategy="foreground" 
	                polishDir="../enough-polish-j2me/source/src" 
	                symbols="" 
	                usePolishGui="true"
	                sourceDir="source/src"
					workDir="${dir.work}"
					abortOnError="true"
					onError="errorhandling"
				>
				<!-- 			polishDir="../enough-polish-j2me/source/src"
				-->
				<!-- midlets definition -->
				<midlet class="de.enough.roadrunner.RoadRunner" name="RoadRunner"/>
				<!-- project-wide variables - used for preprocessing  -->
				<variables>
					<variable
						name="polish.FullScreen"
						value="menu" 
						unless="polish.blackberry || polish.android" 
					/>
					<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
					<variable name="polish.usePolishTitle" value="true" />
					<variable name="update-url" value="http://www.enough.de/update"/>
					<variable name="polish.TextField.useDirectInput" value="true"  />
					<variable name="polish.TiledLayer.useBackBuffer" value="true"/>
					<variable name="polish.TiledLayer.TransparentTileColor" value="0x00FF00"/>
					<variable name="polish.List.suppressSelectCommand" value="true" />
					<!--
					<variable name="polish.TextField.useDirectInput" value="true" unless="polish.hasPointerEvents" />
					<variable name="polish.jarName" value="N60E2_RR.jar" if="polish.group.Series60E2" />
					<variable name="polish.usePolishGameApi" value="true" if="polish.vendor == Nokia" />
					-->
				</variables>
				<!--
				<manifestFilter if="polish.vendor == Samsung">
				        Manifest-Version, MIDlet-Name, MIDlet-Version, 
				        MIDlet-Vendor,  
				        MIDlet-1*,MIDlet-Icon?, MIDlet-Data-Size?, MIDlet-Description?,
						MIDlet-Info-URL?,
				        MicroEdition-Profile?, MicroEdition-Configuration?
				</manifestFilter>
				<jad>
					 <attribute 
						name="MIDlet-Push-1" 
						value="socket://:79, com.sun.example.SampleChat, *" 
						if="polish.midp2" 
						/>
					<attribute name="MyAttribute1" value="Value1" />
					<attribute name="MyAttribute2" value="Value2" />
					<attribute name="MyAttribute3" value="Value3" />
				</jad>
				-->
				<!-- obfuscator settings: do not obfuscate when the test-property is true -->
				<obfuscator useDefaultPackage="false" name="ProGuard" unless="test">
					<!--
					<parameter name="enableFlowObfuscation" value="true" />
					<parameter name="enableOptimization" value="false" />
					<parameter name="enableFlowObfuscation" value="false" />
					<keep class="de.enough.polish.example.Dummy" />
					-->
				</obfuscator>
				<!-- debug settings: only include debug setting when the test-property is true  -->
				<!--
				 if="test"
				-->
				<debug level="error" showLogOnError="true" verbose="true" if="test and false" >
					<handler name="rms" if="false"/>
					<handler name="file" if="polish.api.pdaapi">
			            <parameter name="preferredRoot" value="E:"/>
			            <parameter name="useUnqiueName" value="true"/>
					</handler>
					<filter level="info" pattern="de.enough.roadrunner.*"/>
					<filter level="info" pattern="de.enough.polish.ui.*"/>
					<filter level="debug" class="de.enough.polish.ui.Container"/>
					<filter level="info" class="de.enough.polish.ui.Screen"/>
				</debug>
				<!-- play around with an additional preprocessor: 
					<filter level="debug" class="de.enough.polish.ui.StyleSheet"/>
					<filter level="debug" pattern="de.enough.polish.ui.game.*"/>
					<filter level="debug" package="de.enough.polish.ui.containerviews"/>
					<filter level="debug" pattern="de.enough.roadrunner.*"/>
				<preprocessor 
					class="de.enough.polish.extensions.TestProcessor" 
					classPath="../enough-polish-extensions/bin/classes" 
					>
					<parameter name="message" value="hallo welt" />
					<parameter name="relativeFile" value="../enough-polish-extensions/source" />
					<parameter name="absoluteFile" value="/home/enough/Documents/Text.swt" />
				</preprocessor>
				-->
				<resources
					dir="resources"
					defaultexcludes="yes"
					excludes="readme.txt, *.definition"
				>
					<localization defaultLocale="en_US" dynamic="false" if="test">
						<locale name="en_US" />
					</localization>
					<localization defaultLocale="en_US" dynamic="true" unless="test">
						<locale name="en_US" />
						<locale name="de_DE" encoding="UTF-8"	/>
					</localization>
				</resources>
				<!--
				<packager
					executable="jar"
					arguments="cvfM;;${polish.jarPath};;-C;;${polish.packageDir};;."
				/>
				-->
				<finalizer name="antcall" target="rename" unless="test" if="polish.group.Series60E2FP3" />
				<finalizer name="antcall" target="hello" unless="test" />
			</build>
			<!-- launch emulator		-->
			<emulator if="test" >
				<parameter name="-Xheapsize" value="50000000" />
			</emulator>
	
		</j2mepolish>
	</target>
	
	<target 
		name="hello"
	>
		<echo message="hello ${polish.identifier}" />
	</target>
	
	
	<target 
		name="rename"
		description="renames the JAR and JAD files"
	>
		<echo message="renaming ${polish.finalize.jar} to dist/S60E2_RoadRunner.jar" />
		<move file="${polish.finalize.jad}" tofile="dist/S60E2FP3_RoadRunner.jad" />
		<move file="${polish.finalize.jar}" tofile="dist/S60E2FP3_RoadRunner.jar" />
	</target>


	<target 
		name="emulator"
		depends="test,j2mepolish"
		description="invokes the emulator"
	>
	</target>

	<target 
		name="clean"
		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml" 
	>
		<delete dir="build"/>
		<delete dir="dist"/>
	</target>
	
	<target 
		name="cleanbuild"
		depends="clean, j2mepolish"
	>
	</target>

	<target 
		name="errorhandling"
	>
		<echo level="error" message="Error enabled: ${j2mepolish.error}"> </echo>
		<echo level="error" message="${j2mepolish.error.message}"> </echo>
	</target>

	
</project>
<!-- This file controls the build process.                    -->
<!-- The most important target is the j2mepolish target,      -->
<!-- which controls for what devices the application should   -->
<!-- be created.                                              -->
<!--                                                          -->
<!-- Important: when you have no Wireless Toolkit installed   -->
<!-- you need to define the "preverify"-attribute             -->
<!-- of the <build>-element of the J2ME Polish task.          -->
<!--                                                          -->
<!-- When you call Ant from the command-line, you can         -->
<!-- call "ant test j2mepolish" to skip the obfuscation       -->
<!-- and to build the example for fewer handsets.             -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->

<project 
	name="enough-j2mepolish-example" 
	default="j2mepolish">
	
	
	<property file="${user.name}.properties" />
	<property file="midlet.properties" />
	<property name="device" value="Generic/AnyPhone" />
	<property name="devices" value="${device}, Generic/midp2, Sony-Ericsson/JavaPlatform7, Sony-Ericsson/JavaPlatform8" />
		
	<!-- The polish.home property should point to the directory   -->
	<!-- containing the J2ME Polish installation.                 -->
	
	<property name="polish.home" value="../enough-polish-build/" />
	
	<!-- The wtk.home property should point to the directory      -->
	<!-- containing the Wireless Toolkit.                         -->
	
	
	
		
	<!-- Definition of the J2ME Polish task:                      -->
	
	<taskdef name="j2mepolish" 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/bin/classes:${polish.home}/lib/enough-j2mepolish-build.jar:${polish.home}/lib/jdom.jar"/>
	
		
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default target -->
	
	<target name="setdeploy" 
		description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
		>
		<property name="deploy-url" value="http://www.company.com/download/" />
	</target>
		
	<target name="test" 
		description="Call this target first to skip the obfuscation step, e.g. ant test j2mepolish"
		>
		<property name="test" value="true" />
		<property name="dir.work" value="build/test" />
	</target>
			
	<target name="init">
	  	<property name="test" value="false" />
		<property name="dir.work" value="build/real" />
		<property name="deploy-url" value="" />
	</target>
	 
	<!-- In this target the J2ME Polish task is used.             -->
	<!-- It has 3 sections:                                       -->
	<!--    1. The info-section defines some general information  -->
	<!--    2. The deviceRequirements-section chooses the devices -->
	<!--       for which the application is optimized.            -->
	<!--    3. The build-section controls the actual build        -->
	<!--       process.                                           -->	
	<target name="j2mepolish" 
			depends="init"
			description="This is the controller for the J2ME build process." 
			>
		<j2mepolish>
			  <lifeCycleManager name="mea">
			    <parameter name="fallbackDevice" value="Generic/AnyPhone" />
			    <parameter name="access" value="public" />
			  </lifeCycleManager>
		    <!-- general settings, these settings basically form the JAD-attributes. -->
		    <!-- Have a look at the <jad>-section for setting specialised attributes.
		         You can also define localized attributes in the resources/messages.txt files -->
			<info
				name="News Cup"
				version="2.1.3"
				description="A simple RSS news reader"
				vendorName="Enough Software"
				infoUrl="http://www.j2mepolish.org"
				icon="rss.png"
				jarName="${polish.vendor}-${polish.name}-${polish.locale}-rss.jar" 
				jarUrl="${deploy-url}${polish.jarName}"
				copyright="Copyright 2010 Enough Software. All rights reserved."
			/>
			
			<!-- selection of supported devices -->
			<!-- In the test mode the application is build only for the  -->
			<!-- Generic/midp1 phone, but when the test-property is set to false, -->
			<!-- the second deviceRequirements will be used instead. -->
			<deviceRequirements if="test">
				<requirement name="Identifier" value="${device}" />
			</deviceRequirements>
			<deviceRequirements unless="test">
				<requirement name="Identifier" value="${devices}" />
			</deviceRequirements>
			
		    <!-- build settings -->
			<!-- 
			 -->
			<build
				fullscreen="menu"
				usePolishGui="true"
				workDir="${dir.work}"
			>
				<libraries>
					<!-- sample library 
					<library file="lib/myclasses.jar" />
					-->
				</libraries>
				<!-- midlets definition -->
				<midlet class="de.enough.polish.sample.rss.RssMidlet" name="News Cup" />
				
				<!-- project-wide variables - used for preprocessing.  -->
				<!-- You can set localized variables in the resources/messages.txt files as well.  -->
				<variables includeAntProperties="true" >
					<!-- example variables:
					In your Java-code you can use the following snipet to use this variable:
					//#= private static final String UPDATE_URL = "${ update-url }";
					You can change the title of the sample application with the "title"-var.
					-->
					<variable name="polish.FullScreen" value="false" if="polish.android || polish.blackberry" />
					<variable name="polish.useNativeAlerts" value="true" if="polish.android || polish.blackberry" />
					<variable name="update-url" value="http://www.enough.de/update" />
					<variable name="title" value="J2ME Polish" />
					<variable name="polish.css.view-type" value="true" />
					<variable name="polish.Browser.UserAgent" value="MobiViewer 1.0" />
					<variable name="polish.Browser.MaxRedirects" value="5" />
					<variable name="polish.Browser.Gzip" value="false" />
					<variable name="polish.Browser.PaintDownloadIndicator" value="true" />
					<variable name="polish.Browser.MemorySaver" value="true" />
					<!--
					<variable name="polish.TextField.useDirectInput" value="true" />
					<variable name="polish.TextField.supportSymbolsEntry" value="true" />
					-->
					<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
					<variable name="polish.useScrollBar" value="true" />
					<variable name="polish.handleEvents" value="true" />
					<variable name="polish.Item.ShowCommandsOnHold" value="true" />
					
					<!-- use the virtual keyboard for pointer devices -->
					<variable name="polish.TextField.useVirtualKeyboard" value="true" />
					<variable name="virtualKeyboard.KeyMap.Any.Alpha" value="/keys.any.alpha.properties" />
					<variable name="virtualKeyboard.KeyMap.Any.Numeric" value="/keys.any.numeric.properties" />
				</variables>
				<!-- Here you can set the dir attribute to "resources2" for an alternative design. -->
				<resources
					dir="resources/base"
					defaultexcludes="yes"
					excludes="readme.txt"
				>
					<root dir="resources/base/images" />
					<root dir="resources/base/sounds" />
					
					<!-- keyboard mappings -->
					<root dir="resources/keyboard" if="polish.hasPointerEvents" />
					<!-- add the localization element for created localized
					     versions of your application: -->
					<localization locales="en_US" unless="test" />
				</resources>
				
				
				<!-- obfuscator settings: do not obfuscate when the test-property is true -->
				<obfuscator name="ProGuard" useDefaultPackage="false" unless="test || polish.blackberry" >
					<!--
					You can set additional parameters here, e.g.:
					<parameter name="optimize" value="false" />
					<parameter name="-verbose" value="true" />
					<parameter name="-whyareyoukeeping" value="public class de.enough.polish.ui.TextField" />
					-->
				</obfuscator>
				
				<!-- debug settings: only include debug setting when the test-property is true -->
				<debug if="test" showLogOnError="true" verbose="true" level="error">
					<filter pattern="de.enough.polish.example.*" level="debug" />
					<filter pattern="de.enough.polish.ui.*" level="warn" />
				</debug>
				
				<!-- user defined JAD attributes can also be used: -->
				<jad>
					<attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
					<!-- allow to runt the app as a background application: -->
					<attribute name="SEMC-StandbyApplication" value="Y" if="polish.vendor.Sony-Ericsson" />
				</jad>	
				
				
			</build>
			
			<!-- execution of emulator(s) -->
			<emulator
				wait="true"
				securityDomain="trusted"
				enableProfiler="false"
				enableMemoryMonitor="false"
				enableNetworkMonitor="false"
				if="test and not debug"
				>
			</emulator>
		
			<emulator
				wait="true"
				securityDomain="trusted"
				enableProfiler="false"
				enableMemoryMonitor="false"
				enableNetworkMonitor="false"
				if="debug">
				<debugger port="8000" />
			</emulator>
			
		</j2mepolish>
	</target>
	
	<target name="emulator" depends="test,j2mepolish" description="Builds the projects and runs the emulator" />

	<target name="cleanbuild" depends="clean,j2mepolish" description="Builds the projects cleanly" />

	<target name="clean" 
	  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
		<delete dir="build" />
		<mkdir dir="dist" />
		<delete dir="dist" includes="**/*" />
	</target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="j2mepolish" name="enough-polish-sample-serialization">

	<property file="${user.name}.properties" />
	<!-- the device used for test builds:                         -->
	<property  name="device" value="Nokia/Series60E2" />


	<property name="wtk.home" location="/home/enough/dev/WTK2.2" />
	<property name="nokia.home" location="/home/enough/dev/Nokia" />
	<property name="polish.home" location="../enough-polish-build" />
	<property  name="mpp.home" location="/home/enough/dev/mpp-sdk"/>

	
	<!-- task definitions -->
	<taskdef 
		name="j2mepolish"
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/bin/classes:${polish.home}/lib/jdom.jar" 
	/>

		
<!-- build targets, each target can be called via "ant [name]", 
	 e.g. "ant clean", "ant notest j2mepolish" or just "ant" for calling the default-target -->

<target name="test">
	<property name="test" value="true"/>
</target>
	
<target name="deploy">
	<property name="deploy-url" value="http://193.22.164.185:8080/"/>
</target>
		
<target name="init">
  	<property name="test" value="false"/>
	<property name="deploy-url" value=""/>
</target>
    
<target depends="init" name="j2mepolish">
	<j2mepolish>
	    <!-- general settings -->
		<info copyright="Copyright 2006 Enough Software. All rights reserved." 
			description="A serialization example." 
			infoUrl="http://www.enough.de" 
			jarName="${polish.vendor}-${polish.name}-${polish.locale}-serialization.jar" 
			jarUrl="${deploy-url}${polish.jarName}" 
			license="GPL" 
			name="Notes" 
			vendorName="Enough Software" 
			version="1.0.4"
	    />
		<!-- selection of supported devices -->
		<deviceRequirements if="test">
			<requirement name="Identifier" value="${device}"/>
		</deviceRequirements>
		<deviceRequirements unless="test">
			<requirement name="Identifier" value="${device}"/>
		</deviceRequirements>
	    <!-- build settings -->
		<build fullscreen="menu" 
                polishDir="../enough-polish-j2me/source/src" 
                symbols="polish.skipArgumentCheck" 
                usePolishGui="true"
			>
			<!-- midlets definition -->
			<midlet class="de.enough.polish.sample.serialization.NotesMidlet" name="Notes"/>
			<!-- project-wide variables - used for preprocessing  -->
			<variables>
				<!-- activate text input over J2ME Polish TextFields (without opening a new TextBox for each input: -->
				<variable name="polish.TextField.useDirectInput" value="true" />
				<!-- activate input of symbols: -->
				<variable name="polish.TextField.supportSymbolsEntry" value="true" />
				<!-- activate switching to the native (e.g.T9) input mode: -->
				<variable name="polish.TextField.allowNativeModeSwitch" value="true" />
				<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
				<variable name="polish.useScrollBar" value="true" />
			</variables>
			<!-- obfuscator settings: do not obfuscate when the test-property is true -->
			<obfuscator useDefaultPackage="false" name="ProGuard" unless="test">
			</obfuscator>
			<!-- debug settings: only include debug setting when the test-property is true -->
			<debug if="test" level="error" showLogOnError="true" verbose="true">
				<filter level="debug" package="de.enough.polish.sample.mail"/>
				<filter level="info" pattern="de.enough.polish.ui.*"/>
			</debug>
			<resources
				dir="resources"
				defaultexcludes="yes"
				excludes="readme.txt"
			>
			</resources>
		</build>
		<emulator if="test" />
	</j2mepolish>
</target>


<target description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml" name="clean">
	<delete dir="build"/>
	<delete dir="dist"/>
</target>
	
	<target name="emulator" depends="test,j2mepolish" />

	<target name="cleanbuild" depends="clean,j2mepolish" />

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="j2mepolish" name="enough-polish-sample-tabbedform">

	<property file="${user.name}.properties" />
	<!-- the device used for test builds:                         -->
	<property name="device" value="Nokia/Series60E2" />
	<property name="devices" value="${device}, Nokia/Series60E2FP3, Sony-Ericsson/W900" />

	<!-- The polish.home property should point to the directory   -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="wtk.home" location="../../dev/WTK2.2"/>
	<property name="polish.home" location="../enough-polish-build"/>
	<property name="nokia.home" value="/home/enough/dev/Nokia" />
	<property name="kzip.home" value="/home/enough/bin" />
	<property name="blackberry.home" location="/home/enough/.wine/fake_windows/Program Files/Research In Motion/BlackBerry JDE 4.0" />
	<property name="palm.home" location="/home/enough/dev/palm/Java_Tech_for_Garnet_WEME57" />
	<property name="palm.simulator.home" location="/home/enough/dev/palm/palmsim61_dbg" />

	<!-- task definitions -->
	<taskdef 
		name="j2mepolish"
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/bin/classes:${polish.home}/import/enough-j2mepolish-build.jar:${polish.home}/lib/jdom.jar:../enough-polish-extensions/bin/classes" 
	/>

			
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant notest j2mepolish" or just "ant" for calling the default-target -->
	
	<target name="test">
		<property name="test" value="true"/>
		<property name="dir.work" value="build/test"/>
	</target>
		
	<target name="deploy">
		<property name="deploy-url" value="http://193.22.164.185:8080/"/>
	</target>

	<target name="init">
	  	<property name="test" value="false"/>
		<property name="deploy-url" value=""/>
		<property name="dir.work" value="build/real"/>
	</target>
    
	<target depends="init" name="j2mepolish">
	<j2mepolish>
	    <!-- general settings -->
		<info 
			license="GPL"
			copyright="Copyright 2006 Enough Software. All rights reserved." 
			description="Example for using a TabbedForm." 
			icon="/icon.png" 
			infoUrl="http://www.j2mepolish.org" 
			jarName="${ nospace(polish.vendor) }-${ nospace(polish.name) }-${polish.locale}-tabbedform.jar" 
			jarUrl="${deploy-url}${polish.jarName}" 
			name="TabbedForm" 
			vendorName="Enough Software" 
			version="1.0.0"
	    />
		<!-- selection of supported devices -->
		<deviceRequirements if="test">
			<requirement name="Identifier" value="${device}"/>
		</deviceRequirements>
		<deviceRequirements unless="test">
			<requirement name="Identifier" value="${devices}" />
		</deviceRequirements>
	    <!-- build settings -->
		<build 
			fullscreen="menu" 
            polishDir="../enough-polish-j2me/source/src" 
            symbols="polish.skipArgumentCheck" 
            usePolishGui="always"
            sourceDir="source/src"
			workDir="${dir.work}"
			>
			<!-- midlets definition -->
			<midlet class="de.enough.polish.sample.tabbedform.TabbedFormDemo" name="TabbedForm"/>

			<!-- project-wide variables - used for preprocessing  -->
			<variables 
				replacePropertiesWithoutDirective="false"
				>
				<variable file="config.properties" />
				<variable name="polish.TextField.useDirectInput" value="true" />
				<variable name="polish.TextField.supportSymbolsEntry" value="true" />
				<variable name="polish.TextField.Symbols" value="&quot;@#()&lt;&gt;&amp;;,.:!/\~$%^*" />
				<variable name="polish.TextField.suppressAddSymbolCommand" value="true" if="polish.key.AddSymbolKey:defined" />
				<variable name="polish.command.entersymbol" value="Add Symbol" />
				<variable name="polish.TextField.allowNativeModeSwitch" value="true" />

				
				<variable name="polish.TextField.useDirectInput" value="true" />
				                   <variable name="polish.rmi.redirects" value="false" />
				                   <variable name="polish.rmi.xmlrpc" value="true" />
				                   <variable name="polish.usesScrollBar" value="true" />
				                   <variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
				<!-- 
				                   <variable name="polish.MenuBar.useMiddleCommand" value="true" />
				                   <variable name="polish.TabbedForm.allowTabSelection" value="true" />			
				-->
				<!--
				<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
				-->
			</variables>
			<!-- obfuscator settings: do not obfuscate when the test-property is true  
			-->
			<obfuscator  name="ProGuard" useDefaultPackage="false" unless="test or polish.blackberry">
				<parameter name="optimize" value="true" />
			</obfuscator>
			<!-- debug/log settings: only include debug setting when the test-property is true -->
			<debug level="info" showLogOnError="true" verbose="true" logTimestamp="true" if="test">
				<filter level="debug" package="de.enough.polish.sample.tabbedform"/>
				<filter level="debug" class="de.enough.polish.ui.TabbedForm"/>
				<filter level="debug" class="de.enough.polish.ui.TabBar"/>
				<!--
				<filter level="debug" class="de.enough.polish.ui.Screen"/>
				<filter level="debug" class="de.enough.polish.ui.ContainerView"/>
				<filter level="debug" class="de.enough.polish.ui.Item"/>
				<filter level="debug" class="de.enough.polish.ui.Container"/>
				<filter level="debug" class="de.enough.polish.ui.ChoiceGroup"/>
				<filter level="debug" class="de.enough.polish.ui.TabbedForm"/>
				<filter level="debug" class="de.enough.polish.ui.Screen"/>
				<filter level="debug" class="de.enough.polish.ui.MenuBar"/>
				-->
			</debug>
			<resources
				dir="resources" 
				defaultexcludes="yes"
				excludes="*.db"
				filterZeroLengthFiles="true"
			 >
				<localization locales="en" />
			</resources>
			
			<packager name="jar">
				<parameter name="verbose" value="false" />
			</packager>
		</build>
		
		<!-- execution of emulator(s) -->
		<emulator if="test" />		
	</j2mepolish>
	</target>

	<target description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml" name="clean">
		<delete dir="build"/>
		<delete dir="dist"/>
	</target>

	<target 
		name="emulator"
		description="Starts the emulator" 
		depends="test, j2mepolish"
		>
	</target>
	
	<target 
		name="cleanbuild"
		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml" 
		depends="clean, j2mepolish"
		>
	</target>
	
</project>
<!-- This file controls the build process.                    -->
<!-- The most important target is the j2mepolish target,      -->
<!-- which controls for what devices the application should   -->
<!-- be created.                                              -->
<!--                                                          -->
<!-- Important: when you have no Wireless Toolkit installed   -->
<!-- you need to define the "preverify"-attribute             -->
<!-- of the <build>-element of the J2ME Polish task.          -->
<!--                                                          -->
<!-- When you call Ant from the command-line, you can         -->
<!-- call "ant test j2mepolish" to skip the obfuscation       -->
<!-- and to build the example for fewer handsets.             -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->

<project 
	name="enough-j2mepolish-tabbedpane" 
	default="j2mepolish">
	
	
<property file="${user.name}.properties" />
	
<!-- The polish.home property should point to the directory   -->
<!-- containing the J2ME Polish installation.                 -->
<property name="polish.home" value="../enough-polish-build/" />

<property file="${polish.home}/global.properties" />

	
	
<!-- Definition of the J2ME Polish task:                      -->

<taskdef name="j2mepolish" 
	classname="de.enough.polish.ant.PolishTask" 
	classpath="${polish.home}:${polish.home}/bin/classes:
			${polish.home}/lib/enough-j2mepolish-build.jar:
			${polish.home}/lib/jdom.jar"
/>
	
	
<!-- build targets, each target can be called via "ant [name]", 
	 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default target -->

<target name="setdeploy" 
	description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
	>
	<property name="deploy-url" value="http://www.company.com/download/" />
</target>
	
<target name="test" 
	description="Call this target first to skip the obfuscation step, e.g. ant test j2mepolish"
	>
	<property name="test" value="true" />
	<property name="dir.work" value="build/test" />
</target>
		
<target name="init">
  	<property name="test" value="false" />
	<property name="dir.work" value="build/real" />
	<property name="deploy-url" value="" />
</target>
 
<!-- In this target the J2ME Polish task is used.             -->
<!-- It has 3 sections:                                       -->
<!--    1. The info-section defines some general information  -->
<!--    2. The deviceRequirements-section chooses the devices -->
<!--       for which the application is optimized.            -->
<!--    3. The build-section controls the actual build        -->
<!--       process.                                           -->	
<target name="j2mepolish" 
		depends="init"
		description="This is the controller for the J2ME build process." 
		>
	<j2mepolish>
		<lifecyclemanager name="mea">
			<parameter name="fallbackDevice" value="Generic/AnyPhone" />
			<parameter name="access" value="pseudoprivate" />
		</lifecyclemanager>
	    <!-- general settings, these settings basically form the JAD-attributes. -->
	    <!-- Have a look at the <jad>-section for setting specialised attributes.
	         You can also define localized attributes in the resources/messages.txt files -->
		<info
			name="TabbedPane"
			version="1.3.4"
			description=""
			vendorName="Enough Software"
			infoUrl="http://www.j2mepolish.org"
			jarName="${polish.vendor}-${polish.name}-${polish.locale}-tabbedpane.jar" 
			jarUrl="${deploy-url}${polish.jarName}"
			copyright="Copyright 2009 Enough Software. All rights reserved."
		/>
		
		<!-- selection of supported devices -->
		<!-- In the test mode the application is build only for the  -->
		<!-- Generic/midp1 phone, but when the test-property is set to false, -->
		<!-- the second deviceRequirements will be used instead. -->
		<deviceRequirements if="test">
			<requirement name="Identifier" value="${device}" />
		</deviceRequirements>
		<deviceRequirements if="!test and device:defined">
			<requirement name="Identifier" value="${device}" />
		</deviceRequirements>
		<deviceRequirements unless="test or device:defined">
			<or>
						<requirement name="Identifier" value="Generic/DefaultColorPhone" />
						<requirement name="Identifier" value="Generic/DefaultGrayPhone" />
						<requirement name="Identifier" value="Generic/JtwiCldc11" />
						<requirement name="Identifier" value="Generic/MediaControlSkin" />
						<requirement name="Identifier" value="Generic/Midp2Cldc11" />
						<requirement name="Identifier" value="Generic/Midp2Cldc11Pointer" />
						<requirement name="Identifier" value="Generic/MppPhone" />
						<requirement name="Identifier" value="Generic/PlainMidp2Cldc11" />
						<requirement name="Identifier" value="Generic/QwertyDevice" />
						<requirement name="Identifier" value="Generic/multi" />
						<requirement name="Identifier" value="Nokia/Series40DP2" />
						<requirement name="Identifier" value="Nokia/Series40DP3" />
						<requirement name="Identifier" value="Nokia/Series40Midp2" />
						<requirement name="Identifier" value="Nokia/Series60E2FP2" />
						<requirement name="Identifier" value="Nokia/Series60E2FP3" />
						<requirement name="Identifier" value="Nokia/Series60E3" />
						<requirement name="Identifier" value="Siemens/x65" />
						<requirement name="Identifier" value="Siemens/x75" />
						<requirement name="Identifier" value="Sony-Ericsson/JavaPlatform2" />
						<requirement name="Identifier" value="Sony-Ericsson/JavaPlatform3" />
						<requirement name="Identifier" value="Sony-Ericsson/JavaPlatform4" />
						<requirement name="Identifier" value="Sony-Ericsson/JavaPlatform5" />
						<requirement name="Identifier" value="Sony-Ericsson/JavaPlatform6" />
						</or>
		</deviceRequirements>
		
	    <!-- build settings -->
		<!-- 
		 -->
		<build
			symbols="ExampleSymbol, AnotherExample"
			fullscreen="menu"
			usePolishGui="true"
			workDir="${dir.work}"
		>
			<!-- midlets definition -->
			<midlet class="de.enough.polish.sample.tabbedpane.TabbedPaneMidlet" name="TabbedPane" />
			
			<!-- project-wide variables - used for preprocessing.  -->
			<!-- You can set localized variables in the resources/messages.txt files as well.  -->
			<variables includeAntProperties="true" >
				<variable name="polish.usePopupItem" value="true" />
				<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
				<variable name="polish.useScrollBar" value="true" />
				<!-- override default settings for BB and Android: -->
				<variable name="polish.MenuBar.Position" value="visible" />
				<variable name="polish.MenuBar.OptionsPosition" value="right" />
				<variable name="polish.MenuBar.OkPosition" value="right" />
				<variable name="polish.command.Cancel" value="Back" />
			</variables>
			<resources
				dir="resources"
				defaultexcludes="yes"
				excludes="readme.txt"
			>
				<root dir="resources/images" />
				<!-- add the localization element for created localized
				     versions of your application: -->
				<localization locales="en_US" unless="test" />
				<localization locales="en_US" if="test" />
			</resources>
			
			<!-- obfuscator settings: do not obfuscate when the test-property is true -->
			<obfuscator name="ProGuard" unless="test || polish.blackberry" > 
				<!--
				You can set additional parameters here, e.g.:
				<parameter name="optimize" value="false" />
				-->
			</obfuscator>
			
			<!-- debug settings: only include debug setting when the test-property is true -->
			<debug if="test or log" showLogOnError="false" verbose="true" level="error">
				<filter pattern="de.enough.polish.ui.*" level="warn" />
				<!--
				<filter class="de.enough.polish.ui.ChoiceGroup" level="debug" />
				<filter package="de.enough.polish.sample.browser" level="debug" />
				<filter class="de.enough.polish.browser.Browser" level="debug" />
				<filter class="de.enough.polish.browser.html.HtmlBrowser" level="debug" />
				<filter class="de.enough.polish.ui.containerviews.MIDP2LayoutView" level="debug" />
				<filter class="de.enough.polish.ui.ContainerView" level="debug" />
				<filter class="de.enough.polish.ui.Container" level="debug" />
				-->
			</debug>
			
			<!-- user defined JAD attributes can also be used: -->
			<jad>
				<attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
			</jad>	
			
			
		</build>
		
		<!-- execution of emulator(s) -->
		<emulator
			wait="true"
			securityDomain="trusted"
			enableProfiler="false"
			enableMemoryMonitor="false"
			enableNetworkMonitor="false"
			if="test and not debug"
			>
		</emulator>
	
		<emulator
			wait="true"
			securityDomain="trusted"
			enableProfiler="false"
			enableMemoryMonitor="false"
			enableNetworkMonitor="false"
			if="debug">
			<debugger port="8000" />
		</emulator>
		
	</j2mepolish>
</target>

<target name="emulator" depends="test,j2mepolish" />

<target name="clean" 
  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
	<delete dir="build" />
	<mkdir dir="dist" />
	<delete dir="dist" includes="**/*" />
</target>

	<target name="cleanbuild" depends="clean,j2mepolish" />

</project>
<!-- This file controls the build process.                    -->
<!-- The most important target is the j2mepolish target,      -->
<!-- which controls for what devices the application should   -->
<!-- be created.                                              -->
<!--                                                          -->
<!-- Important: when you have no Wireless Toolkit installed   -->
<!-- you need to define the "preverify"-attribute             -->
<!-- of the <build>-element of the J2ME Polish task.          -->
<!--                                                          -->
<!-- When you call Ant from the command-line, you can         -->
<!-- call "ant test j2mepolish" to skip the obfuscation       -->
<!-- and to build the example for fewer handsets.             -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->

<project 
	name="enough-j2mepolish-example" 
	default="j2mepolish">
	
	
<property file="${user.name}.properties" />
<property file="midlet.properties" />
	
<!-- The polish.home property should point to the directory   -->
<!-- containing the J2ME Polish installation.                 -->

<property name="polish.home" value="../enough-polish-build" />
<property file="${polish.home}/global.properties" />

<!-- The wtk.home property should point to the directory      -->
<!-- containing the Wireless Toolkit.                         -->




<!-- The siemens.home, nokia.home and motorola.home-          -->
<!-- properties can be necessary when their emulators         -->
<!-- should be started.                                       -->
<!-- The directory which contains the Siemens-SMTK
	<property name="siemens.home" value="C:\siemens" />
-->
<!-- The directory which contains the Nokia-emulators
	<property name="nokia.home" value="C:\Nokia" />
-->
<!-- The path to the Sony-Ericsson SDK
	<property name="sony-ericsson.home" value="C:\SonyEricsson\J2ME_SDK" />
-->
<!-- The directory which contains the Motorola-emulators
	<property name="motorola.home" value="C:\Program Files\Motorola\SDK v4.3 for J2ME" />
-->

	
<property name="mpp.home" value="/Applications/mpp-sdk" />
	
	
	
<!-- Definition of the J2ME Polish task:                      -->

<taskdef name="j2mepolish" 
	classname="de.enough.polish.ant.PolishTask" 
	classpath="${polish.home}/bin/classes:${polish.home}/lib/enough-j2mepolish-build.jar:${polish.home}/lib/jdom.jar"/>

	
<!-- build targets, each target can be called via "ant [name]", 
	 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default target -->

<target name="setdeploy" 
	description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
	>
	<property name="deploy-url" value="http://www.company.com/download/" />
</target>
	
<target name="test" 
	description="Call this target first to skip the obfuscation step, e.g. ant test j2mepolish"
	>
	<property name="test" value="true" />
	<property name="dir.work" value="build/test" />
</target>
		
<target name="init">
  	<property name="test" value="false" />
	<property name="dir.work" value="build/real" />
	<property name="deploy-url" value="" />
</target>
 
<!-- In this target the J2ME Polish task is used.             -->
<!-- It has 3 sections:                                       -->
<!--    1. The info-section defines some general information  -->
<!--    2. The deviceRequirements-section chooses the devices -->
<!--       for which the application is optimized.            -->
<!--    3. The build-section controls the actual build        -->
<!--       process.                                           -->	
<target name="j2mepolish" 
		depends="init"
		description="This is the controller for the J2ME build process." 
		>
	<j2mepolish>
	    <!-- general settings, these settings basically form the JAD-attributes. -->
	    <!-- Have a look at the <jad>-section for setting specialised attributes.
	         You can also define localized attributes in the resources/messages.txt files -->
		<info
			name="J2ME Polish"
			version="1.3.4"
			description=""
			vendorName="Enough Software"
			infoUrl="http://www.j2mepolish.org"
			icon="icon.png"
			jarName="${polish.vendor}-${polish.name}-${polish.locale}-table.jar" 
			jarUrl="${deploy-url}${polish.jarName}"
			copyright="Copyright 2009 Enough Software. All rights reserved."
			deleteConfirm="Do you really want to kill me?" 
		/>
		
		<!-- selection of supported devices -->
		<!-- In the test mode the application is build only for the  -->
		<!-- Generic/midp1 phone, but when the test-property is set to false, -->
		<!-- the second deviceRequirements will be used instead. -->
		<deviceRequirements if="test">
			<requirement name="Identifier" value="${device}" />
		</deviceRequirements>
		<deviceRequirements unless="test">
			<requirement name="Identifier" value="${device}" />
		</deviceRequirements>
		<deviceRequirements if="false" unless="test and !device:defined">
			<or>
						<requirement name="Identifier" value="Generic/DefaultColorPhone" />
						<requirement name="Identifier" value="Generic/DefaultGrayPhone" />
						<requirement name="Identifier" value="Generic/JtwiCldc11" />
						<requirement name="Identifier" value="Generic/MediaControlSkin" />
						<requirement name="Identifier" value="Generic/Midp2Cldc11" />
						<requirement name="Identifier" value="Generic/Midp2Cldc11Pointer" />
						<requirement name="Identifier" value="Generic/MppPhone" />
						<requirement name="Identifier" value="Generic/PlainMidp2Cldc11" />
						<requirement name="Identifier" value="Generic/QwertyDevice" />
						<requirement name="Identifier" value="Generic/multi" />
						<requirement name="Identifier" value="Nokia/Series40DP2" />
						<requirement name="Identifier" value="Nokia/Series40DP3" />
						<requirement name="Identifier" value="Nokia/Series40Midp2" />
						<requirement name="Identifier" value="Nokia/Series60E2FP2" />
						<requirement name="Identifier" value="Nokia/Series60E2FP3" />
						<requirement name="Identifier" value="Nokia/Series60E3" />
						<requirement name="Identifier" value="Siemens/x65" />
						<requirement name="Identifier" value="Siemens/x75" />
						<requirement name="Identifier" value="Sony-Ericsson/JavaPlatform2" />
						<requirement name="Identifier" value="Sony-Ericsson/JavaPlatform3" />
						<requirement name="Identifier" value="Sony-Ericsson/JavaPlatform4" />
						<requirement name="Identifier" value="Sony-Ericsson/JavaPlatform5" />
						<requirement name="Identifier" value="Sony-Ericsson/JavaPlatform6" />
						</or>
		</deviceRequirements>
		
	    <!-- build settings -->
		<!-- 
		 -->
		<build
			symbols="ExampleSymbol, AnotherExample"
			fullscreen="menu"
			usePolishGui="true"
			workDir="${dir.work}"
			polishDir="../enough-polish-j2me/source/src"
		>
		    
			<!-- midlets definition -->
			<!-- <midlet class="de.enough.polish.example.MenuMidlet" name="Example" /> -->
			
			<!-- project-wide variables - used for preprocessing.  -->
			<!-- You can set localized variables in the resources/messages.txt files as well.  -->
			<variables includeAntProperties="true" >
				<!-- example variables:
				In your Java-code you can use the following snipet to use this variable:
				//#= private static final String UPDATE_URL = "${ update-url }";
				You can change the title of the sample application with the "title"-var.
				-->
				<variable name="update-url" value="http://www.enough.de/update" />
				<variable name="title" value="J2ME Polish" />
				<variable name="polish.useScrollBar" value="true" />
				<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
				<variable name="polish.TextField.useDirectInput" value="true" />
			</variables>
			<!-- Here you can set the dir attribute to "resources2" for an alternative design. -->
			<resources
				dir="resources"
				defaultexcludes="yes"
				excludes="readme.txt"
			>
				<!-- you can add resources based on complex criterias: 
				<fileset 
					dir="resources/multimedia" 
					includes="*.wav" 
					if="polish.audio.wav" 
				/>
				<fileset 
					dir="resources/multimedia" 
					includes="*.mid" 
					if="polish.audio.midi and not polish.audio.wav" 
				/>
				-->
				<!-- add the localization element for created localized
				     versions of your application: -->
				<localization locales="de_DE, en_US" unless="test" />
				<localization locales="en_US" if="test" />
			</resources>
			
			<!-- obfuscator settings: do not obfuscate when the test-property is true -->
			<obfuscator name="ProGuard" unless="test || polish.blackberry" >
				<!--
				You can set additional parameters here, e.g.:
				<parameter name="optimize" value="false" />
				-->
			</obfuscator>
			
			<!-- debug settings: only include debug setting when the test-property is true -->
			<debug if="test" showLogOnError="true" verbose="true" level="error">
				<filter pattern="de.enough.polish.example.*" level="debug" />
				<filter pattern="de.enough.polish.ui.*" level="warn" />
			</debug>
			
			<!-- user defined JAD attributes can also be used: -->
			<jad>
				<attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
			</jad>	
			
			
		</build>
		
		<!-- execution of emulator(s) -->
		<emulator
			wait="true"
			securityDomain="trusted"
			enableProfiler="false"
			enableMemoryMonitor="false"
			enableNetworkMonitor="false"
			if="test and not debug"
			>
		</emulator>
	
		<emulator
			wait="false"
			securityDomain="trusted"
			enableProfiler="false"
			enableMemoryMonitor="false"
			enableNetworkMonitor="false"
			if="debug">
			<debugger port="8000" />
		</emulator>
		
	</j2mepolish>
</target>

<target name="emulator" depends="test,j2mepolish" />

<target name="clean" 
  		description="allows a clean build. You should call [ant clean] whenever you made changes to the device database.">
	<delete dir="build" />
	<delete dir="dist" />
</target>

	<target name="cleanbuild" depends="clean,j2mepolish" />

</project>
<!-- This file controls the build process.                    -->
<!-- The most important target is the j2mepolish target,      -->
<!-- which controls for what devices the application should   -->
<!-- be created.                                              -->
<!--                                                          -->
<!-- Important: when you have no Wireless Toolkit installed   -->
<!-- you need to define the "preverify"-attribute             -->
<!-- of the <build>-element of the J2ME Polish task.          -->
<!--                                                          -->
<!-- When you call Ant from the command-line, you can         -->
<!-- call "ant test j2mepolish" to skip the obfuscation       -->
<!-- and to build the example for fewer handsets.             -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->

<project 
	name="enough-j2mepolish-wikipedia" 
	default="j2mepolish">
	
	
<property file="${user.name}.properties" />
<property file="midlet.properties" />
<property name="device" value="Generic/AnyPhone" />
<property name="devices" value="${device}" />
	
<!-- The polish.home property should point to the directory   -->
<!-- containing the J2ME Polish installation.                 -->

<property name="polish.home" value="../enough-polish-build/" />

<!-- The wtk.home property should point to the directory      -->
<!-- containing the Wireless Toolkit.                         -->




<!-- The siemens.home, nokia.home and motorola.home-          -->
<!-- properties can be necessary when their emulators         -->
<!-- should be started.                                       -->
<!-- The directory which contains the Siemens-SMTK
	<property name="siemens.home" value="C:\siemens" />
-->
<!-- The directory which contains the Nokia-emulators
	<property name="nokia.home" value="C:\Nokia" />
-->
<!-- The path to the Sony-Ericsson SDK
	<property name="sony-ericsson.home" value="C:\SonyEricsson\J2ME_SDK" />
-->
<!-- The directory which contains the Motorola-emulators
	<property name="motorola.home" value="C:\Program Files\Motorola\SDK v4.3 for J2ME" />
-->
	
	
<!-- Definition of the J2ME Polish task:                      -->

<taskdef name="j2mepolish" 
	classname="de.enough.polish.ant.PolishTask" 
	classpath="${polish.home}:${polish.home}/bin/classes:${polish.home}/lib/enough-j2mepolish-build.jar:${polish.home}/lib/jdom.jar"/>

	
<!-- build targets, each target can be called via "ant [name]", 
	 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default target -->

<target name="setdeploy" 
	description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
	>
	<property name="deploy-url" value="http://www.company.com/download/" />
</target>
	
<target name="test" 
	description="Call this target first to skip the obfuscation step, e.g. ant test j2mepolish"
	>
	<property name="test" value="true" />
	<property name="dir.work" value="build/test" />
</target>
		
<target name="init">
  	<property name="test" value="false" />
	<property name="dir.work" value="build/real" />
	<property name="deploy-url" value="" />
</target>
 
<!-- In this target the J2ME Polish task is used.             -->
<!-- It has 3 sections:                                       -->
<!--    1. The info-section defines some general information  -->
<!--    2. The deviceRequirements-section chooses the devices -->
<!--       for which the application is optimized.            -->
<!--    3. The build-section controls the actual build        -->
<!--       process.                                           -->	
<target name="j2mepolish" 
		depends="init"
		description="This is the controller for the J2ME build process." 
		>
	<j2mepolish>
		  <lifeCycleManager name="mea">
		    <parameter name="fallbackDevice" value="Generic/AnyPhone" />
		    <parameter name="access" value="public" />
		  </lifeCycleManager>

	    <!-- general settings, these settings basically form the JAD-attributes. -->
	    <!-- Have a look at the <jad>-section for setting specialised attributes.
	         You can also define localized attributes in the resources/messages.txt files -->
		<info
			name="mWikipedia"
			version="1.3.4"
			description=""
			vendorName="Enough Software"
			infoUrl="http://www.j2mepolish.org"
			icon="icon.png"
			jarName="${polish.vendor}-${polish.name}-${polish.locale}-wikipedia.jar" 
			jarUrl="${deploy-url}${polish.jarName}"
			copyright="Copyright 2008 Enough Software. All rights reserved."
		/>
		
		<!-- selection of supported devices -->
		<!-- In the test mode the application is build only for the  -->
		<!-- Generic/midp1 phone, but when the test-property is set to false, -->
		<!-- the second deviceRequirements will be used instead. -->
		<deviceRequirements if="test">
			<requirement name="Identifier" value="${device}" />
		</deviceRequirements>
		<deviceRequirements if="!test and device:defined">
			<requirement name="Identifier" value="${device}" />
		</deviceRequirements>
		<deviceRequirements unless="test">
			<requirement name="Identifier" value="${devices}" />
		</deviceRequirements>
		
	    <!-- build settings -->
		<!-- 
		 -->
		<build
			fullscreen="menu"
			usePolishGui="true"
			workDir="${dir.work}"
		>
			
			
			<libraries>
				<!-- sample library 
				<library file="lib/myclasses.jar" />
				-->
			</libraries>
			<!-- midlets definition -->
			<midlet class="de.enough.polish.sample.wikipedia.WikipediaMidlet" name="Wikipedia" />
			
			<!-- project-wide variables - used for preprocessing.  -->
			<!-- You can set localized variables in the resources/messages.txt files as well.  -->
			<variables includeAntProperties="true" >
				<!-- example variables:
				In your Java-code you can use the following snipet to use this variable:
				//#= private static final String UPDATE_URL = "${ update-url }";
				You can change the title of the sample application with the "title"-var.
				-->
				<variable name="update-url" value="http://www.enough.de/update" />
				<variable name="title" value="J2ME Polish" />
				<variable name="polish.css.view-type" value="true" />
				<variable name="polish.Browser.MaxRedirects" value="5" />
				<variable name="polish.Browser.Gzip" value="false" />
				<variable name="polish.Browser.PaintDownloadIndicator" value="true" />
				<variable name="polish.Browser.MemorySaver" value="true" />
				<variable name="polish.TextField.useDirectInput" value="true" />
				<variable name="polish.TextField.supportSymbolsEntry" value="true" />
				<variable name="polish.TextField.includeInputInfo" value="true" />
				<variable name="polish.MenuBar.useExtendedMenuBar" value="true" />
				<variable name="polish.useScrollBar" value="true" />
				<variable name="polish.ScreenInfo.enable" value="false" />
			</variables>
			<!-- Here you can set the dir attribute to "resources2" for an alternative design. -->
			<resources
				dir="resources/base"
				defaultexcludes="yes"
				excludes="readme.txt"
			>
				<root dir="resources/base/images" />
				<root dir="resources/base/sounds" />
				<root dir="resources/base/i18n" />
				<!-- add the localization element for created localized
				     versions of your application: -->
				<localization dynamic="true" unless="test" >
					<locale name="en" />
					<locale name="de" />
				</localization>
				<localization dynamic="false" if="test" >
					<locale name="en" />
				</localization>
			</resources>
			
			
			<!-- obfuscator settings: do not obfuscate when the test-property is true -->
			<obfuscator name="ProGuard" useDefaultPackage="false" unless="test || polish.blackberry" >
				<!--
				You can set additional parameters here, e.g.:
				<parameter name="optimize" value="false" />
				-->
			</obfuscator>
			
			<!-- debug settings: only include debug setting when the test-property is true -->
			<debug if="test" showLogOnError="true" verbose="true" level="error">
				<filter pattern="de.enough.polish.example.*" level="debug" />
				<filter pattern="de.enough.polish.ui.*" level="warn" />
			</debug>
			
			<!-- user defined JAD attributes can also be used: -->
			<jad>
				<attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
				<!-- allow to runt the app as a background application: -->
				<attribute name="SEMC-StandbyApplication" value="Y" if="polish.vendor.Sony-Ericsson" />
			</jad>	
			
			
		</build>
		
		<!-- execution of emulator(s) -->
		<emulator
			wait="true"
			securityDomain="trusted"
			enableProfiler="false"
			enableMemoryMonitor="false"
			enableNetworkMonitor="false"
			if="test and not debug"
			>
		</emulator>
	
		<emulator
			wait="true"
			securityDomain="trusted"
			enableProfiler="false"
			enableMemoryMonitor="false"
			enableNetworkMonitor="false"
			if="debug">
			<debugger port="8000" />
		</emulator>
		
	</j2mepolish>
</target>

<target name="emulator" depends="test,j2mepolish" />

<target name="clean" 
  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
	<delete dir="build" />
	<delete dir="dist" />
</target>

	<target name="cleanbuild" depends="clean,j2mepolish" />

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="j2mepolish" name="enough-polish-example">
	
<!-- task definitions -->
<!-- classpath="import/enough-j2mepolish-build.jar:import/jdom.jar:import/proguard.jar" -->
	<!-- read user properties first -->
	<property file="${user.name}.properties"/>
	<property name="device" value="Generic/multi" />
	<property name="wtk.home" value="/home/enough/dev/WTK2.2"/>
	<!-- The polish.home property should point to the directory   -->
	<!-- containing the J2ME Polish installation.                 -->
	<property name="polish.home" value="/home/enough/workspace/enough-polish-build"/>
	<property name="nokia.home" value="/home/enough/dev/Nokia" />
	<property name="remotebuild" value="true" />
	
	<taskdef 
		classname="de.enough.polish.ant.PolishTask" 
		classpath="${polish.home}/bin/classes:${polish.home}/lib/jdom.jar" 
		name="j2mepolish"/>

			
	<!-- build targets, each target can be called via "ant [name]", 
		 e.g. "ant clean", "ant notest j2mepolish" or just "ant" for calling the default-target -->
	
	<target name="test">
		<property name="test" value="true"/>
		<property name="dir.work" value="build/test" />
	</target>
		
	<target name="deploy">
		<property name="deploy-url" value="http://dl.j2mepolish.org"/>
	</target>
			
	<target name="init">
	  	<property name="test" value="false"/>
		<property name="deploy-url" value=""/>
		<property name="dir.work" value="build/real" />
	</target>
    
	<target depends="init" name="j2mepolish">
		<j2mepolish>
			<lifeCycleManager name="mea" unless="test">
			    <parameter name="fallbackDevice" value="Generic/multi" />
			    <parameter name="tags" value="test" />
			    <parameter name="access" value="pseudoprivate" />
		  </lifeCycleManager>
			<!-- general settings -->
					<info 
						copyright="Copyright 2004 - 2007 Grimo Software, Enough Software and Mark Schrijver. All rights reserved." 
						description="Extracts information from MIDP capable devices." 
						icon="icon.png" 
						infoUrl="www.grimo-software.com" 
						jarName="sysinfo.jar" 
						jarUrl="${deploy-url}${polish.jarName}" 
						name="MIDPSysInfo" 
						vendorName="Enough Software" 
						version="0.9.10"
						profile="MIDP-1.0" 
						configuration="CLDC-1.0" 
					/>
					<!-- Enough Software and Mark Schrijver	-->
					<!-- selection of supported devices -->
					<deviceRequirements>
						<requirement name="Identifier" value="${device}" />
					</deviceRequirements>
					<!-- build settings -->
					<build polishDir="../enough-polish-j2me/source/src" 
						usePolishGui="false" 
						workDir="${dir.work}" 
						sourceDir="source/src"
					>
						<sources>
							<source dir="source/src" />
						</sources>
						
						<!-- midlets definition -->
						<midlet class="de.enough.sysinfo.MIDPSysInfoMIDlet" name="MIDP SysInfo" />
						<resources dir="resources">
							<localization dynamic="false" defaultLocale="en" locales="en" />
						</resources>
						<jad>
							<filter>
									MIDlet-Name, MIDlet-Version, 
									MIDlet-Vendor, MIDlet-Jar-URL, MIDlet-Jar-Size, 
									MIDlet-Description?, MIDlet-Icon?, MIDlet-Info-URL?,
									MIDlet-Data-Size?, MIDlet-*, *
								</filter>
						</jad>
						<manifestFilter>
								Manifest-Version, MIDlet-Name, 
								MIDlet-1, MIDlet-2?, MIDlet-3?, MIDlet-4?, MIDlet-5?, 
								MIDlet-Version, MIDlet-Vendor,
								MicroEdition-Profile, MicroEdition-Configuration,
								MIDlet-Data-Size?
							</manifestFilter>
						<!--
							unused manifest attributes:
								MIDlet-Description?, MIDlet-Icon?, MIDlet-Info-URL?,
							-->
						<!-- obfuscator settings: do not obfuscate when the test-property is true -->
						<obfuscator name="ProGuard" useDefaultPackage="false" unless="test or polish.vendor == BlackBerry">
							<keep class="com.grimo.me.product.midpsysinfo.NokiaFullCanvasTest" />
							<keep class="com.grimo.me.product.midpsysinfo.Midp2FullCanvasTest" />
						</obfuscator>
						<!-- debug settings: only include debug setting when the test-property is true -->
						<debug level="error" showLogOnError="true" verbose="true" unless="test">
							<filter level="debug" package="com.grimo.me.product.midpsysinfo" />
						</debug>
						<debug level="debug" showLogOnError="true" verbose="true" if="test">
						
						</debug>
					</build>
		<!-- execution of emulator(s) -->
		<emulator
			wait="true"
			trace="class"
			if="test"
			/>		
	</j2mepolish>
</target>


<target name="clean"
	description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml"
	>
	<delete dir="build"/>
	<delete dir="dist"/>
</target>
	
<target name="cleanbuild"
		description="Creates a clean build."
		depends="clean, j2mepolish"
/>
	
<target name="emulator"
	description="Builds and starts the emulator" 
	depends="test, j2mepolish"
/>


</project>
<project 
	name="enough-webprocessor" 
	default="webprocessor">
	<property name="polish.home" value="../enough-polish-build" />
	
	<taskdef name="webprocessor" classname="de.enough.webprocessor.WebProcessorTask" classpath="../enough-polish-build/build/bootstrapclasses:../enough-polish-build/build/bootstrapwebsite:../enough-webprocessor/build:../enough-webprocessor/bin/classes:${polish.home}/bin/website:${polish.home}/bin/classes:${polish.home}/lib/jdom.jar:${polish.home}/dist/enough-j2mepolish-client.jar:${polish.home}/import/enough-j2mepolish-client.jar:${polish.home}/import/cldc-1.1.jar:${polish.home}/import/midp-2.0.jar:${polish.home}/import/mmapi.jar" />
	<taskdef name="deviceExport" classname="de.enough.polish.ant.HtmlExporterTask" classpath="../enough-polish-build/build/bootstrapclasses:../enough-polish-build/bin/classes:../enough-polish-build/lib/jdom.jar"/>
	<!-- build targets, each target can be called via "ant [name]", e.g. "ant clean" -->
	
	<property file="../enough-polish-build/version.properties" />
	<property name="Version" value="2.2" />
		<!--
	-->
	<property name="JavaDocVersion" value="${Version}" />
	<property name="symbols" value="" />
	<!--
	<property name="BetaVersion" value="2.0-beta3" />
	<property name="symbols" value="isBetaAvailable" />
		<property name="symbols" value="isBetaAvailable" />
	-->
		
	<target name="clean">
		<property name="clean" value="true" />
	</target>
		
	<target name="init">
		<!-- Create the time stamp -->
	    <tstamp/>
	    <!-- Create distribution dirs -->
		<mkdir dir="dist" />
		<property name="clean" value="false" />
	</target>
	
	<target name="javadoc" description="builds the javadoc directory">
		<mkdir dir="dist/javadoc/j2me" />
		<mkdir dir="dist/javadoc/build" />
		<javadoc 
		    	destdir="dist/javadoc/j2me" 
		    	access="protected" 
		    	use="true" 
		    	notree="false" 
		    	nonavbar="false" 
		    	noindex="false" 
		    	splitindex="true" 
		    	author="true" 
		    	version="true" 
		    	nodeprecatedlist="false" 
		    	nodeprecated="false" 
		    	packagenames="de.enough.*" 
		    	sourcepath="../enough-polish-j2me/source/src" 
		    	classpath="../enough-polish-j2me/bin/classes:import/midp2.jar" 
		    	doctitle="The J2ME Polish Client Framework, Version ${JavaDocVersion}"
		/>	
		<javadoc 
		    	destdir="dist/javadoc/build" 
		    	access="public" 
		    	use="true" 
		    	notree="false" 
		    	nonavbar="false" 
		    	noindex="false" 
		    	splitindex="true" 
		    	author="true" 
		    	version="true" 
		    	nodeprecatedlist="false" 
		    	nodeprecated="false" 
		    	packagenames="de.enough.*" 
		    	sourcepath="../enough-polish-build/source/src" 
		    	classpath="../enough-polish-build/bin/classes:import/jdom.jar:import/ant.jar" 
		    	doctitle="The J2ME Polish Build Framework, Version ${JavaDocVersion}"
		/>	
	</target>
		
	<target name="device-export" description="exports the device database">
			<deviceExport />
			<webprocessor 
				srcdir="../enough-polish-website/tmp"
			 	includedir="../enough-polish-website/site/includes"
				destdir="dist"
				clean="false"
				>
				<variable name="PolishVersion" value="${Version}" />
				<variable name="LatestDownload" value="j2mepolish_${Version}.html" />
				<variable name="Author" value="Robert Virkus" />
				<variable name="basedir" value="" />
				<variable name="javadocdir" value="" />
				<variable name="index.h1" value="h1index" />
				<variable name="index.h2" value="h2index" />
				<variable name="index.h3" value="h3index" />
				<variable name="index.h4" value="h4index" />
			</webprocessor>
	</target>
		
	<target name="webprocessor" description="just builds the website without JavaDoc/devicedb"	>
		<webprocessor 
			srcdir="site/source"
		 	includedir="site/includes"
			destdir="dist"
			clean="${clean}"
			update="atoz.html, documentation.html, index.html, news.html, download.html, docs/install.html"
			keywordsFile="keywords.txt"
			symbols="${symbols}"
			>
			<variable name="PolishVersion" value="${Version}" />
			<variable name="BetaVersion" value="${BetaVersion}" />
			<variable name="LatestDownload" value="j2mepolish-${Version}.html" />
		 	<variable name="LatestBetaDownload" value="j2mepolish-${BetaVersion}.html" />
			<variable name="Author" value="Robert Virkus" />
			<variable name="basedir" value="" />
			<variable name="javadocdir" value="" />
			<variable name="newsbasedir" value="" />
			<variable name="index.h1" value="h1index" />
			<variable name="index.h2" value="h2index" />
			<variable name="index.h3" value="h3index" />
			<variable name="index.h4" value="h4index" />
			<variable name="index.h5" value="h5index" />
			<directive name="cssattributes" class="de.enough.polish.website.CssDirectiveHandler" />
			<directive name="cssmappings" class="de.enough.polish.website.CssMappingsDirectiveHandler" />
		</webprocessor>
	</target>
	
	<target name="website" depends="javadoc, device-export, webprocessor"	>
			<echo message="www.j2mepolish.org created." />
	</target>
		
	<target name="cleanbuild" depends="clean, website" description="Builds a clean website.">
		<copy file="tour-cn.html" todir="dist/docs" overwrite="true" />
	</target>


</project>
<project name="enough-webprocessor" default="bin-dist">

	<target name="init">
    		<tstamp/>
		<property name="builddir" value="build" />
		<property name="distdir" value="dist" />
	</target>

	<target name="compile" depends="init">
		<mkdir dir="${builddir}" />
		<javac srcdir="source/src" destdir="${builddir}" source="1.4" target="1.4" debug="true" />
	</target>

	<!-- Creates the Source Code documentation -->
	<target name="javadoc">
	    <javadoc 
	    	destdir="doc" 
	    	access="public" 
	    	use="true" 
	    	notree="false" 
	    	nonavbar="false" 
	    	noindex="false" 
	    	splitindex="true" 
	    	author="true" 
	    	version="true" 
	    	nodeprecatedlist="false" 
	    	nodeprecated="false" 
	    	packagenames="*" 
	    	sourcepath="source/src" 
	    	classpath="bin/classes:import/ant.jar:import/junit.jar" 
	    />
	 </target>

	<target name="bin-dist" depends="compile">
		<mkdir dir="${distdir}" />
		<jar destfile="${distdir}/enough-webprocessor.jar"
			basedir="${builddir}"
			includes="**/*.class"
			index="true"
		>
		</jar>
	</target>
	
	<target name="deploy" depends="bin-dist">
		<copy file="${distdir}/enough-webprocessor.jar" todir="../enough-polish-build/lib"  />
	</target>
			
	<target name="clean" depends="init">
		<delete dir="${builddir}" />
		<delete dir="${distdir}" />
	</target>

</project>
