<!--  build JAR libraty -->
<project name="OsmAnd-core" default="build" basedir=".">

	<property file="local.properties" />

	<property name="src.dir" value="src" />
	<property name="src.absolute.dir" location="${src.dir}" />
	<property name="protobuf.src" location="protobuf-src" />
	<property name="bin.dir" value="bin" />
	<property name="bin.absolute.dir" location="${bin.dir}" />
	<property name="lib.dir" value="libs" />
	<property name="lib.absolute.dir" location="${lib.dir}" />
	<property name="java.encoding" value="UTF-8" />

	<path id="build.path">
		<fileset dir="${lib.absolute.dir}">
			<include name="*.jar" />
		</fileset>
	</path>

	<target name="-dirs">
		<mkdir dir="${bin.absolute.dir}" />
	</target>

	<target name="clean">
		<delete dir="${bin.absolute.dir}" />
		<delete file="OsmAnd-core.jar" />
	</target>


	<target name="copy_resources">
		<copy todir="${src.absolute.dir}/net/osmand/router/">
			<fileset dir="../../resources/routing/">
				<include name="*.xml" />
			</fileset>
		</copy>
		<copy todir="${src.absolute.dir}/net/osmand/render/">
			<fileset dir="../../resources/rendering_styles/">
				<include name="*.xml" />
			</fileset>
		</copy>
		<copy todir="${src.absolute.dir}/net/osmand/osm/">
			<fileset dir="../../resources/obf_creation/">
				<include name="rendering_types.xml" />
			</fileset>
		</copy>
		<copy todir="${src.absolute.dir}/net/osmand/map/">
			<fileset dir="../../resources/countries-info/">
				<include name="countries.reginfo" />
                <include name="regions.ocbf" />
			</fileset>
		</copy>
	</target>


	<target name="patch-protobuf">
	    <copy file="${protobuf.src}/com/google/protobuf/CodedInputStream.java"
	         tofile="${protobuf.src}/com/google/protobuf/CodedInputStreamRAF.java" overwrite="yes">
	    </copy>
	    <copy todir="${src.absolute.dir}">
			<fileset dir="${protobuf.src}"/>
		</copy> 
		<patch patchfile="protobuf.patch" dir=".."/>
	</target>
	<target name="compile" depends="-dirs,copy_resources">
		<copy todir="${bin.absolute.dir}">
			<fileset dir="${src.absolute.dir}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<javac srcdir="${src.absolute.dir}" destdir="${bin.absolute.dir}" encoding="${java.encoding}" classpathref="build.path" debug="on" source="1.6">
			<include name="**/*.java" />
			<exclude name="net/osmand/plus/**" />
		</javac>

	</target>

	<target name="native-libs-jar" depends="compile">
		<exec command="bash collect_libs.sh" failonerror="true">
		</exec>
		<antcall target="jar" />
	</target>

	<target name="jar" depends="compile">
		<manifestclasspath property="lib.list" jarfile="OsmAnd-core.jar">
			<classpath refid="build.path" />
		</manifestclasspath>
		<echo>list is  ${lib.list}</echo>

		<delete file="OsmAnd-core.jar" />
		<delete file="MANIFEST.MF" />
		<manifest file="MANIFEST.MF">
			<attribute name="Built-By" value="${user.name}" />
			<attribute name="Main-Class" value="net.osmand.swing.OsmExtractionUI" />
			<attribute name="Class-Path" value="${lib.list}" />
		</manifest>

		<jar destfile="OsmAnd-core.jar" manifest="MANIFEST.MF">
			<fileset dir="${bin.absolute.dir}">
				<include name="**/*" />
			</fileset>
			<fileset dir="${src.absolute.dir}">
				<include name="**/*.java" />
			</fileset>
		</jar>
		<jar destfile="OsmAnd-core-android.jar" manifest="MANIFEST.MF">
		      <fileset dir="${bin.absolute.dir}">
	                <include name="**/*.class" />
	                <exclude name="**/PlatformUtil*"/>
	            </fileset>
	            <fileset dir="${src.absolute.dir}">
	                <include name="**/*.java" />
	                <exclude name="**/PlatformUtil*"/>
	            </fileset>
	        </jar>


		<delete file="MANIFEST.MF" />
	</target>

	<target name="build" depends="jar">
	</target>
</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="OsmAnd" default="help">

	<property file="local.properties" />
	<property file="ant.properties" />
	<loadproperties srcFile="project.properties" />

	<!-- quick check on sdk.dir -->
	<fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through an env var"
            unless="sdk.dir"
    />

	<property name="use.dir" value="../OsmAnd-java/src" />
	<property name="use.absolute.dir" location="${use.dir}" />
	<property name="src.absolute.dir" location="src" />
	<property name="base.dir" location="." />


	<target name="copy_resources">
		<copy todir="assets">
			<fileset dir="../../resources/" >
				<include name="specialphrases/**"/>
				<include name="voice/**/*.p"/>
			</fileset>
		</copy>
		<copy todir="res/">
			<fileset dir="../../resources/rendering_styles/style-icons/"  >
				<include name="**/*"/>
			</fileset>
		</copy>
		<copy todir="${src.absolute.dir}/net/osmand/router/">
			<fileset dir="../../resources/routing/" >
				<include name="*.xml"/>
			</fileset>
		</copy>
		<copy todir="${src.absolute.dir}/net/osmand/render/">
			<fileset dir="../../resources/rendering_styles/" >
				<include name="*.xml"/>
			</fileset>
		</copy>
		<copy todir="${src.absolute.dir}/net/osmand/osm/">
			<fileset dir="../../resources/obf_creation/" >
				<include name="rendering_types.xml"/>
			</fileset>
		</copy>
		<copy todir="${src.absolute.dir}/net/osmand/map/">
			<fileset dir="../../resources/countries-info/" >
                <include name="regions.ocbf"/>
			</fileset>
		</copy>
	</target>




	<!-- Extra target -->
	<target name="-pre-build" depends="copy_resources,fix_apostrophe_issues">
		<if>
			<condition>
				<isset property="versionFeatures" />
			</condition>
			<then>
				<replaceregexp file="res/values/no_translate.xml" match='versionFeatures"&gt;(.*)&lt;' replace='versionFeatures"&gt;${versionFeatures}&lt;' byline="true" />
			</then>
		</if>
		<if>
			<condition>
				<isset property="net.osmand" />
			</condition>
			<then>
				<replaceregexp file="AndroidManifest.xml" match='"@drawable/icon"' replace='"@drawable/icon_free"' byline="true" />
				<replaceregexp file="AndroidManifest.xml" match='package="net.osmand.plus"' replace='package="net.osmand"' byline="true" />
				<replaceregexp file="AndroidManifest.xml" match='android:process="net.osmand.plus"' replace='android:process="net.osmand"' byline="true" />
				<replaceregexp file="res/values/no_translate.xml" match='"app_name"&gt;(.*)&lt;' replace='"app_name"&gt;OsmAnd&lt;' byline="true" />
				<replaceregexp file="res/layout/search_address.xml" match='net.osmand.plus' replace='net.osmand' byline="true" />
				<replaceregexp file="res/layout/navigate_point.xml" match='net.osmand.plus' replace='net.osmand' byline="true" />
			</then>
			<else>
				<replaceregexp file="AndroidManifest.xml" match='"@drawable/icon_free"' replace='"@drawable/icon"' byline="true" />
				<replaceregexp file="AndroidManifest.xml" match='package="net.osmand"' replace='package="net.osmand.plus"' byline="true" />
				<replaceregexp file="AndroidManifest.xml" match='android:process="net.osmand"' replace='android:process="net.osmand.plus"' byline="true" />
			</else>
		</if>
		<if>
			<condition>
				<isset property="net.osmand.plus" />
			</condition>
			<then>
				<replaceregexp file="res/values/no_translate.xml" match='"app_name"&gt;(.*)&lt;' replace='"app_name"&gt;OsmAnd+&lt;' byline="true" />
			</then>
		</if>
		<if>
			<condition>
				<isset property="build.version.code" />
			</condition>
			<then>
				<replaceregexp file="AndroidManifest.xml" match='android:versionCode="(.*)"' replace='android:versionCode="${build.version.code}"' byline="true" />
				<replaceregexp file="AndroidManifest.xml" match='android:debuggable="true"' replace='android:debuggable="false"' byline="true" />
				
			</then>
		</if>
		<if>
			<condition>
				<isset property="build.version" />
			</condition>
			<then>
				<replaceregexp file="res/values/no_translate.xml" match='"app_version"&gt;(.*)&lt;' replace='"app_version"&gt;${build.version}&lt;' byline="true" />
			</then>
		</if>

	</target>

	<!-- Compiles this project's .java files into .class files. -->
	<target name="-compile" depends="-build-setup, -pre-build, -code-gen, -pre-compile">
		<!-- osmchange : Osmand plus support -->
		<mkdir dir="${gen.absolute.dir}/net/osmand/plus"/>
		<copy todir="${gen.absolute.dir}/net/osmand/plus">
			<fileset dir="${gen.absolute.dir}/net/osmand">
				<include name="R.java" />
			</fileset>
		</copy>
		<replaceregexp file="${gen.absolute.dir}/net/osmand/plus/R.java" match='package net.osmand;' replace='package net.osmand.plus;' byline="true" />
		<!-- osmchange : Osmand plus support -->

		<do-only-if-manifest-hasCode elseText="hasCode = false. Skipping...">
			<!-- merge the project's own classpath and the tested project's classpath -->
			<path id="project.javac.classpath">
				<path refid="project.all.jars.path" />
				<path refid="tested.project.classpath" />
			</path>
			<javac encoding="${java.encoding}" source="${java.source}" target="${java.target}" debug="true" extdirs="" includeantruntime="false" destdir="${out.classes.absolute.dir}" bootclasspathref="project.target.class.path" verbose="${verbose}" classpathref="project.javac.classpath" fork="${need.javac.fork}">
				<src path="${source.absolute.dir}" />
				<src path="${gen.absolute.dir}" />
				<compilerarg line="${java.compilerargs}" />
				<!-- osmchange -->
				<src path="${use.absolute.dir}" />
				<exclude name="**/PlatformUtil.java" />
				<!-- osmchange -->
			</javac>

			<!-- if the project is instrumented, intrument the classes -->
			<if condition="${build.is.instrumented}">
				<then>
					<echo level="info">Instrumenting classes from ${out.absolute.dir}/classes...</echo>

					<!-- build the filter to remove R, Manifest, BuildConfig -->
					<getemmafilter appPackage="${project.app.package}" libraryPackagesRefId="project.library.packages" filterOut="emma.default.filter" />

					<!-- define where the .em file is going. This may have been
    	                         setup already if this is a library -->
					<property name="emma.coverage.absolute.file" location="${out.absolute.dir}/coverage.em" />

					<!-- It only instruments class files, not any external libs -->
					<emma enabled="true">
						<instr verbosity="${verbosity}" mode="overwrite" instrpath="${out.absolute.dir}/classes" outdir="${out.absolute.dir}/classes" metadatafile="${emma.coverage.absolute.file}">
							<filter excludes="${emma.default.filter}" />
							<filter value="${emma.filter}" />
						</instr>
					</emma>
				</then>
			</if>

			<!-- if the project is a library then we generate a jar file -->
			<if condition="${project.is.library}">
				<then>
					<echo level="info">Creating library output jar file...</echo>
					<property name="out.library.jar.file" location="${out.absolute.dir}/classes.jar" />
					<if>
						<condition>
							<length string="${android.package.excludes}" trim="true" when="greater" length="0" />
						</condition>
						<then>
							<echo level="info">Custom jar packaging exclusion: ${android.package.excludes}</echo>
						</then>
					</if>

					<propertybyreplace name="project.app.package.path" input="${project.app.package}" replace="." with="/" />

					<jar destfile="${out.library.jar.file}">
						<fileset dir="${out.classes.absolute.dir}" includes="**/*.class" excludes="${project.app.package.path}/R.class ${project.app.package.path}/R$*.class ${project.app.package.path}/Manifest.class ${project.app.package.path}/Manifest$*.class ${project.app.package.path}/BuildConfig.class" />
						<fileset dir="${source.absolute.dir}" excludes="**/*.java ${android.package.excludes}" />
					</jar>
				</then>
			</if>

		</do-only-if-manifest-hasCode>
	</target>

	<path id="lib.path">
		<fileset dir="ant-lib" includes="*.jar" />
	</path>

	<!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
	<!-- version-tag: custom -->
	<import file="${sdk.dir}/tools/ant/build.xml" />

	<taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask" classpathref="lib.path" />

	<target name="cpd" description="Search for cut-and-pasted code">
		<property name="cpd.report.xml" location="cpd.xml"/>
		<cpd minimumTokenCount="100" format="xml" outputFile="${cpd.report.xml}"
            ignoreLiterals="true" ignoreIdentifiers="true">
			<fileset dir="${source.absolute.dir}" includes="**/*.java"/>
		</cpd>
	</target>

	<target name="fix_apostrophe_issues">
		<replace token="version='1.0'" value="version=&quot;1.0&quot;">
			<fileset dir="res" includes="**/strings.xml"/>
		</replace>
		<replace token="encoding='utf-8'" value="encoding=&quot;utf-8&quot;">
			<fileset dir="res" includes="**/strings.xml"/>
		</replace>

		<replaceregexp  match="([^\\])'" replace="\1\\\\'" flags="-g" byline="off">
			<fileset dir="res" includes="**/strings.xml"/>
		</replaceregexp>
	</target>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="SherlockBar" default="help">

	<loadproperties srcFile="project.properties" />


	<!-- quick check on sdk.dir -->
	<fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through an env var"
            unless="sdk.dir"
    />
	<import file="${sdk.dir}/tools/ant/build.xml" />

</project>
