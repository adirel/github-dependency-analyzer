<?xml version="1.0" encoding="UTF-8"?>
<project name="SPREAD" default="help" basedir=".">

   <property name="build.sysclasspath" value="last" />
   <property name="Main-Class" value="app.SpreadApp" />
   <property name="JDK_VERSION" value="1.6" />
   <property name="src" location="src"/>
   <property name="buildDir" location="classes" />
   <property name="dist" location="dist" />
   <property name="lib" location="lib" />
   <property name="report" location="${buildDir}/junitreport" />


   <target name="help">
      <echo message="Common build targets:" />
      <echo message="jar - Builds spread.jar" />
      <echo message="build - Same as clean+jar" />
      <echo message="compile - Compiles spread classes" />
      <echo message="clean - Remove all *.class and spread.jar" />
   </target>


   <path id="classpath">
      <pathelement path="." />
      <fileset dir="${lib}">
         <include name="*.jar" />
      </fileset>
      <pathelement location="." />
   </path>


   <target name="build" depends="clean,jar" />


   <target name="jar" depends="compile">
      <mkdir dir="${dist}" />
      <jar jarfile="${dist}/spread.jar">

         <manifest>
            <attribute name="Built-By" value="${user.name}" />
            <attribute name="Main-Class" value="${Main-Class}" />
            <!--<attribute name="Classpath" value="." />-->
         </manifest>

         <fileset dir="${buildDir}" />
         <zipgroupfileset dir="${lib}" includes="colt.jar" />
         <zipgroupfileset dir="${lib}" includes="core.jar" />
         <zipgroupfileset dir="${lib}" includes="jebl.jar" />
         <!--        <zipgroupfileset dir="${lib}" includes="org.boehn.kmlframework_20090320.jar"/> -->
         <!--        <zipgroupfileset dir="${lib}" includes="ColorPicker.jar"/>                     -->
         <!--        <zipgroupfileset dir="${lib}" includes="quaqua.jar"/>                          -->
      </jar>
   </target>

   <target name="compile">
      <mkdir dir="${buildDir}" />
      <mkdir dir="${buildDir}/icons" />
      <mkdir dir="${buildDir}/colorpicker/swing/resources" />
      <javac source="1.6" target="1.6" srcdir="${src}" destdir="classes" classpathref="classpath" />

      <!--copy icons to icons dir-->
      <copy todir="${buildDir}/icons">
         <fileset dir="${src}/icons">
            <include name="**/*.png" />
         </fileset>
      </copy>

      <!--copy colorpicker resources-->
      <copy todir="${buildDir}/colorpicker/swing/resources">
         <fileset dir="${src}/colorpicker/swing/resources">
            <include name="**/*.properties" />
         </fileset>
      </copy>

      <!--copy map background to templates dir-->
      <copy file="${src}/templates/world_map.png" todir="classes/templates" />

   </target>

   <target name="clean">
      <delete dir="${buildDir}" />
      <delete dir="${dist}" />
   </target>

	<!-- JUnit test -->
	<target name="junit" depends="compile">
		<mkdir dir="${report}" />
		<junit printsummary="yes">
			<!--showoutput='yes'-->
			<classpath>
				<path refid="classpath" />
				<path location="${buildDir}" />
			</classpath>

			<formatter type="xml" />

			<batchtest fork="yes" todir="${report}">
				<fileset dir="${src}">
					<include name="test/**/*Test.java" />
                    <exclude name="test/templates/SpatialStatsToTerminalTest.java"/>
				</fileset>
			</batchtest>
		</junit>
		<echo message="JUnit test finished." />
	</target>

	<target name="junitreport">
		<junitreport todir="${report}">
			<fileset dir="${report}" includes="*.xml" />
			<report format="frames" todir="${report}" />
		</junitreport>
		<echo message="JUnit test report finished." />
	</target>

</project>

<?xml version="1.0" ?>

<project name="SPREAD" basedir=".">
	<description>
		Build file for packaging SPREAD
		$Id:$
	</description>

	<property environment="env"/>


    <property name="version" value="1.0.7rc" />
    <property name="release_dir" value="." />
    <property name="name" value="SPREAD" />

    <property name="dist" value="../dist" />
    <property name="tools_dir" value="${release_dir}/tools" />
    <property name="common_dir" value="${release_dir}/common" />

    <property name="Mac_dir" value="${release_dir}/Mac" />
    <property name="Linux_dir" value="${release_dir}/Linux" />
    <property name="Windows_dir" value="${release_dir}/Windows" />

    <property name="Mac_package_dir" value="${Mac_dir}/${name} v${version}" />
    <property name="Linux_package_dir" value="${Linux_dir}/${name}_v${version}" />
    <property name="Windows_package_dir" value="${Windows_dir}/${name} v${version}" />

<!--Copy to common directory-->
        <copy file="../README.textile" todir="${release_dir}/common">
        </copy>
        <copy file="../LICENSE" todir="${release_dir}/common">
        </copy>
                <copy file="../Changelog" todir="${release_dir}/common">
        </copy>

    <!-- Need to either install Launch4j under {BEAST workspace}/${release}
                 or install it in the default directory and change the location of launch4j.dir -->
    <target name="windows" description="release Windows version">

        <delete dir="${Windows_package_dir}" />
        <!-- Create the release directory -->
        <mkdir dir="${Windows_package_dir}" />

        <property name="launch4j.dir" location="${tools_dir}/launch4j" />
        <taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask"
            classpath="${launch4j.dir}/launch4j.jar :${launch4j.dir}/lib/xstream.jar" />

        <copy file="${dist}/spread.jar" todir="${Windows_package_dir}/lib"/>
<!--
        <copy todir="${Windows_package_dir}/lib">
            <fileset dir="${Windows_dir}/lib"/>
        </copy>
-->
        <copy todir="${Windows_package_dir}">
            <fileset dir="${common_dir}/"/>
        </copy>

        <launch4j configFile="${Windows_dir}/SPREAD_launch4j.xml"
                  jar="${dist}/spread.jar"
                  outfile="${Windows_package_dir}/${name} v${version}.exe"
                  fileVersion="${version}.0"
                  txtFileVersion="${version}"
                  productVersion="${version}.0"
                  txtProductVersion="${version}"/>

        <zip destfile="${release_dir}/${name} v${version}.zip">
            <zipfileset dir="${Windows_package_dir}" prefix="${name} v${version}"/>
        </zip>

        <echo message="Windows version release is finished." />
        
         <echo message="Cleaning up." />
         <delete dir="${Windows_package_dir}" />
        
    </target>

    <target name="linux" description="release Linux/Unix version">
        <delete dir="${Linux_package_dir}" />
        <!-- Create the release directory -->
        <mkdir dir="${Linux_package_dir}" />

        <copy todir="${Linux_package_dir}/bin">
            <fileset dir="${Linux_dir}/scripts"/>
        </copy>

        <copy file="${Linux_dir}/icons/spread.png" todir="${Linux_package_dir}/images"/>
        <copy file="${dist}/spread.jar" todir="${Linux_package_dir}/lib"/>
        <copy todir="${Linux_package_dir}/lib">
            <fileset dir="${Linux_dir}/lib"/>
        </copy>
        <copy todir="${Linux_package_dir}">
            <fileset dir="${common_dir}/"/>
        </copy>

        <tar destfile="${release_dir}/${name}_v${version}.tgz" compression="gzip">
            <tarfileset dir="${Linux_package_dir}" prefix="${name}_v${version}"/>
        </tar>

        <echo message="Linux/Unix version release is finished." />
        
        <echo message="Cleaning up." />
         <delete dir="${Linux_package_dir}" />
        
    </target>

    <target name="mac" description="release Mac version">
        <delete dir="${Mac_package_dir}" />
        <!-- Create the release directory -->
        <mkdir dir="${Mac_package_dir}" />

        <copy todir="${Mac_package_dir}">
            <fileset dir="${common_dir}/"/>
        </copy>

        <taskdef name="jarbundler" classname="net.sourceforge.jarbundler.JarBundler" classpath="${tools_dir}/jarbundler-2.1.0.jar"/>

        <!-- create a jar bundle for the mac -->
        <jarbundler dir="${Mac_package_dir}"
                        name="${name} v${version}"
                        mainclass="app.SpreadApp"
                        icon="${Mac_dir}/icons/SPREAD.icns"
                        jvmversion="1.5+"
                        vmoptions="-Xmx512M"
                        arguments=""
                        version="${version}"
                        infostring="${name}_v${version}, Copyright 2011, Filip Bielejec, Andrew Rambaut, Marc A. Suchard &amp; Philippe Lemey"
                        bundleid="spread" >
            <javaproperty name="apple.laf.useScreenMenuBar" value="true"/>
            <jarfileset dir="${dist}">
                <include name="**/spread.jar"/>
            </jarfileset>
            <jarfileset dir="${Mac_dir}/lib">
                <include name="**/quaqua.jar"/>
            </jarfileset>
            <jarfileset dir="${Mac_dir}/lib">
                <include name="libquaqua*.jnilib"/>
            </jarfileset>          
        </jarbundler>

        <echo message="Building disk image." />

        <!-- create disk image -->
        <exec executable="/usr/bin/hdiutil">
            <arg value="create"/>
            <arg value="-ov"/>
            <arg value="-srcfolder"/>
            <arg value="${Mac_package_dir}"/>
            <arg value="-volname"/>
            <arg value="${name} v${version}"/>
            <arg value="-imagekey"/>
            <arg value="zlib-level=6"/>
            <arg value="${release_dir}/${name} v${version}.dmg"/>
        </exec>

        <echo message="Mac version release is finished." />
        
         <echo message="Cleaning up." />
         <delete dir="${Mac_package_dir}" />
        
    </target>

</project>
<project name="launch4j" default="compile" basedir=".">
	<property name="src" location="src" />
	<property name="lib" location="lib" />
	<property name="build" location="build" />
	<property name="jar" location="./${ant.project.name}.jar" />
	<property name="launch4j.dir" location="." />

	<path id="dist.classpath">
		<pathelement path="${build}" />
		<fileset dir="${lib}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<target name="init">
		<tstamp />
		<mkdir dir="${build}" />
	</target>

	<target name="compile" depends="init" description="compile the source">
		<javac srcdir="${src}" destdir="${build}" classpathref="dist.classpath" source="1.4" debug="on" />
		<copy todir="${build}/images">
			<fileset dir="${src}/images">
				<include name="**/*" />
			</fileset>
		</copy>
		<copy todir="${build}">
			<fileset dir="${src}">
				<include name="**/*.properties" />
			</fileset>
		</copy>
	</target>

	<target name="jar" depends="compile" description="create jar">
		<fileset dir="${lib}" id="lib.dist.fileset">
			<include name="**/*.jar" />
		</fileset>
		<pathconvert pathsep=" " property="dist.classpath" refid="lib.dist.fileset">
			<map from="${lib}" to="./lib" />
		</pathconvert>
		<!-- Put everything in ${build} into a jar file -->
		<jar jarfile="${jar}">
			<fileset dir="${build}" excludes="**/messages_es.properties" />
			<manifest>
				<attribute name="Main-Class" value="net.sf.launch4j.Main" />
				<attribute name="Class-Path" value=". ${dist.classpath}" />
			</manifest>
		</jar>
	</target>

	<target name="demo" depends="jar" description="build the demos">
		<ant dir="./demo/ConsoleApp" inheritAll="false" />
		<ant dir="./demo/SimpleApp" inheritAll="false" />
	</target>

	<target name="clean" description="clean up">
		<delete dir="${build}" />
		<delete file="${jar}" />
		<ant dir="./demo/ConsoleApp" target="clean" inheritAll="false" />
		<ant dir="./demo/SimpleApp" target="clean" inheritAll="false" />
	</target>
</project>
<project name="ConsoleApp" default="exe" basedir=".">
	<property name="src" location="src" />
	<property name="lib" location="lib" />
	<property name="build" location="build" />
	<property name="launch4j.dir" location="../.." />

	<path id="dist.classpath">
		<pathelement path="${build}" />
		<fileset dir="${lib}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<target name="init">
		<tstamp />
		<mkdir dir="${build}" />
	</target>

	<target name="compile" depends="init" description="compile the source">
		<javac srcdir="${src}" destdir="${build}" classpathref="dist.classpath" source="1.4" debug="on" />
	</target>

	<target name="jar" depends="compile" description="create the jar">
		<fileset dir="${lib}" id="lib.dist.fileset">
			<include name="**/*.jar" />
		</fileset>
		<pathconvert pathsep=" " property="dist.classpath" refid="lib.dist.fileset">
			<map from="${lib}" to=".\lib" />
		</pathconvert>
		<!-- Put everything in ${build} into a jar file -->
		<jar jarfile="${ant.project.name}.jar">
			<fileset dir="${build}" includes="**/*" />
			<manifest>
				<!-- SET YOUR MAIN CLASS HERE -->
				<attribute name="Main-Class" value="net.sf.launch4j.example.ConsoleApp" />
				<attribute name="Class-Path" value=". ${dist.classpath}" />
			</manifest>
		</jar>
	</target>

	<target name="exe" depends="jar">
		<taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask" classpath="${launch4j.dir}/launch4j.jar
		    :${launch4j.dir}/lib/xstream.jar" />
		<launch4j>
			<config headerType="console" jar="ConsoleApp.jar" outfile="ConsoleApp.exe" errTitle="ConsoleApp" chdir="." customProcName="true" icon="l4j/ConsoleApp.ico">
				<singleInstance mutexName="net.sf.launch4j.example.ConsoleApp" />
				<jre minVersion="1.4.0" />
			</config>
		</launch4j>
	</target>

	<target name="clean" description="clean up">
		<delete dir="${build}" />
		<delete file="${ant.project.name}.jar" />
		<delete file="${ant.project.name}.exe" />
	</target>
</project>
<project name="SimpleApp" default="exe" basedir=".">
	<property name="src" location="src" />
	<property name="lib" location="lib" />
	<property name="build" location="build" />
	<property name="launch4j.dir" location="../.." />

	<path id="dist.classpath">
		<pathelement path="${build}" />
		<fileset dir="${lib}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<target name="init">
		<tstamp />
		<mkdir dir="${build}" />
	</target>

	<target name="compile" depends="init" description="compile the source">
		<javac srcdir="${src}" destdir="${build}" classpathref="dist.classpath" source="1.4" debug="on" />
	</target>

	<target name="jar" depends="compile" description="create the jar">
		<fileset dir="${lib}" id="lib.dist.fileset">
			<include name="**/*.jar" />
		</fileset>
		<pathconvert pathsep=" " property="dist.classpath" refid="lib.dist.fileset">
			<map from="${lib}" to=".\lib" />
		</pathconvert>
		<!-- Put everything in ${build} into a jar file -->
		<jar jarfile="${ant.project.name}.jar">
			<fileset dir="${build}" includes="**/*" />
			<manifest>
				<!-- SET YOUR MAIN CLASS HERE -->
				<attribute name="Main-Class" value="net.sf.launch4j.example.SimpleApp" />
				<attribute name="Class-Path" value=". ${dist.classpath}" />
			</manifest>
		</jar>
	</target>

	<target name="exe" depends="jar">
		<taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask" classpath="${launch4j.dir}/launch4j.jar
		    :${launch4j.dir}/lib/xstream.jar" />
		<launch4j configFile="./l4j/SimpleApp.xml" />
	</target>

	<target name="clean" description="clean up">
		<delete dir="${build}" />
		<delete file="${ant.project.name}.jar" />
		<delete file="${ant.project.name}.exe" />
	</target>
</project>
