<project name='marathon' default='deploy' basedir='.'>
	<property file="build.properties"/>

	<property name="rsyntaxtextarea.jar" location="marathon-support/RSyntaxTextArea/dist/rsyntaxtextarea.jar"/>
    <property name="ruby.lib.abs" location="${ruby-library}"/>
    <property name="python.lib.abs" location="${python-library}"/>

	<target name='clean' description="Cleans all intermediate files">
        <delete dir='ant-target'/>
        <delete file="marathon.jar"/>
        <delete file="sampleapp.jar"/>
		<delete file="marathon-unit-tests/test/net/sourceforge/marathon/AllTests.java"/>
	</target>

	<target name='clean-all' depends='clean' description="Cleans all intermediate files and distribution files">
		<delete>
			<fileset dir=".">
				<include name="marathon-*.zip"/>
			</fileset>
		</delete>
        <delete dir='testreports'/>
	</target>

	<property name="run-from-marathon-build-file" value="true"/>
	<property name="class.dir" location="ant-target/classes"/>
	<property name="example.dir" location="ant-target/example"/>
	<property name="unittests.dir" location="ant-target/unittests"/>
	<property name="reports.dir" location="reports"/>

	<property name="jline.jar" location="marathon-support/jline-0.9.93.jar"/>
	<property name="junit.jar" location="marathon-support/junit4.8.2/junit-4.8.2.jar"/>
	<property name="osxutil.jar" location="marathon-support/osxutil/dist/osxutil.jar"/>
	<property name="atunit.jar" location="marathon-support/atunit-1/atunit-1.0.1.jar"/>
	<property name="easymock.jar" location="marathon-support/easymock-3.0/easymock-3.0.jar"/>
	<property name="looks.jar" location="marathon-support/looks-2.2.0/looks-2.2.0.jar"/>
	<property name="vldocking.jar" location="marathon-support/vldocking-3.0.0/src/jar/vldocking-3.0.0.jar"/>
	<property name="forms.jar" location="marathon-support/forms-1.2.1/forms-1.2.1.jar"/>
	<property name="guice.jar" location="marathon-support/guice-3.0/guice-3.0.jar"/>
	<property name="aopalliance.jar" location="marathon-support/guice-3.0/aopalliance.jar"/>
	<property name="inject.jar" location="marathon-support/guice-3.0/javax.inject.jar"/>
	<property name="cglib.jar" location="marathon-support/cglib-nodep-2.2.jar"/>
	<property name="objenesis.jar" location="marathon-support/objenesis-1.2/objenesis-1.2.jar"/>
        <property name="browserlauncher.jar" location="marathon-support/BrowserLauncher2-all-1_3.jar"/>
	<property name="opencsv.jar" location="marathon-support/opencsv/deploy/opencsv-2.2.jar"/>
	<property name="snakeyaml.jar" location="marathon-support/snakeyaml/target/snakeyaml-1.11.jar"/>

    <target name='compile-all' description="Compiles all dependent modules">
		<ant dir="marathon-rmilite" inheritAll='true'/>
		<ant dir="marathon-runtime-api" inheritAll='true'/>
		<ant dir="marathon-runtime" inheritAll='true'/>
		<ant dir="marathon-runtime-server" inheritAll='true'/>
		<ant dir="marathon-ruby" inheritAll='true'/>
		<ant dir="marathon-python" inheritAll='true'/>
		<ant dir="marathon-rsta-editor" inheritAll='true'/>
		<ant dir="marathon-core" inheritAll='true'/>
	</target>

    <target name='build-jars' depends='compile-all' description="Builds all the dependent jars">
		<jar jarfile='marathon.jar' basedir='ant-target/classes'/>
		<jar jarfile='sampleapp.jar' basedir='ant-target/example'/>
	</target>

	<target name="ensure-test-name" unless="test">
		<fail message="You must run this target with -Dtest=TestName"/>
	</target>

	<target name="runtest" description="Runs the test you specify on the command line with -Dtest=" depends="compile-all, ensure-test-name">
		<mkdir dir='${unittests.dir}'/>
        <javac destdir='${unittests.dir}' debug='on' optimize='off' deprecation='on' source="1.5" target="1.5">
            <src path='marathon-unit-tests/ant-tool'/>
            <include name='**/CreateTestSuite.java'/>
        </javac>
		<java classname="net.sourceforge.marathon.CreateTestSuite" dir="marathon-unit-tests/test" fork="true" failonerror="true" maxmemory="128m" >
			<classpath>
				<pathelement location="${unittests.dir}"/>
			</classpath>
		</java>

		<ant dir="marathon-unit-tests" inheritAll='true'/>

		<junit printsummary="withOutAndErr" fork="yes" dir="marathon-unit-tests"> 
			<sysproperty key="marathon.WINDOW_TIMEOUT" value="1200"/>
			<sysproperty key="marathon.home" value="."/>
			<sysproperty key="marathon.project.script.model" value="net.sourceforge.marathon.mocks.MockScriptModel"/>
			<sysproperty key="marathon.capture.dir" value="."/>
			<sysproperty key="marathon.fixture.dir" value="."/>
			<sysproperty key="marathon.test.dir" value="."/>
			<sysproperty key="marathon.unittests" value="true"/>

			<classpath>
				<pathelement location="${forms.jar}"/>
				<pathelement location="${looks.jar}"/>
				<pathelement location="${rsyntaxtextarea.jar}"/>
				<pathelement location="${jline.jar}"/>
				<pathelement location="${junit.jar}"/>
				<pathelement location="${osxutil.jar}"/>
				<pathelement location="${atunit.jar}"/>
				<pathelement location="${easymock.jar}"/>
				<pathelement location="${vldocking.jar}"/>
				<fileset dir="${ruby.dir.abs}">
					<include name="lib/jruby.jar"/>
				</fileset>
				<pathelement location="${class.dir}"/>
				<pathelement location="${unittests.dir}"/>
				<pathelement location="${guice.jar}"/>
				<pathelement location="${aopalliance.jar}"/>
				<pathelement location="${inject.jar}"/>
				<pathelement location="${cglib.jar}"/>
				<pathelement location="${objenesis.jar}"/>
                                <pathelement location="${browserlauncher.jar}"/>
				<pathelement location="${opencsv.jar}"/>
				<pathelement location="${snakeyaml.jar}"/>
			</classpath>
			<batchtest>
				<fileset dir="marathon-unit-tests/test">
					<include name="**/${test}.java"/>
				</fileset>
			</batchtest>
		</junit>

		<junitreport todir="testreports">
			<fileset dir="testreports">
				<include name="TEST-*.xml"/>
			</fileset>
			<report format="frames" todir="./testreports/html"/>
		</junitreport>
	</target>

    <target name='tests' depends='compile-all' description="Runs all Unit Tests">
		<ant dir="marathon-unit-tests" inheritAll='true'/>

		<delete dir='testreports'/>
		<mkdir dir="testreports"/>
		<junit printsummary="yes" haltonfailure="no" fork="yes" dir="marathon-unit-tests" forkmode='once'>
			<sysproperty key="marathon.recorder.namingstrategy" value="net.sourceforge.marathon.component.MarathonNamingStrategy"/>
			<classpath>
				<pathelement location="${forms.jar}"/>
				<pathelement location="${looks.jar}"/>
				<pathelement location="${rsyntaxtextarea.jar}"/>
				<pathelement location="${jline.jar}"/>
				<pathelement location="${junit.jar}"/>
				<pathelement location="${osxutil.jar}"/>
				<pathelement location="${atunit.jar}"/>
				<pathelement location="${easymock.jar}"/>
				<pathelement location="${vldocking.jar}"/>
				<pathelement location="${ruby.lib.abs}"/>
				<pathelement location="${class.dir}"/>
				<pathelement location="${unittests.dir}"/>
				<pathelement location="${guice.jar}"/>
				<pathelement location="${aopalliance.jar}"/>
				<pathelement location="${inject.jar}"/>
				<pathelement location="${cglib.jar}"/>
				<pathelement location="${objenesis.jar}"/>
				<pathelement location="${browserlauncher.jar}"/>
                                <pathelement location="${opencsv.jar}"/>
                                <pathelement location="${snakeyaml.jar}"/>
			</classpath>
			<formatter type="xml"/>

			<batchtest todir="testreports">
				<fileset dir="marathon-unit-tests/test">
					<include name="**/Test*.java"/>
				</fileset>
			</batchtest>
		</junit>

	</target>

	<target name='testreport'>
		<junitreport todir="testreports">
			<fileset dir="testreports">
				<include name="TEST-*.xml"/>
			</fileset>
			<report format="frames" todir="./testreports/html"/>
		</junitreport>
	</target>
    <target name='zip' depends='build-jars' description="Creates the compressed distribution files">
        <delete file="marathon-${marathon-version}.zip"/>
        <zip destfile="marathon-${marathon-version}.zip">
            <zipfileset dir='.' prefix='marathon'>
                <include name="marathon.jar"/>
                <include name="sampleapp.jar"/>
				<include name="README.txt"/>
				<include name="README.html"/>
				<include name="README.textile"/>
				<include name="ant-sample.xml"/>
            </zipfileset>
            <zipfileset dir='marathon-core' prefix='marathon' filemode="755">
                <include name="marathon"/>
                <include name="Marathon.app/**"/>
            </zipfileset>
            <zipfileset dir='marathon-core' prefix='marathon'>
                <include name="marathon.bat"/>
                <include name="ChangeLog"/>
                <include name="LGPL.txt"/>
				<include name="logging.properties"/>
            </zipfileset>
            <zipfileset dir='marathon-core' prefix='marathon'>
            	<include name="Checklists/**"/>
            </zipfileset>
            <zipfileset dir='marathon-support' prefix='marathon/support'>
            	<include name="**"/>
            </zipfileset>
            <zipfileset dir='marathon-ruby/lib' prefix='marathon/support'>
            	<include name="**"/>
            </zipfileset>
        </zip>
	</target>

    <target name='deploy' depends='tests, testreport, zip, clean' description="Create files for deployment"/>
    <target name='deploy-withouttests' depends='compile-all, zip, clean' description="Create files for deployment"/>
</project>
<project name='marathon-core' default="all" basedir='.'>
	<property file="../build.properties" />
	<property name="versionfile" value="src/net/sourceforge/marathon/Version.java" />
	<property name="versiontmpl" value="src/net/sourceforge/marathon/Version.tmpl" />

	<path id='classpath'>
		<pathelement location="${forms.jar}" />
		<pathelement location="${looks.jar}" />
		<pathelement location="${jline.jar}" />
		<pathelement location="${junit.jar}" />
		<pathelement location="${osxutil.jar}" />
		<pathelement location="${vldocking.jar}" />
		<pathelement location="${guice.jar}"/>
		<pathelement location="${aopalliance.jar}"/>
		<pathelement location="${inject.jar}"/>
		<pathelement location="${browserlauncher.jar}" />
		<pathelement location="${opencsv.jar}" />
		<pathelement location="${snakeyaml.jar}" />
	</path>

	<condition property="platform.osx">
		<and>
			<os family="mac" />
			<os family="unix" />
		</and>
	</condition>

	<echo>OSX: ${platform.osx}</echo>

	<target name='compile' depends="versiontag">
		<mkdir dir='${class.dir}' />
		<copy todir='${class.dir}'>
			<fileset dir='src' excludes='**/*.java' />
		</copy>
		<javac destdir='${class.dir}' debug='on' optimize='off' deprecation='on' source="1.5" target="1.5">
			<src path='src' />
			<exclude name='**/osx/*.java' unless="platform.osx" />
			<classpath refid='classpath' />
		</javac>
	</target>

	<tstamp>
		<format property="build.tstamp" pattern="dd MMM yyyy hh:mm aa" />
	</tstamp>

	<target name="versiontag">
		<delete file='${versionfile}' />
		<filter token='PRODUCT' value="${marathon-product-name}" />
		<filter token="VERSION" value="${marathon-version}" />
		<filter token="BUILDTIME" value="${build.tstamp}" />
		<filter token="BLURBTITLE" value="${blurb-title}" />
		<filter token="BLURBCOMPANY" value="${blurb-company}" />
		<filter token="BLURBWEBSITE" value="${blurb-website}" />
		<filter token="BLURBCREDITS" value="${blurb-credits}" />
		<copy file="${versiontmpl}" tofile="${versionfile}" filtering="on" />
	</target>

	<target name='check_dep'>
		<fail unless="run-from-marathon-build-file" message="You must run this build from Marathon top-level build file" />
	</target>

	<target name='all' depends='check_dep, compile' />
</project>
<project name='marathon-pyton' default="all" basedir='.'>
	<path id='classpath'>
		<pathelement location="${forms.jar}"/>
		<pathelement location="${python.lib.abs}"/>
	</path>

	<target name='compile' >
		<mkdir dir='${class.dir}'/>
		<copy todir='${class.dir}'>
			<fileset dir='src' excludes='**/*.java'/>
		</copy>
		<javac destdir='${class.dir}' debug='on' optimize='off' deprecation='on' source="1.5" target="1.5">
			<src path='src'/>
			<classpath refid='classpath'/>
		</javac>
	</target>

	<target name='check_dep'>
		<fail unless="run-from-marathon-build-file"
			message="You must run this build from Marathon top-level build file"/>
	</target>

	<target name='all' depends='check_dep, compile' />
</project>
<project name='marathon-rmilite' default='all' basedir='.'>

	<property name="eclipse.build.dir" value="bin"/>
	
	<target name='compile' >
		<mkdir dir='${class.dir}'/>
		<copy todir='${class.dir}'>
			<fileset dir='src' excludes='**/*.java'/>
		</copy>
		<javac destdir='${class.dir}' debug='on' optimize='off' deprecation='on' source="1.5" target="1.5">
			<src path='src'/>
		</javac>

        <rmic base='${class.dir}' stubversion='1.2' classpath='${class.dir}'
                classname='net.sourceforge.rmilite.impl.RemoteInvocationHandlerImpl' />
	</target>

	<target name='rmic'>
        <rmic   base='${eclipse.build.dir}'
                stubversion='1.2'
                classpath='${eclipse.build.dir}'
                classname='net.sourceforge.rmilite.impl.RemoteInvocationHandlerImpl'/>
	</target>
	
	<target name='check_dep'>
		<fail unless="run-from-marathon-build-file"
			message="You must run this build from Marathon top-level build file"/>
	</target>

	<target name='all' depends='check_dep, compile' />
</project>
<project name='marathon-rsta-editor' default="all" basedir='.'>
	<property file="../build.properties"/>

	<property name="rsyntaxtextarea.jar" location="rsyntaxtextArea.jar"/>

    <path id='classpath'>
		<pathelement location="${forms.jar}"/>
		<pathelement location="${guice.jar}"/>
		<pathelement location="${aopalliance.jar}"/>
		<pathelement location="${inject.jar}"/>
		<pathelement location="${rsyntaxtextarea.jar}"/>
    </path>

    <condition property="platform.osx">
        <and>
            <os family="mac"/>
            <os family="unix"/>
        </and>
    </condition>
    
    <echo>OSX: ${platform.osx}</echo>

    <target name='compile' >
        <mkdir dir='${class.dir}'/>
        <copy todir='${class.dir}'>
            <fileset dir='src' excludes='**/*.java'/>
        </copy>
        <javac destdir='${class.dir}' debug='on' optimize='off' deprecation='on' source="1.5" target="1.5">
            <src path='src'/>
            <classpath refid='classpath'/>
        </javac>
    </target>

    <tstamp>
        <format property="build.tstamp" pattern="dd MMM yyyy hh:mm aa"/>
    </tstamp>

	<target name='check_dep'>
		<fail unless="run-from-marathon-build-file"
			message="You must run this build from Marathon top-level build file"/>
	</target>

    <target name='all' depends='check_dep, compile' />
</project>
<project name='marathon-ruby' default="all" basedir='.'>
    <echo>Ruby Lib: ${ruby.lib.abs} </echo>
	<path id='classpath'>
		<pathelement location="${forms.jar}"/>
        <pathelement location="${ruby.lib.abs}"/>
        <pathelement location="${basedir}/lib/JRubyParser.jar"/>
        <pathelement location="${basedir}/lib/yydebug.jar"/>
	</path>

	<target name='compile' >
		<mkdir dir='${class.dir}'/>
		<copy todir='${class.dir}'>
			<fileset dir='src' excludes='**/*.java'/>
		</copy>
		<javac destdir='${class.dir}' debug='on' optimize='off' deprecation='on' source="1.5" target="1.5">
			<src path='src'/>
			<classpath refid='classpath'/>
		</javac>

	</target>

	<target name='check_dep'>
		<fail unless="run-from-marathon-build-file"
			message="You must run this build from Marathon top-level build file"/>
	</target>

	<target name='all' depends='check_dep, compile' />
</project>
<project name='marathon-runtime-api' default='all' basedir='.'>

	<property name="eclipse.build.dir" value="bin"/>
	
    <path id='classpath'>
		<pathelement location="${forms.jar}"/>
		<pathelement location="${guice.jar}"/>
		<pathelement location="${aopalliance.jar}"/>
		<pathelement location="${inject.jar}"/>
		<pathelement location="${opencsv.jar}"/>
		<pathelement location="${snakeyaml.jar}"/>
    </path>

	<target name='compile' >
		<mkdir dir='${class.dir}'/>
		<copy todir='${class.dir}'>
			<fileset dir='src' excludes='**/*.java'/>
		</copy>
		<javac destdir='${class.dir}' debug='on' optimize='off' deprecation='on' source="1.5" target="1.5">
			<src path='src'/>
            <classpath refid='classpath'/>
		</javac>

	</target>

	<target name='check_dep'>
		<fail unless="run-from-marathon-build-file"
			message="You must run this build from Marathon top-level build file"/>
	</target>

	<target name='all' depends='check_dep, compile' />
</project>
<project name='marathon-runtime-server' default='all' basedir='.'>

	<property name="eclipse.build.dir" value="bin"/>
	
	<path id='classpath'>
		<pathelement location="${forms.jar}"/>
		<pathelement location="${guice.jar}"/>
		<pathelement location="${aopalliance.jar}"/>
		<pathelement location="${inject.jar}"/>
		<pathelement location="${opencsv.jar}"/>
		<pathelement location="${snakeyaml.jar}"/>
	</path>

	<target name='compile' >
		<mkdir dir='${class.dir}'/>
		<copy todir='${class.dir}'>
			<fileset dir='src' excludes='**/*.java'/>
		</copy>
		<javac destdir='${class.dir}' debug='on' optimize='off' deprecation='on' source="1.5" target="1.5">
			<src path='src'/>
			<classpath refid='classpath'/>
		</javac>
	</target>

	<target name='check_dep'>
		<fail unless="run-from-marathon-build-file"
			message="You must run this build from Marathon top-level build file"/>
	</target>

	<target name='all' depends='check_dep, compile' />
</project>
<project name='marathon-runtime' default='all' basedir='.'>

	<property name="eclipse.build.dir" value="bin"/>
	
	<path id='classpath'>
		<pathelement location="${forms.jar}"/>
		<pathelement location="${guice.jar}"/>
		<pathelement location="${aopalliance.jar}"/>
		<pathelement location="${inject.jar}"/>
		<pathelement location="${opencsv.jar}"/>
		<pathelement location="${snakeyaml.jar}"/>
	</path>

	<target name='compile' >
		<mkdir dir='${class.dir}'/>
		<copy todir='${class.dir}'>
			<fileset dir='src' excludes='**/*.java'/>
		</copy>
		<mkdir dir='${example.dir}'/>
        <copy todir='${example.dir}'>
            <fileset dir='examples' excludes='**/*.java'/>
        </copy>
		<javac destdir='${class.dir}' debug='on' optimize='off' deprecation='on' source="1.5" target="1.5">
			<src path='src'/>
			<classpath refid='classpath'/>
		</javac>

        <javac destdir='${example.dir}' debug='on' optimize='off' deprecation='on' source="1.5" target="1.5">
            <src path='examples'/>
            <classpath refid='classpath'/>
        </javac>

	</target>

	<target name='check_dep'>
		<fail unless="run-from-marathon-build-file"
			message="You must run this build from Marathon top-level build file"/>
	</target>

	<target name='all' depends='check_dep, compile' />
</project>
<?xml version="1.0" encoding="UTF-8" ?>

<!-- 

	This is the Ant build script for rsyntaxtextarea.jar.
	Available targets include:
	
		1. compile:         Compiles all org.fife classes into ${class-dir}.
		2. make-jar:        Creates the jar file.
		3. make-source-zip: Creates a source zip file.
		3. make-javadoc:    Creates the javadoc for RSyntaxTextArea.

	Author:   Robert Futrell
	Version:  1.4
	Date:     20feb2009

-->


<project name="RSyntaxTextArea" default="make-jar" basedir=".">

	<description>RSyntaxTextArea build file</description>


	<!-- Set global properties for this build. -->
	<property name="version"          value="1.4.2"/>
	<property name="source-dir"       location="src"/>
	<property name="class-dir"        location="ant-classes"/>
	<property name="dist-dir"         location="dist"/>
	<property name="doc-dir"          location="javadoc"/>
	<property name="debug"            value="true"/>
	<property name="debuglevel"       value="lines,var,source"/>
	<property name="java-level"       value="1.4"/>


	<!-- Compiles the classes.  -->
	<target name="compile" description="Compile the source">
		<delete includeEmptyDirs="true" quiet="true" dir="${class-dir}"/>
		<mkdir dir="${class-dir}"/>
		<javac srcdir="${source-dir}" destdir="${class-dir}"
			deprecation="yes" debug="${debug}" debuglevel="${debuglevel}"
			source="${java-level}" target="${java-level}"/>
	</target>


	<!-- Creates the jar file. -->
	<target name="make-jar" depends="compile"
			description="Create RSyntaxTextArea jar">
		<delete includeEmptyDirs="true" quiet="true" dir="${dist-dir}"/>
		<mkdir dir="${dist-dir}"/>
		<jar destfile="${dist-dir}/rsyntaxtextarea.jar">
			<fileset dir="${class-dir}"/>
			<fileset dir="i18n"/>
			<manifest>
				<attribute name="Specification-Title" value="RSyntaxTextArea"/>
				<attribute name="Specification-Version" value="${version}"/>
				<attribute name="Implementation-Title" value="org.fife.ui"/>
				<attribute name="Implementation-Version" value="${version}"/>
				<section name="RTextArea">
					<attribute name="Specification-Title" value="RTextArea"/>
					<attribute name="Specification-Version" value="${version}"/>
					<attribute name="Implementation-Title" value="org.fife.ui.rtextarea"/>
					<attribute name="Implementation-Version" value="${version}"/>
				</section>
				<section name="RSyntaxTextArea">
					<attribute name="Specification-Title" value="RSyntaxTextArea-Core"/>
					<attribute name="Specification-Version" value="${version}"/>
					<attribute name="Implementation-Title" value="org.fife.ui.rsyntaxtextarea"/>
					<attribute name="Implementation-Version" value="${version}"/>
				</section>
			</manifest>
		</jar>
		<copy todir="${dist-dir}">
			<fileset dir="distfiles"/>
		</copy>
	</target>


	<!-- Builds the source zip file. -->
	<target name="make-source-zip" description="Builds the source zip file">
		<zip destfile="./rsyntaxtextarea_${version}_Source.zip">
			<fileset dir=".">
				<include name="distfiles/**"/>
				<include name="i18n/**"/>
				<include name="src/**"/>
				<include name="build.xml"/>
			</fileset>
		</zip>
	</target>


	<!-- Builds the javadoc.  -->
	<target name="make-javadoc" depends="compile">
		<javadoc  destdir="${doc-dir}" author="true" version="true"
			 	breakiterator="yes">
			<packageset dir="${source-dir}" defaultexcludes="yes">
				<include name="org/**"/>
			</packageset>
		</javadoc>
	</target>


</project>
<!--

Copyright 2005 Bytecode Pty Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->

<project name="opencsv" default="jar">
	
	<target name="init" description="Initialise build parameters">
		<property name="src.dir" location="src"/>
		<property name="test.dir" location="test"/>
		<property name="doc.dir" location="doc"/>
		<property name="classes.dir" location="build/classes"/>
		<property name="test.classes.dir" location="build/test.classes"/>
		<property name="reports.dir" location="build/reports"/>
		<property name="deploy.dir" location="deploy"/>
		<property name="lib.dir" location="lib"/>
		<property name="app.name" value="opencsv"/>
		
		<!-- where resulting binaries are placed -->
		<property name="dist.src.dir" location="${deploy.dir}/src"/>
		
		<!-- Setup our version info -->
		<property name="version.file" value="build.version"/>
		<property file="${version.file}"/>
		
		<property name="build.version.brief"
			value="${build.release.major}.${build.release.minor}"/>
		<property name="build.version"
			value="${build.version.brief}.${build.number}"/>
		<property name="build.version.tag"
			value="Release_${build.release.major}_${build.release.minor}_${build.number}"/>
		
		<property name="zip.dir.name"
			value="${app.name}-${build.release.major}.${build.release.minor}"/>
		
		<mkdir dir="${deploy.dir}"/>
		
		<!-- Setup a useful classpath -->
		<path id="useful.jars">
			<fileset dir="${lib.dir}">
				<include name="**/*.jar"/>
			</fileset>
		</path>
				
	</target>
	
	<target name="build" depends="init" description="Compile opencsv">

		<mkdir dir="${classes.dir}"/>

		<javac srcdir="${src.dir}" destdir="${classes.dir}"
			classpathref="useful.jars"/>
		
	</target>
	
	<target name="jar" depends="clean,build" description="Create opencsv jar file">
		<mkdir dir="${deploy.dir}"/>

        <tstamp>
            <format property="build.timestamp" pattern="yyyy-MM-dd HH:mm:ss" locale="en"/>
        </tstamp>
		
		<jar destfile="${deploy.dir}/${app.name}-${build.version.brief}.jar"
			basedir="${classes.dir}">
			<include name="**/*.class"/>
            <manifest>
                <attribute name="Build-Timestamp" value="${build.timestamp}" />
                <attribute name="Implementation-Title" value="${app.name}" />
                <attribute name="Implementation-Version" value="${build.version.brief}" />
            </manifest>
		</jar>
	</target>
	
	<target name="deploy.src" depends="jar,javadoc"
		description="Deploys a source code distro">
		
		<delete dir="${dist.src.dir}/${zip.dir.name}"/>
		<mkdir dir="${dist.src.dir}/${zip.dir.name}"/>
		
		<copy todir="${dist.src.dir}/${zip.dir.name}">
			<fileset dir="${basedir}">
				<include name="src/**/*.*"/>
				<include name="test/**/*.*"/>
				<include name="lib/**/*.*"/>
				<include name="doc/**/*.*"/>
				<include name="examples/**/*.*"/>
				<include name="deploy/*.jar"/>
			</fileset>
			<fileset dir="${basedir}" includes="*.*"/>
		</copy>
		
		<property name="src.tar.name"
			value="${dist.src.dir}/${zip.dir.name}-src-with-libs.tar"/>
		
		<tar destfile="${src.tar.name}" basedir="${dist.src.dir}"
			includes="${zip.dir.name}/**/*.*"/>
		
		<gzip src="${src.tar.name}" destfile="${src.tar.name}.gz"/>
		
		<delete file="${src.tar.name}"/>
		
	</target>
	
	<target name="test" depends="build" description="Runs junit test suite">
		
		<mkdir dir="${test.classes.dir}"/>
		
		<javac srcdir="${test.dir}" destdir="${test.classes.dir}"
			classpathref="useful.jars">
			<classpath>
				<pathelement location="${classes.dir}"/>
			</classpath>
			
		</javac>
		
		<mkdir dir="${reports.dir}/junit/xml"/>
		
		<junit printsummary="yes" haltonerror="no" haltonfailure="no" fork="true">
			
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar"/>
				</fileset>
				<pathelement location="${classes.dir}"/>
				<pathelement location="${test.classes.dir}"/>
			</classpath>	
			
			<formatter type="plain" usefile="false"/>
			<formatter type="xml" usefile="true"/>
			<batchtest todir="${reports.dir}/junit/xml">
				<fileset dir="${test.classes.dir}" includes="**/*Test.class"/>
			</batchtest>
					
		</junit>
		
		<!--
		<java classname="au.com.bytecode.opencsv.CSVReaderTest">
			<classpath>
				<pathelement location="${lib.dir}/junit.jar"/>
				<pathelement location="${classes.dir}"/>
				<pathelement location="${test.classes.dir}"/>
			</classpath>
		</java>
		-->
		
	</target>
	
	<target name="report" depends="test" description="Generate JUnit report files">
	
		<mkdir dir="${reports.dir}/junit/html"/>
		<junitreport todir="${reports.dir}/junit/html">
		  <fileset dir="${reports.dir}/junit/xml">
		    <include name="TEST-*.xml"/>
		  </fileset>
		  <report format="frames" todir="${reports.dir}/junit/html"/>
		</junitreport>
		
	</target>
	
	<target name="clean" depends="init" description="Remove all class files">
		<delete dir="${classes.dir}"/>
		<delete dir="${test.classes.dir}"/>
		<delete dir="${deploy.dir}"/>
	</target>
	
	<target name="version" depends="init"
		description="Update the version file and tag the CVS build">
		
		<cvs command="update ${version.file}" failonerror="true"/>
		
		<propertyfile file="${version.file}"
			comment="OpenCSV Version Build Properties File.">
			<entry key="build.number" type="int" default="0" operation="+"
				pattern="000"/>
			<entry key="build.release.minor" type="int"
				value="${build.release.minor}" pattern="0"/>
			<entry key="build.release.major" type="int"
				value="${build.release.major}" pattern="0"/>
			<entry key="build.date" type="date" value="now"/>
			<entry key="build.user" type="string" value="${user.name}"/>
		</propertyfile>
		
		<cvs command="commit -m Release ${version.file}" failonerror="true"/>
		
		<property file="${version.file}"/>
		
		<echo>CVS Tag is ${build.version.tag}. Version is ${build.version}</echo>
		
		<cvs command="tag -R ${build.version.tag}" failonerror="true"/>
		
	</target>
	
	<target name="javadoc" depends="init"
		description="Generate javadoc for the package">
			
		<javadoc packagenames="au.com.bytecode.opencsv.*" sourcepath="src"
			defaultexcludes="yes" destdir="${doc.dir}/api" author="true" version="true"
			use="true" windowtitle="opencsv API ${build.version.brief}">
			<doctitle><![CDATA[<h1>opencsv</h1>]]>
			</doctitle>
			<bottom><![CDATA[<i>Copyright &#169; 2005-2007 <a href="http://www.bytecode.com.au"/>Bytecode Pty Ltd.</a></i>]]>
			</bottom>
			
		</javadoc>
		
	</target>
	
</project><project name="OSXUtil" default="dist" basedir=".">
    <description>
        Compiles OSXUtil
    </description>
  <!-- set global properties for this build -->
  <property name="src" location="src"/>
  <property name="build" location="build"/>
  <property name="dist"  location="dist"/>

  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
  </target>

  <target name="compile" depends="init"
        description="compile the source " >
    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}"/>
  </target>

  <target name="dist" depends="compile"
        description="generate the distribution" >

    <!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file -->
    <jar jarfile="${dist}/osxutil.jar" basedir="${build}"/>
  </target>

  <target name="clean"
        description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
  </target>

  <target name="clean-all"
        description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>
</project>
<project name='marathon-unit-tests' default="all" basedir='.'>

	<path id='classpath'>
		<pathelement location="${forms.jar}"/>
		<pathelement location="${looks.jar}"/>
		<pathelement location="${jedit-textarea.jar}"/>
		<pathelement location="${rsyntaxtextarea.jar}"/>
		<pathelement location="${jline.jar}"/>
		<pathelement location="${junit.jar}"/>
		<pathelement location="${atunit.jar}"/>
		<pathelement location="${easymock.jar}"/>
		<pathelement location="${vldocking.jar}"/>
		<pathelement location="${browserlauncher.jar}"/>
		<pathelement location="${snakeyaml.jar}"/>
		<pathelement location="${ruby.lib.abs}"/>
		<pathelement location="${class.dir}"/>
		<pathelement location="${guice.jar}"/>
		<pathelement location="${aopalliance.jar}"/>
		<pathelement location="${inject.jar}"/>
	</path>

	<target name='compile' >
		<mkdir dir='${unittests.dir}'/>
		<copy todir='${unittests.dir}'>
			<fileset dir='test' excludes='**/*.java'/>
		</copy>
		<javac destdir='${unittests.dir}' debug='on' optimize='off' deprecation='on' source="1.5" target="1.5">
			<src path='test'/>
			<classpath refid='classpath'/>
		</javac>
	</target>

	<target name='check_dep'>
		<fail unless="run-from-marathon-build-file"
			message="You must run this build from Marathon top-level build file"/>
	</target>

	<target name='all' depends='check_dep, compile' />
</project>
