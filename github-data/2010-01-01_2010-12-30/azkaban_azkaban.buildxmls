<?xml version="1.0"?>

<project name="azkaban-common" basedir="." default="all"  xmlns:artifact="antlib:org.apache.maven.artifact.ant">

	<!-- set the base directory -->
	<property name="batch.base.dir" value="${basedir}/.." />
	<property file="${batch.base.dir}/build.properties" />

	<!-- these will get set by the master build for mvn targets. -->
	<property name="release.version" value="${curr.release.snapshot}"/>
	<property name="mvn.repository.id" value="${mvn.repository.id.snapshot}"/>
	<property name="mvn.repository.location" value="${mvn.repository.location.snapshot}"/>

	<!-- Override/set  paths to module specific paths -->
	<property name="module.dist.base" value="${batch.base.dir}/${dist.dir}/azkaban-common" />
	<property name="module.dist.dir"
		value="${batch.base.dir}/${dist.dir}/azkaban-common" />
	<property name="module.classes.dir"
		value="${batch.base.dir}/${dist.dir}/azkaban-common/classes" />
	<property name="module.javadoc.dir"
		value="${batch.base.dir}/${dist.dir}/azkaban-common/javadoc" />
	<property name="module.dist.name" value="azkaban-common" />

	<property name="module.java.dir" value="src/java" />
	<property name="module.conf.dir" value="conf" />

	<property name="module.distconf.dir" value="${module.dist.dir}" />
	<property name="module.distjar.dir" value="${module.dist.dir}/jars" />
	<property name="module.jar.name" value="${module.distjar.dir}/${module.dist.name}-${release.version}.jar" />
	<property name="module.srcjar.name" value="${module.distjar.dir}/${module.dist.name}-${release.version}-src.jar" />

	<property name="unit.classes.dir" value="${module.dist.dir}/unit_classes" />
        <property name="unit.java.dir" value="src/unit" />
        <property name="unit.report.dir" value="${module.dist.dir}/unit_report" />
        <property name="unit.html.dir" value="${module.dist.dir}/unit_html" />
        <property name="unit.jar" value="${module.dist.dir}/${module.dist.name}-${release.version}-unit.jar" />

        <property name="mvn.pom" value="${module.dist.dir}/${module.dist.name}-${release.version}.pom" />
        
	<path id="main-classpath">
		<fileset dir="${batch.base.dir}/${lib.dir}">
			<include name="*.jar" />
		</fileset>
		<pathelement path="${module.classes.dir}" />
	</path>

	<!-- macro to delete and recreate a directory -->
	<macrodef name="replace-dir">
		<attribute name="dir" />
		<sequential>
			<delete dir="@{dir}" />
			<mkdir dir="@{dir}" />
		</sequential>
	</macrodef>

	<target name="all" depends="clean, jars, srcjar" description="Builds all.." />

	<target name="deploy" depends="jars"
		description="build the jar file and copy job confs to dist.">
		<echo message="Copying jobs/properties file in: ${module.distconf.dir}" />
		<echo message="building job jar in: ${module.distjar.dir}" />
	</target>


	<target name="undeploy" depends="clean"
		description="clean the dist and remove jar and conf." />

	<target name="redeploy" depends="undeploy, deploy"
		description="Clean and Build jar files and copy config to dist." />

	<target name="clean" description="Delete generated files." depends="clean_unit" >
		<delete dir="${module.dist.base}" />
	</target>

	<target name="build" description="Compile main source tree java files">
		<replace-dir dir="${module.classes.dir}" />
		<!-- copy non-java files to classes dir to load from classpath -->
		<copy todir="${module.classes.dir}">
			<fileset dir="${module.java.dir}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<javac fork="true" destdir="${module.classes.dir}"
			target="1.6" debug="true" deprecation="false" failonerror="true">
			<src path="${module.java.dir}" />
			<classpath refid="main-classpath" />
		</javac>
	</target>

	<!--
		currently jar/copyconf writes to same directory hence we cant clean
		them. hack for now
	-->
	<target name="jars" depends="build" description="Build server jar file">
		<mkdir dir="${module.distjar.dir}" />
		<jar destfile="${module.jar.name}">
			<fileset dir="${module.classes.dir}">
				<include name="**/*.*" />
			</fileset>
			<!-- include src code for ide convenience -->
			<fileset dir="${module.java.dir}">
				<include name="**/*.java" />
			</fileset>
		</jar>
	</target>

	<target name="srcjar" description="Build source jar file">
		<mkdir dir="${module.distjar.dir}" />
		<jar destfile="${module.srcjar.name}">
			<fileset dir="${java.dir}">
				<include name="**/*.java" />
			</fileset>
		</jar>
	</target>

	<target name="docs" description="Create complete Javadoc documentation">
		<replace-dir dir="${module.javadoc.dir}" />
		<javadoc sourcepath="${module.java.dir}" destdir="${module.javadoc.dir}"
			windowtitle="${display.name}" source="1.5" author="true" version="true"
			use="true" packagenames="*">
			<doctitle>${display.name}</doctitle>
			<classpath refid="main-classpath" />
		</javadoc>
	</target>


	<target name="clean_unit" description="Clean unit tests jars">
		<echo message="Delete unit tests for this package!"/>
		<delete dir="${unit.classes.dir}" />
                <delete dir="${unit.report.dir}" />
                <delete dir="${unit.html.dir}" />
                <delete file="${unit.jar}" />
	</target>

	<target name="build_unit" description="Compile unit test java files">
                <mkdir dir="${unit.classes.dir}" />
                <javac fork="true" destdir="${unit.classes.dir}"
                       target="1.6" debug="true" deprecation="false" failonerror="true">
                        <src path="${unit.java.dir}" />
                        <classpath refid="main-classpath" />
                </javac>
                <jar destfile="${unit.jar}" basedir="${unit.classes.dir}"/>
        </target>

	<target name="unit" depends="jars, clean_unit, build_unit" description="Compile and run unit tests" >
		<mkdir dir="${unit.report.dir}" />
		<mkdir dir="${unit.html.dir}" />

		<junit printsummary="yes" showoutput="yes" failureProperty="unit.failure" dir="${basedir}">
			<sysproperty key="tests.to.run" value="${tests.to.run} "/>
			<jvmarg value="-Xms256m" />
			<jvmarg value="-Xmx1g" />

			<classpath refid="main-classpath" />
			<classpath path="${unit.jar}" />

			<formatter type="xml"  />
			<batchtest fork="yes" todir="${unit.report.dir}" >
				<fileset dir="${unit.classes.dir}" >
					<include name="**/*Test.class" />
				</fileset>
			</batchtest>
		</junit>


		<junitreport todir="${unit.html.dir}" >
			<fileset dir="${unit.report.dir}" > <include name="TEST-*.xml"/> </fileset>
			<report todir="${unit.html.dir}" format="frames"/>
		</junitreport> 

		<fail message="Unit test(s) failed!" if="unit.failure" />
	</target>

        <target name="pomgen" description="Build a pom file." depends="jars, srcjar, unit">
            <artifact:pom id="azkaban-common" groupId="azkaban" artifactId="azkaban-common" version="${release.version}" name="Azkaban Common">
                <dependency groupId="voldemort" artifactId="voldemort" version="0.70.1"/>
                <dependency groupId="voldemort" artifactId="voldemort-contrib" version="0.70.1"/>
                <dependency groupId="org.apache.velocity" artifactId="velocity" version="1.6.3"/>
                <dependency groupId="commons-io" artifactId="commons-io" version="1.4"/>
                <dependency groupId="org.apache.hadoop" artifactId="hadoop-core" version="0.20.2">
                    <exclusion groupID="org.mortbay.jetty" artifactId="jetty"/>
                    <exclusion groupID="org.mortbay.jetty" artifactId="jetty-util"/>
                    <exclusion groupID="org.mortbay.jetty" artifactId="servlet-api-2.5"/>
                </dependency>
                <dependency groupId="joda-time" artifactId="joda-time" version="1.6"/>
                <dependency groupId="org.slf4j" artifactId="slf4j-api" version="1.5.6"/>
                <dependency groupId="org.slf4j" artifactId="slf4j-log4j12" version="1.5.6"/>
                <dependency groupId="com.google.collections" artifactId="google-collections" version="1.0-rc5"/>
            </artifact:pom>
            <echo message="creating pom: ${mvn.pom}"/>
            <artifact:writepom pomRefId="azkaban-common" file="${mvn.pom}"/>
        </target>

        <target name="mvn-install" description="Install azkaban-common" depends="pomgen">
            <exec executable="mvn">
                <arg value="install:install-file"/>
                <arg value="-Dfile=${module.jar.name}"/>
                <arg value="-DpomFile=${mvn.pom}"/>
                <arg value="-Dversion=${release.version}"/>
                <arg value="-Dpackaging=jar"/>
            </exec>
            <exec executable="mvn">
                <arg value="install:install-file"/>
                <arg value="-Dfile=${module.srcjar.name}"/>
                <arg value="-DgroupId=azkaban"/>
                <arg value="-DartifactId=azkaban-common"/>
                <arg value="-Dversion=${release.version}"/>
                <arg value="-Dpackaging=jar"/>
                <arg value="-Dclassifier=sources"/>
            </exec>
        </target>

        <target name="mvn-deploy" description="Deploy azkaban-common" depends="pomgen">
            <exec executable="mvn">
                <arg value="deploy:deploy-file"/>
                <arg value="-Durl=${mvn.repository.location}"/>
                <arg value="-DrepositoryId=${mvn.repository.id}"/>
                <arg value="-Dfile=${module.jar.name}"/>
                <arg value="-DpomFile=${mvn.pom}"/>
                <arg value="-Dversion=${release.version}"/>
                <arg value="-Dpackaging=jar"/>
            </exec>
            <exec executable="mvn">
                <arg value="deploy:deploy-file"/>
                <arg value="-Durl=${mvn.repository.location}"/>
                <arg value="-DrepositoryId=${mvn.repository.id}"/>
                <arg value="-Dfile=${module.srcjar.name}"/>
                <arg value="-DgroupId=azkaban"/>
                <arg value="-DartifactId=azkaban-common"/>
                <arg value="-Dversion=${release.version}"/>
                <arg value="-Dpackaging=jar"/>
                <arg value="-Dclassifier=sources"/>
                <arg value="-DgeneratePom=false"/>
            </exec>
        </target>

</project>
<?xml version="1.0"?>
<project name="azkaban" basedir="." default="all"  xmlns:artifact="antlib:org.apache.maven.artifact.ant">
	<property name="batch.base.dir" value="${basedir}/.." />
	<property file="${batch.base.dir}/build.properties" />

	<property name="name" value="azkaban" />
	<property name="display.name" value="Azkaban" />
	<property name="author" value="Richard Park" />
	<property environment="env" />

	<!--
		set the build number based on environment variable, otherwise blank
	-->
	<property environment="env"
		description="System environment variables (including those set by Hudson)" />
	<condition property="curr.release.snapshot"
		value="${curr.release}-snapshot-${env.BUILD_NUMBER}" else="${curr.release}">
		<and>
			<isset property="env.BUILD_NUMBER" />
			<not>
				<equals arg1="" arg2="${env.BUILD_NUMBER}" trim="yes" />
			</not>
		</and>
	</condition>

	<!-- these will get set by the master build for mvn targets. -->
	<property name="release.version" value="${curr.release.snapshot}"/>
	<property name="mvn.repository.id" value="${mvn.repository.id.snapshot}"/>
	<property name="mvn.repository.location" value="${mvn.repository.location.snapshot}"/>

	<property name="module.dist.name" value="azkaban" />
	<property name="module.dist.base" value="${batch.base.dir}/${dist.dir}/azkaban" />
	<property name="module.dist.dir.war" value="${batch.base.dir}/${dist.dir}/war" />
	<property name="module.dist.dir" value="${batch.base.dir}/${dist.dir}/azkaban/jars" />
	<property name="module.dist.static" value="${batch.base.dir}/${dist.dir}/azkaban/web/static" />
	<property name="module.lib.dir" value="${batch.base.dir}/${lib.dir}" />
	<property name="module.classes.dir" value="${batch.base.dir}/${dist.dir}/azkaban/classes" />
	<property name="module.javadoc.dir" value="${batch.base.dir}/${dist.dir}/azkaban/javadoc" />
	<property name="module.java.dir" value="src/java" />
	<property name="module.jar.name" value="${module.dist.dir}/${module.dist.name}-${release.version}.jar" />
	<property name="module.war.name" value="${module.dist.dir.war}/${module.dist.name}-${release.version}.war" />
	<property name="module.srcjar.name" value="${module.dist.dir}/${module.dist.name}-${release.version}-src.jar" />

	<property name="unit.classes.dir" value="${batch.base.dir}/${dist.dir}/azkaban/unit_classes" />
	<property name="unit.java.dir" value="src/unit" />
	<property name="unit.report.dir" value="${batch.base.dir}/${dist.dir}/azkaban/unit_report" />
	<property name="unit.html.dir" value="${batch.base.dir}/${dist.dir}/azkaban/unit_html" />
	<property name="unit.jar" value="${module.dist.dir}/${module.dist.name}-${release.version}-unit.jar" />

	<property name="mvn.pom" value="${module.dist.dir}/${module.dist.name}-${release.version}.pom" />
	
	<path id="main.classpath">
		<fileset dir="${batch.base.dir}/${lib.dir}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${batch.base.dir}/${dist.dir}/azkaban-common/jars">
			<include name="*.jar" />
		</fileset>
		<pathelement path="${module.classes.dir}" />
		<pathelement path="src/unit/lib/azkaban-tests.jar" />
	</path>


	<macrodef name="replace-dir">
		<attribute name="dir" />
		<sequential>
			<delete dir="@{dir}" />
			<mkdir dir="@{dir}" />
		</sequential>
	</macrodef>

	<target name="all" depends="clean, jars, srcjar" description="Builds all.." />

	<target name="clean" description="Delete generated files." depends="clean_unit" >
		<delete dir="${module.dist.base}" />
		<delete dir="${module.dist.dir.war}" />
	</target>

	<target name="build" description="Compile main source tree java files">
		<replace-dir dir="${module.classes.dir}" />
		<!-- copy non-java files to classes dir to load from classpath -->
		<copy todir="${module.classes.dir}">
			<fileset dir="${module.java.dir}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>

		<replace-dir dir="${module.dist.static}" />
		<copy todir="${module.dist.static}">
			<fileset dir="${batch.base.dir}/azkaban/web/static">
				<exclude name="**/web.xml" />
			</fileset>
		</copy>

		<javac fork="true" destdir="${module.classes.dir}"
			target="1.6" debug="true" deprecation="false" failonerror="true">
			<src path="${module.java.dir}" />
			<classpath refid="main.classpath" />
		</javac>
	</target>

	<target name="jars" depends="build" description="Build server jar file">
		<mkdir dir="${module.dist.dir}" />
		<jar destfile="${module.jar.name}">
			<fileset dir="${module.classes.dir}">
				<include name="**/*.*" />
			</fileset>
			<!-- include xsds -->
			<fileset dir="${java.dir}">
				<include name="**/*.xsd" />
			</fileset>
		</jar>
	</target>

	<target name="srcjar" description="Build source jar file">
		<mkdir dir="${module.dist.dir}" />
		<jar destfile="${module.srcjar.name}">
			<fileset dir="${java.dir}">
				<include name="**/*.java" />
			</fileset>
		</jar>
	</target>


	<target name="war" depends="build" description="Build server war file">
		<replace-dir dir="${module.dist.dir.war}" />
       <echo message="azkaban building war ${name}-${release.version}" />
		<war destfile="${module.war.name}" webxml="${basedir}/web/web.xml">
			<classes dir="${module.classes.dir}" />
			<lib dir="${module.lib.dir}">
				<exclude name="servlet-api-2.5.jar" />
				<exclude name="src/**" />
			</lib>
			<lib dir="${batch.base.dir}/${dist.dir}/azkaban-common/jars">
			</lib>
			<lib dir="${batch.base.dir}/${dist.dir}/azkaban-common/jars">
			</lib>
			<fileset dir="${module.dist.static}/.." />
		</war>
	</target>

	<target name="clean_unit" description="Clean unite test class files">
		<delete dir="${unit.classes.dir}" />
		<delete dir="${unit.report.dir}" />
		<delete dir="${unit.html.dir}" />
		<delete file="${unit.jar}" />
	</target>

	<target name="build_unit" description="Compile unit test java files">
		<mkdir dir="${unit.classes.dir}" />
		<javac fork="true" destdir="${unit.classes.dir}"
			   target="1.6" debug="true" deprecation="false" failonerror="true">
			<src path="${unit.java.dir}" />
			<classpath refid="main.classpath" />
		</javac>
		<jar destfile="${unit.jar}" basedir="${unit.classes.dir}"/>
	</target>

	
	<target name="unit" depends="jars, clean_unit, build_unit" description="Compile and run unit tests" >
		<mkdir dir="${unit.report.dir}" />
		<mkdir dir="${unit.html.dir}" />

		<junit printsummary="yes" showoutput="yes" failureProperty="unit.failure" >
			<sysproperty key="tests.to.run" value="${tests.to.run} "/>
			<jvmarg value="-Xms256m" />
			<jvmarg value="-Xmx1g" />

			<classpath refid="main.classpath" />
			<classpath path="${unit.jar}" />

			<formatter type="xml"  />
			<batchtest fork="yes" todir="${unit.report.dir}" >
				<fileset dir="${unit.classes.dir}" >
					<include name="**/*Test.class" />
				</fileset>
			</batchtest>
		</junit>


		<junitreport todir="${unit.html.dir}" >
			<fileset dir="${unit.report.dir}" > <include name="TEST-*.xml"/> </fileset>
			<report todir="${unit.html.dir}" format="frames"/>
		</junitreport> 

		<fail message="Unit test(s) failed!" if="unit.failure" />
	</target>

	<target name="snapshot"
		description="Create a release-snapshot zip file with everything pre-built.">
		<create-release-artifacts version="${curr.release.snapshot}" />
	</target>

	<target name="release"
		description="Create a release zip file with everything pre-built.">
		<create-release-artifacts version="${curr.release}" />
	</target>

	<target name="docs" description="Create complete Javadoc documentation">
		<make-javadocs dir="${module.javadoc.dir}/all"
			packagenames="*" javadir="${java.dir}" />
		<make-javadocs dir="${module.javadoc.dir}/client"
			packagenames="voldemort.versioning.*, voldemort.client.*,voldemort.serialization.*"
			javadir="${java.dir}" />
	</target>

	<target name="redeploy" depends="war, deploy">
	</target>

	<taskdef file="tomcat-tasks.properties">
		<classpath>
			<path location="${module.lib.dir}/catalina-ant.jar" />
		</classpath>
	</taskdef>

	<target name="list" description="List Tomcat applications">
		<list url="${tomcat.manager.url}" username="${tomcat.manager.username}"
			password="${tomcat.manager.password}" />
	</target>

	<target name="deploy" description="Deploy application" depends="war">
		<deploy url="${tomcat.manager.url}" username="${tomcat.manager.username}"
			password="${tomcat.manager.password}" path="${tomcat.context}"
			update="true" war="file:${module.dist.dir.war}/${name}.war" />
	</target>

	<target name="undeploy" description="Undeploy application">
		<undeploy url="${tomcat.manager.url}" username="${tomcat.manager.username}"
			password="${tomcat.manager.password}" path="${tomcat.context}" />
	</target>

    <target name="pomgen" description="Build a pom file." depends="jars, srcjar, unit">
        <artifact:pom id="azkaban" groupId="azkaban" artifactId="azkaban" version="${release.version}" name="Azkaban">
            <dependency groupId="net.sf.jopt-simple" artifactId="jopt-simple" version="3.2"/>
            <dependency groupId="javax.mail" artifactId="mail" version="1.4"/>
            <dependency groupId="org.apache.tomcat" artifactId="servlet-api" version="6.0.26"/>
            <dependency groupId="org.json" artifactId="json" version="20090211"/>
            <dependency groupId="commons-fileupload" artifactId="commons-fileupload" version="1.2"/>
            <dependency groupId="jetty" artifactId="org.mortbay.jetty" version="5.1.4"/>
            <dependency groupId="azkaban" artifactId="azkaban-common" version="${release.version}"/>
            <dependency groupId="org.apache.commons" artifactId="commons-math" version="2.1"/>
            <dependency groupId="com.googlecode.json-simple" artifactId="json-simple" version="1.1"/>
        </artifact:pom>
        <echo message="creating pom: ${mvn.pom}"/>
        <artifact:writepom pomRefId="azkaban" file="${mvn.pom}"/>
    </target>

    <target name="mvn-install" description="Install azkaban" depends="pomgen">
        <exec executable="mvn">
            <arg value="install:install-file"/>
            <arg value="-Dfile=${module.jar.name}"/>
            <arg value="-DpomFile=${mvn.pom}"/>
            <arg value="-Dversion=${release.version}"/>
            <arg value="-Dpackaging=jar"/>
        </exec>
        <exec executable="mvn">
            <arg value="install:install-file"/>
            <arg value="-Dfile=${module.srcjar.name}"/>
            <arg value="-DgroupId=azkaban"/>
            <arg value="-DartifactId=azkaban"/>
            <arg value="-Dversion=${release.version}"/>
            <arg value="-Dpackaging=jar"/>
            <arg value="-Dclassifier=sources"/>
        </exec>
        <exec executable="mvn">
            <arg value="install:install-file"/>
            <arg value="-Dfile=${module.war.name}"/>
            <arg value="-DgroupId=azkaban"/>
            <arg value="-DartifactId=azkaban-war"/>
            <arg value="-Dversion=${release.version}"/>
            <arg value="-Dpackaging=war"/>
        </exec>
    </target>

    <target name="mvn-deploy" description="Deploy azkaban" depends="pomgen">
        <exec executable="mvn">
            <arg value="deploy:deploy-file"/>
            <arg value="-Durl=${mvn.repository.location}"/>
            <arg value="-DrepositoryId=${mvn.repository.id}"/>
            <arg value="-Dfile=${module.jar.name}"/>
            <arg value="-DpomFile=${mvn.pom}"/>
            <arg value="-Dversion=${release.version}"/>
            <arg value="-Dpackaging=jar"/>
        </exec>
        <exec executable="mvn">
            <arg value="deploy:deploy-file"/>
            <arg value="-Durl=${mvn.repository.location}"/>
            <arg value="-DrepositoryId=${mvn.repository.id}"/>
            <arg value="-Dfile=${module.srcjar.name}"/>
            <arg value="-DgroupId=azkaban"/>
            <arg value="-DartifactId=azkaban"/>
            <arg value="-Dversion=${release.version}"/>
            <arg value="-Dpackaging=jar"/>
            <arg value="-Dclassifier=sources"/>
            <arg value="-DgeneratePom=false"/>
        </exec>
        <exec executable="mvn">
            <arg value="deploy:deploy-file"/>
            <arg value="-Durl=${mvn.repository.location}"/>
            <arg value="-DrepositoryId=${mvn.repository.id}"/>
            <arg value="-Dfile=${module.war.name}"/>
            <arg value="-DgroupId=azkaban"/>
            <arg value="-DartifactId=azkaban-war"/>
            <arg value="-Dversion=${release.version}"/>
            <arg value="-Dpackaging=war"/>
        </exec>
    </target>

</project>
<?xml version="1.0"?>

<project name="azkaban" basedir="." default="all">
	<property name="azkaban.base.dir" value="${basedir}" />
	<property file="build.properties" />

	<property name="name" value="azkaban" />
	<property name="display.name" value="Azkaban" />
	<property name="author" value="Richard Park" />
	<property environment="env" />

	<!-- set the build number based on environment variable, otherwise blank -->
	<property environment="env" description="System environment variables (including those set by Hudson)" />
	<condition property="curr.release.snapshot" value="${curr.release}-snapshot-${env.BUILD_NUMBER}" else="${curr.release}">
		<and>
			<isset property="env.BUILD_NUMBER" />
			<not>
				<equals arg1="" arg2="${env.BUILD_NUMBER}" trim="yes" />
			</not>
		</and>
	</condition>

	<target name="all" depends="clean, jars, war, unit" description="Builds all jars" />

	<target name="clean" description="Delete generated files.">
		<!--echo message="Deleting dist directory: ${azkaban.base.dir}/${dist.dir}, ${azkaban.base.dir}/${build.dir}" />
		<delete dir="${azkaban.base.dir}/${dist.dir}" /-->

		<echo message="Deleting generated files in azkaban-common" />
		<subant target="clean">
			<fileset dir="azkaban-common" includes="build.xml" />
		</subant>

		<echo message="Deleting generated files in azkaban" />
		<subant target="clean">
			<fileset dir="azkaban" includes="build.xml" />
		</subant>
	</target>

	<target name="jars" depends="clean" description="Compile main source tree java files">
		<echo message="building azkaban-common.jar" />
		<subant target="jars">
			<fileset dir="azkaban-common" includes="build.xml" />
		</subant>
		<echo message="building azkaban.jar" />
		<subant target="jars">
			<fileset dir="azkaban" includes="build.xml" />
		</subant>
	</target>

    <target name="jar-with-deps" depends="jars" description="Make big bad jar">
        <delete dir="${dist.dir}/jar-with-deps"/>
        <mkdir dir="${dist.dir}/jar-with-deps"/>

        <jar jarfile="${dist.dir}/jar-with-deps/${name}-self-contained-${curr.release}.jar" filesetmanifest="merge">
            <manifest>
                <attribute name="Main-Class" value="azkaban.jobs.CommandLineJobRunner"/>
            </manifest>
            <fileset dir="${dist.dir}/azkaban/classes"/>
            <fileset dir="${dist.dir}/azkaban-common/classes"/>
            <zipgroupfileset dir="${lib.dir}" includes="*.jar" excludes="jarjar-1.0.jar" />
        </jar>
    </target>

	<target name="unit" 
			description="Compile and run unit tests"
			depends="jars" >

		<!--. Run JUnit tests: use -Dtests.to.run=testA,testB,... to run tests selectively"--> 
		<echo message="building and running unit tests" />
		<subant target="unit">
			<fileset dir="azkaban-common" includes="build.xml" />
		</subant>
		<subant target="unit">
			<fileset dir="azkaban" includes="build.xml" />
		</subant>

	</target>

    <target name="build-tests" description="Generate test packages.">
		<echo message="Create test jar in test/dist/azkaban-tests.zip " />
		<subant target="build-tests">
			<fileset dir="test" includes="build.xml" />
		</subant>
	</target>

	<target name="war" depends="jars" description="creates azkaban war.">
		<echo message="building azkaban.war" />
		<subant target="war">
			<fileset dir="azkaban" includes="build.xml" />
		</subant>
	</target>

	<target name="deploy" depends="all" description="Deploys azkaban to tomcat.">
		<subant target="deploy">
			<fileset dir="azkaban" includes="build.xml" />
		</subant>
	</target>

	<target name="snapshot" description="Create a release snapshot artifacts">
		<create-release-artifacts version="${curr.release.snapshot}" />
	</target>

	<target name="release" description="Create a release artifacts">
		<create-release-artifacts version="${curr.release}" />
	</target>

	<macrodef name="create-release-artifacts">
		<attribute name="version" />
		<sequential>
			<antcall target="jars" />
			<zip destfile="${dist.dir}/${name}-@{version}.zip">
				<zipfileset dir="." prefix="azkaban-@{version}" filemode="755" includes="bin/*" />
				<zipfileset dir="." prefix="azkaban-@{version}" includes="**">
					<exclude name="${dist.dir}/azkaban"/>
					<exclude name="${dist.dir}/azkaban-common"/>
					<exclude name="${dist.dir}/*.tar.gz"/>
					<exclude name="${dist.dir}/*.zip"/>
					<exclude name="bin/*" />
					<exclude name=".git*/**" />
				</zipfileset>
			</zip>
			<tar destfile="${dist.dir}/${name}-@{version}.tar.gz" compression="gzip" longfile="gnu">
				<tarfileset dir="." prefix="azkaban-@{version}" filemode="755" includes="bin/*" />
				<tarfileset dir="." prefix="azkaban-@{version}" includes="**">
					<exclude name="${dist.dir}/azkaban"/>
					<exclude name="${dist.dir}/azkaban-common"/>
					<exclude name="${dist.dir}/*.tar.gz"/>
					<exclude name="${dist.dir}/*.zip"/>
					<exclude name="bin/*" />
					<exclude name=".git*/**" />
				</tarfileset>
			</tar>
		</sequential>
	</macrodef>
	
	<target name="mvn-deploy" description="Maven deploy all">
		<echo message="Running mvn deploy on azkaban-common" />
		<subant target="mvn-deploy" inheritall="true">
			<fileset dir="azkaban-common" includes="build.xml" />
		</subant>
		<echo message="Running mvn deploy on azkaban" />
		<subant target="mvn-deploy" inheritall="true">
			<fileset dir="azkaban" includes="build.xml" />
		</subant>
	</target>

	<target name="mvn-install" description="Maven install all">
		<echo message="Running mvn install on azkaban-common" />
		<subant target="mvn-install">
			<fileset dir="azkaban-common" includes="build.xml" />
		</subant>
		<echo message="Running mvn install on azkaban" />
		<subant target="mvn-install">
			<fileset dir="azkaban" includes="build.xml" />
		</subant>
	</target>
	 
	<target name="setsnapshotversion" description="Set the version to be snapshot">
		<echo message="Setting Snapshot Version" />
		<property name="release.version" value="${curr.release.snapshot}"/>
		<property name="mvn.repository.location" value="${mvn.repository.location.snapshot}"/>
		<property name="mvn.repository.id" value="${mvn.repository.id.snapshot}"/>
	</target>
 
	<target name="setreleaseversion" description="Set the version to be release">
		<echo message="Setting Release Version" />
		<property name="release.version" value="${curr.release}"/>
		<property name="mvn.repository.location" value="${mvn.repository.location.release}"/>
		<property name="mvn.repository.id" value="${mvn.repository.id.release}"/>
	</target>
	
	<target name="mvn-deploysnapshot" description="Deploy the snapshot version" depends="setsnapshotversion, mvn-deploy" />
	<target name="mvn-deployrelease" description="Deploy the release version" depends="setreleaseversion, mvn-deploy" />
	<target name="mvn-installsnapshot" description="Install the snapshot version" depends="setsnapshotversion, mvn-install" />
	<target name="mvn-installrelease" description="Install the release version" depends="setreleaseversion, mvn-install" />

</project>
<?xml version="1.0"?>
<project name="mr-kluj" default="jar-with-deps">
    <property name="package.name" value="mr-kluj-1.0.0"/>
    <property name="base.dir" value="."/>
    <property name="lib.dir" value="${base.dir}/lib"/>
    <property name="jar-with-deps.dir" value="${base.dir}/dist/jar-with-deps"/>

    <target name="jar-with-deps" description="Make big bad jar">
        <delete dir="${jar-with-deps.dir}"/>
        <mkdir dir="${jar-with-deps.dir}"/>

        <exec executable="lein">
            <arg value="clean"/>
        </exec>
        <exec executable="lein">
            <arg value="javac"/>
        </exec>
        <exec executable="lein">
            <arg value="jar"/>
        </exec>

        <jar jarfile="${jar-with-deps.dir}/${package.name}.jar" filesetmanifest="merge">
            <manifest>
                <attribute name="Main-Class" value="com.linkedin.mr_kluj.GenericClojureJob"/>
            </manifest>
            <zipgroupfileset file="mr-kluj-1.0.0-SNAPSHOT.jar"/>
            <zipgroupfileset dir="${lib.dir}" includes="*.jar"/>
        </jar>
    </target>
</project>
<?xml version="1.0"?>
<project name="azkaban-pig-example" basedir="." default="all">
	<property name="base.dir" value="${basedir}/../.." />
	<property file="${base.dir}/build.properties" />
	<property name="example.java.dir" value = "./java"/>
	<property name="example.conf.dir" value = "./conf"/>
	<property name="example.lib.dir" value = "./lib"/>
	<property name="example.dist.dir" value = "./dist"/>
	<property name="example.package.dir" value = "${example.dist.dir}/package"/>
	<property name="example.class.dir" value = "${example.dist.dir}/classes"/>
	<property name="package.name" value = "helloworld"/>

	<path id="main-classpath">
		<fileset dir="${example.lib.dir}">
			<include name="*.jar" />
		</fileset>
		<pathelement path="${example.class.dir}" />
	</path>
	
	<target name="all" depends="clean, zip" description="Builds and packages the job" />
	
	<target name="clean" description="Clean all created files" >
	    <echo message="cleaning all jobs."/>
		<delete dir="${example.class.dir}"/>
		<delete dir="${example.package.dir}"/>
	</target>
	
	<target name="build" description="build class files">
		<mkdir dir="${example.class.dir}"/>
	    <javac fork="true" destdir="${example.class.dir}" target="1.6" debug="true" deprecation="true" failonerror="true">
	      <src path="${example.java.dir}"/>
	      <classpath refid="main-classpath" />
	    </javac>
	</target>
	
	<target name="jar" depends="build" description="build jars and include script files">
		<mkdir dir="${example.package.dir}" />
		<jar destfile="${example.package.dir}/${package.name}.jar">
			<fileset dir="${example.class.dir}">
				<include name="**/*.*" />
			</fileset>
		</jar>
	</target>
	
	<target name="zip" depends="jar" description="build install zip">
		<mkdir dir="${example.dist.dir}" />
		<zip destfile="${example.dist.dir}/${package.name}.zip">
			<fileset dir="${example.lib.dir}">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="${example.package.dir}">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="${example.conf.dir}">
				<include name="**/*.*" />
			</fileset>
		</zip>
	</target>
</project><?xml version="1.0"?>
<project name="azkaban-pig-example" basedir="." default="all">
	<property name="base.dir" value="${basedir}/../.." />
	<property file="${base.dir}/build.properties" />
	<property name="example.java.dir" value = "./java"/>
	<property name="example.conf.dir" value = "./conf"/>
	<property name="example.lib.dir" value = "./lib"/>
	<property name="example.resource.dir" value = "./resources"/>
	<property name="example.script.dir" value = "./script"/>
	<property name="example.dist.dir" value = "./dist"/>
	<property name="example.class.dir" value = "${example.dist.dir}/classes"/>
	<property name="package.name" value = "pig-example"/>

	<path id="main-classpath">
		<fileset dir="${example.lib.dir}">
			<include name="*.jar" />
		</fileset>
		<pathelement path="${example.class.dir}" />
	</path>
	
	<target name="all" depends="clean, zip" description="Builds and packages the job" />
	
	<target name="clean" description="Clean all created files" >
	    <echo message="cleaning all jobs."/>
	</target>
	
	<target name="zip" description="build install zip">
		<mkdir dir="${example.dist.dir}" />
		<zip destfile="${example.dist.dir}/${package.name}.zip">
			<fileset dir="${example.lib.dir}">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="${example.conf.dir}">
				<include name="**/*.*" />
			</fileset>
			<fileset dir="${example.script.dir}">
				<include name="**/*.*" />
			</fileset>
		</zip>
	</target>
</project><?xml version="1.0"?>
<project name="azkaban-test-job-set" default="all">
    <property name="package.name" value="azkaban-test-job-set"/>
    <property name="base.dir" value="."/>
    <property name="java.dir" value="${base.dir}/src/main/java"/>
    <property name="conf.dir" value="${base.dir}/conf"/>
    <property name="lib.dir" value="${base.dir}/../dist/jar-with-deps"/>
    <property name="dist.dir" value="${base.dir}/dist"/>
    <property name="dist.lib.dir" value="${dist.dir}/lib"/>
    <property name="jar-with-deps.dir" value="${dist.dir}/jar"/>
    <property name="class.dir" value="${dist.dir}/classes"/>
    <property name="job.out.dir" value="${dist.dir}/job"/>
    <property name="zip.out.dir" value="${dist.dir}/zip"/>

    <path id="main-classpath">
        <fileset dir="${lib.dir}">
            <include name="*.jar" />
        </fileset>
        <pathelement path="${class.dir}" />
    </path>

    <target name="all" depends="clean, jar-with-deps" description="Builds and packages the job" />

    <target name="clean" description="Clean all created files" >
        <delete dir="${dist.dir}"/>
    </target>

    <target name="dist" depends="compile, dist-lib" description="dist it"/>

    <target name="compile" description="compile me">
        <delete dir="${class.dir}"/>
        <mkdir dir="${class.dir}"/>
        <javac fork="true" destdir="${class.dir}" target="1.6" debug="true" deprecation="true" failonerror="true">
            <src path="${java.dir}"/>
            <classpath refid="main-classpath"/>
        </javac>
    </target>

    <target name="dist-lib" description="copies libs into dist folder">
        <delete dir="${dist.lib.dir}"/>
        <mkdir dir="${dist.lib.dir}"/>
        <copy todir="${dist.lib.dir}">
            <fileset dir="${lib.dir}" includes="*.jar" excludes="jarjar-1.0.jar"/>
        </copy>
    </target>

    <target name="jar-with-deps" depends="dist" description="Make big bad jar">
        <delete dir="${jar-with-deps.dir}"/>
        <mkdir dir="${jar-with-deps.dir}"/>

        <jar jarfile="${jar-with-deps.dir}/${package.name}.jar" filesetmanifest="merge">
            <fileset dir="${class.dir}"/>
            <zipgroupfileset dir="${dist.lib.dir}" includes="*.jar"/>
        </jar>
    </target>

    <target name="job" depends="jar-with-deps" description="build job directory ala Azkaban">
        <delete dir="${job.out.dir}"/>
        <mkdir dir="${job.out.dir}"/>
        <copy todir="${job.out.dir}">
            <fileset dir="${jar-with-deps.dir}">
                <include name="**/${package.name}.jar" />
            </fileset>
            <fileset dir="${conf.dir}">
                <include name="**/*.*" />
            </fileset>
        </copy>
    </target>

    <target name="zip" depends="job" description="build install zip">
        <mkdir dir="${zip.out.dir}" />
        <zip destfile="${zip.out.dir}/${package.name}.zip">
            <fileset dir="${job.out.dir}"/>
        </zip>
    </target>
</project>
<?xml version="1.0"?>

<project name="test" basedir="." default="jar">

	<!-- set the base directory -->
	<property name="batch.base.dir" value="${basedir}/.." />
	<property file="${batch.base.dir}/build.properties" />

	<property name="base.dir" value="." />
	<property name="dist.base" value="${base.dir}/dist" />
	<property name="classes.dir" value="${dist.base}/classes" />
	<property name="java.dir" value="${base.dir}/src/java" />
	<property name="jar.file" value="${dist.base}/azkaban-tests.jar" />
	<property name="zip.file" value="${dist.base}/azkaban-tests.zip" />

	<path id="main-classpath">
		<fileset dir="${batch.base.dir}/lib">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${batch.base.dir}/${dist.dir}/azkaban-common/jars">
			<include name="*.jar" />
		</fileset>
	</path>


	<!-- macro to delete and recreate a directory -->
	<macrodef name="replace-dir">
		<attribute name="dir" />
		<sequential>
			<delete dir="@{dir}" />
			<mkdir dir="@{dir}" />
		</sequential>
	</macrodef>

	<target name="clean" description="Delete generated files.">
		<echo message="cleaning all test jobs." />
		<delete dir="${dist.base}" />
		<delete file="${jar.file}" />
	</target>

	
	<target name="jars" description="Makes all test jars.">
		<echo message="Makes test jar." />

        <mkdir dir="${classes.dir}" />

        <javac fork="true" destdir="${classes.dir}" target="1.6" debug="true" deprecation="false" failonerror="true">
            <src path="${java.dir}" />
            <classpath refid="main-classpath"/>
        </javac>

        <jar destfile="${jar.file}" >
             <fileset dir="${classes.dir}" >
                 <include name="**/*.class" />
             </fileset>
        </jar>
    </target> 

	<target name="build-tests" description="Build test zip file" depends="clean, jars">
		<!--zip destfile="${zip.file}" basedir="${base.dir}/jobs"> </zip-->
	</target>


	<target name="deploy" description="deploy all modules.">
		<echo message="Deploying all modules." />
		<subant target="deploy">
			<fileset dir="." includes="*/build.xml" />
		</subant>
	</target>

	<target name="undeploy" description="deploy all modules.">
		<echo message="Undeploying all modules." />
		<subant target="undeploy">
			<fileset dir="." includes="*/build.xml" />
		</subant>
	</target>

	<target name="redeploy" description="deploy all modules.">
		<echo message="Redeploying all modules." />
		<subant target="redeploy">
			<fileset dir="." includes="*/build.xml" />
		</subant>
	</target>


</project>
<?xml version="1.0"?>

<project name="common-build" basedir="." default="common-redeploy">

	<!-- Setting dist path specific to jobs. -->
	<property name="module.dist.dir"
		value="${batch.base.dir}/dist/test/jobs/${ant.project.name}" />
	<property file="${batch.base.dir}/build.properties" />

	<!-- Override/set  paths to module specific paths -->
	<property name="module.classes.dir"
		value="${batch.base.dir}/dist/test/classes/${ant.project.name}" />
	<property name="module.javadoc.dir" value="${batch.base.dir}/${javadoc.dir}" />

	<property name="module.java.dir" value="java" />
	<property name="module.scala.dir" value="impl/scala" />
	<property name="module.conf.dir" value="conf" />

	<property name="module.distconf.dir" value="${module.dist.dir}" />
	<property name="module.distjar.dir" value="${module.dist.dir}" />
	<property name="module.jar.name" value="${module.distjar.dir}/${ant.project.name}.jar" />

	<!--
		<echo message="batch.base.dir path: ${batch.base.dir}"/> <echo
		message="module.dist.dir path: ${module.dist.dir}"/> <echo
		message="module.classes.dir path: ${module.classes.dir}"/> <echo
		message="module.javadoc.dir path: ${module.javadoc.dir}"/> <echo
		message="module.jar.name path: ${module.jar.name}"/>
	-->

	<path id="main-classpath">
		<pathelement path="${module.classes.dir}" />
	</path>

	<path id="scala-source-path">
		<pathelement path="${module.scala.dir}" />
	</path>

	<!-- macro to delete and recreate a directory -->
	<macrodef name="replace-dir">
		<attribute name="dir" />
		<sequential>
			<delete dir="@{dir}" />
			<mkdir dir="@{dir}" />
		</sequential>
	</macrodef>

	<target name="init">
		<path id="build.classpath">
			<!--<pathelement location="${your.path}"   />-->
			<pathelement location="${build.dir}" />
		</path>
		<taskdef resource="net/sf/antcontrib/antcontrib.properties">
			<classpath>
				<pathelement location="${batch.base.dir}/${lib.dir}/ant-contrib-1.0b3.jar" />
			</classpath>
		</taskdef>
	</target>

	<target name="common-deploy" depends="common-jar"
		description="build the jar file and copy job confs to dist.">
		<echo message="Copying jobs/properties file in: ${module.distconf.dir}" />
		<echo message="building job jar in: ${module.distjar.dir}" />
	</target>

	<target name="common-undeploy" depends="common-clean"
		description="clean the dist and remove jar and conf." />

	<target name="common-redeploy" depends="common-undeploy, common-deploy"
		description="Clean and Build jar files and copy config to dist." />

	<target name="common-clean" description="Delete generated files.">
		<delete dir="${module.dist.dir}" />
		<delete dir="${module.classes.dir}" />
		<delete dir="${module.javadoc.dir}" />
	</target>

	<target name="common-build" description="Compile main source tree java files">
		<!-- Build common/azkaban-app target -->
		<mkdir dir="${module.classes.dir}" />
		<!-- copy non-java files to classes dir to load from classpath -->
		<copy todir="${module.classes.dir}">
			<fileset dir="${module.java.dir}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<javac fork="true" destdir="${module.classes.dir}"
			target="1.6" debug="true" deprecation="true" failonerror="true">
			<src path="${module.java.dir}" />
			<classpath refid="main-classpath" />
		</javac>
	</target>

	<!--
		currently jar/copyconf writes to same directory hence we cant clean
		them. hack for now
	-->
	<target name="common-jar" depends="common-build" description="Build server jar file">
		<mkdir dir="${module.distjar.dir}" />
		<antcall target="common-copyconf" />
		<jar destfile="${module.jar.name}">
			<!-- include pig scripts -->
			<fileset dir="">
				<include name="**/*.pig" />
			</fileset>

			<fileset dir="${module.classes.dir}">
				<include name="**/*.*" />
			</fileset>
			<!-- include src code for ide convenience -->
			<fileset dir="${module.java.dir}">
				<include name="**/*.java" />
			</fileset>
		</jar>
	</target>

	<target name="common-copyconf" description="copy the job Conf files to dist.">
		<mkdir dir="${module.distconf.dir}" />
		<delete>
			<fileset dir="${module.distconf.dir}" includes="**/*.job" />
		</delete>
		<!-- copy conf files to dir -->
		<copy todir="${module.distconf.dir}">
			<fileset dir="${module.conf.dir}">
				<include name="*.*" />
				<include name="*/*.*" />
				<include name="*/*/*.*" />
				<include name="*/*/*/*.*" />
			</fileset>
		</copy>
	</target>

	<target name="common-docs" description="Create complete Javadoc documentation">
		<replace-dir dir="${module.javadoc.dir}" />
		<javadoc sourcepath="${module.java.dir}" destdir="${module.javadoc.dir}"
			windowtitle="${display.name}" source="1.5" author="true" version="true"
			use="true" packagenames="*">
			<doctitle>${display.name}</doctitle>
			<classpath refid="main-classpath" />
		</javadoc>
	</target>

</project>
