<?xml version="1.0" encoding="UTF-8"?>
<project name="Kahlua" basedir="." default="all">
	<property file="local.properties" />
	<property file="version.properties" />

	<property name="version" value="${lua.version}_${kahlua.major}.${kahlua.minor}.${kahlua.fix}" />
	
	<dirname property="baseDir" file="${ant.file}"/>
	
	<property name="emma.dir" value="/usr/share/java" />

	<property name="cldc11.src.dir"       value="${baseDir}/cldc11/src"/>
	<property name="core.src.dir"       value="${baseDir}/core/src"/>
	<property name="j2se.src.dir"       value="${baseDir}/j2se/src"/>
	<property name="interpreter.src.dir"       value="${baseDir}/interpreter/src"/>

	<property name="build.dir"     value="${baseDir}/bin"/>
	<property name="classes.dir"     value="${build.dir}/classes"/>

	<property name="test.dir"       value="${baseDir}/testsuite"/>
	<property name="test.src.dir"       value="${test.dir}/src"/>
	<property name="test.build.dir"     value="${test.dir}/bin"/>
	<property name="test.classes.dir"     value="${test.build.dir}/classes"/>
	<property name="test.lua.output.dir"     value="${test.build.dir}/lua"/>
	<property name="test.lua.input.dir"     value="${test.dir}/lua"/>
	<property name="test.emma.coverage.dir"     value="${test.dir}/coverage"/>

	<path id="cldc11.dependencies">
        <pathelement path="${classes.dir}/core"/>
		<pathelement location="${baseDir}/lib/cldcapi11.jar" />
	</path>

    <path id="j2se.dependencies">
        <pathelement path="${classes.dir}/core"/>
    </path>

    <path id="interpreter.dependencies">
        <path refid="j2se.dependencies" />
        <pathelement path="${classes.dir}/j2se"/>
        <pathelement location="${baseDir}/interpreter/lib/jsyntaxpane-0.9.5.jar" />
    </path>

	<path id="main.classpath">
		<pathelement path="${classes.dir}/j2se"/>
        <path refid="j2se.dependencies" />
	</path>

	<path id="interpreter.classpath">
		<pathelement path="${classes.dir}/interpreter"/>
        <path refid="interpreter.dependencies" />
	</path>

	<path id="test.classpath">
		<path refid="main.classpath" />
		<pathelement path="${test.classes.dir}"/>
	</path>

	<path id="emma.lib" >
		<pathelement location="${emma.dir}/emma.jar" />
		<pathelement location="${emma.dir}/emma_ant.jar" />
	</path>
	<taskdef resource="emma_ant.properties" classpathref="emma.lib" />

	<!-- Main targets -->
	<target name="all" depends="package, run-test" />
	
	<target name="clean" description="Removes old build files">
		<delete dir="${build.dir}" failonerror="false"/>
		<delete dir="${test.build.dir}" failonerror="false"/>
		<delete dir="${test.classes.dir}" failonerror="false"/>
	</target>

	<target name="setup">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${classes.dir}/core"/>
		<mkdir dir="${classes.dir}/j2se"/>
		<mkdir dir="${classes.dir}/interpreter"/>
		<mkdir dir="${classes.dir}/cldc11"/>
		<mkdir dir="${build.dir}/core-src-replaced"/>

		<mkdir dir="${test.build.dir}"/>
		<mkdir dir="${test.classes.dir}"/>
		<mkdir dir="${test.lua.output.dir}"/>
	</target>

	<target name="compile" depends="setup, compile-core, compile-cldc11, compile-j2se, compile-interpreter" description="Compiles Kahlua">
	</target>
	
	<target name="build" depends="compile, build-stdlib" description="Builds Kahlua">
	</target>
	
	<target name="compile-core" depends="setup">
		<copy todir="${build.dir}/core-src-replaced">
			<fileset dir="${core.src.dir}" />
		</copy>
		<replace dir="${build.dir}/core-src-replaced" replacefilterfile="version.properties">
		</replace>
		<javac
			destdir="${classes.dir}/core"
			debug="true"
			target="1.4"
			source="1.4"
			classpathref="cldc11.dependencies"
		>
			<compilerarg value="-bootclasspath" />
			<compilerarg value="" />

			<src path="${build.dir}/core-src-replaced"/>
		</javac>
	</target>

	<target name="compile-cldc11" depends="compile-core">
		<javac
			destdir="${classes.dir}/cldc11"
			debug="true"
			target="1.4"
			source="1.4"
			classpathref="cldc11.dependencies"
		>
			<classpath>
				<pathelement location="${classes.dir}/core" />
			</classpath>
			<compilerarg value="-bootclasspath" />
			<compilerarg value="" />

			<src path="${cldc11.src.dir}"/>
		</javac>
	</target>

	<target name="compile-j2se" depends="compile-core">
		<javac
			destdir="${classes.dir}/j2se"
			debug="true"
			target="1.5"
			source="1.5"
            classpathref="j2se.dependencies"
		>
			<src path="${j2se.src.dir}"/>
		</javac>
        <copy todir="${classes.dir}/j2se">
            <fileset dir="${baseDir}/j2se/resources">
            </fileset>
        </copy>
	</target>

	<target name="compile-interpreter" depends="compile-j2se">
		<javac
			destdir="${classes.dir}/interpreter"
			debug="true"
            classpathref="interpreter.dependencies"
		>
			<src path="${interpreter.src.dir}"/>
		</javac>
        <copy todir="${classes.dir}/interpreter">
            <fileset dir="${baseDir}/interpreter/resources">
            </fileset>
        </copy>
	</target>

	<target name="annotation-processor-j2se" depends="compile-j2se">
		<delete dir="${build.dir}/annotation-tmp" />
		<mkdir dir="${build.dir}/annotation-tmp" />
		<javac
				destdir="${build.dir}/annotation-tmp"
				debug="on"
				deprecation="on"
				optimize="on"
                classpathref="main.classpath"
				>
			<src path="${j2se.src.dir}"/>
			<compilerarg value="-processor"/>
			<compilerarg value="se.krka.kahlua.integration.processor.LuaDebugDataProcessor"/>
		</javac>
		<move toDir="${classes.dir}/j2se">
			<fileset dir="${build.dir}/annotation-tmp">
				<include name="**/*.luadebugdata" />
			</fileset>
		</move>
		<delete dir="${build.dir}/annotation-tmp" />
	</target>

    <target name="package" depends="setup, build" description="Package the final kahlua jar">
    	<jar jarfile="${build.dir}/kahlua-${version}-core.jar">
    		<fileset dir="${classes.dir}/core" />
    	</jar>
    	<jar jarfile="${build.dir}/kahlua-${version}-cldc11.jar">
    		<fileset dir="${classes.dir}/cldc11" />
    	</jar>
    	<jar jarfile="${build.dir}/kahlua-${version}-j2se.jar">
    		<fileset dir="${classes.dir}/j2se" />
    	</jar>
    	<jar jarfile="${build.dir}/kahlua-${version}-interpreter.jar">
    		<fileset dir="${classes.dir}/interpreter" />
    	</jar>
    </target>

	<target name="release" depends="setup" description="Create a release zip">
		<tstamp />
		<zip zipfile="${build.dir}/kahlua-release-${DSTAMP}.zip">
			<fileset dir="${baseDir}">
				<include name="build.xml" />
				<include name="version.properties" />
				
				<include name="resources/**" />
				<include name="lib/**" />
				<include name="docs/**" />
				<include name="src/**" />
				<include name="core/**" />
				<include name="j2se/**" />
				<include name="interpreter/**" />
				<include name="cldc11/**" />

				<include name="testsuite/**" />
				<exclude name="testsuite/bin/**" />
				<exclude name="testsuite/coverage/**" />

				<include name="contrib/j2se-util/**" />
				<exclude name="contrib/j2se-util/bin/**" />

				<include name="contrib/midlet/resources/**" />
				<include name="contrib/midlet/src/**" />
				<include name="contrib/midlet/build.xml" />

				<include name="contrib/midlet-interpreter/src/**" />
				<include name="contrib/midlet-interpreter/build.xml" />

				<include name="contrib/j2se-interpreter/src/**" />
				<include name="contrib/j2se-interpreter/run.sh" />
				<include name="contrib/j2se-interpreter/build.xml" />

				<exclude name="**/.svn/**" />
			</fileset>
		</zip>
	</target>

	<target name="build-stdlib" depends="compile-test">
		<java classname="LuaC" fork="true" dir="${baseDir}">
			<classpath location="${instrumented.dir}" />
			<classpath refid="test.classpath" />
			
			<arg value="${baseDir}/core/resources/stdlib.lua" />
			<arg value="${classes.dir}/core/stdlib.lbc" />
		</java>
	</target>
	
	<target name="luac">
		<fail unless="input" message="Syntax: ant luac -Dinput=&lt;file> -Doutput=&lt;file2>" />
		<fail unless="output" message="Syntax: ant luac -Dinput=&lt;file> -Doutput=&lt;file2>" />
		<available property="exists" file="${input}" />		
		<fail unless="exists" message="${input} not found." />
		<java classname="LuaC" fork="true" dir="${baseDir}">
			<classpath location="${instrumented.dir}" />
			<classpath refid="test.classpath" />
			
			<arg value="${input}" />
			<arg value="${output}" />
		</java>
	</target>
	
	<!-- Test stuff -->
	<target name="compile-test" depends="setup, compile" description="Compile test classes">
		<javac
			destdir="${test.classes.dir}"
			debug="true"
			target="1.5"
			source="1.5"
			classpathref="main.classpath"
		>
			<src path="${test.src.dir}"/>
		</javac>
	</target>

    <target name="test-depend" depends="setup, build, compile-test">
    </target>

	<target name="debug-listen">
		<property name="debugargs" value="-Xdebug -Xrunjdwp:transport=dt_socket,server=n,address=5005,suspend=y" />
	</target>
	
	<target name="default-debugargs">
		<property name="debugargs" value="" />
	</target>
	
    <target name="run-interpreter" depends="build" description="Run the gui interpreter">
		<java classname="se.krka.kahlua.j2se.interpreter.InteractiveShell" fork="true" dir="${baseDir}">
			<classpath refid="interpreter.classpath" />
		</java>
    </target>

    <target name="run-test" depends="test-depend, default-debugargs" description="Run the test-suite">
		<property name="test.file" value="" />
		<java classname="Test" fork="true" dir="${baseDir}">
			<jvmarg line="${debugargs}" />
			<classpath location="${instrumented.dir}" />
			<classpath refid="test.classpath" />
			
			<arg value="${test.lua.input.dir}" />
			<arg value="${test.file}" />
		</java>
    </target>

	<target name="clean-emma">
		<delete dir="${test.emma.coverage.dir}" />
	</target>

	<target name="emma" depends="clean-emma, test-depend" description="Run Emma to get code coverage">
		<property name="test.file" value="" />
		<emmajava enabled="true" libclasspathref="emma.lib"
			classname="Test"
			classpathref="test.classpath"
			sort="+class,+method,+name,+block"
			metrics="method:100,block:90,line:80,class:100"
		>
			<arg value="${test.lua.input.dir}" />
			<arg value="${test.file}" />

			<filter includes="se.krka.kahlua.*" />
			<sourcepath>
				<dirset dir="${baseDir}/src" />
			</sourcepath>
			<txt outfile="${test.emma.coverage.dir}/coverage.txt" />
			<xml outfile="${test.emma.coverage.dir}/coverage.xml" />
			<html outfile="${test.emma.coverage.dir}/coverage.html"  />
		</emmajava>
	</target>

	<target name="compile-doclet">
		<mkdir dir="${build.dir}/doclet"/>
		<javac
			destdir="${build.dir}/doclet"
			debug="true"
		>
			<src path="javadoc/src"/>
		</javac>
	</target>
	
	<target name="javadoc" description="Generate javadoc" depends="compile-doclet">
		<javadoc 
				doclet="ExcludeDoclet"
				docletpath="${build.dir}/doclet"
				destdir="${build.dir}/javadoc"
				>
				<fileset dir="${core.src.dir}" />
				<fileset dir="${cldc11.src.dir}" />
				<fileset dir="${j2se.src.dir}" />
		</javadoc>
	</target>
</project>


<?xml version="1.0" encoding="UTF-8"?>
<project name="KahluaInterpreter" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked in in Version
         Control Systems. -->
    <property file="local.properties" />

    <!-- The build.properties file can be created by you and is never touched
         by the 'android' tool. This is the place to change some of the default property values
         used by the Ant rules.
         Here are some properties you may want to change/update:

         application.package
             the name of your application package as defined in the manifest. Used by the
             'uninstall' rule.
         source.dir
             the name of the source directory. Default is 'src'.
         out.dir
             the name of the output directory. Default is 'bin'.

         Properties related to the SDK location or the project target should be updated
          using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your application and
         should be checked in in Version Control Systems.

         -->
    <property file="build.properties" />

    <!-- The default.properties file is created and updated by the 'android' tool, as well
         as ADT.
         This file is an integral part of the build system for your application and
         should be checked in in Version Control Systems. -->
    <property file="default.properties" />

    <!-- Custom Android task to deal with the project target, and import the proper rules.
         This requires ant 1.6.0 or above. -->
    <path id="android.antlibs">
        <pathelement path="${sdk.dir}/tools/lib/anttasks.jar" />
        <pathelement path="${sdk.dir}/tools/lib/sdklib.jar" />
        <pathelement path="${sdk.dir}/tools/lib/androidprefs.jar" />
        <pathelement path="${sdk.dir}/tools/lib/apkbuilder.jar" />
        <pathelement path="${sdk.dir}/tools/lib/jarutils.jar" />
    </path>

    <taskdef name="setup"
        classname="com.android.ant.SetupTask"
        classpathref="android.antlibs" />

    <!-- Execute the Android Setup task that will setup some properties specific to the target,
         and import the build rules files.

         The rules file is imported from
            <SDK>/platforms/<target_platform>/templates/android_rules.xml

         To customize some build steps for your project:
         - copy the content of the main node <project> from android_rules.xml
         - paste it in this build.xml below the <setup /> task.
         - disable the import by changing the setup task below to <setup import="false" />

         This will ensure that the properties are setup correctly but that your customized
         build steps are used.
    -->
    <setup />

</project>
<?xml version="1.0"?>

<project default="build" basedir="." name="kahlua-interpreter">
	<property file="local.properties" />
	
	<!-- Default properties - please change this to what you want to use, or predefine them in a file called local.properties -->

	<property name="wtk.home" value="${basedir}/WTK" />
	<property name="antenna.jar" value="${basedir}/tools/antenna-bin-0.9.13.jar" />
	
	<!-- Don't modify below here unless you know what you're doing -->
	<available property="required.wtk" file="${wtk.home}" />
	<fail unless="required.wtk" message="You must set up wtk.home to point to a WTK directory: ${wtk.home}" />	

	<available property="required.antenna" file="${antenna.jar}" />
	<fail unless="required.antenna" message="You must set up antenna.jar to point to the antenna jar" />	
	
	<available property="required.cldc" file="${wtk.home}/lib/cldcapi11.jar" />
	<available property="required.midp" file="${wtk.home}/lib/midpapi20.jar" />
	<fail unless="required.cldc" message="You must place cldcapi11.jar in ${wtk.home}/lib" />	
	<fail unless="required.midp" message="You must place midpapi20.jar in ${wtk.home}/lib" />	

	<property name="kahlua.jar" value="${basedir}/../../bin/kahlua.jar" />
	<available property="required.kahlua" file="${kahlua.jar}" />
	<fail unless="required.kahlua" message="You must package kahlua first" />	

	<property name="midlet.mainclass" value="KahluaInterpreter" />
	<property name="midlet.jar.name" value="kahluainterpreter" />
	<property name="midlet.jar.name.jar" value="${basedir}/build/${midlet.jar.name}.jar" />
	<property name="midlet.jar.name.jad" value="${basedir}/build/${midlet.jar.name}.jad" />

	<!-- Task definitions -->
	<taskdef resource="antenna.properties" classpath="${antenna.jar}"/>
	
	<path id="build.buildclasspath">
		<fileset dir="${wtk.home}/lib">
			<include name="cldcapi11.jar"/>
			<include name="midpapi20.jar"/>
		</fileset>
	</path>	
		
	<path id="include.classpath">
		<fileset file="${kahlua.jar}" />
	</path>	

	<path id="compile.classpath">
		<path refid="build.buildclasspath" />
		<path refid="include.classpath" />
	</path>

	<target name="clean" description="Removes old build files">
		<delete dir="${basedir}/build/" failonerror="false"/>
		<mkdir dir="${basedir}/build"/>
		<mkdir dir="${basedir}/build/classes"/>
	</target>

	<!--
	*************
	*** BUILD ***
	*************
	-->
	<target name="compile">
		<javac
			destdir="${basedir}/build/classes"
			source="1.4"
			target="1.4"
			optimize="true"
			debug="true"
			verbose="false"
			bootclasspathref="build.buildclasspath">
			<src path="${basedir}/src"/>
			<classpath refid="compile.classpath" />
			
		</javac>
	</target>

	<target name="package" depends="compile">
		<jar
			basedir="${basedir}/build/classes"
			jarfile="${midlet.jar.name.jar}"
			compress="true"
			>

			<manifest>
				<attribute name="MIDlet-Name" value="KahluaInterpreter"/>
				<attribute name="MicroEdition-Configuration" value="CLDC-1.1"/>
				<attribute name="MicroEdition-Configuration_version" value="1.1"/>
				<attribute name="MIDlet-Vendor" value="krka"/>
				<attribute name="MIDlet-1" value="KahluaInterpreter, , ${midlet.mainclass}"/>
				<attribute name="MIDlet-Version" value="1.0.0"/>
				<attribute name="MicroEdition-Profile" value="MIDP-2.0"/>
				<attribute name="MicroEdition-Profile_version" value="2.0"/>

				<section name="kahluademo">
					<attribute name="Implementation-Version" value="1.0"/>
					<attribute name="Implementation-Vendor" value="krka"/>
					<attribute name="Implementation-Revision" value="1.0"/>
				</section>
			</manifest>
			
			
			<zipfileset src="${kahlua.jar}" excludes="META-INF/*" />
		</jar>
	</target>
		
	<target name="build" depends="clean, compile, package, perform-obfuscation" description="Compiles a version of the game" >        
		<property name="wtk.cldc.version" value="1.1" />
		<property name="wtk.midp.version" value="2.0" />

		<exec executable="${wtk.home}/bin/preverify">
			<arg line="-classpath" />
			<arg line="${wtk.home}/lib/cldcapi11.jar:${wtk.home}/lib/midpapi20.jar" />
			<arg line="-target" />
			<arg line="CLDC1.1" />
			<arg line="${midlet.jar.name.jar}" />
		</exec>
		<move file="${basedir}/output/${midlet.jar.name}.jar" tofile="${midlet.jar.name.jar}" />
		<delete dir="${basedir}/output" failonerror="false"/>
		
		
		<wtkjad
		        jadfile="${midlet.jar.name.jad}"
		        jarfile="${midlet.jar.name.jar}"
		        name="KahluaInterpreter"
		        vendor="krka"
				version="1.0.0">
		        <midlet name="${midlet.jar.name}" class="${midlet.mainclass}" />
		</wtkjad>
	</target>
	
	<target name="with-obfuscation">
		<property name="do.obfuscate" value="true" />
	</target>

	<target name="obfuscate" depends="with-obfuscation, build" description="Obfuscates the jar for optimal size">
	</target>

	<target name="perform-obfuscation" if="do.obfuscate">
		<available property="required.proguard" file="${proguard.jar}" />
		<fail unless="required.proguard" message="You must set up proguard.jar to point to the proguard jar" />	
		<taskdef resource="proguard/ant/task.properties" classpath="${proguard.jar}" />
		
		<proguard>
		  -libraryjars ${wtk.home}/lib/midpapi20.jar
		  -libraryjars ${wtk.home}/lib/cldcapi11.jar
		  -injars      ${midlet.jar.name.jar}
		  -outjars     ${midlet.jar.name.jar}.obfuscated.jar

			-overloadaggressively
			-repackageclasses ''
			-allowaccessmodification
			-dontusemixedcaseclassnames            
			-printmapping obfuscation-map.txt
			-keep public class * extends javax.microedition.midlet.MIDlet
			-dontoptimize
	  
		</proguard>

		<mkdir dir="${basedir}/build/unobfuscated/" />
		<move toFile="${basedir}/build/unobfuscated/${midlet.jar.name}.jar" file="${midlet.jar.name.jar}" />
		<move toFile="${midlet.jar.name.jar}" file="${midlet.jar.name.jar}.obfuscated.jar" />
	</target>


	<target name="run" description="Run in emulator">
        <wtkrun jadfile="${basedir}/build/kahluainterpreter.jad" 
        	heapsize="10000000"
        />
    </target>

</project>
<?xml version="1.0"?>

<project default="build" basedir="." name="minimal">

	<dirname property="baseDir" file="${ant.file}"/>

	<property file="${baseDir}/../../local.properties" />
	
	<!-- Default properties - please change this to what you want to use, or predefine them in a file called local.properties -->

	<property name="wtk.home" value="${baseDir}/WTK" />
	<property name="antenna.jar" value="${baseDir}/tools/antenna-bin-0.9.13.jar" />
	<property name="proguard.jar" value="${baseDir}/../j2me-lib/proguard.jar" />
	
	<!-- Don't modify below here unless you know what you're doing -->
	<available property="required.wtk" file="${wtk.home}" />
	<fail unless="required.wtk" message="You must set up wtk.home to point to a WTK directory: ${wtk.home}" />	

	<available property="required.antenna" file="${antenna.jar}" />
	<fail unless="required.antenna" message="You must set up antenna.jar to point to the antenna jar" />	
	
	<available property="required.cldc" file="${wtk.home}/lib/cldcapi11.jar" />
	<available property="required.midp" file="${wtk.home}/lib/midpapi20.jar" />
	<fail unless="required.cldc" message="You must place cldcapi11.jar in ${wtk.home}/lib" />	
	<fail unless="required.midp" message="You must place midpapi20.jar in ${wtk.home}/lib" />	

	<property name="kahlua-core.jar" value="${baseDir}/../../bin/kahlua-core.jar" />
	<available property="required.kahlua-core" file="${kahlua-core.jar}" />
	<fail unless="required.kahlua-core" message="You must package kahlua first" />	

	<property name="kahlua-cldc11.jar" value="${baseDir}/../../bin/kahlua-cldc11.jar" />
	<available property="required.kahlua-cldc11" file="${kahlua-cldc11.jar}" />
	<fail unless="required.kahlua-cldc11" message="You must package kahlua first" />	


	<property name="midlet.mainclass" value="HelloWorld" />
	<property name="midlet.jar.name" value="minimal" />
	<property name="midlet.jar.name.jar" value="${baseDir}/build/${midlet.jar.name}.jar" />
	<property name="midlet.jar.name.jad" value="${baseDir}/build/${midlet.jar.name}.jad" />



	<!-- Task definitions -->
	<taskdef resource="antenna.properties" classpath="${antenna.jar}"/>
	
	<path id="build.buildclasspath">
		<fileset dir="${wtk.home}/lib">
			<include name="cldcapi11.jar"/>
			<include name="midpapi20.jar"/>
		</fileset>
	</path>	
		
	<path id="include.classpath">
		<fileset file="${kahlua-core.jar}" />
		<fileset file="${kahlua-cldc11.jar}" />
	</path>	

	<path id="compile.classpath">
		<path refid="build.buildclasspath" />
		<path refid="include.classpath" />
	</path>

	<target name="clean" description="Removes old build files">
		<delete dir="${baseDir}/build/" failonerror="false"/>
		<mkdir dir="${baseDir}/build"/>
		<mkdir dir="${baseDir}/build/classes"/>
	</target>

	<target name="compile-lua">
		<mkdir dir="${baseDir}/build" />
		<ant antfile="${baseDir}/../../build.xml" target="luac" inheritAll="false">
			<property name="input" value="${baseDir}/resources/lua/hello.lua" />
			<property name="output" value="${baseDir}/build/classes/hello.lbc" />
		</ant>
	</target>

	<!--
	*************
	*** BUILD ***
	*************
	-->
	<target name="compile">
		<javac
			destdir="${baseDir}/build/classes"
			source="1.4"
			target="1.4"
			optimize="true"
			debug="true"
			verbose="false"
			bootclasspathref="build.buildclasspath">
			<src path="${baseDir}/src"/>
			<classpath refid="compile.classpath" />
		</javac>
	</target>

	<target name="package" depends="compile">
		<jar
			baseDir="${baseDir}/build/classes"
			jarfile="${midlet.jar.name.jar}"
			compress="true"
			>

			<manifest>
				<attribute name="MIDlet-Name" value="HelloWorld"/>
				<attribute name="MicroEdition-Configuration" value="CLDC-1.1"/>
				<attribute name="MicroEdition-Configuration_version" value="1.1"/>
				<attribute name="MIDlet-Vendor" value="krka"/>
				<attribute name="MIDlet-1" value="HelloWorld, , ${midlet.mainclass}"/>
				<attribute name="MIDlet-Version" value="1.0.0"/>
				<attribute name="MicroEdition-Profile" value="MIDP-2.0"/>
				<attribute name="MicroEdition-Profile_version" value="2.0"/>

				<section name="helloworld">
					<attribute name="Implementation-Version" value="1.0"/>
					<attribute name="Implementation-Vendor" value="krka"/>
					<attribute name="Implementation-Revision" value="1.0"/>
				</section>
			</manifest>
			
			<zipfileset src="${kahlua-core.jar}">
				<exclude name="META-INF/*" />
				<exclude name="stdlib.lbc" />
			</zipfileset>
			<zipfileset src="${kahlua-cldc11.jar}" excludes="META-INF/*" />
		</jar>
	</target>

	<property name="wtk.cldc.version" value="1.1" />
	<property name="wtk.midp.version" value="2.0" />
	<target name="preverify" unless="do.obfuscate">
		<exec executable="${wtk.home}/bin/preverify">
			<arg line="-classpath" />
			<arg line="${wtk.home}/lib/cldcapi11.jar:${wtk.home}/lib/midpapi20.jar" />
			<arg line="-target" />
			<arg line="CLDC1.1" />
			<arg line="${baseDir}/build/minimal.jar" />
		</exec>
		<move file="${baseDir}/output/minimal.jar" tofile="${baseDir}/build/minimal.jar" />
		<delete dir="${baseDir}/output" failonerror="false"/>
	</target>

	<target name="jad">
		<wtkjad
		        jadfile="${baseDir}/build/minimal.jad"
		        jarfile="${baseDir}/build/minimal.jar"
		        name="HelloWorld"
		        vendor="krka"
				version="1.0.0">
		        <midlet name="minimal" class="${midlet.mainclass}" />
		</wtkjad>
	</target>
		
	<target name="build" depends="clean, compile, compile-lua, package, perform-obfuscation, preverify, jad" description="Compiles a version of the game" >
		
	</target>

	<target name="with-obfuscation">
		<property name="do.obfuscate" value="true" />
	</target>

	<target name="obfuscate" depends="with-obfuscation, build" description="Obfuscates the jar for optimal size">
	</target>

	<target name="perform-obfuscation" if="do.obfuscate">
		<available property="required.proguard" file="${proguard.jar}" />
		<fail unless="required.proguard" message="You must set up proguard.jar to point to the proguard jar" />	
		<taskdef resource="proguard/ant/task.properties" classpath="${proguard.jar}" />
		
		<proguard>
		  -libraryjars ${wtk.home}/lib/midpapi20.jar
		  -libraryjars ${wtk.home}/lib/cldcapi11.jar
		  -injars      ${midlet.jar.name.jar}
		  -outjars     ${midlet.jar.name.jar}.obfuscated.jar

			-overloadaggressively
			-repackageclasses ''
			-allowaccessmodification
			-microedition
			-printseeds
			-verbose
			-mergeinterfacesaggressively
			-dontusemixedcaseclassnames
			-optimizationpasses 2
			
			-printmapping obfuscation-map.txt
			-keep public class * extends javax.microedition.midlet.MIDlet
		</proguard>
		<proguard>
		  -libraryjars ${wtk.home}/lib/midpapi20.jar
		  -libraryjars ${wtk.home}/lib/cldcapi11.jar
		  -injars      ${midlet.jar.name.jar}.obfuscated.jar
		  -outjars     ${midlet.jar.name.jar}.obfuscated2.jar

			-overloadaggressively
			-repackageclasses ''
			-allowaccessmodification
			-microedition
			-printseeds
			-verbose
			-mergeinterfacesaggressively
			-dontusemixedcaseclassnames
			-optimizationpasses 2
			
			-printmapping obfuscation-map2.txt
			-keep public class * extends javax.microedition.midlet.MIDlet
		</proguard>

		<mkdir dir="${baseDir}/build/unobfuscated/" />
		<move toFile="${baseDir}/build/unobfuscated/${midlet.jar.name}.jar" file="${midlet.jar.name.jar}" />
		<move toFile="${midlet.jar.name.jar}" file="${midlet.jar.name.jar}.obfuscated2.jar" />
	</target>

	<target name="run" description="Run in emulator">
        <wtkrun jadfile="${baseDir}/build/minimal.jad" 
        	heapsize="10000000"
        />
    </target>

</project>
<?xml version="1.0"?>

<project default="build" basedir="." name="kahluademo">

	<dirname property="baseDir" file="${ant.file}"/>

	<property file="${baseDir}/../../local.properties" />
	
	<!-- Default properties - please change this to what you want to use, or predefine them in a file called local.properties -->

	<property name="wtk.home" value="${baseDir}/WTK" />
	<property name="antenna.jar" value="${baseDir}/tools/antenna-bin-0.9.13.jar" />
	<property name="proguard.jar" value="${baseDir}/../j2me-lib/proguard.jar" />
	
	<!-- Don't modify below here unless you know what you're doing -->
	<available property="required.wtk" file="${wtk.home}" />
	<fail unless="required.wtk" message="You must set up wtk.home to point to a WTK directory: ${wtk.home}" />	

	<available property="required.antenna" file="${antenna.jar}" />
	<fail unless="required.antenna" message="You must set up antenna.jar to point to the antenna jar" />	
	
	<available property="required.cldc" file="${wtk.home}/lib/cldcapi11.jar" />
	<available property="required.midp" file="${wtk.home}/lib/midpapi20.jar" />
	<fail unless="required.cldc" message="You must place cldcapi11.jar in ${wtk.home}/lib" />	
	<fail unless="required.midp" message="You must place midpapi20.jar in ${wtk.home}/lib" />	

	<property name="kahlua-core.jar" value="${baseDir}/../../bin/kahlua-core.jar" />
	<available property="required.kahlua-core" file="${kahlua-core.jar}" />
	<fail unless="required.kahlua-core" message="You must package kahlua first" />	

	<property name="kahlua-cldc11.jar" value="${baseDir}/../../bin/kahlua-cldc11.jar" />
	<available property="required.kahlua-cldc11" file="${kahlua-cldc11.jar}" />
	<fail unless="required.kahlua-cldc11" message="You must package kahlua first" />	


	<property name="midlet.mainclass" value="KahluaDemo" />
	<property name="midlet.jar.name" value="kahluademo" />
	<property name="midlet.jar.name.jar" value="${baseDir}/build/${midlet.jar.name}.jar" />
	<property name="midlet.jar.name.jad" value="${baseDir}/build/${midlet.jar.name}.jad" />



	<!-- Task definitions -->
	<taskdef resource="antenna.properties" classpath="${antenna.jar}"/>
	
	<path id="build.buildclasspath">
		<fileset dir="${wtk.home}/lib">
			<include name="cldcapi11.jar"/>
			<include name="midpapi20.jar"/>
		</fileset>
	</path>	
		
	<path id="include.classpath">
		<fileset file="${kahlua-core.jar}" />
		<fileset file="${kahlua-cldc11.jar}" />
	</path>	

	<path id="compile.classpath">
		<path refid="build.buildclasspath" />
		<path refid="include.classpath" />
	</path>

	<target name="clean" description="Removes old build files">
		<delete dir="${baseDir}/build/" failonerror="false"/>
		<mkdir dir="${baseDir}/build"/>
		<mkdir dir="${baseDir}/build/classes"/>
	</target>

	<target name="compile-lua">
		<mkdir dir="${baseDir}/build" />
		<ant antfile="${baseDir}/../../build.xml" target="luac" inheritAll="false">
			<property name="input" value="${baseDir}/resources/lua/guess.lua" />
			<property name="output" value="${baseDir}/build/classes/guess.lbc" />
		</ant>
		<ant antfile="${baseDir}/../../build.xml" target="luac" inheritAll="false">
			<property name="input" value="${baseDir}/resources/lua/primes.lua" />
			<property name="output" value="${baseDir}/build/classes/primes.lbc" />
		</ant>
		<ant antfile="${baseDir}/../../build.xml" target="luac" inheritAll="false">
			<property name="input" value="${baseDir}/resources/lua/quizgame.lua" />
			<property name="output" value="${baseDir}/build/classes/quizgame.lbc" />
		</ant>
	</target>

	<!--
	*************
	*** BUILD ***
	*************
	-->
	<target name="compile">
		<javac
			destdir="${baseDir}/build/classes"
			source="1.4"
			target="1.4"
			optimize="true"
			debug="true"
			verbose="false"
			bootclasspathref="build.buildclasspath">
			<src path="${baseDir}/src"/>
			<classpath refid="compile.classpath" />
		</javac>
	</target>

	<target name="package" depends="compile">
		<jar
			baseDir="${baseDir}/build/classes"
			jarfile="${midlet.jar.name.jar}"
			compress="true"
			>

			<manifest>
				<attribute name="MIDlet-Name" value="KahluaDemo"/>
				<attribute name="MicroEdition-Configuration" value="CLDC-1.1"/>
				<attribute name="MicroEdition-Configuration_version" value="1.1"/>
				<attribute name="MIDlet-Vendor" value="krka"/>
				<attribute name="MIDlet-1" value="KahluaDemo, , ${midlet.mainclass}"/>
				<attribute name="MIDlet-Version" value="1.0.0"/>
				<attribute name="MicroEdition-Profile" value="MIDP-2.0"/>
				<attribute name="MicroEdition-Profile_version" value="2.0"/>

				<section name="kahluademo">
					<attribute name="Implementation-Version" value="1.0"/>
					<attribute name="Implementation-Vendor" value="krka"/>
					<attribute name="Implementation-Revision" value="1.0"/>
				</section>
			</manifest>
			
			<zipfileset src="${kahlua-core.jar}" excludes="META-INF/*" />
			<zipfileset src="${kahlua-cldc11.jar}" excludes="META-INF/*" />
		</jar>
	</target>

	<target name="build" depends="clean, compile, compile-lua, package, perform-obfuscation" description="Compiles a version of the game" >
        <property name="wtk.cldc.version" value="1.1" />
        <property name="wtk.midp.version" value="2.0" />

		<exec executable="${wtk.home}/bin/preverify">
			<arg line="-classpath" />
			<arg line="${wtk.home}/lib/cldcapi11.jar:${wtk.home}/lib/midpapi20.jar" />
			<arg line="-target" />
			<arg line="CLDC1.1" />
			<arg line="${baseDir}/build/kahluademo.jar" />
		</exec>
		<move file="${baseDir}/output/kahluademo.jar" tofile="${baseDir}/build/kahluademo.jar" />
		<delete dir="${baseDir}/output" failonerror="false"/>
		
		
		<wtkjad
		        jadfile="${baseDir}/build/kahluademo.jad"
		        jarfile="${baseDir}/build/kahluademo.jar"
		        name="KahluaDemo"
		        vendor="krka"
				version="1.0.0">
		        <midlet name="kahluademo" class="${midlet.mainclass}" />
		</wtkjad>
	</target>

	<target name="with-obfuscation">
		<property name="do.obfuscate" value="true" />
	</target>

	<target name="obfuscate" depends="with-obfuscation, build" description="Obfuscates the jar for optimal size">
	</target>

	<target name="perform-obfuscation" if="do.obfuscate">
		<available property="required.proguard" file="${proguard.jar}" />
		<fail unless="required.proguard" message="You must set up proguard.jar to point to the proguard jar" />	
		<taskdef resource="proguard/ant/task.properties" classpath="${proguard.jar}" />
		
		<proguard>
		  -libraryjars ${wtk.home}/lib/midpapi20.jar
		  -libraryjars ${wtk.home}/lib/cldcapi11.jar
		  -injars      ${midlet.jar.name.jar}
		  -outjars     ${midlet.jar.name.jar}.obfuscated.jar

			-overloadaggressively
			-repackageclasses ''
			-allowaccessmodification
			-dontusemixedcaseclassnames            
			-printmapping obfuscation-map.txt
			-keep public class * extends javax.microedition.midlet.MIDlet
			-dontoptimize
	  
		</proguard>

		<mkdir dir="${baseDir}/build/unobfuscated/" />
		<move toFile="${baseDir}/build/unobfuscated/${midlet.jar.name}.jar" file="${midlet.jar.name.jar}" />
		<move toFile="${midlet.jar.name.jar}" file="${midlet.jar.name.jar}.obfuscated.jar" />
	</target>

	<target name="run" description="Run in emulator">
        <wtkrun jadfile="${baseDir}/build/kahluademo.jad" 
        	heapsize="10000000"
        />
    </target>

</project>
