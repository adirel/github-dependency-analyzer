<project name="testng" default="dev" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
  
  <!-- ====================================================================== -->
  <!-- TestNG build file                                                      -->
  <!-- Created cbeust, April 26th, 2004                                       -->
  <!-- ====================================================================== -->

  <property file="build.properties" />
  <property name="optimize" value="false" />

  <!-- ====================================================================== -->
  <!-- PREPARE                                                                -->
  <!-- ====================================================================== -->
  <target name="prepare" depends="retrieve-dependencies"
          description="Performs all preparations required to build.">
    <tstamp />
    <mkdir dir="${build.dir}" />
    <mkdir dir="${other.jars.dir}" />
  </target>

  <!-- ====================================================================== -->
  <!-- DUMP                                                                   -->
  <!-- ====================================================================== -->
  <target name="dump" description="Dumps all properties." depends="prepare">
    <echoproperties />
  </target>

	<!-- ====================================================================== -->
  <!-- VALIDATE                                                               -->
  <!-- ====================================================================== -->

  <target name="validate" description="Validates the build environment.">
    <!-- java greater than 1.5 required to build -->
    <condition property="requiredJavaVersion">
      <or>
        <equals arg1="${ant.java.version}" arg2="1.7" />
        <equals arg1="${ant.java.version}" arg2="1.6" />
      </or>
    </condition>
    <fail unless="requiredJavaVersion"
          message="Java version 1.5 required." />
    <!-- validate ant version too ... -->
  </target>

  <!-- ==================================================================== -->
  <!-- COPY-RESOURCES                                                       -->
  <!-- ==================================================================== -->

  <target name="copy-resources" description="Copies resources.">
    <copy verbose="false"
          file="${src.resources.dir}/testngtasks"
          todir="${build.dir}" />
    <copy todir="${build.dir}">
      <fileset dir="${src.resources.dir}">
        <exclude name="**/.*" />
        <exclude name="**/CVS/*" />
      </fileset>
    </copy>
  </target>


  <target name="dev"
          depends="prepare,validate,copy-resources,build,tests" />

  <target name="all"
          depends="prepare,validate,copy-resources,build,dist,tests,test-ant,javadocs,dist" />

  <target name="build" depends="prepare,compile,testng-jar-all" />

  <target name="testng-jar-all">
    <antcall target="create-jar">
      <param name="jar.file" value="${testng.jar}" />
    </antcall>
    <jar jarfile="${testng.jar}" update="true">
      <zipfileset src="${lib.dir}/${beanshell.jar}" />
      <zipfileset src="${lib.dir}/${jcommander.jar}" />
      <zipfileset src="${lib.dir}/${yaml.jar}" />
    </jar>

  </target>

  <target name="single">
    <ant antfile="build-tests.xml" target="run:single"/>
  </target>

  <!-- ==================================================================== -->
  <!-- Compile                                                              -->
  <!-- ==================================================================== -->

  <path id="compile2.cp">
    <fileset dir="${lib.dir}" includes="${all.jar.files}" />
  </path>

  <target name="compile"
          depends="prepare,copy-resources"
          description="Compiles sources">
    <echo message="                                 -- Compiling sources --" />

    <echo>Src:${src.dir}</echo>
    <javac classpathref="compile2.cp"
           verbose="false"
           target="1.5"
           debug="true"
           optimize="${optimize}"
           destdir="${build.dir}">
      <src path="${src.dir}" />
    </javac>
  </target>

  <target name="compile:all" depends="compile" />

  <target name="examples">
    <ant inheritall="no" antfile="examples/build.xml" />
  </target>

  <target name="tests" depends="build" description="runs all JDK5 tests with JDK5 distro">
    <ant inheritall="no" antfile="build-tests.xml" />
  </target>
  
  <target name="test-ant" depends="build">
    <echo message="                                 -- Testing ant testng task functionality --" />
    <ant inheritall="no" antfile="build-ant.xml" />
  </target>

  <!-- ==================================================================== -->
  <!-- Documentation                                                        -->
  <!-- ==================================================================== -->

  <target name="javadocs" depends="build,javadocs-current" />

  <target name="doclava">
    <javadoc
      docletpath="3rdparty/doclava-1.0.3.jar"
      bootclasspath="${javahome}/jre/lib/rt.jar"
      classpath="${testng.jar}:lib/${ant.jar}:lib/${guice2.jar}:lib/aopalliance-1.0.jar"
      maxmemory="2048M"
      additionalparam="-quiet"
      verbose="false"
      destdir="javadocs"
      >
      <fileset dir="${src.dir}" defaultexcludes="yes">
        <include name="org/testng/*.java" />
      </fileset>
      <fileset dir="${src.dir}" defaultexcludes="yes">
        <include name="org/testng/xml/Xml*.java" />
      </fileset>
      <fileset dir="${src.dir}" defaultexcludes="yes">
        <include name="org/testng/annotations/**" />
      </fileset>
      <doclet name="com.google.doclava.Doclava">
        <param name="-stubs" value="build/stubs" />
        <param name="-hdf"/>
        <param name="project.name" value="TestNG" />
        <!-- versioning -->
        <param name="-since"/>
        <param name="doclava/previous.xml"/>
        <param name="v1" />
        <param name="-apiversion" value="v2"/>
        <!-- federation -->
        <param name="-federate" />
        <param name="JDK"/>
        <param name="http://download.oracle.com/javase/6/docs/api/index.html?"/>
        <param name="-federationxml"/><param name="JDK"/>
        <param name="http://doclava.googlecode.com/svn/static/api/openjdk-6.xml"/>
      </doclet>
    </javadoc>
  </target>

  <target name="javadocs-current">
    <javadoc additionalparam="-quiet" destdir="javadocs" source="1.5" windowtitle="TestNG"
      classpath="${testng.jar}" classpathref="compile2.cp" verbose="false">
      <fileset dir="${src.dir}" defaultexcludes="yes">
        <include name="org/testng/*.java" />
      </fileset>
      <fileset dir="${src.dir}" defaultexcludes="yes">
        <include name="org/testng/xml/Xml*.java" />
      </fileset>
      <fileset dir="${src.dir}" defaultexcludes="yes">
        <include name="org/testng/annotations/**" />
      </fileset>
    </javadoc>
  </target>

  <!-- ==================================================================== -->
  <!-- Distribution                                                         -->
  <!-- ==================================================================== -->

  <target name="dist" depends="build,all-jar-flavors,dist-all-zip,eclipse" />

  <target name="all-jar-flavors" depends="dist-junit,dist-nobsh-guice,dist-bsh-noguice,dist-nobsh-noguice,dist-testng-dist,dist-testng-javadoc" />

  <target name="dist-junit">
    <antcall target="create-jar">
      <param name="jar.file" value="${other.jars.dir}/${testng.junit.jar}" />
    </antcall>
    <jar jarfile="${other.jars.dir}/${testng.junit.jar}" update="true">
      <zipfileset src="${lib.dir}/${beanshell.jar}" />
      <zipfileset src="${lib.dir}/${jcommander.jar}" />
      <zipfileset src="${lib.dir}/${junit.jar}" />
      <zipfileset src="${lib.dir}/${yaml.jar}" />
    </jar>
  </target>

  <target name="dist-nobsh-guice">
    <antcall target="create-jar">
      <param name="jar.file" value="${other.jars.dir}/${testng.nobsh.guice.jar}" />
    </antcall>
    <jar jarfile="${other.jars.dir}/${testng.nobsh.guice.jar}" update="true">
      <zipfileset src="${lib.dir}/${guice2.jar}" />
      <zipfileset src="${lib.dir}/${jcommander.jar}" />
      <zipfileset src="${lib.dir}/${junit.jar}" />
    </jar>
  </target>

  <target name="dist-bsh-noguice">
    <antcall target="create-jar">
      <param name="jar.file" value="${other.jars.dir}/${testng.bsh.noguice.jar}" />
    </antcall>
    <jar jarfile="${other.jars.dir}/${testng.bsh.noguice.jar}" update="true">
      <zipfileset src="${lib.dir}/${beanshell.jar}" />
      <zipfileset src="${lib.dir}/${jcommander.jar}" />
      <zipfileset src="${lib.dir}/${junit.jar}" />
    </jar>
  </target>

  <target name="dist-nobsh-noguice">
    <antcall target="create-jar">
      <param name="jar.file" value="${other.jars.dir}/${testng.nobsh.noguice.jar}" />
    </antcall>
    <jar jarfile="${other.jars.dir}/${testng.bsh.noguice.jar}" update="true">
      <zipfileset src="${lib.dir}/${jcommander.jar}" />
      <zipfileset src="${lib.dir}/${junit.jar}" />
    </jar>
  </target>

  <target name="dist-testng-dist">
    <antcall target="create-jar">
      <param name="jar.file" value="${other.jars.dir}/${testng.dist.jar}" />
    </antcall>
    <jar jarfile="${other.jars.dir}/${testng.dist.jar}" update="true">
      <zipfileset src="${lib.dir}/${jcommander.jar}" />
    </jar>
  </target>

  <target name="dist-testng-javadoc" depends="javadocs">
    <zip destfile="${other.jars.dir}/${testng.javadoc.zip}">
        <fileset dir="javadocs"/>
    </zip>
  </target>

  <target name="create-jar" description="Create a jar file with the Testng classes and nothing else" 
          depends="compile">
    <delete file="${jar.file}" />
    <jar destfile="${jar.file}" >
      <manifest>
        <attribute name="Main-Class" value="org.testng.TestNG" />
        <attribute name="Implementation-Version" value="${testng.version}-${DSTAMP}${TSTAMP}" />
      </manifest>
      <fileset dir="${build.dir}" />
      <fileset file="TESTNG-${testng.version}" />
    </jar>
  </target>

  <target name="dist-all-zip" depends="dist-prepare,javadocs">
    <property name="zip.dir" value="testng-${testng.version}" />
    <echo>Adding ${testng.fullname}</echo>
    <zip zipfile="${testng.zip}">
      <zipfileset prefix="${zip.dir}" dir="${target}">
        <include name="${testng.fullname}.jar" />
      </zipfileset>
      <zipfileset prefix="${zip.dir}" dir="${basedir}" includesfile="FILES" />
      <zipfileset dir="${other.jars.dir}" prefix="${zip.dir}/other-jars"/>
      <zipfileset dir="javadocs" prefix="${zip.dir}/javadocs" />
      <zipfileset dir="src" prefix="${zip.dir}/src" />
      <zipfileset dir="spring" prefix="${zip.dir}/spring" />
      <zipfileset dir="doc" prefix="${zip.dir}/doc" />
      <zipfileset dir="${src.resources.dir}"
               prefix="${zip.dir}/resources" 
            includes="**/*.css"/>
    </zip>
  </target>
  
<!--
  <target name="dist-maven-bundle" depends="dist-all-zip">
    <mkdir dir="${build.maven-bundle.dir}" />
    <copy file="bundle-pom.xml" tofile="${build.maven-bundle.dir}/pom.xml" overwrite="true">
      <filterchain>
        <expandproperties/>
      </filterchain>
    </copy>
    <jar destfile="${build.maven-bundle.dir}/${sources.testng.jar}">
      <fileset dir="${src.dir}" />
    </jar>

    <exec executable="gpg">
      <arg value="- -yes" />
      <arg value="-ab" />
      <arg value="${testng.jar}" />
    </exec>

    <exec executable="gpg">
      <arg value="- -yes" />
      <arg value="-ab" />
      <arg value="${build.maven-bundle.dir}/pom.xml" />
    </exec>

    <exec executable="gpg">
      <arg value="- -yes" />
      <arg value="-ab" />
      <arg value="${build.maven-bundle.dir}/${sources.testng.jar}" />
    </exec>

    <jar destfile="${testng.maven-bundle}">
      <fileset file="${build.maven-bundle.dir}/pom.xml" />
      <fileset file="${build.maven-bundle.dir}/${sources.testng.jar}" />
      <fileset file="${build.maven-bundle.dir}/*asc" />
      <fileset file="${testng.jar}" />
      <fileset file="${testng.jar}.asc" />
    </jar>
  </target>
-->

  <target name="dist-prepare" depends="update-readme">
    <delete file="{other.jars.dir}/${testng.nobsh.jar}" />
    <mkdir dir="${other.jars.dir}" />
  </target>

  <target name="update-readme">
    <copy file="README.template" tofile="README" />
    <replace file="README" token="${version}" value="${testng.version}" />
    <touch file="TESTNG-${testng.version}" />
  </target>
      
  <target name="eclipse" description="Used by Cedric to build distributions">
    <property name="jdk15.jar"
              value="${testng-eclipse.dir}/lib/testng.jar" />

    <delete file="${jdk15.jar}" />
    <copy file="${testng.jar}" tofile="${jdk15.jar}" />

    <!-- sources -->
    <property name="sources" value="${testng-eclipse.dir}/lib/testng-sources.jar"/>
    <echo>Sources: ${sources}</echo>
    <jar destfile="${sources}" basedir="src/main/java/" />
  </target>

  <target name="ftp">
    <!--
          <ftp action="put"
             server="beust.com"
             remotedir="w/testng/test-output"
             userid="${userid}"
             password="${password}">
              <fileset dir="c:\weblogic\dev\sandbox\cbeust\testng\test\test-output">
                <include name="index.html" />
                <include name="main.html" />
                <include name="toc.html" />
                <include name="*egression*" />
             </fileset>
        </ftp>
      -->
    <ftp action="put"
         server="beust.com"
         remotedir="w/testng"
         userid="${userid}"
         password="${password}">
      <fileset dir="${root.dir}">
        <include name="${testng.zip}" />
        <include name="javadocs/**" />
        <include name="testng-1.0.dtd" />
      </fileset>
      <fileset dir="${root.dir}/doc">
        <include name="*.html" />
      </fileset>
    </ftp>

  </target>

  <target name="ftp2">
    <ftp action="put"
         server="beust.com"
         remotedir="w/testng"
         userid="${userid}"
         password="${password}">
      <fileset dir="${root.dir}/test">
        <include name="test-output/*" />
      </fileset>
      <fileset dir="${root.dir}/test">
        <include name="test-report/*" />
      </fileset>
    </ftp>
  </target>

  <target name="clean">
    <delete dir="${build.dir}" />
    <delete dir="${target}" />
    <delete dir="${build.maven-bundle.dir}" />
    <delete failonerror="false">
      <fileset dir="." includes="testng*.jar,*.zip" />
    </delete>
    <delete dir="test-output" failonerror="false" />
    <delete dir="test-output-tests" failonerror="false" />
    <ant antfile="build-tests.xml" target="clean" />
    <ant dir="examples" target="clean" />
  </target>

  <!-- ==================================================================== -->
  <!-- Maven1/2 Distribution                                                -->
  <!-- ==================================================================== -->

<!--
  <target name="maven-plugin">
    <jar destfile="maven-testng-plugin-${testng-maven.version}.jar"
         basedir="./maven/" />
  </target>
-->

  <!-- ==================================================================== -->
  <!-- Ivy                                                                  -->
  <!-- ==================================================================== -->

  <target name="retrieve-dependencies" description="Retrieve dependencies with ivy">
    <ivy:retrieve log="quiet" />
  </target>

  <target name="publish">
    <ivy:resolve />
    <mkdir dir="dist/jars" />
    <copy file="${testng.jar}" todir="dist/jars" />
    <ivy:publish organisation="org.testng" resolver="local" overwrite="true"/>
  </target>

  <target name="pom">
    <ivy:makepom ivyfile="ivy.xml" pomfile="ivy-pom.xml" />
  </target>

  <!-- ==================================================================== -->
  <!-- Code coverage                                                        -->
  <!-- ==================================================================== -->

<!--
  <property name="cobertura.dir" value="../cobertura-1.9.4.1" />

  <path id="cobertura.classpath">
      <fileset dir="${cobertura.dir}">
          <include name="cobertura.jar" />
          <include name="lib/**/*.jar" />
      </fileset>
  </path>

  <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

  <target name="coverage:create">
    <cobertura-instrument classpath="cobertura-1.9.4.1/lib/*" todir="target/instrumented-classes">
      <fileset dir="${build.dir}">
        <include name="**/*.class" />
      </fileset>
    </cobertura-instrument>
  </target>

  <target name="coverage">
    <cobertura-report srcdir="${src.dir}" destdir="target/coverage-report"/>
  </target>
-->

</project>
<project name="testng" default="all" basedir="..">

   <property file="build.properties"/>

   <property name="debug" value="true"/>
   <property name="optimize" value="false"/>
   <property name="build.compiler" value="javac1.5" />

   <!-- dirs for test output -->
   <property name="test.output" value="${example.dir}/build/test-output"/>
   <property name="test.report" value="${example.dir}/build/test-report"/>

   <target name="all" depends="prepare,compile,run"/>


   <!-- ==================================================================== -->
   <!-- Compile                                                              -->
   <!-- ==================================================================== -->
   <path id="compile.cp">
      <pathelement location="${testng.jar}"/>
   </path>

   <target name="compile"
           description="compile the examples"
           depends="prepare">
      <echo message="                                 -- testng-compile-examples --"/>

     <javac   debug="true"
              fork="true"
              source="1.5"
              classpathref="compile.cp"
              srcdir="${example.dir}/src"
              destdir="${example.dir}/build/classes"
      />
   </target>

   <target name="prepare">
      <mkdir dir="${example.dir}/build/classes"/>
      <mkdir dir="${test.output}"/>
      <mkdir dir="${test.report}"/>
   </target>

   <!-- ==================================================================== -->
   <!-- Run                                                             -->
   <!-- ==================================================================== -->

   <path id="run.cp">
      <pathelement location="${testng.jar}" />
      <path refid="compile.cp"/>
      <pathelement location="${example.dir}/build/classes"/>
   </path>

   <target  name="run"
            description="run examples with java"
            depends="compile">

      <echo message="                                  testng-run "/>
      <java fork="yes"
            classpathref="run.cp"
            classname="org.testng.TestNG">
         <arg value="-d"/>
         <arg value="${test.output}"/>
         <arg value="${example.dir}/testng.xml"/>
         <jvmarg value="-ea"/>
      </java>
      <echo>Some of these tests should have failed.  Statistics are available at</echo>
      <echo>${test.output}\index.html for a TestNG HTML report</echo>
   </target>

   <target  name="run-task"
            description="run examples using testng task"
            depends="compile">
      <echo message="                                 -- testng-run using the testng task--"/>
     
      <taskdef classpathref="compile.cp" name="testng" classname="com.beust.testng.TestNGAntTask"/>
     
      <testng
               fork="yes"
               classpathref="run.cp"
               outputdir="${test.output}">
         <fileset dir="${example.dir}" includes="testng.xml"/>
      </testng>

      <echo>Some of these tests should have failed, see the file test.out for the details</echo>
      <junitreport todir="${test.report}">
         <fileset dir="${test.output}">
            <include name="*.xml"/>
         </fileset>
         <report format="noframes" todir="${test.report}"/>
      </junitreport>
   </target>

   <target  name="run-task-noxml"
            depends="compile"
            description="run examples using testng task with just -testclass and no xml">
      <testng
               fork="yes"
               classpathref="run.cp"
               outputdir="${test.output}"
               testclass="example1.Test1">
      </testng>
      <echo>Some of these tests should have failed, see the file test.out for the details</echo>
      <antcall target="report"/>
   </target>

   <target  name="run-task-jar"
            depends="compile,testjar"
            description="run examples using testng task with just -testjar and no xml">
      <!-- note that this invocation does not have build/ in the path -->
      <testng
               fork="yes"
               classpathref="compile.cp"
               outputdir="${test.output}"
               testjar="${example.dir}/example.jar">
      </testng>
      <antcall target="report"/>
      <echo>Some of these tests should have failed, see the file test.out for the details</echo>
   </target>

   <target name="testjar"
      description="make a test jar with the property file and the classes we need in it">
      <jar destfile="${example.dir}/example.jar">
         <fileset dir="${example.dir}/build/classes" includes="**/*.class"/>
         <fileset file="${example.dir}/testng.xml"/>
      </jar>
   </target>

   <target name="report"
      description="generate reports using junireport">
      <junitreport todir="${test.report}">
         <fileset dir="${test.output}">
            <include name="*.xml"/>
         </fileset>
         <report format="noframes" todir="${test.report}"/>
      </junitreport>
   </target>

   <target  name="clean"
            description="clean up example results">
      <delete dir="${example.dir}/build/classes"/>
      <delete dir="${test.output}"/>
      <delete dir="${test.report}"/>
      <antcall target="prepare"/>
   </target>

</project>
<project name="testng-gigaspaces" default="both" basedir=".">

	<target name="init">
		<tstamp />
		<property file="../build.properties" />
		<property file="build.properties" />
		<!-- Settings -->
		<property name="jdk" value="jdk15" />
		<property name="optimize" value="false" />
		<property name="debug" value="true" />

		<!--  Directories -->
		<property name="src.dir" location="src" />
		<property name="topbuild.dir" location="build" />
		<property name="build.dir" location="${topbuild.dir}/${jdk}" />
		<property name="classes.dir" location="${build.dir}/classes" />
		<property name="dependencies.dir" location="3rdparty" />
		<property name="topjavadocs.dir" location="javadocs" />
		<property name="javadocs.dir" location="${topjavadocs.dir}/${jdk}" />

		<property name="testng.gigaspaces.jar" location="testng-gigaspaces-${jdk}.jar" />

		<condition property="source.version" value="1.4">
			<equals arg1="${jdk}" arg2="jdk14"/>
		</condition>
		<condition property="source.version" value="1.5">
			<equals arg1="${jdk}" arg2="jdk15"/>
		</condition>
	</target>

	<target name="paths" depends="init">
		<path id="src.path">
			<pathelement path="${src.dir}" />
		</path>
		<path id="compile.path">
			<fileset dir="${dependencies.dir}">
				<include name="*.jar" />
			</fileset>
			<pathelement path="../testng-${testng.version}-${jdk}.jar" />
		</path>
	</target>

	<target name="compile" depends="paths" description="compile sources">
		<echo message="                                 -- Compiling ${jdk} sources --" />
		<mkdir dir="${classes.dir}"/>
		<javac 	target="jsr14"
				debug="${debug}" optimize="${optimize}" 
		        destdir="${classes.dir}">
			<src refid="src.path" />
			<classpath refid="compile.path" />
		</javac>
	</target>

	<target name="jar" depends="compile">
		<echo message="                                 -- Creating ${jdk} jar --" />
		<jar destfile="${testng.gigaspaces.jar}">
			<fileset dir="${classes.dir}" />
		</jar>
	</target>

	<target name="javadoc" depends="paths" description="generate api documentation">
		<echo message="                                 -- Generating javadocs for ${jdk} --" />
		<mkdir dir="${javadocs.dir}" />
		<javadoc destdir="${javadocs.dir}" source="${source.version}" windowtitle="TestNG GigaSpaces Support" classpathref="compile.path">
			<fileset dir="${src.dir}/common" defaultexcludes="yes" includes="**/*.java" />
			<fileset dir="${src.dir}/${jdk}" defaultexcludes="yes" includes="**/*.java" />
		</javadoc>
	</target>

	<target name="both">
		<property name="target" value="jar"/>
		<antcall target="${target}">
			<param name="jdk" value="jdk14"/>
		</antcall>
		<antcall target="${target}">
			<param name="jdk" value="jdk15"/>
		</antcall>
	</target>

	<target name="dist" description="builds both jdk14 and jdk15 variants">
		<antcall target="both">
			<param name="target" value="jar"/>
		</antcall>
	</target>

	<target name="javadocs" description="builds both jdk14 and jdk15 javadocs">
		<antcall target="both">
			<param name="target" value="javadoc"/>
		</antcall>
	</target>

	<target name="all" depends="dist,javadocs" description="build jar files and javadocs" />

	<target name="clean" depends="paths" description="cleans all">
		<delete dir="${topbuild.dir}" />
		<delete dir="${topjavadocs.dir}" />
		<delete file="testng-gigaspaces-jdk14.jar" />
		<delete file="testng-gigaspaces-jdk15.jar" />
	</target>

</project>
<project name="testng-spring" default="both" basedir=".">

  <target name="init">
    <tstamp />
    <property file="../build.properties" />
    <property file="build.properties" />
    <!-- Settings -->
    <property name="jdk" value="jdk14" />
    <property name="optimize" value="false" />
    <property name="debug" value="true" />
    
    <!--  Directories -->
    <property name="src.dir" location="src" />
    <property name="topbuild.dir" location="build" />
    <property name="build.dir" location="${topbuild.dir}/${jdk}" />
    <property name="classes.dir" location="${build.dir}/classes" />      
    <property name="dependencies.dir" location="lib" />
    <property name="topjavadocs.dir" location="javadocs" />
    <property name="javadocs.dir" location="${topjavadocs.dir}/${jdk}" />
    
      <property name="testng.spring.jar" location="testng-spring-${jdk}.jar" />

    <condition property="source.version" value="1.4"><equals arg1="${jdk}" arg2="jdk14"/></condition>
    <condition property="source.version" value="1.5"><equals arg1="${jdk}" arg2="jdk15"/></condition>
  </target>
  
  <target name="paths" depends="init">
    <path id="src.path">
      <pathelement path="${src.dir}/common" />
      <pathelement path="${src.dir}/${jdk}" />
    </path>
    <path id="compile.path">
      <fileset dir="${dependencies.dir}">
        <include name="*.jar" />
      </fileset>
      <pathelement path="../testng-${testng.version}-${jdk}.jar" />
    </path>
  </target>
  
  <target name="compile" depends="paths" description="compile sources">
    <echo message="                                 -- Compiling ${jdk} sources --" />
    <mkdir dir="${classes.dir}"/>
    <javac   source="${source.version}" target="${source.version}"
        debug="${debug}" optimize="${optimize}" 
            destdir="${classes.dir}">
      <src refid="src.path" />
      <classpath refid="compile.path" />
    </javac>
  </target>

  <target name="jar" depends="compile">
    <echo message="                                 -- Creating ${jdk} jar --" />
    <jar destfile="${testng.spring.jar}">
      <fileset dir="${classes.dir}" />
    </jar>
  </target>

  <target name="javadoc" depends="paths" description="generate api documentation">
    <echo message="                                 -- Generating javadocs for ${jdk} --" />
    <mkdir dir="${javadocs.dir}" />
      <javadoc destdir="${javadocs.dir}" source="${source.version}" windowtitle="TestNG Spring Support" classpathref="compile.path">
      <fileset dir="${src.dir}/common" defaultexcludes="yes" includes="**/*.java" />
          <fileset dir="${src.dir}/${jdk}" defaultexcludes="yes" includes="**/*.java" />
      </javadoc>
  </target>
  
  <target name="both">
    <property name="target" value="jar"/>
    <antcall target="${target}">
      <param name="jdk" value="jdk14"/>
    </antcall>
    <antcall target="${target}">
      <param name="jdk" value="jdk15"/>
    </antcall>
  </target>
  
  <target name="dist" description="builds both jdk14 and jdk15 variants">
    <antcall target="both"><param name="target" value="jar"/></antcall>
  </target>
  
  <target name="javadocs" description="builds both jdk14 and jdk15 javadocs">
    <antcall target="both"><param name="target" value="javadoc"/></antcall>
  </target>
  
  <target name="all" depends="dist,javadocs" description="build jar files and javadocs" />
  
  <target name="clean" depends="paths" description="cleans all">
    <delete dir="${topbuild.dir}" />
    <delete dir="${topjavadocs.dir}" />
    <delete file="testng-spring-jdk14.jar" />
    <delete file="testng-spring-jdk15.jar" />
  </target>
  
</project>
