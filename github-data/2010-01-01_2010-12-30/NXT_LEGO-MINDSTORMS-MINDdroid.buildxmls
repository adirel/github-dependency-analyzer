<?xml version="1.0" encoding="UTF-8"?>
<project name="MINDdroid" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property file="local.properties" />

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through an env var"
            unless="sdk.dir"
    />

    <!--
        Import per project custom build rules if present at the root of the project.
        This is the place to put custom intermediary targets such as:
            -pre-build
            -pre-compile
            -post-compile (This is typically used for code obfuscation.
                           Compiled code location: ${out.classes.absolute.dir}
                           If this is not done in place, override ${out.dex.input.absolute.dir})
            -post-package
            -post-build
            -pre-clean
    -->
    <import file="custom_rules.xml" optional="true" />

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->
    <import file="${sdk.dir}/tools/ant/build.xml" />

</project>
<project name="AlphaRex" default="uploadandrun">
  <description>
    AlphaRex build file
  </description>
	
  <target name="clean" description="clean up all generated files" >
    <ant antfile="./samplebuild.xml" target="clean"/>
  </target>

  <target name="compile" description="compile the source" >
    <ant antfile="./samplebuild.xml" target="compile"/>
  </target>
	
  <target name="link" description="link the binary" >
    <ant antfile="./samplebuild.xml" target="link"/>
  </target>
	
  <target name="upload" description="upload the binary" >
    <ant antfile="./samplebuild.xml" target="upload"/>
  </target>
	
  <target name="uploadandrun" description="upload and run the binary" >
    <ant antfile="./samplebuild.xml" target="uploadandrun"/>
  </target>

	<target name="console" description="console run" >
		<ant antfile="./samplebuild.xml" target="console"/>
	</target>

	<target name="consoleviewer" description="run the GUI console viewer" >
		<ant antfile="./samplebuild.xml" target="consoleviewer"/>
	</target>
	
	<target name="debugtool" description="run debugtool" >
		<ant antfile="./samplebuild.xml" target="debugtool"/>
	</target>
</project>
<project name="sample" default="uploadandrun">
	<description>
		Sample build file
	</description>

	<!-- set properties for this build -->
	<property environment="env" />
	<property file="./samples.properties" />
	<property name="src" location="." />
	<basename property="program" file="." />
	<property name="binary" value="${program}.nxj" />
	<property name="debug" value="${program}.nxd" />

	<path id="lejos.pc">
		<fileset dir="${nxj.home}/lib/pc">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<path id="lejos.nxt">
		<fileset dir="${nxj.home}/lib/nxt">
			<include name="**/*.jar" />
		</fileset>
	</path>


	<condition property="d32Flag" value="-d32" else="-Dblank.dummy.arg=">
		<and>
			<os family="mac" />
		</and>
	</condition>

	<!-- deletes class files -->
	<target name="clean" description="clean up all generated files">
		<delete>
			<fileset dir=".">
				<include name="**/*.class" />
				<include name="**/*.nxj" />
				<include name="**/*.nxd" />
			</fileset>
		</delete>
	</target>

	<target name="compile" depends="clean" description="compile the source">
		<!-- Compile the java code from ${src} -->
		<echo>src = ${src}</echo>
		<javac srcdir="${src}" destdir="${src}" debug="true" includeantruntime="false" verbose="false">
			<bootclasspath refid="lejos.nxt" />
			<!--
				Without this, there are some JDK jars in the classpath.
				Set verbose=true to check that the classpath is really clean.
			-->
    		<compilerarg value="-extdirs" />
    		<compilerarg value="" />
		</javac>
	</target>

	<target name="link" depends="compile" description="link the binary">
		<!-- Link the binary and create a signature file -->
		<java classname="lejos.pc.tools.NXJLink" failonerror="true">
			<classpath refid="lejos.pc" />
			<arg value="--bootclasspath" />
			<arg pathref="lejos.nxt" />
			<arg value="--classpath" />
			<arg path="." />
			<arg value="--writeorder" />
			<arg value="LE" />
			<arg value="-o" />
			<arg file="${binary}" />
			<arg value="-od" />
			<arg file="${debug}" />
			<arg value="-v" />
			<arg value="${program}" />
		</java>
	</target>

	<target name="debuglink" depends="compile" description="link the binary">
		<!-- Link the binary and create a signature file -->
		<java classname="lejos.pc.tools.NXJLink" failonerror="true">
			<classpath refid="lejos.pc" />
			<arg value="--bootclasspath" />
			<arg pathref="lejos.nxt" />
			<arg value="--classpath" />
			<arg path="." />
			<arg value="--writeorder" />
			<arg value="LE" />
			<arg value="-o" />
			<arg file="${binary}" />
			<arg value="-od" />
			<arg file="${debug}" />
			<arg value="-gr" />
			<arg value="-v" />
			<arg value="${program}" />
		</java>
	</target>

	<target name="upload" depends="link" description="upload the binary">
		<java classname="lejos.pc.tools.NXJUpload" fork="true" failonerror="true">
			<jvmarg value="-Dnxj.home=${nxj.home}" />
			<jvmarg value="${d32Flag}" />
			<classpath refid="lejos.pc" />
			<arg value="${binary}" />
		</java>
	</target>

	<target name="uploadandrun" depends="link" description="upload and run the binary">
		<java classname="lejos.pc.tools.NXJUpload" fork="true" failonerror="true">
			<jvmarg value="-Dnxj.home=${nxj.home}" />
			<jvmarg value="${d32Flag}" />
			<classpath refid="lejos.pc" />
			<arg value="-r" />
			<arg file="${binary}" />
		</java>
	</target>

	<target name="debuguploadandrun" depends="debuglink" description="upload and run the binary">
		<java classname="lejos.pc.tools.NXJUpload" fork="true" failonerror="true">
			<jvmarg value="-Dnxj.home=${nxj.home}" />
			<jvmarg value="${d32Flag}" />
			<classpath refid="lejos.pc" />
			<arg value="-r" />
			<arg file="${binary}" />
		</java>
	</target>

	<target name="console" depends="debuguploadandrun" description="run a console">
		<sleep seconds="4" />
		<java classname="lejos.pc.tools.NXJConsole" fork="true" failonerror="true">
			<jvmarg value="-Dnxj.home=${nxj.home}" />
			<jvmarg value="${d32Flag}" />
			<classpath refid="lejos.pc" />
			<arg value="-di" />
			<arg file="${debug}" />
		</java>
	</target>
	
	<target name="consoleviewer" depends="debuguploadandrun" description="run the GUI Console Viewer">
		<sleep seconds="4" />
		<java classname="lejos.pc.tools.NXJConsoleViewer" fork="true" failonerror="true">
			<jvmarg value="-Dnxj.home=${nxj.home}" />
			<jvmarg value="${d32Flag}" />
			<classpath refid="lejos.pc" />
			<arg value="-di" />
			<arg file="${debug}" />
		</java>
	</target>
	
	<target name="debugtool" description="run the debug tool">
		  <input
		    message="Exception class:"
		    addproperty="class"
		  />
		  <input
		    message="Method number:"
		    addproperty="method"
		  />
		  <input
		    message="PC value:"
		    addproperty="pc"
		  />
		<java classname="lejos.pc.tools.NXJDebugTool" fork="true" failonerror="true">
			<jvmarg value="-Dnxj.home=${nxj.home}" />
			<classpath refid="lejos.pc" />
			<arg value="-di" />
			<arg file="${debug}" />
			<arg value="-c" />
			<arg value="-m" />
			<arg value="${class}" />
			<arg value="${method}" />
			<arg value="${pc}" />
		</java>
	</target>
</project>
<project name="MINDGameZ" default="uploadandrun">
  <description>
    AlphaRex build file
  </description>
	
  <target name="clean" description="clean up all generated files" >
    <ant antfile="./samplebuild.xml" target="clean"/>
  </target>

  <target name="compile" description="compile the source" >
    <ant antfile="./samplebuild.xml" target="compile"/>
  </target>
	
  <target name="link" description="link the binary" >
    <ant antfile="./samplebuild.xml" target="link"/>
  </target>
	
  <target name="upload" description="upload the binary" >
    <ant antfile="./samplebuild.xml" target="upload"/>
  </target>
	
  <target name="uploadandrun" description="upload and run the binary" >
    <ant antfile="./samplebuild.xml" target="uploadandrun"/>
  </target>

	<target name="console" description="console run" >
		<ant antfile="./samplebuild.xml" target="console"/>
	</target>

	<target name="consoleviewer" description="run the GUI console viewer" >
		<ant antfile="./samplebuild.xml" target="consoleviewer"/>
	</target>
	
	<target name="debugtool" description="run debugtool" >
		<ant antfile="./samplebuild.xml" target="debugtool"/>
	</target>
</project>
<project name="sample" default="uploadandrun">
	<description>
		Sample build file
	</description>

	<!-- set properties for this build -->
	<property environment="env" />
	<property file="./samples.properties" />
	<property name="src" location="." />
	<basename property="program" file="." />
	<property name="binary" value="${program}.nxj" />
	<property name="debug" value="${program}.nxd" />

	<path id="lejos.pc">
		<fileset dir="${nxj.home}/lib/pc">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<path id="lejos.nxt">
		<fileset dir="${nxj.home}/lib/nxt">
			<include name="**/*.jar" />
		</fileset>
	</path>


	<condition property="d32Flag" value="-d32" else="-Dblank.dummy.arg=">
		<and>
			<os family="mac" />
		</and>
	</condition>

	<!-- deletes class files -->
	<target name="clean" description="clean up all generated files">
		<delete>
			<fileset dir=".">
				<include name="**/*.class" />
				<include name="**/*.nxj" />
				<include name="**/*.nxd" />
			</fileset>
		</delete>
	</target>

	<target name="compile" depends="clean" description="compile the source">
		<!-- Compile the java code from ${src} -->
		<echo>src = ${src}</echo>
		<javac srcdir="${src}" destdir="${src}" debug="true" includeantruntime="false" verbose="false">
			<bootclasspath refid="lejos.nxt" />
			<!--
				Without this, there are some JDK jars in the classpath.
				Set verbose=true to check that the classpath is really clean.
			-->
    		<compilerarg value="-extdirs" />
    		<compilerarg value="" />
		</javac>
	</target>

	<target name="link" depends="compile" description="link the binary">
		<!-- Link the binary and create a signature file -->
		<java classname="lejos.pc.tools.NXJLink" failonerror="true">
			<classpath refid="lejos.pc" />
			<arg value="--bootclasspath" />
			<arg pathref="lejos.nxt" />
			<arg value="--classpath" />
			<arg path="." />
			<arg value="--writeorder" />
			<arg value="LE" />
			<arg value="-o" />
			<arg file="${binary}" />
			<arg value="-od" />
			<arg file="${debug}" />
			<arg value="-v" />
			<arg value="${program}" />
		</java>
	</target>

	<target name="debuglink" depends="compile" description="link the binary">
		<!-- Link the binary and create a signature file -->
		<java classname="lejos.pc.tools.NXJLink" failonerror="true">
			<classpath refid="lejos.pc" />
			<arg value="--bootclasspath" />
			<arg pathref="lejos.nxt" />
			<arg value="--classpath" />
			<arg path="." />
			<arg value="--writeorder" />
			<arg value="LE" />
			<arg value="-o" />
			<arg file="${binary}" />
			<arg value="-od" />
			<arg file="${debug}" />
			<arg value="-gr" />
			<arg value="-v" />
			<arg value="${program}" />
		</java>
	</target>

	<target name="upload" depends="link" description="upload the binary">
		<java classname="lejos.pc.tools.NXJUpload" fork="true" failonerror="true">
			<jvmarg value="-Dnxj.home=${nxj.home}" />
			<jvmarg value="${d32Flag}" />
			<classpath refid="lejos.pc" />
			<arg value="${binary}" />
		</java>
	</target>

	<target name="uploadandrun" depends="link" description="upload and run the binary">
		<java classname="lejos.pc.tools.NXJUpload" fork="true" failonerror="true">
			<jvmarg value="-Dnxj.home=${nxj.home}" />
			<jvmarg value="${d32Flag}" />
			<classpath refid="lejos.pc" />
			<arg value="-r" />
			<arg file="${binary}" />
		</java>
	</target>

	<target name="debuguploadandrun" depends="debuglink" description="upload and run the binary">
		<java classname="lejos.pc.tools.NXJUpload" fork="true" failonerror="true">
			<jvmarg value="-Dnxj.home=${nxj.home}" />
			<jvmarg value="${d32Flag}" />
			<classpath refid="lejos.pc" />
			<arg value="-r" />
			<arg file="${binary}" />
		</java>
	</target>

	<target name="console" depends="debuguploadandrun" description="run a console">
		<sleep seconds="4" />
		<java classname="lejos.pc.tools.NXJConsole" fork="true" failonerror="true">
			<jvmarg value="-Dnxj.home=${nxj.home}" />
			<jvmarg value="${d32Flag}" />
			<classpath refid="lejos.pc" />
			<arg value="-di" />
			<arg file="${debug}" />
		</java>
	</target>
	
	<target name="consoleviewer" depends="debuguploadandrun" description="run the GUI Console Viewer">
		<sleep seconds="4" />
		<java classname="lejos.pc.tools.NXJConsoleViewer" fork="true" failonerror="true">
			<jvmarg value="-Dnxj.home=${nxj.home}" />
			<jvmarg value="${d32Flag}" />
			<classpath refid="lejos.pc" />
			<arg value="-di" />
			<arg file="${debug}" />
		</java>
	</target>
	
	<target name="debugtool" description="run the debug tool">
		  <input
		    message="Exception class:"
		    addproperty="class"
		  />
		  <input
		    message="Method number:"
		    addproperty="method"
		  />
		  <input
		    message="PC value:"
		    addproperty="pc"
		  />
		<java classname="lejos.pc.tools.NXJDebugTool" fork="true" failonerror="true">
			<jvmarg value="-Dnxj.home=${nxj.home}" />
			<classpath refid="lejos.pc" />
			<arg value="-di" />
			<arg file="${debug}" />
			<arg value="-c" />
			<arg value="-m" />
			<arg value="${class}" />
			<arg value="${method}" />
			<arg value="${pc}" />
		</java>
	</target>
</project>
