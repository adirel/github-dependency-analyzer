/**
 * Rundeck Master-Build Project
 * 
 * This project does not contain any buildable code and does not generate any 
 * artifacts, however it allows us to set defaults for the subjects and provides 
 * Groovy syntax highlighting for gradle build files (like this one)
 **/
 buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.adaptc.gradle:nexus-workflow:0.5'
    }
}
description = 'The master-build project for Rundeck';

apply plugin: 'nexus-workflow'
apply plugin: 'eclipse';
apply plugin: 'idea'

eclipse.project.name = 'rundeck'

/**
 * Defaults for all projects
 */
subprojects {
    // set the eclipse project naming convention to rundeck:<path>:<projectName>
    // so it matches the logical hierarchy more closely
    apply plugin: 'eclipse'
    eclipse.project.name = "${project.getParent().eclipse.project.name}:${name}"
    
    // the environment can be set by adding -Penvironment={value} as a command
    // line switch. by default we run as 'development'
    ext.environment = project.hasProperty('environment') ? environment : 'development';
    
    // Unless we're doing a release build, append -SNAPSHOT to the end of the
    // artifacts. Otherwise use the currentVersion as defined in gradle.properties and
    // the releaseTag if it is not 'GA'
    def vtag = environment != 'release' ? '-SNAPSHOT' : (project.hasProperty('releaseTag') && releaseTag!='GA' ? '-'+releaseTag : '')  
    version = currentVersion + vtag

    ext.isReleaseBuild = false
    ext.isSnapshotBuild = false
    ext.isDevBuild = false
    if(project.hasProperty('environment') && project.environment == 'release'){
        ext.isReleaseBuild=true
    }else if(project.hasProperty("snapshot")){
        ext.isSnapshotBuild=true
    }else{
        ext.isDevBuild=true
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.4'
}
/**
 * The Rundeck Core API build file
 **/

description = 'The Rundeck Core API project'

import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.plugins.signing.Sign

apply from: "${rootDir}/gradle/java.gradle"
apply plugin: 'signing'

archivesBaseName = 'rundeck-core'
defaultTasks 'clean','assemble'

dependencies {
    compile 'org.apache.ant:ant:1.7.1',
        'log4j:log4j:1.2.16',
        'commons-codec:commons-codec:1.5',
        'commons-beanutils:commons-beanutils:1.8.3',
        'commons-collections:commons-collections:3.2.1',
        'commons-logging:commons-logging:1.1.1',
        'commons-lang:commons-lang:2.6',
        'dom4j:dom4j:1.6.1',
        'commons-cli:commons-cli:1.0',
        'org.apache.ant:ant-jsch:1.7.1',
        'com.jcraft:jsch:0.1.50',
        'org.yaml:snakeyaml:1.9',
        'xerces:xercesImpl:2.6.2',
        'xml-apis:xml-apis:2.0.2' 
    
    compile ('jaxen:jaxen:1.1') {
        // Remove xerces apis as that should be provided by jdk 
        exclude group: 'xerces', module: 'xmlParserAPIs'
        exclude group: 'xml-apis', module: 'xml-apis'
        exclude group: 'xalan', module: 'xalan'
    }
    compile ('commons-httpclient:commons-httpclient:3.0.1') {
        exclude group:'junit', module: 'junit'
    }
    testCompile 'junit:junit:4.8.1',
        'org.mockito:mockito-all:1.8.5'
}

def rundeckToolsDependencies = configurations.runtime.files.collect { "$it.name" }.join(" ")

jar {
    manifest {
        attributes 'Rundeck-Version': version, 
                   'Rundeck-Tools-Dependencies': rundeckToolsDependencies
    }
}

test{
    systemProperties 'rdeck.base': "$projectDir/build/rdeck_base"
}

task expandTemplate << {
    ant.delete(file:"$projectDir/src/main/resources/META-INF/com/dtolabs/rundeck/core/application.properties")
    copy{
        expand('version':version,'version_build':buildNum,'version_ident':version+'-'+buildNum)
        from "$projectDir/src/main/meta/com/dtolabs/rundeck/core/application.properties"
        into "$projectDir/src/main/resources/META-INF/com/dtolabs/rundeck/core/"
    }   
}

compileJava.dependsOn expandTemplate

assemble {
    doLast{
        //copy libs to a tools lib dir
        ant.mkdir(dir:"$projectDir/build/tools/lib")
        configurations.runtime.files.each { file ->
            copy{
                from file
                into "$projectDir/build/tools/lib"
            }
        }
    }
}

// make sure that we've rebuilt and assembled before install
install.dependsOn(build)

//********* artifact signing *********
if(isReleaseBuild && project.hasProperty("signing.keyId")) {
    signing {
        sign configurations.archives
    }
} else {
    task signArchives {
        // do nothing
    }
}

//build a pom we reuse for both maven builds and release to sonatype
def buildpom=pom {
    project {
        artifactId archivesBaseName
        groupId project.group
        inceptionYear '2011'
        packaging 'jar'
        version version
        name "Rundeck Core"
        description "Core library for the Rundeck web console for command dispatching and job scheduling"
        url 'http://rundeck.org'
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
        properties{
            'version'(version)
            'version_build'(buildNum)
            'version_ident'(version+'-'+buildNum)
        }
        scm {
            url 'https://github.com/dtolabs/rundeck'
            connection 'scm:git:git@github.com/dtolabs/rundeck.git'
            developerConnection 'scm:git:git@github.com:dtolabs/rundeck.git'
        }
        developers {
          developer {
            id('gschueler')
            name('Greg Schueler')
            email('greg@dtosolutions.com')
          }
        }
        parent {
            groupId('org.sonatype.oss')
            artifactId('oss-parent')
            version('7')
        }
        build {
            resources{
                resource{
                    directory 'src/main/meta'
                    targetPath 'META-INF'
                    filtering=true
                }
                resource{
                    directory 'src/main/resources'
                }
            }
            plugins{
                plugin() {
                  groupId('org.apache.maven.plugins')
                  artifactId('maven-source-plugin')
                  executions() {
                    execution() {
                      id('attach-sources')
                      goals() {
                        goal('jar')
                      }
                    }
                  }
                }
                plugin() {
                  groupId('org.apache.maven.plugins')
                  artifactId('maven-javadoc-plugin')
                  version('2.8')
                  configuration() {
                    docletArtifact() {
                      groupId('com.google.doclava')
                      artifactId('doclava')
                      version('1.0.3')
                    }
                    doclet('com.google.doclava.Doclava')
                    /* bootclasspath required by Sun's JVM */
                    bootclasspath('${sun.boot.class.path}')
                    additionalparam('''-quiet
                             -federate JDK http://download.oracle.com/javase/6/docs/api/index.html?
                             -federationxml JDK http://doclava.googlecode.com/svn/static/api/openjdk-6.xml
                             -hdf project.name "${project.name}"
                             -d .
                             -hide 101
                             -proofread ./proof-read.txt''')
                    useStandardDocletOptions('false')
                    /* Apple's JVM sometimes requires more memory */
                    additionalJOption('-J-Xmx1024m')
                  }
                  executions() {
                    execution() {
                      id('attach-javadoc')
                      goals() {
                        goal('jar')
                      }
                    }
                  }
                }
                plugin{
                    groupId 'org.apache.maven.plugins'
                    artifactId 'maven-compiler-plugin'
                    version '2.3.2'
                    configuration{
                        'source'('1.6')
                        'target'('1.6')
                    }
                }
                plugin{
                    groupId 'org.apache.maven.plugins'
                    artifactId 'maven-surefire-plugin'
                    version '2.10'
                    configuration{
                        systemPropertyVariables{
                            'rdeck.base'('${project.build.directory}/rdeck_base')
                        }
                        redirectTestOutputToFile 'true'
                    }
                }
                plugin{
                    groupId 'org.apache.maven.plugins'
                    artifactId 'maven-jar-plugin'
                    version '2.3.2'
                    configuration{
                        archive{
                          manifestEntries{
                            'Rundeck-Version'(version)
                            'Rundeck-Tools-Dependencies'(rundeckToolsDependencies)
                          }
                        }
                    }
                }
            }
        }
    }
}

task createPom << {
    buildpom.writeTo("pom.xml")
}


// prompt for PGP key passphrase if not set
gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign } && project.hasProperty("signing.keyId") && !project.hasProperty("signing.password") && !isDevBuild) {
        // Use Java 6's console to read from the console (no good for a CI environment)
        Console console = System.console()
        console.printf "\n\nWe have to sign some things in this build.\n\nPlease enter your signing details.\n\n"

        //def id = console.readLine("PGP Key Id: ")
        //def file = console.readLine("PGP Secret Key Ring File (absolute path): ")
        def password = console.readPassword("PGP Private Key Password: ")

        //allprojects { ext."signing.keyId" = id }
        //allprojects { ext."signing.secretKeyRingFile" = file }
        allprojects { ext."signing.password" = password }

        console.printf "\nThanks.\n\n"
    }
}

uploadArchives {
    if(isDevBuild){
        repositories{
            repositories.mavenDeployer {
                configuration = configurations.archives
                pom=buildpom
            }
        }
    }else{
        repositories.mavenDeployer {
            if(isReleaseBuild){
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            }
 
            configuration = configurations.archives
            if(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')){
                repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
                snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
            }
            pom=buildpom
        }
    }
}
version = '2.0.0-SNAPSHOT'
defaultTasks 'clean','build'
apply plugin: 'java'
apply plugin: 'idea'
sourceCompatibility = 1.5
ext.rundeckPluginVersion= '1.1'


repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile( [group: 'org.rundeck', name: 'rundeck-core', version: version,ext:'jar'])
    testCompile(
        //[group: 'junit', name: 'junit', version: '3.8.1',ext:'jar']
    )
}

ext.pluginClassNames='com.dtolabs.rundeck.plugin.example.ExampleStreamingLogWriterPlugin,com.dtolabs.rundeck.plugin.example.ExampleExecutionFileStoragePlugin'
//ext.pluginClassNames='com.dtolabs.rundeck.plugin.example.ExampleStreamingLogWriterPlugin,com.dtolabs.rundeck.plugin.example.ExampleStreamingLogReaderPlugin'
jar {
    manifest {
        attributes 'Rundeck-Plugin-Classnames': pluginClassNames
        attributes 'Rundeck-Plugin-File-Version': version
        attributes 'Rundeck-Plugin-Version': rundeckPluginVersion, 'Rundeck-Plugin-Archive': 'true'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.0'
}



apply plugin: 'maven'
task createPom << {
    pom {
        project {
            artifactId 'rundeck-example-streaming-log-plugin'
            groupId "com.dtolabs.rundeck"
            inceptionYear '2012'
            packaging 'jar'
            version version
            name "RunDeck Example Streaming Log Plugin"
            url 'http://rundeck.org'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            parent{
                groupId 'com.dtolabs.rundeck'
                artifactId "rundeck-bundled-plugins"
                version(version)
            }
            build{
                plugins{
                    plugin{
                        groupId 'org.apache.maven.plugins'
                        artifactId 'maven-jar-plugin'
                        version '2.3.2'
                        configuration{
                            archive{
                              manifestEntries{
                                'Rundeck-Plugin-Classnames'(pluginClassNames)
                                'Rundeck-Plugin-File-Version' version
                                'Rundeck-Plugin-Version' rundeckPluginVersion
                                'Rundeck-Plugin-Archive' 'true'
                              }
                            }
                        }
                    }
                }
            }
        }
    }.writeTo("pom.xml")
}
version = '2.0.2'
defaultTasks 'clean','build'
apply plugin: 'java'
apply plugin: 'idea'
sourceCompatibility = 1.5
ext.rundeckPluginVersion= '1.1'


repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile( [group: 'org.rundeck', name: 'rundeck-core', version: version,ext:'jar'])
    testCompile(
        //[group: 'junit', name: 'junit', version: '3.8.1',ext:'jar']
    )
}

ext.pluginClassNames='org.rundeck.plugin.example.ExampleNodeExecutorPlugin'
jar {
    manifest {
        attributes 'Rundeck-Plugin-Classnames': pluginClassNames
        attributes 'Rundeck-Plugin-File-Version': version
        attributes 'Rundeck-Plugin-Version': rundeckPluginVersion, 'Rundeck-Plugin-Archive': 'true'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.10'
}



apply plugin: 'maven'
task createPom << {
    pom {
        project {
            artifactId 'rundeck-example-nodeexecutor-plugin'
            groupId "org.rundeck.example"
            inceptionYear '2014'
            packaging 'jar'
            version version
            name "RunDeck Example NodeExecutor Plugin"
            url 'http://rundeck.org'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            parent{
                groupId 'com.dtolabs.rundeck'
                artifactId "rundeck-bundled-plugins"
                version(version)
            }
            build{
                plugins{
                    plugin{
                        groupId 'org.apache.maven.plugins'
                        artifactId 'maven-jar-plugin'
                        version '2.3.2'
                        configuration{
                            archive{
                              manifestEntries{
                                'Rundeck-Plugin-Classnames'(pluginClassNames)
                                'Rundeck-Plugin-File-Version' version
                                'Rundeck-Plugin-Version' rundeckPluginVersion
                                'Rundeck-Plugin-Archive' 'true'
                              }
                            }
                        }
                    }
                }
            }
        }
    }.writeTo("pom.xml")
}
version = '1.5.1-SNAPSHOT'
defaultTasks 'clean','build'
apply plugin: 'java'
apply plugin: 'idea'
sourceCompatibility = 1.5
ext.rundeckPluginVersion= '1.1'


repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile( [group: 'org.rundeck', name: 'rundeck-core', version: version,ext:'jar'])
    testCompile(
        //[group: 'junit', name: 'junit', version: '3.8.1',ext:'jar']
    )
}

ext.pluginClassNames='com.dtolabs.rundeck.plugin.example.ExampleNotificationPlugin'
jar {
    manifest {
        attributes 'Rundeck-Plugin-Classnames': pluginClassNames
        attributes 'Rundeck-Plugin-File-Version': version
        attributes 'Rundeck-Plugin-Version': rundeckPluginVersion, 'Rundeck-Plugin-Archive': 'true'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.0'
}



apply plugin: 'maven'
task createPom << {
    pom {
        project {
            artifactId 'rundeck-example-notification-plugin'
            groupId "com.dtolabs.rundeck"
            inceptionYear '2012'
            packaging 'jar'
            version version
            name "RunDeck Example Notification Plugin"
            url 'http://rundeck.org'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            parent{
                groupId 'com.dtolabs.rundeck'
                artifactId "rundeck-bundled-plugins"
                version(version)
            }
            build{
                plugins{
                    plugin{
                        groupId 'org.apache.maven.plugins'
                        artifactId 'maven-jar-plugin'
                        version '2.3.2'
                        configuration{
                            archive{
                              manifestEntries{
                                'Rundeck-Plugin-Classnames'(pluginClassNames)
                                'Rundeck-Plugin-File-Version' version
                                'Rundeck-Plugin-Version' rundeckPluginVersion
                                'Rundeck-Plugin-Archive' 'true'
                              }
                            }
                        }
                    }
                }
            }
        }
    }.writeTo("pom.xml")
}
version = '1.5.3-SNAPSHOT'
defaultTasks 'clean','build'
apply plugin: 'java'
apply plugin: 'idea'
sourceCompatibility = 1.5
ext.rundeckPluginVersion= '1.1'


repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile( [group: 'org.rundeck', name: 'rundeck-core', version: version,ext:'jar'])
    testCompile(
        //[group: 'junit', name: 'junit', version: '3.8.1',ext:'jar']
    )
}

ext.pluginClassNames='com.dtolabs.rundeck.plugin.example.ExampleNodeStepPlugin,com.dtolabs.rundeck.plugin.example.ExampleStepPlugin,com.dtolabs.rundeck.plugin.example.ExampleRemoteScriptNodeStepPlugin'
jar {
    manifest {
        attributes 'Rundeck-Plugin-Classnames': pluginClassNames
        attributes 'Rundeck-Plugin-File-Version': version
        attributes 'Rundeck-Plugin-Version': rundeckPluginVersion, 'Rundeck-Plugin-Archive': 'true'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.0'
}



apply plugin: 'maven'
task createPom << {
    pom {
        project {
            artifactId 'rundeck-test-node-step-plugin'
            groupId "com.dtolabs.rundeck"
            inceptionYear '2012'
            packaging 'jar'
            version version
            name "RunDeck Test Node Step Plugin"
            url 'http://rundeck.org'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            parent{
                groupId 'com.dtolabs.rundeck'
                artifactId "rundeck-bundled-plugins"
                version(version)
            }
            build{
                plugins{
                    plugin{
                        groupId 'org.apache.maven.plugins'
                        artifactId 'maven-jar-plugin'
                        version '2.3.2'
                        configuration{
                            archive{
                              manifestEntries{
                                'Rundeck-Plugin-Classnames'(pluginClassNames)
                              }
                            }
                        }
                    }
                }
            }
        }
    }.writeTo("pom.xml")
}
version = '1.5-dev'
defaultTasks 'clean','build'
apply plugin: 'java'
apply plugin: 'idea'
sourceCompatibility = 1.5
archivesBaseName = "rundeck-$project.name"
rundeckPluginVersion= '1.1'

repositories {
    mavenCentral()
}

dependencies {
    compile files("${rootProject.projectDir}/../../core/build/libs/rundeck-core-${version}.jar")
    testCompile(
        //[group: 'junit', name: 'junit', version: '3.8.1',ext:'jar']
    )
}
jar {
    manifest {
        attributes 'Rundeck-Plugin-Version': rundeckPluginVersion, 'Rundeck-Plugin-Archive': 'true'
    }
}

//specific build values for this plugin

configurations{
    //declare custom pluginLibs configuration to include only libs for this plugin
    pluginLibs 
    
    //declare compile to extend from pluginLibs so it inherits the dependencies
    compile{
        extendsFrom pluginLibs
    }
}
dependencies {
    //add lib/*.jar files to pluginLibs
    pluginLibs fileTree(dir: 'lib', include: '*.jar')
}

// task to copy plugin libs to output/lib dir
task copyToLib(type: Copy) {
    into "$buildDir/output/lib"
    from configurations.pluginLibs
}

jar {
    //include contents of output dir
    from "$buildDir/output"
    manifest {
        //create space-separated list of pluginLibs
        def libList = configurations.pluginLibs.collect{relativePath(it)}.join(' ') 
        attributes 'Rundeck-Plugin-Classnames': 'com.dtolabs.rundeck.plugin.resources.format.json.JsonResourceFormatParser,com.dtolabs.rundeck.plugin.resources.format.json.JsonResourceFormatGenerator', 'Rundeck-Plugin-Libs': "${libList}"
    }
}

//set jar task to depend on copyToLib
jar.dependsOn(copyToLib)


task wrapper(type: Wrapper) {
    gradleVersion = '0.9-rc-3'
    jarPath = 'wrapper'
}
/**
 * The Rundeck plugins parent project
 */


eclipse.project.name =  "${project.getParent().eclipse.project.name}:plugins";

ext.rundeckPluginVersion= '1.1'
subprojects{

    apply from: "${rootDir}/gradle/java.gradle"
    
    defaultTasks 'clean','build'
    archivesBaseName = "rundeck-$project.name"

    dependencies {
        compile project(":core")
    }
    
    jar {
        manifest {
            attributes 'Rundeck-Plugin-Version': rundeckPluginVersion, 
                       'Rundeck-Plugin-Archive': 'true', 
                       'Rundeck-Plugin-File-Version': version
        }
    }
}
apply plugin: 'maven';


task createPom << {
    pom {
        project {
            artifactId 'rundeck-bundled-plugins'
            groupId project.group
            inceptionYear '2011'
            packaging 'pom'
            version version
            name "RunDeck Bundled Plugins"
            url 'http://rundeck.org'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            modules{
                module 'stub-plugin'
                module 'script-plugin'
                module 'localexec-plugin'
                module 'copyfile-plugin'
            }
            dependencies{
                dependency{
                    artifactId 'rundeck-core'
                    groupId project.group
                    version version
                }
            }
            build{
                plugins{
                    plugin{
                        groupId 'org.apache.maven.plugins'
                        artifactId 'maven-jar-plugin'
                        version '2.3.2'
                        configuration{
                            archive{
                              manifestEntries{
                                'Rundeck-Plugin-Version'(rundeckPluginVersion)
                                'Rundeck-Plugin-Archive'('true')
                                'Rundeck-Plugin-File-Version'(version)
                              }
                            }
                        }
                    }

                    plugin{
                        groupId 'org.apache.maven.plugins'
                        artifactId 'maven-compiler-plugin'
                        version '2.3.2'
                        configuration{
                            'source'('1.6')
                            'target'('1.6')
                        }
                    }
                }
            }
        }
    }.writeTo("pom.xml")
}

/**
 * The Rundeck CopyFile plugin build file
 */

description 'This plugin provides the ability to mock the execution of a job'

ext.pluginClassNames='com.dtolabs.rundeck.plugin.copyfile.CopyFileNodeStepPlugin'
jar {
    manifest {
        attributes 'Rundeck-Plugin-Classnames': pluginClassNames
    }
}

task createPom << {
    pom {
        project {
            artifactId 'rundeck-copyfile-plugin'
            groupId project.group
            inceptionYear '2011'
            packaging 'jar'
            version version
            name "RunDeck CopyFile Step Plugin"
            url 'http://rundeck.org'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            parent{
                groupId project.group
                artifactId "rundeck-bundled-plugins"
                version(version)
            }
            build{
                plugins{
                    plugin{
                        groupId 'org.apache.maven.plugins'
                        artifactId 'maven-jar-plugin'
                        version '2.3.2'
                        configuration{
                            archive{
                              manifestEntries{
                                'Rundeck-Plugin-Classnames'(pluginClassNames)
                                  'Rundeck-Plugin-Version'(rundeckPluginVersion)
                                  'Rundeck-Plugin-Archive'('true')
                                  'Rundeck-Plugin-File-Version'(version)
                              }
                            }
                        }
                    }
                }
            }
        }
    }.writeTo("pom.xml")
}
ext.pluginClassNames='com.dtolabs.rundeck.plugin.localexec.LocalExecNodeStepPlugin'
jar {
    manifest {
        attributes 'Rundeck-Plugin-Classnames': pluginClassNames
    }
}

apply plugin: 'idea'
apply plugin: 'maven'

dependencies {
	compile project(":core")
}

task createPom << {
    pom {
        project {
            artifactId 'rundeck-localexec-plugin'
            groupId project.group
            inceptionYear '2011'
            packaging 'jar'
            version version
            name "RunDeck LocalExec Node Step Plugin"
            url 'http://rundeck.org'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            parent{
                groupId project.group
                artifactId "rundeck-bundled-plugins"
                version(version)
            }
            build{
                plugins{
                    plugin{
                        groupId 'org.apache.maven.plugins'
                        artifactId 'maven-jar-plugin'
                        version '2.3.2'
                        configuration{
                            archive{
                              manifestEntries{
                                'Rundeck-Plugin-Classnames'(pluginClassNames)
                                  'Rundeck-Plugin-Version'(rundeckPluginVersion)
                                  'Rundeck-Plugin-Archive'('true')
                                  'Rundeck-Plugin-File-Version'(version)
                              }
                            }
                        }
                    }
                }
            }
        }
    }.writeTo("pom.xml")
}
/**
 * The Rundeck script plugin build file
 */

description 'This plugin provides the ability to delegate execution to an external script'

ext.pluginClassNames='com.dtolabs.rundeck.plugin.script.ScriptFileCopier,com.dtolabs.rundeck.plugin.script.ScriptNodeExecutor'
jar {
    manifest {
        attributes 'Rundeck-Plugin-Classnames': pluginClassNames
    }
}

task createPom << {
    pom {
        project {
            artifactId 'rundeck-script-plugin'
            groupId project.group
            inceptionYear '2011'
            packaging 'jar'
            version version
            name "RunDeck Script Plugin"
            url 'http://rundeck.org'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            parent{
                groupId project.group
                artifactId "rundeck-bundled-plugins"
                version(version)
            }
            build{
                plugins{
                    plugin{
                        groupId 'org.apache.maven.plugins'
                        artifactId 'maven-jar-plugin'
                        version '2.3.2'
                        configuration{
                            archive{
                              manifestEntries{
                                'Rundeck-Plugin-Classnames'(pluginClassNames)
                                  'Rundeck-Plugin-Version'(rundeckPluginVersion)
                                  'Rundeck-Plugin-Archive'('true')
                                  'Rundeck-Plugin-File-Version'(version)
                              }
                            }
                        }
                    }
                }
            }
        }
    }.writeTo("pom.xml")
}
/**
 * The Rundeck stub plugin build file
 */

description 'This plugin provides the ability to mock the execution of a job'

ext.pluginClassNames='com.dtolabs.rundeck.plugin.stub.StubFileCopier,com.dtolabs.rundeck.plugin.stub.StubNodeExecutor'
jar {
    manifest {
        attributes 'Rundeck-Plugin-Classnames': pluginClassNames
    }
}

task createPom << {
    pom {
        project {
            artifactId 'rundeck-stub-plugin'
            groupId project.group
            inceptionYear '2011'
            packaging 'jar'
            version version
            name "RunDeck Stub Plugin"
            url 'http://rundeck.org'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            parent{
                groupId project.group
                artifactId "rundeck-bundled-plugins"
                version(version)
            }
            build{
                plugins{
                    plugin{
                        groupId 'org.apache.maven.plugins'
                        artifactId 'maven-jar-plugin'
                        version '2.3.2'
                        configuration{
                            archive{
                              manifestEntries{
                                'Rundeck-Plugin-Classnames'(pluginClassNames)
                                  'Rundeck-Plugin-Version'(rundeckPluginVersion)
                                  'Rundeck-Plugin-Archive'('true')
                                  'Rundeck-Plugin-File-Version'(version)
                              }
                            }
                        }
                    }
                }
            }
        }
    }.writeTo("pom.xml")
}
/**
 * The Rundeck Launch parent build file
 */

description = "The parent launcher project provides defaults for it's children"

apply from: "${rootDir}/gradle/java.gradle"

eclipse.project.name = "${project.getParent().eclipse.project.name}:launcher"

subprojects{
    apply from: "${rootDir}/gradle/java.gradle"
    defaultTasks 'clean','assemble'
    ext.jettyVersion='7.6.0.v20120127'
}

task createPom << {
    pom {
        project {
            artifactId 'rundeck-launcher-parent'
            groupId project.group
            inceptionYear '2011'
            packaging 'pom'
            version version
            name "RunDeck Launcher Parent"
            url 'http://rundeck.org'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            modules{
                module 'rundeck-jetty-server'
                module 'launcher'
            }
        }
    }.writeTo("pom.xml")
}
/**
 * The Rundeck launcher app build file
 */

description = 'This is the launcher application which wraps the Jetty server'

apply plugin:'application'

mainClassName = 'com.dtolabs.rundeck.ExpandRunServer'

archivesBaseName = 'rundeck-launcher'
defaultTasks 'clean','launcherJar'
ext.launcherMainClass = mainClassName
ext.launcherStartClass = "com.dtolabs.rundeck.RunServer"
ext.launcherJettyLibs = "servlet-api-2.5-20081211.jar jetty-${jettyVersion}.jar jetty-util-${jettyVersion}.jar jetty-naming-${jettyVersion}.jar jetty-plus-${jettyVersion}.jar jna-3.2.2.jar libpam4j-1.5.jar not-yet-commons-ssl-0.3.11.jar"
ext.launcherJettyLibsUnexpanded = 'servlet-api-2.5-20081211.jar jetty-${jettyVersion}.jar jetty-util-${jettyVersion}.jar jetty-naming-${jettyVersion}.jar jetty-plus-${jettyVersion}.jar jna-3.2.2.jar libpam4j-1.5.jar not-yet-commons-ssl-0.3.11.jar'
ext.launcherJettyLibPath = "pkgs/webapp/WEB-INF/lib"

ext.launcherContentsDir = new File("$projectDir/build/launcher-contents")

eclipse.project.name = "${rootProject.eclipse.project.name}:launcher:app";

configurations{
    warBundle
    jettyServerLib
    pluginFiles{
        transitive = false
    }
}

dependencies {
    compile project(":rundeck-launcher:rundeck-jetty-server"),
		'commons-cli:commons-cli:1.0'
	
    warBundle project(':rundeckapp')
	
    pluginFiles project(':plugins:script-plugin'),
        project(':plugins:stub-plugin'),
        project(':plugins:localexec-plugin'),
        project(':plugins:copyfile-plugin')

    jettyServerLib(project(path:":rundeck-launcher:rundeck-jetty-server", configuration:'runtime')) {
        exclude module:'commons-cli'
        transitive = true
    }
    jettyServerLib("org.kohsuke:libpam4j:1.5"){
        transitive = true
    }
}

task setupLauncherContent << {
    launcherContentsDir.mkdirs()
}

task expandCli(dependsOn: setupLauncherContent) << {
    //copy libs to a tools lib dir
    def dep = configurations.compile.allDependencies.find { dep -> dep.name == 'commons-cli' }
    FileTree cliJar = zipTree(configurations.compile.files(dep).find{it})
    copy{
        from cliJar
        exclude 'META-INF/**'
        into launcherContentsDir
    }
}

task expandWar(dependsOn: setupLauncherContent) << {
    //copy libs to a tools lib dir
    File webappDir=new File(launcherContentsDir,"pkgs/webapp")
    webappDir.mkdirs()
    FileTree rundeckWar = zipTree(configurations.warBundle.files.find{ file -> file})
    copy{
        from rundeckWar
        into webappDir
    }
}

task copyJettyServerLib(dependsOn: setupLauncherContent) << {
    File libDir=new File(launcherContentsDir,"lib")
    libDir.mkdirs()
    def serverlibjar = configurations.jettyServerLib.files
    copy{
        from serverlibjar
        into libDir
    }
}

task copyPluginLibs(dependsOn: setupLauncherContent) << {
    File libextDir=new File(launcherContentsDir,"libext")
    libextDir.mkdirs()
    configurations.pluginFiles.files.each{ pluginFile->
        copy{
            from pluginFile
            into libextDir
        }
    }
}

jar {
    from launcherContentsDir
    from sourceSets.main.output
    exclude 'com/dtolabs/rundeck/RunServer.class'
    manifest {
        attributes 'Rundeck-Version': version, 'Main-Class':"${launcherMainClass}", "Rundeck-Start-Class":"${launcherStartClass}", "Rundeck-Jetty-Libs":"${launcherJettyLibs}", "Rundeck-Jetty-Lib-Path":"${launcherJettyLibPath}"
    }
}
jar.dependsOn(expandCli, expandWar, copyJettyServerLib, copyPluginLibs)

apply plugin: 'maven'
task createPom << {
    pom {
        project {
            artifactId archivesBaseName
            groupId project.group
            inceptionYear '2011'
            packaging 'jar'
            version version
            name "Rundeck Launcher"
            url 'http://rundeck.org'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            properties{
                'jettyVersion'(jettyVersion)
                'launcherStartClass'(launcherStartClass)
                'launcherMainClass'(launcherMainClass)
                'launcherJettyLibPath'(launcherJettyLibPath)
            }
            build {
                plugins{
                    plugin{
                        groupId 'org.apache.maven.plugins'
                        artifactId 'maven-compiler-plugin'
                        version '2.3.2'
                        configuration{
                            'source'('1.5')
                            'target'('1.5')
                        }
                    }
                    plugin{
                        groupId 'org.apache.maven.plugins'
                        artifactId 'maven-assembly-plugin'
                        version '2.2.2'
                        configuration{
                            appendAssemblyId('false')
                            descriptors{
                                descriptor('src/main/assembly/src.xml')
                            }
                            archive{
                              manifestEntries{
                                'Rundeck-Version'('${project.version}')  
                                'Rundeck-Start-Class'('${launcherStartClass}')
                                'Main-Class'('${launcherMainClass}')
                                'Rundeck-Jetty-Libs'(launcherJettyLibsUnexpanded)
                                'Rundeck-Jetty-Lib-Path'('${launcherJettyLibPath}')
                              }
                            }
                        }
                        executions{
                            execution{
                                id 'make-assembly'
                                phase 'package'
                                goals{
                                    goal 'single'
                                }
                            }
                        }
                    }
                    plugin{
                        groupId 'org.apache.maven.plugins'
                        artifactId 'maven-jar-plugin'
                        version '2.3.2'
                        configuration{
                            classifier 'code'
                        }
                    }
                }
            }
            dependencies{
                (configurations.warBundle.dependencies).each{ dep ->
                    dependency{
                        groupId dep.group
                        artifactId 'rundeck' //override gradle project name
                        version dep.version
                        type 'war'
                    }
                }
                (configurations.pluginFiles.dependencies).each{ dep ->
                    dependency{
                        groupId dep.group
                        artifactId "rundeck-${dep.name}" //override gradle project name
                        version dep.version
                        type 'jar'
                    }
                }
//                (configurations.jettyServerLib.dependencies).each{ dep ->
//                    dependency{
//                        groupId dep.group
//                        artifactId dep.name
//                        version dep.version
//                        type 'jar'
//                    }
//                }
            }
        }
    }.writeTo("pom.xml")
}

/**
 * The Rundeck Jetty server build file
 */

description = 'This is the embedded Jetty server project'

archivesBaseName = 'rundeck-jetty-server'

// set the convention to rundeck:<branch>:<path>:<projectName>
eclipse.project.name =  "${rootProject.eclipse.project.name}:launcher:server";

dependencies {
    compile( 
        [group: 'log4j', name: 'log4j', version: '1.2.16',ext:'jar'],
        [group: 'commons-cli', name: 'commons-cli', version: '1.0',ext:'jar'],
        [group: 'org.eclipse.jetty.aggregate', name: 'jetty-all', version: jettyVersion,ext:'jar'],
        [group: 'org.kohsuke', name:'libpam4j', version:'1.5', ext:'jar'],
        // This is in httpcomponents 4+ but stuck on 3.x for now.
        [group: 'ca.juliusdavies', name: 'not-yet-commons-ssl', version: '0.3.11', ext: 'jar'],
    )
    runtime(
        [group: 'org.eclipse.jetty.aggregate', name: 'jetty-all', version: jettyVersion, ext: 'jar'],
        [group: 'javax.servlet', name: 'servlet-api', version: '2.5', ext: 'jar'],
    )
    testCompile (
        [group: 'junit', name: 'junit', version: '4.8.1',ext:'jar'],
        [group: 'org.mockito', name: 'mockito-all', version: '1.8.5',ext:'jar'],
    )
}

jar {
    manifest {
        attributes 'Rundeck-Version': version, 'Main-Class':"com.dtolabs.rundeck.RunServer"
    }
}

install.dependsOn build 

apply plugin: 'maven'
task createPom << {
    pom {
        project {
            artifactId archivesBaseName
            groupId project.group
            inceptionYear '2011'
            packaging 'jar'
            version version
            name "RunDeck Jetty Server"
            url 'http://rundeck.org'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            build {
                plugins{
                    plugin{
                        groupId 'org.apache.maven.plugins'
                        artifactId 'maven-compiler-plugin'
                        version '2.3.2'
                        configuration{
                            'source'('1.5')
                            'target'('1.5')
                        }
                    }
                    plugin{
                        groupId 'org.apache.maven.plugins'
                        artifactId 'maven-jar-plugin'
                        version '2.3.2'
                        configuration{
                            archive{
                              manifestEntries{
                                'Rundeck-Version'(version)
                                'Main-Class'('com.dtolabs.rundeck.RunServer')
                              }
                            }
                        }
                    }
                }
            }
        }
    }.writeTo("pom.xml")
}
import java.io.File;
import java.util.Map;

import org.gradle.api.Project;
import org.gradle.api.DefaultTask
import org.gradle.api.tasks.TaskAction
import org.gradle.plugins.signing.Sign

/**
 * The Rundeck webapp build file
 * 
 * It's important to note that grails has it's own build system based on Gant. Rather
 * than trying to integrate Gradle directly with Gant or use one of the Gradle-Grails plugins
 * available, we're following in the steps of the Make based build and just wrapping 
 * around the Grails builds.
 */

description = 'The Rundeck Grails webapp project'

apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'signing'

// set the convention to rundeck:<branch>:<path>:<projectName>
eclipse.project.name =  "${project.getParent().eclipse.project.name}:webapp"

// Properties for downloading, installing and running Grails
def grailsBaseName = "grails-${grailsVersion}"
def grailsZipFile = "${grailsBaseName}.zip"
def grailsZipFileDefaultBasePath = "${rootProject.buildDir}/tmp"
def boolean grailsZipFileBasePathOverriden = hasProperty("grailsZipFileBasePath")
def grailsZipFileBasePath = grailsZipFileBasePathOverriden ? grailsZipFileBasePath : grailsZipFileDefaultBasePath
def grailsZipFileLocation = "${grailsZipFileBasePath}/${grailsZipFile}"
def grailsInstallLocation = "${rootProject.buildDir}/local"
def grailsLocalRepo = hasProperty("grailsLocalRepo") ? grailsLocalRepo : "grails-app/plugins"
def grailsDownloadUrl = "http://dist.springframework.org.s3.amazonaws.com/release/GRAILS/grails-${grailsVersion}.zip"
def grailsHome = "${grailsInstallLocation}/${grailsBaseName}"
def grailsCommandLine = "${grailsHome}/bin/grails"
def mavenCredsDefined = hasProperty("mavenUser") && hasProperty("mavenPassword") && hasProperty("mavenRealm") && hasProperty("mavenHost")
def mavenCreds = mavenCredsDefined ? "-Dmaven.user=${mavenUser} -Dmaven.password=${mavenPassword} -Dmaven.realm=${mavenRealm} -Dmaven.host=${mavenHost}" : ""
def warFileName = "rundeck-${version}.war"
def warFileLocation = "${project.projectDir}/target/${warFileName}"

/**
 * Downloads Grails from the SpringSource archives
 */
task downloadGrails {
    File grailsArchive = file(grailsZipFileLocation);
    outputs.file grailsArchive;
    doLast {
        if (grailsZipFileBasePathOverriden) {
            logger.warn("Using existing Grails zip file: ${grailsZipFileLocation}");
            if (!grailsArchive.isFile()) {
                throw new InvalidUserDataException("Grails zip file does not exist: ${grailsZipFileLocation}");
            }
        } else {
            logger.warn("Downloading ${grailsBaseName}...");
            file("${grailsZipFileBasePath}").mkdirs();
            if (!grailsArchive.isFile()) {
                ant.get(src: grailsDownloadUrl, dest: grailsZipFileLocation, verbose: true);
            }
        }
    }
}

/**
 * Expand the downloaded archive if it hasn't already been expanded
 */
task extractGrails(dependsOn: downloadGrails) {

    logger.debug("grailsZipFileLocation: ${grailsZipFileLocation}")
    inputs.file file(grailsZipFileLocation);

    logger.debug("grailsInstallLocation: ${grailsInstallLocation}")
    outputs.dir file(grailsHome);

    doLast {
        logger.info("Extracting ${grailsZipFile}...")
        file(grailsInstallLocation).mkdirs();
        copy {
            from zipTree(grailsZipFileLocation);
            into file(grailsInstallLocation);
        }
        // make sure that everything but the .bat files are set +x on linux / macs
        if (System.getProperty('os.name').toLowerCase().indexOf('win') < 0) {
            FileTree tree = fileTree("${grailsInstallLocation}/${grailsBaseName}/bin").exclude('**/*.bat');
            tree.each { File file ->
                logger.info('Setting +x permission on ' + file);
                file.setExecutable(true);
            }
        }
    }
}

/**
 * "core" needs to be built and installed into the local ~/.m2 repo before
 * we attempt to do anything further with Grails.
 */
task installDependencies(dependsOn: [project(":core").install, project(":rundeck-launcher:rundeck-jetty-server").install]) << {
    description = "Builds and installs dependencies on other subprojects"
}

/**
 * Installs the jetty-plugin into the .grails folder
 */
task installJettyPlugin(type: Exec, dependsOn: [extractGrails]) {

    def jettyPluginVersion = '2.0.3'
    def jettyPluginInstalled = "${System.properties['user.home']}/.grails/${grailsVersion}/projects/rundeckapp/plugins/jetty-${jettyPluginVersion}"

    outputs.dir file(jettyPluginInstalled)

    workingDir project.projectDir
    environment 'GRAILS_HOME', grailsHome
    commandLine grailsCommandLine
    args "-Dmaven.central.url=${mavenCentralUrl}",
            "${mavenCreds}",
            "-Dgrails.local.repo=${grailsLocalRepo}",
            "-DRUNDECK_VERSION=${version}",
            'install-plugin',
            'jetty',
            jettyPluginVersion
}

task cleanWar(type: Delete) {
    delete file(warFileLocation), file("${project.projectDir}/target")
}

task cleanGrails(type: Exec, dependsOn: [extractGrails]) {
    ignoreExitValue=true
    workingDir project.projectDir
    environment 'GRAILS_HOME', grailsHome
    commandLine grailsCommandLine
    args "-DRUNDECK_VERSION=${version}", 'clean'
}

task clean(overwrite: true, dependsOn: [cleanEclipse, cleanWar, cleanGrails]) {
}

/**
 * Wrapper task for grails test-app
 */
task testGrails(type: Exec, overwrite: true, dependsOn: [installJettyPlugin, installDependencies,extractGrails]) {

    workingDir project.projectDir
    environment 'GRAILS_HOME', grailsHome
    commandLine grailsCommandLine
    args "-Dmaven.central.url=${mavenCentralUrl}",
            "${mavenCreds}",
            "-Dgrails.local.repo=${grailsLocalRepo}",
            "-DRUNDECK_VERSION=${version}",
            "-Drdeck.base=${project.buildDir}/rdeck_base",
            'test-app',
            '-coverage',
            '-xml'
}
test.dependsOn testGrails

/**
 * Run grails compile
 */
task grailsCompile(type: Exec, overwrite: true, dependsOn: [extractGrails]) {
    workingDir project.projectDir
    environment 'GRAILS_HOME', grailsHome
    commandLine grailsCommandLine
    args "-Dmaven.central.url=${mavenCentralUrl}",
            "${mavenCreds}",
            "-Dgrails.local.repo=${grailsLocalRepo}",
            "-DRUNDECK_VERSION=${version}",
            'prod',
            'compile'
}
/**
 * Builds the rundeck war file
 */
task grailsWar(type: Exec, overwrite:true, dependsOn: [installJettyPlugin, installDependencies,extractGrails]) {
    inputs.sourceDir file("${projectDir}/src")
    outputs.file file(warFileLocation)
    workingDir project.projectDir
    environment 'GRAILS_HOME', grailsHome
    commandLine grailsCommandLine
    args "-Dmaven.central.url=${mavenCentralUrl}",
            "${mavenCreds}",
            "-Dgrails.local.repo=${grailsLocalRepo}",
            "-DRUNDECK_VERSION=${version}",
            'prod',
            'war',
            '--non-interactive',
            warFileLocation
}

// add the war to default configuration for this project
artifacts{
    'default'(file(warFileLocation)){
        name 'rundeck'
        type 'war'
        builtBy grailsWar
    }
}

task build(overwrite: true, dependsOn: [test, grailsWar]) {
    // noop build because this isn't actually a java project
    // besides the war task is handling building by issuing a "grails war"
}

/**
 * Installs the war file into the ~/.m2 maven repo
 */
task install(type: Exec, overwrite: true, dependsOn: grailsWar) {
    inputs.file file(warFileLocation)
    workingDir project.projectDir
    commandLine grailsCommandLine
    args "-Dmaven.central.url=${mavenCentralUrl}",
            "${mavenCreds}",
            "-Dgrails.local.repo=${grailsLocalRepo}",
            'maven-install'
}

//********* artifact signing *********
if(isReleaseBuild && project.hasProperty("signing.keyId")) {
    signing {
        sign configurations.archives
    }
} else {
    task signArchives {
        // do nothing
    }
}

//build a pom we reuse for both maven builds and release to sonatype
def deploypom=pom {
    project {
        artifactId archivesBaseName
        groupId project.group
        inceptionYear '2011'
        packaging 'war'
        version version
        name "Rundeck Web app"
        description "Rundeck web console for command dispatching and job scheduling"
        url 'http://rundeck.org'
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
        properties{
            'version'(version)
        }
        scm {
            url 'https://github.com/dtolabs/rundeck'
            connection 'scm:git:git@github.com/dtolabs/rundeck.git'
            developerConnection 'scm:git:git@github.com:dtolabs/rundeck.git'
        }
        developers {
          developer {
            id('gschueler')
            name('Greg Schueler')
            email('greg@dtosolutions.com')
          }
        }
        parent {
            groupId('org.sonatype.oss')
            artifactId('oss-parent')
            version('7')
        }
    }
}
// prompt for PGP key passphrase if not set
gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign } && project.hasProperty("signing.keyId") && !project.hasProperty("signing.password") && !isDevBuild) {
        // Use Java 6's console to read from the console (no good for a CI environment)
        Console console = System.console()
        console.printf "\n\nWe have to sign some things in this build.\n\nPlease enter your signing details.\n\n"

        //def id = console.readLine("PGP Key Id: ")
        //def file = console.readLine("PGP Secret Key Ring File (absolute path): ")
        def password = console.readPassword("PGP Private Key Password: ")

        //allprojects { ext."signing.keyId" = id }
        //allprojects { ext."signing.secretKeyRingFile" = file }
        allprojects { ext."signing.password" = password }

        console.printf "\nThanks.\n\n"
    }
}

uploadArchives {
    if(isDevBuild){
        repositories{
            repositories.mavenDeployer {
                configuration = configurations.archives
                pom=deploypom
            }
        }
    }else{
        repositories.mavenDeployer {
            if(isReleaseBuild){
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            }
 
            configuration = configurations.archives
            if(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')){
                repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
                snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
            }
            pom=deploypom
        }
    }
}
