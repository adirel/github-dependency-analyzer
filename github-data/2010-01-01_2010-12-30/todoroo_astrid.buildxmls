<?xml version="1.0" encoding="UTF-8"?>
<project name="api" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <loadproperties srcFile="local.properties" />

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project'"
            unless="sdk.dir"
    />


<!-- extension targets. Uncomment the ones where you want to do custom work
     in between standard targets -->
<!--
    <target name="-pre-build">
    </target>
    <target name="-pre-compile">
    </target>

    /* This is typically used for code obfuscation.
       Compiled code location: ${out.classes.absolute.dir}
       If this is not done in place, override ${out.dex.input.absolute.dir} */
    <target name="-post-compile">
    </target>
-->

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: custom -->

    <target name="javadoc">
        <javadoc access="public" author="true" classpath="." destdir="doc" 
                 doctitle="Astrid API Project" nodeprecated="false" 
                 nodeprecatedlist="false" noindex="false" nonavbar="false" 
                 notree="false" source="1.6" splitindex="true" 
                 use="true" version="true">
          <sourcefiles>
            <fileset dir="." includes="src/**/*" />
          </sourcefiles>
          <classpath>
            <fileset dir="${sdk.dir}/platforms/${target}" includes="android.jar" />
          </classpath>
        </javadoc>
    </target>

    <import file="${sdk.dir}/tools/ant/build.xml" />

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="aac-enc">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <loadproperties srcFile="local.properties" />

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through an env var"
            unless="sdk.dir"
    />


<!-- extension targets. Uncomment the ones where you want to do custom work
     in between standard targets -->
<!--
    <target name="-pre-build">
    </target>
    <target name="-pre-compile">
    </target>

    /* This is typically used for code obfuscation.
       Compiled code location: ${out.classes.absolute.dir}
       If this is not done in place, override ${out.dex.input.absolute.dir} */
    <target name="-post-compile">
    </target>
-->

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->
    <import file="${sdk.dir}/tools/ant/build.xml" />

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!-- 
** Copyright (c) 2012 Todoroo Inc
**
** See the file "LICENSE" for the full license governing this code. 
-->
<project name="api" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <loadproperties srcFile="local.properties" />

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project'"
            unless="sdk.dir"
    />


<!-- extension targets. Uncomment the ones where you want to do custom work
     in between standard targets -->
<!--
    <target name="-pre-build">
    </target>
    <target name="-pre-compile">
    </target>

    /* This is typically used for code obfuscation.
       Compiled code location: ${out.classes.absolute.dir}
       If this is not done in place, override ${out.dex.input.absolute.dir} */
    <target name="-post-compile">
    </target>
-->

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: custom -->

    <target name="javadoc">
        <javadoc access="public" author="true" classpath="." destdir="doc" 
                 doctitle="Astrid API Project" nodeprecated="false" 
                 nodeprecatedlist="false" noindex="false" nonavbar="false" 
                 notree="false" source="1.6" splitindex="true" 
                 use="true" version="true">
          <sourcefiles>
            <fileset dir="." includes="src/**/*" />
          </sourcefiles>
          <classpath>
            <fileset dir="${sdk.dir}/platforms/${target}" includes="android.jar" />
          </classpath>
        </javadoc>
    </target>
	
	<target name="setup-lite">
		<replaceregexp file="${source.dir}/com/todoroo/astrid/api/AstridApiConstants.java"
		               match="API_PACKAGE = .*"
		               replace="API_PACKAGE = &quot;com.todoroo.astridlite&quot;;"
		               />
		<replaceregexp file="${source.dir}/com/todoroo/astrid/api/AstridApiConstants.java"
		               match="ASTRID_PACKAGE = .*"
		               replace="ASTRID_PACKAGE = &quot;com.todoroo.astridlite&quot;;"
		               />
	</target>
	<target name="teardown-lite">
		<replaceregexp file="${source.dir}/com/todoroo/astrid/api/AstridApiConstants.java"
		               match="API_PACKAGE = .*"
		               replace="API_PACKAGE = &quot;com.todoroo.astrid&quot;;"
		               />
		<replaceregexp file="${source.dir}/com/todoroo/astrid/api/AstridApiConstants.java"
		               match="ASTRID_PACKAGE = .*"
		               replace="ASTRID_PACKAGE = &quot;com.timsu.astrid&quot;;"
		               />
	</target>

    <import file="${sdk.dir}/tools/ant/build.xml" />

</project>
<?xml version="1.0" encoding="UTF-8"?>
<!--
** Copyright (c) 2012 Todoroo Inc
**
** See the file "LICENSE" for the full license governing this code.
-->
<project name="astrid" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <loadproperties srcFile="local.properties" />

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project'"
            unless="sdk.dir"
    />

    <taskdef resource="net/sf/antcontrib/antlib.xml">
      <classpath>
        <pathelement location="antlib/ant-contrib-1.0b3.jar"/>
      </classpath>
    </taskdef>

<!-- extension targets. Uncomment the ones where you want to do custom work
     in between standard targets -->

    <target name="-set-mode-check" depends="">
        <fail if="build.is.mode.set"
              message="Cannot run two different modes at the same time. If you are running more than one debug/release/instrument type targets, call them from different Ant calls." />
    </target>

    <target name="-pre-build" depends="get-version, copy-sources, setup-lite, updatekeys, updatekeys-release, update-market-strategy">
      <mkdir dir="gen" />
      <property name="proguard.jar" location="antlib/proguard.jar" />
      <taskdef name="proguard" classname="proguard.ant.ProGuardTask" classpath="${proguard.jar}" />
    </target>

    <target name="-post-astrid-build" depends="teardown-lite, teardown" />

    <target name="copy-sources">
      <delete dir="${source.dir}" />
      <mkdir dir="${source.dir}" />
      <for list="${astrid.sources}" param="dir">
        <sequential>
          <copy todir="${source.dir}">
            <fileset dir="@{dir}" />
          </copy>
        </sequential>
      </for>
    </target>

    <target name="get-version">
      <loadfile property="manifest" srcFile="AndroidManifest.xml" />
      <propertyregex property="manifest.version.code"
                     input="${manifest}"
                     regexp="android:versionCode=&quot;(.*)&quot;"
                     select="\1" />
      <propertyregex property="manifest.version.name"
                     input="${manifest}"
                     regexp="android:versionName=&quot;([^&quot; ]*)"
                     select="\1" />
      <echo message="Astrid: version ${manifest.version.code}, named ${manifest.version.name}" />
    </target>

    <target name="warnings">
      <echo>====== context classes without setContext =====</echo>
      <exec executable="sh">
        <arg value="-c" />
        <arg value="cd ${source.dir}; grep -L '\(setContext\|DependencyInjectionService\)' `grep -l -R '^\(public\).*class .* \(Activity\|Service\|BroadcastReceiver\)' .` | grep -v '.*\(CriteriaExposer\|DetailExposer\|Plugin\).java$' | grep -v rmilk" />
      </exec>
      <echo />
      <echo>====== entry points without initializing Astrid DI =====</echo>
      <exec executable="sh">
        <arg value="-c" />
        <arg value="cd ${source.dir}; grep -L '\(AstridDependencyInjector\)' $(grep -l '@Autowired' `grep -l -R '^\(public\).*class .* \(Activity\|Service\|BroadcastReceiver\)' .`) | grep -v rmilk" />
      </exec>
    </target>

    <!-- update api keys -->
    <target name="updatekeys" description="update api key values">
      <property file="${apikey.keyfile}" />
      <replaceregexp file="${source.dir}/com/todoroo/astrid/actfm/sync/ActFmInvoker.java"
                     match="URL = .*"
                     replace="URL = &quot;${apikey.actfm.url}&quot;;" />
      <replaceregexp file="${source.dir}/com/todoroo/astrid/actfm/sync/ActFmInvoker.java"
                     match="APP_ID = .*"
                     replace="APP_ID = &quot;${apikey.actfm.id}&quot;;" />
      <replaceregexp file="${source.dir}/com/todoroo/astrid/actfm/sync/ActFmInvoker.java"
                     match="APP_SECRET = .*"
                     replace="APP_SECRET = &quot;${apikey.actfm.secret}&quot;;" />

      <replaceregexp file="${source.dir}/com/todoroo/astrid/gtasks/api/GtasksInvoker.java"
                     match="API_KEY = .*"
                     replace="API_KEY = &quot;${apikey.gtasks}&quot;;" />
      <replaceregexp file="${source.dir}/com/todoroo/astrid/utility/Constants.java"
                     match="AWS_SECRET_KEY_ID = .*"
                     replace="AWS_SECRET_KEY_ID = &quot;${apikey.amazon.secret}&quot;;" />

      <replaceregexp file="${source.dir}/com/todoroo/astrid/service/abtesting/ABTestInvoker.java"
                     match="API_KEY = .*"
                     replace="API_KEY = &quot;${apikey.analytics.id}&quot;;" />
      <replaceregexp file="${source.dir}/com/todoroo/astrid/service/abtesting/ABTestInvoker.java"
    	             match="API_SECRET = .*"
    	             replace="API_SECRET = &quot;${apikey.analytics.secret}&quot;;" />

      <antcall target="updatekeys-lite" />

      <replaceregexp file="${source.dir}/com/todoroo/astrid/billing/BillingConstants.java"
                     match="PUB_KEY_REPLACE_CHAR = .*"
    	             replace="PUB_KEY_REPLACE_CHAR = &#39;${apikey.googleplay.replacechar}&#39;;" />

      <replaceregexp file="${source.dir}/com/todoroo/astrid/billing/BillingConstants.java"
    	             match="PUB_KEY_OBFUSCATED = .*"
    	             replace="PUB_KEY_OBFUSCATED = &quot;${apikey.googleplay.pubkey}&quot;;" />
    </target>

    <target name="updatekeys-lite" if="lite.enabled">
      <replaceregexp file="${source.dir}/com/todoroo/astrid/service/abtesting/ABTestInvoker.java"
                     match="API_KEY = .*"
                     replace="API_KEY = &quot;${apikey.analytics.lite.id}&quot;;" />
      <replaceregexp file="${source.dir}/com/todoroo/astrid/service/abtesting/ABTestInvoker.java"
                     match="API_SECRET = .*"
                     replace="API_SECRET = &quot;${apikey.analytics.lite.secret}&quot;;" />
    </target>

    <target name="updatekeys-pre" if="pre.astrid" description="use pre.astrid-dev.com">
      <property file="${apikey.keyfile}" />
      <replaceregexp file="${source.dir}/com/todoroo/astrid/actfm/sync/ActFmInvoker.java"
                     match="URL = .*"
                     replace="URL = &quot;//pre.astrid-dev.com/api/&quot;;" />
    </target>

    <!-- update api keys that require release signing -->
    <target name="updatekeys-release" if="build.is.mode.release" depends="updatekeys-pre"
            description="update release-only api key values">
      <property file="${apikey.keyfile}" />
      <replaceregexp file="res/values/keys.xml"
                     match="fb_app_id&quot;&gt;.*&lt;"
                     replace="fb_app_id&quot;&gt;${apikey.facebook.id}&lt;" />
    </target>


    <target name="-release-prompt-for-password" description="override to set signature">
      <property file="${signjar.passfile}" /> <echo message="${signjar.passfile}" />
      <property name="key.alias" value="${signjar.keyalias}" />
      <property name="key.store" value="${signjar.keystore}" />
      <property name="key.alias.password" value="${signjar.password}" />
      <property name="key.store.password" value="${signjar.password}" />
      <property name="key.alias" value="${signjar.keyalias}" />
      <property name="has.keystore" value="true" />
    </target>

    <target name="update-market-strategy" if="custom.market.strategy">
      <echo message="Changing market strategy to ${custom.market.strategy}" />
      <replace token="market://" value="disabled://"
               dir="${source.dir}" />
      <replaceregexp file="${source.dir}/com/todoroo/astrid/utility/Constants.java"
                     match="AndroidMarketStrategy"
                     replace="${custom.market.strategy}" />
    </target>

    <target name="obfuscate" depends="-set-debug-files, -set-debug-mode, nodeps, -build-setup,
                                      -set-release-mode, -release-obfuscation-check, -obfuscate" />

    <target name="dex" depends="obfuscate, -dex" />

    <!-- build custom release package with updated version name -->
    <target name="release-custom" depends="clean">
      <fail message="need to set custom.version.name">
        <condition>
          <not>
            <isset property="custom.version.name" />
          </not>
        </condition>
      </fail>
      <copy file="AndroidManifest.xml" tofile="AndroidManifest_old.xml" />
      <replaceregexp file="AndroidManifest.xml"
                     match="(android:versionName=&quot;[^&quot; ]*)[^&quot;]*"
                     replace="\1${custom.version.name}" />
      <antcall target="release" />

      <move file="AndroidManifest_old.xml" tofile="AndroidManifest.xml" />
    </target>

	<!-- build lite release package with updated version name -->
    <target name="release-lite" depends="clean, set-lite-property, release" />
    <target name="debug-lite" depends="clean, set-lite-property, debug" />

	<target name="set-lite-property">
	    <property name="lite.enabled" value="true" />
		<subant target="setup-lite">
			<fileset file="../api/build.xml"/>
		</subant>
	</target>

	<target name="setup-lite" if="lite.enabled">
      <copy file="AndroidManifest.xml" tofile="AndroidManifest_old.xml" />
      <replaceregexp file="${source.dir}/com/todoroo/astrid/utility/Constants.java"
                     match="ASTRID_LITE = .*"
                     replace="ASTRID_LITE = true;" />
      <replaceregexp file="${source.dir}/com/todoroo/astrid/utility/Constants.java"
                     match="LOCALYTICS_KEY = .*"
                     replace="LOCALYTICS_KEY = LOCALYTICS_KEY_LITE;" />
      <replaceregexp file="AndroidManifest.xml"
                     match="package=&quot;.*&quot;"
    	             replace="package=&quot;com.todoroo.astridlite&quot;" />
      <replaceregexp file="AndroidManifest.xml"
                     match="authorities=&quot;(.*)astrid(.*)&quot;"
                     replace="authorities=&quot;\1astridlite\2&quot;"
                     flags="g"/>
	  <replaceregexp file="AndroidManifest.xml"
	                 match="action android:name=&quot;com.todoroo.astrid"
                     replace="action android:name=&quot;com.todoroo.astridlite"
		             flags="g"
	                 />
	  <replaceregexp file="AndroidManifest.xml"
	                 match="category android:name=&quot;com.timsu.astrid&quot;"
                     replace="category android:name=&quot;com.todoroo.astridlite&quot;"
		             flags="g"
	                 />
	  <replaceregexp file="AndroidManifest.xml"
	                 match="com.timsu.astrid.C2DMReceiver"
                     replace="com.todoroo.astridlite.C2DMReceiver"
		             flags="g"
	                 />
	  <replaceregexp file="AndroidManifest.xml"
	                 match="com.timsu.astrid.permission"
                     replace="com.todoroo.astridlite.permission"
		             flags="g"
	                 />
	  <replaceregexp file="AndroidManifest.xml"
	                 match="com.todoroo.astrid.READ"
                     replace="com.todoroo.astridlite.READ"
		             flags="g"
	                 />
	  <replaceregexp file="AndroidManifest.xml"
	                 match="com.todoroo.astrid.WRITE"
                     replace="com.todoroo.astridlite.WRITE"
		             flags="g"
	                 />
	  <replaceregexp file="AndroidManifest.xml"
	                 match="&lt;action android:name=&quot;com.timsu.astrid"
                     replace="&lt;action android:name=&quot;com.todoroo.astridlite"
		             flags="g"
	                 />
      <replaceregexp file="AndroidManifest.xml"
                     match="(android:versionName=&quot;)4"
                     replace="\10"
                     />
      <replaceregexp file="AndroidManifest.xml"
                     match="application android:icon=&quot;(.*)&quot;"
                     replace="application android:icon=&quot;@drawable/icon_simple&quot;"
                     />
	  <replaceregexp file="${source.dir}/com/todoroo/astrid/backup/BackupConstants.java"
	                 match="ASTRID_DIR = .*"
                     replace="ASTRID_DIR = &quot;/astridlite&quot;;"
	                 />
      <move file="${source.dir}/com/timsu/astrid" tofile="${source.dir}/com/todoroo/astridlite" />

      <copy todir="res_old">
        <fileset dir="res"/>
      </copy>

      <replace dir="res" token="com.timsu.astrid" value="com.todoroo.astridlite"/>
      <replace dir="${source.dir}" token="com.timsu.astrid" value="com.todoroo.astridlite"/>

      <replaceregexp match="&gt;(.*\s)task(.*)"
                     replace="&gt;\1to-do\2"
                     flags="g">
        <fileset dir="res/values">
            <include name="strings-*.xml"/>
        </fileset>
      </replaceregexp>
      <replaceregexp match="&gt;(.*)Task(.*)"
                     replace="&gt;\1To-do\2"
                     flags="g">
        <fileset dir="res/values">
            <include name="strings-*.xml"/>
        </fileset>
      </replaceregexp>

      <replaceregexp file="res/values/strings-core.xml"
                     match="app_name&quot;&gt;.*&lt;"
                     replace="app_name&quot;&gt;Simple To-do&lt;"
                     />
      <replaceregexp file="res/values/strings-widget.xml"
                     match="(PPW_widget.*)Astrid(.*)"
                     replace="\1Simple To-do -\2"
                     flags="g"
                     />
    </target>

	<target name="teardown-lite" if="lite.enabled">
      <delete dir="res" />
      <move file="res_old" tofile="res"/>
	  <move file="AndroidManifest_old.xml" tofile="AndroidManifest.xml" />
	  <subant target="teardown-lite">
	      <fileset file="../api/build.xml"/>
	  </subant>
	</target>
	
	<target name="teardown">
		<replaceregexp file="res/values/keys.xml"
                       match="fb_app_id&quot;&gt;.*&lt;"
                       replace="fb_app_id&quot;&gt;183862944961271&lt;" />
	</target>

    <!-- build custom unsigned package with updated version name -->
    <target name="unsigned-custom" depends="clean">
      <fail message="need to set custom.version.name">
        <condition>
          <not>
            <isset property="custom.version.name" />
          </not>
        </condition>
      </fail>
      <copy file="AndroidManifest.xml" tofile="AndroidManifest_old.xml" />
      <replaceregexp file="AndroidManifest.xml"
                     match="(android:versionName=&quot;[^&quot; ]*)[^&quot;]*"
                     replace="\1${custom.version.name}" />
      <antcall target="release-unsigned" />

      <move file="AndroidManifest_old.xml" tofile="AndroidManifest.xml" />
    </target>

   <target name="crittercism-permissions"
            description="Apply extra crittercism permissions">
      <if>
        <condition>
          <resourcecontains resource="AndroidManifest.xml" substring="READ_LOGS"/>
        </condition>
        <then>
          <echo message="Nothing to do." />
        </then>
        <else>
          <replace file="AndroidManifest.xml" token="android.permission.VIBRATE">
            <replacevalue><![CDATA[android.permission.VIBRATE"/>
            <uses-permission android:name="android.permission.READ_LOGS"/>
            <uses-permission android:name="android.permission.GET_TASKS]]></replacevalue>
          </replace>
        </else>
      </if>
    </target>

    <target name="release-jenkins">
      <property environment="env" />
      <copy file="AndroidManifest.xml" tofile="AndroidManifest_old.xml" />
      <propertyregex property="env.git_hash"
                     input="${env.GIT_COMMIT}"
                     regexp="(.{7})"
                     select="\1"
                     casesensitive="false" />
      <replaceregexp file="AndroidManifest.xml"
                     match="(android:versionName=&quot;[^&quot; ]*)[^&quot;]*"
                     replace="\1-b${env.BUILD_NUMBER}-${env.git_hash}" />
      <antcall target="release" />

      <move file="AndroidManifest_old.xml" tofile="AndroidManifest.xml" />
    </target>

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: custom -->

    <target name="debug" depends="-set-debug-files, -do-debug, -post-astrid-build"
                description="Builds the application and signs it with a debug key.">
      <record-build-info />
      <delete file="${out.packaged.file}" />
    </target>

    <target name="release"
                depends="-set-release-mode, -release-obfuscation-check, -package, -release-prompt-for-password, -release-nosign, -post-astrid-build"
                if="has.keystore"
                description="Builds the application. The generated apk file must be signed before
                            it is published.">

      <property name="out.unaligned.file" location="${out.absolute.dir}/${ant.project.name}-release-unaligned.apk" />

      <!-- Signs the APK -->
      <echo>Signing final apk...</echo>
      <signjar
          jar="${out.packaged.file}"
          signedjar="${out.unaligned.file}"
          keystore="${key.store}"
          storepass="${key.store.password}"
          alias="${key.alias}"
          keypass="${key.alias.password}"
          verbose="${verbose}" />

      <!-- Zip aligns the APK -->
      <mkdir dir="../release" />
      <property name="out.final.file" location="${out.absolute.dir}/${ant.project.name}-release.apk" />

      <if>
        <condition>
          <isset property="lite.enabled"/>
        </condition>
        <then>
          <property name="out.release.file"
                    location="../release/${ant.project.name}-${manifest.version.code}-${manifest.version.name}-release-lite.apk" />
        </then>
        <else>
          <property name="out.release.file"
                    location="../release/${ant.project.name}-${manifest.version.code}-${manifest.version.name}-release.apk" />
        </else>
      </if>

      <zipalign-helper in.package="${out.unaligned.file}"
                       out.package="${out.final.file}" />
      <copy file="${out.final.file}" tofile="${out.release.file}" />
      <echo>Final Release Package: ${out.release.file}</echo>
      <record-build-info />
    </target>

    <target name="release-unsigned"
                depends="-set-release-mode, -release-obfuscation-check, -package, -release-prompt-for-password, -release-nosign"
                if="has.keystore"
                description="Builds the application. The generated apk file must be signed before
                            it is published.">

      <property name="out.unaligned.file" location="${out.absolute.dir}/${ant.project.name}-release-unsigned.apk" />

      <!-- Zip aligns the APK -->
      <mkdir dir="../release" />
      <property name="out.final.file" location="${out.absolute.dir}/${ant.project.name}-aligned-unsigned.apk" />
      <property name="out.release.file"
                location="../release/${ant.project.name}-${manifest.version.code}-${manifest.version.name}-unsigned.apk" />
      <zipalign-helper in.package="${out.unaligned.file}"
                       out.package="${out.final.file}" />
      <copy file="${out.final.file}" tofile="${out.release.file}" />
      <echo>Final Release Package: ${out.release.file}</echo>
      <record-build-info />
    </target>

    <import file="${sdk.dir}/tools/ant/build.xml" />

</project>
<project name="astrid-project">

  <taskdef resource="net/sf/antcontrib/antlib.xml">
    <classpath>
      <pathelement location="astrid/antlib/ant-contrib-1.0b3.jar"/>
    </classpath>
  </taskdef>

  <target name="clean">
    <delete dir="release" />
    <subant target="clean">
      <fileset file="astrid/build.xml" />
    </subant>
  </target>

  <target name="get-version">
    <loadfile property="manifest" srcFile="astrid/AndroidManifest.xml" />
    <propertyregex property="manifest.version.code"
                   input="${manifest}"
                   regexp="android:versionCode=&quot;(.*)&quot;"
                   select="\1" />
    <propertyregex property="manifest.version.name"
                   input="${manifest}"
                   regexp="android:versionName=&quot;([^&quot; ]*)"
                   select="\1" />
    <echo message="Astrid Project: version ${manifest.version.code}, named ${manifest.version.name}" />
  </target>

  <target name="release" depends="clean,get-version">
    <subant target="release">
      <fileset file="astrid/build.xml" />
    </subant>
  </target>

  <target name="release-all" depends="clean,get-version,release,release-lite,release-amazon,release-amazon-signed,release-nook,release-nomarket">    
    <!-- custom builds -->
    <for list="-other" param="name">
      <sequential>
        <subant target="release-custom">
          <fileset file="astrid/build.xml" />
          <property name="custom.version.name" value="@{name}" />
        </subant>
      </sequential>
    </for>
  </target>

  <target name="release-amazon" depends="get-version">
    <subant>
      <fileset file="astrid/build.xml" />
      <property name="custom.version.name" value=".1000" />
      <property name="custom.market.strategy" value="AmazonMarketStrategy" />
      <target name="unsigned-custom" />
    </subant>
  </target>

  <target name="release-amazon-signed" depends="get-version">
    <subant target="release-custom">
      <fileset file="astrid/build.xml" />
      <property name="custom.version.name" value=".1000-signed" />
      <property name="custom.market.strategy" value="AmazonMarketStrategy" />
    </subant>
  </target>

  <target name="release-nomarket" depends="get-version">
    <subant target="release-custom">
      <fileset file="astrid/build.xml" />
      <property name="custom.version.name" value="-nomarket" />
      <property name="custom.market.strategy" value="NoMarketStrategy" />
    </subant>
  </target>
    
  <target name="release-nook" depends="get-version">
    <subant target="release-custom">
      <fileset file="astrid/build.xml" />
      <property name="custom.version.name" value="-nook" />
      <property name="custom.market.strategy" value="NookMarketStrategy" />
    </subant>  
  </target>
    
  <target name="release-lite" depends="get-version">
    <subant target="release-lite">
      <fileset file="astrid/build.xml" />
    </subant>
  </target>

  <target name="debug">
    <subant>
      <fileset file="astrid/build.xml" />
      <target name="debug" />
    </subant>
  </target>

  <target name="install">
    <subant>
      <fileset file="astrid/build.xml" />
      <target name="install" />
    </subant>
  </target>
</project>

<?xml version="1.0" encoding="UTF-8"?>
<project name="FacebookSdk" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property file="local.properties" />

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through an env var"
            unless="sdk.dir"
    />

    <!--
        Import per project custom build rules if present at the root of the project.
        This is the place to put custom intermediary targets such as:
            -pre-build
            -pre-compile
            -post-compile (This is typically used for code obfuscation.
                           Compiled code location: ${out.classes.absolute.dir}
                           If this is not done in place, override ${out.dex.input.absolute.dir})
            -post-package
            -post-build
            -pre-clean
    -->
    <import file="custom_rules.xml" optional="true" />

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->
    <import file="${sdk.dir}/tools/ant/build.xml" />

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="facebook" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property file="local.properties" />

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through an env var"
            unless="sdk.dir"
    />

    <!--
        Import per project custom build rules if present at the root of the project.
        This is the place to put custom intermediary targets such as:
            -pre-build
            -pre-compile
            -post-compile (This is typically used for code obfuscation.
                           Compiled code location: ${out.classes.absolute.dir}
                           If this is not done in place, override ${out.dex.input.absolute.dir})
            -post-package
            -post-build
            -pre-clean
    -->
    <import file="custom_rules.xml" optional="true" />

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->
    <import file="${sdk.dir}/tools/ant/build.xml" />

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="FacebookSdkTests" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property file="local.properties" />

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through an env var"
            unless="sdk.dir"
    />

    <!--
        Import per project custom build rules if present at the root of the project.
        This is the place to put custom intermediary targets such as:
            -pre-build
            -pre-compile
            -post-compile (This is typically used for code obfuscation.
                           Compiled code location: ${out.classes.absolute.dir}
                           If this is not done in place, override ${out.dex.input.absolute.dir})
            -post-package
            -post-build
            -pre-clean
    -->
    <import file="custom_rules.xml" optional="true" />

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->
    <import file="${sdk.dir}/tools/ant/build.xml" />

    <!-- SDK Tools r15 workaround -->
    <property name="tested.manifest.package" value="com.facebook.sdk.tests" />

    <!-- This seems to have no effect.  The value remains android.test.AndroidTestRunner -->
    <!-- <property name="test.runner" value="android.test.InstrumentationTestRunner" /> -->

    <target name="run-tests">
      <echo>Running tests...</echo>
      <exec executable="${adb}" failonerror="true">
        <arg line="${adb.device.arg}" />
        <arg value="shell" />
        <arg value="am" />
        <arg value="instrument" />
        <arg value="-w" />
        <!-- was <arg value="${tested.manifest.package}/${test.runner}" /> -->
        <arg value="${tested.manifest.package}/android.test.InstrumentationTestRunner" />
      </exec>
    </target>
</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="BooleanOGSample" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property file="local.properties"/>

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties"/>

    <!-- if sdk.dir was not set from one of the property file, then
         get it from the ANDROID_HOME env var.
         This must be done before we load project.properties since
         the proguard config can use sdk.dir -->
    <property environment="env"/>
    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
        <isset property="env.ANDROID_HOME"/>
    </condition>

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties"/>

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
            unless="sdk.dir"
            />

    <!--
        Import per project custom build rules if present at the root of the project.
        This is the place to put custom intermediary targets such as:
            -pre-build
            -pre-compile
            -post-compile (This is typically used for code obfuscation.
                           Compiled code location: ${out.classes.absolute.dir}
                           If this is not done in place, override ${out.dex.input.absolute.dir})
            -post-package
            -post-build
            -pre-clean
    -->
    <import file="custom_rules.xml" optional="true"/>

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->
    <import file="${sdk.dir}/tools/ant/build.xml"/>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="FriendPickerSample" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property file="local.properties"/>

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties"/>

    <!-- if sdk.dir was not set from one of the property file, then
         get it from the ANDROID_HOME env var.
         This must be done before we load project.properties since
         the proguard config can use sdk.dir -->
    <property environment="env"/>
    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
        <isset property="env.ANDROID_HOME"/>
    </condition>

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties"/>

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
            unless="sdk.dir"
            />

    <!--
        Import per project custom build rules if present at the root of the project.
        This is the place to put custom intermediary targets such as:
            -pre-build
            -pre-compile
            -post-compile (This is typically used for code obfuscation.
                           Compiled code location: ${out.classes.absolute.dir}
                           If this is not done in place, override ${out.dex.input.absolute.dir})
            -post-package
            -post-build
            -pre-clean
    -->
    <import file="custom_rules.xml" optional="true"/>

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->
    <import file="${sdk.dir}/tools/ant/build.xml"/>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="GraphApiSample" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property file="local.properties" />

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />

    <!-- if sdk.dir was not set from one of the property file, then
         get it from the ANDROID_HOME env var.
         This must be done before we load project.properties since
         the proguard config can use sdk.dir -->
    <property environment="env" />
    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
        <isset property="env.ANDROID_HOME" />
    </condition>

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
            unless="sdk.dir"
    />

    <!--
        Import per project custom build rules if present at the root of the project.
        This is the place to put custom intermediary targets such as:
            -pre-build
            -pre-compile
            -post-compile (This is typically used for code obfuscation.
                           Compiled code location: ${out.classes.absolute.dir}
                           If this is not done in place, override ${out.dex.input.absolute.dir})
            -post-package
            -post-build
            -pre-clean
    -->
    <import file="custom_rules.xml" optional="true" />

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->
    <import file="${sdk.dir}/tools/ant/build.xml" />

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="Hackbook" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property file="local.properties" />

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through an env var"
            unless="sdk.dir"
    />

    <!--
        Import per project custom build rules if present at the root of the project.
        This is the place to put custom intermediary targets such as:
            -pre-build
            -pre-compile
            -post-compile (This is typically used for code obfuscation.
                           Compiled code location: ${out.classes.absolute.dir}
                           If this is not done in place, override ${out.dex.input.absolute.dir})
            -post-package
            -post-build
            -pre-clean
    -->
    <import file="custom_rules.xml" optional="true" />

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->
    <import file="${sdk.dir}/tools/ant/build.xml" />

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="HelloFacebookSample" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property file="local.properties"/>

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties"/>

    <!-- if sdk.dir was not set from one of the property file, then
         get it from the ANDROID_HOME env var.
         This must be done before we load project.properties since
         the proguard config can use sdk.dir -->
    <property environment="env"/>
    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
        <isset property="env.ANDROID_HOME"/>
    </condition>

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties"/>

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
            unless="sdk.dir"
            />

    <!--
        Import per project custom build rules if present at the root of the project.
        This is the place to put custom intermediary targets such as:
            -pre-build
            -pre-compile
            -post-compile (This is typically used for code obfuscation.
                           Compiled code location: ${out.classes.absolute.dir}
                           If this is not done in place, override ${out.dex.input.absolute.dir})
            -post-package
            -post-build
            -pre-clean
    -->
    <import file="custom_rules.xml" optional="true"/>

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->
    <import file="${sdk.dir}/tools/ant/build.xml"/>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="PlacePickerSample" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property file="local.properties"/>

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties"/>

    <!-- if sdk.dir was not set from one of the property file, then
         get it from the ANDROID_HOME env var.
         This must be done before we load project.properties since
         the proguard config can use sdk.dir -->
    <property environment="env"/>
    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
        <isset property="env.ANDROID_HOME"/>
    </condition>

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties"/>

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
            unless="sdk.dir"
            />

    <!--
        Import per project custom build rules if present at the root of the project.
        This is the place to put custom intermediary targets such as:
            -pre-build
            -pre-compile
            -post-compile (This is typically used for code obfuscation.
                           Compiled code location: ${out.classes.absolute.dir}
                           If this is not done in place, override ${out.dex.input.absolute.dir})
            -post-package
            -post-build
            -pre-clean
    -->
    <import file="custom_rules.xml" optional="true"/>

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->
    <import file="${sdk.dir}/tools/ant/build.xml"/>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="ProfilePictureSample" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property file="local.properties"/>

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties"/>

    <!-- if sdk.dir was not set from one of the property file, then
         get it from the ANDROID_HOME env var.
         This must be done before we load project.properties since
         the proguard config can use sdk.dir -->
    <property environment="env"/>
    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
        <isset property="env.ANDROID_HOME"/>
    </condition>

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties"/>

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
            unless="sdk.dir"
            />

    <!--
        Import per project custom build rules if present at the root of the project.
        This is the place to put custom intermediary targets such as:
            -pre-build
            -pre-compile
            -post-compile (This is typically used for code obfuscation.
                           Compiled code location: ${out.classes.absolute.dir}
                           If this is not done in place, override ${out.dex.input.absolute.dir})
            -post-package
            -post-build
            -pre-clean
    -->
    <import file="custom_rules.xml" optional="true"/>

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->
    <import file="${sdk.dir}/tools/ant/build.xml"/>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="Scrumptious" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property file="local.properties"/>

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties"/>

    <!-- if sdk.dir was not set from one of the property file, then
         get it from the ANDROID_HOME env var.
         This must be done before we load project.properties since
         the proguard config can use sdk.dir -->
    <property environment="env"/>
    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
        <isset property="env.ANDROID_HOME"/>
    </condition>

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties"/>

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
            unless="sdk.dir"
            />

    <!--
        Import per project custom build rules if present at the root of the project.
        This is the place to put custom intermediary targets such as:
            -pre-build
            -pre-compile
            -post-compile (This is typically used for code obfuscation.
                           Compiled code location: ${out.classes.absolute.dir}
                           If this is not done in place, override ${out.dex.input.absolute.dir})
            -post-package
            -post-build
            -pre-clean
    -->
    <import file="custom_rules.xml" optional="true"/>

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->
    <import file="${sdk.dir}/tools/ant/build.xml"/>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="SessionLoginSample" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property file="local.properties" />

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />

    <!-- if sdk.dir was not set from one of the property file, then
         get it from the ANDROID_HOME env var.
         This must be done before we load project.properties since
         the proguard config can use sdk.dir -->
    <property environment="env" />
    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
        <isset property="env.ANDROID_HOME" />
    </condition>

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
            unless="sdk.dir"
    />

    <!--
        Import per project custom build rules if present at the root of the project.
        This is the place to put custom intermediary targets such as:
            -pre-build
            -pre-compile
            -post-compile (This is typically used for code obfuscation.
                           Compiled code location: ${out.classes.absolute.dir}
                           If this is not done in place, override ${out.dex.input.absolute.dir})
            -post-package
            -post-build
            -pre-clean
    -->
    <import file="custom_rules.xml" optional="true" />

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->
    <import file="${sdk.dir}/tools/ant/build.xml" />

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="SwitchUserSample" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property file="local.properties"/>

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties"/>

    <!-- if sdk.dir was not set from one of the property file, then
         get it from the ANDROID_HOME env var.
         This must be done before we load project.properties since
         the proguard config can use sdk.dir -->
    <property environment="env"/>
    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
        <isset property="env.ANDROID_HOME"/>
    </condition>

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties"/>

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
            unless="sdk.dir"
            />

    <!--
        Import per project custom build rules if present at the root of the project.
        This is the place to put custom intermediary targets such as:
            -pre-build
            -pre-compile
            -post-compile (This is typically used for code obfuscation.
                           Compiled code location: ${out.classes.absolute.dir}
                           If this is not done in place, override ${out.dex.input.absolute.dir})
            -post-package
            -post-build
            -pre-clean
    -->
    <import file="custom_rules.xml" optional="true"/>

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->
    <import file="${sdk.dir}/tools/ant/build.xml"/>

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="GreenDroid" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <loadproperties srcFile="local.properties" />

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project'"
            unless="sdk.dir"
    />


<!-- extension targets. Uncomment the ones where you want to do custom work
     in between standard targets -->
<!--
    <target name="-pre-build">
    </target>
    <target name="-pre-compile">
    </target>

    /* This is typically used for code obfuscation.
       Compiled code location: ${out.classes.absolute.dir}
       If this is not done in place, override ${out.dex.input.absolute.dir} */
    <target name="-post-compile">
    </target>
-->

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->
    <import file="${sdk.dir}/tools/ant/build.xml" />

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="astridTest" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property file="local.properties" />

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through an env var"
            unless="sdk.dir"
    />

    <target name="-pre-build">
      <!-- copy library project jars -->
      <unzip src="../api/bin/classes.jar" dest="${tested.project.absolute.dir}/bin/classes" />
      <!-- copy antbuild to bin -->
      <copy todir="${tested.project.absolute.dir}/bin">
        <fileset dir="${tested.project.absolute.dir}/antbuild" />
      </copy>
    </target>

    <!-- override coverage target with custom reporting and rules -->    
    <target name="coverage"
                description="Runs the tests against the instrumented code and generates emma code coverage report">

      <property name="tested.project.absolute.dir" location="${tested.project.dir}" />
      <property name="test.runner" value="com.zutubi.android.junitreport.JUnitReportTestRunner" />

      <!-- Application package of the tested project extracted from its manifest file -->
      <xpath input="${tested.project.absolute.dir}/AndroidManifest.xml"
             expression="/manifest/@package" output="tested.manifest.package" />
      <xpath input="AndroidManifest.xml"
             expression="/manifest/@package" output="manifest.package" />

      <property name="emma.dump.file"
                value="/data/data/${tested.manifest.package}/coverage.ec" />

      <run-tests-helper emma.enabled="true">
        <extra-instrument-args>
          <arg value="-e" />
          <arg value="coverageFile" />
          <arg value="${emma.dump.file}" />
          <arg value="-e" />
          <arg value="delay_msec" />
          <arg value="15" />
        </extra-instrument-args>
      </run-tests-helper>

      <property name="tested.project.absolute.dir" location="${tested.project.dir}" />
      <xpath input="${tested.project.absolute.dir}/AndroidManifest.xml"
             expression="/manifest/@package" output="tested.manifest.package" />


      <echo>Downloading coverage file into project directory...</echo>
      <property name="emma.dump.file"
                value="/data/data/${tested.manifest.package}/coverage.ec" />
      <exec executable="${adb}" failonerror="true">
        <arg line="${adb.device.arg}" />
        <arg value="pull" />
        <arg value="${emma.dump.file}" />
        <arg value="coverage.ec" />
      </exec>

      <antcall target="emma-parse" />      
      <antcall target="pull-junit" />      
    </target>

    <target name="emma-parse" depends="-test-project-check">
      <echo>Extracting coverage report...</echo>
      <copy todir="${tested.project.absolute.dir}/src-combined">
        <fileset dir="../api/src" includes="**/*.java" />
      </copy>      
      <mkdir dir="${reports.dir}" />
      <emma>
        <report sourcepath="${tested.project.absolute.dir}/src-combined"
                verbosity="${verbosity}">
          <infileset dir=".">
            <include name="coverage.ec" />
            <include name="coverage.em" />
          </infileset>
          <xml outfile="${reports.dir}/coverage.xml" />
          <html outfile="coverage.html" />
        </report>
      </emma>
      <echo>Cleaning up temporary files...</echo>
      <delete file="coverage.ec" />
      <delete file="coverage.em" />
      <echo>Saving the report file in ${basedir}/coverage/coverage.html</echo>
    </target>

    <target name="pull-junit">
      <echo>Extracting junit report...</echo>
      <exec executable="${adb}" failonerror="true">
        <arg line="${adb.device.arg}"/>
        <arg value="pull" />
        <arg value="/data/data/${tested.manifest.package}/files/junit-report.xml" />
        <arg value="${reports.dir}/junit-report.xml" />
      </exec>
    </target>

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: custom -->
    <import file="${sdk.dir}/tools/ant/build.xml" />

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="astridTest" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property file="local.properties" />

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through an env var"
            unless="sdk.dir"
    />

    <target name="-pre-build">
      <!-- copy library project jars -->
      <unzip src="../api/bin/classes.jar" dest="${tested.project.absolute.dir}/bin/classes" />
      <!-- copy antbuild to bin -->
      <copy todir="${tested.project.absolute.dir}/bin">
        <fileset dir="${tested.project.absolute.dir}/antbuild" />
      </copy>
    </target>

    <!-- override coverage target with custom reporting and rules -->
    <target name="coverage"
                description="Runs the tests against the instrumented code and generates emma code coverage report">

      <property name="tested.project.absolute.dir" location="${tested.project.dir}" />
      <property name="test.runner" value="com.zutubi.android.junitreport.JUnitReportTestRunner" />

      <!-- Application package of the tested project extracted from its manifest file -->
      <xpath input="${tested.project.absolute.dir}/AndroidManifest.xml"
             expression="/manifest/@package" output="tested.manifest.package" />
      <xpath input="AndroidManifest.xml"
             expression="/manifest/@package" output="manifest.package" />

      <property name="emma.dump.file"
                value="/sdcard/coverage.ec" />
      <property name="junit.dump.dir"
                value="/sdcard" />

      <run-tests-helper emma.enabled="true">
        <extra-instrument-args>
          <arg value="-e" />
          <arg value="reportDir" />
          <arg value="${junit.dump.dir}" />
          <arg value="-e" />
          <arg value="coverageFile" />
          <arg value="${emma.dump.file}" />
          <arg value="-e" />
          <arg value="delay_msec" />
          <arg value="15" />
        </extra-instrument-args>
      </run-tests-helper>

      <property name="tested.project.absolute.dir" location="${tested.project.dir}" />
      <xpath input="${tested.project.absolute.dir}/AndroidManifest.xml"
             expression="/manifest/@package" output="tested.manifest.package" />

      <echo>Downloading coverage file into project directory...</echo>
      <exec executable="${adb}" failonerror="true">
        <arg line="${adb.device.arg}" />
        <arg value="pull" />
        <arg value="${emma.dump.file}" />
        <arg value="coverage.ec" />
      </exec>

      <antcall target="emma-parse" />
      <antcall target="pull-junit" />
    </target>

    <target name="emma-parse" depends="-test-project-check">
      <echo>Extracting coverage report...</echo>
      <copy todir="${tested.project.absolute.dir}/src-combined">
        <fileset dir="../api/src" includes="**/*.java" />
      </copy>
      <copy todir=".">
        <fileset dir="${tested.project.absolute.dir}/bin" includes="coverage.em" />
      </copy>
      <mkdir dir="${reports.dir}" />
      <emma>
        <report sourcepath="${tested.project.absolute.dir}/src-combined"
                verbosity="${verbosity}">
          <infileset dir=".">
            <include name="coverage.ec" />
            <include name="coverage.em" />
          </infileset>
          <xml outfile="${reports.dir}/coverage.xml" />
          <html outfile="coverage.html" />
        </report>
      </emma>
      <echo>Cleaning up temporary files...</echo>
      <echo>Saving the report file in ${basedir}/coverage/coverage.html</echo>
    </target>

    <target name="pull-junit">
      <echo>Extracting junit report...</echo>
      <exec executable="${adb}" failonerror="true">
        <arg line="${adb.device.arg}"/>
        <arg value="pull" />
        <arg value="${junit.dump.dir}/junit-report.xml" />
        <arg value="${reports.dir}/junit-report.xml" />
      </exec>
    </target>

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: custom -->
    <import file="${sdk.dir}/tools/ant/build.xml" />

</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="library" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property file="local.properties" />

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through an env var"
            unless="sdk.dir"
    />


<!-- extension targets. Uncomment the ones where you want to do custom work
     in between standard targets -->
<!--
    <target name="-pre-build">
    </target>
    <target name="-pre-compile">
    </target>

    /* This is typically used for code obfuscation.
       Compiled code location: ${out.classes.absolute.dir}
       If this is not done in place, override ${out.dex.input.absolute.dir} */
    <target name="-post-compile">
    </target>
-->

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->
    <import file="${sdk.dir}/tools/ant/build.xml" />

</project>
