import org.apache.tools.ant.filters.ReplaceTokens

defaultTasks "build"

allprojects {
    apply plugin: 'idea'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'project-reports'
    apply plugin: 'eclipse'
  
    version = '1.1.1'
  
    springVersion = '3.0.5.RELEASE'
    hibernateVersion = '3.5.6-Final'
    wicketVersion = '1.4.19'
    jettyVersion = '6.1.25'

    sourceCompatibility = 1.6
    targetCompatibility = 1.6
    group = 'org.devproof.portal'
    tomcatUrl = 'http://www.eu.apache.org/dist/tomcat/tomcat-7/v7.0.11/bin/apache-tomcat-7.0.11.tar.gz'
    configurations {
        compile.transitive = true
        testCompile.transitive = true
        tomcatBundleDeps
    }

    sourceSets {
        main {
          resources {
              srcDir 'src/main/resources'
              srcDir 'src/main/java'
          }
        }
        test {
          resources {
              srcDir 'src/test/resources'
              srcDir 'src/test/java'
          }
        }
    }

    repositories {
        mavenCentral()
        mavenRepo(url: 'http://wicketstuff.org/maven/repository')
    }
    
    dependencies {
        compile  "org.apache.wicket:wicket:$wicketVersion"
        compile  "org.apache.wicket:wicket-extensions:$wicketVersion"
        compile  "org.apache.wicket:wicket-spring:$wicketVersion"
        compile  "org.apache.wicket:wicket-datetime:$wicketVersion"
        compile  'org.slf4j:slf4j-log4j12:1.5.8'
        compile  'commons-dbcp:commons-dbcp:1.4'
        compile  'javax.activation:activation:1.1.1'
        compile  "org.springframework:spring-core:$springVersion"
        compile  "org.springframework:spring-beans:$springVersion"
        compile  "org.springframework:spring-jdbc:$springVersion"
        compile  "org.springframework:spring-web:$springVersion"
        compile  "org.springframework:spring-orm:$springVersion"
        compile  "org.springframework:spring-test:$springVersion"
        compile  'org.springframework.integration:spring-integration-mail:1.0.3.RELEASE'
        compile  'org.springframework:spring-mock:2.0.8'
        compile  'commons-lang:commons-lang:2.5'
        compile  'commons-httpclient:commons-httpclient:3.1'
        compile  'com.thoughtworks.xstream:xstream:1.3.1'
        compile  'commons-io:commons-io:1.4'
        compile  'net.java.dev.rome:rome:1.0.0'
//        compile  'dom4j:dom4j:1.6.1'
        compile  'net.sf.ehcache:ehcache-core:2.4.0'
        // start hibernate - transitive resolving does not work on hibernate
        compile  "org.hibernate:hibernate-core:$hibernateVersion"
        compile  'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final'
        compile ("org.hibernate:hibernate-ehcache:$hibernateVersion") { transitive = false }	
        compile  "org.hibernate:hibernate-annotations:$hibernateVersion"
        compile  "org.hibernate:hibernate-jmx:$hibernateVersion"
        compile  "org.hibernate:hibernate-entitymanager:$hibernateVersion"
        compile  'org.hibernate:hibernate-commons-annotations:3.2.0.Final'
        compile  'javax.transaction:jta:1.1'
        // end hibernate
        testCompile     'junit:junit:4.8.1'
        testCompile     'org.easymock:easymock:3.0'

        // provided
        providedDeps = [
           'javax.servlet:servlet-api:2.5',
           'com.h2database:h2:1.3.148',
           "org.mortbay.jetty:jetty:$jettyVersion",
           "org.mortbay.jetty:jetty-util:$jettyVersion",
           "org.mortbay.jetty:jetty-management:$jettyVersion",
           "org.mortbay.jetty:jetty-naming:$jettyVersion",
           "org.mortbay.jetty:jetty-plus:$jettyVersion",
           'mysql:mysql-connector-java:5.1.13',
           'javax.mail:mail:1.4'
        ]
        compile providedDeps
        tomcatBundleDeps  'com.h2database:h2:1.3.148'
        tomcatBundleDeps  'javax.mail:mail:1.4.4'
    }

    // filtering resources
    processResources {
        // copy the rest and filter
        from(sourceSets.main.resources.srcDirs) {
            filter(ReplaceTokens, tokens: [devproofVersion: project.version])
            include '**/*.xml'
        }
        // copy images
        from(sourceSets.main.resources.srcDirs) {
            exclude '**/*.xml'
        }
    }
}

// generate gradle bootstrapping
// run gradle createWrapper
task createWrapper(type: Wrapper) {
  gradleVersion = '1.10'
}
archivesBaseName = 'devproof-module-article'

dependencies {
  compile project(':portal-core')
  compile project(':module-comment')
}archivesBaseName = 'devproof-module-blog'

dependencies {
  compile project(':portal-core')
  compile project(':module-comment')
}archivesBaseName = 'devproof-module-bookmark'

dependencies {
  compile project(':portal-core')
  compile project(':module-deadlinkcheck')
}archivesBaseName = 'devproof-module-comment'

dependencies {
  compile project(':portal-core')
}archivesBaseName = 'devproof-module-deadlinkcheck'

dependencies {
  compile project(':portal-core')
}archivesBaseName = 'devproof-module-download'

dependencies {
  compile project(':portal-core')
  compile project(':module-deadlinkcheck')
}archivesBaseName = 'devproof-module-otherpage'

dependencies {
  compile project(':portal-core')
}archivesBaseName = 'devproof-module-uploadcenter'

dependencies {
  compile project(':portal-core')
}import org.apache.tools.ant.filters.ReplaceTokens

bundlePath = "$buildDir/dist/"
bundleTmpPath = "$bundlePath/tmp/"
warTmpPath = "$bundleTmpPath/war/"
sqlTmpPath = "$bundleTmpPath/sql/"

dependencies {
  compile project(':portal-webapp')
}

task dist << {
  println "task bundle dist"
  cleanBundle()
  sqlPreparation()
  bundleWar()
  bundleTomcat()
  cleanTmpFolder()
}

def bundleWar() {
  def packageName = "devproof-portal-${version}-war"
  def bundleWarPath = "$bundlePath/${packageName}"
  mkdir(bundleWarPath)
  copyReadmeAndChanges(bundleWarPath, 'WAR')
  copyLicenses(bundleWarPath)
  copyWar(bundleWarPath)
  copyConfigFiles(bundleWarPath)
  concatAllSqlScriptsAndWrite(bundleWarPath)
  tarGz(bundleWarPath, packageName)
}

def bundleTomcat() {
  def packageName = "devproof-portal-${version}-with-tomcat7"
  def bundleTomcatPath = "$bundlePath/${packageName}"
  mkdir(bundleTomcatPath)
  copyReadmeAndChanges(bundleTomcatPath, 'TOMCAT7')
  copyLicenses(bundleTomcatPath)
  copyWar(bundleTomcatPath)
  copyConfigFiles(bundleTomcatPath)
  concatAllSqlScriptsAndWrite(bundleTomcatPath)
  def tomcatPath = downloadTomcatAndExtract(bundleTomcatPath)
  deleteDir("$tomcatPath/webapps")
  mkdir("$tomcatPath/webapps")
  copyLibsForTomcat(tomcatPath)
  copyConfigForTomcat(tomcatPath)
  createH2DBFiles(bundleTomcatPath, tomcatPath)
  tarGz(bundleTomcatPath, packageName)
}

def concatAllSqlScriptsAndWrite(bundlePath) {
  concatCreateSqlAndWriteFile('mysql', bundlePath)
  concatCreateSqlAndWriteFile('oracle', bundlePath)
  concatUpdateSqlAndWriteFile('mysql', bundlePath)
  concatUpdateSqlAndWriteFile('oracle', bundlePath)
}

def tarGz(fullBundlePath, packageName) {
  ant.tar(
      destfile: fullBundlePath + '.tar',
  ) {
    tarfileset(dir: bundlePath) {
      include(name: "${packageName}/**")
    }
  }
  def bundlePathTarGz = fullBundlePath + '.tar.gz'
  ant.gzip(
      destfile: bundlePathTarGz,
      src: fullBundlePath + '.tar'
  )
  delete(fullBundlePath + '.tar')
  println "Devproof bundled distribution: $bundlePathTarGz"
}

def copyConfigForTomcat(tomcatPath) {
  copy {
    from ('config/tomcat7/h2/ROOT.xml') {
      filter(ReplaceTokens, tokens: [devproofVersion: project.version])
    }
    into "$tomcatPath/conf/Catalina/localhost/"
  }
}

def copyLibsForTomcat(tomcatPath) {
  copy {
    from configurations.tomcatBundleDeps.copy().setTransitive(false)
    into "$tomcatPath/lib/"
  }
}

def downloadTomcatAndExtract(bundlePath) {
  // url is in root build.gradle
  def downloadedFile = download(bundlePath, tomcatUrl)
  def tarFile = downloadedFile[0..-4]
  def folder = downloadedFile[0..-8]
  ant.gunzip(
    src: downloadedFile,
    dest: tarFile
  )

  ant.untar(
    src: tarFile,
    dest: bundlePath
  )
  delete(downloadedFile)
  delete(tarFile)
  folder  // removes .tar.gz
}

def copyWar(bundlePath) {
  println "copyWar"
  copy {
    from locateWarPath()
    into bundlePath + "/war/"
    rename { String fileName ->
        "devproof-portal-${version}.war"
    }
  }
}

def copyConfigFiles(bundlePath) {
  println "copyConfig"
  copy {
    from 'config'
    into "$bundlePath/config"
  }
}

def copyReadmeAndChanges(bundlePath, readmePostfix) {
  println "copyReadmeAndChanges"
  copy {
    from "README_$readmePostfix"
    into bundlePath
    rename { String fileName ->
        "README"
    }
  }
  copy {
    from "CHANGES"
    into bundlePath
  }
}

def copyLicenses(bundlePath) {
  println "copyLicenses"
  copy {
    from 'licenses/'
    into bundlePath + '/licenses/'
  }
}

def sqlPreparation() {
  extractWar()
  extractSql()
}

def createH2DBFiles(bundleTomcatPath, tomcatPath) {
  def bundleTomcatH2Path = "$tomcatPath/data/"
  mkdir(bundleTomcatH2Path)
  ant.sql(
      driver: "org.h2.Driver",
      url: "jdbc:h2:file:$bundleTomcatH2Path/devproof_data",
      userid: "sa",
      password: "",
      delimiter: "dummy_delimiter_for_one_commit",
      output: "true",
      keepformat: "true",
      autocommit: "true",
      classpath: configurations.compile.asPath
  ) {
    transaction("SET MODE MySQL;")
    transaction(src: "$bundleTomcatPath/sql/install_devproof_mysql.sql")
  }
}

def cleanBundle() {
  println "cleanBundle"
  deleteDir(bundlePath)
}

def deleteDir(dir) {
  println "cleanBundle"
  file(dir).deleteDir()
}

def cleanTmpFolder() {
  println "clean tmp"
  file(bundlePath + '/tmp/').deleteDir()
}

def locateWarPath() {
  def p = project(':portal-webapp')
  p.libsDir.path + '/' + p.archivesBaseName + '-' + version + '.war'
}

def extractWar() {
  println "extractWar"
  copy {
    from zipTree(locateWarPath())
    into warTmpPath
  }
}

def extractSql() {
  println "extractSql"
  copy {
    jars = "$warTmpPath/WEB-INF/lib/"
    fileTree(jars).each{
      jarFile ->
      include 'sql/*/*.sql'
      from zipTree(jarFile)
      into bundleTmpPath
    }
  }
}

def concatCreateSqlAndWriteFile(type, bundlePath) {
  println "concatCreateSqlAndWriteFile $type"
  def sqlPath = "$bundlePath/sql/"
  mkdir(sqlPath)
  File outputFile = file(sqlPath + '/install_devproof_' + type + '.sql')
  outputFile.append(file(sqlTmpPath + '/create/create_tables_' + type + '_core.sql').text);
  outputFile.append("\n" + file(sqlTmpPath + '/create/insert_core.sql').text);
  def sqlFiles = file(sqlTmpPath + '/create').listFiles().sort()
  // create* files
  sqlFiles.each { File file ->
    def createCore = 'create_tables_' + type + '_core.sql'
    if(file.name.startsWith("create_tables_$type") &&
      file.name != createCore) {
      outputFile.append("\n" + file.text);
    }
  }
  // insert* files
  sqlFiles.each { File file ->
    def insertCore = 'insert_core.sql'
    if(file.name.startsWith('insert_') &&
      file.name != insertCore) {
      outputFile.append("\n" + file.text);
    }
  }
}

def concatUpdateSqlAndWriteFile(type, bundlePath) {
  println "concatUpdateSqlAndWriteFile $type"
  def sqlPath = "$bundlePath/sql/update/"
  def filePrefix = "update_from_"

  mkdir(sqlPath)
  def sqlFiles = file(sqlTmpPath + '/update').listFiles().sort()

  // update* files core
  sqlFiles.each { File file ->
    if(file.name.contains("_${type}_") && file.name.endsWith('_core.sql')) {
      tmp = file.name.minus(filePrefix)
      index = tmp.lastIndexOf("_${type}_")
      def sqlVersion = tmp.substring(0, index)
      def outputFilePath = "$sqlPath${filePrefix}${sqlVersion}_${type}.sql"
      File outputFile = new File(outputFilePath)
      outputFile.append(file.text + "\n");
    }
  }

  // update* files
  sqlFiles.each { File file ->
    if(file.name.contains("_${type}_") && !file.name.endsWith('_core.sql')) {
      tmp = file.name.minus(filePrefix)
      index = tmp.lastIndexOf("_${type}_")
      def sqlVersion = tmp.substring(0, index)
      def outputFilePath = "$sqlPath/${filePrefix}${sqlVersion}_${type}.sql"
      File outputFile = new File(outputFilePath)
      outputFile.append(file.text + "\n");
    }
  }
}

def download(folder, address) {
  println "Downloading... $address"
  ant.get(
    dest: folder,
    src: address
  )
  def filename = address.tokenize("/")[-1]
  def localFilePath = folder + '/' + filename
  localFilePath
}
archivesBaseName = 'devproof-portal-core'apply plugin: 'war'

archivesBaseName = 'devproof-portal'

dependencies {
  compile project(':portal-core')
  compile project(':module-blog')
  compile project(':module-article')
  compile project(':module-bookmark')
  compile project(':module-download')
  compile project(':module-otherpage')
  compile project(':module-uploadcenter')
  providedCompile providedDeps
}
