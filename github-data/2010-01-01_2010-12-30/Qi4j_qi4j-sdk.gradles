project.ext {
  title = "Qi4j SDK"
  description = "Qi4jâ„¢ is a framework for domain centric application development, including evolved concepts from AOP, DI and DDD."
  testFailures = [ ]
  mainClassName = 'org.qi4j.container.Main'
  groovycMain_mx = "512m"
  groovycMain_permSize = "128m"
  groovycMain_maxPermSize = "256m"
}


apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'signing'
apply plugin: 'maven'
apply from: 'maven-compat.gradle'
apply plugin: 'project-report'
apply plugin: 'sonar'
apply from: 'libraries.gradle'

targetCompatibility = "1.6"
sourceCompatibility = "1.6"

// Collect the modules that fulfills the Release Criteria.
project.ext {
  releaseSpec = new org.qi4j.gradle.plugin.ModuleReleaseSpecification()
}

def releaseApprovedProjects = allprojects.findAll( { project ->  rootProject.ext.releaseSpec.satisfiedBy( project ) } )

buildscript {
  repositories {
    mavenCentral()
  }
}


// External tools BEGIN ---------------------------------------------------

// Sonar configuration - Used at nemo.sonarsource.org
// Using system properties for easy configuration from outside the build
sonar {
    server {
        url = System.getProperty("sonar.host.url") ?: "http://localhost:9000/"
    }
    database {
        url = System.getProperty("sonar.jdbc.url") ?: "jdbc:h2:tcp://localhost:9092/sonar"
        driverClassName = System.getProperty("sonar.jdbc.driver") ?: "org.h2.Driver"
        username = System.getProperty("sonar.jdbc.username") ?: "sonar"
        password = System.getProperty("sonar.jdbc.password") ?: "sonar"
    }
}

// IDEA plugin configuration
idea.project.ipr {
  withXml { provider ->
    provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
  }
}

// External tools END -----------------------------------------------------

// Define repositories URLs here so we can reuse them in the build script
// Needed as Gradle forbid access to declared repositories URLs by design
// Releasable submodules should not declare repositories in their own build files
def repos_urls = [
  mavenCentral: "http://repo1.maven.org/maven2/",
  ops4j: "http://repository.ops4j.org/maven2/",
  restlet: 'http://maven.restlet.org',
  javanet: "http://download.java.net/maven/2",
]

allprojects {

  apply plugin: 'eclipse'
  apply plugin: 'idea'
  apply plugin: 'signing'
  apply plugin: 'java'
//  apply plugin: 'checkstyle'
  apply plugin: 'project-report'
  apply plugin: 'maven'


  defaultTasks 'classes', 'test'

  group = name.substring( 0, name.lastIndexOf( '.' ) )
  version = System.properties.version ?: "0"
  [ compileJava, compileTestJava, javadoc ]*.options*.encoding = 'UTF-8'

  repositories {
    mavenCentral()
    mavenRepo name: 'ops4j-repo', url: repos_urls.ops4j
    mavenRepo name: 'restlet-repo', url: repos_urls.restlet
    mavenRepo name: 'maven2-repository.dev.java.net', url: repos_urls.javanet
  }

  // Artifact upload global configuration BEGIN -----------------------------

  def uploadSnapshots = version.contains("SNAPSHOT")
  def uploadReleases = ! uploadSnapshots
  // By default RELEASES are signed, SNAPSHOTS are not
  // Signing can be turned on or off by setting the uploadSigned property
  def uploadSigned = rootProject.hasProperty('uploadSigned') \
                        ? rootProject.uploadSigned : uploadReleases \
                        ? true : false
  // By default RELEASES must satisfy ReleaseSpecification, SNAPSHOT don't
  // ReleaseSpecification usage can be turned on or off by setting the uploadReleaseSpec property
  def uploadReleaseSpec = rootProject.hasProperty('uploadReleaseSpec') \
                             ? rootProject.uploadReleaseSpec : uploadReleases \
                             ? true : false
  // By default RELEASES are uploaded using SSH, SNAPSHOTS using WEBDAV
  // Used Wagon can be overriden by setting the uploadWagon property
  // def wagonSSH = "org.apache.maven.wagon:wagon-ssh:1.0-beta-2"
  def wagonWEBDAV = "org.apache.maven.wagon:wagon-webdav:1.0-beta-2"
  def uploadWagon = rootProject.hasProperty('uploadWagon') \
                        ? rootProject.uploadWagon : wagonWEBDAV
  // By default RELEASES are uploaded to OPS4J, SNAPSHOTS to Cloudbees
  // Target repository can be overriden by setting the uploadRepository property
  def releasesRepository = "dav:https://repository-qi4j.forge.cloudbees.com/release/"
  def snapshotsRepository = "dav:https://repository-qi4j.forge.cloudbees.com/snapshot/"
  def uploadRepository = rootProject.hasProperty('uploadRepository') \
                            ? rootProject.uploadRepository \
                            : uploadReleases ? releasesRepository : snapshotsRepository
  // No username/password is provided by default
  // If needed set them using the uploadUsername and uploadPassword properties
  def uploadUsername = rootProject.hasProperty('uploadUsername') ? rootProject.uploadUsername : null
  def uploadPassword = rootProject.hasProperty('uploadPassword') ? rootProject.uploadPassword : null

  // Artifact upload global configuration END -------------------------------


  configurations {
    archives
    deployerJars
    provided
    compile.extendsFrom provided
    runtime.extendsFrom compile
  }

  dependencies {
    testCompile( libraries.ant )
    testCompile( libraries.ant_junit )
    testCompile( libraries.junit )
    testRuntime( libraries.asm, libraries.asm_commons, libraries.asm_util )
    deployerJars( uploadWagon )
  }

  test.onlyIf { !project.hasProperty( 'skipTests' ) }
  test {
      testLogging {
          info {
              exceptionFormat "full"
          }
      }
  }

  sourceSets {
    docs {
      resources {
        srcDir 'src/docs'
      }
    }
  }

  project.ext {
    javaDir = new File( "$projectDir/src/main/java" )
    scalaDir = new File( "$projectDir/src/main/scala" )
    documentationDir = new File( "$projectDir/src/docs" )
    testJavaDir = new File( "$projectDir/src/tests/java" )
    testScalaDir = new File( "$projectDir/src/tests/scala" )
  }

  // Actual code projects BEGIN -------------------------------------------
  if( ext.javaDir.isDirectory() || ext.scalaDir.isDirectory() ||
      ext.testJavaDir.isDirectory() || ext.testScalaDir.isDirectory() )
  {
    apply plugin: 'osgi'
    apply plugin: VersionClass
    apply plugin: AsciidocBuildInfo

//    if( name == "org.qi4j.core.runtime" )
//    {
//      checkstyleMain {
//        configFile = new File( "$rootProject.projectDir.absolutePath/etc/qi4j-runtime-checkstyle.xml" )
//        ignoreFailures = true
//      }
//    }
//    else
//    {
//      checkstyleMain {
//        configFile = new File( rootProject.projectDir.absolutePath.toString() + '/etc/qi4j-api-checkstyle.xml' )
//        ignoreFailures = true
//        reporting.baseDir = "$rootProject.reporting.baseDir/checkstyle"
//      }
//    }
//    checkstyleTest {
//      configFile = new File( "$rootProject.projectDir.absolutePath/etc/qi4j-tests-checkstyle.xml" )
//      ignoreFailures = true
//    }
//
//    checkstyleVersion {
//      configFile = new File( "$rootProject.projectDir.absolutePath/etc/qi4j-tests-checkstyle.xml" )
//      ignoreFailures = true
//    }

    jar {
      manifest {
        license = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        docURL = 'http://www.qi4j.org'
        description = project.description ?: 'Qi4j is a platform for Composite Oriented Programming'
        vendor = 'Qi4j Community, http://www.qi4j.org'
        instruction '-debug', 'true'
      }
    }

    signing {
      required { uploadSigned }
      sign configurations.archives
    }

    task sourceJar( type: Jar ) {
      classifier = "sources"
      from sourceSets.main.allSource
    }

    task testSourceJar( type: Jar ) {
      classifier = "testsources"
      from sourceSets.test.allSource
    }

    task javadocJar( type: Jar ) {
      classifier = "javadoc"
      from javadoc.destinationDir
      dependsOn javadoc
    }

    artifacts {
      archives sourceJar, testSourceJar, javadocJar
    }

    def testProperties = [
            'proxySet': System.properties[ 'proxySet' ],
            'proxyHost': System.properties[ 'proxyHost' ],
            'proxyPort': System.properties[ 'proxyPort' ] ]

    test {
      maxHeapSize = "1024m"
      systemProperties = testProperties
      ignoreFailures = true
      testReport = true
      afterSuite { descriptor, result ->
        if( result.resultType == TestResult.ResultType.FAILURE )
        {
          rootProject.ext.testFailures << project
        }
      }
    }

//    // Create checkstyle report
//    task checkstyleReport( type: Xslt, dependsOn: check ) {
//      source project.checkstyle.reportsDir
//      include '*.xml'
//      destDir = file( "build/reports/checkstyle/" )
//      extension = 'html'
//      stylesheetFile = file( "$rootProject.projectDir/etc/checkstyle-noframes.xsl" )
//    }
//

    // Dependency Report generate only the runtime configuration
    // The report is packaged in the SDK distributions
    dependencyReport {
        configurations = [ project.configurations.runtime ]
    }

    // Sonar configuration, mainly for code coverage BEGIN ----------------
    // See http://www.gradle.org/docs/current/userguide/dependency_management.html#sub:configurations
    // and http://www.gradle.org/docs/current/dsl/org.gradle.api.artifacts.ConfigurationContainer.html
    configurations {
        jacoco // Configuration Group used by Sonar to provide Code Coverage using JaCoCo
        sonar {
          project {
              dynamicAnalysis  = "reuseReports"
              withProjectProperties { props ->
                  props["sonar.core.codeCoveragePlugin"] = "jacoco"
                  props["sonar.jacoco.reportPath"]       = "${buildDir}/jacoco.exec"
              }
          }
        }
    }
    dependencies {
        jacoco group: "org.jacoco", name: "org.jacoco.agent", version: "0.5.10.201208310627", classifier: "runtime"
    }
    test {
        jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec,includes=org.qi4j.*"
    }
    // Sonar configuration, mainly for code coverage END ------------------

    task minBuild {
      dependsOn classes
      dependsOn test
    }

  }
  // Actual code projects END ---------------------------------------------

  // Upload Archives - Artifact Deployment
  uploadArchives.doFirst {
    if( version == "0" )
    {
      throw new GradleException( "'version' must be given as a system property to perform a release." )
    }
  }

  uploadArchives.onlyIf { ( !uploadReleaseSpec || ( releaseApprovedProjects.contains( project ) || project == rootProject ) ) && !project.hasProperty( 'skipUpload' ) }
  uploadArchives {
    dependsOn check
    repositories.mavenDeployer {
      if( uploadSigned )
        beforeDeployment { MavenDeployment deployment -> signing.signPom( deployment ) }
      configuration = configurations.deployerJars
      repository(url: uploadRepository) {
        if( uploadUsername )
          authentication(userName: uploadUsername, password: uploadPassword)
      }
      snapshotRepository(url: uploadRepository) {
        if( uploadUsername )
          authentication(userName: uploadUsername, password: uploadPassword)
      }
    }
  }

  idea.module.iml {
    whenMerged { module ->
      module.dependencies*.exported = true
    }
  }
} // allproject END -------------------------------------------------------

gradle.taskGraph.whenReady {taskGraph ->
  taskGraph.allTasks.last().doLast {
    if( rootProject.ext.testFailures )
    {
      println "\nTest failures in:"
      rootProject.ext.testFailures.unique().each { project -> println "  " + project.name }
      println ""
      throw new RuntimeException( "There was TEST FAILURES!! See list above." )
    }
  }
}

task globalTestReport( type: TestReport ) {
  destinationDir = file("$buildDir/reports/tests")
  reportOn subprojects*.test
}

test {
  dependsOn subprojects*.test, globalTestReport
  testReport = false
}

// Build the whole SDK public Javadoc
task javadocs( type: Javadoc ) {

  options.docFilesSubDirs = true
  options.encoding = "UTF-8"
  options.overview = "${rootProject.projectDir}/buildSrc/src/javadoc/overview.html"
  title = "${rootProject.title} ${version}"
  def apiSources = releaseApprovedProjects.findAll( { project ->
    ( project.name.startsWith( 'org.qi4j.core' ) && !project.name.startsWith( 'org.qi4j.core.runtime' ) ) ||
    project.name.startsWith( 'org.qi4j.library' ) ||
    project.name.startsWith( 'org.qi4j.extension' ) ||
    project.name.startsWith( 'org.qi4j.tool' )
  } )
  source apiSources.collect { project ->
    project.sourceSets.main.allJava
  }
  destinationDir = new File( "" + buildDir + '/docs/javadoc' )
  // Might need a classpath
  classpath = files( apiSources.collect { project ->
    project.sourceSets.main.compileClasspath
  } )
  options.links( "http://java.sun.com/j2se/1.6.0/docs/api" )
  options.group( [ "Core API": [ "org.qi4j.api", "org.qi4j.api.*", "org.qi4j.io", "org.qi4j.functional" ],
                         "Core Bootstrap": [ "org.qi4j.bootstrap" ],
                         "Core SPI": [ "org.qi4j.spi", "org.qi4j.spi.*" ],
                         "Libraries": [ "org.qi4j.library.*", "org.qi4j.logging", "org.qi4j.logging.*", "org.qi4j.lang.*" ],
                         "Extensions": [ "org.qi4j.valueserialization.*", "org.qi4j.entitystore.*", "org.qi4j.index.*", "org.qi4j.metrics.*", "org.qi4j.cache.*", "org.qi4j.migration", "org.qi4j.migration.*" ],
                         "Tools": [ "org.qi4j.tools.*", "org.qi4j.envisage", "org.qi4j.envisage.*", "org.qi4j.library.swing.entityviewer" ],
                         "Test Support": [ "org.qi4j.test", "org.qi4j.test.*" ]
                 ] )

}

task archiveJavadocs(type: Copy ) {
  dependsOn javadocs

  if( rootProject.version == '0' || rootProject.version.contains( "SNAPSHOT" ) )
  {
    into( "$rootProject.projectDir/../qi4j.github.com/develop/javadocs/" )
  }
  else
  {
    into( "$rootProject.projectDir/../qi4j.github.com/$version/javadocs/" )
  }
  from( 'build/docs/javadoc/' )
}


// Build All
task buildAll( dependsOn: [
    archiveJavadocs,
    test,
    jar,
    subprojects*.dependencyReport,
    subprojects*.assemble,
    ':org.qi4j.manual:website'
] ) { }

// Prepare runtime dependencies download facility (metalink)
buildAll.doLast {
    def runtimeDepsMetalink = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<metalink xmlns=\"urn:ietf:params:xml:ns:metalink\">\n"
    runtimeDepsMetalink = runtimeDepsMetalink + " <identity>qi4j-sdk-runtime-deps</identity>\n"
    runtimeDepsMetalink = runtimeDepsMetalink + " <version>${version}</version>\n"
    def handledGavPaths = []
    releaseApprovedProjects.each { p ->
      p.configurations.runtime.allDependencies.each { dep ->
        def gavpath = dep.group.replace(".","/") + "/" + dep.name + "/" + dep.version + "/" + dep.name + "-" + dep.version + ".jar"
        if( !dep.group.startsWith("org.qi4j") && !handledGavPaths.contains( gavpath ) ) {
          runtimeDepsMetalink = runtimeDepsMetalink + "  <file name=\"${dep.group}-${dep.name}-${dep.version}.jar\">\n"
          repos_urls.each { repo_url ->
            runtimeDepsMetalink = runtimeDepsMetalink + "    <url>" + repo_url.value + dep.group.replace(".","/") + "/" + dep.name + "/" + dep.version + "/" + dep.name + "-" + dep.version + ".jar" + "</url>\n"
          }
          runtimeDepsMetalink = runtimeDepsMetalink + "  </file>\n\n"
          handledGavPaths << gavpath
        }
      }
    }
    runtimeDepsMetalink = runtimeDepsMetalink + "</metalink>\n"
    new File( buildDir.toString(), "reports" ).mkdirs()
    new File( buildDir.toString(), "reports/qi4j-sdk-runtime-deps.metalink" ).text = runtimeDepsMetalink
}

def srcDistImage = copySpec {
  from '.'
  exclude '**/build/'     // build output
  exclude '**/bin/'       // helper scripts
  exclude 'derby.log'     // Derby test garbage
  exclude '**/*.iml'      // IDEA files
  exclude 'org.qi4j.ipr'  // IDEA files
  exclude 'org.qi4j.iws'  // IDEA files
  exclude '**/out/*'       // build output
  exclude '**/.git/'      // git directories
  exclude '**/.git*'      // git files
  exclude '**/.gradle/'   // gradle management files
  into "qi4j-sdk-$version/src/"

}

def reportsDistImage = copySpec {
  from "$buildDir/reports"
  into( "docs/reports" )
}

def docsImage = copySpec {
  from "build/docs"
  from "manual/build/docs/website"
  into( "docs" )
}

def runtimeDependenciesListImage = copySpec {
  releaseApprovedProjects.collect { p ->
    into( "libs/" ) {
      from "$p.buildDir/reports/project/dependencies.txt"
      rename 'dependencies.txt', p.name + '-' + p.version + '-runtime-deps.txt'
    }
  }
  into( "libs/" ) {
    from "build/reports/qi4j-sdk-runtime-deps.metalink"
    rename 'qi4j-sdk-runtime-deps.metalink', 'qi4j-sdk-' + version + '-runtime-deps.metalink'
  }
}

def libsImage = copySpec {
  releaseApprovedProjects.collect { proj ->
    into( "libs/" ) {
      from proj.configurations.archives.artifacts.files
      exclude '**-testsources.jar'
      exclude '**-javadoc.jar'
      exclude '**/*.asc'
    }
  }
}

def samplesImage = copySpec {
  from( "$projectDir/samples" )
  from( "$projectDir/samples/*/build/docs/javadoc" )
  into( "samples" )
  exclude '**/*.iml'
  exclude '**/build/'     // build output
}

def tutorialsImage = copySpec {
  from( "$projectDir/tutorials" )
  exclude '**/build/'
  into( "tutorials" )
  from( "$projectDir/tutorials/*/build/docs/javadoc" )
  exclude '**/*.iml'
}

def binDistImage = copySpec {
  into "qi4j-sdk-$version"
  with docsImage
  with reportsDistImage
  with runtimeDependenciesListImage
  with libsImage
  with samplesImage
  with tutorialsImage
}

task zipSources( type: Zip, dependsOn: [ buildAll ] ) {
  baseName = 'qi4j-sdk'
  with srcDistImage
  classifier = 'src'
}

task tarSources( type: Tar, dependsOn: [ buildAll ] ) {
  baseName = 'qi4j-sdk'
  with srcDistImage
  compression = Compression.GZIP
  classifier = 'src'
}

task zipBinaries( type: Zip, dependsOn: [ buildAll ] ) {
  baseName = 'qi4j-sdk'
  classifier = 'bin'
  with binDistImage
}

task tarBinaries( type: Tar, dependsOn: [ buildAll ] ) {
  baseName = 'qi4j-sdk'
  classifier = 'bin'
  compression = Compression.GZIP
  with binDistImage
}

artifacts {
  archives zipSources, tarSources, zipBinaries, tarBinaries
}

task dist( type: Copy, dependsOn: install ) {
  with binDistImage
  into "$buildDir/dist"
}

task release {
  description = 'Builds, tests and uploads the release artifacts'
  group = 'release'
  doFirst {
    if( System.properties[ 'version' ] == null || System.properties[ 'version' ].contains( 'SNAPSHOT' ) )
    {
      throw new GradleException( "'version' must be given as a system property to perform a release." )
    }
  }
  dependsOn archiveJavadocs, ':org.qi4j.manual:copyWebsite', allprojects*.uploadArchives, dist
}

//
// This is a task that generates the gradlew scripts, allowing users to run gradle without having gradle installed
// on their system.
// This task should be run by "build master" and the resulting ouput committed to source control.  Its outputs include:
//  1) /gradlew which is the *NIX shell script for executing builds
//  2) /gradlew.bat which is the windows bat script for for executing builds
//  3) /wrapper which is a directory named by the "jarPath" config which contains other needed files.
task wrapper( type: Wrapper ) {
  gradleVersion = '1.5'
}


jar { manifest { name = "Qi4j Core API"}}

dependencies {

  compile project( ':org.qi4j.core:org.qi4j.core.io' )
  compile libraries.jodatime

  testCompile project( ':org.qi4j.core:org.qi4j.core.testsupport' )
  testCompile project( ':org.qi4j.libraries:org.qi4j.library.constraints' )
  testCompile project( ':org.qi4j.extensions:org.qi4j.extension.valueserialization-orgjson' )

  testRuntime project( ':org.qi4j.core:org.qi4j.core.runtime' )
  testRuntime libraries.slf4j_simple

}
jar { manifest { name = "Qi4j Core Bootstrap"}}

dependencies {

  compile project( ':org.qi4j.core:org.qi4j.core.spi' )

  testRuntime project( ':org.qi4j.core:org.qi4j.core.runtime' )
  testRuntime libraries.slf4j_simple

}
jar { manifest { name = "Qi4j Functional"}}

dependencies {

  compile libraries.slf4j_api

  testRuntime libraries.slf4j_simple

}
jar { manifest { name = "Qi4j I/O"}}

dependencies {

  compile project( ':org.qi4j.core:org.qi4j.core.functional' )

  testRuntime libraries.slf4j_simple

}
jar { manifest { name = "Qi4j Core Runtime"}}

dependencies {

  provided libraries.osgi_core

  compile project(":org.qi4j.core:org.qi4j.core.bootstrap")
  compile libraries.asm
  compile libraries.asm_util
  compile libraries.asm_commons

  testCompile project(":org.qi4j.core:org.qi4j.core.testsupport")
  testCompile project(":org.qi4j.libraries:org.qi4j.library.constraints")

  testRuntime libraries.slf4j_simple

}
jar { manifest { name = "Qi4j Core SPI"}}

dependencies {

    compile project( ':org.qi4j.core:org.qi4j.core.api' )
    compile libraries.org_json

    testCompile project(":org.qi4j.core:org.qi4j.core.testsupport")

    testRuntime project(":org.qi4j.core:org.qi4j.core.runtime")
    testRuntime libraries.logback

}
jar { manifest { name = "Qi4j Core TestSupport"}}

dependencies {

  compile project( ':org.qi4j.core:org.qi4j.core.bootstrap' )
  compile libraries.junit

}description = "Qi4j Ehcache Cache Extension"

jar { manifest { name = "Qi4j Extension: EhCache"}}

dependencies {

  compile(project(':org.qi4j.core:org.qi4j.core.spi'))
  compile(project(':org.qi4j.core:org.qi4j.core.bootstrap'))
  compile(libraries.ehcache)

  testCompile( project(':org.qi4j.core:org.qi4j.core.testsupport') )

  testRuntime( project(':org.qi4j.core:org.qi4j.core.runtime'))
  testRuntime(libraries.logback)
}
jar { manifest { name = "Qi4j Extension - EntityStore - File system" }}

dependencies {

    compile(project(":org.qi4j.core:org.qi4j.core.spi"))
    compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
    compile(project(":org.qi4j.libraries:org.qi4j.library.constraints"))
    compile(project(":org.qi4j.libraries:org.qi4j.library.locking"))
    compile(project(":org.qi4j.libraries:org.qi4j.library.fileconfig"))

    testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))
    testCompile(project(":org.qi4j.extensions:org.qi4j.extension.valueserialization-orgjson"))

    testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
    testRuntime(libraries.logback)
}

description = "Qi4j Google AppEngine Extension. Utilizes the GAE data store as EntityStore for applications deployed on GAE."

jar { manifest { name = "Qi4j Extension - EntityStore - Google App Engine" }}

dependencies {

  compile project(":org.qi4j.core:org.qi4j.core.spi" )
  compile project(":org.qi4j.core:org.qi4j.core.bootstrap" )
  compile project(":org.qi4j.libraries:org.qi4j.library.locking" )
  compile libraries.appengine

  testCompile project( ":org.qi4j.core:org.qi4j.core.testsupport" )

  testRuntime project( ":org.qi4j.core:org.qi4j.core.runtime" )
  testRuntime libraries.logback

}
description = "Qi4j Hazelcast EntityStore Extension"

jar { manifest { name = "Qi4j Extension - EntityStore - Hazelcast" }}

dependencies {

    compile(project(":org.qi4j.core:org.qi4j.core.api"))
    compile(project(":org.qi4j.core:org.qi4j.core.spi"))
    compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
    compile(project(":org.qi4j.libraries:org.qi4j.library.locking"))
    compile(libraries.hazelcast)

    testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))
    testCompile(project(":org.qi4j.extensions:org.qi4j.extension.valueserialization-orgjson"))

    testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
    testRuntime(libraries.logback)

}
description = "Qi4j JClouds EntityStore Extension"

jar { manifest { name = "Qi4j Extension - EntityStore - JClouds" }}

dependencies {

    compile project( ":org.qi4j.core:org.qi4j.core.bootstrap" )
    compile project( ":org.qi4j.libraries:org.qi4j.library.locking" )
    compile libraries.guava
    compile libraries.jclouds_core
    compile libraries.jclouds_blobstore

    testCompile project( ":org.qi4j.core:org.qi4j.core.testsupport" )
    testCompile(project(":org.qi4j.extensions:org.qi4j.extension.valueserialization-orgjson"))
    testCompile libraries.jclouds_filesystem

    testRuntime project( ":org.qi4j.core:org.qi4j.core.runtime" )
    testRuntime libraries.logback

}


description = "Qi4j JDBM EntityStore Extension"

jar { manifest {name = "Qi4j Extension - EntityStore - JDBM" }}

dependencies {

  compile project( ":org.qi4j.core:org.qi4j.core.bootstrap" )
  compile project( ":org.qi4j.libraries:org.qi4j.library.locking" )
  compile project( ":org.qi4j.libraries:org.qi4j.library.fileconfig" )
  compile libraries.jdbm

  testCompile project( ":org.qi4j.core:org.qi4j.core.testsupport" )
  testCompile(project(":org.qi4j.extensions:org.qi4j.extension.valueserialization-orgjson"))

  testRuntime project( ":org.qi4j.core:org.qi4j.core.runtime" )
  testRuntime libraries.logback

}description = "Qi4j LevelDB EntityStore Extension"

jar { manifest { name = "Qi4j Extension - EntityStore - LevelDB" }}

dependencies {

    compile project( ":org.qi4j.core:org.qi4j.core.bootstrap" )
    compile project( ":org.qi4j.libraries:org.qi4j.library.locking" )
    compile project( ":org.qi4j.libraries:org.qi4j.library.fileconfig" )
    compile libraries.leveldb_api

    runtime libraries.leveldb_java
    runtime libraries.leveldb_jni_all

    testCompile project( ":org.qi4j.core:org.qi4j.core.testsupport" )
    testCompile(project(":org.qi4j.extensions:org.qi4j.extension.valueserialization-orgjson"))

    testRuntime project( ":org.qi4j.core:org.qi4j.core.runtime" )
    testRuntime libraries.logback

}
jar { manifest { name = "Qi4j Extension - EntityStore - Memory" }}

dependencies {

    compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))

    testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))
    testCompile(project(":org.qi4j.extensions:org.qi4j.extension.valueserialization-orgjson"))

    testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
    testRuntime(libraries.logback)

}
description = "Qi4j MongoDB EntityStore Extension"

jar { manifest { name = "Qi4j Extension - EntityStore - MongoDB" }}

dependencies {

    compile project( ":org.qi4j.core:org.qi4j.core.bootstrap" )
    compile project( ":org.qi4j.libraries:org.qi4j.library.locking" )
    compile libraries.mongodb

    testCompile project( ":org.qi4j.core:org.qi4j.core.testsupport" )
    testCompile(project(":org.qi4j.extensions:org.qi4j.extension.valueserialization-orgjson"))

    testRuntime project( ":org.qi4j.core:org.qi4j.core.runtime" )
    testRuntime libraries.logback

}

description = "Qi4j Neo4j EntityStore Extension"

jar { manifest { name = "Qi4j Extension - EntityStore - Neo4j" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.spi"))
  compile(project(":org.qi4j.libraries:org.qi4j.library.fileconfig"))
  compile(libraries.neo4j)

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))
  testCompile(project(":org.qi4j.extensions:org.qi4j.extension.valueserialization-orgjson"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}


description = "Qi4j Preferences EntityStore Extension"

jar { manifest { name = "Qi4j Extension - EntityStore - Preferences" }}

dependencies {
    
    compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))

    testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))
    testCompile(project(":org.qi4j.extensions:org.qi4j.extension.valueserialization-orgjson"))

    testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
    testRuntime(libraries.logback)

}

description = "Qi4j Redis EntityStore Extension"

jar { manifest { name = "Qi4j Extension - EntityStore - Redis" }}

dependencies {
    
    compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
    compile(project(":org.qi4j.libraries:org.qi4j.library.locking"))
    compile(libraries.jedis)

    testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))
    testCompile(project(":org.qi4j.extensions:org.qi4j.extension.valueserialization-orgjson"))

    testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
    testRuntime(libraries.logback)

}

description = "Qi4j Riak EntityStore Extension"

jar { manifest { name = "Qi4j Extension - EntityStore - Riak" }}

dependencies {
    
    compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
    compile(project(":org.qi4j.libraries:org.qi4j.library.locking"))
    compile(libraries.riak)

    testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))
    testCompile(project(":org.qi4j.extensions:org.qi4j.extension.valueserialization-orgjson"))

    testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
    testRuntime(libraries.logback)

}

description = "Qi4j SQL EntityStore Extension"

jar { manifest { name = "Qi4j Extension - EntityStore - SQL" }}

dependencies {

  compile project(":org.qi4j.core:org.qi4j.core.bootstrap")
  compile project(":org.qi4j.libraries:org.qi4j.library.sql")
  compile libraries.javaSqlGenerator
  compile libraries.javaSqlGeneratorImpl

  testCompile project(":org.qi4j.core:org.qi4j.core.testsupport")
  testCompile project(":org.qi4j.libraries:org.qi4j.library.sql-dbcp")
  testCompile(project(":org.qi4j.extensions:org.qi4j.extension.valueserialization-orgjson"))
  testCompile libraries.derby // Needed at compile time for polite test shutdown

  testRuntime project(":org.qi4j.core:org.qi4j.core.runtime")
  testRuntime libraries.logback
  testRuntime libraries.h2
  testRuntime libraries.mysql_connector
  testRuntime libraries.postgres
  testRuntime libraries.sqlite

}
description = "Qi4j Voldemort EntityStore Extension"

jar { manifest { name = "Qi4j Extension - EntityStore - Voldemort" }}

repositories {
    mavenRepo name: 'clojars-repo', url: 'http://clojars.org/repo'
    mavenRepo name: 'oracle-repo', url: 'http://download.oracle.com/maven'
}

dependencies {

    compile project(":org.qi4j.core:org.qi4j.core.bootstrap")
    compile project(":org.qi4j.libraries:org.qi4j.library.locking")
    compile libraries.voldemort
    compile libraries.guava

    testCompile project(":org.qi4j.core:org.qi4j.core.testsupport")
    testCompile(project(":org.qi4j.extensions:org.qi4j.extension.valueserialization-orgjson"))

    testRuntime project(":org.qi4j.core:org.qi4j.core.runtime")
    testRuntime libraries.logback
    testRuntime libraries.sleepycat
    testRuntime libraries.log4j
    testRuntime libraries.jdom
    testRuntime libraries.velocity
    testRuntime libraries.commons_codec
    testRuntime libraries.commons_dbcp
    testRuntime libraries.commons_io
    testRuntime libraries.commons_lang

}

description = "Qi4j ElasticSearch Index/Query Extension"

jar { manifest { name = "Qi4j Extension - Index/Query - ElasticSearch" } }

dependencies {

  compile project(":org.qi4j.core:org.qi4j.core.bootstrap")
  compile project(":org.qi4j.libraries:org.qi4j.library.fileconfig")
  compile libraries.elasticsearch

  testCompile project(":org.qi4j.core:org.qi4j.core.testsupport")

  testRuntime project(":org.qi4j.core:org.qi4j.core.runtime")
  testRuntime libraries.logback

}

description = "Qi4j RDF Index/Query Extension"

jar { manifest { name = "Qi4j Extension - Index/Query - RDF" } }

dependencies {

    compile project( ":org.qi4j.core:org.qi4j.core.bootstrap" )
    compile project( ":org.qi4j.libraries:org.qi4j.library.rdf" )
    compile libraries.sesame
    compile libraries.commons_lang

    testCompile project( ':org.qi4j.extensions:org.qi4j.extension.valueserialization-orgjson' )
    testCompile project( ':org.qi4j.extensions:org.qi4j.extension.entitystore-preferences' )
    testCompile project( ':org.qi4j.extensions:org.qi4j.extension.entitystore-jdbm' )
    testCompile project( ":org.qi4j.core:org.qi4j.core.testsupport" )

    testRuntime project( ":org.qi4j.core:org.qi4j.core.runtime" )
    testRuntime libraries.logback

}
description = "Qi4j Solr Indexing Extension"

jar { manifest {name = "Qi4j Extension - Indexing - Solr" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
  compile(project(":org.qi4j.libraries:org.qi4j.library.fileconfig"))
  compile(project(":org.qi4j.libraries:org.qi4j.library.rdf"))
  compile(libraries.solr)

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.servlet_api)
  testRuntime(libraries.logback)
}description = "Qi4j SQL Indexing Extension"

jar {manifest {name = "Qi4j Extension - Indexing - SQL"}}

dependencies {

  compile project(":org.qi4j.core:org.qi4j.core.bootstrap")
  compile project(":org.qi4j.libraries:org.qi4j.library.sql")
  compile project(':org.qi4j.extensions:org.qi4j.extension.reindexer')
  compile libraries.javaSqlGenerator
  compile libraries.javaSqlGeneratorImpl

  testCompile project(":org.qi4j.core:org.qi4j.core.testsupport")
  testCompile project(":org.qi4j.libraries:org.qi4j.library.sql-dbcp")

  testRuntime project(":org.qi4j.core:org.qi4j.core.runtime")
  testRuntime libraries.logback
  testRuntime libraries.derby
  testRuntime libraries.h2
  testRuntime libraries.mysql_connector
  testRuntime libraries.postgres
  testRuntime libraries.sqlite

}
/*
 * Copyright (c) 2012, Niclas Hedhman. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *
 *     You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

description = "Qi4j Metrics Extension"

jar { manifest { name = "Qi4j Extension - Metrics" }}

dependencies {

  compile project(":org.qi4j.core:org.qi4j.core.bootstrap")
  compile libraries.yammer_metrics

  testCompile project( ":org.qi4j.core:org.qi4j.core.testsupport" )

  testRuntime project( ":org.qi4j.core:org.qi4j.core.runtime" )
  testRuntime libraries.logback

}
description = "Qi4j Migration Extension"

jar { manifest { name = "Qi4j Extension - Migration" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.spi"))

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}
jar { manifest { description = "Qi4j Reindexer Extension" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.spi"))

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))
  testCompile(project(':org.qi4j.extensions:org.qi4j.extension.entitystore-jdbm'))
  testCompile(project(':org.qi4j.extensions:org.qi4j.extension.indexing-rdf'))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}description = "Qi4j Jackson ValueSerialization Extension"

jar { manifest { name = "Qi4j Extension - ValueSerialization - Jackson" } }

dependencies {

    compile project(":org.qi4j.core:org.qi4j.core.bootstrap")
    compile 'org.codehaus.jackson:jackson-core-asl:1.9.11'
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.11'

    testCompile project(":org.qi4j.core:org.qi4j.core.testsupport")

    testRuntime project(":org.qi4j.core:org.qi4j.core.runtime")
    testRuntime libraries.logback

}

description = "Qi4j org.json ValueSerialization Extension"

jar { manifest { name = "Qi4j Extension - ValueSerialization - org.json" } }

dependencies {

    compile project(":org.qi4j.core:org.qi4j.core.bootstrap")

    testCompile project(":org.qi4j.core:org.qi4j.core.testsupport")

    testRuntime project(":org.qi4j.core:org.qi4j.core.runtime")
    testRuntime libraries.logback

}

description = "Qi4j StaX ValueSerialization Extension"

jar { manifest { name = "Qi4j Extension - ValueSerialization - StaX" } }

dependencies {

    compile project(":org.qi4j.core:org.qi4j.core.bootstrap")
    compile libraries.commons_lang

    testCompile project(":org.qi4j.core:org.qi4j.core.testsupport")

    testRuntime project(":org.qi4j.core:org.qi4j.core.runtime")
    testRuntime libraries.logback

}

description = "Qi4j Alarm Library provides industrial automation style alarm point workflow semantics."

jar { manifest { name = "Qi4j Library - Alarm - APi" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}description = "Qi4j Cache Library provides caching framework for methods."

jar { manifest { name = "Qi4j Library - Cache" }}

dependencies {
  compile( project(":org.qi4j.core:org.qi4j.core.api") )
  compile( project(':org.qi4j.libraries:org.qi4j.library.jmx' ) )

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}description = "Qi4j Circuit Breaker Library provides a framework for connecting external resources, so that they can be disabled during re-play of events."

jar { manifest {name = "Qi4j Library - Circuit Breaker"}}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.api"))
  compile( project(':org.qi4j.libraries:org.qi4j.library.jmx' ) )

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}

task(runSample, dependsOn: 'testClasses', type: JavaExec) {
    main = 'org.qi4j.library.circuitbreaker.jmx.CircuitBreakerManagementTest'
    classpath = sourceSets.test.runtimeClasspath
}

description = "Qi4j Constraint Library provides common set of constraints."

jar { manifest { name = "Qi4j Library - Constraints"}}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}description = "Qi4j Values Library has various generic services to manipulate Qi4j ValueComposites, such as converting an Entity to a Value."

jar { manifest { name = "Qi4j Library - Values" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.spi"))

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}description = "Qi4j CXF Library integrates Apache CXF with Qi4j."

jar { manifest { name = "Qi4j Library - CXF" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
  compile(libraries.cxf_api)
  compile(libraries.cxf_util)
  compile(libraries.cxf_rt_core)
  compile(libraries.cxf_rt_soap)
  compile(libraries.cxf_rt_jaxws)
  compile(libraries.cxf_rt_aegis)
  compile(libraries.cxf_rt_local)
  compile(libraries.wsdl4j)
  compile(libraries.woodstox)
//  compile('org.apache.ws.commons.schema:XmlSchema:' + xmlSchemaVersion)

  runtime(libraries.cxf_rt_http)
  runtime(libraries.cxf_rt_http_jetty)

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))
  testCompile(libraries.http_client)
  testCompile(libraries.xmlunit)

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}
description = "Extension to the Qi4j Event Sourcing Library for providing a JDBM based event store."

jar { manifest { name = "Qi4j Library - Event Sourcing - JDBM" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
  compile(project(":org.qi4j.libraries:org.qi4j.library.eventsourcing"))
  compile(project(":org.qi4j.libraries:org.qi4j.library.fileconfig"))
  compile(libraries.jdbm)

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))
  testCompile project( ':org.qi4j.extensions:org.qi4j.extension.valueserialization-orgjson' )

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}description = "Qi4j Event Sourcing Library for Restful applications."

jar { manifest { name = "Qi4j Library - Event Sourcing - Rest" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
  compile(project(":org.qi4j.libraries:org.qi4j.library.eventsourcing"))
  compile(libraries.restlet)

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}description = "Qi4j Event Sourcing Library."

jar { manifest { name = "Qi4j Library - Event Sourcing" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}description = "Qi4j File Configuration Library provides platform specific file locations."

jar { manifest { name = "Qi4j Library - FileConfig" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}description = "Qi4j Http Library provides embedded Jetty for Qi4j application use."

jar { manifest { name = "Qi4j Library - Http" }}

test {
  systemProperties 'networkaddress.cache.ttl': '0'
  systemProperties 'sun.net.spi.nameservice.provider.1': 'dns,LocalManagedDns'
}

dependencies {

  compile( project( ":org.qi4j.core:org.qi4j.core.api" ) )
  compile( project( ":org.qi4j.libraries:org.qi4j.library.constraints" ) )
  compile( project( ":org.qi4j.libraries:org.qi4j.library.jmx" ) )
  compile( libraries.bouncy_castle )
  compile( libraries.jetty_webapp )
  compile( libraries.jetty_jmx )

  testCompile( project( ":org.qi4j.core:org.qi4j.core.testsupport" ) )
  testCompile( libraries.http_client )
  testCompile( libraries.dnsjava )

  testRuntime( project( ":org.qi4j.core:org.qi4j.core.runtime" ) )
  testRuntime( libraries.logback )

}
description = "Qi4j JMX Library provides Java Management Extension (JMX) integration for Qi4j applications."

jar { manifest { name = "Qi4j Library - JMX" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}

task(runSample, dependsOn: 'testClasses', type: JavaExec) {
    main = 'org.qi4j.library.jmx.JMXTest'
    classpath = sourceSets.test.runtimeClasspath
}

description = "Qi4j BeanShell Library allows for Mixins to be implemented in BeanShell (Java) scripts instead of directly in compiled Java."

jar { manifest { name = "Qi4j Library - Scripting - BeanShell" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
  compile( project( ':org.qi4j.libraries:org.qi4j.library.scripting' ))
  compile(libraries.beanshell)

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}
description = "Qi4j Groovy Library allows for Mixins to be implemented in Groovy scripts instead of directly in compiled Java."

jar { manifest { name = "Qi4j Library - Scripting - Groovy" }}


dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
  compile(libraries.groovy)

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}description = "Qi4j JavaScript Library allows for Mixins to be implemented in JavaScript instead of directly in compiled Java."

jar { manifest { name = "Qi4j Library - Scripting - JavaScript" }}


dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
  compile( project( ':org.qi4j.libraries:org.qi4j.library.scripting' ))
  compile(libraries.javascript)

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}
description = "Qi4j JRuby Library allows for Mixins to be implemented in JRuby scripts instead of directly in compiled Java."

jar { manifest { name = "Qi4j Library - Scripting - JRuby" }}


dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
  compile( project( ':org.qi4j.libraries:org.qi4j.library.scripting' ))
  compile(libraries.jruby)

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}
description = "Qi4j BeanShell Library allows for Mixins to be implemented in BeanShell (Java) scripts instead of directly in compiled Java."

jar { manifest { name = "Qi4j Library - Scripting - BeanShell" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
  compile(libraries.scala)

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))
  testCompile(project(":org.qi4j.extensions:org.qi4j.extension.indexing-rdf"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}
description = "Qi4j Locking Library provides lock management for methods."

jar { manifest { name = "Qi4j Library - Locking" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.api"))

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}description = "Qi4j Logging Library provides an advanced logging framework which separates trace, debug and log systems."

jar { manifest { name = "Qi4j Library - Logging" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
  compile( project( ':org.qi4j.libraries:org.qi4j.library.constraints' ))

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))
  testCompile(project(":org.qi4j.extensions:org.qi4j.extension.indexing-rdf"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}/*
 * Copyright (c) 2012, Niclas Hedhman. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *
 *     You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

description = "Qi4j Locking Library provides lock management for methods."

jar { manifest { name = "Qi4j Library - Locking" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))
  testCompile(project(":org.qi4j.extensions:org.qi4j.extension.metrics-yammer"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}
description = "Qi4j Neo4j Library provides a service wrapper for the Neo4j Graph Database"

jar { manifest { name = "Qi4j Library - Neo4j" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.spi"))
  compile(project(":org.qi4j.libraries:org.qi4j.library.fileconfig"))
  compile(libraries.neo4j)

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}description = "Qi4j OSGi Library provides integration of OSGi and Qi4j, so that services in each system can be shared."

jar { manifest { name = "Qi4j Library - OSGi Integration" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.api"))
  compile(libraries.osgi_core)
  compile(libraries.osgi_compendium)

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))
  testCompile(libraries.mockito)

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}description = "Qi4j RDF Library provides commonalities of various RDF based services in Qi4j, such as RDF Indexing."

jar { manifest { name = "Qi4j Library - RDF" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.spi"))
  compile(project(':org.qi4j.libraries:org.qi4j.library.constraints'))
  compile(project(":org.qi4j.libraries:org.qi4j.library.fileconfig"))
  compile(libraries.sesame)
//  compile("org.openrdf.sesame:sesame-model:$rdfVersion")
//  compile("org.openrdf.sesame:sesame-repository-dataset:$rdfVersion")
//  compile("org.openrdf.sesame:sesame-repository-http:$rdfVersion")
//  compile("org.openrdf.sesame:sesame-rio-n3:$rdfVersion")
//  compile("org.openrdf.sesame:sesame-rio-rdfxml:$rdfVersion")
//  compile("org.openrdf.sesame:sesame-sail-memory:$rdfVersion")
//  compile("org.openrdf.sesame:sesame-sail-nativerdf:$rdfVersion")
//  compile("org.openrdf.sesame:sesame-sail-rdbms:$rdfVersion")

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))
  testCompile project( ':org.qi4j.extensions:org.qi4j.extension.valueserialization-orgjson' )

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}description = "Qi4j REST Client Library provides a client library for the Qi4j REST Server library"

jar { manifest { name = "Qi4j Library - REST Client" }}

dependencies {

    compile project( ":org.qi4j.core:org.qi4j.core.api" )
    compile project( ":org.qi4j.libraries:org.qi4j.library.rest-common" )
    compile libraries.restlet

    testCompile project( ":org.qi4j.core:org.qi4j.core.testsupport" )
    testCompile project( ":org.qi4j.libraries:org.qi4j.library.rest-server" )
    testCompile project( ':org.qi4j.extensions:org.qi4j.extension.valueserialization-orgjson' )

    testRuntime project( ":org.qi4j.core:org.qi4j.core.runtime" )
    testRuntime libraries.logback

}
description = "Qi4j REST Library provides various Restlet resources that can be used to expose Qi4j entities and indexes. Mostly for debugging."

jar { manifest { name = "Qi4j Library - REST" }}

dependencies {
  compile(project(":org.qi4j.libraries:org.qi4j.library.rdf"))
//    compile(project(":org.qi4j.libraries:org.qi4j.library.rest-common"))
  compile(project(':org.qi4j.extensions:org.qi4j.extension.indexing-rdf'))
  compile(libraries.restlet)
  compile(libraries.velocity)
  compile(libraries.servlet_api)
//  compile('org.openrdf.sesame:sesame-queryresultio-sparqlxml:' + rdfVersion)
//  compile('org.openrdf.sesame:sesame-queryresultio-sparqljson:' + rdfVersion)

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))
  testCompile(project(":org.qi4j.libraries:org.qi4j.library.http"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}
description = "Qi4j REST Server Library provides a server component for building REST API's based on usecases"

jar { manifest { name = "Qi4j Library - REST server" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.api"))
  compile(project(":org.qi4j.libraries:org.qi4j.library.rest-common"))
  compile(libraries.servlet_api)
  compile(libraries.velocity)
  compile(libraries.restlet)
  compile(libraries.freemarker)

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}
description = "Qi4j REST Library provides various Restlet resources that can be used to expose Qi4j entities and indexes. Mostly for debugging."

jar { manifest { name = "Qi4j Library - REST" }}

dependencies {

    compile project( ":org.qi4j.core:org.qi4j.core.api" )
    compile project( ":org.qi4j.libraries:org.qi4j.library.rdf" )
    compile project( ':org.qi4j.extensions:org.qi4j.extension.indexing-rdf' )
    compile libraries.restlet
    compile libraries.sparql
    compile libraries.velocity
    compile libraries.servlet_api

    testCompile project( ":org.qi4j.core:org.qi4j.core.testsupport" )
    testCompile project( ":org.qi4j.libraries:org.qi4j.library.http" )
    testCompile project( ':org.qi4j.extensions:org.qi4j.extension.valueserialization-orgjson' )
    testCompile libraries.http_client

    testRuntime project( ":org.qi4j.core:org.qi4j.core.runtime" )
    testRuntime libraries.logback

}
description = "Qi4j Schduler Library for long term timing functionalities."

jar { manifest { name = "Qi4j Library - Scheduler" }}


dependencies {
  compile( project( ":org.qi4j.core:org.qi4j.core.bootstrap" ) )
  compile( project( ':org.qi4j.libraries:org.qi4j.library.constraints' ) )
  compile( libraries.sked )

  testCompile( project( ":org.qi4j.core:org.qi4j.core.testsupport" ) )
  testCompile( project( ":org.qi4j.extensions:org.qi4j.extension.indexing-rdf" ) )

  testRuntime( project( ":org.qi4j.core:org.qi4j.core.runtime" ) )
  testRuntime( libraries.logback )
}description = "Qi4j Common Scripting Library contains common classes across scripting implementations."

jar { manifest { name = "Qi4j Library - Scripting - Common" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.api"))
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
  compile(libraries.slf4j_api)
  testCompile(libraries.junit)
  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))
  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.asm)
  testRuntime(libraries.asm_commons)
  testRuntime(libraries.slf4j_simple)
}description = "Qi4j Servlet Library provides integration of Qi4j into web applications."

jar { manifest { name = "Qi4j Library - Servlet" }}

dependencies {
  compile( project(":org.qi4j.core:org.qi4j.core.bootstrap") )
  compile( libraries.servlet_api )

  testCompile( project(":org.qi4j.core:org.qi4j.core.testsupport") )
  testCompile( libraries.jetty_webapp )
  testCompile( libraries.http_client )

  testRuntime( project(":org.qi4j.core:org.qi4j.core.runtime") )
  testRuntime(libraries.logback )
}
description = "Qi4j Shiro Library integrates Apache Shiro security framework into Qi4j."

jar { manifest { name = "Qi4j Library - Shiro Core" }}

dependencies {

  compile project( ":org.qi4j.core:org.qi4j.core.bootstrap" )
  compile libraries.shiro
  compile libraries.bouncy_castle

  testCompile project( ":org.qi4j.core:org.qi4j.core.testsupport" )
  testCompile project( ":org.qi4j.libraries:org.qi4j.library.shiro-web" )
  testCompile project( ":org.qi4j.libraries:org.qi4j.library.servlet" )
  testCompile project( ":org.qi4j.extensions:org.qi4j.extension.indexing-rdf" )
  testCompile libraries.jetty_webapp
  testCompile libraries.http_client

  testRuntime project( ":org.qi4j.core:org.qi4j.core.runtime" )
  testRuntime libraries.logback

}
description = "Qi4j Shiro Library integrates Apache Shiro security framework into Qi4j. This bundle provides Servlet support."

jar { manifest { name = "Qi4j Library - Shiro Web" }}

dependencies {

  compile project( ":org.qi4j.core:org.qi4j.core.bootstrap" )
  compile project( ':org.qi4j.libraries:org.qi4j.library.shiro-core' )
  compile project( ':org.qi4j.libraries:org.qi4j.library.servlet' )
  compile project( ':org.qi4j.libraries:org.qi4j.library.http' )
  compile libraries.shiro_web
  compile libraries.servlet_api

  testCompile project( ":org.qi4j.core:org.qi4j.core.testsupport" )
  testCompile project( ":org.qi4j.libraries:org.qi4j.library.shiro-web" )
  testCompile project( ":org.qi4j.libraries:org.qi4j.library.servlet" )
  testCompile project( ":org.qi4j.extensions:org.qi4j.extension.indexing-rdf" )
  testCompile libraries.jetty_webapp
  testCompile libraries.http_client

  testRuntime project( ":org.qi4j.core:org.qi4j.core.runtime" )
  testRuntime libraries.logback
}
description = "Qi4j Spring Library allows for tight integration of Spring Framework and Qi4j applications."

jar { manifest { name = "Qi4j Library - Spring" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
  compile(libraries.spring_core)

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))
  testCompile(libraries.spring_testsupport)

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}description = "Qi4j SQL BoneCP Library provides BoneCP support."

jar { manifest { name = "Qi4j Library - SQL BoneCP" }}

dependencies {
  compile(project(":org.qi4j.libraries:org.qi4j.library.sql"))
  compile(libraries.bonecp)
}

description = "Qi4j SQL C3P0 Library provides C3P0 support."

jar { manifest { name = "Qi4j Library - SQL C3P0" }}

dependencies {
  compile(project(":org.qi4j.libraries:org.qi4j.library.sql"))
  compile(libraries.c3p0)
}

description = "Qi4j SQL DBCP Library provides DBCP support."

jar { manifest { name = "Qi4j Library - SQL DBCP" }}

dependencies {
  compile(project(":org.qi4j.libraries:org.qi4j.library.sql"))
  compile(libraries.commons_dbcp)
}

description = "Qi4j SQL Liquibase Library provides Liquibase support."

jar { manifest { name = "Qi4j Library - SQL Liquibase" }}

dependencies {
  compile(project(":org.qi4j.libraries:org.qi4j.library.sql"))
  compile(libraries.liquibase)

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))
  testCompile(project(":org.qi4j.libraries:org.qi4j.library.sql-c3p0"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.derby)
  testRuntime(libraries.logback)
}

description = "Qi4j SQL Library provides SQL support."

jar { manifest { name = "Qi4j Library - SQL" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
  compile(project(":org.qi4j.libraries:org.qi4j.library.circuitbreaker"))
  compile(project(":org.qi4j.libraries:org.qi4j.library.conversion"))
  compile(project(":org.qi4j.libraries:org.qi4j.library.jmx"))

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))
  testCompile(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testCompile(project(":org.qi4j.libraries:org.qi4j.library.sql-bonecp"))
  testCompile(project(":org.qi4j.libraries:org.qi4j.library.sql-c3p0"))
  testCompile(project(":org.qi4j.libraries:org.qi4j.library.sql-dbcp"))
  testCompile(project(":org.qi4j.libraries:org.qi4j.library.sql-liquibase"))
  testCompile(project(":org.qi4j.extensions:org.qi4j.extension.entitystore-preferences"))
  
  testRuntime(libraries.derby)
  testRuntime(libraries.mysql_connector)
  testRuntime(libraries.postgres)
  testRuntime(libraries.logback)
}
description = "Qi4j Struts Library allows integration of Qi4j into Struts2 applications."

jar { manifest { name = "Qi4j Library - Struts2 - Code Behind"}}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
  compile( project( ':org.qi4j.libraries:org.qi4j.library.struts2-plugin' ) )
  compile(libraries.struts_codebehind)

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}description = "Qi4j Struts Library allows integration of Qi4j into Struts2 applications."

jar { manifest { name = "Qi4j Library - Struts2 - Convention" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
  compile( project( ':org.qi4j.libraries:org.qi4j.library.struts2-plugin' ) )
  compile(libraries.struts_convention)

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}description = "Qi4j Struts Library allows integration of Qi4j into Struts2 applications."

jar { manifest { name = "Qi4j Library - Struts2" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
  compile(libraries.struts_core)
  compile(libraries.freemarker)
  compile(libraries.servlet_api)

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}description = "Qi4j UID Library contains various Identity generation services."

jar { manifest { name = "Qi4j Library - UID" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}description = "Qi4j UoWFile Library provides file operations binding to UoWs."

jar { manifest { name = "Qi4j Library - UoWFile" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
  compile(project(":org.qi4j.libraries:org.qi4j.library.fileconfig"))

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}
description = "Qi4j Manuals and Website."

dependencies {
  compile( project( ":org.qi4j.core:org.qi4j.core.bootstrap" ) )
  compile( project( ":org.qi4j.libraries:org.qi4j.library.constraints" ) )
  compile( project( ":org.qi4j.libraries:org.qi4j.library.logging" ) )
  runtime( project( ":org.qi4j.core:org.qi4j.core.runtime" ) )
  runtime( libraries.logback )
}


//task userguide( type: org.qi4j.gradle.plugin.documentation.Documentation ) {
//  docName = 'userguide'
//  docType = 'book'
//}
//
//task recipes( type: org.qi4j.gradle.plugin.documentation.Documentation ) {
//  docName = 'recipes'
//  docType = 'article'
//}
//
//task referenceManual( type: org.qi4j.gradle.plugin.documentation.Documentation ) {
//  docName = 'reference'
//  docType = 'book'
//}


task website( type: org.qi4j.gradle.plugin.Documentation,
              dependsOn: rootProject.allprojects.tasks.flatten().findAll { it.name == AsciidocBuildInfo.TASK_NAME } ) {
  docName = 'website'
  docType = 'article'
}

task archiveWebsite( type: Copy ) {
  dependsOn website
  if( rootProject.version == '0' || rootProject.version.contains( "SNAPSHOT" ) )
  {
    into( "$rootProject.projectDir/../qi4j.github.com/develop" )
  }
  else
  {
    into( "$rootProject.projectDir/../qi4j.github.com/$version" )
  }
  from( 'build/docs/website/' )
}

task copyWebsite( type: Copy ) {
  dependsOn archiveWebsite
  if( rootProject.version != '0' && !rootProject.version.contains( "SNAPSHOT" ) )
  {
    from( "$rootProject.projectDir/../qi4j.github.com/$version/" )
    into( "$rootProject.projectDir/../qi4j.github.com/latest/" )
  }
}

task manuals() {
  dependsOn copyWebsite
//  dependsOn userguide
//  dependsOn referenceManual
//  dependsOn recipes
}

description = "Sample of how DCI (Data, Context & Interaction) pattern is implemented with Qi4j, for Eric Evans DDD sample."

jar { manifest { name = "Qi4j Sample - DCI Cargo" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
  compile(project(":org.qi4j.libraries:org.qi4j.library.constraints"))
  compile(libraries.wicket)
  compile(libraries.wicket_devutils)

  provided(libraries.servlet_api)

  runtime(project(":org.qi4j.core:org.qi4j.core.runtime"))

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))
  testCompile(libraries.easymock)

  testRuntime(libraries.logback)
}
description = "Sample of how DCI (Data, Context & Interaction) pattern is implemented with Qi4j, for Eric Evans DDD sample."

jar { manifest { name = "Qi4j Sample DCI Cargo - Sample A" }}

dependencies {

  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
  compile(project(":org.qi4j.libraries:org.qi4j.library.constraints"))
  compile(project(":org.qi4j.libraries:org.qi4j.library.conversion"))
  compile(project(":org.qi4j.libraries:org.qi4j.library.rdf"))
  compile project( ':org.qi4j.extensions:org.qi4j.extension.valueserialization-orgjson' )
  compile(project(":org.qi4j.extensions:org.qi4j.extension.indexing-rdf"))
  compile(project(":org.qi4j.tools:org.qi4j.tool.envisage"))
  compile(libraries.jetty_webapp)
  compile(libraries.wicket)
  compile(libraries.wicket_devutils)
  compile(libraries.wicket_stateless)

  runtime(project(":org.qi4j.core:org.qi4j.core.runtime"))

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))
  testCompile(libraries.easymock)

  testRuntime(libraries.logback)

}
description = "Sample of how DCI (Data, Context & Interaction) pattern is implemented with Qi4j, for Eric Evans DDD sample."

jar { manifest { name = "Qi4j Sample DCI Cargo - Sample B" }}

dependencies {

  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
  compile(project(":org.qi4j.libraries:org.qi4j.library.constraints"))
  compile(project(":org.qi4j.libraries:org.qi4j.library.conversion"))
  compile(project(":org.qi4j.libraries:org.qi4j.library.rdf"))
  compile project( ':org.qi4j.extensions:org.qi4j.extension.valueserialization-orgjson' )
  compile(project(":org.qi4j.extensions:org.qi4j.extension.indexing-rdf"))
  compile(project(":org.qi4j.tools:org.qi4j.tool.envisage"))
  compile(libraries.jetty_webapp)
  compile(libraries.wicket)
  compile(libraries.wicket_devutils)
  compile(libraries.wicket_stateless)

  runtime(project(":org.qi4j.core:org.qi4j.core.runtime"))

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))
  testCompile(libraries.easymock)

  testRuntime(libraries.logback)

}

description = "Sample of how DCI (Data, Context & Interaction) pattern is implemented with Qi4j."

jar { manifest { name = "Qi4j Sample - DCI" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
  compile(project(":org.qi4j.core:org.qi4j.core.runtime"))  /* TODO: Get rid of this dependency */
  compile(project(":org.qi4j.libraries:org.qi4j.library.constraints"))

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))
  testCompile(libraries.easymock)

  testRuntime(libraries.logback)
}description = "Sample of how to build a web forum"

jar { manifest { name = "Qi4j Sample - Forum" }}

dependencies {

  compile project( ":org.qi4j.core:org.qi4j.core.bootstrap" )
  compile project( ":org.qi4j.libraries:org.qi4j.library.rest-server" )
  compile project( ":org.qi4j.libraries:org.qi4j.library.fileconfig" )
  compile project( ":org.qi4j.extensions:org.qi4j.extension.entitystore-neo4j" )
  compile libraries.servlet_api

  testCompile project( ":org.qi4j.core:org.qi4j.core.testsupport" )

  testRuntime project( ":org.qi4j.core:org.qi4j.core.runtime" )
  testRuntime libraries.logback

}

task(runSample, dependsOn: 'testClasses', type: JavaExec) {
    main = 'org.qi4j.samples.forum.web.Main'
    classpath = sourceSets.test.runtimeClasspath
}
description = "Sample of implementation of a Car Rental application."

apply plugin: 'war'
apply plugin: 'jetty'

// To run in an embedded Jetty use:
//      ../../gradlew jettyRun
// And then go to:
//      http://localhost:8080/org.qi4j.sample.rental/rental/main

jar { manifest { name = "Qi4j Sample - Car Rental" }}

dependencies {

  compile project( ":org.qi4j.core:org.qi4j.core.bootstrap" )

  providedCompile libraries.servlet_api

  runtime project( ":org.qi4j.core:org.qi4j.core.runtime" )

}
description = "SQL Support Sample."

jar { manifest { name = "Qi4j Sample - SQL Support" }}

dependencies {

    compile project( ":org.qi4j.core:org.qi4j.core.bootstrap" )
    compile project( ":org.qi4j.libraries:org.qi4j.library.sql-dbcp" )
    compile project( ":org.qi4j.extensions:org.qi4j.extension.entitystore-preferences" )
    compile project( ":org.qi4j.extensions:org.qi4j.extension.entitystore-sql" )
    compile project( ":org.qi4j.extensions:org.qi4j.extension.indexing-sql" )

    runtime project(":org.qi4j.core:org.qi4j.core.runtime")
    runtime libraries.postgres
    runtime libraries.logback

}

task( runSample, dependsOn: 'classes', type: JavaExec ) {
    main = 'org.qi4j.sample.sqlsupport.Main'
    classpath = sourceSets.main.runtimeClasspath
}
description = "Sample of how to use the Struts2 integration."

jar { manifest { name = "Qi4j Sample - Struts2" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
  compile(project(":org.qi4j.libraries:org.qi4j.library.struts2-plugin"))
  compile(project(":org.qi4j.libraries:org.qi4j.library.struts2-codebehind"))
  compile(project(":org.qi4j.extensions:org.qi4j.extension.indexing-rdf"))
  compile(project(":org.qi4j.libraries:org.qi4j.library.constraints"))
  compile(project(":org.qi4j.libraries:org.qi4j.library.rdf"))
  compile(libraries.jetty_webapp)

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}
description = "Sample of how to use the Struts2 integration."

jar { manifest { name = "Qi4j Sample - Swing Bindings" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
}description = "Tests for Qi4j Google AppEngine Extension."

jar { manifest { name = "Qi4j Tests - Google App Engine EntityStore" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.api"))
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
  compile(project(":org.qi4j.extensions:org.qi4j.extension.entitystore-gae"))
  compile(libraries.servlet_api)
  compile(libraries.slf4j_api)
  compile(libraries.junit)
  testRuntime(libraries.asm)
  testRuntime(libraries.asm_commons)
  testRuntime(libraries.slf4j_simple)
  compile(project(":org.qi4j.core:org.qi4j.core.testsupport"))
  testRuntime(project(":org.qi4j.core:org.qi4j.core.spi"))
  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
}description = "Qi4j Performance Test Suite for Entity Stores."

jar { manifest { name = "Qi4j Performance Test - EntityStores" }}

dependencies {

    compile project( ":org.qi4j.core:org.qi4j.core.testsupport" )
    compile project( ":org.qi4j.libraries:org.qi4j.library.sql-dbcp" )
    compile project( ':org.qi4j.extensions:org.qi4j.extension.valueserialization-orgjson' )
    compile project( ":org.qi4j.extensions:org.qi4j.extension.entitystore-jdbm" )
    compile project( ":org.qi4j.extensions:org.qi4j.extension.entitystore-sql" )
    compile project( ":org.qi4j.extensions:org.qi4j.extension.cache-ehcache" )
    compile project( ":org.qi4j.extensions:org.qi4j.extension.indexing-rdf" )
    compile libraries.derby

    runtime project(":org.qi4j.core:org.qi4j.core.runtime")
    runtime libraries.logback

}
description = "Qi4j Performance Test Suite for Indexing."

jar { manifest { name = "Qi4j Performance Test - Indexing" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.api"))
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
  compile(libraries.slf4j_api)
  compile(libraries.junit)
  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))
  testCompile(project(":org.qi4j.extensions:org.qi4j.extension.entitystore-jdbm"))
  testCompile(project(":org.qi4j.extensions:org.qi4j.extension.entitystore-sql"))
  testCompile("org.apache.derby:derby:$derbyVersion")
  testRuntime(libraries.asm)
  testRuntime(libraries.asm_commons)
  testRuntime(libraries.slf4j_simple)
  testRuntime(project(":org.qi4j.core:org.qi4j.core.spi"))
  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
}description = "Qi4j Regression Tests are added by community members who find bugs and typically reported via Jira issues. These tests are not run as part of the normal build, but is accessible from './gradlew regression' to allow builds to still work."

jar { manifest { name = "Qi4j Tests - Regression" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.api"))
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
  compile(libraries.slf4j_api)
  compile(libraries.junit)
  runtime(libraries.asm)
  runtime(libraries.asm_commons)
  runtime(libraries.slf4j_simple)
  compile(project(":org.qi4j.core:org.qi4j.core.testsupport"))
  compile(project(":org.qi4j.libraries:org.qi4j.library.logging"))
  compile(project(":org.qi4j.extensions:org.qi4j.extension.indexing-rdf"))
  compile(project(":org.qi4j.extensions:org.qi4j.extension.entitystore-jdbm"))
  runtime(project(":org.qi4j.core:org.qi4j.core.spi"))
  runtime(project(":org.qi4j.core:org.qi4j.core.runtime"))
}description = "A viewer of entities in the Entity Stores."

jar { manifest { name = "Qi4j Entity Viewer" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
  compile(project(":org.qi4j.tools:org.qi4j.tool.model-detail"))

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))
  testCompile(project(":org.qi4j.extensions:org.qi4j.extension.indexing-rdf"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}

task(runSample, dependsOn: 'testClasses', type: JavaExec) {
    main = 'org.qi4j.swing.library.swing.entityviewer.sample.ApplicationSample'
    classpath = sourceSets.test.runtimeClasspath
}
description = "Visualizer of a Qi4j Application Structure."

jar { manifest { name = "Qi4j Envisage" }}

dependencies {

  compile project( ":org.qi4j.core:org.qi4j.core.bootstrap" )
  compile project( ":org.qi4j.tools:org.qi4j.tool.model-detail" )
  compile libraries.jgoodies_looks
  compile libraries.pdfbox
  compile libraries.prefuse

  testCompile project( ":org.qi4j.core:org.qi4j.core.testsupport" )
  testCompile project( ":org.qi4j.extensions:org.qi4j.extension.indexing-rdf" )

  testRuntime project( ":org.qi4j.core:org.qi4j.core.runtime" )
  testRuntime libraries.logback

}

task(runSample, dependsOn: 'testClasses', type: JavaExec) {
    main = 'org.qi4j.envisage.sample.EnvisageSample'
    classpath = sourceSets.test.runtimeClasspath
}

task(runSchool, dependsOn: 'testClasses', type: JavaExec) {
    main = 'org.qi4j.envisage.school.EnvisageSchoolSample'
    classpath = sourceSets.test.runtimeClasspath
}
description = "Detailled Model of a Qi4j Application Structure."

jar { manifest { name = "Qi4j Model Detail" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))
  testCompile(project(":org.qi4j.extensions:org.qi4j.extension.indexing-rdf"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}

description = "IntelliJ IDEA Plugin for Qi4j development."

jar { manifest { name = "Qi4j IDEA plugin" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}description = "Tutorial on how to convert existing application into a Qi4j one, step-by-step."

jar { manifest { name = "Qi4j Tutorial - Cargo" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
  compile(project(":org.qi4j.core:org.qi4j.core.runtime"))  // TODO: Get rid of this dependency

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))
  testCompile(libraries.easymock)
  testRuntime(libraries.logback)
}description = "Basic tutorial on how to covert a simple 'Hello World' application to Qi4j, using more and more features for each step."

jar { manifest { name = "Qi4j Tutorial - Composites" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
  compile(project(":org.qi4j.libraries:org.qi4j.library.constraints"))
  compile(project(":org.qi4j.libraries:org.qi4j.library.rdf"))
  compile(project(":org.qi4j.libraries:org.qi4j.library.lang-jruby"))

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))
  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}
/*
 * Copyright (c) 2012, Niclas Hedhman. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *
 *     You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

description = "Basic tutorial on how to covert a simple 'Hello World' application to Qi4j, using more and more features for each step."

jar { manifest { name = "Qi4j Tutorial - Composites" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
  compile(project(":org.qi4j.libraries:org.qi4j.library.constraints"))

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}description = "An Introduction to Qi4j in its simplest form."

jar { manifest { name = "Qi4j Tutorial - Introduction" }}

dependencies {
    compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))

    testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))

    testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
    testRuntime(libraries.logback)
}description = "A 10-minute Introduction Tutorial to Qi4j in its simplest form."

jar { manifest { name = "Qi4j Tutorial - 10 minute Introduction" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))
  
  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}description = "A 30-minute Introduction Tutorial to Qi4j in its simplest form."

jar { manifest { name = "Qi4j Tutorial - 30 minute Introduction" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))
  compile(project(":org.qi4j.tutorials:org.qi4j.tutorial.introduction:org.qi4j.tutorial.introduction.tenminutes"))

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))
  
  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}description = "A 2-minute Introduction Tutorial to Qi4j in its simplest form."

jar { manifest { name = "Qi4j Tutorial - 2 minute Introduction" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))

  runtime(project(":org.qi4j.core:org.qi4j.core.runtime"))

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))

  testRuntime(libraries.logback)
}description = "Tutorial on how to use Qi4j service concept."

jar { manifest { name = "Qi4j Tutorial - Services" }}

dependencies {
  compile(project(":org.qi4j.core:org.qi4j.core.bootstrap"))

  testCompile(project(":org.qi4j.core:org.qi4j.core.testsupport"))

  testRuntime(project(":org.qi4j.core:org.qi4j.core.runtime"))
  testRuntime(libraries.logback)
}