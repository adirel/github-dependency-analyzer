<?xml version="1.0" encoding="utf-8"?>
<!--
** This is a template build file for a JOSM  plugin.
**
** Maintaining versions
** ====================
** See README.template
**
** Usage
** =====
** Call "ant help" to get possible build targets.
**
-->
<project name="sumoconvert" default="dist" basedir=".">

    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Commit message"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="4394"/>

    <!-- Configure these properties (replace "..." accordingly).



         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Ignacio Palermo - Julio Rivera"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.sumoconvert.SumoConvertPlugin"/>
    <property name="plugin.description" value="Allows to edit traffic information and export it to the urban mobility simulator SUMO"/>
    <property name="plugin.icon" value="images/dialogs/logo-sumo.png"/>
    <!-- <property name="plugin.link" value="..."/>-->
    <!--<property name="plugin.early" value="..."/>-->
    <!--<property name="plugin.requires" value="..."/>-->
    <!--<property name="plugin.stage" value="..."/>-->
    
	<property name="josm" location="../../core/dist/josm-custom.jar"/>
	<property name="plugin.dist.dir" value="../../dist"/>
	
    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
  
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="ColumbusCSV" default="dist" basedir=".">
	<!-- enter the SVN commit message -->
	<property name="commit.message" value="Commit message"/>
    <!-- Enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>
	
	<!-- Plugin meta data -->
    <property name="plugin.author" value="Oliver Wieland"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.columbusCSV.ColumbusCSVPlugin"/>
    <property name="plugin.description" value="Imports proprietary CSV files of the Columbus/Visiontac V-900 GPS logger into a GPX layer."/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/ColumbusCSV"/>
	<!-- Plugin icon -->
    <property name="plugin.icon" value="images/colcsvicon.png"/>
	
	<!-- Plugin version info -->
	<property name="plugin.version" value="${version.entry.commit.revision}"/>
	<property name="plugin.stage" value="60"/>
    
    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>	
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="CommandLine" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="JOSM/CommandLine: fix exception after JOSM update"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6906"/>

    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Hind"/>
    <property name="plugin.class" value="CommandLine.CommandLine"/>
    <property name="plugin.description" value="Implements a command line and enables to create your commands. See link for standard commands (arc, circle etc.)"/>
    <property name="plugin.icon" value="images/commandline.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/CommandLine"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>

</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="Create_grid_of_ways" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Changed constructor signature, updated build.xml"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>

    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Jorge Luis Chamorro"/>
    <property name="plugin.class" value="CreateGridOfWaysPlugin.CreateGridOfWaysPlugin"/>
    <property name="plugin.description" value="Create a grid of ways."/>
    <property name="plugin.icon" value="images/creategridofways.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/Create_grid_of_ways"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="DirectDownload" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Commit message"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6421"/>

    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Hartmut Holzgraefe"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.directdownload.DirectDownload"/>
    <property name="plugin.description" value="Download your GPX tracks from openstreetmap.org"/>
    <property name="plugin.icon" value="images/DownloadAction.png"/>
    <!-- <property name="plugin.link" value="..."/>-->
    <!--<property name="plugin.early" value="..."/>-->
    <!--<property name="plugin.requires" value="..."/>-->
    <!--<property name="plugin.stage" value="..."/>-->

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="DirectUpload" default="dist" basedir=".">

    <!-- enter the SVN commit message -->
    <property name="commit.message" value="applied JOSM Ticket 4498 (patch by ax) - oauth support for gpx upload (I accidentally committed parts of the path in [24236])"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6340"/>

    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Subhodip Biswas"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.DirectUpload.UploadDataGuiPlugin"/>
    <property name="plugin.description" value="This plugin directly upload GPS Traces from current active layer in JOSM to openstreetmap.org."/>
    <property name="plugin.icon" value="images/UploadAction.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/index.php/User:Subhodip/GSoC_Doc#DirectUpload_Plugin_in_JOSM_:"/>
    <!--<property name="plugin.early" value="..."/>-->
    <!--<property name="plugin.requires" value="..."/>-->
    <!--<property name="plugin.stage" value="..."/>-->

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="ElevationProfile" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="[josm_elevationprofile]"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>
    
    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Oliver Wieland"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.elevation.ElevationProfilePlugin"/>
    <property name="plugin.description" value="Shows the elevation profile and some statistical data of a GPX track."/>
    <property name="plugin.icon" value="images/elevation.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/ElevationProfile"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="FastDraw" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="JOSM/FastDraw: line stroke and point size customization"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>
    
    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Alexei Kasatkin"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.fastdraw.FastDrawingPlugin"/>
    <property name="plugin.description" value="Fast drawing ways by mouse"/>
    <property name="plugin.icon" value="images/favicon.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/FastDraw"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="FixAddresses" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="[josm_fixadresses]: Fixes #josm8336"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>
	
    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Oliver Wieland"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.fixAddresses.FixAddressesPlugin"/>
    <property name="plugin.description" value="Finds and fixes invalid street addresses in a comfortable way."/>
    <property name="plugin.icon" value="images/fixaddresses.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/FixAddresses"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="HouseNumberTaggingTool" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Initial version."/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>
    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Oliver Raupach"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.housenumbertool.HouseNumberTaggingToolPlugin"/>
    <property name="plugin.description" value="Simple tool to tag house numbers."/>
    <property name="plugin.icon" value="images/home-icon32.png"/>
    <property name="plugin.link" value="http://josm.openstreetmap.de/wiki/Help/Plugin/HouseNumberTaggingTool"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
</project>
<?xml version="1.0" encoding="UTF-8"?>
<project name="ImportImagePlugin" default="dist" basedir=".">

	<!-- enter the SVN commit message -->
	<property name="commit.message" value="use consistent plugin name (don't mix up the words)" />
	<!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
	<property name="plugin.main.version" value="6162" />

    <property name="plugin.author" value="Christoph Beekmans, Fabian Kowitz, Anna Robaszkiewicz, Oliver Kuhn, Martin Ulitzny"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.ImportImagePlugin.ImportImagePlugin"/>
    <property name="plugin.description" value="Plugin for importing spatial referenced images"/>
    <property name="plugin.icon" value="images/layericon.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/ImportImagePlugin"/>
    <property name="plugin.requires" value="log4j;jts;geotools"/>
	
    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>

	<!--
    **********************************************************
    ** compile - complies the source tree
    **********************************************************
    -->
	<target name="compile" depends="init">
		<echo message="compiling sources for  ${plugin.jar} ... "/>
		<javac srcdir="src" classpath="${josm}" debug="true" destdir="${plugin.build.dir}" includeantruntime="false">
            <classpath>
                <pathelement location="${josm}"/>
                <fileset dir="../log4j/lib">
                    <include name="**/*.jar"/>
                </fileset>
                <fileset dir="../jts/lib">
                    <include name="**/*.jar"/>
                </fileset>
                <fileset dir="../geotools/lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
			<compilerarg value="-Xlint:deprecation"/>
			<compilerarg value="-Xlint:unchecked"/>
		</javac>
	</target>
	
</project>
<?xml version="1.0" encoding="utf-8"?>
<!--
** This is a template build file for a JOSM  plugin.
**
** Maintaining versions
** ====================
** see README.template
**
** Usage
** =====
** To build it run
**
**    > ant  dist
**
** To install the generated plugin locally (in you default plugin directory) run
**
**    > ant  install
**
** The generated plugin jar is not automatically available in JOSMs plugin configuration
** dialog. You have to check it in first.
**
** Use the ant target 'publish' to check in the plugin and make it available to other
** JOSM users:
**    set the properties commit.message and plugin.main.version
** and run
**    > ant  publish
**
**
-->
<project name="NanoLog" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="NanoLog"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="4800"/>
    <!--
      ************************************************
      ** should not be necessary to change the following properties
     -->
    <property name="josm" location="../../core/dist/josm-custom.jar"/>
    <property name="plugin.build.dir" value="build"/>
    <property name="plugin.src.dir" value="src"/>
    <!-- this is the directory where the plugin jar is copied to -->
    <property name="plugin.dist.dir" value="../../dist"/>
    <!--property name="plugin.dist.dir"        value="/Users/Zverik/AppData/Roaming/JOSM/plugins"/-->
    <property name="ant.build.javac.target" value="1.6"/>
    <property name="ant.build.javac.source" value="1.6"/>
    <property name="plugin.jar" value="${plugin.dist.dir}/${ant.project.name}.jar"/>
    <!--
    **********************************************************
    ** init - initializes the build
    **********************************************************
    -->
    <target name="init">
        <mkdir dir="${plugin.build.dir}"/>
    </target>
    <!--
    **********************************************************
    ** compile - complies the source tree
    **********************************************************
    -->
    <target name="compile" depends="init">
        <echo message="compiling sources for  ${plugin.jar} ... "/>
        <javac srcdir="src" classpath="${josm}" debug="true" destdir="${plugin.build.dir}">
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>
    <!--
    **********************************************************
    ** dist - creates the plugin jar
    **********************************************************
    -->
    <target name="dist" depends="compile,revision">
        <echo message="creating ${ant.project.name}.jar ... "/>
        <copy todir="${plugin.build.dir}/images">
            <fileset dir="images"/>
        </copy>
        <copy todir="${plugin.build.dir}/data">
            <fileset dir="data"/>
        </copy>
        <copy todir="${plugin.build.dir}">
            <fileset dir="src" includes="**/*.txt"/>
        </copy>
        <copy todir="${plugin.build.dir}">
            <fileset dir=".">
                <include name="README"/>
                <include name="LICENSE"/>
            </fileset>
        </copy>
        <jar destfile="${plugin.jar}" basedir="${plugin.build.dir}">
            <!--
        ************************************************
        ** configure these properties. Most of them will be copied to the plugins
        ** manifest file. Property values will also show up in the list available
        ** plugins: http://josm.openstreetmap.de/wiki/Plugins.
        **
        ************************************************
    -->
            <manifest>
                <attribute name="Author" value="Ilya Zverev"/>
                <attribute name="Plugin-Class" value="nanolog.NanoLogPlugin"/>
                <attribute name="Plugin-Date" value="${version.entry.commit.date}"/>
                <attribute name="Plugin-Description" value="NanoLog adjustment and browsing layer"/>
                <attribute name="ru_Plugin-Description" value="Загрузчик слоя NanoLog"/>
                <attribute name="Plugin-Icon" value="images/nanolog.png"/>
		<attribute name="Plugin-Link" value="http://wiki.openstreetmap.org/wiki/NanoLog"/>
		<attribute name="ru_Plugin-Link" value="http://wiki.openstreetmap.org/wiki/RU:NanoLog"/>
                <attribute name="Plugin-Mainversion" value="${plugin.main.version}"/>
                <attribute name="Plugin-Version" value="${version.entry.commit.revision}"/>
            </manifest>
        </jar>
    </target>
    <!--
    **********************************************************
    ** revision - extracts the current revision number for the
    **    file build.number and stores it in the XML property
    **    version.*
    **********************************************************
    -->
    <target name="revision">
        <exec append="false" output="REVISION" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="."/>
        </exec>
        <xmlproperty file="REVISION" prefix="version" keepRoot="false" collapseAttributes="true"/>
        <delete file="REVISION"/>
    </target>
    <!--
    **********************************************************
    ** clean - clean up the build environment
    **********************************************************
    -->
    <target name="clean">
        <delete dir="${plugin.build.dir}"/>
        <delete file="${plugin.jar}"/>
    </target>
    <!--
    **********************************************************
    ** install - install the plugin in your local JOSM installation
    **********************************************************
    -->
    <target name="install" depends="dist">
        <property environment="env"/>
        <condition property="josm.plugins.dir" value="${env.APPDATA}/JOSM/plugins" else="${user.home}/.josm/plugins">
            <and>
                <os family="windows"/>
            </and>
        </condition>
        <copy file="${plugin.jar}" todir="${josm.plugins.dir}"/>
    </target>
    <!--
    ************************** Publishing the plugin *********************************** 
    -->
    <!--
        ** extracts the JOSM release for the JOSM version in ../core and saves it in the 
        ** property ${coreversion.info.entry.revision}
        **
        -->
    <target name="core-info">
        <exec append="false" output="core.info.xml" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="../../core"/>
        </exec>
        <xmlproperty file="core.info.xml" prefix="coreversion" keepRoot="true" collapseAttributes="true"/>
        <echo>Building against core revision ${coreversion.info.entry.revision}.</echo>
        <echo>Plugin-Mainversion is set to ${plugin.main.version}.</echo>
        <delete file="core.info.xml"/>
    </target>
    <!--
        ** commits the source tree for this plugin
        -->
    <target name="commit-current">
        <echo>Commiting the plugin source with message '${commit.message}' ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="commit"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="."/>
        </exec>
    </target>
    <!--
        ** updates (svn up) the source tree for this plugin
        -->
    <target name="update-current">
        <echo>Updating plugin source ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="."/>
        </exec>
        <echo>Updating ${plugin.jar} ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="../dist/${plugin.jar}"/>
        </exec>
    </target>
    <!--
        ** commits the plugin.jar 
        -->
    <target name="commit-dist">
        <echo>
    ***** Properties of published ${plugin.jar} *****
    Commit message    : '${commit.message}'                    
    Plugin-Mainversion: ${plugin.main.version}
    JOSM build version: ${coreversion.info.entry.revision}
    Plugin-Version    : ${version.entry.commit.revision}
    ***** / Properties of published ${plugin.jar} *****                    
                        
    Now commiting ${plugin.jar} ...
    </echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="commit"/>
            <arg value="${plugin.jar}"/>
        </exec>
    </target>
    <!-- ** make sure svn is present as a command line tool ** -->
    <target name="ensure-svn-present">
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false" failonerror="false" resultproperty="svn.exit.code">
            <env key="LANG" value="C"/>
            <arg value="--version"/>
        </exec>
        <fail message="Fatal: command 'svn --version' failed. Please make sure svn is installed on your system.">
            <!-- return code not set at all? Most likely svn isn't installed -->
            <condition>
                <not>
                    <isset property="svn.exit.code"/>
                </not>
            </condition>
        </fail>
        <fail message="Fatal: command 'svn --version' failed. Please make sure a working copy of svn is installed on your system.">
            <!-- error code from SVN? Most likely svn is not what we are looking on this system -->
            <condition>
                <isfailure code="${svn.exit.code}"/>
            </condition>
        </fail>
    </target>
    <target name="publish" depends="ensure-svn-present,core-info,commit-current,update-current,clean,dist,commit-dist">
    </target>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="OpeningHoursEditor" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="fixed main version"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>
	
    <property name="plugin.author" value="Falko Thomale"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.ohe.OhePlugin"/>
    <property name="plugin.description" value="extended options for editing opening_hours"/>
    <property name="plugin.icon" value="images/opening_hours.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/OpeningHoursEditor"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
	
    <property name="javacc.home" location="../00_core_tools"/>
	<property name="parser.dir" location="${plugin.src.dir}/org/openstreetmap/josm/plugins/ohe/parser"/>
	
    <target name="javacc" depends="init" unless="javacc.notRequired">
        <exec append="false" executable="java" failifexecutionfails="true">
            <arg value="-cp"/>
            <arg value="${javacc.home}/javacc.jar"/>
            <arg value="javacc"/>
            <arg value="-JDK_VERSION=1.6"/>
            <arg value="-GRAMMAR_ENCODING=UTF-8"/>
            <arg value="-UNICODE_INPUT"/>
            <arg value="-OUTPUT_DIRECTORY=${parser.dir}"/>
            <arg value="${parser.dir}/OpeningTimeCompiler.jj"/>
        </exec>
    </target>

	<!--
    **********************************************************
    ** compile - compiles the source tree
    **********************************************************
    -->
    <target name="compile" depends="init, javacc">
        <echo message="compiling sources for ${plugin.jar} ... "/>
        <javac srcdir="src" debug="true" destdir="${plugin.build.dir}" includeAntRuntime="false" encoding="UTF-8">
            <classpath>
                <pathelement path="${plugin.build.dir}"/>
                <pathelement location="${josm}"/>
            </classpath>
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>

</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="OsmInspector" default="dist" basedir=".">

    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Commit message"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>

    <property name="plugin.author" value="Nikhil Shirahatti"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.osminspector.OsmInspectorPlugin"/>
    <property name="plugin.description" value="Bring in errors from Osm Inspector and display it on the current JOSM bounding box"/>
    <property name="plugin.icon" value="images/osmInspector.jpg"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/MapDust"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>

</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="AddrInterpolation" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Impoved Icon"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6340"/>
    
    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Mike Nice"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.AddrInterpolation.AddrInterpolationPlugin"/>
    <property name="plugin.description" value="Group common Address Interpolation inputs in a single dialog, as well as an option to automatically generate individual house number nodes from a Way."/>
    <property name="plugin.icon" value="images/AddrInterpolation.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/AddrInterpolation"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="alignways" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="AlignWays: moved to Shift-Spacebar due to shortcut confilcts with core. A is too overloaded"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>
    <!--
        ************************************************ ** should not be
        necessary to change the following properties
    -->
    <property name="josm" location="../../core/dist/josm-custom.jar"/>
    <property name="plugin.build.dir" value="build"/>
    <property name="plugin.src.dir" value="src"/>
    <property name="plugin.lib.dir" value="lib"/>
    <!-- this is the directory where the plugin jar is copied to -->
    <property name="plugin.dist.dir" value="../../dist"/>
    <property name="ant.build.javac.target" value="1.6"/>
    <property name="plugin.dist.dir" value="../../dist"/>
    <property name="plugin.jar" value="${plugin.dist.dir}/${ant.project.name}.jar"/>
    <!--
        ********************************************************** ** init -
        initializes the build
        **********************************************************
    -->
    <target name="init">
        <mkdir dir="${plugin.build.dir}"/>
    </target>
    <!--
        ********************************************************** ** compile
        - complies the source tree
        **********************************************************
    -->
    <target name="compile" depends="init">
        <echo message="compiling sources for  ${plugin.jar} ... "/>
        <javac srcdir="src" classpath="${josm};${plugin.lib.dir}" debug="true" destdir="${plugin.build.dir}">
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
        <copy todir="${plugin.build.dir}">
            <fileset dir="lib"/>
        </copy>
    </target>
    <!--
        ********************************************************** ** dist -
        creates the plugin jar
        **********************************************************
    -->
    <target name="dist" depends="compile,revision">
        <echo message="creating ${ant.project.name}.jar ... "/>
        <copy todir="${plugin.build.dir}/resources">
            <fileset dir="resources"/>
        </copy>
        <copy todir="${plugin.build.dir}/images">
            <fileset dir="images"/>
        </copy>
        <copy todir="${plugin.build.dir}/data">
            <fileset dir="data"/>
        </copy>
        <copy todir="${plugin.build.dir}">
            <fileset dir=".">
                <include name="README"/>
                <include name="LICENSE"/>
            </fileset>
        </copy>
        <jar destfile="${plugin.jar}" basedir="${plugin.build.dir}">
            <!--
                ************************************************ ** configure these
                properties. Most of them will be copied to the plugins ** manifest
                file. Property values will also show up in the list available **
                plugins: http://josm.openstreetmap.de/wiki/Plugins. **
                ************************************************
            -->
            <manifest>
                <attribute name="Author" value="Attila Szász"/>
                <attribute name="Plugin-Class" value="com.tilusnet.josm.plugins.alignways.AlignWaysPlugin"/>
                <attribute name="Plugin-Date" value="${version.entry.commit.date}"/>
                <attribute name="Plugin-Description" value="Makes a pair of selected way segments parallel by rotating one of them around a chosen pivot."/>
                <attribute name="Plugin-Icon" value="images/alignways.png"/>
                <attribute name="Plugin-Mainversion" value="${plugin.main.version}"/>
                <attribute name="Plugin-Version" value="${version.entry.commit.revision}"/>
                <attribute name="Plugin-Link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/AlignWayS"/>
            </manifest>
        </jar>
    </target>
    <!--
        ********************************************************** ** revision
        - extracts the current revision number for the ** file build.number
        and stores it in the XML property ** version.*
        **********************************************************
    -->
    <target name="revision">
        <exec append="false" output="REVISION" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="."/>
        </exec>
        <xmlproperty file="REVISION" prefix="version" keepRoot="false" collapseAttributes="true"/>
        <delete file="REVISION"/>
    </target>
    <!--
        ********************************************************** ** clean -
        clean up the build environment
        **********************************************************
    -->
    <target name="clean">
        <delete dir="${plugin.build.dir}"/>
        <delete file="${plugin.jar}"/>
    </target>
    <!--
        ********************************************************** ** install
        - install the plugin in your local JOSM installation
        **********************************************************
    -->
    <target name="install" depends="dist">
        <property environment="env"/>
        <condition property="josm.plugins.dir" value="${env.APPDATA}/JOSM/plugins" else="${user.home}/.josm/plugins">
            <and>
                <os family="windows"/>
            </and>
        </condition>
        <copy file="${plugin.jar}" todir="${josm.plugins.dir}"/>
    </target>
    <!--
        ************************** Publishing the plugin
        ***********************************
    -->
    <!--
        ** extracts the JOSM release for the JOSM version in ../core and saves
        it in the ** property ${coreversion.info.entry.revision} **
    -->
    <target name="core-info">
        <exec append="false" output="core.info.xml" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="../../core"/>
        </exec>
        <xmlproperty file="core.info.xml" prefix="coreversion" keepRoot="true" collapseAttributes="true"/>
        <echo>Building against core revision
            ${coreversion.info.entry.revision}.</echo>
        <echo>Plugin-Mainversion is set to ${plugin.main.version}.</echo>
        <delete file="core.info.xml"/>
    </target>
    <!--
        ** commits the source tree for this plugin
        -->
    <target name="commit-current">
        <echo>Commiting the plugin source with message '${commit.message}' ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="commit"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="."/>
        </exec>
    </target>
    <!--
        ** updates (svn up) the source tree for this plugin
        -->
    <target name="update-current">
        <echo>Updating plugin source ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="."/>
        </exec>
        <echo>Updating ${plugin.jar} ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="../dist/${plugin.jar}"/>
        </exec>
    </target>
    <!--
        ** commits the plugin.jar
        -->
    <target name="commit-dist">
        <echo>
            ***** Properties of published ${plugin.jar} *****
            Commit message
            : '${commit.message}'
            Plugin-Mainversion: ${plugin.main.version}
            JOSM
            build version: ${coreversion.info.entry.revision}
            Plugin-Version :
            ${version.entry.commit.revision}
            ***** / Properties of published
            ${plugin.jar} *****

            Now commiting ${plugin.jar} ...
    </echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="commit"/>
            <arg value="${plugin.jar}"/>
        </exec>
    </target>
    <!-- ** make sure svn is present as a command line tool ** -->
    <target name="ensure-svn-present">
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false" failonerror="false" resultproperty="svn.exit.code">
            <env key="LANG" value="C"/>
            <arg value="--version"/>
        </exec>
        <fail message="Fatal: command 'svn --version' failed. Please make sure svn is installed on your system.">
            <!-- return code not set at all? Most likely svn isn't installed -->
            <condition>
                <not>
                    <isset property="svn.exit.code"/>
                </not>
            </condition>
        </fail>
        <fail message="Fatal: command 'svn --version' failed. Please make sure a working copy of svn is installed on your system.">
            <!--
                error code from SVN? Most likely svn is not what we are looking on
                this system
            -->
            <condition>
                <isfailure code="${svn.exit.code}"/>
            </condition>
        </fail>
    </target>
    <target name="publish" depends="ensure-svn-present,core-info,commit-current,update-current,clean,dist,commit-dist">
    </target>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="josm-plugins" default="build" basedir=".">
    <target name="compile_josm" unless="skip-josm">
        <echo message="test"/>
        <ant dir="../core" target="dist"/>
    </target>
    <target name="compile" depends="compile_josm"/>
    <target name="build" depends="dist"/>
    <target name="dist" depends="compile">
        <mkdir dir="../dist"/>
        <!-- order important ! -->
        <ant antfile="build.xml" target="dist" dir="jts"/>
        <ant antfile="build.xml" target="dist" dir="geotools"/>
        <ant antfile="build.xml" target="dist" dir="utilsplugin2"/>
        <ant antfile="build.xml" target="dist" dir="log4j"/>
    	<!-- order not important -->
        <ant antfile="build.xml" target="dist" dir="addrinterpolation"/>
        <ant antfile="build.xml" target="dist" dir="alignways"/>
        <ant antfile="build.xml" target="dist" dir="buildings_tools"/>
        <ant antfile="build.xml" target="dist" dir="cadastre-fr"/>
        <ant antfile="build.xml" target="dist" dir="canvec_helper"/>
        <ant antfile="build.xml" target="dist" dir="colorscheme"/>
        <ant antfile="build.xml" target="dist" dir="ColumbusCSV"/>
        <ant antfile="build.xml" target="dist" dir="CommandLine"/>
        <ant antfile="build.xml" target="dist" dir="Create_grid_of_ways"/>
        <ant antfile="build.xml" target="dist" dir="czechaddress"/>
        <ant antfile="build.xml" target="dist" dir="dataimport"/>
        <ant antfile="build.xml" target="dist" dir="DirectDownload"/>
        <ant antfile="build.xml" target="dist" dir="DirectUpload"/>
        <ant antfile="build.xml" target="dist" dir="download_along"/>
        <ant antfile="build.xml" target="dist" dir="editgpx"/>
        <ant antfile="build.xml" target="dist" dir="ElevationProfile"/>
        <ant antfile="build.xml" target="dist" dir="epci-fr"/>
        <ant antfile="build.xml" target="dist" dir="ext_tools"/>
        <ant antfile="build.xml" target="dist" dir="FastDraw"/>
        <ant antfile="build.xml" target="dist" dir="FixAddresses"/>
        <ant antfile="build.xml" target="dist" dir="geochat"/>
        <ant antfile="build.xml" target="dist" dir="globalsat"/>
        <ant antfile="build.xml" target="dist" dir="gpsblam"/>
        <ant antfile="build.xml" target="dist" dir="gpxfilter"/>
        <ant antfile="build.xml" target="dist" dir="graphview"/>
        <ant antfile="build.xml" target="dist" dir="HouseNumberTaggingTool"/>
        <ant antfile="build.xml" target="dist" dir="imageryadjust"/>
        <ant antfile="build.xml" target="dist" dir="imagerycache"/>
        <ant antfile="build.xml" target="dist" dir="imagery_offset_db"/>
        <ant antfile="build.xml" target="dist" dir="imagery-xml-bounds"/>
        <ant antfile="build.xml" target="dist" dir="imagewaypoint"/>
        <ant antfile="build.xml" target="dist" dir="ImportImagePlugin"/>
        <ant antfile="build.xml" target="dist" dir="importvec"/>
        <ant antfile="build.xml" target="dist" dir="infomode"/>
        <ant antfile="build.xml" target="dist" dir="irsrectify"/>
        <ant antfile="build.xml" target="dist" dir="junctionchecking"/>
        <ant antfile="build.xml" target="dist" dir="lakewalker"/>
        <ant antfile="build.xml" target="dist" dir="livegps"/>
        <ant antfile="build.xml" target="dist" dir="mapdust"/>
        <ant antfile="build.xml" target="dist" dir="measurement"/>
        <ant antfile="build.xml" target="dist" dir="merge-overlap"/>
        <ant antfile="build.xml" target="dist" dir="michigan_left"/>
        <ant antfile="build.xml" target="dist" dir="mirrored_download"/>
        <ant antfile="build.xml" target="dist" dir="namemanager"/>
        <ant antfile="build.xml" target="dist" dir="NanoLog"/>
        <ant antfile="build.xml" target="dist" dir="native-password-manager"/>
        <ant antfile="build.xml" target="dist" dir="nearclick"/>
        <ant antfile="build.xml" target="dist" dir="no_more_mapping"/>
        <ant antfile="build.xml" target="dist" dir="OpeningHoursEditor"/>
        <ant antfile="build.xml" target="dist" dir="opendata"/>
        <ant antfile="build.xml" target="dist" dir="openstreetbugs"/>
        <ant antfile="build.xml" target="dist" dir="openvisible"/>
        <ant antfile="build.xml" target="dist" dir="osmarender"/>
        <ant antfile="build.xml" target="dist" dir="OsmInspectorPlugin"/>
        <ant antfile="build.xml" target="dist" dir="pbf"/>
        <ant antfile="build.xml" target="dist" dir="pdfimport"/>
        <ant antfile="build.xml" target="dist" dir="photoadjust"/>
        <ant antfile="build.xml" target="dist" dir="photo_geotagging"/>
        <ant antfile="build.xml" target="dist" dir="piclayer"/>
        <ant antfile="build.xml" target="dist" dir="plastic_laf"/>
        <ant antfile="build.xml" target="dist" dir="pointInfo"/>
        <ant antfile="build.xml" target="dist" dir="poly"/>
        <ant antfile="build.xml" target="dist" dir="print"/>
        <ant antfile="build.xml" target="dist" dir="proj4j"/>
        <ant antfile="build.xml" target="dist" dir="public_transport"/>
        <ant antfile="build.xml" target="dist" dir="reltoolbox"/>
        <ant antfile="build.xml" target="dist" dir="reverter"/>
        <ant antfile="build.xml" target="dist" dir="roadsigns"/>
        <ant antfile="build.xml" target="dist" dir="routes"/>
        <ant antfile="build.xml" target="dist" dir="routing"/>
        <ant antfile="build.xml" target="dist" dir="sds"/>
        <ant antfile="build.xml" target="dist" dir="simplifyarea"/>
        <ant antfile="build.xml" target="dist" dir="smed"/>
        <ant antfile="build.xml" target="dist" dir="smed2"/>
        <ant antfile="build.xml" target="dist" dir="surveyor"/>
        <ant antfile="build.xml" target="dist" dir="surveyor2"/>
        <ant antfile="build.xml" target="dist" dir="tag2link"/>
        <ant antfile="build.xml" target="dist" dir="tageditor"/>
        <ant antfile="build.xml" target="dist" dir="tagging-preset-tester"/>
        <ant antfile="build.xml" target="dist" dir="terracer"/>
        <ant antfile="build.xml" target="dist" dir="touchscreenhelper"/>
        <ant antfile="build.xml" target="dist" dir="tracer"/>
        <ant antfile="build.xml" target="dist" dir="tracer2"/>
        <ant antfile="build.xml" target="dist" dir="turnlanes"/>
        <ant antfile="build.xml" target="dist" dir="turnrestrictions"/>
        <ant antfile="build.xml" target="dist" dir="undelete"/>
        <ant antfile="build.xml" target="dist" dir="videomapping"/>
        <ant antfile="build.xml" target="dist" dir="walkingpapers"/>
        <ant antfile="build.xml" target="dist" dir="waydownloader"/>
        <ant antfile="build.xml" target="dist" dir="waypoint_search"/>
        <ant antfile="build.xml" target="dist" dir="wayselector"/>
        <ant antfile="build.xml" target="dist" dir="wikipedia"/>
        <ant antfile="build.xml" target="dist" dir="wms-turbo-challenge2"/>
    </target>
    <target name="build_defect" depends="compile">
        <ant antfile="build.xml" target="dist" dir="trustosm"/>
    </target>
    <target name="clean">
        <ant antfile="build.xml" target="clean" dir="00_plugin_dir_template"/>
        <ant antfile="build.xml" target="clean" dir="addrinterpolation"/>
        <ant antfile="build.xml" target="clean" dir="alignways"/>
        <ant antfile="build.xml" target="clean" dir="buildings_tools"/>
        <ant antfile="build.xml" target="clean" dir="cadastre-fr"/>
        <ant antfile="build.xml" target="clean" dir="canvec_helper"/>
        <ant antfile="build.xml" target="clean" dir="colorscheme"/>
        <ant antfile="build.xml" target="clean" dir="ColumbusCSV"/>
        <ant antfile="build.xml" target="clean" dir="CommandLine"/>
        <ant antfile="build.xml" target="clean" dir="Create_grid_of_ways"/>
        <ant antfile="build.xml" target="clean" dir="czechaddress"/>
        <ant antfile="build.xml" target="clean" dir="dataimport"/>
        <ant antfile="build.xml" target="clean" dir="DirectDownload"/>
        <ant antfile="build.xml" target="clean" dir="DirectUpload"/>
        <ant antfile="build.xml" target="clean" dir="download_along"/>
        <ant antfile="build.xml" target="clean" dir="editgpx"/>
        <ant antfile="build.xml" target="clean" dir="ElevationProfile"/>
        <ant antfile="build.xml" target="clean" dir="epci-fr"/>
        <ant antfile="build.xml" target="clean" dir="ext_tools"/>
        <ant antfile="build.xml" target="clean" dir="FastDraw"/>
        <ant antfile="build.xml" target="clean" dir="FixAddresses"/>
        <ant antfile="build.xml" target="clean" dir="geochat"/>
        <ant antfile="build.xml" target="clean" dir="geotools"/>
        <ant antfile="build.xml" target="clean" dir="globalsat"/>
        <ant antfile="build.xml" target="clean" dir="gpsblam"/>
        <ant antfile="build.xml" target="clean" dir="gpxfilter"/>
        <ant antfile="build.xml" target="clean" dir="graphview"/>
        <ant antfile="build.xml" target="clean" dir="HouseNumberTaggingTool"/>
        <ant antfile="build.xml" target="clean" dir="imageryadjust"/>
        <ant antfile="build.xml" target="clean" dir="imagerycache"/>
        <ant antfile="build.xml" target="clean" dir="imagery_offset_db"/>
        <ant antfile="build.xml" target="clean" dir="imagery-xml-bounds"/>
        <ant antfile="build.xml" target="clean" dir="imagewaypoint"/>
        <ant antfile="build.xml" target="clean" dir="ImportImagePlugin"/>
        <ant antfile="build.xml" target="clean" dir="importvec"/>
        <ant antfile="build.xml" target="clean" dir="infomode"/>
        <ant antfile="build.xml" target="clean" dir="irsrectify"/>
        <ant antfile="build.xml" target="clean" dir="jts"/>
        <ant antfile="build.xml" target="clean" dir="junctionchecking"/>
        <ant antfile="build.xml" target="clean" dir="lakewalker"/>
        <ant antfile="build.xml" target="clean" dir="livegps"/>
        <ant antfile="build.xml" target="clean" dir="log4j"/>
        <ant antfile="build.xml" target="clean" dir="mapdust"/>
        <ant antfile="build.xml" target="clean" dir="measurement"/>
        <ant antfile="build.xml" target="clean" dir="merge-overlap"/>
        <ant antfile="build.xml" target="clean" dir="michigan_left"/>
        <ant antfile="build.xml" target="clean" dir="mirrored_download"/>
        <ant antfile="build.xml" target="clean" dir="namemanager"/>
        <ant antfile="build.xml" target="clean" dir="no_more_mapping"/>
        <ant antfile="build.xml" target="clean" dir="NanoLog"/>
        <ant antfile="build.xml" target="clean" dir="native-password-manager"/>
        <ant antfile="build.xml" target="clean" dir="nearclick"/>
        <ant antfile="build.xml" target="clean" dir="OpeningHoursEditor"/>
        <ant antfile="build.xml" target="clean" dir="opendata"/>
        <ant antfile="build.xml" target="clean" dir="openstreetbugs"/>
        <ant antfile="build.xml" target="clean" dir="openvisible"/>
        <ant antfile="build.xml" target="clean" dir="osmarender"/>
        <ant antfile="build.xml" target="clean" dir="OsmInspectorPlugin"/>
        <ant antfile="build.xml" target="clean" dir="pbf"/>
        <ant antfile="build.xml" target="clean" dir="pdfimport"/>
        <ant antfile="build.xml" target="clean" dir="photoadjust"/>
        <ant antfile="build.xml" target="clean" dir="photo_geotagging"/>
        <ant antfile="build.xml" target="clean" dir="piclayer"/>
        <ant antfile="build.xml" target="clean" dir="plastic_laf"/>
        <ant antfile="build.xml" target="clean" dir="pointInfo"/>
        <ant antfile="build.xml" target="clean" dir="poly"/>
        <ant antfile="build.xml" target="clean" dir="print"/>
        <ant antfile="build.xml" target="clean" dir="proj4j"/>
        <ant antfile="build.xml" target="clean" dir="public_transport"/>
        <ant antfile="build.xml" target="clean" dir="reltoolbox"/>
        <ant antfile="build.xml" target="clean" dir="reverter"/>
        <ant antfile="build.xml" target="clean" dir="roadsigns"/>
        <ant antfile="build.xml" target="clean" dir="routes"/>
        <ant antfile="build.xml" target="clean" dir="routing"/>
        <ant antfile="build.xml" target="clean" dir="sds"/>
        <ant antfile="build.xml" target="clean" dir="simplifyarea"/>
        <ant antfile="build.xml" target="clean" dir="smed"/>
        <ant antfile="build.xml" target="clean" dir="smed2"/>
        <ant antfile="build.xml" target="clean" dir="surveyor"/>
        <ant antfile="build.xml" target="clean" dir="surveyor2"/>
        <ant antfile="build.xml" target="clean" dir="tag2link"/>
        <ant antfile="build.xml" target="clean" dir="tageditor"/>
        <ant antfile="build.xml" target="clean" dir="tagging-preset-tester"/>
        <ant antfile="build.xml" target="clean" dir="terracer"/>
        <ant antfile="build.xml" target="clean" dir="touchscreenhelper"/>
        <ant antfile="build.xml" target="clean" dir="tracer"/>
        <ant antfile="build.xml" target="clean" dir="tracer2"/>
        <ant antfile="build.xml" target="clean" dir="turnlanes"/>
        <ant antfile="build.xml" target="clean" dir="trustosm"/>
        <ant antfile="build.xml" target="clean" dir="turnrestrictions"/>
        <ant antfile="build.xml" target="clean" dir="undelete"/>
        <ant antfile="build.xml" target="clean" dir="utilsplugin2"/>
        <ant antfile="build.xml" target="clean" dir="videomapping"/>
        <ant antfile="build.xml" target="clean" dir="walkingpapers"/>
        <ant antfile="build.xml" target="clean" dir="waydownloader"/>
        <ant antfile="build.xml" target="clean" dir="waypoint_search"/>
        <ant antfile="build.xml" target="clean" dir="wayselector"/>
        <ant antfile="build.xml" target="clean" dir="wikipedia"/>
        <ant antfile="build.xml" target="clean" dir="wms-turbo-challenge2"/>
    </target>
    <target name="clean_install"/>
    <target name="install" depends="dist"/>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="buildings_tools" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="BuildingTools: update to current JOSM"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6309"/>
    
    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Upliner"/>
    <property name="plugin.class" value="buildings_tools.BuildingsToolsPlugin"/>
    <property name="plugin.description" value="Tools for drawing buildings."/>
    <property name="plugin.icon" value="images/mapmode/building.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/BuildingsTools"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="cadastre-fr" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Changed constructor for Plugin"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>
    
    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Pieren"/>
    <property name="plugin.class" value="cadastre_fr.CadastrePlugin"/>
    <property name="plugin.description" value="A special handler for the French land registry WMS server."/>
    <property name="plugin.icon" value="images/preferences/cadastrewms.gif"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/FR:JOSM/Fr:Plugin/Cadastre"/>
    <property name="plugin.stage" value="60"/>
    <property name="plugin.requires" value="jts;geotools"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>

    <property name="jts" location="${plugin.dist.dir}/jts.jar"/>
    <property name="geotools" location="${plugin.dist.dir}/geotools.jar"/>

    <!--
    **********************************************************
    ** compile - compiles the source tree
    **********************************************************
    -->
    <target name="compile" depends="init">
        <echo message="compiling sources for ${plugin.jar} ... "/>
        <javac srcdir="src" debug="true" destdir="${plugin.build.dir}" includeAntRuntime="false" encoding="UTF-8">
            <classpath>
                <pathelement path="${plugin.build.dir}"/>
                <pathelement location="${josm}"/>
                <pathelement location="${jts}"/>
                <pathelement location="${geotools}"/>
            </classpath>
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="canvec_helper" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="JOSM/Canvec_helper: fixed a crash caused by osm directory being renamed to OSM"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>
    
    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Michael Bishop"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.canvec_helper.CanvecHelper"/>
    <property name="plugin.description" value="Overlays the canvec tile grid on the map and prints URL''s to the .zip files. Future goals: allow auto-downloading and loading of canvec .osm files"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>                
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="colorscheme" default="dist" basedir=".">

    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Uses new constructor for Plugin"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>

    <property name="plugin.author" value="Christof Dallermassl"/>
    <property name="plugin.class" value="at.dallermassl.josm.plugin.colorscheme.ColorSchemePlugin"/>
    <property name="plugin.description" value="Allows the user to create different color schemes and to switch between them. Just change the colors and create a new scheme. Used to switch to a white background with matching colors for better visibility in bright sunlight. See dialog in display preferences."/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>

</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="czechaddress" default="dist" basedir=".">
    <property name="josm" location="../../core/dist/josm-custom.jar"/>
    <property name="plugin.dist.dir" value="../../dist"/>
    <property name="plugin.build.dir" value="build"/>
    <property name="plugin.jar" value="${plugin.dist.dir}/${ant.project.name}.jar"/>
    <property name="plugin.manifest" value="${plugin.build.dir}/org/openstreetmap/josm/plugins/czechaddress/MANIFEST.MF"/>
    <property name="ant.build.javac.target" value="1.6"/>
    <target name="clean" description="Removes all build files and the plugins's jar">
        <delete dir="${plugin.build.dir}"/>
        <delete file="${plugin.jar}"/>
    </target>
    <target name="init">
        <mkdir dir="${plugin.build.dir}"/>
        <mkdir dir="${plugin.dist.dir}"/>
    </target>
    <target name="compile" depends="init,revision" description="Compile the plugin and make it ready for running">
        <javac srcdir="src" classpath="${josm}" debug="true" encoding="utf8" destdir="${plugin.build.dir}">
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
        <copy todir="${plugin.build.dir}/images">
            <fileset dir="images"/>
        </copy>
        <copy todir="${plugin.build.dir}/data">
            <fileset dir="data"/>
        </copy>
        <manifest file="${plugin.manifest}">
            <attribute name="Author" value="Radomír Černoch"/>
            <attribute name="Plugin-Class" value="org.openstreetmap.josm.plugins.czechaddress.CzechAddressPlugin"/>
            <attribute name="Plugin-Date" value="${version.entry.commit.date}"/>
            <attribute name="Plugin-Description" value="Creating and handling address nodes and buildings within Czech Republic."/>
            <attribute name="Plugin-Link" value="http://wiki.openstreetmap.org/wiki/CS:JOSM/Plugins/CzechAddress"/>
            <attribute name="Plugin-Icon" value="images/preferences/czech_flag.png"/>
            <attribute name="Plugin-Mainversion" value="6162"/>
            <attribute name="Plugin-Version" value="${version.entry.commit.revision}"/>
        </manifest>
    </target>
    <target name="dist" depends="compile">
        <jar destfile="${plugin.jar}" basedir="${plugin.build.dir}" manifest="${plugin.build.dir}/org/openstreetmap/josm/plugins/czechaddress/MANIFEST.MF"/>
    </target>
    <target name="revision">
        <exec append="false" output="REVISION" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="."/>
        </exec>
        <xmlproperty file="REVISION" prefix="version" keepRoot="false" collapseAttributes="true"/>
        <delete file="REVISION"/>
    </target>
    <target name="install" depends="dist">
        <property environment="env"/>
        <condition property="josm.plugins.dir" value="${env.APPDATA}/JOSM/plugins" else="${user.home}/.josm/plugins">
            <and>
                <os family="windows"/>
            </and>
        </condition>
        <copy file="${plugin.jar}" todir="${josm.plugins.dir}"/>
    </target>
    <target name="run" depends="compile">
        <java classname="JOSM" fork="true">
            <jvmarg value="-Xmx1024m"/>
            <jvmarg value="-Xdebug"/>
            <jvmarg value="-ea"/>
            <jvmarg value="-Djava.net.useSystemProxies=true"/>
            <classpath>
                <pathelement location="${plugin.build.dir}"/>
                <pathelement path="${java.class.path}"/>
            </classpath>
            <classpath>
                <pathelement location="${josm}"/>
                <pathelement path="${java.class.path}"/>
            </classpath>
        </java>
    </target>
    <target name="profile" depends="compile" description="Profile CzechAddress with Netbeans">
        <fail unless="netbeans.home">
            This target can only run inside the NetBeans IDE.
        </fail>
        <nbprofiledirect>
            <classpath>
                <pathelement location="${plugin.build.dir}"/>
            </classpath>
        </nbprofiledirect>
        <java classname="JOSM" fork="true">
            <jvmarg value="${profiler.info.jvmargs.agent}"/>
            <jvmarg value="-Xmx1024m"/>
            <classpath>
                <pathelement location="${plugin.build.dir}"/>
                <pathelement path="${java.class.path}"/>
            </classpath>
            <classpath>
                <pathelement location="${josm}"/>
                <pathelement path="${java.class.path}"/>
            </classpath>
        </java>
    </target>
    <target name="debug" depends="compile" description="Debug CzechAddress with Netbeans">
        <nbjpdastart addressproperty="jpda.address" name="czechaddress" transport="dt_socket"/>
        <java classname="JOSM" fork="true">
            <jvmarg value="-Xrunjdwp:transport=dt_socket,address=${jpda.address}"/>
            <jvmarg value="-Xmx1024m"/>
            <jvmarg value="-Xdebug"/>
            <jvmarg value="-ea"/>
            <classpath>
                <pathelement location="${plugin.build.dir}"/>
                <pathelement path="${java.class.path}"/>
            </classpath>
            <classpath>
                <pathelement location="${josm}"/>
                <pathelement path="${java.class.path}"/>
            </classpath>
        </java>
    </target>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="dataimport" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Changed constructor signature, updated build.xml"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>
    <!--
      ************************************************
      ** should not be necessary to change the following properties
     -->
    <property name="josm" location="../../core/dist/josm-custom.jar"/>
    <property name="plugin.build.dir" value="build"/>
    <property name="plugin.src.dir" value="src"/>
    <!-- this is the directory where the plugin jar is copied to -->
    <property name="plugin.dist.dir" value="../../dist"/>
    <property name="ant.build.javac.target" value="1.6"/>
    <property name="plugin.dist.dir" value="../../dist"/>
    <property name="plugin.jar" value="${plugin.dist.dir}/${ant.project.name}.jar"/>
    <!--
    **********************************************************
    ** init - initializes the build
    **********************************************************
    -->
    <target name="init">
        <mkdir dir="${plugin.build.dir}"/>
    </target>
    <!--
    **********************************************************
    ** compile - complies the source tree
    **********************************************************
    -->
    <target name="compile" depends="init">
        <echo message="compiling sources for  ${plugin.jar} ... "/>
        <javac srcdir="src" debug="true" destdir="${plugin.build.dir}">
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <pathelement location="${josm}"/>
                <fileset dir="lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </javac>
    </target>
    <!--
    **********************************************************
    ** dist - creates the plugin jar
    **********************************************************
    -->
    <target name="dist" depends="compile,revision">
        <echo message="creating ${ant.project.name}.jar ... "/>
        <copy todir="${plugin.build.dir}">
            <fileset dir=".">
                <include name="README"/>
                <include name="LICENSE"/>
            </fileset>
        </copy>
        <copy todir="${plugin.build.dir}/data">
            <fileset dir="data"/>
        </copy>
        <jar destfile="${plugin.jar}" basedir="${plugin.build.dir}">
            <!--
        ************************************************
        ** configure these properties. Most of them will be copied to the plugins
        ** manifest file. Property values will also show up in the list available
        ** plugins: http://josm.openstreetmap.de/wiki/Plugins.
        **
        ************************************************
    -->
            <zipfileset src="lib/jsr173-1.0_api.jar" includes="**/*.class"/>
            <zipfileset src="lib/jaxb-api.jar" includes="**/*.class"/>
            <zipfileset src="lib/jaxb-api.jar" includes="**/*.properties"/>
            <zipfileset src="lib/jaxb-impl.jar" includes="**/*.class"/>
            <manifest>
                <attribute name="Author" value="Dieter Muecke"/>
                <attribute name="Plugin-Class" value="org.openstreetmap.josm.plugins.dataimport.DataImportPlugin"/>
                <attribute name="Plugin-Date" value="${version.entry.commit.date}"/>
                <attribute name="Plugin-Description" value="Allows to import various file formats into JOSM directly."/>
                <attribute name="Plugin-Mainversion" value="${plugin.main.version}"/>
                <attribute name="Plugin-Version" value="${version.entry.commit.revision}"/>
            </manifest>
        </jar>
    </target>
    <!--
    **********************************************************
    ** revision - extracts the current revision number for the
    **    file build.number and stores it in the XML property
    **    version.*
    **********************************************************
    -->
    <target name="revision">
        <exec append="false" output="REVISION" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="."/>
        </exec>
        <xmlproperty file="REVISION" prefix="version" keepRoot="false" collapseAttributes="true"/>
        <delete file="REVISION"/>
    </target>
    <!--
    **********************************************************
    ** clean - clean up the build environment
    **********************************************************
    -->
    <target name="clean">
        <delete dir="${plugin.build.dir}"/>
        <delete file="${plugin.jar}"/>
    </target>
    <!--
    **********************************************************
    ** install - install the plugin in your local JOSM installation
    **********************************************************
    -->
    <target name="install" depends="dist">
        <property environment="env"/>
        <condition property="josm.plugins.dir" value="${env.APPDATA}/JOSM/plugins" else="${user.home}/.josm/plugins">
            <and>
                <os family="windows"/>
            </and>
        </condition>
        <copy file="${plugin.jar}" todir="${josm.plugins.dir}"/>
    </target>
    <!--
    ************************** Publishing the plugin ***********************************
    -->
    <!--
        ** extracts the JOSM release for the JOSM version in ../core and saves it in the
        ** property ${coreversion.info.entry.revision}
        **
        -->
    <target name="core-info">
        <exec append="false" output="core.info.xml" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="../../core"/>
        </exec>
        <xmlproperty file="core.info.xml" prefix="coreversion" keepRoot="true" collapseAttributes="true"/>
        <echo>Building against core revision ${coreversion.info.entry.revision}.</echo>
        <echo>Plugin-Mainversion is set to ${plugin.main.version}.</echo>
        <delete file="core.info.xml"/>
    </target>
    <!--
        ** commits the source tree for this plugin
        -->
    <target name="commit-current">
        <echo>Commiting the plugin source with message '${commit.message}' ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="commit"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="."/>
        </exec>
    </target>
    <!--
        ** updates (svn up) the source tree for this plugin
        -->
    <target name="update-current">
        <echo>Updating plugin source ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="."/>
        </exec>
        <echo>Updating ${plugin.jar} ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="../dist/${plugin.jar}"/>
        </exec>
    </target>
    <!--
        ** commits the plugin.jar
        -->
    <target name="commit-dist">
        <echo>
    ***** Properties of published ${plugin.jar} *****
    Commit message    : '${commit.message}'
    Plugin-Mainversion: ${plugin.main.version}
    JOSM build version: ${coreversion.info.entry.revision}
    Plugin-Version    : ${version.entry.commit.revision}
    ***** / Properties of published ${plugin.jar} *****

    Now commiting ${plugin.jar} ...
    </echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="commit"/>
            <arg value="${plugin.jar}"/>
        </exec>
    </target>
    <!-- ** make sure svn is present as a command line tool ** -->
    <target name="ensure-svn-present">
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false" failonerror="false" resultproperty="svn.exit.code">
            <env key="LANG" value="C"/>
            <arg value="--version"/>
        </exec>
        <fail message="Fatal: command 'svn --version' failed. Please make sure svn is installed on your system.">
            <!-- return code not set at all? Most likely svn isn't installed -->
            <condition>
                <not>
                    <isset property="svn.exit.code"/>
                </not>
            </condition>
        </fail>
        <fail message="Fatal: command 'svn --version' failed. Please make sure a working copy of svn is installed on your system.">
            <!-- error code from SVN? Most likely svn is not what we are looking on this system -->
            <condition>
                <isfailure code="${svn.exit.code}"/>
            </condition>
        </fail>
    </target>
    <target name="publish" depends="ensure-svn-present,core-info,commit-current,update-current,clean,dist,commit-dist">
    </target>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="download_along" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Changed the constructor signature of the plugin main class"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6317"/>

	<!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Nakor"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugin.download_along.DownloadAlong"/>
    <property name="plugin.description" value="Downloads OSM data along a way"/>
    <property name="plugin.icon" value="images/download_along.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/DownloadAlong"/>
    <!--<property name="plugin.early" value="..."/>-->
    <!--<property name="plugin.requires" value="..."/>-->
    <!--<property name="plugin.stage" value="..."/>-->

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>

</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="editgpx" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Changed constructor signature of plugin main class"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>
    
    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Martin Garbe"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.editgpx.EditGpxPlugin"/>
    <property name="plugin.description" value="Allows the user to anonymize timestamps and delete parts of huge GPX tracks very fast."/>
    <property name="plugin.icon" value="images/mapmode/editgpx_mode.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/EditGpx"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="epci-fr" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Commit message"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>
	
    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Don-vip"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.fr.epci.EpciPlugin"/>
    <property name="plugin.description" value="Handling of French EPCIs (boundary=local_authority)"/>
    <!--<property name="plugin.icon" value="..."/>-->
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/FR:JOSM/Fr:Plugin/EPCI-fr"/>
    <property name="plugin.early" value="true"/>
    <!--<property name="plugin.requires" value="..."/>-->
    <!--<property name="plugin.stage" value="..."/>-->

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="ext_tools" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="ExtTools: help shortcut paser, rebuild"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6340"/>
    <!--
      ************************************************
      ** should not be necessary to change the following properties
     -->
    <property name="josm" location="../../core/dist/josm-custom.jar"/>
    <property name="plugin.build.dir" value="build"/>
    <property name="plugin.src.dir" value="src"/>
    <!-- this is the directory where the plugin jar is copied to -->
    <property name="plugin.dist.dir" value="../../dist"/>
    <property name="ant.build.javac.target" value="1.6"/>
    <property name="plugin.dist.dir" value="../../dist"/>
    <property name="plugin.jar" value="${plugin.dist.dir}/${ant.project.name}.jar"/>
    <!--
    **********************************************************
    ** init - initializes the build
    **********************************************************
    -->
    <target name="init">
        <mkdir dir="${plugin.build.dir}"/>
    </target>
    <!--
    **********************************************************
    ** compile - complies the source tree
    **********************************************************
    -->
    <target name="compile" depends="init">
        <echo message="compiling sources for  ${plugin.jar} ... "/>
        <javac srcdir="src" classpath="${josm}" debug="true" destdir="${plugin.build.dir}">
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>
    <!--
    **********************************************************
    ** dist - creates the plugin jar
    **********************************************************
    -->
    <target name="dist" depends="compile,revision">
        <echo message="creating ${ant.project.name}.jar ... "/>
        <copy todir="${plugin.build.dir}/resources">
            <fileset dir="resources"/>
        </copy>
        <copy todir="${plugin.build.dir}/images">
            <fileset dir="images"/>
        </copy>
        <copy todir="${plugin.build.dir}/data">
            <fileset dir="data"/>
        </copy>
        <copy todir="${plugin.build.dir}">
            <fileset dir=".">
                <include name="README"/>
                <include name="LICENSE"/>
            </fileset>
        </copy>
        <jar destfile="${plugin.jar}" basedir="${plugin.build.dir}">
            <!--
        ************************************************
        ** configure these properties. Most of them will be copied to the plugins
        ** manifest file. Property values will also show up in the list available
        ** plugins: http://josm.openstreetmap.de/wiki/Plugins.
        **
        ************************************************
    -->
            <manifest>
                <attribute name="Author" value="Upliner"/>
                <attribute name="Plugin-Class" value="ext_tools.ExtToolsPlugin"/>
                <attribute name="Plugin-Date" value="${version.entry.commit.date}"/>
                <attribute name="Plugin-Description" value="Use external scripts in JOSM"/>
                <attribute name="Plugin-Icon" value="images/ext.png"/>
                <attribute name="Plugin-Link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/ExtTools"/>
                <attribute name="Plugin-Mainversion" value="${plugin.main.version}"/>
                <attribute name="Plugin-Version" value="${version.entry.commit.revision}"/>
            </manifest>
        </jar>
    </target>
    <!--
    **********************************************************
    ** revision - extracts the current revision number for the
    **    file build.number and stores it in the XML property
    **    version.*
    **********************************************************
    -->
    <target name="revision">
        <exec append="false" output="REVISION" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="."/>
        </exec>
        <xmlproperty file="REVISION" prefix="version" keepRoot="false" collapseAttributes="true"/>
        <delete file="REVISION"/>
    </target>
    <!--
    **********************************************************
    ** clean - clean up the build environment
    **********************************************************
    -->
    <target name="clean">
        <delete dir="${plugin.build.dir}"/>
        <delete file="${plugin.jar}"/>
    </target>
    <!--
    **********************************************************
    ** install - install the plugin in your local JOSM installation
    **********************************************************
    -->
    <target name="install" depends="dist">
        <property environment="env"/>
        <condition property="josm.plugins.dir" value="${env.APPDATA}/JOSM/plugins" else="${user.home}/.josm/plugins">
            <and>
                <os family="windows"/>
            </and>
        </condition>
        <copy file="${plugin.jar}" todir="${josm.plugins.dir}"/>
    </target>
    <!--
    ************************** Publishing the plugin ***********************************
    -->
    <!--
        ** extracts the JOSM release for the JOSM version in ../core and saves it in the
        ** property ${coreversion.info.entry.revision}
        **
        -->
    <target name="core-info">
        <exec append="false" output="core.info.xml" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="../../core"/>
        </exec>
        <xmlproperty file="core.info.xml" prefix="coreversion" keepRoot="true" collapseAttributes="true"/>
        <echo>Building against core revision ${coreversion.info.entry.revision}.</echo>
        <echo>Plugin-Mainversion is set to ${plugin.main.version}.</echo>
        <delete file="core.info.xml"/>
    </target>
    <!--
        ** commits the source tree for this plugin
        -->
    <target name="commit-current">
        <echo>Commiting the plugin source with message '${commit.message}' ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="commit"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="."/>
        </exec>
    </target>
    <!--
        ** updates (svn up) the source tree for this plugin
        -->
    <target name="update-current">
        <echo>Updating plugin source ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="."/>
        </exec>
        <echo>Updating ${plugin.jar} ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="../dist/${plugin.jar}"/>
        </exec>
    </target>
    <!--
        ** commits the plugin.jar
        -->
    <target name="commit-dist">
        <echo>
    ***** Properties of published ${plugin.jar} *****
    Commit message    : '${commit.message}'
    Plugin-Mainversion: ${plugin.main.version}
    JOSM build version: ${coreversion.info.entry.revision}
    Plugin-Version    : ${version.entry.commit.revision}
    ***** / Properties of published ${plugin.jar} *****

    Now commiting ${plugin.jar} ...
    </echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="commit"/>
            <arg value="${plugin.jar}"/>
        </exec>
    </target>
    <!-- ** make sure svn is present as a command line tool ** -->
    <target name="ensure-svn-present">
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false" failonerror="false" resultproperty="svn.exit.code">
            <env key="LANG" value="C"/>
            <arg value="--version"/>
        </exec>
        <fail message="Fatal: command 'svn --version' failed. Please make sure svn is installed on your system.">
            <!-- return code not set at all? Most likely svn isn't installed -->
            <condition>
                <not>
                    <isset property="svn.exit.code"/>
                </not>
            </condition>
        </fail>
        <fail message="Fatal: command 'svn --version' failed. Please make sure a working copy of svn is installed on your system.">
            <!-- error code from SVN? Most likely svn is not what we are looking on this system -->
            <condition>
                <isfailure code="${svn.exit.code}"/>
            </condition>
        </fail>
    </target>
    <target name="publish" depends="ensure-svn-present,core-info,commit-current,update-current,clean,dist,commit-dist">
    </target>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="geochat" default="dist" basedir=".">

    <!-- enter the SVN commit message -->
    <property name="commit.message" value="[josm_geochat] copypaste from keyboard, font size advanced parameters"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6756"/>

    <property name="plugin.author" value="Ilya Zverev"/>
    <property name="plugin.class" value="geochat.GeoChatPlugin"/>
    <property name="plugin.description" value="Talk with users editing the map nearby, be notified when someone comes close."/>
    <property name="plugin.icon" value="images/dialogs/geochat.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/GeoChat"/>

    <target name="additional-manifest">
        <manifest file="MANIFEST" mode="update">
            <attribute name="ru_Author" value="Илья Зверев"/>
            <attribute name="ru_Plugin-Description" value="Панель для общения с редактирующими карту поблизости, а также способ узнать, когда кто-то собирается править окрестности."/>
            <attribute name="ru_Plugin_Link" value="http://wiki.openstreetmap.org/wiki/RU:JOSM/Plugins/GeoChat"/>
        </manifest>
    </target>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>

</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="geotools" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Commit message"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="5236"/>
	
    <property name="plugin.author" value="Don-vip"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.geotools.GeoToolsPlugin"/>
    <property name="plugin.description" value="Provides parts of the GeoTools library for other JOSM plugins. Not meant to be installed directly by users, but rather as a dependency for other plugins."/>
    <property name="plugin.icon" value="images/compass.png"/>
    <!--<property name="plugin.link" value="..."/>-->
    <!--<property name="plugin.early" value="..."/>-->
    <property name="plugin.requires" value="jts"/>
    <property name="plugin.stage" value="20"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
	
    <!--
    **********************************************************
    ** post-dist - replaces files from the generated jar
    **********************************************************
    -->
    <target name="post-dist">
    	<move file="${plugin.jar}" todir="${plugin.build.dir}" />
    	<jar destfile="${plugin.jar}" filesetmanifest="merge">
            <fileset dir="jar"/>
    		<zipfileset src="${plugin.build.dir}/${ant.project.name}.jar">
                <exclude name="*.class"/>
    			<exclude name="*.html"/>
                <exclude name="META-INF/**/*"/>
                <exclude name="javax/*.txt"/>
    		</zipfileset>
    	    <zipfileset src="${plugin.build.dir}/${ant.project.name}.jar">
    	        <include name="META-INF/MANIFEST.MF"/>
    	        <include name="META-INF/*.jai"/>
    	    </zipfileset>
    	</jar>
    	<delete file="${plugin.build.dir}/${ant.project.name}.jar" />
    </target>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="globalsat" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Changed constructor signature of plugin main class"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>
    <!--
      ************************************************
      ** should not be necessary to change the following properties
     -->
    <property name="josm" location="../../core/dist/josm-custom.jar"/>
    <property name="plugin.dist.dir" value="../../dist"/>
    <property name="plugin.build.dir" value="build"/>
    <property name="plugin.jar" value="${plugin.dist.dir}/${ant.project.name}.jar"/>
    <property name="ant.build.javac.target" value="1.6"/>
    <property name="RXTX" location="./libs/RXTXcomm.jar"/>
    <target name="init">
        <mkdir dir="${plugin.build.dir}"/>
    </target>
    <target name="compile" depends="init">
        <echo message="creating ${plugin.jar}"/>
        <javac srcdir="src" debug="true" destdir="${plugin.build.dir}">
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <pathelement location="${josm}"/>
                <pathelement location="${RXTX}"/>
            </classpath>
        </javac>
    </target>
    <target name="dist" depends="compile,revision">
        <unjar dest="${plugin.build.dir}" src="${RXTX}"/>
        <copy todir="${plugin.build.dir}/images">
            <fileset dir="images"/>
        </copy>
        <copy todir="${plugin.build.dir}/data">
            <fileset dir="data"/>
        </copy>
        <jar destfile="${plugin.jar}" basedir="${plugin.build.dir}">
            <manifest>
                <attribute name="Author" value="Raphael Mack"/>
                <attribute name="Plugin-Class" value="org.openstreetmap.josm.plugins.globalsat.GlobalsatPlugin"/>
                <attribute name="Plugin-Date" value="${version.entry.commit.date}"/>
                <attribute name="Plugin-Description" value="Download GPS points from Globalsat dg100 data logger directly in JOSM."/>
                <attribute name="Plugin-Icon" value="images/globalsatImport.png"/>
                <attribute name="Plugin-Link" value="http://www.raphael-mack.de/josm-globalsat-gpx-import-plugin/"/>
                <attribute name="Plugin-Mainversion" value="${plugin.main.version}"/>
                <attribute name="Plugin-Version" value="${version.entry.commit.revision}"/>
            </manifest>
        </jar>
    </target>
    <target name="revision">
        <exec append="false" output="REVISION" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="."/>
        </exec>
        <xmlproperty file="REVISION" prefix="version" keepRoot="false" collapseAttributes="true"/>
        <delete file="REVISION"/>
    </target>
    <target name="clean">
        <delete dir="${plugin.build.dir}"/>
        <delete file="${plugin.jar}"/>
    </target>
    <target name="install" depends="dist">
        <property environment="env"/>
        <condition property="josm.plugins.dir" value="${env.APPDATA}/JOSM/plugins" else="${user.home}/.josm/plugins">
            <and>
                <os family="windows"/>
            </and>
        </condition>
        <copy file="${plugin.jar}" todir="${josm.plugins.dir}"/>
    </target>
    <!--
        ************************** Publishing the plugin ***********************************
        -->
    <!--
            ** extracts the JOSM release for the JOSM version in ../core and saves it in the
            ** property ${coreversion.info.entry.revision}
            **
            -->
    <target name="core-info">
        <exec append="false" output="core.info.xml" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="../../core"/>
        </exec>
        <xmlproperty file="core.info.xml" prefix="coreversion" keepRoot="true" collapseAttributes="true"/>
        <echo>Building against core revision ${coreversion.info.entry.revision}.</echo>
        <echo>Plugin-Mainversion is set to ${plugin.main.version}.</echo>
        <delete file="core.info.xml"/>
    </target>
    <!--
            ** commits the source tree for this plugin
            -->
    <target name="commit-current">
        <echo>Commiting the plugin source with message '${commit.message}' ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="commit"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="."/>
        </exec>
    </target>
    <!--
            ** updates (svn up) the source tree for this plugin
            -->
    <target name="update-current">
        <echo>Updating plugin source ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="."/>
        </exec>
        <echo>Updating ${plugin.jar} ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="../dist/${plugin.jar}"/>
        </exec>
    </target>
    <!--
            ** commits the plugin.jar
            -->
    <target name="commit-dist">
        <echo>
        ***** Properties of published ${plugin.jar} *****
        Commit message    : '${commit.message}'
        Plugin-Mainversion: ${plugin.main.version}
        JOSM build version: ${coreversion.info.entry.revision}
        Plugin-Version    : ${version.entry.commit.revision}
        ***** / Properties of published ${plugin.jar} *****

        Now commiting ${plugin.jar} ...
        </echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="commit"/>
            <arg value="${plugin.jar}"/>
        </exec>
    </target>
    <!-- ** make sure svn is present as a command line tool ** -->
    <target name="ensure-svn-present">
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false" failonerror="false" resultproperty="svn.exit.code">
            <env key="LANG" value="C"/>
            <arg value="--version"/>
        </exec>
        <fail message="Fatal: command 'svn --version' failed. Please make sure svn is installed on your system.">
            <!-- return code not set at all? Most likely svn isn't installed -->
            <condition>
                <not>
                    <isset property="svn.exit.code"/>
                </not>
            </condition>
        </fail>
        <fail message="Fatal: command 'svn --version' failed. Please make sure a working copy of svn is installed on your system.">
            <!-- error code from SVN? Most likely svn is not what we are looking on this system -->
            <condition>
                <isfailure code="${svn.exit.code}"/>
            </condition>
        </fail>
    </target>
    <target name="publish" depends="ensure-svn-present,core-info,commit-current,update-current,clean,dist,commit-dist">
    </target>
</project>
<?xml version="1.0" encoding="utf-8"?>
<!--
** This is a template build file for a JOSM  plugin.
**
** Maintaining versions
** ====================
** see README.template
**
** Usage 
** =====
** To build it run
**
**    > ant  dist
**
** To install the generated plugin locally (in you default plugin directory) run
**
**    > ant  install
**
** The generated plugin jar is not automatically available in JOSMs plugin configuration
** dialog. You have to check it in first.
**
** Use the ant target 'publish' to check in the plugin and make it available to other
** JOSM users:
**    set the properties commit.message and plugin.main.version
** and run
**    > ant  publish
**
**
-->
<project name="gpsblam" default="dist" basedir=".">

    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Commit message"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="4394"/>

    <!--
    **********************************************************
    ** include targets that all plugins have in common
    **********************************************************
    -->
    <import file="../build-common.xml"/>
  
    <!--
    **********************************************************
    ** dist - creates the plugin jar
    **********************************************************
    -->
    <target name="dist" depends="compile,revision">
        <echo message="creating ${ant.project.name}.jar ... "/>
        <copy todir="${plugin.build.dir}/resources">
            <fileset dir="resources"/>
        </copy>
        <copy todir="${plugin.build.dir}/images">
            <fileset dir="images"/>
        </copy>
        <copy todir="${plugin.build.dir}/data">
            <fileset dir="data"/>
        </copy>
        <copy todir="${plugin.build.dir}">
            <fileset dir=".">
                <include name="README"/>
                <include name="LICENSE"/>
            </fileset>
        </copy>
        <jar destfile="${plugin.jar}" basedir="${plugin.build.dir}">
            <!--
            ************************************************
            ** configure these properties. Most of them will be copied to the plugins
            ** manifest file. Property values will also show up in the list available
            ** plugins: http://josm.openstreetmap.de/wiki/Plugins.
            **
            ************************************************
            -->
            <manifest>
                <attribute name="Author" value="Russell Edwards"/>
                <attribute name="Plugin-Class" value="org.openstreetmap.josm.plugins.gpsblam.GPSBlamPlugin"/>
                <attribute name="Plugin-Date" value="${version.entry.commit.date}"/>
                <attribute name="Plugin-Description" value="Analyse a set of GPS points to obtain its centre and direction of spread."/>
                <attribute name="Plugin-Icon" value="images/mapmode/gpsblam_mode.png"/>
                <attribute name="Plugin-Link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/GPSBlam"/>
                <attribute name="Plugin-Mainversion" value="${plugin.main.version}"/>
                <attribute name="Plugin-Version" value="${version.entry.commit.revision}"/>
            </manifest>
        </jar>
    </target>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="gpxfilter" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="GPXFilter: moved to Alt-Shift-X"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>

    <property name="plugin.author" value="Upliner"/>
    <property name="plugin.class" value="gpxfilter.GpxFilterPlugin"/>
    <property name="plugin.description" value="Allows to filter out unnecessary GPS tracks"/>
<!--    <property name="plugin.icon" value="images/preferences/walkingpapers.png"/>-->
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/GPXFilter"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="graphview" default="dist" basedir=".">
    <property name="commit.message" value="option to change graph colors; closes ticket 5523 in JOSM Trac"/>
    <property name="plugin.main.version" value="6162"/>
    <property name="josm" location="../../core/dist/josm-custom.jar"/>
    <property name="plugin.build.dir" value="build"/>
    <property name="plugin.src.dir" value="src"/>
    <!-- this is the directory where the plugin jar is copied to -->
    <property name="plugin.dist.dir" value="../../dist"/>
    <property name="ant.build.javac.target" value="1.6"/>
    <property name="plugin.dist.dir" value="../../dist"/>
    <property name="plugin.jar" value="${plugin.dist.dir}/${ant.project.name}.jar"/>
    <!--
    **********************************************************
    ** init - initializes the build
    **********************************************************
    -->
    <target name="init">
        <mkdir dir="${plugin.build.dir}"/>
    </target>
    <!--
    **********************************************************
    ** compile - complies the source tree
    **********************************************************
    -->
    <target name="compile" depends="init">
        <echo message="compiling sources for  ${plugin.jar} ... "/>
        <javac srcdir="src" classpath="${josm}" debug="true" destdir="${plugin.build.dir}">
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>
    <!--
    **********************************************************
    ** dist - creates the plugin jar
    **********************************************************
    -->
    <target name="dist" depends="compile,revision">
        <echo message="creating ${plugin.jar} ... "/>
        <copy todir="${plugin.build.dir}/images">
            <fileset dir="images"/>
        </copy>
        <copy todir="${plugin.build.dir}/data">
            <fileset dir="data"/>
        </copy>
        <copy todir="${plugin.build.dir}/files">
            <fileset dir="files"/>
        </copy>
        <copy todir="${plugin.build.dir}">
            <fileset dir=".">
                <include name="LICENSE"/>
            </fileset>
        </copy>
        <jar destfile="${plugin.jar}" basedir="${plugin.build.dir}">
            <manifest>
                <attribute name="Author" value="Tobias Knerr"/>
                <attribute name="Plugin-Class" value="org.openstreetmap.josm.plugins.graphview.plugin.GraphViewPlugin"/>
                <attribute name="Plugin-Date" value="${version.entry.commit.date}"/>
                <attribute name="Plugin-Description" value="Visualizes routing information as a routing graph."/>
                <attribute name="Plugin-Icon" value="images/preferences/graphview.png"/>
                <attribute name="Plugin-Link" value="http://wiki.openstreetmap.org/index.php/JOSM/Plugins/Graphview"/>
                <attribute name="Plugin-Mainversion" value="${plugin.main.version}"/>
                <attribute name="Plugin-Version" value="${version.entry.commit.revision}"/>
            </manifest>
        </jar>
    </target>
    <!--
    **********************************************************
    ** revision - extracts the current revision number for the
    **    file build.number and stores it in the XML property
    **    version.*
    **********************************************************
    -->
    <target name="revision">
        <exec append="false" output="REVISION" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="."/>
        </exec>
        <xmlproperty file="REVISION" prefix="version" keepRoot="false" collapseAttributes="true"/>
        <delete file="REVISION"/>
    </target>
    <!--
    **********************************************************
    ** clean - clean up the build environment
    **********************************************************
    -->
    <target name="clean">
        <delete dir="${plugin.build.dir}"/>
        <delete file="${plugin.jar}"/>
    </target>
    <!--
    **********************************************************
    ** install - install the plugin in your local JOSM installation
    **********************************************************
    -->
    <target name="install" depends="dist">
        <property environment="env"/>
        <condition property="josm.plugins.dir" value="${env.APPDATA}/JOSM/plugins" else="${user.home}/.josm/plugins">
            <and>
                <os family="windows"/>
            </and>
        </condition>
        <copy file="${plugin.jar}" todir="${josm.plugins.dir}"/>
    </target>
    <!--
         ************************** Publishing the plugin ***********************************
        -->
    <!--
        ** extracts the JOSM release for the JOSM version in ../core and saves it in the
        ** property ${coreversion.info.entry.revision}
        **
        -->
    <target name="core-info">
        <exec append="false" output="core.info.xml" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="../../core"/>
        </exec>
        <xmlproperty file="core.info.xml" prefix="coreversion" keepRoot="true" collapseAttributes="true"/>
        <echo>Building against core revision ${coreversion.info.entry.revision}.</echo>
        <echo>Plugin-Mainversion is set to ${plugin.main.version}.</echo>
        <delete file="core.info.xml"/>
    </target>
    <!--
        ** commits the source tree for this plugin
        -->
    <target name="commit-current">
        <echo>Commiting the plugin source with message '${commit.message}' ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="commit"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="."/>
        </exec>
    </target>
    <!--
        ** updates (svn up) the source tree for this plugin
        -->
    <target name="update-current">
        <echo>Updating plugin source ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="."/>
        </exec>
        <echo>Updating ${plugin.jar} ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="../dist/${plugin.jar}"/>
        </exec>
    </target>
    <!--
        ** commits the plugin.jar
        -->
    <target name="commit-dist">
        <echo>
    ***** Properties of published ${plugin.jar} *****
    Commit message    : '${commit.message}'
    Plugin-Mainversion: ${plugin.main.version}
    JOSM build version: ${coreversion.info.entry.revision}
    Plugin-Version    : ${version.entry.commit.revision}
    ***** / Properties of published ${plugin.jar} *****

    Now commiting ${plugin.jar} ...
    </echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="commit"/>
            <arg value="${plugin.jar}"/>
        </exec>
    </target>
    <!-- ** make sure svn is present as a command line tool ** -->
    <target name="ensure-svn-present">
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false" failonerror="false" resultproperty="svn.exit.code">
            <env key="LANG" value="C"/>
            <arg value="--version"/>
        </exec>
        <fail message="Fatal: command 'svn --version' failed. Please make sure svn is installed on your system.">
            <!-- return code not set at all? Most likely svn isn't installed -->
            <condition>
                <not>
                    <isset property="svn.exit.code"/>
                </not>
            </condition>
        </fail>
        <fail message="Fatal: command 'svn --version' failed. Please make sure a working copy of svn is installed on your system.">
            <!-- error code from SVN? Most likely svn is not what we are looking on this system -->
            <condition>
                <isfailure code="${svn.exit.code}"/>
            </condition>
        </fail>
    </target>
    <target name="publish" depends="ensure-svn-present,core-info,commit-current,update-current,clean,dist,commit-dist">
        </target>
</project>
﻿<?xml version="1.0" encoding="utf-8"?>
<project name="imagery-xml-bounds" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Commit message"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6968"/>
	
    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Don-vip"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.imageryxmlbounds.ImageryXmlBoundsPlugin"/>
    <property name="plugin.description" value="Generate Imagery XML bounds from a multipolygon"/>
    <property name="plugin.icon" value="images/xml_24.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/Imagery-XML-Bounds"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>

</project><?xml version="1.0" encoding="utf-8"?>
<!--
** This is a template build file for a JOSM  plugin.
**
** Maintaining versions
** ====================
** See README.template
**
** Usage
** =====
** Call "ant help" to get possible build targets.
**
-->
<project name="imagery_offset_db" default="dist" basedir=".">

    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Imagery Offset Database"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="4666"/>

    <property name="plugin.author" value="Ilya Zverev"/>
    <property name="plugin.class" value="iodb.ImageryOffsetPlugin"/>
    <property name="plugin.description" value="Database of imagery offsets: share and aquire imagery offsets with one button."/>
    <property name="plugin.icon" value="images/iodb.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/Imagery_Offset_Database"/>

    <target name="additional-manifest">
        <manifest file="MANIFEST" mode="update">
            <attribute name="ru_Author" value="Илья Зверев"/>
            <attribute name="ru_Plugin-Description" value="База данных смещений подложек: загружайте и делитесь смещениями одной кнопкой."/>
            <attribute name="ru_Plugin-Link" value="http://wiki.openstreetmap.org/wiki/RU:Imagery_Offset_Database"/>
        </manifest>
    </target>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>

</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="imageryadjust" default="dist" basedir=".">
    <property name="commit.message" value="ImageryAdjust: Adjust while holding shortcut key"/>
    <property name="plugin.main.version" value="6162"/>

    <property name="plugin.author" value="Upliner"/>
    <property name="plugin.class" value="imageryadjust.ImageryAdjustPlugin"/>
    <property name="plugin.description" value="WMSPlugin-style imagery adjustment mapmode"/>
    <property name="plugin.icon" value="images/mapmode/adjustimg.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/ImageryAdjust"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
</project>
<?xml version="1.0" encoding="utf-8"?>
<!--
** This is a template build file for a JOSM  plugin.
**
** Maintaining versions
** ====================
** See README.template
**
** Usage
** =====
** Call "ant help" to get possible build targets.
**
-->
<project name="ImageryCache" default="dist" basedir=".">

    <!-- enter the SVN commit message -->
    <property name="commit.message" value="[JOSM_ImageryCache]: correct database cleaning, at last"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="5779"/>

    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Alexei Kasatkin"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.imagerycache.ImageryCachePlugin"/>
    <property name="plugin.description" value="This experimental plugin allows JOSM to store tile cache in database files, not in huge cache directories"/>
    <property name="plugin.icon" value="images/session.png"/> 
<!--    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/ImageryCache"/> -->
    <!--<property name="plugin.early" value="..."/>-->
    <!--<property name="plugin.requires" value="..."/>-->
    <!--<property name="plugin.stage" value="..."/>-->

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
    <target name="runmain" depends="install">
        <java classname="${plugin.class}" classpath="${plugin.jar};${josm}" fork="true">
        </java>
    </target>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="ImageWayPoint" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="[josm/ImageWayPoint] move opening to File/Open"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>
    
    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Flint"/>
    <property name="plugin.class" value="org.insignificant.josm.plugins.imagewaypoint.ImageWayPointPlugin"/>
    <property name="plugin.description" value="Another plugin to match images to the waypoints in a GPX file. A match is made when the ''name'', ''cmt'' or ''desc'' attribute of a waypoint tag matches the filename of an image."/>
    <property name="plugin.icon" value="images/dialogs/imagewaypoint.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/ImageWayPoint"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="importvec" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Remove the action, add importing SVG to File/Open"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>

    <property name="plugin.author" value="Upliner"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.importvec.ImportVecPlugin"/>
    <property name="plugin.description" value="Import vector graphics (SVG)"/>
    <!-- <property name="plugin.icon" value=""/> -->
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/ImportVec"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
</project>
<?xml version="1.0" encoding="utf-8"?>
<!--
** This is a template build file for a JOSM  plugin.
**
** Maintaining versions
** ====================
** see README.template
**
** Usage
** =====
** To build it run
**
**    > ant  dist
**
** To install the generated plugin locally (in you default plugin directory) run
**
**    > ant  install
**
** The generated plugin jar is not automatically available in JOSMs plugin configuration
** dialog. You have to check it in first.
**
** Use the ant target 'publish' to check in the plugin and make it available to other
** JOSM users:
**    set the properties commit.message and plugin.main.version
** and run
**    > ant  publish
**
**
-->
<project name="InfoMode" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="InfoMode : for shortcurt parser"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="5035"/>
    <!-- should not be necessary to change the following properties -->
    <property name="josm" location="../../core/dist/josm-custom.jar"/>
    <property name="plugin.build.dir" value="build"/>
    <property name="plugin.src.dir" value="src"/>
    <!-- this is the directory where the plugin jar is copied to -->
    <property name="plugin.dist.dir" value="../../dist"/>
    <property name="ant.build.javac.target" value="1.6"/>
    <property name="plugin.dist.dir" value="../../dist"/>
    <property name="plugin.jar" value="${plugin.dist.dir}/${ant.project.name}.jar"/>
    <!--
    **********************************************************
    ** init - initializes the build
    **********************************************************
    -->
    <target name="init">
        <mkdir dir="${plugin.build.dir}"/>
    </target>
    <!--
    **********************************************************
    ** compile - complies the source tree
    **********************************************************
    -->
    <target name="compile" depends="init">
        <echo message="compiling sources for  ${plugin.jar} ... "/>
        <javac srcdir="src" classpath="${josm}" debug="true" destdir="${plugin.build.dir}">
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>
    <!--
    **********************************************************
    ** dist - creates the plugin jar
    **********************************************************
    -->
    <target name="dist" depends="compile,revision">
        <echo message="creating ${ant.project.name}.jar ... "/>
        <copy todir="${plugin.build.dir}/resources">
            <fileset dir="resources"/>
        </copy>
        <copy todir="${plugin.build.dir}/images">
            <fileset dir="images"/>
        </copy>
        <copy todir="${plugin.build.dir}/data">
            <fileset dir="data"/>
        </copy>
        <copy todir="${plugin.build.dir}">
            <fileset dir=".">
                <include name="README"/>
                <include name="LICENSE"/>
            </fileset>
        </copy>
        <jar destfile="${plugin.jar}" basedir="${plugin.build.dir}">
            <!--
            ************************************************
            ** configure these properties. Most of them will be copied to the plugins
            ** manifest file. Property values will also show up in the list available
            ** plugins: http://josm.openstreetmap.de/wiki/Plugins.
            **
            ************************************************
            -->
            <manifest>
                <attribute name="Author" value="Alexei Kasatkin"/>
                <attribute name="Plugin-Class" value="org.openstreetmap.josm.plugins.infomode.InfoModePlugin"/>
                <attribute name="Plugin-Date" value="${version.entry.commit.date}"/>
                <attribute name="Plugin-Description" value="Extra information about current layer objects pop ups - currently GPX trackpoint info"/>
                <attribute name="Plugin-Icon" value="images/mapmode/infomode.png"/>
                <attribute name="Plugin-Link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/InfoMode"/>
                <attribute name="ru_Plugin-Link" value="http://wiki.openstreetmap.org/wiki/RU:JOSM/Plugins/InfoMode"/>
                <attribute name="Plugin-Mainversion" value="${plugin.main.version}"/>
                <attribute name="Plugin-Version" value="${version.entry.commit.revision}"/>
            </manifest>
        </jar>
    </target>
    <!--
    **********************************************************
    ** revision - extracts the current revision number for the
    **    file build.number and stores it in the XML property
    **    version.*
    **********************************************************
    -->
    <target name="revision">
        <exec append="false" output="REVISION" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="."/>
        </exec>
        <xmlproperty file="REVISION" prefix="version" keepRoot="false" collapseAttributes="true"/>
        <delete file="REVISION"/>
    </target>
    <!--
    **********************************************************
    ** clean - clean up the build environment
    **********************************************************
    -->
    <target name="clean">
        <delete dir="${plugin.build.dir}"/>
        <delete file="${plugin.jar}"/>
    </target>
    <!--
    **********************************************************
    ** install - install the plugin in your local JOSM installation
    **********************************************************
    -->
    <target name="install" depends="dist">
        <property environment="env"/>
        <condition property="josm.plugins.dir" value="${env.APPDATA}/JOSM/plugins" else="${user.home}/.josm/plugins">
            <and>
                <os family="windows"/>
            </and>
        </condition>
        <copy file="${plugin.jar}" todir="${josm.plugins.dir}"/>
    </target>
    <!--
    ************************** Publishing the plugin *********************************** 
    -->
    <!--
    ** extracts the JOSM release for the JOSM version in ../core and saves it in the 
    ** property ${coreversion.info.entry.revision}
    -->
    <target name="core-info">
        <exec append="false" output="core.info.xml" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="../../core"/>
        </exec>
        <xmlproperty file="core.info.xml" prefix="coreversion" keepRoot="true" collapseAttributes="true"/>
        <echo>Building against core revision ${coreversion.info.entry.revision}.</echo>
        <echo>Plugin-Mainversion is set to ${plugin.main.version}.</echo>
        <delete file="core.info.xml"/>
    </target>
    <!-- commits the source tree for this plugin -->
    <target name="commit-current">
        <echo>Commiting the plugin source with message '${commit.message}' ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="commit"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="."/>
        </exec>
    </target>
    <!-- updates (svn up) the source tree for this plugin -->
    <target name="update-current">
        <echo>Updating plugin source ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="."/>
        </exec>
        <echo>Updating ${plugin.jar} ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="../dist/${plugin.jar}"/>
        </exec>
    </target>
    <!-- commits the plugin.jar -->
    <target name="commit-dist">
        <echo>
    ***** Properties of published ${plugin.jar} *****
    Commit message    : '${commit.message}'                    
    Plugin-Mainversion: ${plugin.main.version}
    JOSM build version: ${coreversion.info.entry.revision}
    Plugin-Version    : ${version.entry.commit.revision}
    ***** / Properties of published ${plugin.jar} *****                    
                        
    Now commiting ${plugin.jar} ...
    </echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="commit"/>
            <arg value="${plugin.jar}"/>
        </exec>
    </target>
    <!-- make sure svn is present as a command line tool -->
    <target name="ensure-svn-present">
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false" failonerror="false" resultproperty="svn.exit.code">
            <env key="LANG" value="C"/>
            <arg value="--version"/>
        </exec>
        <fail message="Fatal: command 'svn --version' failed. Please make sure svn is installed on your system.">
            <!-- return code not set at all? Most likely svn isn't installed -->
            <condition>
                <not>
                    <isset property="svn.exit.code"/>
                </not>
            </condition>
        </fail>
        <fail message="Fatal: command 'svn --version' failed. Please make sure a working copy of svn is installed on your system.">
            <!-- error code from SVN? Most likely svn is not what we are looking on this system -->
            <condition>
                <isfailure code="${svn.exit.code}"/>
            </condition>
        </fail>
    </target>
    <target name="publish" depends="ensure-svn-present,core-info,commit-current,update-current,clean,dist,commit-dist">
    </target>
    <target name="runjosm" depends="install">
        <java jar="${josm}" fork="true">
            <arg line="../../core/data_nodist/munich.gpx"/>
        </java>
    </target>

</project>
<?xml version="1.0" encoding="utf-8"?>
<!--
** This is a template build file for a JOSM  plugin.
**
** Maintaining versions
** ====================
** see README.template
**
** Usage
** =====
** To build it run
**
**    > ant  dist
**
** To install the generated plugin locally (in you default plugin directory) run
**
**    > ant  install
**
** The generated plugin jar is not automatically available in JOSMs plugin configuration
** dialog. You have to check it in first.
**
** Use the ant target 'publish' to check in the plugin and make it available to other
** JOSM users:
**    set the properties commit.message and plugin.main.version
** and run
**    > ant  publish
**
**
-->
<project name="irsrectify" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="irsrectify shortcut confilct"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="4980"/>
    <!--
      ************************************************
      ** should not be necessary to change the following properties
     -->
    <property name="josm" location="../../core/dist/josm-custom.jar"/>
    <property name="plugin.build.dir" value="build"/>
    <property name="plugin.src.dir" value="src"/>
    <!-- this is the directory where the plugin jar is copied to -->
    <property name="plugin.dist.dir" value="../../dist"/>
    <property name="ant.build.javac.target" value="1.6"/>
    <property name="plugin.dist.dir" value="../../dist"/>
    <property name="plugin.jar" value="${plugin.dist.dir}/${ant.project.name}.jar"/>
    <!--
    **********************************************************
    ** init - initializes the build
    **********************************************************
    -->
    <target name="init">
        <mkdir dir="${plugin.build.dir}"/>
    </target>
    <!--
    **********************************************************
    ** compile - complies the source tree
    **********************************************************
    -->
    <target name="compile" depends="init">
        <echo message="compiling sources for  ${plugin.jar} ... "/>
        <javac srcdir="src" classpath="${josm}" debug="true" destdir="${plugin.build.dir}">
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>
    <!--
    **********************************************************
    ** dist - creates the plugin jar
    **********************************************************
    -->
    <target name="dist" depends="compile,revision">
        <echo message="creating ${ant.project.name}.jar ... "/>
        <copy todir="${plugin.build.dir}/images">
            <fileset dir="images"/>
        </copy>
        <copy todir="${plugin.build.dir}/data">
            <fileset dir="data"/>
        </copy>
        <copy todir="${plugin.build.dir}">
            <fileset dir=".">
                <include name="README"/>
                <include name="LICENSE"/>
            </fileset>
        </copy>
        <jar destfile="${plugin.jar}" basedir="${plugin.build.dir}">
            <!--
        ************************************************
        ** configure these properties. Most of them will be copied to the plugins
        ** manifest file. Property values will also show up in the list available
        ** plugins: http://josm.openstreetmap.de/wiki/Plugins.
        **
        ************************************************
    -->
            <manifest>
                <attribute name="Author" value="Ilya Zverev"/>
                <attribute name="Plugin-Class" value="irsrectify.IRSRectifyPlugin"/>
                <attribute name="Plugin-Date" value="${version.entry.commit.date}"/>
                <attribute name="Plugin-Description" value="A helper for IRS satellite adjustment."/>
                <attribute name="ru_Plugin-Description" value="Удобный инструмент создания файлов привязки космоснимков IRS."/>
                <attribute name="Plugin-Icon" value="images/irsrectify.png"/>
                <attribute name="Plugin-Link" value="http://forum.openstreetmap.org/viewtopic.php?id=6817"/>
                <attribute name="Plugin-Mainversion" value="${plugin.main.version}"/>
                <attribute name="Plugin-Version" value="${version.entry.commit.revision}"/>
            </manifest>
        </jar>
    </target>
    <!--
    **********************************************************
    ** revision - extracts the current revision number for the
    **    file build.number and stores it in the XML property
    **    version.*
    **********************************************************
    -->
    <target name="revision">
        <exec append="false" output="REVISION" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="."/>
        </exec>
        <xmlproperty file="REVISION" prefix="version" keepRoot="false" collapseAttributes="true"/>
        <delete file="REVISION"/>
    </target>
    <!--
    **********************************************************
    ** clean - clean up the build environment
    **********************************************************
    -->
    <target name="clean">
        <delete dir="${plugin.build.dir}"/>
        <delete file="${plugin.jar}"/>
    </target>
    <!--
    **********************************************************
    ** install - install the plugin in your local JOSM installation
    **********************************************************
    -->
    <target name="install" depends="dist">
        <property environment="env"/>
        <condition property="josm.plugins.dir" value="${env.APPDATA}/JOSM/plugins" else="${user.home}/.josm/plugins">
            <and>
                <os family="windows"/>
            </and>
        </condition>
        <copy file="${plugin.jar}" todir="${josm.plugins.dir}"/>
    </target>
    <!--
    ************************** Publishing the plugin *********************************** 
    -->
    <!--
        ** extracts the JOSM release for the JOSM version in ../core and saves it in the 
        ** property ${coreversion.info.entry.revision}
        **
        -->
    <target name="core-info">
        <exec append="false" output="core.info.xml" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="../../core"/>
        </exec>
        <xmlproperty file="core.info.xml" prefix="coreversion" keepRoot="true" collapseAttributes="true"/>
        <echo>Building against core revision ${coreversion.info.entry.revision}.</echo>
        <echo>Plugin-Mainversion is set to ${plugin.main.version}.</echo>
        <delete file="core.info.xml"/>
    </target>
    <!--
        ** commits the source tree for this plugin
        -->
    <target name="commit-current">
        <echo>Commiting the plugin source with message '${commit.message}' ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="commit"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="."/>
        </exec>
    </target>
    <!--
        ** updates (svn up) the source tree for this plugin
        -->
    <target name="update-current">
        <echo>Updating plugin source ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="."/>
        </exec>
        <echo>Updating ${plugin.jar} ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="../dist/${plugin.jar}"/>
        </exec>
    </target>
    <!--
        ** commits the plugin.jar 
        -->
    <target name="commit-dist">
        <echo>
    ***** Properties of published ${plugin.jar} *****
    Commit message    : '${commit.message}'                    
    Plugin-Mainversion: ${plugin.main.version}
    JOSM build version: ${coreversion.info.entry.revision}
    Plugin-Version    : ${version.entry.commit.revision}
    ***** / Properties of published ${plugin.jar} *****                    
                        
    Now commiting ${plugin.jar} ...
    </echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="commit"/>
            <arg value="${plugin.jar}"/>
        </exec>
    </target>
    <!-- ** make sure svn is present as a command line tool ** -->
    <target name="ensure-svn-present">
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false" failonerror="false" resultproperty="svn.exit.code">
            <env key="LANG" value="C"/>
            <arg value="--version"/>
        </exec>
        <fail message="Fatal: command 'svn --version' failed. Please make sure svn is installed on your system.">
            <!-- return code not set at all? Most likely svn isn't installed -->
            <condition>
                <not>
                    <isset property="svn.exit.code"/>
                </not>
            </condition>
        </fail>
        <fail message="Fatal: command 'svn --version' failed. Please make sure a working copy of svn is installed on your system.">
            <!-- error code from SVN? Most likely svn is not what we are looking on this system -->
            <condition>
                <isfailure code="${svn.exit.code}"/>
            </condition>
        </fail>
    </target>
    <target name="publish" depends="ensure-svn-present,core-info,commit-current,update-current,clean,dist,commit-dist">
    </target>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="jts" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Commit message"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>
    
    <property name="plugin.author" value="Josh Doe &lt;josh@joshdoe.com&gt;"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.jts.JTSPlugin"/>
    <property name="plugin.description" value="Provides Java Topology Suite (JTS) library and related utilities. Not meant to be installed directly by users, but rather as a dependency for other plugins."/>
    <property name="plugin.icon" value="images/jts.png"/>
    <!--<property name="plugin.link" value="..."/>-->
    <!--<property name="plugin.early" value="..."/>-->
    <!-- <property name="plugin.requires" value=""/> -->
    <property name="plugin.stage" value="10"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="junctionchecking" default="dist" basedir=".">
    <property name="commit.message" value="Changed the constructor signature of the plugin main class"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>
    
    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Jörg Possin"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.JunctionChecker.JunctionCheckerPlugin"/>
    <property name="plugin.description" value="creates a channel digraph and checks a subset of channels if it is a junction or searches in a subset of channels for junctions"/>
    <property name="plugin.icon" value="images/dialogs/junctionchecker.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/index.php/JOSM/Plugins/JunctionChecking"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
    
    <target name="additional-manifest">
        <manifest file="MANIFEST" mode="update">
            <attribute name="Main-Class" value="org.openstreetmap.josm.plugins.JunctionChecker.commandlineinterface.CLI"/>
        </manifest>
    </target>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="lakewalker" default="dist" basedir=".">

    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Changed the constructor signature of the plugin main class"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>

    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Brent Easton, Jason Reid"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.lakewalker.LakewalkerPlugin"/>
    <property name="plugin.description" value="Helps vectorizing WMS images."/>
    <property name="plugin.icon" value="images/lakewalker-sml.png"/>
    <property name="plugin.link" value=""/>
    <!--<property name="plugin.early" value="..."/>-->
    <!--<property name="plugin.requires" value="..."/>-->
    <!--<property name="plugin.stage" value="..."/>-->

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
    
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="livegps" default="dist" basedir=".">
    <property name="commit.message" value="Changed the constructor signature of the plugin main class"/>
    <property name="plugin.main.version" value="6756"/>
	
    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Frederik Ramm"/>
    <property name="plugin.class" value="livegps.LiveGpsPlugin"/>
    <property name="plugin.description" value="Support live GPS input (moving dot) through a connection to gpsd server."/>
    <property name="plugin.icon" value="images/dialogs/livegps.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/index.php/JOSM/Plugins/LiveGPS"/>
    <property name="plugin.stage" value="50"/>
    
    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>

</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="log4j" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Commit message"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="5236"/>

	<!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Don-vip"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.log4j.Log4jPlugin"/>
    <property name="plugin.description" value="Provides the Log4j library for other JOSM plugins. Not meant to be installed directly by users, but rather as a dependency for other plugins."/>
    <!--<property name="plugin.icon" value="..."/>-->
    <!--<property name="plugin.link" value="..."/>-->
    <property name="plugin.early" value="true"/>
    <!--<property name="plugin.requires" value="..."/>-->
    <property name="plugin.stage" value="5"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>

</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="mapdust" default="dist" basedir=".">
    <!-- properties -->
    <property name="commit.message" value="MapDust bug reporter plugin"/>
    <property name="plugin.main.version" value="6162"/>

    <property name="apidoc.dir" value="doc"/>

    <!--
    **********************************************************
    ** include targets that all plugins have in common
    **********************************************************
    -->
    <import file="../build-common.xml"/>
  
    <!-- classpath -->
    <path id="classpath">
        <fileset dir="${plugin.lib.dir}" includes="**/*.jar"/>
        <pathelement path="${josm}"/>
    </path>

    <!--
    **********************************************************
    ** compile - complies the source tree
    **********************************************************
    -->
    <target name="compile" depends="init">
        <echo message="compiling sources for ${plugin.jar} ..."/>
        <javac srcdir="src" classpathref="classpath" debug="true" destdir="${plugin.build.dir}" includeantruntime="false">
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>

    <target name="clean">
        <delete dir="${plugin.build.dir}"/>
        <delete dir="${apidoc.dir}"/>
        <delete file="${plugin.jar}"/>
    </target>

    <!-- creates the javadocs -->
    <target name="javadoc">
        <mkdir dir="${apidoc.dir}"/>
        <javadoc destdir="${apidoc.dir}" source="1.6" classpathref="classpath" windowtitle="MapDust plugin API">
            <link href="http://java.sun.com/javase/6/docs/api/"/>
            <link href="http://docs.jboss.org/hibernate/stable/core/api/"/>
            <packageset dir="${plugin.src.dir}">
            </packageset>
        </javadoc>
    </target>

    <!-- creates the .jar file of the plugin -->
    <target name="dist" depends="compile,revision">
        <echo message="creating ${ant.project.name}.jar ... "/>
        <copy todir="${plugin.build.dir}">
            <fileset dir="conf"/>
        </copy>
        <copy todir="${plugin.build.dir}/images">
            <fileset dir="images"/>
        </copy>
        <copy todir="${plugin.build.dir}/data">
            <fileset dir="data"/>
        </copy>
        <copy todir="${plugin.build.dir}">
            <fileset dir=".">
                <include name="README"/>
                <include name="LICENSE"/>
            </fileset>
        </copy>
        <jar destfile="${plugin.jar}" basedir="${plugin.build.dir}">
            <zipfileset src="lib/gson-1.5.jar" includes="**/*.class"/>
            <manifest>
                <attribute name="Author" value="Beata Jancso"/>
                <attribute name="Plugin-Class" value="org.openstreetmap.josm.plugins.mapdust.MapdustPlugin"/>
                <attribute name="Plugin-Date" value="${version.entry.commit.date}"/>
                <attribute name="Plugin-Description" value="The MapDust Plug-In shows the MapDust bug reports on the map. You can create, close,invalidate, re-open and comment bug reports by using this plugin."/>
                <attribute name="Plugin-Link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/MapDust"/>
                <attribute name="Plugin-Mainversion" value="${plugin.main.version}"/>
                <attribute name="Plugin-Version" value="${version.entry.commit.revision}"/>
                <attribute name="Plugin-Icon" value="images/dialogs/mapdust_icon25.png"/>
            </manifest>
        </jar>
    </target>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="measurement" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="recompile dure to core change"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6422"/>
    
    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Raphael Mack, Reza Mohammadi"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.measurement.MeasurementPlugin"/>
    <property name="plugin.description" value="Provide a measurement dialog and a layer to measure length and angle of segments, area surrounded by a (simple) closed way and create measurement paths (which also can be imported from a gps layer)."/>
    <property name="plugin.icon" value="images/dialogs/measure.png"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="merge-overlap" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="MergeOverlap: help shortcut parser, rebuild"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6340"/>
    
    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Stéphane Brunner"/>
    <property name="plugin.class" value="mergeoverlap.MergeOverlapPlugin"/>
    <property name="plugin.description" value="Merge overlapping part of ways."/>
    <property name="plugin.icon" value="images/merge_overlap.png"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="michigan_left" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Changed the constructor signature of the plugin main class"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>
    	
    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Nakor"/>
    <property name="plugin.class" value="MichiganLeft.MichiganLeft"/>
    <property name="plugin.description" value="Adds no left turn for sets of 4 or 5 ways"/>
    <property name="plugin.icon" value="images/michigan_left.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/MichiganLeft"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="mirrored_download" default="dist" basedir=".">

    <!-- enter the SVN commit message -->
    <property name="commit.message" value=""/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6589"/>

    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Roland M. Olbricht"/>
    <property name="plugin.class" value="mirrored_download.MirroredDownloadPlugin"/>
    <property name="plugin.description" value="Simplifies download from different read-only APIs."/>
    <property name="plugin.icon" value="images/download_mirror.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/mirrored_download"/>

	<!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>

</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="namemanager" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="..."/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>

    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Rafal Jachowicz: rjachow@gmail.com"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.namemanager.NameManagerPlugin"/>
    <property name="plugin.description" value="Allows to attribute tags to all objects in any selected area at once"/>
    <property name="plugin.pl_description" value="Pozwala na dodawanie, edycję i usuwanie tagów znajdujących się we wskazanym obszarze na raz"/>
<!--    <property name="plugin.icon" value="images/michigan_left.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/MichiganLeft"/>-->

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
</project>
<?xml version="1.0" encoding="utf-8"?>
<!--
** Maintaining versions
** ====================
** see README.template
**
** Usage
** =====
** To build it run
**
**    > ant
** or
**    > ant clean dist
**
** To install the generated plugin locally (in you default plugin directory) run
**
**    > ant install
**
** The generated plugin jar is not automatically available in JOSMs plugin configuration
** dialog. You have to check it in first.
**
** Use the ant target 'publish' to check in the plugin and make it available to other
** JOSM users:
**    set the properties commit.message and plugin.main.version
** and run
**    > ant  publish
**
**
-->
<project name="native_password_manager" default="dist" basedir=".">

    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Commit message"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="5422"/>

    <!--
    **********************************************************
    ** include targets that all plugins have in common
    **********************************************************
    -->
    <import file="../build-common.xml"/>

    <!-- classpath -->
    <path id="classpath">
        <fileset dir="${plugin.lib.dir}" includes="**/*.jar"/>
        <pathelement path="${josm}"/>
    </path>
    <!--
    **********************************************************
    ** compile - complies the source tree
    ** Overrides the target from build-common.xml
    **********************************************************
    -->
    <target name="compile" depends="init">
        <echo message="compiling sources for ${plugin.jar} ..."/>
        <javac srcdir="src" classpathref="classpath" debug="true" destdir="${plugin.build.dir}">
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>

    <!--
    **********************************************************
    ** dist - creates the plugin jar
    **********************************************************
    -->
    <target name="dist" depends="compile,revision">
        <echo message="creating ${ant.project.name}.jar ... "/>
        <copy todir="${plugin.build.dir}/images">
            <fileset dir="images"/>
        </copy>
        <copy todir="${plugin.build.dir}/data">
            <fileset dir="data"/>
        </copy>
        <copy todir="${plugin.build.dir}">
            <fileset dir=".">
                <include name="README"/>
                <include name="LICENSE"/>
                <include name="gpl-2-cp.txt"/>
                <include name="gpl-3.txt"/>
            </fileset>
        </copy>
        <jar destfile="${plugin.jar}" basedir="${plugin.build.dir}">
        <!--
        ************************************************
        ** configure these properties. Most of them will be copied to the plugins
        ** manifest file. Property values will also show up in the list available
        ** plugins: http://josm.openstreetmap.de/wiki/Plugins.
        **
        ************************************************
        -->
            <manifest>
                <attribute name="Author" value="Paul Hartmann"/>
                <attribute name="Plugin-Class" value="org.openstreetmap.josm.plugins.npm.NPMPlugin"/>
                <attribute name="Main-Class" value="org.openstreetmap.josm.plugins.npm.NPMPlugin"/>
                <attribute name="Plugin-Date" value="${version.entry.commit.date}"/>
                <attribute name="Plugin-Description" value="Use your system''s password manager to store the API username and password. (KWallet and gnome-keyring are supported.)"/>
                <attribute name="Plugin-Icon" value="images/lock24x24.png"/>
                <attribute name="Plugin-Link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/Native_Password_Manager"/>
                <attribute name="Plugin-Mainversion" value="${plugin.main.version}"/>
                <attribute name="Plugin-Version" value="${version.entry.commit.revision}"/>
            </manifest>
            <zipfileset src="${plugin.lib.dir}/jna.jar"/>
        </jar>
    </target>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="nearclick" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Changed the constructor signature of the plugin main class"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>
    <property name="josm" location="../../core/dist/josm-custom.jar"/>
    <property name="plugin.dist.dir" value="../../dist"/>
    <property name="plugin.build.dir" value="build"/>
    <property name="plugin.jar" value="${plugin.dist.dir}/${ant.project.name}.jar"/>
    <property name="ant.build.javac.target" value="1.6"/>
    <target name="init">
        <mkdir dir="${plugin.build.dir}"/>
    </target>
    <target name="compile" depends="init">
        <echo message="creating ${plugin.jar}"/>
        <javac srcdir="src" classpath="${josm}" debug="true" destdir="${plugin.build.dir}">
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>
    <target name="dist" depends="compile,revision">
        <jar destfile="${plugin.jar}" basedir="${plugin.build.dir}">
            <manifest>
                <attribute name="Author" value="Imi, David Earl"/>
                <attribute name="Plugin-Class" value="nearclick.NearClickPlugin"/>
                <attribute name="Plugin-Date" value="${version.entry.commit.date}"/>
                <attribute name="Plugin-Description" value="Simulates a click when you do a small and short drag. This is useful for tablet pens, when you have problems just clicking the tablet without the mouse moving (general Java - tablet problem)."/>
                <attribute name="Plugin-Link" value="http://wiki.openstreetmap.org/index.php/JOSM/Plugins/Nearclick"/>
                <attribute name="Plugin-Mainversion" value="${plugin.main.version}"/>
                <attribute name="Plugin-Version" value="${version.entry.commit.revision}"/>
            </manifest>
        </jar>
    </target>
    <target name="revision">
        <exec append="false" output="REVISION" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="."/>
        </exec>
        <xmlproperty file="REVISION" prefix="version" keepRoot="false" collapseAttributes="true"/>
        <delete file="REVISION"/>
    </target>
    <target name="clean">
        <delete dir="${plugin.build.dir}"/>
        <delete file="${plugin.jar}"/>
    </target>
    <target name="install" depends="dist">
        <property environment="env"/>
        <condition property="josm.plugins.dir" value="${env.APPDATA}/JOSM/plugins" else="${user.home}/.josm/plugins">
            <and>
                <os family="windows"/>
            </and>
        </condition>
        <copy file="${plugin.jar}" todir="${josm.plugins.dir}"/>
    </target>
    <!--
    ************************** Publishing the plugin *********************************** 
    -->
    <!--
        ** extracts the JOSM release for the JOSM version in ../core and saves it in the 
        ** property ${coreversion.info.entry.revision}
        **
        -->
    <target name="core-info">
        <exec append="false" output="core.info.xml" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="../../core"/>
        </exec>
        <xmlproperty file="core.info.xml" prefix="coreversion" keepRoot="true" collapseAttributes="true"/>
        <echo>Building against core revision ${coreversion.info.entry.revision}.</echo>
        <echo>Plugin-Mainversion is set to ${plugin.main.version}.</echo>
        <delete file="core.info.xml"/>
    </target>
    <!--
        ** commits the source tree for this plugin
        -->
    <target name="commit-current">
        <echo>Commiting the plugin source with message '${commit.message}' ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="commit"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="."/>
        </exec>
    </target>
    <!--
        ** updates (svn up) the source tree for this plugin
        -->
    <target name="update-current">
        <echo>Updating plugin source ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="."/>
        </exec>
        <echo>Updating ${plugin.jar} ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="../dist/${plugin.jar}"/>
        </exec>
    </target>
    <!--
        ** commits the plugin.jar 
        -->
    <target name="commit-dist">
        <echo>
    ***** Properties of published ${plugin.jar} *****
    Commit message    : '${commit.message}'                 
    Plugin-Mainversion: ${plugin.main.version}
    JOSM build version: ${coreversion.info.entry.revision}
    Plugin-Version    : ${version.entry.commit.revision}
    ***** / Properties of published ${plugin.jar} *****                 
                        
    Now commiting ${plugin.jar} ...
    </echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="commit"/>
            <arg value="${plugin.jar}"/>
        </exec>
    </target>
    <!-- ** make sure svn is present as a command line tool ** -->
    <target name="ensure-svn-present">
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false" failonerror="false" resultproperty="svn.exit.code">
            <env key="LANG" value="C"/>
            <arg value="--version"/>
        </exec>
        <fail message="Fatal: command 'svn --version' failed. Please make sure svn is installed on your system.">
            <!-- return code not set at all? Most likely svn isn't installed -->
            <condition>
                <not>
                    <isset property="svn.exit.code"/>
                </not>
            </condition>
        </fail>
        <fail message="Fatal: command 'svn --version' failed. Please make sure a working copy of svn is installed on your system.">
            <!-- error code from SVN? Most likely svn is not what we are looking on this system -->
            <condition>
                <isfailure code="${svn.exit.code}"/>
            </condition>
        </fail>
    </target>
    <target name="publish" depends="ensure-svn-present,core-info,commit-current,update-current,clean,dist,commit-dist">
    </target>
</project>
﻿<?xml version="1.0" encoding="utf-8"?>
<!--
** This is a template build file for the PBF plugin.
**
** Maintaining versions
** ====================
** see README.template
**
** Usage
** =====
** To build it run
**
**    > ant  dist
**
** To install the generated plugin locally (in you default plugin directory) run
**
**    > ant  install
**
** The generated plugin jar is not automatically available in JOSMs plugin configuration
** dialog. You have to check it in first.
**
** Use the ant target 'publish' to check in the plugin and make it available to other
** JOSM users:
**    set the properties commit.message and plugin.main.version
** and run
**    > ant  publish
**
**
-->
<project name="no_more_mapping" default="dist" basedir=".">

    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Commit message"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="4000"/>

    <!--
    **********************************************************
    ** include targets that all plugins have in common
    **********************************************************
    -->
    <import file="../build-common.xml"/>

    <!--
    **********************************************************
    ** dist - creates the plugin jar
    **********************************************************
    -->
    <target name="dist" depends="compile,revision">
        <echo message="creating ${ant.project.name}.jar ... "/>
        <copy todir="${plugin.build.dir}/resources">
            <fileset dir="resources"/>
        </copy>
        <copy todir="${plugin.build.dir}/images">
            <fileset dir="images"/>
        </copy>
        <copy todir="${plugin.build.dir}/data">
            <fileset dir="data"/>
        </copy>
        <copy todir="${plugin.build.dir}">
            <fileset dir=".">
                <include name="README"/>
                <include name="gpl-3.0.txt"/>
            </fileset>
        </copy>
        <jar destfile="${plugin.jar}" basedir="${plugin.build.dir}">
            <!--
            ************************************************
            ** configure these properties. Most of them will be copied to the plugins
            ** manifest file. Property values will also show up in the list available
            ** plugins: http://josm.openstreetmap.de/wiki/Plugins.
            **
            ************************************************
            -->
            <manifest>
                <attribute name="Author" value="Zverik"/>
                <attribute name="Plugin-Class" value="nomore.NoMorePlugin"/>
                <attribute name="Plugin-Date" value="${version.entry.commit.date}"/>
                <attribute name="Plugin-Description" value="Disallow using JOSM forever (WARNING: this plugin prevents JOSM from loading and is hard to rid of)"/>
                <attribute name="ru_Plugin-Description" value="Запретить JOSM навсегда (ВНИМАНИЕ: этот модуль не даёт JOSM загрузиться, и его сложно отключить)"/>
                <attribute name="Plugin-Icon" value="images/nomore.png"/>
                <attribute name="Plugin-Mainversion" value="${plugin.main.version}"/>
                <attribute name="Plugin-Version" value="${version.entry.commit.revision}"/>
            </manifest>
        </jar>
    </target>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="opendata" default="dist" basedir=".">
    <property name="plugin.main.version" value="6412"/>
    <property name="plugin.author" value="Don-vip"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.opendata.OdPlugin"/>
    <property name="plugin.description" value="Convert data from Open Data portals to OSM layer"/>
    <property name="plugin.icon" value="images/dialogs/o24.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/OpenData"/>
    <property name="plugin.requires" value="jts;geotools;utilsplugin2"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
	
    <property name="jts" location="${plugin.dist.dir}/jts.jar"/>
    <property name="geotools" location="${plugin.dist.dir}/geotools.jar"/>
	
    <!--
    **********************************************************
    ** compile_lang3 - compiles Apache Commons Lang 3 needed classes
    **********************************************************
    -->
    <target name="compile_lang3" depends="init">
        <echo message="compiling Apache Commons Lang 3 ... "/>
        <javac srcdir="includes/org/apache/commons/lang3" debug="false" destdir="${plugin.build.dir}" includeAntRuntime="false" encoding="ISO-8859-1" />
    </target>
    <!--
    **********************************************************
    ** compile_poi - compiles Apache POI needed classes
    **********************************************************
    -->
    <target name="compile_poi" depends="init">
        <echo message="compiling Apache POI ... "/>
        <javac srcdir="includes/org/apache/poi" debug="false" destdir="${plugin.build.dir}" includeAntRuntime="false" encoding="ISO-8859-1" />
    </target>
    <!--
    **********************************************************
    ** compile_collections - compiles Apache Collections needed classes
    **********************************************************
    -->
    <target name="compile_collections" depends="init">
        <echo message="compiling Apache Collections ... "/>
        <javac srcdir="includes/org/apache/commons/collections" debug="false" destdir="${plugin.build.dir}" includeAntRuntime="false" encoding="ISO-8859-1" />
    </target>
    <!--
    **********************************************************
    ** compile_jopendoc - compiles JOpenDocument needed classes
    **********************************************************
    -->
    <target name="compile_jopendoc" depends="init, compile_collections">
        <echo message="compiling JOpenDocument ... "/>
        <javac srcdir="includes/org/jopendocument" debug="false" destdir="${plugin.build.dir}" includeAntRuntime="false" encoding="ISO-8859-1" >
        	<classpath>
        		<!-- JDOM is required and embededd in geotools jar -->
        		<pathelement location="${geotools}"/>
        	</classpath>
        </javac>
    </target>
    <!--
    **********************************************************
    ** compile_j7zip - compiles J7zip classes
    **********************************************************
    -->
    <target name="compile_j7zip" depends="init">
        <echo message="compiling J7Zip ... "/>
        <javac srcdir="includes/org/j7zip" debug="true" destdir="${plugin.build.dir}" includeAntRuntime="false" encoding="UTF-8" />
    </target>
    <!--
    **********************************************************
    ** compile_neptune - compiles Neptune classes
    **********************************************************
    -->
    <target name="compile_neptune" depends="init">
        <echo message="compiling Neptune ... "/>
        <javac srcdir="includes/neptune" debug="false" destdir="${plugin.build.dir}" includeAntRuntime="false" encoding="UTF-8" />
    </target>
    <!--
    **********************************************************
    ** compile - compiles the source tree
    **********************************************************
    -->
    <target name="compile" depends="init, compile_lang3, compile_poi, compile_jopendoc, compile_neptune, compile_j7zip">
        <echo message="compiling sources for  ${plugin.jar} ... "/>
        <javac srcdir="src" debug="true" destdir="${plugin.build.dir}" includeAntRuntime="false" encoding="UTF-8">
            <classpath>
        	    <pathelement path="${plugin.build.dir}"/>
                <pathelement location="${josm}"/>
                <pathelement location="${jts}"/>
                <pathelement location="${geotools}"/>
            </classpath>
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>
    
    <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
          <classpath>
            <fileset dir="lib/jaxb" includes="*.jar" />
          </classpath>
    </taskdef>
	
    <target name="xjc_neptune">
        <xjc schema="resources/neptune/neptune.xsd" destdir="includes" package="neptune" target="2.1" />
    </target>
</project>
﻿<?xml version="1.0" encoding="utf-8"?>
<!--
** This is a template build file for a module of the JOSM opendata plugin.
**
** Usage
** =====
** To build it run
**
**    > ant dist
**
** To install the generated module locally (in you default opendata modules directory) run
**
**    > ant install
**
** The generated module jar is not automatically available in JOSMs opendata plugin configuration
** dialog. You have to check it in first.
**
** Use the ant target 'publish' to check in the module and make it available to other
** JOSM users:
**    set the property commit.message
** and run
**    > ant publish
**
-->
<project name="your_country.your_module" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Commit message"/>
    <!-- should not be necessary to change the following properties -->
    <property name="josm" location="../../../../core/dist/josm-custom.jar"/>
    <property name="plugin.dist.dir" value="../../../../dist"/>
    <property name="opendata" location="${plugin.dist.dir}/opendata.jar"/>
    <property name="module.build.dir" value="build"/>
    <property name="module.src.dir" value="src"/>
    <property name="ant.build.javac.source" value="1.6"/>
    <property name="ant.build.javac.target" value="1.6"/>
    <!-- this is the directory where the module jar is copied to -->
    <property name="module.dist.dir" value="../../dist"/>
    <property name="module.jar" value="${module.dist.dir}/${ant.project.name}.jar"/>
	<!-- conditions -->
    <condition property="resources.exist">
        <available file="resources" type="dir" />
    </condition>
    <condition property="images.exist">
        <available file="images" type="dir" />
    </condition>
    <!--
    **********************************************************
    ** init - initializes the build
    **********************************************************
    -->
    <target name="init">
        <mkdir dir="${module.build.dir}"/>
        <mkdir dir="${module.build.dir}/META-INF"/>
    </target>
    <!--
    **********************************************************
    ** compile - compiles the source tree
    **********************************************************
    -->
    <target name="compile" depends="init">
        <echo message="compiling sources for ${module.jar} ... "/>
        <javac srcdir="${module.src.dir}" debug="true" destdir="${module.build.dir}" includeAntRuntime="false">
            <classpath>
                <pathelement location="${josm}"/>
                <pathelement location="${opendata}"/>
            </classpath>
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>
    <!--
    **********************************************************
    ** copy-resources - copies resources dir to build dir
    **********************************************************
    -->
    <target name="copy-resources" if="resources.exist">
        <copy todir="${module.build.dir}">
            <fileset dir="resources" />
        </copy>
    </target>
    <!--
    **********************************************************
    ** copy-images - copies images dir to build dir
    **********************************************************
    -->
    <target name="copy-images" if="images.exist">
        <copy todir="${module.build.dir}/images">
            <fileset dir="images" />
        </copy>
    </target>
    <!--
    **********************************************************
    ** dist - creates the module jar
    **********************************************************
    -->
    <target name="dist" depends="compile,revision,copy-resources, copy-images">
        <echo message="creating ${ant.project.name}.jar ... "/>
        <copy todir="${module.build.dir}">
            <fileset dir=".">
                <include name="README"/>
                <include name="gpl-3.0.txt"/>
            </fileset>
        </copy>
        <jar destfile="${module.jar}" basedir="${module.build.dir}">
            <!--
            ************************************************
            ** configure these properties. Most of them will
            ** be copied to the module manifest file.
            **
            ************************************************
            -->
            <manifest>
                <attribute name="Author" value=""/>
                <attribute name="Module-Class" value="org.openstreetmap.josm.plugins.opendata.modules.your_country.your_module.Your_Module"/>
                <attribute name="Module-Date" value="${version.entry.commit.date}"/>
                <attribute name="Module-Description" value="A description for your module"/>
                <attribute name="Module-Icon" value="images/dialogs/your_image_of_24_px.png"/>
                <attribute name="Module-Link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/OpenData/YourModule"/>
                <attribute name="Module-Version" value="${version.entry.commit.revision}"/>
            </manifest>
        </jar>
    </target>
    <!--
    **********************************************************
    ** revision - extracts the current revision number for the
    **    file build.number and stores it in the XML property
    **    version.*
    **********************************************************
    -->
    <target name="revision">
        <exec append="false" output="REVISION" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="."/>
        </exec>
        <xmlproperty file="REVISION" prefix="version" keepRoot="false" collapseAttributes="true"/>
        <delete file="REVISION"/>
    </target>
    <!--
    **********************************************************
    ** clean - clean up the build environment
    **********************************************************
    -->
    <target name="clean">
        <delete dir="${module.build.dir}"/>
        <delete file="${module.jar}"/>
    </target>
    <!--
    **********************************************************
    ** install - install the module in your local JOSM installation
    **********************************************************
    -->
    <target name="install" depends="dist">
        <property environment="env"/>
        <condition property="josm.plugins.dir" value="${env.APPDATA}/JOSM/plugins" else="${user.home}/.josm/plugins">
            <and>
                <os family="windows"/>
            </and>
        </condition>
        <copy file="${module.jar}" todir="${josm.plugins.dir}/opendata/modules" overwrite="yes"/>
    </target>
    <!--
    ************************** Publishing the module *********************************** 
    -->
    <!-- commits the source tree for this module -->
    <target name="commit-current">
        <echo>Commiting the module source with message '${commit.message}' ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="commit"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="."/>
        </exec>
    </target>
    <!-- updates (svn up) the source tree for this module -->
    <target name="update-current">
        <echo>Updating module source ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="."/>
        </exec>
        <echo>Updating ${module.jar} ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="../dist/${module.jar}"/>
        </exec>
    </target>
    <!-- commits the module.jar -->
    <target name="commit-dist">
        <echo>
    ***** Properties of published ${module.jar} *****
    Commit message    : '${commit.message}'                    
    Module-Version    : ${version.entry.commit.revision}
    ***** / Properties of published ${module.jar} *****                    
                        
    Now commiting ${module.jar} ...
    </echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="commit"/>
            <arg value="${module.jar}"/>
        </exec>
    </target>
    <!-- make sure svn is present as a command line tool -->
    <target name="ensure-svn-present">
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false" failonerror="false" resultproperty="svn.exit.code">
            <env key="LANG" value="C"/>
            <arg value="--version"/>
        </exec>
        <fail message="Fatal: command 'svn --version' failed. Please make sure svn is installed on your system.">
            <!-- return code not set at all? Most likely svn isn't installed -->
            <condition>
                <not>
                    <isset property="svn.exit.code"/>
                </not>
            </condition>
        </fail>
        <fail message="Fatal: command 'svn --version' failed. Please make sure a working copy of svn is installed on your system.">
            <!-- error code from SVN? Most likely svn is not what we are looking on this system -->
            <condition>
                <isfailure code="${svn.exit.code}"/>
            </condition>
        </fail>
    </target>
    <target name="publish" depends="ensure-svn-present,commit-current,update-current,clean,dist,commit-dist">
    </target>
</project><?xml version="1.0" encoding="utf-8"?>
<project name="josm-opendata-modules" default="dist" basedir=".">
	<macrodef name="run_target">
        <attribute name="target" />
		<sequential>
            <ant antfile="build.xml" target="@{target}" dir="be.bruxelles"/>
			<ant antfile="build.xml" target="@{target}" dir="be.datagovbe"/>
	        <ant antfile="build.xml" target="@{target}" dir="fr.cg41"/>
	        <ant antfile="build.xml" target="@{target}" dir="fr.datagouvfr"/>
            <ant antfile="build.xml" target="@{target}" dir="fr.lemans"/>
	        <ant antfile="build.xml" target="@{target}" dir="fr.paris"/>
	        <ant antfile="build.xml" target="@{target}" dir="fr.sncf"/>
	        <ant antfile="build.xml" target="@{target}" dir="fr.toulouse"/>
		</sequential>
	</macrodef>
    <target name="dist">
        <mkdir dir="../dist"/>
    	<run_target target="dist"/>
    	<antcall target="list" />
    </target>
    <target name="clean">
        <run_target target="clean"/>
    </target>
    <target name="install" depends="dist">
        <run_target target="install"/>
    </target>
	<target name="list">
		<mkdir dir="build"/>
		<javac srcdir="../util" destdir="build" includes="opendata/**" includeantruntime="false" />
		<java classpath="build" classname="opendata.ModuleListGenerator">
			<arg line="../"/>
		</java>
		<delete dir="build" />
	</target>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="openstreetbugs" default="dist" basedir=".">
    <property name="commit.message" value="Changed the constructor signature of the plugin main class"/>
    <property name="plugin.main.version" value="6162"/>
    <property name="josm" location="../../core/dist/josm-custom.jar"/>
    <property name="plugin.dist.dir" value="../../dist"/>
    <property name="plugin.build.dir" value="build"/>
    <property name="plugin.jar" value="${plugin.dist.dir}/${ant.project.name}.jar"/>
    <property name="ant.build.javac.target" value="1.6"/>
    <target name="init">
        <mkdir dir="${plugin.build.dir}"/>
    </target>
    <target name="compile" depends="init">
        <echo message="creating ${plugin.jar}"/>
        <javac srcdir="src" classpath="${josm}" debug="true" destdir="${plugin.build.dir}">
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>
    <target name="dist" depends="compile,revision">
        <copy todir="${plugin.build.dir}/images">
            <fileset dir="images"/>
        </copy>
        <copy todir="${plugin.build.dir}/data">
            <fileset dir="data"/>
        </copy>
        <jar destfile="${plugin.jar}" basedir="${plugin.build.dir}">
            <manifest>
                <attribute name="Author" value="Henrik Niehaus"/>
                <attribute name="Plugin-Class" value="org.openstreetmap.josm.plugins.osb.OsbPlugin"/>
                <attribute name="Plugin-Date" value="${version.entry.commit.date}"/>
                <attribute name="Plugin-Description" value="Imports issues from OpenStreetBugs"/>
                <attribute name="Plugin-Icon" value="images/dialogs/icon_error24.png"/>
                <attribute name="Plugin-Link" value="http://wiki.openstreetmap.org/index.php/JOSM/Plugins/OpenStreetBugs"/>
                <attribute name="Plugin-Mainversion" value="${plugin.main.version}"/>
                <attribute name="Plugin-Version" value="${version.entry.commit.revision}"/>
            </manifest>
        </jar>
    </target>
    <target name="revision">
        <exec append="false" output="REVISION" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="."/>
        </exec>
        <xmlproperty file="REVISION" prefix="version" keepRoot="false" collapseAttributes="true"/>
        <delete file="REVISION"/>
    </target>
    <target name="clean">
        <delete dir="${plugin.build.dir}"/>
        <delete file="${plugin.jar}"/>
    </target>
    <target name="install" depends="dist">
        <property environment="env"/>
        <condition property="josm.plugins.dir" value="${env.APPDATA}/JOSM/plugins" else="${user.home}/.josm/plugins">
            <and>
                <os family="windows"/>
            </and>
        </condition>
        <copy file="${plugin.jar}" todir="${josm.plugins.dir}"/>
    </target>
    <!--
         ************************** Publishing the plugin ***********************************
        -->
    <!--
        ** extracts the JOSM release for the JOSM version in ../core and saves it in the
        ** property ${coreversion.info.entry.revision}
        **
        -->
    <target name="core-info">
        <exec append="false" output="core.info.xml" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="../../core"/>
        </exec>
        <xmlproperty file="core.info.xml" prefix="coreversion" keepRoot="true" collapseAttributes="true"/>
        <echo>Building against core revision ${coreversion.info.entry.revision}.</echo>
        <echo>Plugin-Mainversion is set to ${plugin.main.version}.</echo>
        <delete file="core.info.xml"/>
    </target>
    <!--
        ** commits the source tree for this plugin
        -->
    <target name="commit-current">
        <echo>Commiting the plugin source with message '${commit.message}' ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="commit"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="."/>
        </exec>
    </target>
    <!--
        ** updates (svn up) the source tree for this plugin
        -->
    <target name="update-current">
        <echo>Updating plugin source ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="."/>
        </exec>
        <echo>Updating ${plugin.jar} ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="../dist/${plugin.jar}"/>
        </exec>
    </target>
    <!--
        ** commits the plugin.jar
        -->
    <target name="commit-dist">
        <echo>
    ***** Properties of published ${plugin.jar} *****
    Commit message    : '${commit.message}'
    Plugin-Mainversion: ${plugin.main.version}
    JOSM build version: ${coreversion.info.entry.revision}
    Plugin-Version    : ${version.entry.commit.revision}
    ***** / Properties of published ${plugin.jar} *****

    Now commiting ${plugin.jar} ...
    </echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="commit"/>
            <arg value="${plugin.jar}"/>
        </exec>
    </target>
    <!-- ** make sure svn is present as a command line tool ** -->
    <target name="ensure-svn-present">
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false" failonerror="false" resultproperty="svn.exit.code">
            <env key="LANG" value="C"/>
            <arg value="--version"/>
        </exec>
        <fail message="Fatal: command 'svn --version' failed. Please make sure svn is installed on your system.">
            <!-- return code not set at all? Most likely svn isn't installed -->
            <condition>
                <not>
                    <isset property="svn.exit.code"/>
                </not>
            </condition>
        </fail>
        <fail message="Fatal: command 'svn --version' failed. Please make sure a working copy of svn is installed on your system.">
            <!-- error code from SVN? Most likely svn is not what we are looking on this system -->
            <condition>
                <isfailure code="${svn.exit.code}"/>
            </condition>
        </fail>
    </target>
    <target name="publish" depends="ensure-svn-present,core-info,commit-current,update-current,clean,dist,commit-dist">
    </target>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="openvisible" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Changed the constructor signature of the plugin main class; updated build.xml"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>
    <!--
      ************************************************
      ** should not be necessary to change the following properties
     -->
    <property name="josm" location="../../core/dist/josm-custom.jar"/>
    <property name="plugin.dist.dir" value="../../dist"/>
    <property name="plugin.build.dir" value="build"/>
    <property name="plugin.jar" value="${plugin.dist.dir}/${ant.project.name}.jar"/>
    <property name="ant.build.javac.target" value="1.6"/>
    <target name="init">
        <mkdir dir="${plugin.build.dir}"/>
    </target>
    <target name="compile" depends="init">
        <echo message="creating ${plugin.jar}"/>
        <javac srcdir="src" classpath="${josm}" debug="true" destdir="${plugin.build.dir}">
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>
    <target name="dist" depends="compile,revision">
        <copy todir="${plugin.build.dir}/images">
            <fileset dir="images"/>
        </copy>
        <copy todir="${plugin.build.dir}/data">
            <fileset dir="data"/>
        </copy>
        <jar destfile="${plugin.jar}" basedir="${plugin.build.dir}">
            <manifest>
                <attribute name="Author" value="Christof Dallermassl"/>
                <attribute name="Plugin-Class" value="at.dallermassl.josm.plugin.openvisible.OpenVisiblePlugin"/>
                <attribute name="Plugin-Date" value="${version.entry.commit.date}"/>
                <attribute name="Plugin-Dependencies" value="jgrapht-jdk1.5"/>
                <attribute name="Plugin-Description" value="Allows opening gpx/osm files that intersect the currently visible screen area"/>
                <attribute name="Plugin-Icon" value="images/openvisible.png"/>
                <attribute name="Plugin-Mainversion" value="${plugin.main.version}"/>
                <attribute name="Plugin-Stage" value="50"/>
                <attribute name="Plugin-Version" value="${version.entry.commit.revision}"/>
            </manifest>
        </jar>
    </target>
    <target name="revision">
        <exec append="false" output="REVISION" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="."/>
        </exec>
        <xmlproperty file="REVISION" prefix="version" keepRoot="false" collapseAttributes="true"/>
        <delete file="REVISION"/>
    </target>
    <target name="clean">
        <delete dir="${plugin.build.dir}"/>
        <delete file="${plugin.jar}"/>
    </target>
    <target name="install" depends="dist">
        <property environment="env"/>
        <condition property="josm.plugins.dir" value="${env.APPDATA}/JOSM/plugins" else="${user.home}/.josm/plugins">
            <and>
                <os family="windows"/>
            </and>
        </condition>
        <copy file="${plugin.jar}" todir="${josm.plugins.dir}"/>
    </target>
    <!--
    ************************** Publishing the plugin *********************************** 
    -->
    <!--
        ** extracts the JOSM release for the JOSM version in ../core and saves it in the 
        ** property ${coreversion.info.entry.revision}
        **
        -->
    <target name="core-info">
        <exec append="false" output="core.info.xml" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="../../core"/>
        </exec>
        <xmlproperty file="core.info.xml" prefix="coreversion" keepRoot="true" collapseAttributes="true"/>
        <echo>Building against core revision ${coreversion.info.entry.revision}.</echo>
        <echo>Plugin-Mainversion is set to ${plugin.main.version}.</echo>
        <delete file="core.info.xml"/>
    </target>
    <!--
        ** commits the source tree for this plugin
        -->
    <target name="commit-current">
        <echo>Commiting the plugin source with message '${commit.message}' ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="commit"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="."/>
        </exec>
    </target>
    <!--
        ** updates (svn up) the source tree for this plugin
        -->
    <target name="update-current">
        <echo>Updating plugin source ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="."/>
        </exec>
        <echo>Updating ${plugin.jar} ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="../dist/${plugin.jar}"/>
        </exec>
    </target>
    <!--
        ** commits the plugin.jar 
        -->
    <target name="commit-dist">
        <echo>
    ***** Properties of published ${plugin.jar} *****
    Commit message    : '${commit.message}'                 
    Plugin-Mainversion: ${plugin.main.version}
    JOSM build version: ${coreversion.info.entry.revision}
    Plugin-Version    : ${version.entry.commit.revision}
    ***** / Properties of published ${plugin.jar} *****                 
                        
    Now commiting ${plugin.jar} ...
    </echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="commit"/>
            <arg value="${plugin.jar}"/>
        </exec>
    </target>
    <!-- ** make sure svn is present as a command line tool ** -->
    <target name="ensure-svn-present">
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false" failonerror="false" resultproperty="svn.exit.code">
            <env key="LANG" value="C"/>
            <arg value="--version"/>
        </exec>
        <fail message="Fatal: command 'svn --version' failed. Please make sure svn is installed on your system.">
            <!-- return code not set at all? Most likely svn isn't installed -->
            <condition>
                <not>
                    <isset property="svn.exit.code"/>
                </not>
            </condition>
        </fail>
        <fail message="Fatal: command 'svn --version' failed. Please make sure a working copy of svn is installed on your system.">
            <!-- error code from SVN? Most likely svn is not what we are looking on this system -->
            <condition>
                <isfailure code="${svn.exit.code}"/>
            </condition>
        </fail>
    </target>
    <target name="publish" depends="ensure-svn-present,core-info,commit-current,update-current,clean,dist,commit-dist">
    </target>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="osmarender" default="install" basedir=".">

    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Fixed #4360 - osmarender plugin does not load"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>

    <property name="stylesheets" location="./stylesheets"/>
    <property name="xslt" location="./xslt"/>

    <property name="plugin.author" value="80n"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.osmarender.OsmarenderPlugin"/>
    <property name="plugin.description" value="Launches FireFox to display the current visible screen as a nice SVG image."/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>

    <target name="setup-dist">
        <antcall target="setup-dist-default" />
        <copy todir="${plugin.build.dir}" file="${xslt}/osmarender.xsl"/>
        <copy tofile="${plugin.build.dir}/osm-map-features.xml" file="${stylesheets}/osm-map-features-z17.xml"/>
    </target>

    <target name="revision">
        <exec append="false" output="REVISION" executable="perl" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="../getrevision.pl"/>
            <arg value="xslt"/>
            <arg value="stylesheets"/>
            <arg value="."/>
        </exec>
        <xmlproperty file="REVISION" prefix="version" keepRoot="false" collapseAttributes="true"/>
        <exec append="false" output="REVISION" executable="svn" failifexecutionfails="true" failonerror="true">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="."/>
        </exec>
        <xmlproperty file="REVISION" prefix="version" keepRoot="false" collapseAttributes="true"/>
        <echo message="Revision is ${version.entry.commit.revision}"/>
        <delete file="REVISION"/>
    </target>

</project>
﻿<?xml version="1.0" encoding="utf-8"?>
<project name="pbf" default="dist" basedir=".">

    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Commit message"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>

    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Don-vip"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.pbf.PbfPlugin"/>
    <property name="plugin.description" value="Import OSM data in PBF format"/>
    <!--<property name="plugin.icon" value="images/pbf_24.png"/>-->
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/PBF"/>
    <!--<property name="plugin.early" value="..."/>-->
    <!--<property name="plugin.requires" value="..."/>-->
    <!--<property name="plugin.stage" value="..."/>-->

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
  
    <!--
    **********************************************************
    ** compile - complies the source tree
    **********************************************************
    -->
    <target name="compile" depends="init">
        <echo message="compiling sources for  ${plugin.jar} ... "/>
        <javac classpath="${josm}" debug="true" destdir="${plugin.build.dir}" includeAntRuntime="false">
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
            <src path="src" />
            <src path="gen" />
        </javac>
    </target>
	
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="pdfimport" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Initial pdfimport version"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>
    
    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="extropy"/>
    <property name="plugin.class" value="pdfimport.PdfImportPlugin"/>
    <property name="plugin.description" value="Import PDF file and convert to ways."/>
    <property name="plugin.icon" value="images/pdf_import.png"/>
    <property name="plugin.link" value="http://svn.openstreetmap.org/applications/editors/josm/plugins/pdfimport/"/>
    
    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="photo_geotagging" default="dist" basedir=".">

    <!-- enter the SVN commit message -->
    <property name="commit.message" value="write elevation to EXIF (see josm #7710)"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6450"/>

    <property name="plugin.author" value="Paul Hartmann"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.photo_geotagging.GeotaggingPlugin"/>
    <property name="plugin.description" value="Write gps position info to the image file header. Run this feature from the right click menu of the image layer."/>
    <property name="plugin.icon" value="images/geotagging.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/Photo_Geotagging"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>

    <!--
    **********************************************************
    ** compile - complies the source tree
    ** Overrides the target from build-common.xml
    **********************************************************
    -->
    <target name="compile" depends="init">
        <echo message="compiling sanselan sources ... "/>
        <javac srcdir="${plugin.src.dir}" excludes="org/openstreetmap/**" debug="true" destdir="${plugin.build.dir}" encoding="iso-8859-1" includeantruntime="false">
            <compilerarg value="-Xlint:deprecation"/>
        </javac>
        <echo message="compiling sources for ${plugin.jar} ..."/>
        <javac srcdir="${plugin.src.dir}" excludes="org/apache/sanselan/**" classpath="${josm}" debug="true" destdir="${plugin.build.dir}" includeantruntime="false">
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>

</project>
<?xml version="1.0" encoding="utf-8"?>
<!--
** This is the build file for a JOSM photoadjust plugin.
** Based on template revision 29839.
**
** Usage
** =====
** Call "ant help" to get possible build targets.
**
-->
<project name="photoadjust" default="dist" basedir=".">

    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Commit message"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6392"/>

    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="holgermappt"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.photoadjust.PhotoAdjustPlugin"/>
    <property name="plugin.description" value="Make photos movable and position them on the map."/>
    <property name="plugin.icon" value="images/photoadjust.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/PhotoAdjust"/>
    <!--<property name="plugin.early" value="..."/>-->
    <!--<property name="plugin.requires" value="..."/>-->
    <!--<property name="plugin.stage" value="..."/>-->
    
    <property name="josm" location="../../core/dist/josm-custom.jar"/>
    <property name="plugin.dist.dir" value="../../dist"/>
    <property name="plugin.javadoc.dir" location="javadoc"/>
	
    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
    <!-- ** internationalization ** -->
    <import file="i18n/build-i18n.xml"/>

    <!--
    **********************************************************
    ** javadoc - create the plugin documentation
    **********************************************************
    -->
    <target name="javadoc" description="generate documentation">
        <javadoc destdir="${plugin.javadoc.dir}"
                sourcepath="${plugin.src.dir}"
                windowtitle="${ant.project.name}"
                linksource="true">
            <link href="../../../core/javadoc"/>
            <link href="http://josm.openstreetmap.de/doc/"/>
            <link href="http://docs.oracle.com/javase/6/docs/api"/>
        </javadoc>
    </target>

    <target name="additional-manifest">
        <antcall target="mftrans"/>
    </target>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="PicLayer" default="dist" basedir=".">
    <property name="commit.message" value="[josm/PicLayer] - disable menu items by default"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>
	
    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Tomasz Stelmach"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.piclayer.PicLayerPlugin"/>
    <property name="plugin.description" value="This plugin allows to display any picture as a background in the editor and align it with the map."/>
    <property name="plugin.icon" value="images/layericon.png"/>
    <property name="plugin.link" value="http://josm.openstreetmap.de/wiki/Help/Plugin/PicLayer"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>

</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="plastic_laf" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Changed the constructor signature of the plugin main class"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>
    <property name="josm" location="../../core/dist/josm-custom.jar"/>
    <property name="plugin.dist.dir" value="../../dist"/>
    <property name="plugin.build.dir" value="build"/>
    <property name="plugin.jar" value="${plugin.dist.dir}/${ant.project.name}.jar"/>
    <property name="ant.build.javac.target" value="1.6"/>
    <property name="looks" value="lib/looks-2.2.1.jar"/>
    <target name="init">
        <mkdir dir="${plugin.build.dir}"/>
    </target>
    <target name="compile" depends="init">
        <echo message="creating ${plugin.jar}"/>
        <javac srcdir="src" classpath="${josm}" debug="true" destdir="${plugin.build.dir}">
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <pathelement location="${josm}"/>
                <pathelement location="${looks}"/>
            </classpath>
        </javac>
    </target>
    <target name="dist" depends="compile,revision">
        <unjar dest="${plugin.build.dir}" src="${looks}"/>
        <jar destfile="${plugin.jar}" basedir="${plugin.build.dir}">
            <manifest>
                <attribute name="Author" value="Imi"/>
                <attribute name="Plugin-Class" value="plastic_laf.Plugin"/>
                <attribute name="Plugin-Date" value="${version.entry.commit.date}"/>
                <attribute name="Plugin-Description" value="The great JGoodies Plastic Look and Feel."/>
                <attribute name="Plugin-Early" value="true"/>
                <attribute name="Plugin-Link" value="http://www.jgoodies.com/"/>
                <attribute name="Plugin-Mainversion" value="${plugin.main.version}"/>
                <attribute name="Plugin-Version" value="${version.entry.commit.revision}"/>
            </manifest>
        </jar>
    </target>
    <target name="revision">
        <exec append="false" output="REVISION" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="."/>
        </exec>
        <xmlproperty file="REVISION" prefix="version" keepRoot="false" collapseAttributes="true"/>
        <delete file="REVISION"/>
    </target>
    <target name="clean">
        <delete dir="${plugin.build.dir}"/>
        <delete file="${plugin.jar}"/>
    </target>
    <target name="install" depends="dist">
        <property environment="env"/>
        <condition property="josm.plugins.dir" value="${env.APPDATA}/JOSM/plugins" else="${user.home}/.josm/plugins">
            <and>
                <os family="windows"/>
            </and>
        </condition>
        <copy file="${plugin.jar}" todir="${josm.plugins.dir}"/>
    </target>
    <!--
    ************************** Publishing the plugin *********************************** 
    -->
    <!--
        ** extracts the JOSM release for the JOSM version in ../core and saves it in the 
        ** property ${coreversion.info.entry.revision}
        **
        -->
    <target name="core-info">
        <exec append="false" output="core.info.xml" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="../../core"/>
        </exec>
        <xmlproperty file="core.info.xml" prefix="coreversion" keepRoot="true" collapseAttributes="true"/>
        <echo>Building against core revision ${coreversion.info.entry.revision}.</echo>
        <echo>Plugin-Mainversion is set to ${plugin.main.version}.</echo>
        <delete file="core.info.xml"/>
    </target>
    <!--
        ** commits the source tree for this plugin
        -->
    <target name="commit-current">
        <echo>Commiting the plugin source with message '${commit.message}' ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="commit"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="."/>
        </exec>
    </target>
    <!--
        ** updates (svn up) the source tree for this plugin
        -->
    <target name="update-current">
        <echo>Updating plugin source ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="."/>
        </exec>
        <echo>Updating ${plugin.jar} ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="../dist/${plugin.jar}"/>
        </exec>
    </target>
    <!--
        ** commits the plugin.jar 
        -->
    <target name="commit-dist">
        <echo>
    ***** Properties of published ${plugin.jar} *****
    Commit message    : '${commit.message}'                 
    Plugin-Mainversion: ${plugin.main.version}
    JOSM build version: ${coreversion.info.entry.revision}
    Plugin-Version    : ${version.entry.commit.revision}
    ***** / Properties of published ${plugin.jar} *****                 
                        
    Now commiting ${plugin.jar} ...
    </echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="commit"/>
            <arg value="${plugin.jar}"/>
        </exec>
    </target>
    <!-- ** make sure svn is present as a command line tool ** -->
    <target name="ensure-svn-present">
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false" failonerror="false" resultproperty="svn.exit.code">
            <env key="LANG" value="C"/>
            <arg value="--version"/>
        </exec>
        <fail message="Fatal: command 'svn --version' failed. Please make sure svn is installed on your system.">
            <!-- return code not set at all? Most likely svn isn't installed -->
            <condition>
                <not>
                    <isset property="svn.exit.code"/>
                </not>
            </condition>
        </fail>
        <fail message="Fatal: command 'svn --version' failed. Please make sure a working copy of svn is installed on your system.">
            <!-- error code from SVN? Most likely svn is not what we are looking on this system -->
            <condition>
                <isfailure code="${svn.exit.code}"/>
            </condition>
        </fail>
    </target>
    <target name="publish" depends="ensure-svn-present,core-info,commit-current,update-current,clean,dist,commit-dist">
    </target>
</project>
<?xml version="1.0" encoding="utf-8"?>
<!--
** This is a template build file for a JOSM  plugin.
**
** Maintaining versions
** ====================
** See README.template
**
** Usage
** =====
** Call "ant help" to get possible build targets.
**
-->
<project name="pointInfo" default="dist" basedir=".">

    <!-- enter the SVN commit message -->
    <property name="commit.message" value="PointInfo: Add more external links, nicer icons."/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6238"/>

    <!-- Configure these properties (replace "..." accordingly).



         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Marian Kyral"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.pointinfo.PointInfoPlugin"/>
    <property name="plugin.description" value="Shows an additional information about point on map. There is only a Czech RUIAN module available at this moment."/>
    <property name="plugin.icon" value="images/mapmode/info-sml.png"/>
    <property name="plugin.link" value="https://github.com/mkyral/josm-pointInfo"/>
    <!--<property name="plugin.early" value="..."/>-->
    <!--<property name="plugin.requires" value="..."/>-->
    <!--<property name="plugin.stage" value="..."/>-->

    <property name="josm" location="../../core/dist/josm-custom.jar"/>
    <property name="plugin.dist.dir" value="../../dist"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>

</project>
﻿<?xml version="1.0" encoding="utf-8"?>
<project name="poly" default="dist" basedir=".">
    
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Commit message"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>

    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Zverik"/>
    <property name="plugin.class" value="poly.PolyPlugin"/>
    <property name="plugin.description" value="Read and write osmosis poly filter files"/>
    <!--<property name="plugin.icon" value="images/..."/>-->
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/Osmosis/Polygon_Filter_File_Format"/>
    <!--<property name="plugin.early" value="..."/>-->
    <!--<property name="plugin.requires" value="..."/>-->
    <!--<property name="plugin.stage" value="..."/>-->

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="print" default="dist" basedir=".">

    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Added a field to specify the map scale."/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>

    <property name="plugin.author" value="Kai Pastor"/>
    <property name="plugin.class"  value="org.openstreetmap.josm.plugins.print.PrintPlugin"/>
    <property name="plugin.description" value="Adds map printing to JOSM"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>

</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="proj4j" default="dist" basedir=".">
    <!-- read build.properties for local settings -->
    <property file="build.properties"/>
    <!-- enter the SVN command file name -->
    <property name="svn" value="svn"/>
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Commit message"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>
    <!--
      ************************************************
      ** should not be necessary to change the following properties
     -->
    <property name="josm" location="../../core/dist/josm-custom.jar"/>
    <property name="plugin.build.dir" value="build"/>
    <property name="plugin.src.dir" value="src"/>
    <!-- this is the directory where the plugin jar is copied to -->
    <property name="plugin.dist.dir" value="../../dist"/>
    <property name="ant.build.javac.target" value="1.6"/>
    <property name="plugin.dist.dir" value="../../dist"/>
    <property name="plugin.jar" value="${plugin.dist.dir}/${ant.project.name}.jar"/>
    <!--
    **********************************************************
    ** init - initializes the build
    **********************************************************
    -->
    <target name="init">
        <mkdir dir="${plugin.build.dir}"/>
    </target>
    <!--
    **********************************************************
    ** compile - complies the source tree
    **********************************************************
    -->
    <target name="compile" depends="init">
        <echo message="compiling sources for  ${plugin.jar} ... "/>
        <javac srcdir="src" debug="true" destdir="${plugin.build.dir}">
            <classpath>
                <pathelement location="${josm}"/>
            </classpath>
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>
    <!--
    **********************************************************
    ** dist - creates the plugin jar
    **********************************************************
    -->
    <target name="dist" depends="compile,revision">
        <echo message="creating ${ant.project.name}.jar ... "/>
        <copy todir="${plugin.build.dir}/resources">
            <fileset dir="resources" excludes="nad/"/>
        </copy>
        <copy todir="${plugin.build.dir}/nad">
            <fileset dir="resources/nad"/>
        </copy>
        <copy todir="${plugin.build.dir}/images">
            <fileset dir="images"/>
        </copy>
        <copy todir="${plugin.build.dir}/data">
            <fileset dir="data"/>
        </copy>
        <copy todir="${plugin.build.dir}">
            <fileset dir=".">
                <include name="README"/>
                <include name="LICENSE"/>
            </fileset>
        </copy>
        <jar destfile="${plugin.jar}" basedir="${plugin.build.dir}">
            <!-- All jar files necessary to run plugin (no tests) -->
            <!--
        ************************************************
        ** configure these properties. Most of them will be copied to the plugins
        ** manifest file. Property values will also show up in the list available
        ** plugins: http://josm.openstreetmap.de/wiki/Plugins.
        **
        ************************************************
    -->
            <manifest>
                <attribute name="Author" value="Josh Doe &lt;josh@joshdoe.com&gt;"/>
                <attribute name="Plugin-Class" value="org.openstreetmap.josm.plugins.proj4j.Proj4J"/>
                <attribute name="Plugin-Date" value="${version.entry.commit.date}"/>
                <attribute name="Plugin-Description" value="adds projections from Proj4J"/>
                <attribute name="Plugin-Link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/Proj4J"/>
                <attribute name="Plugin-Mainversion" value="${plugin.main.version}"/>
                <attribute name="Plugin-Version" value="${version.entry.commit.revision}"/>
                <attribute name="Plugin-Early" value="true"/>
            </manifest>
        </jar>
    </target>
    <!--
    **********************************************************
    ** revision - extracts the current revision number for the
    **    file build.number and stores it in the XML property
    **    version.*
    **********************************************************
    -->
    <target name="revision">
        <exec append="false" output="REVISION" executable="${svn}" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="."/>
        </exec>
        <xmlproperty file="REVISION" prefix="version" keepRoot="false" collapseAttributes="true"/>
        <delete file="REVISION"/>
    </target>
    <!--
    **********************************************************
    ** clean - clean up the build environment
    **********************************************************
    -->
    <target name="clean">
        <delete dir="${plugin.build.dir}"/>
        <delete file="${plugin.jar}"/>
    </target>
    <!--
    **********************************************************
    ** install - install the plugin in your local JOSM installation
    **********************************************************
    -->
    <target name="install" depends="dist">
        <property environment="env"/>
        <condition property="josm.plugins.dir" value="${env.APPDATA}/JOSM/plugins" else="${user.home}/.josm/plugins">
            <and>
                <os family="windows"/>
            </and>
        </condition>
        <copy file="${plugin.jar}" todir="${josm.plugins.dir}"/>
    </target>
    <!--
    ************************** Publishing the plugin *********************************** 
    -->
    <!--
        ** extracts the JOSM release for the JOSM version in ../core and saves it in the 
        ** property ${coreversion.info.entry.revision}
        **
        -->
    <target name="core-info">
        <exec append="false" output="core.info.xml" executable="${svn}" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="../../core"/>
        </exec>
        <xmlproperty file="core.info.xml" prefix="coreversion" keepRoot="true" collapseAttributes="true"/>
        <echo>Building against core revision ${coreversion.info.entry.revision}.</echo>
        <echo>Plugin-Mainversion is set to ${plugin.main.version}.</echo>
        <delete file="core.info.xml"/>
    </target>
    <!--
        ** commits the source tree for this plugin
        -->
    <target name="commit-current">
        <echo>Commiting the plugin source with message '${commit.message}' ...</echo>
        <exec append="true" output="svn.log" executable="${svn}" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="commit"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="."/>
            <arg value="${svn.username_arg}"/>
            <arg value="${svn.username}"/>
            <arg value="${svn.password_arg}"/>
            <arg value="${svn.password}"/>
        </exec>
    </target>
    <!--
        ** updates (svn up) the source tree for this plugin
        -->
    <target name="update-current">
        <echo>Updating plugin source ...</echo>
        <exec append="true" output="svn.log" executable="${svn}" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="."/>
        </exec>
        <echo>Updating ${plugin.jar} ...</echo>
        <exec append="true" output="svn.log" executable="${svn}" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="../dist/${plugin.jar}"/>
        </exec>
    </target>
    <!--
        ** commits the plugin.jar 
        -->
    <target name="commit-dist">
        <echo>
    ***** Properties of published ${plugin.jar} *****
    Commit message    : '${commit.message}'                    
    Plugin-Mainversion: ${plugin.main.version}
    JOSM build version: ${coreversion.info.entry.revision}
    Plugin-Version    : ${version.entry.commit.revision}
    ***** / Properties of published ${plugin.jar} *****                    
                        
    Now commiting ${plugin.jar} ...
    </echo>
        <exec append="true" output="svn.log" executable="${svn}" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="commit"/>
            <arg value="${plugin.jar}"/>
            <arg value="${svn.username_arg}"/>
            <arg value="${svn.username}"/>
            <arg value="${svn.password_arg}"/>
            <arg value="${svn.password}"/>
        </exec>
    </target>
    <!-- ** make sure svn is present as a command line tool ** -->
    <target name="ensure-svn-present">
        <exec append="true" output="svn.log" executable="${svn}" failifexecutionfails="false" failonerror="false" resultproperty="svn.exit.code">
            <env key="LANG" value="C"/>
            <arg value="--version"/>
        </exec>
        <fail message="Fatal: command 'svn --version' failed. Please make sure svn is installed on your system.">
            <!-- return code not set at all? Most likely svn isn't installed -->
            <condition>
                <not>
                    <isset property="svn.exit.code"/>
                </not>
            </condition>
        </fail>
        <fail message="Fatal: command 'svn --version' failed. Please make sure a working copy of svn is installed on your system.">
            <!-- error code from SVN? Most likely svn is not what we are looking on this system -->
            <condition>
                <isfailure code="${svn.exit.code}"/>
            </condition>
        </fail>
    </target>
    <target name="publish" depends="ensure-svn-present,core-info,commit-current,update-current,clean,dist,commit-dist">
    </target>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="public_transport" default="dist" basedir=".">

    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Commit message"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6169"/>

    <property name="plugin.author" value="Roland M. Olbricht"/>
    <property name="plugin.class" value="public_transport.PublicTransportPlugin"/>
    <property name="plugin.description" value="This plugin simplifies the mapping and editing of public transport routes."/>
    <!-- <property name="plugin.icon" value=""/> -->
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/public_transport"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="reltoolbox" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="RelToolbox: make natural sort for relation and find relation lists"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6721"/>

    <property name="plugin.author" value="Ilya Zverev"/>
    <property name="plugin.class" value="relcontext.RelContextPlugin"/>
    <property name="plugin.description" value="Relation and multipolygon creating and editing panel."/>
    <property name="plugin.icon" value="images/reltoolbox.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/Relation_Toolbox"/>
    <property name="plugin.stage" value="10"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>

    <target name="runjosm" depends="install">
        <java jar="${josm}" fork="true">
            <arg line="e:/test.osm"/>
        </java>
    </target>

    <target name="setup-dist">
        <antcall target="setup-dist-default" />
        <copy todir="${plugin.build.dir}">
            <fileset dir="src" includes="**/*.txt"/>
        </copy>
    </target>

    
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="reverter" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Reverter: Update MultiOsmReader to support null data after redaction"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6906"/>

    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Upliner"/>
    <property name="plugin.class" value="reverter.ReverterPlugin"/>
    <property name="plugin.description" value="Plugin for reverting changesets"/>
    <property name="plugin.icon" value="images/revert-changeset.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/Reverter"/>
    <property name="plugin.stage" value="5"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="RoadSigns" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="preset maintenance (Fahrradstraße)"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6906"/>

    <!--
    **********************************************************
    ** include targets that all plugins have in common
    **********************************************************
    -->
    <import file="../build-common.xml"/>

    <!--
    **********************************************************
    ** dist - creates the plugin jar
    **********************************************************
    -->
    <target name="dist" depends="compile,revision">
        <echo message="creating ${ant.project.name}.jar ... "/>
        <copy todir="${plugin.build.dir}/images">
            <fileset dir="images"/>
        </copy>
        <copy todir="${plugin.build.dir}/data">
            <fileset dir="data"/>
        </copy>
        <copy todir="${plugin.build.dir}">
            <fileset dir=".">
                <include name="README"/>
                <include name="LICENSE"/>
            </fileset>
        </copy>
        <jar destfile="${plugin.jar}" basedir="${plugin.build.dir}">
            <!--
            ************************************************
            ** configure these properties. Most of them will be copied to the plugins
            ** manifest file. Property values will also show up in the list available
            ** plugins: http://josm.openstreetmap.de/wiki/Plugins.
            **
            ************************************************
            -->
            <manifest>
                <attribute name="Author" value="Paul Hartmann"/>
                <attribute name="Plugin-Class" value="org.openstreetmap.josm.plugins.roadsigns.RoadSignsPlugin"/>
                <attribute name="Plugin-Date" value="${version.entry.commit.date}"/>
                <attribute name="Plugin-Description" value="Plugin for tagging of objects based on a selection of road signs. The dialog can be opened by clicking a small icon in the upper right corner of the properties window. Available country presets: Germany, Poland, Slovakia, Spain."/>
                <attribute name="Plugin-Icon" value="images/pref/roadsigns.png"/>
                <attribute name="Plugin-Link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/RoadSigns"/>
                <attribute name="Plugin-Mainversion" value="${plugin.main.version}"/>
                <attribute name="Plugin-Version" value="${version.entry.commit.revision}"/>
            </manifest>
        </jar>
    </target>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="routes" default="dist" basedir=".">
    <property name="commit.message" value="Changed the constructor signature of the plugin main class"/>
    <property name="plugin.main.version" value="6162"/>
    <property name="josm" location="../../core/dist/josm-custom.jar"/>
    <property name="plugin.dist.dir" value="../../dist"/>
    <property name="plugin.build.dir" value="build"/>
    <property name="plugin.jar" value="${plugin.dist.dir}/${ant.project.name}.jar"/>
    <property name="ant.build.javac.target" value="1.6"/>
    <target name="init">
        <mkdir dir="${plugin.build.dir}"/>
    </target>
    <target name="compile" depends="init">
        <echo message="creating ${plugin.jar}"/>
        <javac srcdir="src" debug="true" destdir="${plugin.build.dir}">
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <pathelement location="${josm}"/>
                <fileset dir="lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </javac>
        <copy file="src/org/openstreetmap/josm/plugins/routes/xml/routes.xml" todir="${plugin.build.dir}/org/openstreetmap/josm/plugins/routes/xml"/>
        <copy file="src/org/openstreetmap/josm/plugins/routes/xml/routes.xsd" todir="${plugin.build.dir}/org/openstreetmap/josm/plugins/routes/xml"/>
    </target>
    <target name="dist" depends="compile,revision">
        <copy todir="${plugin.build.dir}/data">
            <fileset dir="data"/>
        </copy>
        <jar destfile="${plugin.jar}" basedir="${plugin.build.dir}">
            <zipfileset src="lib/jsr173-1.0_api.jar" includes="**/*"/>
            <zipfileset src="lib/jaxb-api.jar" includes="**/*"/>
            <zipfileset src="lib/jaxb-impl.jar" includes="**/*.class"/>
            <zipfileset src="lib/activation.jar" includes="**/*.class"/>
            <manifest>
                <attribute name="Author" value="Jiri Klement"/>
                <attribute name="Plugin-Class" value="org.openstreetmap.josm.plugins.routes.RoutesPlugin"/>
                <attribute name="Plugin-Date" value="${version.entry.commit.date}"/>
                <attribute name="Plugin-Description" value="Renders routes (bus, hiking trails, bicycle routes, ..). Route types must be defined in routes.xml file in plugin directory"/>
                <attribute name="Plugin-Mainversion" value="${plugin.main.version}"/>
                <attribute name="Plugin-Version" value="${version.entry.commit.revision}"/>
            </manifest>
        </jar>
    </target>
    <target name="revision">
        <exec append="false" output="REVISION" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="."/>
        </exec>
        <xmlproperty file="REVISION" prefix="version" keepRoot="false" collapseAttributes="true"/>
        <delete file="REVISION"/>
    </target>
    <target name="clean">
        <delete dir="${plugin.build.dir}"/>
        <delete file="${plugin.jar}"/>
    </target>
    <target name="install" depends="dist">
        <property environment="env"/>
        <condition property="josm.plugins.dir" value="${env.APPDATA}/JOSM/plugins" else="${user.home}/.josm/plugins">
            <and>
                <os family="windows"/>
            </and>
        </condition>
        <copy file="${plugin.jar}" todir="${josm.plugins.dir}"/>
    </target>
    <!--
         ************************** Publishing the plugin ***********************************
        -->
    <!--
        ** extracts the JOSM release for the JOSM version in ../core and saves it in the
        ** property ${coreversion.info.entry.revision}
        **
        -->
    <target name="core-info">
        <exec append="false" output="core.info.xml" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="../../core"/>
        </exec>
        <xmlproperty file="core.info.xml" prefix="coreversion" keepRoot="true" collapseAttributes="true"/>
        <echo>Building against core revision ${coreversion.info.entry.revision}.</echo>
        <echo>Plugin-Mainversion is set to ${plugin.main.version}.</echo>
        <delete file="core.info.xml"/>
    </target>
    <!--
        ** commits the source tree for this plugin
        -->
    <target name="commit-current">
        <echo>Commiting the plugin source with message '${commit.message}' ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="commit"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="."/>
        </exec>
    </target>
    <!--
        ** updates (svn up) the source tree for this plugin
        -->
    <target name="update-current">
        <echo>Updating plugin source ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="."/>
        </exec>
        <echo>Updating ${plugin.jar} ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="../dist/${plugin.jar}"/>
        </exec>
    </target>
    <!--
        ** commits the plugin.jar
        -->
    <target name="commit-dist">
        <echo>
    ***** Properties of published ${plugin.jar} *****
    Commit message    : '${commit.message}'
    Plugin-Mainversion: ${plugin.main.version}
    JOSM build version: ${coreversion.info.entry.revision}
    Plugin-Version    : ${version.entry.commit.revision}
    ***** / Properties of published ${plugin.jar} *****

    Now commiting ${plugin.jar} ...
    </echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="commit"/>
            <arg value="${plugin.jar}"/>
        </exec>
    </target>
    <!-- ** make sure svn is present as a command line tool ** -->
    <target name="ensure-svn-present">
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false" failonerror="false" resultproperty="svn.exit.code">
            <env key="LANG" value="C"/>
            <arg value="--version"/>
        </exec>
        <fail message="Fatal: command 'svn --version' failed. Please make sure svn is installed on your system.">
            <!-- return code not set at all? Most likely svn isn't installed -->
            <condition>
                <not>
                    <isset property="svn.exit.code"/>
                </not>
            </condition>
        </fail>
        <fail message="Fatal: command 'svn --version' failed. Please make sure a working copy of svn is installed on your system.">
            <!-- error code from SVN? Most likely svn is not what we are looking on this system -->
            <condition>
                <isfailure code="${svn.exit.code}"/>
            </condition>
        </fail>
    </target>
    <target name="publish" depends="ensure-svn-present,core-info,commit-current,update-current,clean,dist,commit-dist">
    </target>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="routing" default="dist" basedir=".">

    <!-- enter the SVN commit message -->
    <property name="commit.message" value="added one-way support in roundabouts"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>

    <!--
    **********************************************************
    ** include targets that all plugins have in common
    **********************************************************
    -->
    <import file="../build-common.xml"/>

    <!-- classpath -->
    <path id="classpath">
        <fileset dir="${plugin.lib.dir}" includes="**/*.jar"/>
        <pathelement path="${josm}"/>
        <fileset dir="../log4j/lib">
            <include name="**/*.jar"/>
        </fileset>
    </path>
    <!--
    **********************************************************
    ** compile - complies the source tree
    ** Overrides the target from build-common.xml
    **********************************************************
    -->
    <target name="compile" depends="init">
        <echo message="compiling sources for ${plugin.jar} ..."/>
        <javac srcdir="src" classpathref="classpath" debug="true" destdir="${plugin.build.dir}">
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>

    <!-- Generate distribution -->
    <target name="dist" depends="compile,revision" description="Generate distribution">
        <copy todir="${plugin.build.dir}/images">
            <fileset dir="images"/>
        </copy>
        <copy todir="${plugin.build.dir}/data">
            <fileset dir="data"/>
        </copy>
        <copy todir="${plugin.build.dir}/">
            <fileset dir="resources">
                <include name="*.xml"/>
            </fileset>
        </copy>
        <jar destfile="${plugin.jar}" basedir="${plugin.build.dir}">
        <!--
        ************************************************
        ** configure these properties. Most of them will be copied to the plugins
        ** manifest file. Property values will also show up in the list available
        ** plugins: http://josm.openstreetmap.de/wiki/Plugins.
        **
        ************************************************
        -->
            <manifest>
                <attribute name="Author" value="Jose Vidal &lt;vidalfree@gmail.com&gt;, Juangui Jordán &lt;juangui@gmail.com&gt;, Hassan S &lt;hassan.sabirin@gmail.com&gt;"/>
                <attribute name="Plugin-Class" value="com.innovant.josm.plugin.routing.RoutingPlugin"/>
                <attribute name="Plugin-Date" value="${version.entry.commit.date}"/>
                <attribute name="Plugin-Description" value="Provides routing capabilities."/>
                <attribute name="Plugin-Icon" value="images/preferences/routing.png"/>
                <attribute name="Plugin-Link" value="http://wiki.openstreetmap.org/index.php/JOSM/Plugins/Routing"/>
                <attribute name="Plugin-Mainversion" value="${plugin.main.version}"/>
                <attribute name="Plugin-Stage" value="50"/>
                <attribute name="Plugin-Requires" value="log4j"/>
                <attribute name="Plugin-Version" value="${version.entry.commit.revision}"/>
            </manifest>
            <zipfileset src="${plugin.lib.dir}/jgrapht-jdk1.5.jar"/>
        </jar>
    </target>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="sds" default="dist" basedir=".">

    <!-- enter the SVN commit message -->
    <property name="commit.message" value=""/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>

    <!--
    **********************************************************
    ** include targets that all plugins have in common
    **********************************************************
    -->
    <import file="../build-common.xml"/>

    <target name="dist" depends="compile,revision">
        <copy todir="${plugin.build.dir}/images">
            <fileset dir="images"/>
        </copy>
        <copy todir="${plugin.build.dir}/data">
            <fileset dir="data"/>
        </copy>
        <jar destfile="${plugin.jar}" basedir="${plugin.build.dir}">
            <manifest>
                <attribute name="Author" value="Frederik Ramm"/>
                <attribute name="Plugin-Class" value="org.openstreetmap.hot.sds.SeparateDataStorePlugin"/>
                <attribute name="Plugin-Date" value="${version.entry.commit.date}"/>
                <attribute name="Plugin-Description" value="Loads data from SDS" />
                <attribute name="Plugin-Icon" value="images/sds.png"/>
                <!--<attribute name="Plugin-Link" value=""/>-->
                <attribute name="Plugin-Mainversion" value="${plugin.main.version}"/>
                <attribute name="Plugin-Version" value="${version.entry.commit.revision}"/>
            </manifest>
        </jar>
    </target>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="SimplifyArea" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Initial commit"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6317"/>
   	
    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Martin Ždila &lt;m.zdila@gmail.com&gt;"/>
    <property name="plugin.class" value="sk.zdila.josm.plugin.simplify.SimplifyAreaPlugin"/>
    <property name="plugin.description" value="Simplify area by removing nodes on very obtuse angles. This can be constrained by maximum removed area size. Also average nearby nodes."/>
    <property name="plugin.icon" value="images/preferences/simplifyArea.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/SimplifyArea"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>                
                
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="SeaMapEditor" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="New release"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="4394"/>

    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Malcolm Herring"/>
    <property name="plugin.class" value="smed.Smed"/>
    <property name="plugin.description" value="Edit features for OpenSeaMap"/>
    <property name="plugin.icon" value="images/Smed.png"/>
    <property name="plugin.link" value="http://openseamap.org/"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>                

</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="SeaMapEditor2" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="New release"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="4394"/>

    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Malcolm Herring"/>
    <property name="plugin.class" value="smed2.Smed2"/>
    <property name="plugin.description" value="Edit features for OpenSeaMap"/>
    <property name="plugin.icon" value="images/Smed.png"/>
    <property name="plugin.link" value="http://openseamap.org/"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>                

</project>
<project name="jharbour" default="dist" basedir=".">
  <property name="src" location="src"/>
  <property name="build" location="build"/>
  <property name="jarfile" location="./jharbour.jar"/>

  <target name="init">
    <mkdir dir="${build}"/>
  </target>

  <target name="compile" depends="init" description="compile the source " >
    <javac includeantruntime="false" srcdir="${src}" destdir="${build}"/>
  </target>

  <target name="dist" depends="compile" description="generate the distribution" >
    <jar jarfile="${jarfile}" basedir="${build}" >
      <manifest>
        <attribute name="Main-Class" value="jharbour.Jharbour"/>
        <attribute name="Class-Path" value="$jarfile"/>
      </manifest>
    </jar>
  </target>

  <target name="clean" description="clean up" >
    <delete dir="${build}"/>
    <delete file="${jarfile}"/>
  </target>
</project>
<project name="jicons" default="dist" basedir=".">
  <property name="src" location="src"/>
  <property name="build" location="build"/>
  <property name="jarfile" location="./jicons.jar"/>
  <property name="ant.build.javac.target" value="1.7"/>
  <property name="ant.build.javac.source" value="1.7"/>
  <property name="batik.dir" value="/usr/local/bin/batik-1.7/"/>
  <path id="classpath">
    <fileset dir="${batik.dir}" includes="**/*.jar"/>
  </path>
            
  <target name="init">
    <mkdir dir="${build}"/>
  </target>

  <target name="compile" depends="init" description="compile the source " >
    <javac includeantruntime="false" srcdir="${src}" destdir="${build}" classpathref="classpath" encoding="UTF-8" />
  </target>

  <target name="dist" depends="compile" description="generate the distribution" >
    <jar jarfile="${jarfile}" basedir="${build}" >
      <manifest>
        <attribute name="Main-Class" value="jicons.Jicons"/>
        <attribute name="Class-Path" value="$jarfile"/>
      </manifest>
      <zipgroupfileset dir="${batik.dir}" includes="**/batik*.jar" />
    </jar>
  </target>

  <target name="clean" description="clean up" >
    <delete dir="${build}"/>
    <delete file="${jarfile}"/>
  </target>
</project>
<project name="jrender" default="dist" basedir=".">
  <property name="src" location="src"/>
  <property name="build" location="build"/>
  <property name="jarfile" location="./jrender.jar"/>
  <property name="ant.build.javac.target" value="1.7"/>
  <property name="ant.build.javac.source" value="1.7"/>
  <property name="batik.dir" value="/usr/local/bin/batik-1.7/"/>
  <path id="classpath">
    <fileset dir="${batik.dir}" includes="**/*.jar"/>
  </path>
            
  <target name="init">
    <mkdir dir="${build}"/>
  </target>

  <target name="compile" depends="init" description="compile the source " >
    <javac includeantruntime="false" srcdir="${src}" destdir="${build}" classpathref="classpath" encoding="UTF-8" />
  </target>

  <target name="dist" depends="compile" description="generate the distribution" >
    <jar jarfile="${jarfile}" basedir="${build}" >
      <manifest>
        <attribute name="Main-Class" value="jrender.Jrender"/>
        <attribute name="Class-Path" value="$jarfile"/>
      </manifest>
      <zipgroupfileset dir="${batik.dir}" includes="**/batik*.jar" />
          
    </jar>
  </target>

  <target name="clean" description="clean up" >
    <delete dir="${build}"/>
    <delete file="${jarfile}"/>
  </target>
</project>
<project name="js57toosm" default="dist" basedir=".">
  <property name="src" location="src"/>
  <property name="build" location="build"/>
  <property name="jarfile" location="./js57toosm.jar"/>
  <property name="ant.build.javac.target" value="1.6"/>
  <property name="ant.build.javac.source" value="1.6"/>
    
  <target name="init">
    <mkdir dir="${build}"/>
  </target>

  <target name="compile" depends="init" description="compile the source " >
    <javac includeantruntime="false" srcdir="${src}" destdir="${build}" encoding="UTF-8"/>
  </target>

  <target name="dist" depends="compile" description="generate the distribution" >
    <jar jarfile="${jarfile}" basedir="${build}" >
      <manifest>
        <attribute name="Main-Class" value="js57toosm.Js57toosm"/>
        <attribute name="Class-Path" value="$jarfile"/>
      </manifest>
    </jar>
  </target>

  <target name="clean" description="clean up" >
    <delete dir="${build}"/>
    <delete file="${jarfile}"/>
  </target>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="surveyor" default="dist" basedir=".">
    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
	
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Changed the constructor signature of the plugin main class"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>
    <property name="livegpsplugin.jar" value="${plugin.dist.dir}/livegps.jar"/>

    <!-- Configure these properties (replace "..." accordingly).
         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Christof Dallermassl"/>
    <property name="plugin.class" value="at.dallermassl.josm.plugin.surveyor.SurveyorPlugin"/>
    <property name="plugin.description" value="Allow adding markers/nodes on current gps positions."/>
    <property name="plugin.icon" value="images/surveyormenu.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/index.php/JOSM/Plugins/Surveyor"/>
    <property name="plugin.requires" value="livegps"/>
    <property name="plugin.stage" value="60"/>
	
    <target name="compile" depends="init">
        <echo message="compiling sources for ${plugin.jar} ..."/>
        <javac srcdir="src" debug="true" destdir="${plugin.build.dir}" includeantruntime="false" encoding="UTF-8">
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <pathelement location="${josm}"/>
                <pathelement location="${livegpsplugin.jar}"/>
            </classpath>
        </javac>
    </target>
</project>
<?xml version="1.0" encoding="utf-8"?>
<!--
** This is a template build file for a JOSM  plugin.
**
** Maintaining versions
** ====================
** see README.template
**
** Usage
** =====
** To build it run
**
**    > ant  dist
**
** To install the generated plugin locally (in you default plugin directory) run
**
**    > ant  install
**
** The generated plugin jar is not automatically available in JOSMs plugin configuration
** dialog. You have to check it in first.
**
** Use the ant target 'publish' to check in the plugin and make it available to other
** JOSM users:
**    set the properties commit.message and plugin.main.version
** and run
**    > ant  publish
**
**
-->
<project name="surveyor2" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Surveyor 2"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="4549"/>
    <!--
      ************************************************
      ** should not be necessary to change the following properties
     -->
    <property name="josm" location="../../core/dist/josm-custom.jar"/>
    <property name="plugin.build.dir" value="build"/>
    <property name="plugin.src.dir" value="src"/>
    <!-- this is the directory where the plugin jar is copied to -->
    <property name="plugin.dist.dir" value="../../dist"/>
    <!--property name="plugin.dist.dir"        value="/Users/Zverik/AppData/Roaming/JOSM/plugins"/-->
    <property name="ant.build.javac.target" value="1.6"/>
    <property name="ant.build.javac.source" value="1.6"/>
    <property name="plugin.jar" value="${plugin.dist.dir}/${ant.project.name}.jar"/>
    <!--
    **********************************************************
    ** init - initializes the build
    **********************************************************
    -->
    <target name="init">
        <mkdir dir="${plugin.build.dir}"/>
    </target>
    <!--
    **********************************************************
    ** compile - complies the source tree
    **********************************************************
    -->
    <target name="compile" depends="init">
        <echo message="compiling sources for  ${plugin.jar} ... "/>
        <javac srcdir="src" classpath="${josm}" debug="true" destdir="${plugin.build.dir}">
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>
    <!--
    **********************************************************
    ** dist - creates the plugin jar
    **********************************************************
    -->
    <target name="dist" depends="compile,revision">
        <echo message="creating ${ant.project.name}.jar ... "/>
        <copy todir="${plugin.build.dir}/images">
            <fileset dir="images"/>
        </copy>
        <copy todir="${plugin.build.dir}/data">
            <fileset dir="data"/>
        </copy>
        <copy todir="${plugin.build.dir}">
            <fileset dir="src" includes="**/*.txt"/>
        </copy>
        <copy todir="${plugin.build.dir}">
            <fileset dir=".">
                <include name="README"/>
                <include name="LICENSE"/>
            </fileset>
        </copy>
        <jar destfile="${plugin.jar}" basedir="${plugin.build.dir}">
            <!--
        ************************************************
        ** configure these properties. Most of them will be copied to the plugins
        ** manifest file. Property values will also show up in the list available
        ** plugins: http://josm.openstreetmap.de/wiki/Plugins.
        **
        ************************************************
    -->
            <manifest>
                <attribute name="Author" value="Ilya Zverev"/>
                <attribute name="Plugin-Class" value="surveyor2.SurveyorPlugin"/>
                <attribute name="Plugin-Date" value="${version.entry.commit.date}"/>
                <attribute name="Plugin-Description" value="The surveyor''s toolbox."/>
                <attribute name="ru_Plugin-Description" value="Модуль для полевого картографирования."/>
                <attribute name="Plugin-Icon" value="images/surveyor2.png"/>
                <!--attribute name="Plugin-Link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/Relation_Toolbox"/-->
                <attribute name="Plugin-Mainversion" value="${plugin.main.version}"/>
                <attribute name="Plugin-Version" value="${version.entry.commit.revision}"/>
                <attribute name="Plugin-Stage" value="10"/>
            </manifest>
        </jar>
    </target>
    <!--
    **********************************************************
    ** revision - extracts the current revision number for the
    **    file build.number and stores it in the XML property
    **    version.*
    **********************************************************
    -->
    <target name="revision">
        <exec append="false" output="REVISION" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="."/>
        </exec>
        <xmlproperty file="REVISION" prefix="version" keepRoot="false" collapseAttributes="true"/>
        <delete file="REVISION"/>
    </target>
    <!--
    **********************************************************
    ** clean - clean up the build environment
    **********************************************************
    -->
    <target name="clean">
        <delete dir="${plugin.build.dir}"/>
        <delete file="${plugin.jar}"/>
    </target>
    <!--
    **********************************************************
    ** install - install the plugin in your local JOSM installation
    **********************************************************
    -->
    <target name="install" depends="dist">
        <property environment="env"/>
        <condition property="josm.plugins.dir" value="${env.APPDATA}/JOSM/plugins" else="${user.home}/.josm/plugins">
            <and>
                <os family="windows"/>
            </and>
        </condition>
        <copy file="${plugin.jar}" todir="${josm.plugins.dir}"/>
    </target>
    <!--
    ************************** Publishing the plugin *********************************** 
    -->
    <!--
        ** extracts the JOSM release for the JOSM version in ../core and saves it in the 
        ** property ${coreversion.info.entry.revision}
        **
        -->
    <target name="core-info">
        <exec append="false" output="core.info.xml" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="../../core"/>
        </exec>
        <xmlproperty file="core.info.xml" prefix="coreversion" keepRoot="true" collapseAttributes="true"/>
        <echo>Building against core revision ${coreversion.info.entry.revision}.</echo>
        <echo>Plugin-Mainversion is set to ${plugin.main.version}.</echo>
        <delete file="core.info.xml"/>
    </target>
    <!--
        ** commits the source tree for this plugin
        -->
    <target name="commit-current">
        <echo>Commiting the plugin source with message '${commit.message}' ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="commit"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="."/>
        </exec>
    </target>
    <!--
        ** updates (svn up) the source tree for this plugin
        -->
    <target name="update-current">
        <echo>Updating plugin source ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="."/>
        </exec>
        <echo>Updating ${plugin.jar} ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="../dist/${plugin.jar}"/>
        </exec>
    </target>
    <!--
        ** commits the plugin.jar 
        -->
    <target name="commit-dist">
        <echo>
    ***** Properties of published ${plugin.jar} *****
    Commit message    : '${commit.message}'                    
    Plugin-Mainversion: ${plugin.main.version}
    JOSM build version: ${coreversion.info.entry.revision}
    Plugin-Version    : ${version.entry.commit.revision}
    ***** / Properties of published ${plugin.jar} *****                    
                        
    Now commiting ${plugin.jar} ...
    </echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="commit"/>
            <arg value="${plugin.jar}"/>
        </exec>
    </target>
    <!-- ** make sure svn is present as a command line tool ** -->
    <target name="ensure-svn-present">
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false" failonerror="false" resultproperty="svn.exit.code">
            <env key="LANG" value="C"/>
            <arg value="--version"/>
        </exec>
        <fail message="Fatal: command 'svn --version' failed. Please make sure svn is installed on your system.">
            <!-- return code not set at all? Most likely svn isn't installed -->
            <condition>
                <not>
                    <isset property="svn.exit.code"/>
                </not>
            </condition>
        </fail>
        <fail message="Fatal: command 'svn --version' failed. Please make sure a working copy of svn is installed on your system.">
            <!-- error code from SVN? Most likely svn is not what we are looking on this system -->
            <condition>
                <isfailure code="${svn.exit.code}"/>
            </condition>
        </fail>
    </target>
    <target name="publish" depends="ensure-svn-present,core-info,commit-current,update-current,clean,dist,commit-dist">
    </target>
</project>
﻿<?xml version="1.0" encoding="utf-8"?>
<project name="tag2link" default="dist" basedir=".">

    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Commit message"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>

    <property name="plugin.author" value="Don-vip &amp; FrViPofm"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.tag2link.Tag2LinkPlugin"/>
    <property name="plugin.description" value="Launch browser to a Web resource about a selected object having known tags, such as Wikipedia"/>
    <property name="plugin.icon" value="images/tag2linkv2_24x24.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/Tag2Link"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>

</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="tageditor" default="dist" basedir=".">
    <property name="commit.message" value="Tageditor:  help shortcut parser, rebuild"/>
    <property name="plugin.main.version" value="6437"/>
    
	<property name="plugin.author" value="Karl Guggisberg"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.tageditor.TagEditorPlugin"/>
    <property name="plugin.description" value="Provides a dialog for editing tags in a tabular grid."/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/index.php/JOSM/Plugins/TagEditor"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>

</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="tagging-preset-tester" default="dist" basedir=".">
    <property name="commit.message" value="[josm_tagging_preset_tester] #josm8853: listen for list selection, support standalone mode (ant run)"/>
    <property name="plugin.main.version" value="6738"/>
    <property name="josm" location="../../core/dist/josm-custom.jar"/>
    <property name="plugin.dist.dir" value="../../dist"/>
    <property name="plugin.build.dir" value="build"/>
    <property name="plugin.jar" value="${plugin.dist.dir}/${ant.project.name}.jar"/>
    <property name="ant.build.javac.target" value="1.6"/>
    <target name="init">
        <mkdir dir="${plugin.build.dir}"/>
    </target>
    <target name="compile" depends="init">
        <echo message="creating ${plugin.jar}"/>
        <javac srcdir="src" classpath="${josm}" debug="true" destdir="${plugin.build.dir}">
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>
    <target name="run" depends="install">
        <echo message="creating ${plugin.jar}"/>
        <java classpath="${josm};${plugin.jar}" classname="org.openstreetmap.josm.plugins.taggingpresettester.TaggingPresetTester"/>
    </target>
    <target name="dist" depends="compile,revision">
        <copy todir="${plugin.build.dir}/images">
            <fileset dir="images"/>
        </copy>
        <copy todir="${plugin.build.dir}/data">
            <fileset dir="data"/>
        </copy>
        <jar destfile="${plugin.jar}" basedir="${plugin.build.dir}">
            <manifest>
                <attribute name="Author" value="Imi"/>
                <attribute name="Main-Class" value="org.openstreetmap.josm.plugins.taggingpresettester.TaggingPresetTester"/>
                <attribute name="Plugin-Class" value="org.openstreetmap.josm.plugins.taggingpresettester.TaggingPresetTesterAction"/>
                <attribute name="Plugin-Date" value="${version.entry.commit.date}"/>
                <attribute name="Plugin-Description" value="Adds a tagging preset tester to the help menu, which helps you developing of tagging presets (quick preview of the dialog that will popup). You can start the jar-file as standalone as well."/>
                <attribute name="Plugin-Icon" value="images/tagging-preset-tester.png"/>
                <attribute name="Plugin-Mainversion" value="${plugin.main.version}"/>
                <attribute name="Plugin-Version" value="${version.entry.commit.revision}"/>
            </manifest>
        </jar>
    </target>
    <target name="revision">
        <exec append="false" output="REVISION" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="."/>
        </exec>
        <xmlproperty file="REVISION" prefix="version" keepRoot="false" collapseAttributes="true"/>
        <delete file="REVISION"/>
    </target>
    <target name="clean">
        <delete dir="${plugin.build.dir}"/>
        <delete file="${plugin.jar}"/>
    </target>
    <target name="install" depends="dist">
        <property environment="env"/>
        <condition property="josm.plugins.dir" value="${env.APPDATA}/JOSM/plugins" else="${user.home}/.josm/plugins">
            <and>
                <os family="windows"/>
            </and>
        </condition>
        <copy file="${plugin.jar}" todir="${josm.plugins.dir}"/>
    </target>
    <!--
     ************************** Publishing the plugin ***********************************
    -->
    <!--
    ** extracts the JOSM release for the JOSM version in ../core and saves it in the
    ** property ${coreversion.info.entry.revision}
    **
    -->
    <target name="core-info">
        <exec append="false" output="core.info.xml" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="../../core"/>
        </exec>
        <xmlproperty file="core.info.xml" prefix="coreversion" keepRoot="true" collapseAttributes="true"/>
        <echo>Building against core revision ${coreversion.info.entry.revision}.</echo>
        <echo>Plugin-Mainversion is set to ${plugin.main.version}.</echo>
        <delete file="core.info.xml"/>
    </target>
    <!--
    ** commits the source tree for this plugin
    -->
    <target name="commit-current">
        <echo>Commiting the plugin source with message '${commit.message}' ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="true">
            <env key="LANG" value="C"/>
            <arg value="commit"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="."/>
        </exec>
    </target>
    <!--
    ** updates (svn up) the source tree for this plugin
    -->
    <target name="update-current">
        <echo>Updating plugin source ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="."/>
        </exec>
        <echo>Updating ${plugin.jar} ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="../dist/${plugin.jar}"/>
        </exec>
    </target>
    <!--
    ** commits the plugin.jar
    -->
    <target name="commit-dist">
        <echo>
***** Properties of published ${plugin.jar} *****
Commit message    : '${commit.message}'
Plugin-Mainversion: ${plugin.main.version}
JOSM build version: ${coreversion.info.entry.revision}
Plugin-Version    : ${version.entry.commit.revision}
***** / Properties of published ${plugin.jar} *****

Now commiting ${plugin.jar} ...
</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="commit"/>
            <arg value="${plugin.jar}"/>
        </exec>
    </target>
    <!-- ** make sure svn is present as a command line tool ** -->
    <target name="ensure-svn-present">
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false" failonerror="false" resultproperty="svn.exit.code">
            <env key="LANG" value="C"/>
            <arg value="--version"/>
        </exec>
        <fail message="Fatal: command 'svn --version' failed. Please make sure svn is installed on your system.">
            <!-- return code not set at all? Most likely svn isn't installed -->
            <condition>
                <not>
                    <isset property="svn.exit.code"/>
                </not>
            </condition>
        </fail>
        <fail message="Fatal: command 'svn --version' failed. Please make sure a working copy of svn is installed on your system.">
            <!-- error code from SVN? Most likely svn is not what we are looking on this system -->
            <condition>
                <isfailure code="${svn.exit.code}"/>
            </condition>
        </fail>
    </target>
    <target name="publish" depends="ensure-svn-present,core-info,commit-current,update-current,clean,dist,commit-dist">
    </target>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="terracer" default="dist" basedir=".">
    <property name="commit.message" value="applied #j5760 (patch by robome) - Order of housenumbers not correct"/>
    <property name="plugin.main.version" value="6397"/>
    <property name="plugin.author" value="Matt Amos"/>
    <property name="plugin.class" value="terracer.TerracerPlugin"/>
    <property name="plugin.description" value="Make terraced houses out of single blocks."/>
    <property name="plugin.icon" value="images/terrace.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/Terracer"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
</project>
<?xml version="1.0" encoding="utf-8"?>
<!--
** This is a template build file for a JOSM  plugin.
**
** Maintaining versions
** ====================
** see README.template
**
** Usage
** =====
** To build it run
**
**    > ant  dist
**
** To install the generated plugin locally (in you default plugin directory) run
**
**    > ant  install
**
** The generated plugin jar is not automatically available in JOSMs plugin configuration
** dialog. You have to check it in first.
**
** Use the ant target 'publish' to check in the plugin and make it available to other
** JOSM users:
**    set the properties commit.message and plugin.main.version
** and run
**    > ant  publish
**
**
-->
<project name="touchscreenhelper" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="JOSM/touchscreenhelper: Added T shortcut, hold T to activate temporarily"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="4394"/>
    <property name="plugin.author" value="glebius@glebius.int.ru"/>
    <property name="plugin.class" value="touchscreenhelper.TouchScreenHelperPlugin"/>
    <property name="plugin.description" value="Provides helper buttons to allow working with single button mouse (stylus). Activate by holding T and slip map with left mouse button"/>
    <property name="plugin.icon" value="images/mapmode/browse.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/TouchScreenHelper"/>
    <import file="../build-common.xml"/>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="Tracer" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="adapt to latest josm (getNodePairs changed)"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>

    <property name="plugin.author" value="Jan Bilak, Petr Dlouhý"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.tracer.TracerPlugin"/>
    <property name="plugin.description" value="Traces buildings from Czech cadastral map. Needs TracerServer (.NET or Mono) to be running."/>
    <property name="plugin.icon" value="images/mapmode/tracer-sml.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/Tracer"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
</project>
﻿<?xml version="1.0" encoding="utf-8"?>
<!--
** This is a template build file for a JOSM  plugin.
**
** Maintaining versions
** ====================
** See README.template
**
** Usage
** =====
** Call "ant help" to get possible build targets.
**
-->
<project name="Tracer2" default="dist" basedir=".">

    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Add link to wiki"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6340"/>

    <!-- Configure these properties (replace "..." accordingly).



         See http://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="Jan Bilak, Petr Dlouhý, Dirk Brünig"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.tracer2.TracerPlugin"/>
    <property name="plugin.description" value="Traces buildings and other shapes from a map. Needs Tracer2Server to be running."/>
    <property name="plugin.icon" value="images/mapmode/tracer2-sml.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/Tracer2"/>
    <!--<property name="plugin.early" value="..."/>-->
    <!--<property name="plugin.requires" value="..."/>-->
    <!--<property name="plugin.stage" value="..."/>-->
    
	<property name="josm" location="../../core/dist/josm-custom.jar"/>
	<property name="plugin.dist.dir" value="../../dist"/>
	
    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>
  
</project>
<?xml version="1.0" encoding="utf-8"?>
<!--
** This is a template build file for a JOSM  plugin.
**
** Maintaining versions
** ====================
** see README.template
**
** Usage
** =====
** To build it run
**
**    > ant  dist
**
** To install the generated plugin locally (in you default plugin directory) run
**
**    > ant  install
**
** The generated plugin jar is not automatically available in JOSMs plugin configuration
** dialog. You have to check it in first.
**
** Use the ant target 'publish' to check in the plugin and make it available to other
** JOSM users:
**    set the properties commit.message and plugin.main.version
** and run
**    > ant  publish
**
**
-->
<project name="trustosm" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="New plugin for digital signing osm data"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6088"/>
    <!--
      ************************************************
      ** should not be necessary to change the following properties
     -->
    <property name="josm" location="../../core/dist/josm-custom.jar"/>
    <property name="plugin.build.dir" value="build"/>
    <property name="plugin.src.dir" value="src"/>
    <property name="plugin.lib.dir" value="lib"/>
    <!-- this is the directory where the plugin jar is copied to -->
    <property name="plugin.dist.dir" value="../../dist"/>
    <property name="ant.build.javac.target" value="1.6"/>
    <property name="plugin.dist.dir" value="../../dist"/>
    <property name="plugin.jar" value="${plugin.dist.dir}/${ant.project.name}.jar"/>
    <!--
    **********************************************************
    ** init - initializes the build
    **********************************************************
    -->
    <target name="init">
        <mkdir dir="${plugin.build.dir}"/>
    </target>
    <!--
    **********************************************************
    ** compile - complies the source tree
    **********************************************************
    -->
    <target name="compile" depends="init">
        <echo message="compiling sources for  ${plugin.jar} ... "/>
        <javac srcdir="src" classpath="${josm}" debug="true" destdir="${plugin.build.dir}">
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <pathelement location="${josm}"/>
                <fileset dir="${plugin.lib.dir}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </javac>
    </target>
    <!-- create a property containing all .jar files, prefix lib/, and seperated with a space -->
    <pathconvert property="libs.project" pathsep=" ">
        <mapper>
            <chainedmapper>
                <!-- remove absolute path -->
                <flattenmapper/>
                <!-- add lib/ prefix -->
                <globmapper from="*" to="${ant.project.name}/lib/*"/>
            </chainedmapper>
        </mapper>
        <path>
            <!-- plugin.lib.dir contains all jar files -->
            <fileset dir="${plugin.lib.dir}">
                <include name="**/*.jar"/>
            </fileset>
        </path>
    </pathconvert>
    <!--
    **********************************************************
    ** dist - creates the plugin jar
    **********************************************************
    -->
    <target name="dist" depends="compile,revision">
        <echo message="creating ${ant.project.name}.jar ... "/>
        <copy todir="${plugin.build.dir}/lib">
            <fileset dir="${plugin.lib.dir}"/>
        </copy>
        <copy todir="${plugin.build.dir}/resources">
            <fileset dir="resources"/>
        </copy>
        <copy todir="${plugin.build.dir}/images">
            <fileset dir="images"/>
        </copy>
        <copy todir="${plugin.build.dir}/data">
            <fileset dir="data"/>
        </copy>
        <copy todir="${plugin.build.dir}">
            <fileset dir=".">
                <include name="README"/>
                <include name="LICENSE"/>
            </fileset>
        </copy>
        <jar destfile="${plugin.jar}" basedir="${plugin.build.dir}">
            <!--
        ************************************************
        ** configure these properties. Most of them will be copied to the plugins
        ** manifest file. Property values will also show up in the list available
        ** plugins: http://josm.openstreetmap.de/wiki/Plugins.
        **
        ************************************************
    -->
            <manifest>
                <attribute name="Author" value="Christoph Wagner"/>
                <attribute name="Class-Path" value="${libs.project}"/>
                <attribute name="Plugin-Class" value="org.openstreetmap.josm.plugins.trustosm.TrustOSMplugin"/>
                <attribute name="Plugin-Date" value="${version.entry.commit.date}"/>
                <attribute name="Plugin-Description" value="Plugin to digital sign OSM-Data"/>
                <attribute name="Plugin-Icon" value="trustosm"/>
                <attribute name="Plugin-Link" value="..."/>
                <attribute name="Plugin-Mainversion" value="${plugin.main.version}"/>
                <attribute name="Plugin-Version" value="${version.entry.commit.revision}"/>
            </manifest>
        </jar>
    </target>
    <!--
    **********************************************************
    ** revision - extracts the current revision number for the
    **    file build.number and stores it in the XML property
    **    version.*
    **********************************************************
    -->
    <target name="revision">
        <exec append="false" output="REVISION" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="."/>
        </exec>
        <xmlproperty file="REVISION" prefix="version" keepRoot="false" collapseAttributes="true"/>
        <delete file="REVISION"/>
    </target>
    <!--
    **********************************************************
    ** clean - clean up the build environment
    **********************************************************
    -->
    <target name="clean">
        <delete dir="${plugin.build.dir}"/>
        <delete file="${plugin.jar}"/>
    </target>
    <!--
    **********************************************************
    ** install - install the plugin in your local JOSM installation
    **********************************************************
    -->
    <target name="install" depends="dist">
        <property environment="env"/>
        <condition property="josm.plugins.dir" value="${env.APPDATA}/JOSM/plugins" else="${user.home}/.josm/plugins">
            <and>
                <os family="windows"/>
            </and>
        </condition>
        <copy file="${plugin.jar}" todir="${josm.plugins.dir}"/>
    </target>
    <!--
    ************************** Publishing the plugin *********************************** 
    -->
    <!--
        ** extracts the JOSM release for the JOSM version in ../core and saves it in the 
        ** property ${coreversion.info.entry.revision}
        **
        -->
    <target name="core-info">
        <exec append="false" output="core.info.xml" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="info"/>
            <arg value="--xml"/>
            <arg value="../../core"/>
        </exec>
        <xmlproperty file="core.info.xml" prefix="coreversion" keepRoot="true" collapseAttributes="true"/>
        <echo>Building against core revision ${coreversion.info.entry.revision}.</echo>
        <echo>Plugin-Mainversion is set to ${plugin.main.version}.</echo>
        <delete file="core.info.xml"/>
    </target>
    <!--
        ** commits the source tree for this plugin
        -->
    <target name="commit-current">
        <echo>Commiting the plugin source with message '${commit.message}' ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="commit"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="."/>
        </exec>
    </target>
    <!--
        ** updates (svn up) the source tree for this plugin
        -->
    <target name="update-current">
        <echo>Updating plugin source ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="."/>
        </exec>
        <echo>Updating ${plugin.jar} ...</echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="up"/>
            <arg value="../dist/${plugin.jar}"/>
        </exec>
    </target>
    <!--
        ** commits the plugin.jar 
        -->
    <target name="commit-dist">
        <echo>
    ***** Properties of published ${plugin.jar} *****
    Commit message    : '${commit.message}'                    
    Plugin-Mainversion: ${plugin.main.version}
    JOSM build version: ${coreversion.info.entry.revision}
    Plugin-Version    : ${version.entry.commit.revision}
    ***** / Properties of published ${plugin.jar} *****                    
                        
    Now commiting ${plugin.jar} ...
    </echo>
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false">
            <env key="LANG" value="C"/>
            <arg value="-m '${commit.message}'"/>
            <arg value="commit"/>
            <arg value="${plugin.jar}"/>
        </exec>
    </target>
    <!-- ** make sure svn is present as a command line tool ** -->
    <target name="ensure-svn-present">
        <exec append="true" output="svn.log" executable="svn" failifexecutionfails="false" failonerror="false" resultproperty="svn.exit.code">
            <env key="LANG" value="C"/>
            <arg value="--version"/>
        </exec>
        <fail message="Fatal: command 'svn --version' failed. Please make sure svn is installed on your system.">
            <!-- return code not set at all? Most likely svn isn't installed -->
            <condition>
                <not>
                    <isset property="svn.exit.code"/>
                </not>
            </condition>
        </fail>
        <fail message="Fatal: command 'svn --version' failed. Please make sure a working copy of svn is installed on your system.">
            <!-- error code from SVN? Most likely svn is not what we are looking on this system -->
            <condition>
                <isfailure code="${svn.exit.code}"/>
            </condition>
        </fail>
    </target>
    <target name="publish" depends="ensure-svn-present,core-info,commit-current,update-current,clean,dist,commit-dist">
    </target>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="turnlanes" default="dist" basedir=".">

    <!-- enter the SVN commit message -->
    <property name="commit.message" value="fix toolbar warnings - toolbar still does not work"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>

    <!--
    **********************************************************
    ** include targets that all plugins have in common
    **********************************************************
    -->
    <import file="../build-common.xml"/>

    <!--
    **********************************************************
    ** dist - creates the plugin jar
    **********************************************************
    -->
    <target name="dist" depends="compile,revision">
        <echo message="creating ${ant.project.name}.jar ... "/>
        <copy todir="${plugin.build.dir}/resources">
            <fileset dir="resources"/>
        </copy>
        <copy todir="${plugin.build.dir}/images">
            <fileset dir="images"/>
        </copy>
        <copy todir="${plugin.build.dir}/data">
            <fileset dir="data"/>
        </copy>
        <copy todir="${plugin.build.dir}">
            <fileset dir=".">
                <include name="README"/>
                <include name="LICENSE"/>
            </fileset>
        </copy>
        <jar destfile="${plugin.jar}" basedir="${plugin.build.dir}">
        <!--
        ************************************************
        ** configure these properties. Most of them will be copied to the plugins
        ** manifest file. Property values will also show up in the list available
        ** plugins: http://josm.openstreetmap.de/wiki/Plugins.
        **
        ************************************************
        -->
            <manifest>
                <attribute name="Author" value="Benjamin Schulz"/>
                <attribute name="Plugin-Class" value="org.openstreetmap.josm.plugins.turnlanes.TurnLanesPlugin"/>
                <attribute name="Plugin-Date" value="${version.entry.commit.date}"/>
                <attribute name="Plugin-Description" value="Provides a straightforward GUI for adding, editing and deleting turn lanes."/>
                <attribute name="Plugin-Icon" value="images/dialogs/turnlanes.png" />
                <attribute name="Plugin-Link" value="http://wiki.openstreetmap.org/wiki/Relations/Proposed/turn_lanes#Plugin" />
                <attribute name="Plugin-Mainversion" value="${plugin.main.version}"/>
                <attribute name="Plugin-Version" value="${version.entry.commit.revision}"/>
            </manifest>
        </jar>
    </target>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="turnrestrictions" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Adapt to JOSM core change (DefaultNameFormatter)"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6887"/>

    <property name="test.build.dir" value="test/build"/>
    <property name="eclipse.plugin.dir" value="C:\software\eclipse-3.6.1\plugins"/>

    <!--
    **********************************************************
    ** include targets that all plugins have in common
    **********************************************************
    -->
    <import file="../build-common.xml"/>
  
    <!--
    **********************************************************
    ** init - initializes the build
    **********************************************************
    -->
    <target name="init">
        <mkdir dir="${plugin.build.dir}"/>
        <mkdir dir="${test.build.dir}"/>
    </target>

    <!--
    **********************************************************
    ** clean - clean up the build environment
    **********************************************************
    -->
    <target name="clean">
        <delete dir="${plugin.build.dir}"/>
        <delete dir="${test.build.dir}"/>
        <delete file="${plugin.jar}"/>
    </target>

    <!--
    **********************************************************
    ** dist - creates the plugin jar
    **********************************************************
    -->
    <target name="dist" depends="compile,revision">
        <echo message="creating ${ant.project.name}.jar ... "/>
        <copy todir="${plugin.build.dir}/resources">
            <fileset dir="resources"/>
        </copy>
        <copy todir="${plugin.build.dir}/images">
            <fileset dir="images"/>
        </copy>
        <copy todir="${plugin.build.dir}/data">
            <fileset dir="data"/>
        </copy>
        <copy todir="${plugin.build.dir}">
            <fileset dir=".">
                <include name="README"/>
                <include name="LICENSE"/>
            </fileset>
        </copy>
        <jar destfile="${plugin.jar}" basedir="${plugin.build.dir}">
        <!--
        ************************************************
        ** configure these properties. Most of them will be copied to the plugins
        ** manifest file. Property values will also show up in the list available
        ** plugins: http://josm.openstreetmap.de/wiki/Plugins.
        **
        ************************************************
        -->
            <manifest>
                <attribute name="Author" value="Karl Guggisberg"/>
                <attribute name="Plugin-Class" value="org.openstreetmap.josm.plugins.turnrestrictions.TurnRestrictionsPlugin"/>
                <attribute name="Plugin-Date" value="${version.entry.commit.date}"/>
                <attribute name="Plugin-Description" value="The turnrestrictions plugin allows to enter maintain information about turn restrictions in the OpenStreetMap database."/>
                <attribute name="Plugin-Icon" value="images/preferences/turnrestrictions.png"/>
                <attribute name="Plugin-Link" value="http://josm.openstreetmap.de/wiki/Help/Plugin/TurnRestrictions"/>
                <attribute name="Plugin-Mainversion" value="${plugin.main.version}"/>
                <attribute name="Plugin-Version" value="${version.entry.commit.revision}"/>
            </manifest>
        </jar>
    </target>

    <!-- ************************************************************************************ -->
    <!-- * Targets for compiling and running tests                                            -->
    <!-- ************************************************************************************ -->
    <path id="groovy.path">
        <pathelement location="${eclipse.plugin.dir}/org.codehaus.groovy_1.7.5.xx-20100926-2000-e36-RC1\lib\groovy-all-1.7.5.jar"/>
    </path>
    <path id="junit.path">
        <pathelement location="${eclipse.plugin.dir}/org.junit_4.8.1.v4_8_1_v20100427-1100\junit.jar"/>
    </path>
    <path id="fest.library.path">
        <fileset dir="test/lib">
            <include name="fest-*.jar"/>
            <include name="jcp-*.jar"/>
        </fileset>
    </path>
    <path id="test.class.path">
        <pathelement location="${josm}"/>
        <pathelement location="${plugin.build.dir}"/>
        <path refid="groovy.path"/>
        <path refid="junit.path"/>
        <path refid="fest.library.path"/>
    </path>
    <path id="groovyc.path">
        <path refid="junit.path"/>
        <path refid="groovy.path"/>
        <path refid="fest.library.path"/>
        <pathelement location="${josm}"/>
        <pathelement location="${test.build.dir}"/>
        <pathelement location="${plugin.build.dir}"/>
        <!-- if we didn't explicitly put hamcrest on the class path, groovyc would
             abort and report it is missing a hamcrest class -->
        <pathelement location="test/lib/hamcrest-all-1.2.jar"/>
    </path>
    <target name="test-clean">
        <delete dir="${test.build.dir}"/>
        <mkdir dir="${test.build.dir}"/>
    </target>
    <target name="test-compile" depends="compile,test-clean" description="Compiles the test files">
        <taskdef name="groovyc" classname="org.codehaus.groovy.ant.Groovyc" classpathref="groovy.path"/>
        <echo message="compiling test infrastructor for ${plugin.jar} ... "/>
        <javac srcdir="test/src" classpathref="test.class.path" debug="true" destdir="${test.build.dir}" includes="org/openstreetmap/josm/plugins/turnrestrictions/fixtures/**/*">
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
        <echo message="compiling groovy test cases for ${plugin.jar} ... "/>
        <groovyc srcdir="test/src" destdir="${test.build.dir}" classpathref="groovyc.path">
        </groovyc>
        <echo message="compiling java test cases for ${plugin.jar} ... "/>
        <javac srcdir="test/src" classpathref="test.class.path" debug="true" destdir="${test.build.dir}">
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>
    <target name="test-run" depends="test-compile" description="Runs the junit tests">
        <delete dir="test/output"/>
        <mkdir dir="test/output"/>
        <junit printsummary="true" failureproperty="junit.failure">
            <classpath>
                <path refid="groovyc.path"/>
                <pathelement location="test/config"/>
                <!-- required for test config file -->
                <pathelement location="."/>
                <!-- required to load images from subdir 'images/' -->
            </classpath>
            <test todir="test/output" name="org.openstreetmap.josm.plugins.turnrestrictions.AllUnitTests">
                <formatter type="xml"/>
            </test>
        </junit>
    </target>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="undelete" default="dist" basedir=".">
    <!-- enter the SVN commit message -->
    <property name="commit.message" value="adapt to core changes (backwards compatible)"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>

    <property name="plugin.author" value="Nakor"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.undelete.Undelete"/>
    <property name="plugin.description" value="Allows undeleting object from OSM database"/>
    <property name="plugin.icon" value="images/undelete.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/Undelete"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>

</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="utilsplugin2" default="dist" basedir=".">

    <!-- enter the SVN commit message -->
    <property name="commit.message" value="[josm_utilsplugin2]: search parents:/children:; multitagger: select, sync"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6317"/>

    <property name="plugin.author" value="Kalle Lampila, Upliner, Zverik, akks, joshdoe and others"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.utilsplugin2.UtilsPlugin2"/>
    <property name="plugin.description" value="Several utilities that make your life easier."/>
    <property name="plugin.icon" value="images/utils.png"/>
    <property name="plugin.link" value="http://josm.openstreetmap.de/wiki/Help/Plugin/UtilsPlugin2"/>
    <property name="plugin.stage" value="40"/>
    
    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>

</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="videomapping" default="dist" basedir=".">

    <!-- enter the SVN commit message -->
    <property name="commit.message" value="fix after JOSM update"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>

    <!--
    **********************************************************
    ** include targets that all plugins have in common
    **********************************************************
    -->
    <import file="../build-common.xml"/>

    <property name="vlcj" value="${plugin.lib.dir}/vlcj-2.1.0.jar"/>
    <property name="jna" value="${plugin.lib.dir}/jna-3.4.0.jar"/>
    <property name="platform" value="${plugin.lib.dir}/platform-3.4.0.jar"/>
    <!-- classpath -->
    <path id="classpath">
        <pathelement path="${josm}"/>
        <pathelement location="${vlcj}"/>
        <!--Add extra libraries -->
        <pathelement location="${jna}"/>
        <pathelement location="${platform}"/>
        <fileset dir="../log4j/lib">
            <include name="**/*.jar"/>
        </fileset>
    </path>
    <!--
    **********************************************************
    ** compile - complies the source tree
    ** Overrides the target from build-common.xml
    **********************************************************
    -->
    <target name="compile" depends="init">
        <echo message="compiling sources for ${plugin.jar} ..."/>
        <javac srcdir="src" classpathref="classpath" debug="true" destdir="${plugin.build.dir}" encoding="UTF-8">
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>

    <!--
    **********************************************************
    ** dist - creates the plugin jar
    **********************************************************
    -->
    <target name="dist" depends="compile,revision">
        <echo message="creating ${ant.project.name}.jar ... "/>
        <copy todir="${plugin.build.dir}/resources">
            <fileset dir="resources"/>
        </copy>
        <copy todir="${plugin.build.dir}/images">
            <fileset dir="images"/>
        </copy>
        <copy todir="${plugin.build.dir}/data">
            <fileset dir="data"/>
        </copy>
        <copy todir="${plugin.build.dir}">
            <fileset dir=".">
                <include name="README"/>
                <include name="LICENSE"/>
            </fileset>
        </copy>
        <jar destfile="${plugin.jar}" basedir="${plugin.build.dir}">
        <!--
        ************************************************
        ** configure these properties. Most of them will be copied to the plugins
        ** manifest file. Property values will also show up in the list available
        ** plugins: http://josm.openstreetmap.de/wiki/Plugins.
        **
        ************************************************
        -->
            <manifest>
                <attribute name="Author" value="Matthias Meißer"/>
                <attribute name="Plugin-Class" value="org.openstreetmap.josm.plugins.videomapping.VideoPlugin"/>
                <attribute name="Plugin-Date" value="${version.entry.commit.date}"/>
                <attribute name="Plugin-Description" value="(This Plugin is currently work in progress!!!) Links and syncs a georeferenced video against a GPS track, to use it for identify visible objects."/>
                <attribute name="Plugin-Link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/VideoMapping"/>
                <attribute name="Plugin-Icon" value="images/videomapping.png"/>
                <attribute name="Plugin-Mainversion" value="${plugin.main.version}"/>
                <attribute name="Plugin-Requires" value="log4j"/>
                <attribute name="Plugin-Version" value="${version.entry.commit.revision}"/>
            </manifest>
            <!--added to bundle libs-->
            <zipfileset src="${jna}"/>
            <zipfileset src="${platform}"/>
            <zipfileset src="${vlcj}"/>
        </jar>
    </target>
</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="walkingpapers" default="dist" basedir=".">

    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Changed the constructor signature of the plugin main class"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>

    <property name="plugin.author" value="Frederik Ram"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.walkingpapers.WalkingPapersPlugin"/>
    <property name="plugin.description" value="Supports downloading tiled, scanned maps from walking-papers.org. This plugin is still under early development and may be buggy."/>
    <property name="plugin.icon" value="images/preferences/walkingpapers.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/index.php/JOSM/Plugins/WalkingPapers"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>

</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="waydownloader" default="dist" basedir=".">

    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Changed the constructor signature of the plugin main class"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6203"/>

    <property name="plugin.author" value="Harry Wood"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.waydownloader.WayDownloaderPlugin"/>
    <property name="plugin.description" value="Easy downloading along a long set of interconnected ways"/>
    <property name="plugin.icon" value="images/way-download.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/WayDownloaderPlugin"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>

</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="waypoint_search" default="dist" basedir=".">

    <!-- enter the SVN commit message -->
    <property name="commit.message" value="bugfix of search when layer is added"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>

    <property name="plugin.author" value="Åsmund Realfsen - realfsen at gmx.net"/>
    <property name="plugin.class"  value="org.openstreetmap.josm.plugins.waypointSearch.WaypointSearchPlugin"/>
    <property name="plugin.description" value="Enables searching for waypoint imported from gpx file."/>
    <property name="plugin.icon" value="images/WaypointSearch.png"/>
        
    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>

</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="wayselector" default="dist" basedir=".">

    <!-- enter the SVN commit message -->
    <property name="commit.message" value="recompile due to core change"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>

    <property name="plugin.author" value="Marko Mäkelä"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.wayselector.WaySelectorPlugin"/>
    <property name="plugin.description" value="Select a sequence of non-branching connected ways"/>
    <property name="plugin.icon" value="images/way-select.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/WaySelectorPlugin"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>

</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="wikipedia" default="dist" basedir=".">

    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Commit message"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>

    <property name="plugin.author" value="simon04"/>
    <property name="plugin.class" value="org.wikipedia.WikipediaPlugin"/>
    <property name="plugin.description" value="Simplifys linking OSM objects to Wikipedia articles"/>
    <property name="plugin.icon" value="images/dialogs/wikipedia.png"/>
    <property name="plugin.link" value="http://josm.openstreetmap.de/wiki/Help/Plugin/Wikipedia"/>

    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>

</project>
<?xml version="1.0" encoding="utf-8"?>
<project name="wms-turbo-challenge2" default="dist" basedir=".">

    <!-- enter the SVN commit message -->
    <property name="commit.message" value="Commit message"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="6162"/>

    <property name="plugin.author" value="Andrzej Zaborowski"/>
    <property name="plugin.class"  value="wmsturbochallenge.WMSRacer"/>
    <property name="plugin.description" value="Drive a race car from point A to point B over aerial imagery, leave cacti behind."/>
    <property name="plugin.icon" value="images/wmsracer.png"/>
    <property name="plugin.link" value="http://wiki.openstreetmap.org/wiki/JOSM/Plugins/WMS_Racer"/>
        
    <!-- ** include targets that all plugins have in common ** -->
    <import file="../build-common.xml"/>

</project>
