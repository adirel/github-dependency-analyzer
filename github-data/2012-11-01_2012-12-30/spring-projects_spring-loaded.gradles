allprojects {
    configurations {
        tools
    }

    repositories {
        mavenCentral()
	maven {
		url "http://maven.springframework.org/milestone"
	}
    }
}


subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply from: "$rootDir/gradle/publish-maven.gradle"
	
    sourceCompatibility = 1.6
    targetCompatibility = 1.6
}

configure(subprojects.findAll { it.name.startsWith('testdata')}) {
	tasks.findByPath("artifactoryPublish")?.enabled = false
}
apply plugin: 'maven'

group = "org.springframework"
jar.baseName = 'springloaded'

sourceCompatibility = 1.5
targetCompatibility = 1.5

task writeNewPom << {
  pom {
    project  {
      inceptionYear '2013'
      licenses {
        license {
          name 'The Apache Software License, Version 2.0'
		  url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          distribution 'repo'
        }
      }
    }
  }.writeTo("$buildDir/springloaded.pom");
}

compileJava {
	options.debug = true
}

configurations {
	testCompileOnly
}

task wrapper(type: Wrapper) {
	gradleVersion = '1.8'
}

dependencies {
	tools 'com.googlecode.jarjar:jarjar:1.3'

/*
	compile 'asm:asm:3.2'
	compile 'asm:asm-tree:3.2'
*/
	compile 'org.ow2.asm:asm:5.0_BETA'
	compile 'org.ow2.asm:asm-tree:5.0_BETA'

	testCompile 'junit:junit:4.11'
	
	testCompileOnly files("../testdata-groovy/groovy-all-1.8.6.jar")
	testCompileOnly project(':testdata')
	testCompileOnly project(':testdata-aspectj')
	testCompileOnly project(':testdata-groovy')
	testCompileOnly project(':testdata-java8')
	testCompileOnly project(':testdata-plugin')
	testCompileOnly project(':testdata-subloader')
	testCompileOnly project(':testdata-superloader')
}

sourceSets {  
    test {  
        compileClasspath += configurations.testCompileOnly  
    }  
}  

test {
	jvmArgs "-noverify"
	ignoreFailures true
	systemProperties["springloaded.tests.useGradleBuildDir"] = true
	systemProperties["springloaded.tests.generatedTests"] = System.getProperty("generatedTests", "false")
}

// org.springsource.loaded-VERSION.jar
jar {
    from 'LICENSES/LICENSE'
    baseName = 'org.springsource.loaded'
}

// org.springsource.loaded-VERSION-sources.jar
task sourcesJar(type: Jar, dependsOn:classes) {     
    baseName = 'org.springsource.loaded'
	classifier = 'sources'     
	from sourceSets.main.allSource 
}

task agentSourcesJar(type: Jar, dependsOn:classes) {
    baseName = 'springloaded'
    classifier = 'sources'
    from sourceSets.main.allSource
}

//task agentjar(type: Jar, dependsOn: [jar,writeNewPom]) {
task agentjar(type: Jar, dependsOn: jar) {
    manifest {
        from('src/main/java/META-INF/MANIFEST.MF') {
            eachEntry { details ->
		        if (details.key == 'Specification-Version' ||
                    details.key == 'Implementation-Version') {
                    details.value = version;
                }
            }
        }
    }

    inputs.files jar.archivePath
    baseName = 'springloaded'
	
    doLast {
        project.ant {
            taskdef name: "jarjar", classname: "com.tonicsystems.jarjar.JarJarTask", classpath: configurations.tools.asPath
            jarjar(jarfile: archivePath, manifest: "$temporaryDir/MANIFEST.MF") {
                zipfileset(src: jar.archivePath)
                configurations.compile.files.each { jarjarFile ->
                    zipfileset(src: jarjarFile)
                }
                rule pattern: "org.objectweb.asm.**", result: "sl.org.objectweb.asm.@1"
            }
        }
    }
}

task javadocJar(type: Jar) {
    classifier="javadoc"
    from javadoc
}

// add the jars as artifacts
artifacts {      
	archives sourcesJar      
	archives agentjar
	archives javadocJar
	archives agentSourcesJar      
}

configurations.archives.artifacts.removeAll(
  configurations.archives.allArtifacts.findAll { it.file.toString().indexOf("org.springsource.loaded")!=-1}
)
def aspectjVersion = "1.8.0.M1"

configurations {
	aspects
	ajInpath
}

dependencies {
	tools "org.aspectj:aspectjtools:$aspectjVersion"
	compile "org.aspectj:aspectjrt:$aspectjVersion"
	compile("cglib:cglib:2.2.2") { exclude group: 'asm' } // cglib 2.2.2 depends on asm 3.3
        compile 'org.ow2.asm:asm:5.0_BETA'
	compile 'org.ow2.asm:asm-tree:5.0_BETA'
	compile files("code.jar")
}

compileJava.deleteAllActions()

task aspectJ(dependsOn: JavaPlugin.PROCESS_RESOURCES_TASK_NAME)  {
	dependsOn configurations.tools.getTaskDependencyFromProjectDependency(true, "compileJava")
	def srcDirs = sourceSets.main.java.srcDirs
	srcDirs.each { inputs.dir it }
	def destDir = sourceSets.main.output.classesDir
	outputs.dir destDir
	doLast {
		ant.taskdef(resource: "org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties", classpath: configurations.tools.asPath)

		ant.iajc(source:sourceCompatibility, target:targetCompatibility, destDir: destDir.absolutePath, maxmem:"512m", fork:"true",
		aspectPath: configurations.aspects.asPath, inpath:configurations.ajInpath.asPath, sourceRootCopyFilter:"**/.svn/*,**/*.java",classpath:configurations.compile.asPath ){
			sourceroots {
				srcDirs.each {
					if (it.exists()) pathelement location: it.absolutePath
				}
			}
		}
	}
}

compileJava.dependsOn aspectJ

apply plugin: "groovy"

dependencies {
	compile 'org.codehaus.groovy:groovy:1.8.2'
}

sourceSets {
	main {
		groovy {
			srcDir 'src'
		}
	}
}

apply plugin: 'java'
sourceCompatibility = 1.8
targetCompatibility = 1.8
dependencies {
	compile project(":springloaded")
}

sourceSets {
	main {
		java {
			srcDir 'src'
		}
	}
}
dependencies {
	compile project(":testdata-superloader")
}

sourceSets {
	main {
		java {
			srcDir 'src'
		}
	}
}
dependencies {
	compile("cglib:cglib:2.2.2") { exclude group: 'asm' } // cglib 2.2.2 depends on asm 3.3
}
dependencies {
/*
	tools "org.aspectj:aspectjtools:$aspectjVersion"
	compile "org.aspectj:aspectjrt:$aspectjVersion"
*/
	compile("cglib:cglib:2.2.2") { exclude group: 'asm' } // cglib 2.2.2 depends on asm 3.3
        compile 'org.ow2.asm:asm:5.0_BETA'
	compile 'org.ow2.asm:asm-tree:5.0_BETA'
	compile files("code.jar")
}
sourceSets {
        main {
                java {
                        srcDir 'src'
                }
        }
}
