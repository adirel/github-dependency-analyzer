<project name="lightcrafts" default="build">

  <tstamp/>

  <!--===== Properties =====================================================-->

  <property file="resources/com/lightcrafts/utils/resources/Version.properties"/>

  <property name="common-jar" value="products/lightcrafts.jar"/>

  <property name="lcjai-jar" value="products/lcjai.jar"/>

	<exec executable="cat" vmlauncher="false" failonerror="true"
	      outputproperty="app-version">
		<arg value="version.txt"/>
	</exec>

  <condition property="UNIVERSAL" value="1" else="0">
    <isset property="UNIVERSAL"/>
  </condition>
  <condition property="USE_ICC" value="1" else="0">
    <isset property="USE_ICC"/>
  </condition>

	<!--===== Application build ==============================================-->

  <condition property="jai-classpath"
             value="../windows/lib/mlibwrapper_jai.jar">
    <not>
      <os family="mac"/>
    </not>
  </condition>

  <target name="javac">
    <exec executable="make" dir="products" failonerror="true"
          vmlauncher="false"/>

    <mkdir dir="extbuild"/>
    <javac srcdir="extsrc" destdir="extbuild" source="1.5" target="1.5"
           debug="true" classpath="${jai-classpath}"/>

    <mkdir dir="build"/>
    <javac destdir="build" source="1.5" target="1.5" debug="true">
      <src path="src"/>
      <classpath>
        <pathelement path="extbuild"/>
        <fileset dir="lib">
          <include name="*.jar"/>
        </fileset>
      </classpath>
    </javac>
  </target>

  <target name="coprocesses">
    <exec executable="make" dir="coprocesses" failonerror="true"
          vmlauncher="false">
      <arg value="USE_ICC=${USE_ICC}"/>
      <arg value="UNIVERSAL=${UNIVERSAL}"/>
    </exec>
  </target>

  <target name="revision">
    <mkdir dir="build/com/lightcrafts/utils/resources"/>
    <exec executable="svn">
      <arg value="info"/>
      <redirector output="build/com/lightcrafts/utils/resources/Revision"
                  logError="true"/>
    </exec>
    <copy file="version.txt"
          tofile="build/com/lightcrafts/utils/resources/Version"/>
  </target>

  <target name="resources" depends="revision">
    <copy todir="build">
      <fileset dir="resources" excludes=".svn"/>
      <fileset dir="locale" excludes=".svn"/>
    </copy>
  </target>

  <target name="jni">
    <exec executable="make" dir="jnisrc" failonerror="true" vmlauncher="false">
      <arg value="USE_ICC=${USE_ICC}"/>
      <arg value="UNIVERSAL=${UNIVERSAL}"/>
    </exec>
  </target>

  <target name="build" depends="javac, coprocesses, resources, jni"/>

	<!--===== Make a jar file ================================================-->

  <target name="jar" depends="build">
    <delete file="${common-jar}"/>
    <jar jarfile="${common-jar}">
      <fileset dir="build"/>
      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Main-Class" value="com.lightcrafts.app.Application"/>
        <attribute name="Implementation-Title" value="${app-name}"/>
        <attribute name="Implementation-Vendor" value="Light Crafts, Inc."/>
        <attribute name="Implementation-Version"
                   value="${app-version} ${TODAY}"/>
      </manifest>
    </jar>

    <delete file="${lcjai-jar}"/>
    <jar jarfile="${lcjai-jar}">
      <fileset dir="extbuild"/>
      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Implementation-Title" value="${app-name}"/>
        <attribute name="Implementation-Vendor" value="Light Crafts, Inc."/>
        <attribute name="Implementation-Version"
                   value="${app-version} ${TODAY}"/>
      </manifest>
    </jar>
  </target>

  <target name="check-for-jar">
    <condition property="jar-exists">
      <available file="${common-jar}"/>
    </condition>
  </target>

  <target name="jar-if-necessary" depends="check-for-jar" unless="jar-exists">
    <antcall target="jar"/>
  </target>

	<!--===== Make test ======================================================-->

  <target name="test" depends="build">
    <ant dir="test" target="build"/>
    <ant dir="test" target="docs-test"/>
  </target>

	<!--===== Run the application ============================================-->

  <target name="run" depends="jar-if-necessary">
    <java classname="com.lightcrafts.app.Application" dir="products"
          failonerror="true" fork="true" maxmemory="768m">
      <classpath>
        <fileset dir="products">
          <include name="*.jar"/>
        </fileset>
      </classpath>
      <sysproperty key="java.library.path" value="."/>
      <sysproperty key="lightcrafts.debug" value="1"/>
    </java>
  </target>

  <!-- Same as the "run" target, but with the test classes in the classpath: -->
  <target name="run-test" depends="jar-if-necessary">
    <java classname="com.lightcrafts.app.Application" dir="products"
          failonerror="true" fork="true" maxmemory="768m">
      <classpath>
        <fileset dir="products">
          <include name="*.jar"/>
        </fileset>
        <pathelement path="test/build"/>
      </classpath>
      <assertions>
        <enable/>
      </assertions>
      <sysproperty key="java.library.path" value="."/>
      <sysproperty key="lightcrafts.debug" value="1"/>
      <sysproperty key="com.sun.management.jmxremote" value=""/>
      <jvmarg value="-Xdebug"/>
      <jvmarg value="-Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n"/>
    </java>
  </target>

	<!--===== Javadoc ========================================================-->

  <target name="javadoc">
    <mkdir dir="doc"/>
    <javadoc destdir="doc">
      <fileset dir="src"/>
    </javadoc>
  </target>

  <!--===== Clean up =======================================================-->

  <target name="clean-up">
    <delete dir="build"/>
    <delete dir="extbuild"/>
    <exec executable="make" dir="jnisrc">
      <arg value="${clean-method}"/>
    </exec>
    <exec executable="make" dir="coprocesses">
      <arg value="${clean-method}"/>
    </exec>
    <exec executable="make" dir="products">
      <arg value="${clean-method}"/>
    </exec>
    <ant dir="test" target="${clean-method}"/>
  </target>

  <target name="distclean">
    <antcall target="clean-up">
      <param name="clean-method" value="distclean"/>
    </antcall>
  </target>
  <target name="clean" depends="distclean"/>

  <target name="mostlyclean">
    <antcall target="clean-up">
      <param name="clean-method" value="mostlyclean"/>
    </antcall>
  </target>

</project>
<!-- vim:set et sw=2 ts=2: -->
<project name="test" default="build">

  <property environment="ENV"/>

  <property name="home" value="${ENV.HOME}"/>
  <property name="pwd" value="${ENV.PWD}"/>
  <property name="test-dir" value="${ENV.LZ_TESTDIR}"/>

  <path id="classpath">
    <pathelement location="lib/junit.jar"/>
    <pathelement location="../build"/>
    <pathelement location="../extbuild"/>
  </path>

  <condition property="ld-path" value="../bin">
		<os family="unix"/> <!-- "unix" includes "Mac OS X" -->
  </condition>

  <condition property="ld-path" value="..\bin;..\lib\jclib4jai\windows\i386;..\lib\mediaLib\windows\i386">
		<os family="windows"/>
  </condition>

  <target name="javac">
    <mkdir dir="build"/>
    <javac destdir="build" debug="true">
      <src path="src"/>
      <classpath refid="classpath"/>
    </javac>
  </target>

  <target name="javadoc">
    <mkdir dir="doc"/>
    <javadoc destdir="doc">
      <fileset dir="src"/>
    </javadoc>
  </target>

  <target name="resources">
    <copy todir="build">
      <fileset dir="resources"/>
    </copy>
  </target>

<!--  <target name="build" depends="javac,resources"/> -->
  <target name="build" depends="javac"/>

  <target name="distclean">
    <delete dir="build"/>
    <delete dir="doc"/>
  </target>
  <target name="clean" depends="distclean"/>
  <target name="mostlyclean" depends="distclean"/>

  <target name="docs-test">
    <java classname="com.lightcrafts.app.test.DocumentTest" fork="true">
      <classpath>
        <path refid="classpath"/>
        <pathelement path="build"/>
      </classpath>
      <sysproperty key="java.library.path" value="${ld-path}"/>
      <jvmarg value="-Xmx512m"/>
      <arg line="docs"/>
    </java>
  </target>

  <target name="metadata-explorer">
    <java classname="com.lightcrafts.ui.metadata.test.MetadataExplorer" fork="true">
      <classpath>
        <path refid="classpath"/>
        <pathelement path="build"/>
      </classpath>
      <sysproperty key="java.library.path" value="${ld-path}"/>
      <jvmarg value="-Xmx512m"/>
      <arg line="/home/anton/test"/>
    </java>
  </target>

  <target name="metadata-test">
    <property name="dir" value="${test-dir}"/>
    <junit dir="${dir}" showoutput="true" printsummary="withOutAndErr" fork="true">
      <formatter type="plain"/>
      <test name="com.lightcrafts.image.metadata.BulkMetadataTester" outfile="metadata-test"/>
      <classpath>
        <path refid="classpath"/>
        <pathelement path="build"/>
      </classpath>
      <sysproperty key="java.library.path" value="${pwd}/${ld-path}"/>
      <jvmarg value="-Xmx512m"/>
    </junit>
  </target>
  <target name="bmt" depends="metadata-test"/>

  <target name="image-test">
    <property name="dir" value="${test-dir}"/>
    <junit dir="${dir}" showoutput="true" printsummary="withOutAndErr" fork="true">
      <formatter type="plain"/>
      <test name="com.lightcrafts.image.metadata.BulkImageTester" outfile="image-test"/>
      <classpath>
        <path refid="classpath"/>
        <pathelement path="build"/>
      </classpath>
      <sysproperty key="java.library.path" value="${pwd}/${ld-path}"/>
      <jvmarg value="-Xmx512m"/>
    </junit>
  </target>
  <target name="bit" depends="image-test"/>

  <target name="region-test">
    <java classname="com.lightcrafts.ui.region.test.RegionOverlayTest" fork="true">
      <classpath>
        <path refid="classpath"/>
        <pathelement path="build"/>
      </classpath>
      <sysproperty key="java.library.path" value="${ld-path}"/>
      <jvmarg value="-Xmx512m"/>
<!--      <jvmarg value="-Dsun.java2d.trace=timestamp,log,count"/> -->
      <arg line="/home/anton/photos"/>
    </java>
  </target>

  <target name="crop-test">
    <java classname="com.lightcrafts.ui.crop.test.CropTest" fork="true">
      <classpath>
        <path refid="classpath"/>
        <pathelement path="build"/>
      </classpath>
      <sysproperty key="java.library.path" value="${ld-path}"/>
      <jvmarg value="-Xmx512m"/>
    </java>
  </target>

  <target name="memory-meter-test">
    <java classname="com.lightcrafts.ui.test.MemoryMeterTest" fork="true">
      <classpath>
        <path refid="classpath"/>
        <pathelement path="build"/>
      </classpath>
      <sysproperty key="java.library.path" value="${ld-path}"/>
      <jvmarg value="-Xmx512m"/>
    </java>
  </target>

  <target name="engine-test">
    <java classname="com.lightcrafts.model.test.EngineTest" fork="true">
      <classpath>
        <path refid="classpath"/>
        <pathelement path="build"/>
      </classpath>
      <sysproperty key="java.library.path" value="${ld-path}"/>
      <jvmarg value="-Xmx512m"/>
      <arg line="/home/anton/test/iris.jpg"/>
    </java>
  </target>

</project>
<!-- vim:set sw=2 ts=2: -->
<project name="linux" default="jar">

  <tstamp/>

  <!--===== Properties =====================================================-->

  <property name="common-dir" value="../lightcrafts"/>

  <!-- The default maxmemory for the run* targets. -->
  <property name="maxmemory" value="256m"/>

  <exec executable="cat" vmlauncher="false" failonerror="true"
        outputproperty="app-version">
    <arg value="${common-dir}/version.txt"/>
  </exec>

  <!--===== Application build ==============================================-->

  <target name="common">
    <ant dir="${common-dir}" target="jar"/>
    <exec executable="make" dir="products" failonerror="true"
          vmlauncher="false"/>
  </target>

  <target name="javac" depends="common">
    <mkdir dir="build"/>
    <javac destdir="build" source="1.5" debug="true">
      <src path="src"/>
      <classpath>
        <fileset dir="${common-dir}/products">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="lib">
          <include name="*.jar"/>
        </fileset>
      </classpath>
    </javac>
  </target>

  <target name="jni">
    <exec executable="make" dir="jnisrc" failonerror="true" vmlauncher="false"/>
  </target>

  <target name="locales">
    <copy todir="build">
      <fileset dir="locale" excludes=".svn"/>
    </copy>
  </target>

  <target name="help">
    <ant dir="help" target="build"/>
  </target>

  <target name="build" depends="javac, jni, locales, help"/>

  <!--===== Make the jar files =============================================-->

  <target name="jar" depends="build">
    <delete file="products/lightcrafts-linux.jar"/>
    <jar jarfile="products/lightcrafts-linux.jar">
      <fileset dir="build"/>
      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Implementation-Vendor" value="Light Crafts, Inc."/>
        <attribute name="Implementation-Version"
                   value="${app-version} ${TODAY}"/>
      </manifest>
    </jar>
  </target>

  <!--===== Run the application ============================================-->

  <target name="run">
    <java classname="com.lightcrafts.platform.linux.LinuxLauncher"
          dir="products" failonerror="true" fork="true"
          maxmemory="${maxmemory}">
      <classpath>
        <fileset dir="products">
          <include name="*.jar"/>
        </fileset>
      </classpath>
      <env key="LD_LIBRARY_PATH" value="."/>
      <sysproperty key="java.library.path" value="."/>
      <sysproperty key="com.lightcrafts.licensetype" value="ESD"/>
      <sysproperty key="lightcrafts.debug" value="1"/>
    </java>
  </target>

  <!--===== Generate an Archive ============================================-->

  <target name="archive" depends="jar">
    <exec executable="install4jc" failonerror="true">
      <!-- The "-D LZ_VERSION=..." has to be given to install4j as two seperate
           arguments, hence the use of line= rather than value= since the
           latter, even if there's a space in it, will be given as a single
           argument containing a space and not as two seperate arguments. -->
      <arg line="-D LZ_VERSION=${app-version}"/>
      <arg file="lightzone.install4j"/>
    </exec>
  </target>

  <target name="labelled-archive" depends="archive">
    <exec executable="${common-dir}/tools/bin/lc-svn-revision"
          outputproperty="svn-revision" vmlauncher="false" failonerror="true"/>

    <!-- CruiseControl puts its build label in the "label" property -->
    <mkdir dir="archive"/>
    <move file="LightZone.tar.gz"
          tofile="archive/LightZone-rev.${svn-revision}.tar.gz"/>
  </target>

  <!--===== Sign All Jars ==================================================-->

  <target name="sign" depends="jar">
    <signjar jar="products/lightcrafts.jar" lazy="true" alias="anton" storepass="xxxxxx"/>
    <signjar jar="products/lightcrafts-linux.jar" lazy="true" alias="anton" storepass="xxxxxx"/>
    <signjar jar="products/linux-so.jar" lazy="true" alias="anton" storepass="xxxxxx"/>
    <signjar jar="products/lcjai.jar" lazy="true" alias="anton" storepass="xxxxxx"/>
    <signjar jar="products/mlibwrapper_jai.jar" lazy="true" alias="anton" storepass="xxxxxx"/>
  </target>

  <!--===== Assemble the WebStart Site =====================================-->

  <target name="webstart">
    <delete dir="webstart"/>
    <mkdir dir="webstart"/>

    <!-- bundle native libraries into a jar and sign it -->
    <delete file="products/linux-so.jar"/>
    <jar jarfile="products/linux-so.jar">
      <fileset dir="products" includes="*.so"/>
      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Implementation-Vendor" value="Light Crafts, Inc."/>
        <attribute name="Implementation-Version"
                   value="${app-version} ${TODAY}"/>
      </manifest>
    </jar>
    <antcall target="sign"/>

    <copy todir="webstart">
      <fileset dir="web"/>  <!-- the static webstart content -->
      <fileset dir="products" includes="*.jar"/>
    </copy>
  </target>

  <!--===== Clean up =======================================================-->

  <target name="distclean">
    <ant dir="${common-dir}" target="distclean"/>
    <ant dir="help" target="clean"/>
    <delete dir="archive"/>
    <delete dir="build"/>
    <delete dir="webstart"/>
    <delete file="LightZone.tar.gz"/>
    <exec executable="make" dir="products">
      <arg value="distclean"/>
    </exec>
  </target>
  <target name="clean" depends="distclean"/>

</project>
<!-- vim:set et sw=2 ts=2: -->
<project name="linux-help" default="build">

    <property environment="ENV"/>

    <target name="copy">
        <mkdir dir="build"/>
        <copy todir="build">
            <fileset dir="../../lightcrafts/help" includes="**"/>
            <fileset file="LightZone.hs"/>
            <fileset file="LightZoneTOC.xml"/>
            <fileset file="Map.jhm"/>
            <fileset file="Platform.css"/>
        </copy>
        <copy todir="build/images">
            <fileset dir="images" includes="**"/>
        </copy>
    </target>

    <target name="tidy">
        <exec executable="../../tidyall.sh" dir="build/English" vmlauncher="false" failonerror="true"/>
    </target>

    <target name="index">
        <exec executable="jhindexer" dir="build" vmlauncher="false" failonerror="true">
            <arg value="."/>
        </exec>
    </target>

    <target name="jar">
        <jar jarfile="lightzonehelp.jar">
            <fileset dir="build" includes="**" excludes="English/**,neutral/**,JavaHelpSearch/**"/>
            <fileset dir="build/English" includes="**"/>
            <fileset dir="build/neutral" includes="**"/>
        </jar>
    </target>

    <target name="build">
        <antcall target="clean"/>
        <antcall target="copy"/>
        <antcall target="tidy"/>
        <antcall target="index"/>
        <antcall target="jar"/>
        <copy todir="../products" file="lightzonehelp.jar"/>
    </target>

    <target name="run">
        <fail unless="ENV.JH_HOME" message="Please define JH_HOME"/>
        <java jar="${ENV.JH_HOME}/demos/bin/hsviewer.jar" fork="true">
            <arg line="-helpset ./lightzonehelp.jar"/>
        </java>
    </target>

    <target name="clean">
        <delete file="lightzonehelp.jar"/>
        <delete dir="build"/>
    </target>

</project>
<project name="macosx" default="build">

  <tstamp/>

  <!--===== Properties =====================================================-->

  <property name="common-dir" value="../lightcrafts"/>
  <property file="${common-dir}/resources/com/lightcrafts/utils/resources/Version.properties"/>

  <property name="app-dir" value="release"/>
  <property name="macosx-jar" value="products/lightcrafts-apple.jar"/>

  <!-- The default maxmemory for the run target. -->
  <property name="maxmemory" value="256m"/>

  <!-- The default JVM version for the run target. -->
  <property name="jvm-version" value="1.5"/>

  <exec executable="cat" vmlauncher="false" failonerror="true"
        outputproperty="app-version">
    <arg value="${common-dir}/version.txt"/>
  </exec>

  <condition property="UNIVERSAL" value="1" else="0">
    <isset property="UNIVERSAL"/>
  </condition>
  <condition property="USE_ICC" value="1" else="0">
    <isset property="USE_ICC"/>
  </condition>

  <!--===== Application build ==============================================-->

  <target name="common">
    <ant dir="${common-dir}" target="jar"/>
    <exec executable="make" dir="products" failonerror="true"
          vmlauncher="false"/>
  </target>

  <target name="javac" depends="common">
    <mkdir dir="build"/>
    <javac destdir="build" source="1.5" target="1.5" debug="true">
      <src path="src"/>
      <classpath>
        <pathelement location="/System/Library/Java/"/>
        <fileset dir="${common-dir}/products">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="lib">
          <include name="*.jar"/>
        </fileset>
      </classpath>
    </javac>
  </target>

  <target name="locale">
    <copy todir="build">
      <fileset dir="locale" excludes=".svn"/>
    </copy>
  </target>

  <target name="jni">
    <exec executable="make" dir="jnisrc" failonerror="true" vmlauncher="false">
      <arg value="UNIVERSAL=${UNIVERSAL}"/>
    </exec>
  </target>

  <target name="helpers">
    <exec executable="make" dir="helpers" failonerror="true" vmlauncher="false">
      <arg value="UNIVERSAL=${UNIVERSAL}"/>
    </exec>
  </target>

  <target name="build" depends="javac, locale, jni"/>

  <!--===== Make a jar file ================================================-->

  <target name="jar" depends="build">
    <delete file="${macosx-jar}"/>
    <jar jarfile="${macosx-jar}">
      <fileset dir="build"/>
      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Implementation-Vendor" value="${company-name}"/>
        <attribute name="Implementation-Version"
                   value="${app-version} ${TODAY}"/>
      </manifest>
    </jar>
  </target>

  <target name="check-for-jar">
    <condition property="jar-exists">
      <available file="${macosx-jar}"/>
    </condition>
  </target>

  <target name="jar-if-necessary" depends="check-for-jar" unless="jar-exists">
    <antcall target="jar"/>
  </target>

  <!--===== Run the application ============================================-->

  <target name="run" depends="jar-if-necessary">
    <java classname="com.lightcrafts.platform.macosx.MacOSXLauncher"
          dir="products" failonerror="true" fork="true"
          maxmemory="${maxmemory}">
      <!--
      <jvmarg value="-XrunShark"/>
      -->
      <classpath>
        <pathelement location="/System/Library/Java/"/>
        <fileset dir="products">
          <include name="*.jar"/>
        </fileset>
      </classpath>
      <env key="JAVA_JVM_VERSION" value="${jvm-version}"/>
      <sysproperty key="com.lightcrafts.zorn" value="true"/>
      <sysproperty key="IDE" value="true"/>
      <sysproperty key="java.library.path" value="."/>
      <sysproperty key="lightcrafts.debug" value="1"/>
      <sysproperty key="apple.awt.graphics.EnableDeferredUpdates" value="false"/>
    </java>
  </target>

  <!--===== Crash Reporter bundle build ====================================-->

  <target name="crash-reporter" depends="helpers">
    <exec executable="make" dir="helpers/CrashReporter" failonerror="true"
          vmlauncher="false">
      <arg value="UNIVERSAL=${UNIVERSAL}"/>
      <arg value="bundle"/>
    </exec>
  </target>

  <!--===== Make Mac OS X application bundles ==============================-->

  <property name="bundle-contents" value="${app-dir}/${app-name}.app/Contents"/>
  <property name="bundle-resources" value="${bundle-contents}/Resources"/>

  <target name="delete-bundle">
    <delete dir="${app-dir}" quiet="true"/>
  </target>

  <target name="resources">
    <copy todir="${bundle-contents}">
      <fileset dir="resources" excludes=".svn"/>
    </copy>
  </target>

  <target name="build-bundle"
    depends="jar, crash-reporter, delete-bundle, resources">

    <exec executable="${common-dir}/tools/bin/lc-svn-revision"
          outputproperty="svn-revision" vmlauncher="false" failonerror="true"/>
    <copy file="resources/Info.plist" todir="${bundle-contents}"
          overwrite="true">
      <filterset>
        <filter token="APPNAME" value="${app-name}"/>
        <filter token="BUILD" value="${svn-revision}"/>
        <filter token="BUNDLEID" value="com.lightcrafts.${app-name}"/>
        <filter token="LICENSETYPE" value="${licensetype}"/>
        <filter token="VERSION" value="${app-version}"/>
      </filterset>
    </copy>
    <copy file="resources/lc_version.plist"
          todir="${bundle-contents}" overwrite="true">
      <filterset>
        <filter token="APPNAME" value="${app-name}"/>
        <filter token="VERSION" value="${app-version}"/>
        <filter token="BUILD" value="${svn-revision}"/>
      </filterset>
    </copy>

    <!-- The JavaAppLauncher is copied to LightZone so "LightZone" appears in
         the output of the "ps" command. -->
    <copy file="helpers/JavaAppLauncher/JavaAppLauncher"
          tofile="${bundle-contents}/MacOS/${app-name}"/>
    <chmod file="${bundle-contents}/MacOS/${app-name}" perm="775"/>
    <copy todir="${bundle-contents}/Resources">
      <fileset dir="helpers/JavaAppLauncher/Resources" excludes=".svn"/>
    </copy>

    <copy todir="${bundle-resources}/Java">
      <fileset dir="products" excludes=".svn">
        <include name="dcraw"/>
        <include name="LightZone-forkd"/>
        <include name="EWSMacCompress.tar.gz"/>
        <include name="**/*.dylib"/>
        <include name="**/*.jar"/>
        <include name="**/*.jnilib"/>
      </fileset>
    </copy>
    <chmod file="${bundle-resources}/Java/dcraw" perm="775"/>
    <chmod file="${bundle-resources}/Java/LightZone-forkd" perm="775"/>

    <copy file="helpers/eSellerateActivator/eSellerateActivate"
          todir="${bundle-resources}/Java"/>
    <chmod file="${bundle-resources}/Java/eSellerateActivate" perm="775"/>

    <exec executable="make" dir="help" failonerror="true" vmlauncher="false">
      <arg value="APP_NAME=${app-name}"/>
    </exec>

    <copy todir="${bundle-resources}/CrashReporter.app">
      <fileset dir="helpers/CrashReporter/CrashReporter.app"/>
    </copy>
    <chmod file="${bundle-resources}/CrashReporter.app/Contents/MacOS/CrashReporter"
           perm="775"/>
  </target>

  <target name="bundle-esd">
    <antcall target="build-bundle">
      <param name="licensetype" value="ESD"/>
    </antcall>
  </target>

  <target name="bundle-tb">
    <antcall target="build-bundle">
      <param name="licensetype" value="TB"/>
    </antcall>
  </target>

  <!--===== Make a dmg file ================================================-->

  <target name="dmg-esd" depends="bundle-esd">
    <exec executable="make" dir="dmg" failonerror="true" vmlauncher="false">
      <arg value="APP_NAME=${app-name}"/>
      <arg value="USE_ICC=${USE_ICC}"/>
      <arg value="UNIVERSAL=${UNIVERSAL}"/>
      <arg value="user"/>
    </exec>
  </target>

  <target name="dmg-tb" depends="bundle-tb">
    <exec executable="make" dir="dmg" failonerror="true" vmlauncher="false">
      <arg value="APP_NAME=${app-name}"/>
      <arg value="USE_ICC=${USE_ICC}"/>
      <arg value="UNIVERSAL=${UNIVERSAL}"/>
      <arg value="user"/>
    </exec>
  </target>

  <!--===== CruiseControl ==================================================-->

  <property name="cc-dir" value="dmg/cruisecontrol"/>

  <target name="cc-build">
    <antcall target="cc-clean"/>
    <exec executable="${common-dir}/tools/bin/lc-svn-branch"
          outputproperty="svn-branch" vmlauncher="false" failonerror="true"/>
    <exec executable="${common-dir}/tools/bin/lc-svn-revision"
          outputproperty="svn-revision" vmlauncher="false" failonerror="true"/>

    <mkdir dir="dmg/cruisecontrol"/>

    <antcall target="dmg-esd"/>
    <move file="dmg/${app-name}.dmg"
          tofile="${cc-dir}/${app-name}-${svn-branch}-r${svn-revision}-ESD.dmg"/>

    <antcall target="dmg-tb"/>
    <move file="dmg/${app-name}.dmg"
          tofile="${cc-dir}/${app-name}-${svn-branch}-r${svn-revision}-TB.dmg"/>
  </target>

  <target name="cc-clean">
    <delete dir="${cc-dir}"/>
  </target>

  <!--===== Make a zip file ================================================-->

  <target name="zip" depends="bundle-esd">
    <delete file="${app-dir}/${app-name}.zip"/>
    <zip destfile="${app-dir}/${app-name}.zip">
      <zipfileset dir="${app-dir}"
        excludes="${app-name}.app/Contents/MacOS/${app-name}"/>
      <zipfileset dir="${app-dir}"
        includes="${app-name}.app/Contents/MacOS/${app-name}"
        filemode="755"/>
    </zip>
  </target>

  <!--===== Javadoc ========================================================-->

  <target name="javadoc">
    <mkdir dir="doc"/>
    <javadoc destdir="doc">
      <fileset dir="src"/>
    </javadoc>
  </target>

  <!--===== Clean up =======================================================-->

  <target name="clean-up">
    <ant dir="${common-dir}" target="${clean-method}"/>
    <delete dir="build"/>
    <delete dir="${app-dir}"/>
    <exec executable="make" dir="dmg">
      <arg value="${clean-method}"/>
    </exec>
    <exec executable="make" dir="helpers">
      <arg value="UNIVERSAL=1"/>
      <arg value="${clean-method}"/>
    </exec>
    <exec executable="make" dir="jnisrc">
      <arg value="UNIVERSAL=1"/>
      <arg value="${clean-method}"/>
    </exec>
    <exec executable="make" dir="products">
      <arg value="${clean-method}"/>
    </exec>
    <antcall target="cc-clean"/>
  </target>

  <target name="distclean">
    <antcall target="clean-up">
      <param name="clean-method" value="distclean"/>
    </antcall>
  </target>
  <target name="clean" depends="distclean"/>

  <target name="mostlyclean">
    <antcall target="clean-up">
      <param name="clean-method" value="mostlyclean"/>
    </antcall>
  </target>

</project>
<!-- vim:set et sw=2 ts=2: -->
<project name="windows" default="jar">

  <tstamp/>

  <!--===== Properties =====================================================-->

  <property name="common-dir" value="../lightcrafts"/>
  <property file="${common-dir}/resources/com/lightcrafts/utils/resources/Version.properties"/>

  <property name="installer-name" value="${app-name}-Installer.exe"/>
  <property name="licensetype" value="ESD"/>
  <property name="windows-jar" value="products/lightcrafts-windows.jar"/>

  <!-- The default maxmemory for the run* targets. -->
  <property name="maxmemory" value="256m"/>

  <exec executable="cat" vmlauncher="false" failonerror="true"
        outputproperty="app-version">
    <arg value="${common-dir}/version.txt"/>
  </exec>

  <condition property="USE_ICC" value="1" else="0">
    <isset property="USE_ICC"/>
  </condition>

  <!--===== Application build ==============================================-->

  <target name="common">
    <ant dir="${common-dir}" target="jar"/>
    <exec executable="make" dir="products" failonerror="true"
          vmlauncher="false"/>
  </target>

  <target name="javac" depends="common">
    <mkdir dir="build"/>
    <javac destdir="build" source="1.5" debug="true">
      <src path="src"/>
      <classpath>
        <fileset dir="${common-dir}/products">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="lib">
          <include name="*.jar"/>
        </fileset>
      </classpath>
    </javac>
  </target>

  <target name="jni">
    <exec executable="make" dir="jnisrc" failonerror="true" vmlauncher="false"/>
  </target>

  <target name="helpers">
    <exec executable="make" dir="helpers" failonerror="true" vmlauncher="false">
      <arg value="APP_NAME=${app-name}"/>
    </exec>
  </target>

  <target name="build" depends="javac, jni"/>

  <!--===== Make a jar file ================================================-->

  <target name="jar" depends="build">
    <delete file="${windows-jar}"/>
    <jar jarfile="${windows-jar}">
      <fileset dir="build"/>
      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Implementation-Vendor" value="${company-name}"/>
        <attribute name="Implementation-Version"
                   value="${app-version} ${TODAY}"/>
      </manifest>
    </jar>
  </target>

  <target name="check-for-jar">
    <condition property="jar-exists">
      <available file="${windows-jar}"/>
    </condition>
  </target>
  
  <target name="jar-if-necessary" depends="check-for-jar" unless="jar-exists">
    <ant target="jar"/>
  </target>

  <!--===== Run the application ============================================-->

  <target name="run" depends="jar-if-necessary">
    <java classname="com.lightcrafts.platform.windows.WindowsLauncher"
          dir="products" failonerror="true" fork="true"
          maxmemory="${maxmemory}">
      <!--
      <jvmarg value="-Xincgc"/>
      -->
      <classpath>
        <fileset dir="products">
          <include name="*.jar"/>
        </fileset>
      </classpath>
      <sysproperty key="java.library.path" value="."/>
      <sysproperty key="com.lightcrafts.zorn" value="true"/>
      <sysproperty key="lightcrafts.debug" value="1"/>
      <sysproperty key="IDE" value="1"/>
    </java>
  </target>

  <!--===== Make a Windows installer =======================================-->

  <target name="build-installer-only">

    <copy file="helpers/JavaAppLauncher/${app-name}.exe"
          tofile="products/${app-name}.exe" overwrite="true"/>
    <chmod file="products/${app-name}.exe" perm="775"/>

    <exec executable="make" dir="resources/sign" failonerror="true"
          vmlauncher="false">
      <arg value="EXE_TO_SIGN=../../products/${app-name}.exe"/>
    </exec>

    <copy file="helpers/JavaAppLauncher/lightzone.jvmargs" todir="products"
          overwrite="true">
      <filterset>
        <filter token="LICENSETYPE" value="${licensetype}"/>
      </filterset>
    </copy>

    <copy file="helpers/eSellerateInstaller/eSellerateInstaller.exe"
          tofile="products/eSellerateInstaller.exe" overwrite="true"/>
    <chmod file="products/eSellerateInstaller.exe" perm="775"/>

    <exec executable="make" dir="resources/help" failonerror="true"
          vmlauncher="false">
      <arg value="APP_NAME=${app-name}"/>
    </exec>

    <exec executable="install4jc.exe" failonerror="true">
      <!-- The "-D LC_VERSION=..." has to be given to install4j as two seperate
           arguments, hence the use of line= rather than value= since the
           latter, even if there's a space in it, will be given as a single
           argument containing a space and not as two seperate arguments. -->
      <arg line="-D LC_VERSION=${app-version}"/>
      <arg file="lightzone.install4j"/>
    </exec>

    <exec executable="make" dir="resources/sign" failonerror="true"
          vmlauncher="false">
      <arg value="EXE_TO_SIGN=../../${installer-name}"/>
    </exec>

  </target>
  <target name="build-installer" depends="jar, helpers, build-installer-only"/>

  <target name="installer-esd">
    <antcall target="build-installer">
      <param name="licensetype" value="ESD"/>
    </antcall>
  </target>

  <target name="installer-tb">
    <antcall target="build-installer">
      <param name="licensetype" value="TB"/>
    </antcall>
  </target>

  <!--===== CruiseControl ==================================================-->

  <property name="cc-dir" value="cruisecontrol"/>

  <target name="cc-build">
    <antcall target="cc-clean"/>
    <exec executable="perl"
          outputproperty="svn-branch" failonerror="true" vmlauncher="false">
      <arg path="${common-dir}/tools/bin/lc-svn-branch"/>
    </exec>
    <exec executable="bash"
          outputproperty="svn-revision" failonerror="true" vmlauncher="false">
      <arg path="${common-dir}/tools/bin/lc-svn-revision"/>
    </exec>

    <mkdir dir="cruisecontrol"/>

    <antcall target="installer-esd"/>
    <move file="${installer-name}"
          tofile="${cc-dir}/${app-name}-${svn-branch}-r${svn-revision}-ESD.exe"/>

    <antcall target="installer-tb"/>
    <move file="${installer-name}"
          tofile="${cc-dir}/${app-name}-${svn-branch}-r${svn-revision}-TB.exe"/>
  </target>

  <target name="cc-clean">
    <delete dir="${cc-dir}"/>
  </target>

  <!--===== Clean up =======================================================-->

  <target name="clean-up">
    <ant dir="${common-dir}" target="${clean-method}"/>
    <delete dir="build"/>
    <delete file="${installer-name}"/>
    <exec executable="make" dir="helpers">
      <arg value="${clean-method}"/>
    </exec>
    <exec executable="make" dir="jnisrc">
      <arg value="${clean-method}"/>
    </exec>
    <exec executable="make" dir="products">
      <arg value="${clean-method}"/>
    </exec>
    <delete file="products/lightzone.jvmargs"/>
    <antcall target="cc-clean"/>
  </target>

  <target name="distclean">
    <antcall target="clean-up">
      <param name="clean-method" value="distclean"/>
    </antcall>
  </target>
  <target name="clean" depends="distclean"/>

  <target name="mostlyclean">
    <antcall target="clean-up">
      <param name="clean-method" value="mostlyclean"/>
    </antcall>
  </target>

</project>
<!-- vim:set et sw=2 ts=2: -->
