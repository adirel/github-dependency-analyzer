//build for main V7 library project


configurations { providedCompile }

sourceSets.main.compileClasspath += configurations.providedCompile
sourceSets.test.compileClasspath += configurations.providedCompile
sourceSets.test.runtimeClasspath += configurations.providedCompile


dependencies{


	//Vaadin

	//The core server part of Vaadin -->
	compile 'com.vaadin:vaadin-server:'+vaadinVersion

	//User access control
	compile 'org.apache.shiro:shiro-core:'+shiroVersion
	compile 'org.apache.shiro:shiro-web:'+shiroVersion
	compile 'org.apache.shiro:shiro-guice:'+shiroVersion


	//Testing
	testCompile 'org.easytesting:fest-assert:1.4'
	testCompile 'com.googlecode.jmockit:jmockit:1.0'

	//Date Time
	compile 'joda-time:joda-time:2.1'


	//Validation
	compile 'org.apache.bval:bval-jsr303:0.5'
	compile 'org.apache.bval:bval-guice:0.5'
	compile 'javax.validation:validation-api:1.0.0.GA'


	//Utility
	compile 'com.google.guava:guava:13.0.1'
	//the easiest way to all the Jung parts
	compile 'net.sf.jung:jung-samples:2.0.1'
	compile 'org.apache.commons:commons-lang3:3.1'
	compile 'commons-io:commons-io:2.4'
	compile 'commons-configuration:commons-configuration:1.10'
	compile 'org.reflections:reflections:0.9.9-RC1'
            

	//servlet
	compile "javax.servlet:javax.servlet-api:3.+"


//	test.testLogging.showStandardStreams = true
	
	
	//this test used to fail under Gradle, but is fixed as a result of moving to a service base approach for startup
	// see https://github.com/davidsowerby/v7/issues/156
//	test{ exclude '**/GuiceServletInjectorTest.class' }




}//master gradle build file

project.ext.vaadinVersion = '7.1.11'
project.ext.guiceVersion = '3.0'
project.ext.shiroVersion = '1.2.1'



allprojects{
        group = 'uk.co.q3c.v7'
        version = '0.5'
}

subprojects{
        apply plugin: 'java'
        apply plugin: 'eclipse-wtp'
        sourceCompatibility = 1.7
        targetCompatibility = 1.7

	

        repositories{
                mavenCentral()
        }

	dependencies{
   	  //Dependency Injection
	  compile   'com.google.inject:guice:'+guiceVersion
	  compile   'com.google.inject.extensions:guice-servlet:'+guiceVersion
	  compile   'com.google.inject.extensions:guice-assistedinject:'+guiceVersion
	  compile   'com.google.inject.extensions:guice-multibindings:'+guiceVersion

	  //Logging
	  compile 'org.slf4j:slf4j-api:1.6.6'
	  compile 'org.slf4j:slf4j-log4j12:1.6.6'


	  //testing
  	  testCompile 'com.mycila:mycila-guice:2.10.ga'
	  testCompile 'com.mycila.testing.plugins:mycila-testing-guice:2.8'
	  testCompile 'com.mycila.testing.plugins:mycila-testing-mockito:2.8'
	  testCompile 'org.mockito:mockito-all:1.9.0'
	  testCompile 'junit:junit:4.+'
	  testCompile 'org.easytesting:fest-assert:1.4'
	  testCompile 'org.assertj:assertj-core:1.5.0'
	  testCompile 'org.assertj:assertj-joda-time:1.1.0'
	  testCompile 'org.assertj:assertj-guava:1.0.0'
            
            
            
            
            
	}
}



//build for V7 demo sub-project
apply from: 'http://plugins.jasoft.fi/vaadin.plugin'

ext.tomcatHome = "/home/david/tomcat/apache-tomcat-7.0.47"


war{
	archiveName "V7demo.war"
	destinationDir file("/home/david/temp")
}

vaadin {

	widgetset "uk.co.q3c.v7.demo.widgetset.V7demoWidgetset"
	version vaadinVersion
	serverPort 8001
}


repositories{
	maven{ url "http://maven.vaadin.com/vaadin-addons" }
}

task deployToTomcat(type: Copy) {
	it.dependsOn("war")
	from war
	into "${tomcatHome}/webapps"
}


test{
	it.dependsOn ("deployToTomcat")

	//delay to allow tomcat to spin it up
	doFirst{
		println("giving Tomcat time to deploy the application")
		sleep(30 * 1000)
	}
}


dependencies {

	//UI components
	compile 'de.steinwedel.vaadin.addon:messagebox:2.0.6'


	compile project (':V7')
	compile project (':testbench')



	//use testbench project test classes as a base
	testCompile project(path: ':testbench', configuration: 'tests')
	testCompile 'com.vaadin:vaadin-testbench:3.1.2'




}




//build for V7 orient sub-project

project.ext.set('orientVersion','1.4.0')
project.ext.set('tinkerVersion', '2.3.0')


dependencies{

	compile project (':V7')
	
	//Date Time
	compile 'joda-time:joda-time:2.1'

	//Money
	compile 'org.joda:joda-money:0.8'
	
//Persistence
	//see http://code.google.com/p/orient/wiki/JavaAPI#Database_types and http://code.google.com/p/orient/wiki/GraphDatabaseTinkerpop

	compile 'javax.persistence:persistence-api:1.0.2'
	compile 'com.orientechnologies:orientdb-core:'+orientVersion
	compile 'com.orientechnologies:orient-commons:'+orientVersion

	compile 'com.orientechnologies:orientdb-client:'+orientVersion //needed for remote server
	compile 'com.orientechnologies:orientdb-enterprise:'+orientVersion //needed for remote server


	compile 'com.tinkerpop.blueprints:blueprints-core:'+tinkerVersion   //Graph Persistence
	compile 'com.tinkerpop.blueprints:blueprints-orient-graph:'+tinkerVersion  //Graph Persistence


	compile 'com.orientechnologies:orientdb-object:'+orientVersion//Object persistence




}
//build for V7 Quartz sub-project


dependencies{

	compile project (':V7')

	//Quartz	
	
	compile 'org.quartz-scheduler:quartz:2.2.1'


	
}
//build for V7 test application
apply from: 'http://plugins.jasoft.fi/vaadin.plugin'

ext.tomcatHome = "/home/david/tomcat/apache-tomcat-7.0.47"


war{
	archiveName "testapp.war"
	destinationDir file("/home/david/temp")
}

vaadin {
	widgetset "uk.co.q3c.v7.testapp.widgetset.testAppWidgetset"
	version vaadinVersion
	serverPort 8001
}




task deployToTomcat(type: Copy) {
	it.dependsOn("war")
	from war
	into "${tomcatHome}/webapps"
}


test{
	it.dependsOn ("deployToTomcat")

	//delay to allow tomcat to spin it up
	doFirst{
		println("giving Tomcat time to deploy the application")
		sleep(30 * 1000)
	}
}


dependencies {
	
	//vaadin push
	compile 'com.vaadin:vaadin-push:'+vaadinVersion

	//UI components
	compile 'de.steinwedel.vaadin.addon:messagebox:2.0.6'
	compile 'org.vaadin.addons:stepper:2.1.2'
	compile project (':V7')

	
		//use testbench project test classes as a base
	testCompile project(path: ':testbench', configuration: 'tests')
	testCompile 'com.vaadin:vaadin-testbench:3.1.2'
	



}




//Build file for testbench sub project
apply from: 'http://plugins.jasoft.fi/vaadin.plugin'


vaadin {
	
	version vaadinVersion
	serverPort 8001
}

dependencies {
	compile 'org.assertj:assertj-core:1.5.0'
	compile project(":V7")
	compile 'com.vaadin:vaadin-testbench:3.1.2'

}
//see http://stackoverflow.com/questions/5144325/gradle-test-dependency
//the testJar, configurations and artifacts closure enable tests in other projects to use these tests
//see the demo project or testApp project fopr examples
task testJar(type: Jar, dependsOn: testClasses) {
	baseName = "test-${project.archivesBaseName}"
	from sourceSets.test.output
}

configurations {
	tests
}

artifacts {
	tests testJar
}//build for V7 views sub-project
apply from: 'http://plugins.jasoft.fi/vaadin.plugin'


configurations{


}

vaadin { version vaadinVersion }


repositories{
	maven{ url "http://maven.vaadin.com/vaadin-addons" }
}

eclipse{
	processTestResources{ exclude("resources/test") }}



dependencies {

	compile project (':V7')
	compile project(':testbench')

	testCompile 'com.vaadin:vaadin-testbench:3.1.1'


}

eclipse{
	classpath{
		configurations.each { item -> println "${item}" }
	}
}



//test{ exclude '**/ViewBaseWithLayoutTest.class' }





