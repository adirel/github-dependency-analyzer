/*
 * Don't get fooled by build.gradle existence.
 * This is old Ant-based Android application.
 *
 * The script mimics some of the Ant's behavior,
 * to have a gradle subproject for testing purposes.
 *
 * Use this module in IDE as regular Android (non-NBS) project.
 *
 */

repositories {
    mavenCentral()
}

apply {
    plugin 'java' // thanks to that we get some important lifecycle elements, but turn off java compiler itself

    // IDE module code generation
    plugin 'idea'
    plugin 'eclipse'
}

// Extend eclipse metadata generated output as Android project. Not perfect but helpful
eclipse {
    project {
        natures = ['com.android.ide.eclipse.adt.AndroidNature', 'org.eclipse.jdt.core.javanature']
        [
                'com.android.ide.eclipse.adt.ResourceManagerBuilder',
                'com.android.ide.eclipse.adt.PreCompilerBuilder',
                'org.eclipse.jdt.core.javabuilder',
                'com.android.ide.eclipse.adt.ApkBuilder'
        ].each { buildCommand it }
    }

    classpath {
        file {
            whenMerged { classpath ->
                classpath.entries.removeAll { entry -> entry.path.toString() == 'org.eclipse.jdt.launching.JRE_CONTAINER' }
            }
        }
        containers 'com.android.ide.eclipse.adt.ANDROID_FRAMEWORK'
    }
}

// Intellij IDEA needs some extra configuration as well
idea {
    module {
        jdkName = 'Android 4.2.2 Platform'

        sourceDirs += file('gen')
    }
}

// thanks to that robospock tests will know where the compiled classes are
// by only depending on this module
sourceSets {
    main {
        java {
            srcDirs 'src', 'gen'
        }

        output.classesDir = 'bin/classes'
    }
}

clean {
    delete 'gen'
}

// For compilation purposes, normally handled by NBS, but in old-school ant config we need to say it out loud
dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
}

task updateAndroidProject(type: Exec) {
    inputs.file file('project.properties')
    outputs.file file('local.properties')

    commandLine 'android', 'update', 'project', '-p', '.'
}

task compileAndroid(type: Exec) {
    inputs.file file('build.xml')
    inputs.dir file('src')
    inputs.dir file('res')
    inputs.dir file('assets')

    outputs.dir file('gen')

    commandLine 'ant', 'debug'
}

// 'gradle classes' will now trigger only android project build
compileJava.enabled = false
compileAndroid.dependsOn updateAndroidProject
compileJava.dependsOn compileAndroid
apply plugin: "groovy"
apply plugin: "idea"
apply plugin: 'eclipse'

version = "0.1"
description = "RoboSpock test application"

eclipse {
    project {
        name = 'antApp-robospock-tests'
    }
}
sourceCompatibility = 1.6

repositories {
    mavenCentral()
}

dependencies {
//    compile "org.roboguice:roboguice:2.0"
//    compile "org.robolectric:robolectric:2.1.1"
//    compile "com.google.android:android:4.1.1.4"

//    groovy "org.codehaus.groovy:groovy-all:1.8.6"
//    compile "org.spockframework:spock-core:0.6-groovy-1.8"
    // we've hit bug https://issues.jboss.org/browse/JASSIST-142
    // with previous version. Robolectric uses 3.14.0, but seems to be working with this as well
//    compile "org.javassist:javassist:3.15.0-GA"
//
    compile 'org.mockito:mockito-all:1.9.0'
    compile project(':antApp')
    compile project(':robospock')

    // not safe to go to 4.11
//    compile 'junit:junit:4.10'

//    testCompile 'org.xerial:sqlite-jdbc:3.7.2'
}

test {
    workingDir = project(':antApp').file('.')
}
buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:0.9.+'
  }
}
apply plugin: 'android'
apply plugin: 'idea'

dependencies {
  compile 'com.android.support:support-v4:13.0.0'
  debugCompile 'com.android.support:support-v13:13.0.0'

  compile 'com.google.android.gms:play-services:3.1.36'
}

android {
  compileSdkVersion 15
  buildToolsVersion "19.0.3"

  testBuildType "debug"

  signingConfigs {
    myConfig {
      storeFile file("debug.keystore")
      storePassword "android"
      keyAlias "androiddebugkey"
      keyPassword "android"
    }
  }

  defaultConfig {
    versionCode 12
    versionName "2.0"
    minSdkVersion 16
    targetSdkVersion 16

    buildConfigField "boolean", "DEFAULT", "true"
    buildConfigField "String", "FOO", '"foo"'
  }

  buildTypes {
    debug {
      packageNameSuffix ".debug"
      signingConfig signingConfigs.myConfig

      buildConfigField "boolean", "DEBUG2", "false"
    }
  }

  aaptOptions {
    noCompress 'txt'
    ignoreAssetsPattern "!.svn:!.git:!.ds_store:!*.scc:.*:<dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"
  }
}
buildscript {
  repositories {
    mavenCentral()
    maven {
      url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:0.8.+'
    classpath 'com.novoda:gradle-android-test-plugin:0.9.3-SNAPSHOT'
  }
}

apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'android-test'

repositories {
  mavenLocal()
  mavenCentral()
}

dependencies {
  testCompile project(':gradleApp')
//  testCompile 'pl.polidea:RoboSpock:0.4-SNAPSHOT'
  testCompile project(':robospock')
}

android.projectUnderTest ':gradleApp'
apply {
    plugin 'groovy'
    plugin 'signing'
    plugin 'maven'
}

def artifactId = 'robospock'
group = 'org.robospock'
description = 'RoboSpock testing library'

sourceCompatibility = 1.6

repositories {
    mavenCentral()
}

dependencies {
    groovy "org.codehaus.groovy:groovy-all:1.8.6"
    compile "org.spockframework:spock-core:0.7-groovy-1.8"

    // Android part
    //compile "org.roboguice:roboguice:2.0"
    compile "org.robolectric:robolectric:2.1.+"
    compile "com.google.android:android:4.1.1.4"

    testCompile project(':antApp')
}

test {
    workingDir project(':antApp').file('.')
}

clean {
    delete 'tmp'
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.10'
}

/*
 *
 * It's all about OSS Sonatype from now to the bottom
 *
 */

// Set up for Sonatype OSS repository
def isReleaseVersion = !version.endsWith('SNAPSHOT')

// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// add javadoc/source jar the artifacts
artifacts {
    archives sourcesJar
    archives javadocJar
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask(':uploadArchives') }

    sign configurations.archives
}

def uploadUsername = project.hasProperty('sonatypeUsername') ? project['sonatypeUsername'] : ''
def uploadPassword = project.hasProperty('sonatypePassword') ? project['sonatypePassword'] : ''

uploadArchives {
    repositories.mavenDeployer {
        beforeDeployment { MavenDeployment deployment ->
            if (isReleaseVersion) {
                signing.signPom(deployment)
            }
        }

        snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
            authentication(userName: uploadUsername, password: uploadPassword)
        }

        repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
            authentication(userName: uploadUsername, password: uploadPassword)
        }

        pom.artifactId = artifactId

        pom.project {
            name 'robospock'
            packaging 'jar'
            description 'Library brings Robolectric unit tests option to Spock testing framework.'
            url 'https://github.com/Polidea/Robospock'

            scm {
                url 'scm:git@github.com:Polidea/RoboSpock.git'
                connection 'scm:git@github.com:Polidea/RoboSpock.git'
                developerConnection 'scm:git@github.com:Polidea/RoboSpock.git'
            }

            licenses {
                license {
                    name 'Apache License 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'pjakubczyk'
                    name 'Przemek Jakubczyk'
                }
                developer {
                    id 'wojtek.erbetowski'
                    name 'Wojtek Erbetowski'
                }
            }
        }
    }
}

