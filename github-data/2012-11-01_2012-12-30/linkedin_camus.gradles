apply plugin: 'java'
 
dependencies {
	compile spec.external.hadoopCore
}
 
classification="library"apply plugin: 'li-java'
 
dependencies {

	compile(project(":camus-external:camus-api"))
	compile(project(":camus-external:camus-schema-registry"))
	compile(project(":camus-external:camus-schema-registry-avro"))
	compile(project(":camus-external:camus-kafka-coders"))

	compile spec.external.log4j
	compile spec.external.avro17
	compile spec.external.avroMapred
	compile spec.external.avroIpc
	compile spec.external.jodaTime
	compile spec.external.hadoopCore
	compile spec.external.kafka
	compile spec.external.zkclient
	compile spec.external.zookeeper
	compile spec.external.scalaLibrary
	compile spec.external.gson
	compile spec.external.paranamer
	compile spec.external.junit
	compile spec.external.snappyJava
	compile fileTree(dir: '../lib', includes: ['*.jar'])

}
 
classification="library"apply plugin: 'li-java'
 
dependencies {

	compile(project(":camus-external:camus-api"))
	compile(project(":camus-external:camus-schema-registry"))
	compile(project(":camus-external:camus-schema-registry-avro"))
	compile(project(":camus-external:camus-kafka-coders"))
	compile(project(":camus-external:camus-etl-kafka"))

	compile spec.external.log4j
	compile spec.external.avro17
	compile spec.external.avroMapred
	compile spec.external.avroIpc
	compile spec.external.jodaTime
	compile spec.external.hadoopCore
	compile spec.external.kafka
	compile spec.external.zkclient
	compile spec.external.zookeeper
	compile spec.external.scalaLibrary
	compile spec.external.gson
	compile spec.external.paranamer
	compile spec.external.junit
	compile spec.external.snappyJava

}

classification="library"apply plugin: 'li-java'
 
dependencies {
		
	compile(project(":camus-external:camus-api"))
	compile(project(":camus-external:camus-schema-registry-avro"))

	compile spec.external.log4j
	compile spec.external.avro17
	compile spec.external.jodaTime
	compile spec.external.hadoopCore
	compile spec.external.kafka
	compile spec.external.scalaLibrary
	compile spec.external.gson
	compile spec.external.paranamer
	compile spec.external.junit
	compile fileTree(dir: '../lib', includes: ['*.jar'])
		
}

task testJar(type: Jar, dependsOn: testClasses) {
    baseName = "test-${project.archivesBaseName}"
    from sourceSets.test.output
}

configurations {
    tests
}

artifacts {
    tests testJar
}
 
classification="library"apply plugin: 'li-java'
 
dependencies {
	testCompile project(path: ':camus-external:camus-schema-registry', configuration: 'tests')
	
	compile (project(":camus-external:camus-api"))
	compile (project(":camus-external:camus-schema-registry"))

	compile spec.external.avro17
	compile spec.external.avroMapred
	compile spec.external.avroIpc
	compile fileTree(dir: '../lib', includes: ['*.jar'])
	compile spec.external.jodaTime
	compile spec.external.hadoopCore
	compile spec.external.paranamer
	compile spec.external.junit
	compile spec.external.snappyJava
	
}
 
classification="library"apply plugin: 'li-java'
 
dependencies {
		
	compile(project(":camus-external:camus-api"))

	compile spec.external.avro17
	compile spec.external.avroMapred
	compile spec.external.avroIpc
	compile fileTree(dir: '../lib', includes: ['*.jar'])
	compile spec.external.jodaTime
	compile spec.external.hadoopCore
	compile spec.external.paranamer
	compile spec.external.junit
	compile spec.external.snappyJava
		
}

task testJar(type: Jar, dependsOn: testClasses) {
    baseName = "test-${project.archivesBaseName}"
    from sourceSets.test.output
}

configurations {
    tests
}

artifacts {
    tests testJar
}
 
classification="library"apply plugin: 'li-java'
 
dependencies {
	compile spec.external.log4j
	compile spec.external.avro17
	compile spec.external.avroIpc
	compile spec.external.avroMapred
	compile spec.external.jodaTime
	compile spec.external.hadoopCore
	compile spec.external.paranamer
	compile spec.external.snappyJava
	compile spec.external.junit
}

classification="library"